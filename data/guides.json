{
  "metadata": {
    "totalGuides": 18,
    "lastUpdated": "2025-09-23T03:24:32.230Z",
    "buildTrigger": "manual",
    "categories": [
      "api-gateways",
      "cms",
      "container-management",
      "groupware",
      "iot-platforms",
      "miscellaneous",
      "monitoring",
      "remote-access",
      "search-engines"
    ],
    "categoriesWithMetadata": {
      "cms": {
        "name": "Cms",
        "description": "Cms tools and applications",
        "guides": [
          {
            "name": "wordpress",
            "displayName": "wordpress Installation Guide",
            "slug": "wordpress",
            "description": "wordpress is a free and open-source content management system. WordPress powers over 40% of the web with extensible CMS",
            "category": "cms",
            "subcategory": "cms",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "cms",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/cms/wordpress",
            "documentationUrl": "https://howtomgr.github.io/cms/wordpress",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/wordpress",
            "updatedAt": "2025-09-16T18:03:31Z",
            "createdAt": "2025-09-08T03:18:29Z",
            "readmeRaw": "# wordpress Installation Guide\n\nwordpress is a free and open-source content management system. WordPress powers over 40% of the web with extensible CMS\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default wordpress port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install wordpress\nsudo dnf install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwordpress --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install wordpress\nsudo apt install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nwordpress --version\n```\n\n### Arch Linux\n\n```bash\n# Install wordpress\nsudo pacman -S wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Verify installation\nwordpress --version\n```\n\n### Alpine Linux\n\n```bash\n# Install wordpress\napk add --no-cache wordpress\n\n# Enable and start service\nrc-update add wordpress default\nrc-service wordpress start\n\n# Verify installation\nwordpress --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install wordpress\nsudo zypper install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwordpress --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install wordpress\n\n# Start service\nbrew services start wordpress\n\n# Verify installation\nwordpress --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install wordpress\n\n# Enable in rc.conf\necho 'wordpress_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice wordpress start\n\n# Verify installation\nwordpress --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install wordpress\n\n# Or using Scoop\nscoop install wordpress\n\n# Verify installation\nwordpress --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/wordpress\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nwordpress --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable wordpress\n\n# Start service\nsudo systemctl start wordpress\n\n# Stop service\nsudo systemctl stop wordpress\n\n# Restart service\nsudo systemctl restart wordpress\n\n# Check status\nsudo systemctl status wordpress\n\n# View logs\nsudo journalctl -u wordpress -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add wordpress default\n\n# Start service\nrc-service wordpress start\n\n# Stop service\nrc-service wordpress stop\n\n# Restart service\nrc-service wordpress restart\n\n# Check status\nrc-service wordpress status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'wordpress_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice wordpress start\n\n# Stop service\nservice wordpress stop\n\n# Restart service\nservice wordpress restart\n\n# Check status\nservice wordpress status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start wordpress\nbrew services stop wordpress\nbrew services restart wordpress\n\n# Check status\nbrew services list | grep wordpress\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start wordpress\n\n# Stop service\nnet stop wordpress\n\n# Using PowerShell\nStart-Service wordpress\nStop-Service wordpress\nRestart-Service wordpress\n\n# Check status\nGet-Service wordpress\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream wordpress_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name wordpress.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name wordpress.example.com;\n\n    ssl_certificate /etc/ssl/certs/wordpress.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/wordpress.example.com.key;\n\n    location / {\n        proxy_pass http://wordpress_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName wordpress.example.com\n    Redirect permanent / https://wordpress.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName wordpress.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/wordpress.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/wordpress.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend wordpress_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/wordpress.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend wordpress_backend\n\nbackend wordpress_backend\n    balance roundrobin\n    server wordpress1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R wordpress:wordpress /etc/wordpress\nsudo chmod 750 /etc/wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status wordpress\n\n# View logs\nsudo journalctl -u wordpress -f\n\n# Monitor resource usage\ntop -p $(pgrep wordpress)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/wordpress\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/wordpress-backup-$DATE.tar.gz\" /etc/wordpress /var/lib/wordpress\n\necho \"Backup completed: $BACKUP_DIR/wordpress-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop wordpress\n\n# Restore from backup\ntar -xzf /backup/wordpress/wordpress-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start wordpress\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u wordpress -n 100\nsudo tail -f /var/log/wordpress/wordpress.log\n\n# Check configuration\nwordpress --version\n\n# Check permissions\nls -la /etc/wordpress\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep wordpress)\n\n# Check disk I/O\niotop -p $(pgrep wordpress)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  wordpress:\n    image: wordpress:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/wordpress\n      - ./data:/var/lib/wordpress\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update wordpress\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade wordpress\n\n# Arch Linux\nsudo pacman -Syu wordpress\n\n# Alpine Linux\napk update && apk upgrade wordpress\n\n# openSUSE\nsudo zypper update wordpress\n\n# FreeBSD\npkg update && pkg upgrade wordpress\n\n# Always backup before updates\ntar -czf /backup/wordpress-pre-update-$(date +%Y%m%d).tar.gz /etc/wordpress\n\n# Restart after updates\nsudo systemctl restart wordpress\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/wordpress\n\n# Clean old logs\nfind /var/log/wordpress -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/wordpress\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.wordpress.org/\n- GitHub Repository: https://github.com/wordpress/wordpress\n- Community Forum: https://forum.wordpress.org/\n- Best Practices Guide: https://docs.wordpress.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">wordpress is a free and open-source content management system. WordPress powers over 40% of the web with extensible CMS</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default wordpress port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install wordpress\nsudo dnf install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install wordpress\nsudo apt install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wordpress\nsudo pacman -S wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wordpress\napk add --no-cache wordpress\n\n# Enable and start service\nrc-update add wordpress default\nrc-service wordpress start\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wordpress\nsudo zypper install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install wordpress\n\n# Start service\nbrew services start wordpress\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install wordpress\n\n# Enable in rc.conf\necho &#039;wordpress_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice wordpress start\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install wordpress\n\n# Or using Scoop\nscoop install wordpress\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/wordpress\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable wordpress\n\n# Start service\nsudo systemctl start wordpress\n\n# Stop service\nsudo systemctl stop wordpress\n\n# Restart service\nsudo systemctl restart wordpress\n\n# Check status\nsudo systemctl status wordpress\n\n# View logs\nsudo journalctl -u wordpress -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add wordpress default\n\n# Start service\nrc-service wordpress start\n\n# Stop service\nrc-service wordpress stop\n\n# Restart service\nrc-service wordpress restart\n\n# Check status\nrc-service wordpress status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;wordpress_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice wordpress start\n\n# Stop service\nservice wordpress stop\n\n# Restart service\nservice wordpress restart\n\n# Check status\nservice wordpress status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start wordpress\nbrew services stop wordpress\nbrew services restart wordpress\n\n# Check status\nbrew services list | grep wordpress</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start wordpress\n\n# Stop service\nnet stop wordpress\n\n# Using PowerShell\nStart-Service wordpress\nStop-Service wordpress\nRestart-Service wordpress\n\n# Check status\nGet-Service wordpress</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream wordpress_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name wordpress.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name wordpress.example.com;\n\n    ssl_certificate /etc/ssl/certs/wordpress.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/wordpress.example.com.key;\n\n    location / {\n        proxy_pass http://wordpress_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName wordpress.example.com\n    Redirect permanent / https://wordpress.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName wordpress.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/wordpress.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/wordpress.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend wordpress_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/wordpress.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend wordpress_backend\n\nbackend wordpress_backend\n    balance roundrobin\n    server wordpress1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R wordpress:wordpress /etc/wordpress\nsudo chmod 750 /etc/wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status wordpress\n\n# View logs\nsudo journalctl -u wordpress -f\n\n# Monitor resource usage\ntop -p $(pgrep wordpress)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/wordpress&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/wordpress-backup-$DATE.tar.gz&quot; /etc/wordpress /var/lib/wordpress\n\necho &quot;Backup completed: $BACKUP_DIR/wordpress-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop wordpress\n\n# Restore from backup\ntar -xzf /backup/wordpress/wordpress-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start wordpress</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u wordpress -n 100\nsudo tail -f /var/log/wordpress/wordpress.log\n\n# Check configuration\nwordpress --version\n\n# Check permissions\nls -la /etc/wordpress</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep wordpress)\n\n# Check disk I/O\niotop -p $(pgrep wordpress)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  wordpress:\n    image: wordpress:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/wordpress\n      - ./data:/var/lib/wordpress\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update wordpress\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade wordpress\n\n# Arch Linux\nsudo pacman -Syu wordpress\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade wordpress\n\n# openSUSE\nsudo zypper update wordpress\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade wordpress\n\n# Always backup before updates\ntar -czf /backup/wordpress-pre-update-$(date +%Y%m%d).tar.gz /etc/wordpress\n\n# Restart after updates\nsudo systemctl restart wordpress</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/wordpress\n\n# Clean old logs\nfind /var/log/wordpress -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/wordpress</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.wordpress.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/wordpress/wordpress</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.wordpress.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.wordpress.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1271,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:10.833Z",
            "metadataVersion": "2.0"
          }
        ],
        "icon": "📝",
        "color": "#ff79c6",
        "metadata": {
          "totalGuides": 1,
          "languages": [],
          "difficultyLevels": [
            "intermediate"
          ],
          "features": [
            "backup-restore-procedures",
            "comprehensive-documentation",
            "multi-os-support",
            "performance-optimization",
            "security-hardening",
            "troubleshooting-guides"
          ],
          "avgStars": 0,
          "totalStars": 0,
          "supportedOS": [
            "almalinux",
            "alpine",
            "arch",
            "centos",
            "debian",
            "freebsd",
            "macos",
            "opensuse",
            "rhel",
            "rocky",
            "sles",
            "ubuntu",
            "windows"
          ],
          "maintenanceStatuses": [
            "active"
          ]
        }
      },
      "api-gateways": {
        "name": "Api gateways",
        "description": "Api gateways tools and applications",
        "guides": [
          {
            "name": "wso2",
            "displayName": "wso2 Installation Guide",
            "slug": "wso2",
            "description": "wso2 is a free and open-source API management platform. WSO2 provides complete open source API management platform",
            "category": "api-gateways",
            "subcategory": "api-gateways",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443,
              9443
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "api-gateways",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/api-gateways/wso2",
            "documentationUrl": "https://howtomgr.github.io/api-gateways/wso2",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/wso2",
            "updatedAt": "2025-09-16T18:03:41Z",
            "createdAt": "2025-09-16T08:41:47Z",
            "readmeRaw": "# wso2 Installation Guide\n\nwso2 is a free and open-source API management platform. WSO2 provides complete open source API management platform\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores\n  - RAM: 4GB minimum\n  - Storage: 10GB for data\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9443 (default wso2 port)\n  - Various service ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install wso2\nsudo dnf install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwso2 --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install wso2\nsudo apt install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo ufw allow 9443\n\n# Verify installation\nwso2 --version\n```\n\n### Arch Linux\n\n```bash\n# Install wso2\nsudo pacman -S wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Verify installation\nwso2 --version\n```\n\n### Alpine Linux\n\n```bash\n# Install wso2\napk add --no-cache wso2\n\n# Enable and start service\nrc-update add wso2 default\nrc-service wso2 start\n\n# Verify installation\nwso2 --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install wso2\nsudo zypper install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwso2 --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install wso2\n\n# Start service\nbrew services start wso2\n\n# Verify installation\nwso2 --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install wso2\n\n# Enable in rc.conf\necho 'wso2_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice wso2 start\n\n# Verify installation\nwso2 --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install wso2\n\n# Or using Scoop\nscoop install wso2\n\n# Verify installation\nwso2 --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/wso2\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nwso2 --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable wso2\n\n# Start service\nsudo systemctl start wso2\n\n# Stop service\nsudo systemctl stop wso2\n\n# Restart service\nsudo systemctl restart wso2\n\n# Check status\nsudo systemctl status wso2\n\n# View logs\nsudo journalctl -u wso2 -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add wso2 default\n\n# Start service\nrc-service wso2 start\n\n# Stop service\nrc-service wso2 stop\n\n# Restart service\nrc-service wso2 restart\n\n# Check status\nrc-service wso2 status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'wso2_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice wso2 start\n\n# Stop service\nservice wso2 stop\n\n# Restart service\nservice wso2 restart\n\n# Check status\nservice wso2 status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start wso2\nbrew services stop wso2\nbrew services restart wso2\n\n# Check status\nbrew services list | grep wso2\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start wso2\n\n# Stop service\nnet stop wso2\n\n# Using PowerShell\nStart-Service wso2\nStop-Service wso2\nRestart-Service wso2\n\n# Check status\nGet-Service wso2\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream wso2_backend {\n    server 127.0.0.1:9443;\n}\n\nserver {\n    listen 80;\n    server_name wso2.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name wso2.example.com;\n\n    ssl_certificate /etc/ssl/certs/wso2.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/wso2.example.com.key;\n\n    location / {\n        proxy_pass http://wso2_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName wso2.example.com\n    Redirect permanent / https://wso2.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName wso2.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/wso2.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/wso2.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9443/\n    ProxyPassReverse / http://127.0.0.1:9443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend wso2_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/wso2.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend wso2_backend\n\nbackend wso2_backend\n    balance roundrobin\n    server wso21 127.0.0.1:9443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R wso2:wso2 /etc/wso2\nsudo chmod 750 /etc/wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status wso2\n\n# View logs\nsudo journalctl -u wso2 -f\n\n# Monitor resource usage\ntop -p $(pgrep wso2)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/wso2\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/wso2-backup-$DATE.tar.gz\" /etc/wso2 /var/lib/wso2\n\necho \"Backup completed: $BACKUP_DIR/wso2-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop wso2\n\n# Restore from backup\ntar -xzf /backup/wso2/wso2-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start wso2\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u wso2 -n 100\nsudo tail -f /var/log/wso2/wso2.log\n\n# Check configuration\nwso2 --version\n\n# Check permissions\nls -la /etc/wso2\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9443\n\n# Test connectivity\ntelnet localhost 9443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep wso2)\n\n# Check disk I/O\niotop -p $(pgrep wso2)\n\n# Check connections\nss -an | grep 9443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  wso2:\n    image: wso2:latest\n    ports:\n      - \"9443:9443\"\n    volumes:\n      - ./config:/etc/wso2\n      - ./data:/var/lib/wso2\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update wso2\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade wso2\n\n# Arch Linux\nsudo pacman -Syu wso2\n\n# Alpine Linux\napk update && apk upgrade wso2\n\n# openSUSE\nsudo zypper update wso2\n\n# FreeBSD\npkg update && pkg upgrade wso2\n\n# Always backup before updates\ntar -czf /backup/wso2-pre-update-$(date +%Y%m%d).tar.gz /etc/wso2\n\n# Restart after updates\nsudo systemctl restart wso2\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/wso2\n\n# Clean old logs\nfind /var/log/wso2 -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/wso2\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.wso2.org/\n- GitHub Repository: https://github.com/wso2/wso2\n- Community Forum: https://forum.wso2.org/\n- Best Practices Guide: https://docs.wso2.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">wso2 is a free and open-source API management platform. WSO2 provides complete open source API management platform</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9443 (default wso2 port)</li>\n<li class=\"mobile-list-item\">Various service ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install wso2\nsudo dnf install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install wso2\nsudo apt install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo ufw allow 9443\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wso2\nsudo pacman -S wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wso2\napk add --no-cache wso2\n\n# Enable and start service\nrc-update add wso2 default\nrc-service wso2 start\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wso2\nsudo zypper install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install wso2\n\n# Start service\nbrew services start wso2\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install wso2\n\n# Enable in rc.conf\necho &#039;wso2_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice wso2 start\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install wso2\n\n# Or using Scoop\nscoop install wso2\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/wso2\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable wso2\n\n# Start service\nsudo systemctl start wso2\n\n# Stop service\nsudo systemctl stop wso2\n\n# Restart service\nsudo systemctl restart wso2\n\n# Check status\nsudo systemctl status wso2\n\n# View logs\nsudo journalctl -u wso2 -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add wso2 default\n\n# Start service\nrc-service wso2 start\n\n# Stop service\nrc-service wso2 stop\n\n# Restart service\nrc-service wso2 restart\n\n# Check status\nrc-service wso2 status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;wso2_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice wso2 start\n\n# Stop service\nservice wso2 stop\n\n# Restart service\nservice wso2 restart\n\n# Check status\nservice wso2 status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start wso2\nbrew services stop wso2\nbrew services restart wso2\n\n# Check status\nbrew services list | grep wso2</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start wso2\n\n# Stop service\nnet stop wso2\n\n# Using PowerShell\nStart-Service wso2\nStop-Service wso2\nRestart-Service wso2\n\n# Check status\nGet-Service wso2</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream wso2_backend {\n    server 127.0.0.1:9443;\n}\n\nserver {\n    listen 80;\n    server_name wso2.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name wso2.example.com;\n\n    ssl_certificate /etc/ssl/certs/wso2.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/wso2.example.com.key;\n\n    location / {\n        proxy_pass http://wso2_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName wso2.example.com\n    Redirect permanent / https://wso2.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName wso2.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/wso2.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/wso2.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9443/\n    ProxyPassReverse / http://127.0.0.1:9443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend wso2_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/wso2.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend wso2_backend\n\nbackend wso2_backend\n    balance roundrobin\n    server wso21 127.0.0.1:9443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R wso2:wso2 /etc/wso2\nsudo chmod 750 /etc/wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status wso2\n\n# View logs\nsudo journalctl -u wso2 -f\n\n# Monitor resource usage\ntop -p $(pgrep wso2)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/wso2&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/wso2-backup-$DATE.tar.gz&quot; /etc/wso2 /var/lib/wso2\n\necho &quot;Backup completed: $BACKUP_DIR/wso2-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop wso2\n\n# Restore from backup\ntar -xzf /backup/wso2/wso2-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start wso2</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u wso2 -n 100\nsudo tail -f /var/log/wso2/wso2.log\n\n# Check configuration\nwso2 --version\n\n# Check permissions\nls -la /etc/wso2</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9443\n\n# Test connectivity\ntelnet localhost 9443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep wso2)\n\n# Check disk I/O\niotop -p $(pgrep wso2)\n\n# Check connections\nss -an | grep 9443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  wso2:\n    image: wso2:latest\n    ports:\n      - &quot;9443:9443&quot;\n    volumes:\n      - ./config:/etc/wso2\n      - ./data:/var/lib/wso2\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update wso2\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade wso2\n\n# Arch Linux\nsudo pacman -Syu wso2\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade wso2\n\n# openSUSE\nsudo zypper update wso2\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade wso2\n\n# Always backup before updates\ntar -czf /backup/wso2-pre-update-$(date +%Y%m%d).tar.gz /etc/wso2\n\n# Restart after updates\nsudo systemctl restart wso2</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/wso2\n\n# Clean old logs\nfind /var/log/wso2 -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/wso2</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.wso2.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/wso2/wso2</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.wso2.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.wso2.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1269,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:10.548Z",
            "metadataVersion": "2.0"
          },
          {
            "name": "zuul",
            "displayName": "zuul Installation Guide",
            "slug": "zuul",
            "description": "zuul is a free and open-source edge service. Netflix Zuul provides edge service for dynamic routing and monitoring",
            "category": "api-gateways",
            "subcategory": "api-gateways",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443,
              8080
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "api-gateways",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/api-gateways/zuul",
            "documentationUrl": "https://howtomgr.github.io/api-gateways/zuul",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/zuul",
            "updatedAt": "2025-09-16T18:05:26Z",
            "createdAt": "2025-09-16T08:45:00Z",
            "readmeRaw": "# zuul Installation Guide\n\nzuul is a free and open-source edge service. Netflix Zuul provides edge service for dynamic routing and monitoring\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 1GB for config\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default zuul port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zuul\nsudo dnf install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzuul --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zuul\nsudo apt install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nzuul --version\n```\n\n### Arch Linux\n\n```bash\n# Install zuul\nsudo pacman -S zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Verify installation\nzuul --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zuul\napk add --no-cache zuul\n\n# Enable and start service\nrc-update add zuul default\nrc-service zuul start\n\n# Verify installation\nzuul --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zuul\nsudo zypper install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzuul --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zuul\n\n# Start service\nbrew services start zuul\n\n# Verify installation\nzuul --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zuul\n\n# Enable in rc.conf\necho 'zuul_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zuul start\n\n# Verify installation\nzuul --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zuul\n\n# Or using Scoop\nscoop install zuul\n\n# Verify installation\nzuul --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zuul\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzuul --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zuul\n\n# Start service\nsudo systemctl start zuul\n\n# Stop service\nsudo systemctl stop zuul\n\n# Restart service\nsudo systemctl restart zuul\n\n# Check status\nsudo systemctl status zuul\n\n# View logs\nsudo journalctl -u zuul -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zuul default\n\n# Start service\nrc-service zuul start\n\n# Stop service\nrc-service zuul stop\n\n# Restart service\nrc-service zuul restart\n\n# Check status\nrc-service zuul status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zuul_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zuul start\n\n# Stop service\nservice zuul stop\n\n# Restart service\nservice zuul restart\n\n# Check status\nservice zuul status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zuul\nbrew services stop zuul\nbrew services restart zuul\n\n# Check status\nbrew services list | grep zuul\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zuul\n\n# Stop service\nnet stop zuul\n\n# Using PowerShell\nStart-Service zuul\nStop-Service zuul\nRestart-Service zuul\n\n# Check status\nGet-Service zuul\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zuul_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name zuul.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zuul.example.com;\n\n    ssl_certificate /etc/ssl/certs/zuul.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zuul.example.com.key;\n\n    location / {\n        proxy_pass http://zuul_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zuul.example.com\n    Redirect permanent / https://zuul.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zuul.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zuul.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zuul.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zuul_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zuul.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zuul_backend\n\nbackend zuul_backend\n    balance roundrobin\n    server zuul1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zuul:zuul /etc/zuul\nsudo chmod 750 /etc/zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zuul\n\n# View logs\nsudo journalctl -u zuul -f\n\n# Monitor resource usage\ntop -p $(pgrep zuul)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zuul\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zuul-backup-$DATE.tar.gz\" /etc/zuul /var/lib/zuul\n\necho \"Backup completed: $BACKUP_DIR/zuul-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zuul\n\n# Restore from backup\ntar -xzf /backup/zuul/zuul-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zuul\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zuul -n 100\nsudo tail -f /var/log/zuul/zuul.log\n\n# Check configuration\nzuul --version\n\n# Check permissions\nls -la /etc/zuul\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zuul)\n\n# Check disk I/O\niotop -p $(pgrep zuul)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zuul:\n    image: zuul:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/zuul\n      - ./data:/var/lib/zuul\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zuul\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zuul\n\n# Arch Linux\nsudo pacman -Syu zuul\n\n# Alpine Linux\napk update && apk upgrade zuul\n\n# openSUSE\nsudo zypper update zuul\n\n# FreeBSD\npkg update && pkg upgrade zuul\n\n# Always backup before updates\ntar -czf /backup/zuul-pre-update-$(date +%Y%m%d).tar.gz /etc/zuul\n\n# Restart after updates\nsudo systemctl restart zuul\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zuul\n\n# Clean old logs\nfind /var/log/zuul -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zuul\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zuul.org/\n- GitHub Repository: https://github.com/zuul/zuul\n- Community Forum: https://forum.zuul.org/\n- Best Practices Guide: https://docs.zuul.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">zuul is a free and open-source edge service. Netflix Zuul provides edge service for dynamic routing and monitoring</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for config</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default zuul port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zuul\nsudo dnf install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zuul\nsudo apt install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zuul\nsudo pacman -S zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zuul\napk add --no-cache zuul\n\n# Enable and start service\nrc-update add zuul default\nrc-service zuul start\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zuul\nsudo zypper install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zuul\n\n# Start service\nbrew services start zuul\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zuul\n\n# Enable in rc.conf\necho &#039;zuul_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zuul start\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zuul\n\n# Or using Scoop\nscoop install zuul\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zuul\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzuul --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zuul\n\n# Start service\nsudo systemctl start zuul\n\n# Stop service\nsudo systemctl stop zuul\n\n# Restart service\nsudo systemctl restart zuul\n\n# Check status\nsudo systemctl status zuul\n\n# View logs\nsudo journalctl -u zuul -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zuul default\n\n# Start service\nrc-service zuul start\n\n# Stop service\nrc-service zuul stop\n\n# Restart service\nrc-service zuul restart\n\n# Check status\nrc-service zuul status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zuul_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zuul start\n\n# Stop service\nservice zuul stop\n\n# Restart service\nservice zuul restart\n\n# Check status\nservice zuul status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zuul\nbrew services stop zuul\nbrew services restart zuul\n\n# Check status\nbrew services list | grep zuul</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zuul\n\n# Stop service\nnet stop zuul\n\n# Using PowerShell\nStart-Service zuul\nStop-Service zuul\nRestart-Service zuul\n\n# Check status\nGet-Service zuul</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zuul_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name zuul.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zuul.example.com;\n\n    ssl_certificate /etc/ssl/certs/zuul.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zuul.example.com.key;\n\n    location / {\n        proxy_pass http://zuul_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zuul.example.com\n    Redirect permanent / https://zuul.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zuul.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zuul.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zuul.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zuul_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zuul.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zuul_backend\n\nbackend zuul_backend\n    balance roundrobin\n    server zuul1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zuul:zuul /etc/zuul\nsudo chmod 750 /etc/zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zuul\n\n# View logs\nsudo journalctl -u zuul -f\n\n# Monitor resource usage\ntop -p $(pgrep zuul)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zuul&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zuul-backup-$DATE.tar.gz&quot; /etc/zuul /var/lib/zuul\n\necho &quot;Backup completed: $BACKUP_DIR/zuul-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zuul\n\n# Restore from backup\ntar -xzf /backup/zuul/zuul-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zuul</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zuul -n 100\nsudo tail -f /var/log/zuul/zuul.log\n\n# Check configuration\nzuul --version\n\n# Check permissions\nls -la /etc/zuul</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zuul)\n\n# Check disk I/O\niotop -p $(pgrep zuul)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zuul:\n    image: zuul:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/zuul\n      - ./data:/var/lib/zuul\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zuul\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zuul\n\n# Arch Linux\nsudo pacman -Syu zuul\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zuul\n\n# openSUSE\nsudo zypper update zuul\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zuul\n\n# Always backup before updates\ntar -czf /backup/zuul-pre-update-$(date +%Y%m%d).tar.gz /etc/zuul\n\n# Restart after updates\nsudo systemctl restart zuul</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zuul\n\n# Clean old logs\nfind /var/log/zuul -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zuul</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zuul.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zuul/zuul</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zuul.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zuul.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1268,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:06.578Z",
            "metadataVersion": "2.0"
          }
        ],
        "icon": "🔧",
        "color": "#6272a4",
        "metadata": {
          "totalGuides": 2,
          "languages": [],
          "difficultyLevels": [
            "intermediate"
          ],
          "features": [
            "backup-restore-procedures",
            "comprehensive-documentation",
            "multi-os-support",
            "performance-optimization",
            "security-hardening",
            "troubleshooting-guides"
          ],
          "avgStars": 0,
          "totalStars": 0,
          "supportedOS": [
            "almalinux",
            "alpine",
            "arch",
            "centos",
            "debian",
            "freebsd",
            "macos",
            "opensuse",
            "rhel",
            "rocky",
            "sles",
            "ubuntu",
            "windows"
          ],
          "maintenanceStatuses": [
            "active"
          ]
        }
      },
      "remote-access": {
        "name": "Remote access",
        "description": "Remote access tools and applications",
        "guides": [
          {
            "name": "x2go",
            "displayName": "x2go Installation Guide",
            "slug": "x2go",
            "description": "x2go is a free and open-source remote desktop. X2Go provides remote desktop solution for Linux",
            "category": "remote-access",
            "subcategory": "remote-access",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              22,
              80,
              443
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "remote-access",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/remote-access/x2go",
            "documentationUrl": "https://howtomgr.github.io/remote-access/x2go",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/x2go",
            "updatedAt": "2025-09-16T18:03:46Z",
            "createdAt": "2025-09-16T08:42:02Z",
            "readmeRaw": "# x2go Installation Guide\n\nx2go is a free and open-source remote desktop. X2Go provides remote desktop solution for Linux\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 1GB minimum\n  - Storage: 1GB for sessions\n  - Network: NX protocol\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 22 (default x2go port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install x2go\nsudo dnf install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nx2go --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install x2go\nsudo apt install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo ufw allow 22\n\n# Verify installation\nx2go --version\n```\n\n### Arch Linux\n\n```bash\n# Install x2go\nsudo pacman -S x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Verify installation\nx2go --version\n```\n\n### Alpine Linux\n\n```bash\n# Install x2go\napk add --no-cache x2go\n\n# Enable and start service\nrc-update add x2go default\nrc-service x2go start\n\n# Verify installation\nx2go --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install x2go\nsudo zypper install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nx2go --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install x2go\n\n# Start service\nbrew services start x2go\n\n# Verify installation\nx2go --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install x2go\n\n# Enable in rc.conf\necho 'x2go_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice x2go start\n\n# Verify installation\nx2go --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install x2go\n\n# Or using Scoop\nscoop install x2go\n\n# Verify installation\nx2go --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/x2go\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nx2go --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable x2go\n\n# Start service\nsudo systemctl start x2go\n\n# Stop service\nsudo systemctl stop x2go\n\n# Restart service\nsudo systemctl restart x2go\n\n# Check status\nsudo systemctl status x2go\n\n# View logs\nsudo journalctl -u x2go -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add x2go default\n\n# Start service\nrc-service x2go start\n\n# Stop service\nrc-service x2go stop\n\n# Restart service\nrc-service x2go restart\n\n# Check status\nrc-service x2go status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'x2go_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice x2go start\n\n# Stop service\nservice x2go stop\n\n# Restart service\nservice x2go restart\n\n# Check status\nservice x2go status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start x2go\nbrew services stop x2go\nbrew services restart x2go\n\n# Check status\nbrew services list | grep x2go\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start x2go\n\n# Stop service\nnet stop x2go\n\n# Using PowerShell\nStart-Service x2go\nStop-Service x2go\nRestart-Service x2go\n\n# Check status\nGet-Service x2go\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream x2go_backend {\n    server 127.0.0.1:22;\n}\n\nserver {\n    listen 80;\n    server_name x2go.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name x2go.example.com;\n\n    ssl_certificate /etc/ssl/certs/x2go.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/x2go.example.com.key;\n\n    location / {\n        proxy_pass http://x2go_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName x2go.example.com\n    Redirect permanent / https://x2go.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName x2go.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/x2go.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/x2go.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:22/\n    ProxyPassReverse / http://127.0.0.1:22/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend x2go_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/x2go.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend x2go_backend\n\nbackend x2go_backend\n    balance roundrobin\n    server x2go1 127.0.0.1:22 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R x2go:x2go /etc/x2go\nsudo chmod 750 /etc/x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status x2go\n\n# View logs\nsudo journalctl -u x2go -f\n\n# Monitor resource usage\ntop -p $(pgrep x2go)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/x2go\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/x2go-backup-$DATE.tar.gz\" /etc/x2go /var/lib/x2go\n\necho \"Backup completed: $BACKUP_DIR/x2go-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop x2go\n\n# Restore from backup\ntar -xzf /backup/x2go/x2go-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start x2go\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u x2go -n 100\nsudo tail -f /var/log/x2go/x2go.log\n\n# Check configuration\nx2go --version\n\n# Check permissions\nls -la /etc/x2go\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 22\n\n# Test connectivity\ntelnet localhost 22\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep x2go)\n\n# Check disk I/O\niotop -p $(pgrep x2go)\n\n# Check connections\nss -an | grep 22\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  x2go:\n    image: x2go:latest\n    ports:\n      - \"22:22\"\n    volumes:\n      - ./config:/etc/x2go\n      - ./data:/var/lib/x2go\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update x2go\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade x2go\n\n# Arch Linux\nsudo pacman -Syu x2go\n\n# Alpine Linux\napk update && apk upgrade x2go\n\n# openSUSE\nsudo zypper update x2go\n\n# FreeBSD\npkg update && pkg upgrade x2go\n\n# Always backup before updates\ntar -czf /backup/x2go-pre-update-$(date +%Y%m%d).tar.gz /etc/x2go\n\n# Restart after updates\nsudo systemctl restart x2go\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/x2go\n\n# Clean old logs\nfind /var/log/x2go -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/x2go\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.x2go.org/\n- GitHub Repository: https://github.com/x2go/x2go\n- Community Forum: https://forum.x2go.org/\n- Best Practices Guide: https://docs.x2go.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">x2go is a free and open-source remote desktop. X2Go provides remote desktop solution for Linux</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for sessions</li>\n<li class=\"mobile-list-item\">Network: NX protocol</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 22 (default x2go port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install x2go\nsudo dnf install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install x2go\nsudo apt install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo ufw allow 22\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install x2go\nsudo pacman -S x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install x2go\napk add --no-cache x2go\n\n# Enable and start service\nrc-update add x2go default\nrc-service x2go start\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install x2go\nsudo zypper install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install x2go\n\n# Start service\nbrew services start x2go\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install x2go\n\n# Enable in rc.conf\necho &#039;x2go_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice x2go start\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install x2go\n\n# Or using Scoop\nscoop install x2go\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/x2go\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nx2go --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable x2go\n\n# Start service\nsudo systemctl start x2go\n\n# Stop service\nsudo systemctl stop x2go\n\n# Restart service\nsudo systemctl restart x2go\n\n# Check status\nsudo systemctl status x2go\n\n# View logs\nsudo journalctl -u x2go -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add x2go default\n\n# Start service\nrc-service x2go start\n\n# Stop service\nrc-service x2go stop\n\n# Restart service\nrc-service x2go restart\n\n# Check status\nrc-service x2go status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;x2go_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice x2go start\n\n# Stop service\nservice x2go stop\n\n# Restart service\nservice x2go restart\n\n# Check status\nservice x2go status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start x2go\nbrew services stop x2go\nbrew services restart x2go\n\n# Check status\nbrew services list | grep x2go</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start x2go\n\n# Stop service\nnet stop x2go\n\n# Using PowerShell\nStart-Service x2go\nStop-Service x2go\nRestart-Service x2go\n\n# Check status\nGet-Service x2go</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream x2go_backend {\n    server 127.0.0.1:22;\n}\n\nserver {\n    listen 80;\n    server_name x2go.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name x2go.example.com;\n\n    ssl_certificate /etc/ssl/certs/x2go.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/x2go.example.com.key;\n\n    location / {\n        proxy_pass http://x2go_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName x2go.example.com\n    Redirect permanent / https://x2go.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName x2go.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/x2go.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/x2go.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:22/\n    ProxyPassReverse / http://127.0.0.1:22/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend x2go_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/x2go.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend x2go_backend\n\nbackend x2go_backend\n    balance roundrobin\n    server x2go1 127.0.0.1:22 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R x2go:x2go /etc/x2go\nsudo chmod 750 /etc/x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status x2go\n\n# View logs\nsudo journalctl -u x2go -f\n\n# Monitor resource usage\ntop -p $(pgrep x2go)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/x2go&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/x2go-backup-$DATE.tar.gz&quot; /etc/x2go /var/lib/x2go\n\necho &quot;Backup completed: $BACKUP_DIR/x2go-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop x2go\n\n# Restore from backup\ntar -xzf /backup/x2go/x2go-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start x2go</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u x2go -n 100\nsudo tail -f /var/log/x2go/x2go.log\n\n# Check configuration\nx2go --version\n\n# Check permissions\nls -la /etc/x2go</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 22\n\n# Test connectivity\ntelnet localhost 22\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep x2go)\n\n# Check disk I/O\niotop -p $(pgrep x2go)\n\n# Check connections\nss -an | grep 22</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  x2go:\n    image: x2go:latest\n    ports:\n      - &quot;22:22&quot;\n    volumes:\n      - ./config:/etc/x2go\n      - ./data:/var/lib/x2go\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update x2go\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade x2go\n\n# Arch Linux\nsudo pacman -Syu x2go\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade x2go\n\n# openSUSE\nsudo zypper update x2go\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade x2go\n\n# Always backup before updates\ntar -czf /backup/x2go-pre-update-$(date +%Y%m%d).tar.gz /etc/x2go\n\n# Restart after updates\nsudo systemctl restart x2go</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/x2go\n\n# Clean old logs\nfind /var/log/x2go -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/x2go</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.x2go.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/x2go/x2go</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.x2go.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.x2go.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1267,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:10.310Z",
            "metadataVersion": "2.0"
          },
          {
            "name": "xrdp",
            "displayName": "xrdp Installation Guide",
            "slug": "xrdp",
            "description": "xrdp is a free and open-source RDP server. xrdp provides open source RDP server for Linux",
            "category": "remote-access",
            "subcategory": "remote-access",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443,
              3389
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "remote-access",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/remote-access/xrdp",
            "documentationUrl": "https://howtomgr.github.io/remote-access/xrdp",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/xrdp",
            "updatedAt": "2025-09-16T18:04:07Z",
            "createdAt": "2025-09-16T08:42:39Z",
            "readmeRaw": "# xrdp Installation Guide\n\nxrdp is a free and open-source RDP server. xrdp provides open source RDP server for Linux\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 1GB minimum\n  - Storage: 1GB for sessions\n  - Network: RDP protocol\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3389 (default xrdp port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xrdp\nsudo dnf install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxrdp --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install xrdp\nsudo apt install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo ufw allow 3389\n\n# Verify installation\nxrdp --version\n```\n\n### Arch Linux\n\n```bash\n# Install xrdp\nsudo pacman -S xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Verify installation\nxrdp --version\n```\n\n### Alpine Linux\n\n```bash\n# Install xrdp\napk add --no-cache xrdp\n\n# Enable and start service\nrc-update add xrdp default\nrc-service xrdp start\n\n# Verify installation\nxrdp --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install xrdp\nsudo zypper install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxrdp --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install xrdp\n\n# Start service\nbrew services start xrdp\n\n# Verify installation\nxrdp --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install xrdp\n\n# Enable in rc.conf\necho 'xrdp_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xrdp start\n\n# Verify installation\nxrdp --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install xrdp\n\n# Or using Scoop\nscoop install xrdp\n\n# Verify installation\nxrdp --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/xrdp\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxrdp --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable xrdp\n\n# Start service\nsudo systemctl start xrdp\n\n# Stop service\nsudo systemctl stop xrdp\n\n# Restart service\nsudo systemctl restart xrdp\n\n# Check status\nsudo systemctl status xrdp\n\n# View logs\nsudo journalctl -u xrdp -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add xrdp default\n\n# Start service\nrc-service xrdp start\n\n# Stop service\nrc-service xrdp stop\n\n# Restart service\nrc-service xrdp restart\n\n# Check status\nrc-service xrdp status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'xrdp_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xrdp start\n\n# Stop service\nservice xrdp stop\n\n# Restart service\nservice xrdp restart\n\n# Check status\nservice xrdp status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start xrdp\nbrew services stop xrdp\nbrew services restart xrdp\n\n# Check status\nbrew services list | grep xrdp\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start xrdp\n\n# Stop service\nnet stop xrdp\n\n# Using PowerShell\nStart-Service xrdp\nStop-Service xrdp\nRestart-Service xrdp\n\n# Check status\nGet-Service xrdp\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream xrdp_backend {\n    server 127.0.0.1:3389;\n}\n\nserver {\n    listen 80;\n    server_name xrdp.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xrdp.example.com;\n\n    ssl_certificate /etc/ssl/certs/xrdp.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xrdp.example.com.key;\n\n    location / {\n        proxy_pass http://xrdp_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName xrdp.example.com\n    Redirect permanent / https://xrdp.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName xrdp.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xrdp.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xrdp.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3389/\n    ProxyPassReverse / http://127.0.0.1:3389/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend xrdp_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xrdp.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xrdp_backend\n\nbackend xrdp_backend\n    balance roundrobin\n    server xrdp1 127.0.0.1:3389 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R xrdp:xrdp /etc/xrdp\nsudo chmod 750 /etc/xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status xrdp\n\n# View logs\nsudo journalctl -u xrdp -f\n\n# Monitor resource usage\ntop -p $(pgrep xrdp)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/xrdp\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/xrdp-backup-$DATE.tar.gz\" /etc/xrdp /var/lib/xrdp\n\necho \"Backup completed: $BACKUP_DIR/xrdp-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop xrdp\n\n# Restore from backup\ntar -xzf /backup/xrdp/xrdp-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xrdp\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u xrdp -n 100\nsudo tail -f /var/log/xrdp/xrdp.log\n\n# Check configuration\nxrdp --version\n\n# Check permissions\nls -la /etc/xrdp\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 3389\n\n# Test connectivity\ntelnet localhost 3389\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep xrdp)\n\n# Check disk I/O\niotop -p $(pgrep xrdp)\n\n# Check connections\nss -an | grep 3389\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  xrdp:\n    image: xrdp:latest\n    ports:\n      - \"3389:3389\"\n    volumes:\n      - ./config:/etc/xrdp\n      - ./data:/var/lib/xrdp\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xrdp\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade xrdp\n\n# Arch Linux\nsudo pacman -Syu xrdp\n\n# Alpine Linux\napk update && apk upgrade xrdp\n\n# openSUSE\nsudo zypper update xrdp\n\n# FreeBSD\npkg update && pkg upgrade xrdp\n\n# Always backup before updates\ntar -czf /backup/xrdp-pre-update-$(date +%Y%m%d).tar.gz /etc/xrdp\n\n# Restart after updates\nsudo systemctl restart xrdp\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/xrdp\n\n# Clean old logs\nfind /var/log/xrdp -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xrdp\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.xrdp.org/\n- GitHub Repository: https://github.com/xrdp/xrdp\n- Community Forum: https://forum.xrdp.org/\n- Best Practices Guide: https://docs.xrdp.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">xrdp is a free and open-source RDP server. xrdp provides open source RDP server for Linux</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for sessions</li>\n<li class=\"mobile-list-item\">Network: RDP protocol</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3389 (default xrdp port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xrdp\nsudo dnf install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install xrdp\nsudo apt install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo ufw allow 3389\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xrdp\nsudo pacman -S xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xrdp\napk add --no-cache xrdp\n\n# Enable and start service\nrc-update add xrdp default\nrc-service xrdp start\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xrdp\nsudo zypper install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install xrdp\n\n# Start service\nbrew services start xrdp\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install xrdp\n\n# Enable in rc.conf\necho &#039;xrdp_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xrdp start\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install xrdp\n\n# Or using Scoop\nscoop install xrdp\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/xrdp\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable xrdp\n\n# Start service\nsudo systemctl start xrdp\n\n# Stop service\nsudo systemctl stop xrdp\n\n# Restart service\nsudo systemctl restart xrdp\n\n# Check status\nsudo systemctl status xrdp\n\n# View logs\nsudo journalctl -u xrdp -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add xrdp default\n\n# Start service\nrc-service xrdp start\n\n# Stop service\nrc-service xrdp stop\n\n# Restart service\nrc-service xrdp restart\n\n# Check status\nrc-service xrdp status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;xrdp_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xrdp start\n\n# Stop service\nservice xrdp stop\n\n# Restart service\nservice xrdp restart\n\n# Check status\nservice xrdp status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start xrdp\nbrew services stop xrdp\nbrew services restart xrdp\n\n# Check status\nbrew services list | grep xrdp</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start xrdp\n\n# Stop service\nnet stop xrdp\n\n# Using PowerShell\nStart-Service xrdp\nStop-Service xrdp\nRestart-Service xrdp\n\n# Check status\nGet-Service xrdp</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream xrdp_backend {\n    server 127.0.0.1:3389;\n}\n\nserver {\n    listen 80;\n    server_name xrdp.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xrdp.example.com;\n\n    ssl_certificate /etc/ssl/certs/xrdp.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xrdp.example.com.key;\n\n    location / {\n        proxy_pass http://xrdp_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName xrdp.example.com\n    Redirect permanent / https://xrdp.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName xrdp.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xrdp.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xrdp.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3389/\n    ProxyPassReverse / http://127.0.0.1:3389/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend xrdp_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xrdp.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xrdp_backend\n\nbackend xrdp_backend\n    balance roundrobin\n    server xrdp1 127.0.0.1:3389 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R xrdp:xrdp /etc/xrdp\nsudo chmod 750 /etc/xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status xrdp\n\n# View logs\nsudo journalctl -u xrdp -f\n\n# Monitor resource usage\ntop -p $(pgrep xrdp)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/xrdp&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/xrdp-backup-$DATE.tar.gz&quot; /etc/xrdp /var/lib/xrdp\n\necho &quot;Backup completed: $BACKUP_DIR/xrdp-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop xrdp\n\n# Restore from backup\ntar -xzf /backup/xrdp/xrdp-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xrdp</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u xrdp -n 100\nsudo tail -f /var/log/xrdp/xrdp.log\n\n# Check configuration\nxrdp --version\n\n# Check permissions\nls -la /etc/xrdp</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 3389\n\n# Test connectivity\ntelnet localhost 3389\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep xrdp)\n\n# Check disk I/O\niotop -p $(pgrep xrdp)\n\n# Check connections\nss -an | grep 3389</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  xrdp:\n    image: xrdp:latest\n    ports:\n      - &quot;3389:3389&quot;\n    volumes:\n      - ./config:/etc/xrdp\n      - ./data:/var/lib/xrdp\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xrdp\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade xrdp\n\n# Arch Linux\nsudo pacman -Syu xrdp\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade xrdp\n\n# openSUSE\nsudo zypper update xrdp\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade xrdp\n\n# Always backup before updates\ntar -czf /backup/xrdp-pre-update-$(date +%Y%m%d).tar.gz /etc/xrdp\n\n# Restart after updates\nsudo systemctl restart xrdp</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/xrdp\n\n# Clean old logs\nfind /var/log/xrdp -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xrdp</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.xrdp.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/xrdp/xrdp</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.xrdp.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.xrdp.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1268,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:09.553Z",
            "metadataVersion": "2.0"
          }
        ],
        "icon": "🔧",
        "color": "#6272a4",
        "metadata": {
          "totalGuides": 2,
          "languages": [],
          "difficultyLevels": [
            "intermediate"
          ],
          "features": [
            "backup-restore-procedures",
            "comprehensive-documentation",
            "multi-os-support",
            "performance-optimization",
            "security-hardening",
            "troubleshooting-guides"
          ],
          "avgStars": 0,
          "totalStars": 0,
          "supportedOS": [
            "almalinux",
            "alpine",
            "arch",
            "centos",
            "debian",
            "freebsd",
            "macos",
            "opensuse",
            "rhel",
            "rocky",
            "sles",
            "ubuntu",
            "windows"
          ],
          "maintenanceStatuses": [
            "active"
          ]
        }
      },
      "miscellaneous": {
        "name": "Miscellaneous",
        "description": "Miscellaneous tools and applications",
        "guides": [
          {
            "name": "xcp-ng",
            "displayName": "xcp-ng Installation Guide",
            "slug": "xcp-ng",
            "description": "xcp-ng is a free and open-source XenServer alternative. XCP-ng provides enterprise virtualization based on XenServer, fully open source",
            "category": "miscellaneous",
            "subcategory": "miscellaneous",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "miscellaneous",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/miscellaneous/xcp-ng",
            "documentationUrl": "https://howtomgr.github.io/miscellaneous/xcp-ng",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/xcp-ng",
            "updatedAt": "2025-09-16T18:03:52Z",
            "createdAt": "2025-09-16T08:42:17Z",
            "readmeRaw": "# xcp-ng Installation Guide\n\nxcp-ng is a free and open-source XenServer alternative. XCP-ng provides enterprise virtualization based on XenServer, fully open source\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores\n  - RAM: 8GB minimum\n  - Storage: 46GB for dom0\n  - Network: Management network\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443 (default xcp-ng port)\n  - Various Xen ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xcp-ng\nsudo dnf install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxcp-ng --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install xcp-ng\nsudo apt install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nxcp-ng --version\n```\n\n### Arch Linux\n\n```bash\n# Install xcp-ng\nsudo pacman -S xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Verify installation\nxcp-ng --version\n```\n\n### Alpine Linux\n\n```bash\n# Install xcp-ng\napk add --no-cache xcp-ng\n\n# Enable and start service\nrc-update add xcp-ng default\nrc-service xcp-ng start\n\n# Verify installation\nxcp-ng --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install xcp-ng\nsudo zypper install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxcp-ng --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install xcp-ng\n\n# Start service\nbrew services start xcp-ng\n\n# Verify installation\nxcp-ng --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install xcp-ng\n\n# Enable in rc.conf\necho 'xcp-ng_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xcp-ng start\n\n# Verify installation\nxcp-ng --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install xcp-ng\n\n# Or using Scoop\nscoop install xcp-ng\n\n# Verify installation\nxcp-ng --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/xcp-ng\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxcp-ng --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable xcp-ng\n\n# Start service\nsudo systemctl start xcp-ng\n\n# Stop service\nsudo systemctl stop xcp-ng\n\n# Restart service\nsudo systemctl restart xcp-ng\n\n# Check status\nsudo systemctl status xcp-ng\n\n# View logs\nsudo journalctl -u xcp-ng -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add xcp-ng default\n\n# Start service\nrc-service xcp-ng start\n\n# Stop service\nrc-service xcp-ng stop\n\n# Restart service\nrc-service xcp-ng restart\n\n# Check status\nrc-service xcp-ng status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'xcp-ng_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xcp-ng start\n\n# Stop service\nservice xcp-ng stop\n\n# Restart service\nservice xcp-ng restart\n\n# Check status\nservice xcp-ng status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start xcp-ng\nbrew services stop xcp-ng\nbrew services restart xcp-ng\n\n# Check status\nbrew services list | grep xcp-ng\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start xcp-ng\n\n# Stop service\nnet stop xcp-ng\n\n# Using PowerShell\nStart-Service xcp-ng\nStop-Service xcp-ng\nRestart-Service xcp-ng\n\n# Check status\nGet-Service xcp-ng\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream xcp-ng_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name xcp-ng.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xcp-ng.example.com;\n\n    ssl_certificate /etc/ssl/certs/xcp-ng.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xcp-ng.example.com.key;\n\n    location / {\n        proxy_pass http://xcp-ng_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName xcp-ng.example.com\n    Redirect permanent / https://xcp-ng.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName xcp-ng.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xcp-ng.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xcp-ng.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend xcp-ng_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xcp-ng.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xcp-ng_backend\n\nbackend xcp-ng_backend\n    balance roundrobin\n    server xcp-ng1 127.0.0.1:443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R xcp-ng:xcp-ng /etc/xcp-ng\nsudo chmod 750 /etc/xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status xcp-ng\n\n# View logs\nsudo journalctl -u xcp-ng -f\n\n# Monitor resource usage\ntop -p $(pgrep xcp-ng)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/xcp-ng\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/xcp-ng-backup-$DATE.tar.gz\" /etc/xcp-ng /var/lib/xcp-ng\n\necho \"Backup completed: $BACKUP_DIR/xcp-ng-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop xcp-ng\n\n# Restore from backup\ntar -xzf /backup/xcp-ng/xcp-ng-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xcp-ng\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u xcp-ng -n 100\nsudo tail -f /var/log/xcp-ng/xcp-ng.log\n\n# Check configuration\nxcp-ng --version\n\n# Check permissions\nls -la /etc/xcp-ng\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep xcp-ng)\n\n# Check disk I/O\niotop -p $(pgrep xcp-ng)\n\n# Check connections\nss -an | grep 443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  xcp-ng:\n    image: xcp-ng:latest\n    ports:\n      - \"443:443\"\n    volumes:\n      - ./config:/etc/xcp-ng\n      - ./data:/var/lib/xcp-ng\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xcp-ng\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade xcp-ng\n\n# Arch Linux\nsudo pacman -Syu xcp-ng\n\n# Alpine Linux\napk update && apk upgrade xcp-ng\n\n# openSUSE\nsudo zypper update xcp-ng\n\n# FreeBSD\npkg update && pkg upgrade xcp-ng\n\n# Always backup before updates\ntar -czf /backup/xcp-ng-pre-update-$(date +%Y%m%d).tar.gz /etc/xcp-ng\n\n# Restart after updates\nsudo systemctl restart xcp-ng\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/xcp-ng\n\n# Clean old logs\nfind /var/log/xcp-ng -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xcp-ng\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.xcp-ng.org/\n- GitHub Repository: https://github.com/xcp-ng/xcp-ng\n- Community Forum: https://forum.xcp-ng.org/\n- Best Practices Guide: https://docs.xcp-ng.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">xcp-ng is a free and open-source XenServer alternative. XCP-ng provides enterprise virtualization based on XenServer, fully open source</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores</li>\n<li class=\"mobile-list-item\">RAM: 8GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 46GB for dom0</li>\n<li class=\"mobile-list-item\">Network: Management network</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443 (default xcp-ng port)</li>\n<li class=\"mobile-list-item\">Various Xen ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xcp-ng\nsudo dnf install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install xcp-ng\nsudo apt install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xcp-ng\nsudo pacman -S xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xcp-ng\napk add --no-cache xcp-ng\n\n# Enable and start service\nrc-update add xcp-ng default\nrc-service xcp-ng start\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xcp-ng\nsudo zypper install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install xcp-ng\n\n# Start service\nbrew services start xcp-ng\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install xcp-ng\n\n# Enable in rc.conf\necho &#039;xcp-ng_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xcp-ng start\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install xcp-ng\n\n# Or using Scoop\nscoop install xcp-ng\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/xcp-ng\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable xcp-ng\n\n# Start service\nsudo systemctl start xcp-ng\n\n# Stop service\nsudo systemctl stop xcp-ng\n\n# Restart service\nsudo systemctl restart xcp-ng\n\n# Check status\nsudo systemctl status xcp-ng\n\n# View logs\nsudo journalctl -u xcp-ng -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add xcp-ng default\n\n# Start service\nrc-service xcp-ng start\n\n# Stop service\nrc-service xcp-ng stop\n\n# Restart service\nrc-service xcp-ng restart\n\n# Check status\nrc-service xcp-ng status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;xcp-ng_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xcp-ng start\n\n# Stop service\nservice xcp-ng stop\n\n# Restart service\nservice xcp-ng restart\n\n# Check status\nservice xcp-ng status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start xcp-ng\nbrew services stop xcp-ng\nbrew services restart xcp-ng\n\n# Check status\nbrew services list | grep xcp-ng</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start xcp-ng\n\n# Stop service\nnet stop xcp-ng\n\n# Using PowerShell\nStart-Service xcp-ng\nStop-Service xcp-ng\nRestart-Service xcp-ng\n\n# Check status\nGet-Service xcp-ng</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream xcp-ng_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name xcp-ng.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xcp-ng.example.com;\n\n    ssl_certificate /etc/ssl/certs/xcp-ng.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xcp-ng.example.com.key;\n\n    location / {\n        proxy_pass http://xcp-ng_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName xcp-ng.example.com\n    Redirect permanent / https://xcp-ng.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName xcp-ng.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xcp-ng.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xcp-ng.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend xcp-ng_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xcp-ng.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xcp-ng_backend\n\nbackend xcp-ng_backend\n    balance roundrobin\n    server xcp-ng1 127.0.0.1:443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R xcp-ng:xcp-ng /etc/xcp-ng\nsudo chmod 750 /etc/xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status xcp-ng\n\n# View logs\nsudo journalctl -u xcp-ng -f\n\n# Monitor resource usage\ntop -p $(pgrep xcp-ng)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/xcp-ng&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/xcp-ng-backup-$DATE.tar.gz&quot; /etc/xcp-ng /var/lib/xcp-ng\n\necho &quot;Backup completed: $BACKUP_DIR/xcp-ng-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop xcp-ng\n\n# Restore from backup\ntar -xzf /backup/xcp-ng/xcp-ng-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xcp-ng</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u xcp-ng -n 100\nsudo tail -f /var/log/xcp-ng/xcp-ng.log\n\n# Check configuration\nxcp-ng --version\n\n# Check permissions\nls -la /etc/xcp-ng</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep xcp-ng)\n\n# Check disk I/O\niotop -p $(pgrep xcp-ng)\n\n# Check connections\nss -an | grep 443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  xcp-ng:\n    image: xcp-ng:latest\n    ports:\n      - &quot;443:443&quot;\n    volumes:\n      - ./config:/etc/xcp-ng\n      - ./data:/var/lib/xcp-ng\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xcp-ng\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade xcp-ng\n\n# Arch Linux\nsudo pacman -Syu xcp-ng\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade xcp-ng\n\n# openSUSE\nsudo zypper update xcp-ng\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade xcp-ng\n\n# Always backup before updates\ntar -czf /backup/xcp-ng-pre-update-$(date +%Y%m%d).tar.gz /etc/xcp-ng\n\n# Restart after updates\nsudo systemctl restart xcp-ng</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/xcp-ng\n\n# Clean old logs\nfind /var/log/xcp-ng -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xcp-ng</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.xcp-ng.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/xcp-ng/xcp-ng</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.xcp-ng.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.xcp-ng.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1271,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:10.057Z",
            "metadataVersion": "2.0"
          },
          {
            "name": "xen-orchestra",
            "displayName": "xen-orchestra - CentOS",
            "slug": "xen-orchestra",
            "description": "```bash",
            "category": "miscellaneous",
            "subcategory": "miscellaneous",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "miscellaneous"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/miscellaneous/xen-orchestra",
            "documentationUrl": "https://howtomgr.github.io/miscellaneous/xen-orchestra",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/xen-orchestra",
            "updatedAt": "2025-09-16T18:04:00Z",
            "createdAt": "2023-08-28T03:50:35Z",
            "readmeRaw": "# xen-orchestra - CentOS\n\n```bash\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall 'Development Tools'\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## xen-orchestra - Debian\n\n```bash\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## xen-orchestra - Updating\n\n```bash\ncd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build\n```\n",
            "readmeHtml": "<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall &#039;Development Tools&#039;\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-debian\" class=\"mobile-header\">xen-orchestra - Debian</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-updating\" class=\"mobile-header\">xen-orchestra - Updating</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build</code></pre>\n      </div>\n    </div>",
            "readTime": "1 min",
            "wordCount": 197,
            "tableOfContents": [
              {
                "level": 2,
                "text": "xen-orchestra - Debian",
                "id": "xen-orchestra-debian"
              },
              {
                "level": 2,
                "text": "xen-orchestra - Updating",
                "id": "xen-orchestra-updating"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:09.807Z",
            "metadataVersion": "2.0"
          },
          {
            "name": "xwiki",
            "displayName": "xwiki Installation Guide",
            "slug": "xwiki",
            "description": "xwiki is a free and open-source enterprise wiki. XWiki provides powerful wiki platform with application development capabilities",
            "category": "miscellaneous",
            "subcategory": "miscellaneous",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443,
              8080
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "miscellaneous",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/miscellaneous/xwiki",
            "documentationUrl": "https://howtomgr.github.io/miscellaneous/xwiki",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/xwiki",
            "updatedAt": "2025-09-16T18:04:14Z",
            "createdAt": "2025-09-16T08:42:53Z",
            "readmeRaw": "# xwiki Installation Guide\n\nxwiki is a free and open-source enterprise wiki. XWiki provides powerful wiki platform with application development capabilities\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 5GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default xwiki port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xwiki\nsudo dnf install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxwiki --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install xwiki\nsudo apt install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nxwiki --version\n```\n\n### Arch Linux\n\n```bash\n# Install xwiki\nsudo pacman -S xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Verify installation\nxwiki --version\n```\n\n### Alpine Linux\n\n```bash\n# Install xwiki\napk add --no-cache xwiki\n\n# Enable and start service\nrc-update add xwiki default\nrc-service xwiki start\n\n# Verify installation\nxwiki --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install xwiki\nsudo zypper install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxwiki --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install xwiki\n\n# Start service\nbrew services start xwiki\n\n# Verify installation\nxwiki --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install xwiki\n\n# Enable in rc.conf\necho 'xwiki_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xwiki start\n\n# Verify installation\nxwiki --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install xwiki\n\n# Or using Scoop\nscoop install xwiki\n\n# Verify installation\nxwiki --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/xwiki\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxwiki --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable xwiki\n\n# Start service\nsudo systemctl start xwiki\n\n# Stop service\nsudo systemctl stop xwiki\n\n# Restart service\nsudo systemctl restart xwiki\n\n# Check status\nsudo systemctl status xwiki\n\n# View logs\nsudo journalctl -u xwiki -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add xwiki default\n\n# Start service\nrc-service xwiki start\n\n# Stop service\nrc-service xwiki stop\n\n# Restart service\nrc-service xwiki restart\n\n# Check status\nrc-service xwiki status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'xwiki_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xwiki start\n\n# Stop service\nservice xwiki stop\n\n# Restart service\nservice xwiki restart\n\n# Check status\nservice xwiki status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start xwiki\nbrew services stop xwiki\nbrew services restart xwiki\n\n# Check status\nbrew services list | grep xwiki\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start xwiki\n\n# Stop service\nnet stop xwiki\n\n# Using PowerShell\nStart-Service xwiki\nStop-Service xwiki\nRestart-Service xwiki\n\n# Check status\nGet-Service xwiki\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream xwiki_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name xwiki.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xwiki.example.com;\n\n    ssl_certificate /etc/ssl/certs/xwiki.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xwiki.example.com.key;\n\n    location / {\n        proxy_pass http://xwiki_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName xwiki.example.com\n    Redirect permanent / https://xwiki.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName xwiki.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xwiki.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xwiki.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend xwiki_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xwiki.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xwiki_backend\n\nbackend xwiki_backend\n    balance roundrobin\n    server xwiki1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R xwiki:xwiki /etc/xwiki\nsudo chmod 750 /etc/xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status xwiki\n\n# View logs\nsudo journalctl -u xwiki -f\n\n# Monitor resource usage\ntop -p $(pgrep xwiki)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/xwiki\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/xwiki-backup-$DATE.tar.gz\" /etc/xwiki /var/lib/xwiki\n\necho \"Backup completed: $BACKUP_DIR/xwiki-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop xwiki\n\n# Restore from backup\ntar -xzf /backup/xwiki/xwiki-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xwiki\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u xwiki -n 100\nsudo tail -f /var/log/xwiki/xwiki.log\n\n# Check configuration\nxwiki --version\n\n# Check permissions\nls -la /etc/xwiki\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep xwiki)\n\n# Check disk I/O\niotop -p $(pgrep xwiki)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  xwiki:\n    image: xwiki:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/xwiki\n      - ./data:/var/lib/xwiki\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xwiki\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade xwiki\n\n# Arch Linux\nsudo pacman -Syu xwiki\n\n# Alpine Linux\napk update && apk upgrade xwiki\n\n# openSUSE\nsudo zypper update xwiki\n\n# FreeBSD\npkg update && pkg upgrade xwiki\n\n# Always backup before updates\ntar -czf /backup/xwiki-pre-update-$(date +%Y%m%d).tar.gz /etc/xwiki\n\n# Restart after updates\nsudo systemctl restart xwiki\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/xwiki\n\n# Clean old logs\nfind /var/log/xwiki -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xwiki\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.xwiki.org/\n- GitHub Repository: https://github.com/xwiki/xwiki\n- Community Forum: https://forum.xwiki.org/\n- Best Practices Guide: https://docs.xwiki.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">xwiki is a free and open-source enterprise wiki. XWiki provides powerful wiki platform with application development capabilities</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 5GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default xwiki port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xwiki\nsudo dnf install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install xwiki\nsudo apt install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xwiki\nsudo pacman -S xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xwiki\napk add --no-cache xwiki\n\n# Enable and start service\nrc-update add xwiki default\nrc-service xwiki start\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xwiki\nsudo zypper install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install xwiki\n\n# Start service\nbrew services start xwiki\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install xwiki\n\n# Enable in rc.conf\necho &#039;xwiki_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xwiki start\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install xwiki\n\n# Or using Scoop\nscoop install xwiki\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/xwiki\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable xwiki\n\n# Start service\nsudo systemctl start xwiki\n\n# Stop service\nsudo systemctl stop xwiki\n\n# Restart service\nsudo systemctl restart xwiki\n\n# Check status\nsudo systemctl status xwiki\n\n# View logs\nsudo journalctl -u xwiki -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add xwiki default\n\n# Start service\nrc-service xwiki start\n\n# Stop service\nrc-service xwiki stop\n\n# Restart service\nrc-service xwiki restart\n\n# Check status\nrc-service xwiki status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;xwiki_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xwiki start\n\n# Stop service\nservice xwiki stop\n\n# Restart service\nservice xwiki restart\n\n# Check status\nservice xwiki status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start xwiki\nbrew services stop xwiki\nbrew services restart xwiki\n\n# Check status\nbrew services list | grep xwiki</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start xwiki\n\n# Stop service\nnet stop xwiki\n\n# Using PowerShell\nStart-Service xwiki\nStop-Service xwiki\nRestart-Service xwiki\n\n# Check status\nGet-Service xwiki</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream xwiki_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name xwiki.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xwiki.example.com;\n\n    ssl_certificate /etc/ssl/certs/xwiki.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xwiki.example.com.key;\n\n    location / {\n        proxy_pass http://xwiki_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName xwiki.example.com\n    Redirect permanent / https://xwiki.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName xwiki.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xwiki.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xwiki.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend xwiki_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xwiki.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xwiki_backend\n\nbackend xwiki_backend\n    balance roundrobin\n    server xwiki1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R xwiki:xwiki /etc/xwiki\nsudo chmod 750 /etc/xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status xwiki\n\n# View logs\nsudo journalctl -u xwiki -f\n\n# Monitor resource usage\ntop -p $(pgrep xwiki)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/xwiki&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/xwiki-backup-$DATE.tar.gz&quot; /etc/xwiki /var/lib/xwiki\n\necho &quot;Backup completed: $BACKUP_DIR/xwiki-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop xwiki\n\n# Restore from backup\ntar -xzf /backup/xwiki/xwiki-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xwiki</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u xwiki -n 100\nsudo tail -f /var/log/xwiki/xwiki.log\n\n# Check configuration\nxwiki --version\n\n# Check permissions\nls -la /etc/xwiki</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep xwiki)\n\n# Check disk I/O\niotop -p $(pgrep xwiki)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  xwiki:\n    image: xwiki:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/xwiki\n      - ./data:/var/lib/xwiki\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xwiki\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade xwiki\n\n# Arch Linux\nsudo pacman -Syu xwiki\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade xwiki\n\n# openSUSE\nsudo zypper update xwiki\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade xwiki\n\n# Always backup before updates\ntar -czf /backup/xwiki-pre-update-$(date +%Y%m%d).tar.gz /etc/xwiki\n\n# Restart after updates\nsudo systemctl restart xwiki</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/xwiki\n\n# Clean old logs\nfind /var/log/xwiki -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xwiki</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.xwiki.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/xwiki/xwiki</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.xwiki.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.xwiki.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1268,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:09.299Z",
            "metadataVersion": "2.0"
          },
          {
            "name": "youtransfer",
            "displayName": "youtransfer Installation Guide",
            "slug": "youtransfer",
            "description": "youtransfer is a free and open-source self-hosted file transfer. YouTransfer enables easy file sharing with a simple, self-hosted platform",
            "category": "miscellaneous",
            "subcategory": "miscellaneous",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443,
              5000
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "miscellaneous",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/miscellaneous/youtransfer",
            "documentationUrl": "https://howtomgr.github.io/miscellaneous/youtransfer",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/youtransfer",
            "updatedAt": "2025-09-16T18:04:27Z",
            "createdAt": "2025-09-16T08:43:16Z",
            "readmeRaw": "# youtransfer Installation Guide\n\nyoutransfer is a free and open-source self-hosted file transfer. YouTransfer enables easy file sharing with a simple, self-hosted platform\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 1GB for files\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 5000 (default youtransfer port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install youtransfer\nsudo dnf install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyoutransfer --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install youtransfer\nsudo apt install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo ufw allow 5000\n\n# Verify installation\nyoutransfer --version\n```\n\n### Arch Linux\n\n```bash\n# Install youtransfer\nsudo pacman -S youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Verify installation\nyoutransfer --version\n```\n\n### Alpine Linux\n\n```bash\n# Install youtransfer\napk add --no-cache youtransfer\n\n# Enable and start service\nrc-update add youtransfer default\nrc-service youtransfer start\n\n# Verify installation\nyoutransfer --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install youtransfer\nsudo zypper install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyoutransfer --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install youtransfer\n\n# Start service\nbrew services start youtransfer\n\n# Verify installation\nyoutransfer --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install youtransfer\n\n# Enable in rc.conf\necho 'youtransfer_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice youtransfer start\n\n# Verify installation\nyoutransfer --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install youtransfer\n\n# Or using Scoop\nscoop install youtransfer\n\n# Verify installation\nyoutransfer --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/youtransfer\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nyoutransfer --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable youtransfer\n\n# Start service\nsudo systemctl start youtransfer\n\n# Stop service\nsudo systemctl stop youtransfer\n\n# Restart service\nsudo systemctl restart youtransfer\n\n# Check status\nsudo systemctl status youtransfer\n\n# View logs\nsudo journalctl -u youtransfer -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add youtransfer default\n\n# Start service\nrc-service youtransfer start\n\n# Stop service\nrc-service youtransfer stop\n\n# Restart service\nrc-service youtransfer restart\n\n# Check status\nrc-service youtransfer status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'youtransfer_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice youtransfer start\n\n# Stop service\nservice youtransfer stop\n\n# Restart service\nservice youtransfer restart\n\n# Check status\nservice youtransfer status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start youtransfer\nbrew services stop youtransfer\nbrew services restart youtransfer\n\n# Check status\nbrew services list | grep youtransfer\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start youtransfer\n\n# Stop service\nnet stop youtransfer\n\n# Using PowerShell\nStart-Service youtransfer\nStop-Service youtransfer\nRestart-Service youtransfer\n\n# Check status\nGet-Service youtransfer\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream youtransfer_backend {\n    server 127.0.0.1:5000;\n}\n\nserver {\n    listen 80;\n    server_name youtransfer.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name youtransfer.example.com;\n\n    ssl_certificate /etc/ssl/certs/youtransfer.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/youtransfer.example.com.key;\n\n    location / {\n        proxy_pass http://youtransfer_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName youtransfer.example.com\n    Redirect permanent / https://youtransfer.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName youtransfer.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/youtransfer.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/youtransfer.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5000/\n    ProxyPassReverse / http://127.0.0.1:5000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend youtransfer_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/youtransfer.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend youtransfer_backend\n\nbackend youtransfer_backend\n    balance roundrobin\n    server youtransfer1 127.0.0.1:5000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R youtransfer:youtransfer /etc/youtransfer\nsudo chmod 750 /etc/youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status youtransfer\n\n# View logs\nsudo journalctl -u youtransfer -f\n\n# Monitor resource usage\ntop -p $(pgrep youtransfer)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/youtransfer\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/youtransfer-backup-$DATE.tar.gz\" /etc/youtransfer /var/lib/youtransfer\n\necho \"Backup completed: $BACKUP_DIR/youtransfer-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop youtransfer\n\n# Restore from backup\ntar -xzf /backup/youtransfer/youtransfer-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start youtransfer\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u youtransfer -n 100\nsudo tail -f /var/log/youtransfer/youtransfer.log\n\n# Check configuration\nyoutransfer --version\n\n# Check permissions\nls -la /etc/youtransfer\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 5000\n\n# Test connectivity\ntelnet localhost 5000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep youtransfer)\n\n# Check disk I/O\niotop -p $(pgrep youtransfer)\n\n# Check connections\nss -an | grep 5000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  youtransfer:\n    image: youtransfer:latest\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - ./config:/etc/youtransfer\n      - ./data:/var/lib/youtransfer\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update youtransfer\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade youtransfer\n\n# Arch Linux\nsudo pacman -Syu youtransfer\n\n# Alpine Linux\napk update && apk upgrade youtransfer\n\n# openSUSE\nsudo zypper update youtransfer\n\n# FreeBSD\npkg update && pkg upgrade youtransfer\n\n# Always backup before updates\ntar -czf /backup/youtransfer-pre-update-$(date +%Y%m%d).tar.gz /etc/youtransfer\n\n# Restart after updates\nsudo systemctl restart youtransfer\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/youtransfer\n\n# Clean old logs\nfind /var/log/youtransfer -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/youtransfer\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.youtransfer.org/\n- GitHub Repository: https://github.com/youtransfer/youtransfer\n- Community Forum: https://forum.youtransfer.org/\n- Best Practices Guide: https://docs.youtransfer.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">youtransfer is a free and open-source self-hosted file transfer. YouTransfer enables easy file sharing with a simple, self-hosted platform</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for files</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5000 (default youtransfer port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install youtransfer\nsudo dnf install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install youtransfer\nsudo apt install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo ufw allow 5000\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install youtransfer\nsudo pacman -S youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install youtransfer\napk add --no-cache youtransfer\n\n# Enable and start service\nrc-update add youtransfer default\nrc-service youtransfer start\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install youtransfer\nsudo zypper install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install youtransfer\n\n# Start service\nbrew services start youtransfer\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install youtransfer\n\n# Enable in rc.conf\necho &#039;youtransfer_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice youtransfer start\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install youtransfer\n\n# Or using Scoop\nscoop install youtransfer\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/youtransfer\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable youtransfer\n\n# Start service\nsudo systemctl start youtransfer\n\n# Stop service\nsudo systemctl stop youtransfer\n\n# Restart service\nsudo systemctl restart youtransfer\n\n# Check status\nsudo systemctl status youtransfer\n\n# View logs\nsudo journalctl -u youtransfer -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add youtransfer default\n\n# Start service\nrc-service youtransfer start\n\n# Stop service\nrc-service youtransfer stop\n\n# Restart service\nrc-service youtransfer restart\n\n# Check status\nrc-service youtransfer status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;youtransfer_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice youtransfer start\n\n# Stop service\nservice youtransfer stop\n\n# Restart service\nservice youtransfer restart\n\n# Check status\nservice youtransfer status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start youtransfer\nbrew services stop youtransfer\nbrew services restart youtransfer\n\n# Check status\nbrew services list | grep youtransfer</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start youtransfer\n\n# Stop service\nnet stop youtransfer\n\n# Using PowerShell\nStart-Service youtransfer\nStop-Service youtransfer\nRestart-Service youtransfer\n\n# Check status\nGet-Service youtransfer</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream youtransfer_backend {\n    server 127.0.0.1:5000;\n}\n\nserver {\n    listen 80;\n    server_name youtransfer.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name youtransfer.example.com;\n\n    ssl_certificate /etc/ssl/certs/youtransfer.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/youtransfer.example.com.key;\n\n    location / {\n        proxy_pass http://youtransfer_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName youtransfer.example.com\n    Redirect permanent / https://youtransfer.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName youtransfer.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/youtransfer.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/youtransfer.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5000/\n    ProxyPassReverse / http://127.0.0.1:5000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend youtransfer_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/youtransfer.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend youtransfer_backend\n\nbackend youtransfer_backend\n    balance roundrobin\n    server youtransfer1 127.0.0.1:5000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R youtransfer:youtransfer /etc/youtransfer\nsudo chmod 750 /etc/youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status youtransfer\n\n# View logs\nsudo journalctl -u youtransfer -f\n\n# Monitor resource usage\ntop -p $(pgrep youtransfer)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/youtransfer&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/youtransfer-backup-$DATE.tar.gz&quot; /etc/youtransfer /var/lib/youtransfer\n\necho &quot;Backup completed: $BACKUP_DIR/youtransfer-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop youtransfer\n\n# Restore from backup\ntar -xzf /backup/youtransfer/youtransfer-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start youtransfer</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u youtransfer -n 100\nsudo tail -f /var/log/youtransfer/youtransfer.log\n\n# Check configuration\nyoutransfer --version\n\n# Check permissions\nls -la /etc/youtransfer</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 5000\n\n# Test connectivity\ntelnet localhost 5000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep youtransfer)\n\n# Check disk I/O\niotop -p $(pgrep youtransfer)\n\n# Check connections\nss -an | grep 5000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  youtransfer:\n    image: youtransfer:latest\n    ports:\n      - &quot;5000:5000&quot;\n    volumes:\n      - ./config:/etc/youtransfer\n      - ./data:/var/lib/youtransfer\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update youtransfer\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade youtransfer\n\n# Arch Linux\nsudo pacman -Syu youtransfer\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade youtransfer\n\n# openSUSE\nsudo zypper update youtransfer\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade youtransfer\n\n# Always backup before updates\ntar -czf /backup/youtransfer-pre-update-$(date +%Y%m%d).tar.gz /etc/youtransfer\n\n# Restart after updates\nsudo systemctl restart youtransfer</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/youtransfer\n\n# Clean old logs\nfind /var/log/youtransfer -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/youtransfer</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.youtransfer.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/youtransfer/youtransfer</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.youtransfer.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.youtransfer.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1271,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:08.771Z",
            "metadataVersion": "2.0"
          },
          {
            "name": "zabbix-server",
            "displayName": "zabbix Installation Guide",
            "slug": "zabbix-server",
            "description": "zabbix is a free and open-source enterprise-class monitoring solution. Zabbix provides comprehensive monitoring for networks, servers, and applications, serving as an open-source alternative to Nagios, PRTG, or SolarWinds",
            "category": "miscellaneous",
            "subcategory": "miscellaneous",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443,
              10050,
              10051
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "miscellaneous",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/miscellaneous/zabbix-server",
            "documentationUrl": "https://howtomgr.github.io/miscellaneous/zabbix-server",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/zabbix-server",
            "updatedAt": "2025-09-16T18:04:42Z",
            "createdAt": "2025-09-16T08:43:39Z",
            "readmeRaw": "# zabbix Installation Guide\n\nzabbix is a free and open-source enterprise-class monitoring solution. Zabbix provides comprehensive monitoring for networks, servers, and applications, serving as an open-source alternative to Nagios, PRTG, or SolarWinds\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores recommended\n  - RAM: 2GB minimum (8GB+ for large deployments)\n  - Storage: 10GB+ for metrics\n  - Network: Agent and SNMP connectivity\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 10051 (default zabbix port)\n  - Port 10050 for agents\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zabbix\nsudo dnf install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix_server --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zabbix\nsudo apt install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo ufw allow 10051\n\n# Verify installation\nzabbix_server --version\n```\n\n### Arch Linux\n\n```bash\n# Install zabbix\nsudo pacman -S zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Verify installation\nzabbix_server --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zabbix\napk add --no-cache zabbix-server\n\n# Enable and start service\nrc-update add zabbix-server default\nrc-service zabbix-server start\n\n# Verify installation\nzabbix_server --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zabbix\nsudo zypper install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix_server --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zabbix-server\n\n# Start service\nbrew services start zabbix-server\n\n# Verify installation\nzabbix_server --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zabbix-server\n\n# Enable in rc.conf\necho 'zabbix-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Verify installation\nzabbix_server --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zabbix-server\n\n# Or using Scoop\nscoop install zabbix-server\n\n# Verify installation\nzabbix_server --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zabbix-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzabbix_server --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zabbix-server\n\n# Start service\nsudo systemctl start zabbix-server\n\n# Stop service\nsudo systemctl stop zabbix-server\n\n# Restart service\nsudo systemctl restart zabbix-server\n\n# Check status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zabbix-server default\n\n# Start service\nrc-service zabbix-server start\n\n# Stop service\nrc-service zabbix-server stop\n\n# Restart service\nrc-service zabbix-server restart\n\n# Check status\nrc-service zabbix-server status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zabbix-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Stop service\nservice zabbix-server stop\n\n# Restart service\nservice zabbix-server restart\n\n# Check status\nservice zabbix-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zabbix-server\nbrew services stop zabbix-server\nbrew services restart zabbix-server\n\n# Check status\nbrew services list | grep zabbix-server\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zabbix-server\n\n# Stop service\nnet stop zabbix-server\n\n# Using PowerShell\nStart-Service zabbix-server\nStop-Service zabbix-server\nRestart-Service zabbix-server\n\n# Check status\nGet-Service zabbix-server\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zabbix-server_backend {\n    server 127.0.0.1:10051;\n}\n\nserver {\n    listen 80;\n    server_name zabbix-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zabbix-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/zabbix-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zabbix-server.example.com.key;\n\n    location / {\n        proxy_pass http://zabbix-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zabbix-server.example.com\n    Redirect permanent / https://zabbix-server.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zabbix-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zabbix-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zabbix-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:10051/\n    ProxyPassReverse / http://127.0.0.1:10051/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zabbix-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zabbix-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zabbix-server_backend\n\nbackend zabbix-server_backend\n    balance roundrobin\n    server zabbix-server1 127.0.0.1:10051 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zabbix-server:zabbix-server /etc/zabbix-server\nsudo chmod 750 /etc/zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f\n\n# Monitor resource usage\ntop -p $(pgrep zabbix-server)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zabbix-server\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zabbix-server-backup-$DATE.tar.gz\" /etc/zabbix-server /var/lib/zabbix-server\n\necho \"Backup completed: $BACKUP_DIR/zabbix-server-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zabbix-server\n\n# Restore from backup\ntar -xzf /backup/zabbix-server/zabbix-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zabbix-server\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zabbix-server -n 100\nsudo tail -f /var/log/zabbix-server/zabbix-server.log\n\n# Check configuration\nzabbix_server --version\n\n# Check permissions\nls -la /etc/zabbix-server\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 10051\n\n# Test connectivity\ntelnet localhost 10051\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zabbix-server)\n\n# Check disk I/O\niotop -p $(pgrep zabbix-server)\n\n# Check connections\nss -an | grep 10051\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zabbix-server:\n    image: zabbix-server:latest\n    ports:\n      - \"10051:10051\"\n    volumes:\n      - ./config:/etc/zabbix-server\n      - ./data:/var/lib/zabbix-server\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zabbix-server\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zabbix-server\n\n# Arch Linux\nsudo pacman -Syu zabbix-server\n\n# Alpine Linux\napk update && apk upgrade zabbix-server\n\n# openSUSE\nsudo zypper update zabbix-server\n\n# FreeBSD\npkg update && pkg upgrade zabbix-server\n\n# Always backup before updates\ntar -czf /backup/zabbix-server-pre-update-$(date +%Y%m%d).tar.gz /etc/zabbix-server\n\n# Restart after updates\nsudo systemctl restart zabbix-server\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zabbix-server\n\n# Clean old logs\nfind /var/log/zabbix-server -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zabbix-server\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zabbix-server.org/\n- GitHub Repository: https://github.com/zabbix-server/zabbix-server\n- Community Forum: https://forum.zabbix-server.org/\n- Best Practices Guide: https://docs.zabbix-server.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">zabbix is a free and open-source enterprise-class monitoring solution. Zabbix provides comprehensive monitoring for networks, servers, and applications, serving as an open-source alternative to Nagios, PRTG, or SolarWinds</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ for large deployments)</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ for metrics</li>\n<li class=\"mobile-list-item\">Network: Agent and SNMP connectivity</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 10051 (default zabbix port)</li>\n<li class=\"mobile-list-item\">Port 10050 for agents</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zabbix\nsudo dnf install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zabbix\nsudo apt install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo ufw allow 10051\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\nsudo pacman -S zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\napk add --no-cache zabbix-server\n\n# Enable and start service\nrc-update add zabbix-server default\nrc-service zabbix-server start\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\nsudo zypper install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zabbix-server\n\n# Start service\nbrew services start zabbix-server\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zabbix-server\n\n# Enable in rc.conf\necho &#039;zabbix-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zabbix-server\n\n# Or using Scoop\nscoop install zabbix-server\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zabbix-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zabbix-server\n\n# Start service\nsudo systemctl start zabbix-server\n\n# Stop service\nsudo systemctl stop zabbix-server\n\n# Restart service\nsudo systemctl restart zabbix-server\n\n# Check status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zabbix-server default\n\n# Start service\nrc-service zabbix-server start\n\n# Stop service\nrc-service zabbix-server stop\n\n# Restart service\nrc-service zabbix-server restart\n\n# Check status\nrc-service zabbix-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zabbix-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Stop service\nservice zabbix-server stop\n\n# Restart service\nservice zabbix-server restart\n\n# Check status\nservice zabbix-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zabbix-server\nbrew services stop zabbix-server\nbrew services restart zabbix-server\n\n# Check status\nbrew services list | grep zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zabbix-server\n\n# Stop service\nnet stop zabbix-server\n\n# Using PowerShell\nStart-Service zabbix-server\nStop-Service zabbix-server\nRestart-Service zabbix-server\n\n# Check status\nGet-Service zabbix-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zabbix-server_backend {\n    server 127.0.0.1:10051;\n}\n\nserver {\n    listen 80;\n    server_name zabbix-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zabbix-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/zabbix-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zabbix-server.example.com.key;\n\n    location / {\n        proxy_pass http://zabbix-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zabbix-server.example.com\n    Redirect permanent / https://zabbix-server.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zabbix-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zabbix-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zabbix-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:10051/\n    ProxyPassReverse / http://127.0.0.1:10051/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zabbix-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zabbix-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zabbix-server_backend\n\nbackend zabbix-server_backend\n    balance roundrobin\n    server zabbix-server1 127.0.0.1:10051 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zabbix-server:zabbix-server /etc/zabbix-server\nsudo chmod 750 /etc/zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f\n\n# Monitor resource usage\ntop -p $(pgrep zabbix-server)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zabbix-server&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zabbix-server-backup-$DATE.tar.gz&quot; /etc/zabbix-server /var/lib/zabbix-server\n\necho &quot;Backup completed: $BACKUP_DIR/zabbix-server-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zabbix-server\n\n# Restore from backup\ntar -xzf /backup/zabbix-server/zabbix-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zabbix-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zabbix-server -n 100\nsudo tail -f /var/log/zabbix-server/zabbix-server.log\n\n# Check configuration\nzabbix_server --version\n\n# Check permissions\nls -la /etc/zabbix-server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 10051\n\n# Test connectivity\ntelnet localhost 10051\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zabbix-server)\n\n# Check disk I/O\niotop -p $(pgrep zabbix-server)\n\n# Check connections\nss -an | grep 10051</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zabbix-server:\n    image: zabbix-server:latest\n    ports:\n      - &quot;10051:10051&quot;\n    volumes:\n      - ./config:/etc/zabbix-server\n      - ./data:/var/lib/zabbix-server\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zabbix-server\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zabbix-server\n\n# Arch Linux\nsudo pacman -Syu zabbix-server\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zabbix-server\n\n# openSUSE\nsudo zypper update zabbix-server\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zabbix-server\n\n# Always backup before updates\ntar -czf /backup/zabbix-server-pre-update-$(date +%Y%m%d).tar.gz /etc/zabbix-server\n\n# Restart after updates\nsudo systemctl restart zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zabbix-server\n\n# Clean old logs\nfind /var/log/zabbix-server -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zabbix-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zabbix-server.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zabbix-server/zabbix-server</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zabbix-server.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zabbix-server.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1289,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:08.188Z",
            "metadataVersion": "2.0"
          },
          {
            "name": "zen_cart",
            "displayName": "zen-cart Installation Guide",
            "slug": "zen_cart",
            "description": "zen-cart is a free and open-source e-commerce software. Zen Cart provides user-friendly e-commerce software",
            "category": "miscellaneous",
            "subcategory": "miscellaneous",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "miscellaneous",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/miscellaneous/zen_cart",
            "documentationUrl": "https://howtomgr.github.io/miscellaneous/zen_cart",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/zen_cart",
            "updatedAt": "2025-09-16T18:04:49Z",
            "createdAt": "2025-09-16T08:43:53Z",
            "readmeRaw": "# zen-cart Installation Guide\n\nzen-cart is a free and open-source e-commerce software. Zen Cart provides user-friendly e-commerce software\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 1GB minimum\n  - Storage: 5GB for data\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default zen-cart port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zen-cart\nsudo dnf install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzen-cart --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zen-cart\nsudo apt install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nzen-cart --version\n```\n\n### Arch Linux\n\n```bash\n# Install zen-cart\nsudo pacman -S zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Verify installation\nzen-cart --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zen-cart\napk add --no-cache zen_cart\n\n# Enable and start service\nrc-update add zen-cart default\nrc-service zen-cart start\n\n# Verify installation\nzen-cart --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zen-cart\nsudo zypper install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzen-cart --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zen_cart\n\n# Start service\nbrew services start zen_cart\n\n# Verify installation\nzen-cart --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zen_cart\n\n# Enable in rc.conf\necho 'zen-cart_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zen-cart start\n\n# Verify installation\nzen-cart --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zen_cart\n\n# Or using Scoop\nscoop install zen_cart\n\n# Verify installation\nzen-cart --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zen_cart\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzen-cart --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zen-cart\n\n# Start service\nsudo systemctl start zen-cart\n\n# Stop service\nsudo systemctl stop zen-cart\n\n# Restart service\nsudo systemctl restart zen-cart\n\n# Check status\nsudo systemctl status zen-cart\n\n# View logs\nsudo journalctl -u zen-cart -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zen-cart default\n\n# Start service\nrc-service zen-cart start\n\n# Stop service\nrc-service zen-cart stop\n\n# Restart service\nrc-service zen-cart restart\n\n# Check status\nrc-service zen-cart status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zen-cart_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zen-cart start\n\n# Stop service\nservice zen-cart stop\n\n# Restart service\nservice zen-cart restart\n\n# Check status\nservice zen-cart status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zen_cart\nbrew services stop zen_cart\nbrew services restart zen_cart\n\n# Check status\nbrew services list | grep zen_cart\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zen-cart\n\n# Stop service\nnet stop zen-cart\n\n# Using PowerShell\nStart-Service zen-cart\nStop-Service zen-cart\nRestart-Service zen-cart\n\n# Check status\nGet-Service zen-cart\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zen_cart_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name zen_cart.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zen_cart.example.com;\n\n    ssl_certificate /etc/ssl/certs/zen_cart.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zen_cart.example.com.key;\n\n    location / {\n        proxy_pass http://zen_cart_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zen_cart.example.com\n    Redirect permanent / https://zen_cart.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zen_cart.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zen_cart.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zen_cart.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zen_cart_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zen_cart.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zen_cart_backend\n\nbackend zen_cart_backend\n    balance roundrobin\n    server zen_cart1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zen_cart:zen_cart /etc/zen_cart\nsudo chmod 750 /etc/zen_cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zen-cart\n\n# View logs\nsudo journalctl -u zen-cart -f\n\n# Monitor resource usage\ntop -p $(pgrep zen_cart)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zen_cart\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zen_cart-backup-$DATE.tar.gz\" /etc/zen_cart /var/lib/zen_cart\n\necho \"Backup completed: $BACKUP_DIR/zen_cart-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zen-cart\n\n# Restore from backup\ntar -xzf /backup/zen_cart/zen_cart-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zen-cart\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zen-cart -n 100\nsudo tail -f /var/log/zen_cart/zen_cart.log\n\n# Check configuration\nzen-cart --version\n\n# Check permissions\nls -la /etc/zen_cart\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zen_cart)\n\n# Check disk I/O\niotop -p $(pgrep zen_cart)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zen_cart:\n    image: zen_cart:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/zen_cart\n      - ./data:/var/lib/zen_cart\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zen_cart\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zen_cart\n\n# Arch Linux\nsudo pacman -Syu zen_cart\n\n# Alpine Linux\napk update && apk upgrade zen_cart\n\n# openSUSE\nsudo zypper update zen_cart\n\n# FreeBSD\npkg update && pkg upgrade zen_cart\n\n# Always backup before updates\ntar -czf /backup/zen_cart-pre-update-$(date +%Y%m%d).tar.gz /etc/zen_cart\n\n# Restart after updates\nsudo systemctl restart zen-cart\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zen_cart\n\n# Clean old logs\nfind /var/log/zen_cart -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zen_cart\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zen_cart.org/\n- GitHub Repository: https://github.com/zen_cart/zen_cart\n- Community Forum: https://forum.zen_cart.org/\n- Best Practices Guide: https://docs.zen_cart.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">zen-cart is a free and open-source e-commerce software. Zen Cart provides user-friendly e-commerce software</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 5GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default zen-cart port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zen-cart\nsudo dnf install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zen-cart\nsudo apt install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zen-cart\nsudo pacman -S zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zen-cart\napk add --no-cache zen_cart\n\n# Enable and start service\nrc-update add zen-cart default\nrc-service zen-cart start\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zen-cart\nsudo zypper install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zen_cart\n\n# Start service\nbrew services start zen_cart\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zen_cart\n\n# Enable in rc.conf\necho &#039;zen-cart_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zen-cart start\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zen_cart\n\n# Or using Scoop\nscoop install zen_cart\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zen_cart\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zen-cart\n\n# Start service\nsudo systemctl start zen-cart\n\n# Stop service\nsudo systemctl stop zen-cart\n\n# Restart service\nsudo systemctl restart zen-cart\n\n# Check status\nsudo systemctl status zen-cart\n\n# View logs\nsudo journalctl -u zen-cart -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zen-cart default\n\n# Start service\nrc-service zen-cart start\n\n# Stop service\nrc-service zen-cart stop\n\n# Restart service\nrc-service zen-cart restart\n\n# Check status\nrc-service zen-cart status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zen-cart_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zen-cart start\n\n# Stop service\nservice zen-cart stop\n\n# Restart service\nservice zen-cart restart\n\n# Check status\nservice zen-cart status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zen_cart\nbrew services stop zen_cart\nbrew services restart zen_cart\n\n# Check status\nbrew services list | grep zen_cart</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zen-cart\n\n# Stop service\nnet stop zen-cart\n\n# Using PowerShell\nStart-Service zen-cart\nStop-Service zen-cart\nRestart-Service zen-cart\n\n# Check status\nGet-Service zen-cart</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zen_cart_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name zen_cart.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zen_cart.example.com;\n\n    ssl_certificate /etc/ssl/certs/zen_cart.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zen_cart.example.com.key;\n\n    location / {\n        proxy_pass http://zen_cart_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zen_cart.example.com\n    Redirect permanent / https://zen_cart.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zen_cart.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zen_cart.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zen_cart.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zen_cart_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zen_cart.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zen_cart_backend\n\nbackend zen_cart_backend\n    balance roundrobin\n    server zen_cart1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zen_cart:zen_cart /etc/zen_cart\nsudo chmod 750 /etc/zen_cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zen-cart\n\n# View logs\nsudo journalctl -u zen-cart -f\n\n# Monitor resource usage\ntop -p $(pgrep zen_cart)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zen_cart&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zen_cart-backup-$DATE.tar.gz&quot; /etc/zen_cart /var/lib/zen_cart\n\necho &quot;Backup completed: $BACKUP_DIR/zen_cart-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zen-cart\n\n# Restore from backup\ntar -xzf /backup/zen_cart/zen_cart-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zen-cart</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zen-cart -n 100\nsudo tail -f /var/log/zen_cart/zen_cart.log\n\n# Check configuration\nzen-cart --version\n\n# Check permissions\nls -la /etc/zen_cart</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zen_cart)\n\n# Check disk I/O\niotop -p $(pgrep zen_cart)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zen_cart:\n    image: zen_cart:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/zen_cart\n      - ./data:/var/lib/zen_cart\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zen_cart\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zen_cart\n\n# Arch Linux\nsudo pacman -Syu zen_cart\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zen_cart\n\n# openSUSE\nsudo zypper update zen_cart\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zen_cart\n\n# Always backup before updates\ntar -czf /backup/zen_cart-pre-update-$(date +%Y%m%d).tar.gz /etc/zen_cart\n\n# Restart after updates\nsudo systemctl restart zen-cart</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zen_cart\n\n# Clean old logs\nfind /var/log/zen_cart -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zen_cart</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zen_cart.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zen_cart/zen_cart</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zen_cart.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zen_cart.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1265,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:07.919Z",
            "metadataVersion": "2.0"
          },
          {
            "name": "zerotier-one",
            "displayName": "zerotier Installation Guide",
            "slug": "zerotier-one",
            "description": "zerotier is a free and open-source global virtual networking. ZeroTier creates secure peer-to-peer virtual networks, serving as a software-defined networking solution for distributed teams",
            "category": "miscellaneous",
            "subcategory": "miscellaneous",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443,
              9993
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "miscellaneous",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/miscellaneous/zerotier-one",
            "documentationUrl": "https://howtomgr.github.io/miscellaneous/zerotier-one",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/zerotier-one",
            "updatedAt": "2025-09-16T18:04:57Z",
            "createdAt": "2025-09-16T08:44:08Z",
            "readmeRaw": "# zerotier Installation Guide\n\nzerotier is a free and open-source global virtual networking. ZeroTier creates secure peer-to-peer virtual networks, serving as a software-defined networking solution for distributed teams\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB for installation\n  - Network: UDP port 9993\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9993 (default zerotier port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zerotier\nsudo dnf install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzerotier-cli status\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zerotier\nsudo apt install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo ufw allow 9993\n\n# Verify installation\nzerotier-cli status\n```\n\n### Arch Linux\n\n```bash\n# Install zerotier\nsudo pacman -S zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Verify installation\nzerotier-cli status\n```\n\n### Alpine Linux\n\n```bash\n# Install zerotier\napk add --no-cache zerotier-one\n\n# Enable and start service\nrc-update add zerotier-one default\nrc-service zerotier-one start\n\n# Verify installation\nzerotier-cli status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zerotier\nsudo zypper install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzerotier-cli status\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zerotier-one\n\n# Start service\nbrew services start zerotier-one\n\n# Verify installation\nzerotier-cli status\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zerotier-one\n\n# Enable in rc.conf\necho 'zerotier-one_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zerotier-one start\n\n# Verify installation\nzerotier-cli status\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zerotier-one\n\n# Or using Scoop\nscoop install zerotier-one\n\n# Verify installation\nzerotier-cli status\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zerotier-one\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzerotier-cli status\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zerotier-one\n\n# Start service\nsudo systemctl start zerotier-one\n\n# Stop service\nsudo systemctl stop zerotier-one\n\n# Restart service\nsudo systemctl restart zerotier-one\n\n# Check status\nsudo systemctl status zerotier-one\n\n# View logs\nsudo journalctl -u zerotier-one -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zerotier-one default\n\n# Start service\nrc-service zerotier-one start\n\n# Stop service\nrc-service zerotier-one stop\n\n# Restart service\nrc-service zerotier-one restart\n\n# Check status\nrc-service zerotier-one status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zerotier-one_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zerotier-one start\n\n# Stop service\nservice zerotier-one stop\n\n# Restart service\nservice zerotier-one restart\n\n# Check status\nservice zerotier-one status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zerotier-one\nbrew services stop zerotier-one\nbrew services restart zerotier-one\n\n# Check status\nbrew services list | grep zerotier-one\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zerotier-one\n\n# Stop service\nnet stop zerotier-one\n\n# Using PowerShell\nStart-Service zerotier-one\nStop-Service zerotier-one\nRestart-Service zerotier-one\n\n# Check status\nGet-Service zerotier-one\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zerotier-one_backend {\n    server 127.0.0.1:9993;\n}\n\nserver {\n    listen 80;\n    server_name zerotier-one.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zerotier-one.example.com;\n\n    ssl_certificate /etc/ssl/certs/zerotier-one.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zerotier-one.example.com.key;\n\n    location / {\n        proxy_pass http://zerotier-one_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zerotier-one.example.com\n    Redirect permanent / https://zerotier-one.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zerotier-one.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zerotier-one.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zerotier-one.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9993/\n    ProxyPassReverse / http://127.0.0.1:9993/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zerotier-one_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zerotier-one.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zerotier-one_backend\n\nbackend zerotier-one_backend\n    balance roundrobin\n    server zerotier-one1 127.0.0.1:9993 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zerotier-one:zerotier-one /etc/zerotier-one\nsudo chmod 750 /etc/zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zerotier-one\n\n# View logs\nsudo journalctl -u zerotier-one -f\n\n# Monitor resource usage\ntop -p $(pgrep zerotier-one)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zerotier-one\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zerotier-one-backup-$DATE.tar.gz\" /etc/zerotier-one /var/lib/zerotier-one\n\necho \"Backup completed: $BACKUP_DIR/zerotier-one-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zerotier-one\n\n# Restore from backup\ntar -xzf /backup/zerotier-one/zerotier-one-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zerotier-one\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zerotier-one -n 100\nsudo tail -f /var/log/zerotier-one/zerotier-one.log\n\n# Check configuration\nzerotier-cli status\n\n# Check permissions\nls -la /etc/zerotier-one\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9993\n\n# Test connectivity\ntelnet localhost 9993\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zerotier-one)\n\n# Check disk I/O\niotop -p $(pgrep zerotier-one)\n\n# Check connections\nss -an | grep 9993\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zerotier-one:\n    image: zerotier-one:latest\n    ports:\n      - \"9993:9993\"\n    volumes:\n      - ./config:/etc/zerotier-one\n      - ./data:/var/lib/zerotier-one\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zerotier-one\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zerotier-one\n\n# Arch Linux\nsudo pacman -Syu zerotier-one\n\n# Alpine Linux\napk update && apk upgrade zerotier-one\n\n# openSUSE\nsudo zypper update zerotier-one\n\n# FreeBSD\npkg update && pkg upgrade zerotier-one\n\n# Always backup before updates\ntar -czf /backup/zerotier-one-pre-update-$(date +%Y%m%d).tar.gz /etc/zerotier-one\n\n# Restart after updates\nsudo systemctl restart zerotier-one\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zerotier-one\n\n# Clean old logs\nfind /var/log/zerotier-one -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zerotier-one\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zerotier-one.org/\n- GitHub Repository: https://github.com/zerotier-one/zerotier-one\n- Community Forum: https://forum.zerotier-one.org/\n- Best Practices Guide: https://docs.zerotier-one.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">zerotier is a free and open-source global virtual networking. ZeroTier creates secure peer-to-peer virtual networks, serving as a software-defined networking solution for distributed teams</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: UDP port 9993</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9993 (default zerotier port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zerotier\nsudo dnf install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zerotier\nsudo apt install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo ufw allow 9993\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zerotier\nsudo pacman -S zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zerotier\napk add --no-cache zerotier-one\n\n# Enable and start service\nrc-update add zerotier-one default\nrc-service zerotier-one start\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zerotier\nsudo zypper install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zerotier-one\n\n# Start service\nbrew services start zerotier-one\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zerotier-one\n\n# Enable in rc.conf\necho &#039;zerotier-one_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zerotier-one start\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zerotier-one\n\n# Or using Scoop\nscoop install zerotier-one\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zerotier-one\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zerotier-one\n\n# Start service\nsudo systemctl start zerotier-one\n\n# Stop service\nsudo systemctl stop zerotier-one\n\n# Restart service\nsudo systemctl restart zerotier-one\n\n# Check status\nsudo systemctl status zerotier-one\n\n# View logs\nsudo journalctl -u zerotier-one -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zerotier-one default\n\n# Start service\nrc-service zerotier-one start\n\n# Stop service\nrc-service zerotier-one stop\n\n# Restart service\nrc-service zerotier-one restart\n\n# Check status\nrc-service zerotier-one status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zerotier-one_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zerotier-one start\n\n# Stop service\nservice zerotier-one stop\n\n# Restart service\nservice zerotier-one restart\n\n# Check status\nservice zerotier-one status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zerotier-one\nbrew services stop zerotier-one\nbrew services restart zerotier-one\n\n# Check status\nbrew services list | grep zerotier-one</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zerotier-one\n\n# Stop service\nnet stop zerotier-one\n\n# Using PowerShell\nStart-Service zerotier-one\nStop-Service zerotier-one\nRestart-Service zerotier-one\n\n# Check status\nGet-Service zerotier-one</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zerotier-one_backend {\n    server 127.0.0.1:9993;\n}\n\nserver {\n    listen 80;\n    server_name zerotier-one.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zerotier-one.example.com;\n\n    ssl_certificate /etc/ssl/certs/zerotier-one.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zerotier-one.example.com.key;\n\n    location / {\n        proxy_pass http://zerotier-one_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zerotier-one.example.com\n    Redirect permanent / https://zerotier-one.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zerotier-one.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zerotier-one.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zerotier-one.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9993/\n    ProxyPassReverse / http://127.0.0.1:9993/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zerotier-one_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zerotier-one.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zerotier-one_backend\n\nbackend zerotier-one_backend\n    balance roundrobin\n    server zerotier-one1 127.0.0.1:9993 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zerotier-one:zerotier-one /etc/zerotier-one\nsudo chmod 750 /etc/zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zerotier-one\n\n# View logs\nsudo journalctl -u zerotier-one -f\n\n# Monitor resource usage\ntop -p $(pgrep zerotier-one)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zerotier-one&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zerotier-one-backup-$DATE.tar.gz&quot; /etc/zerotier-one /var/lib/zerotier-one\n\necho &quot;Backup completed: $BACKUP_DIR/zerotier-one-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zerotier-one\n\n# Restore from backup\ntar -xzf /backup/zerotier-one/zerotier-one-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zerotier-one</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zerotier-one -n 100\nsudo tail -f /var/log/zerotier-one/zerotier-one.log\n\n# Check configuration\nzerotier-cli status\n\n# Check permissions\nls -la /etc/zerotier-one</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9993\n\n# Test connectivity\ntelnet localhost 9993\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zerotier-one)\n\n# Check disk I/O\niotop -p $(pgrep zerotier-one)\n\n# Check connections\nss -an | grep 9993</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zerotier-one:\n    image: zerotier-one:latest\n    ports:\n      - &quot;9993:9993&quot;\n    volumes:\n      - ./config:/etc/zerotier-one\n      - ./data:/var/lib/zerotier-one\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zerotier-one\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zerotier-one\n\n# Arch Linux\nsudo pacman -Syu zerotier-one\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zerotier-one\n\n# openSUSE\nsudo zypper update zerotier-one\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zerotier-one\n\n# Always backup before updates\ntar -czf /backup/zerotier-one-pre-update-$(date +%Y%m%d).tar.gz /etc/zerotier-one\n\n# Restart after updates\nsudo systemctl restart zerotier-one</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zerotier-one\n\n# Clean old logs\nfind /var/log/zerotier-one -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zerotier-one</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zerotier-one.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zerotier-one/zerotier-one</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zerotier-one.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zerotier-one.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1277,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:07.611Z",
            "metadataVersion": "2.0"
          },
          {
            "name": "zwavejs2mqtt",
            "displayName": "zwavejs2mqtt Installation Guide",
            "slug": "zwavejs2mqtt",
            "description": "zwavejs2mqtt is a free and open-source Z-Wave to MQTT. ZwaveJS2MQTT bridges Z-Wave devices to MQTT",
            "category": "miscellaneous",
            "subcategory": "miscellaneous",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443,
              8091
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "miscellaneous",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/miscellaneous/zwavejs2mqtt",
            "documentationUrl": "https://howtomgr.github.io/miscellaneous/zwavejs2mqtt",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/zwavejs2mqtt",
            "updatedAt": "2025-09-16T18:05:32Z",
            "createdAt": "2025-09-16T08:45:15Z",
            "readmeRaw": "# zwavejs2mqtt Installation Guide\n\nzwavejs2mqtt is a free and open-source Z-Wave to MQTT. ZwaveJS2MQTT bridges Z-Wave devices to MQTT\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 500MB for data\n  - Network: Z-Wave/MQTT\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8091 (default zwavejs2mqtt port)\n  - WS on 3000\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zwavejs2mqtt\nsudo dnf install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zwavejs2mqtt\nsudo apt install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo ufw allow 8091\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### Arch Linux\n\n```bash\n# Install zwavejs2mqtt\nsudo pacman -S zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zwavejs2mqtt\napk add --no-cache zwavejs2mqtt\n\n# Enable and start service\nrc-update add zwavejs2mqtt default\nrc-service zwavejs2mqtt start\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zwavejs2mqtt\nsudo zypper install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zwavejs2mqtt\n\n# Start service\nbrew services start zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zwavejs2mqtt\n\n# Enable in rc.conf\necho 'zwavejs2mqtt_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zwavejs2mqtt start\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zwavejs2mqtt\n\n# Or using Scoop\nscoop install zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zwavejs2mqtt\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzwavejs2mqtt --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zwavejs2mqtt\n\n# Start service\nsudo systemctl start zwavejs2mqtt\n\n# Stop service\nsudo systemctl stop zwavejs2mqtt\n\n# Restart service\nsudo systemctl restart zwavejs2mqtt\n\n# Check status\nsudo systemctl status zwavejs2mqtt\n\n# View logs\nsudo journalctl -u zwavejs2mqtt -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zwavejs2mqtt default\n\n# Start service\nrc-service zwavejs2mqtt start\n\n# Stop service\nrc-service zwavejs2mqtt stop\n\n# Restart service\nrc-service zwavejs2mqtt restart\n\n# Check status\nrc-service zwavejs2mqtt status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zwavejs2mqtt_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zwavejs2mqtt start\n\n# Stop service\nservice zwavejs2mqtt stop\n\n# Restart service\nservice zwavejs2mqtt restart\n\n# Check status\nservice zwavejs2mqtt status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zwavejs2mqtt\nbrew services stop zwavejs2mqtt\nbrew services restart zwavejs2mqtt\n\n# Check status\nbrew services list | grep zwavejs2mqtt\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zwavejs2mqtt\n\n# Stop service\nnet stop zwavejs2mqtt\n\n# Using PowerShell\nStart-Service zwavejs2mqtt\nStop-Service zwavejs2mqtt\nRestart-Service zwavejs2mqtt\n\n# Check status\nGet-Service zwavejs2mqtt\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zwavejs2mqtt_backend {\n    server 127.0.0.1:8091;\n}\n\nserver {\n    listen 80;\n    server_name zwavejs2mqtt.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zwavejs2mqtt.example.com;\n\n    ssl_certificate /etc/ssl/certs/zwavejs2mqtt.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zwavejs2mqtt.example.com.key;\n\n    location / {\n        proxy_pass http://zwavejs2mqtt_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zwavejs2mqtt.example.com\n    Redirect permanent / https://zwavejs2mqtt.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zwavejs2mqtt.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zwavejs2mqtt.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zwavejs2mqtt.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8091/\n    ProxyPassReverse / http://127.0.0.1:8091/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zwavejs2mqtt_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zwavejs2mqtt.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zwavejs2mqtt_backend\n\nbackend zwavejs2mqtt_backend\n    balance roundrobin\n    server zwavejs2mqtt1 127.0.0.1:8091 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zwavejs2mqtt:zwavejs2mqtt /etc/zwavejs2mqtt\nsudo chmod 750 /etc/zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zwavejs2mqtt\n\n# View logs\nsudo journalctl -u zwavejs2mqtt -f\n\n# Monitor resource usage\ntop -p $(pgrep zwavejs2mqtt)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zwavejs2mqtt\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zwavejs2mqtt-backup-$DATE.tar.gz\" /etc/zwavejs2mqtt /var/lib/zwavejs2mqtt\n\necho \"Backup completed: $BACKUP_DIR/zwavejs2mqtt-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zwavejs2mqtt\n\n# Restore from backup\ntar -xzf /backup/zwavejs2mqtt/zwavejs2mqtt-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zwavejs2mqtt\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zwavejs2mqtt -n 100\nsudo tail -f /var/log/zwavejs2mqtt/zwavejs2mqtt.log\n\n# Check configuration\nzwavejs2mqtt --version\n\n# Check permissions\nls -la /etc/zwavejs2mqtt\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8091\n\n# Test connectivity\ntelnet localhost 8091\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zwavejs2mqtt)\n\n# Check disk I/O\niotop -p $(pgrep zwavejs2mqtt)\n\n# Check connections\nss -an | grep 8091\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zwavejs2mqtt:\n    image: zwavejs2mqtt:latest\n    ports:\n      - \"8091:8091\"\n    volumes:\n      - ./config:/etc/zwavejs2mqtt\n      - ./data:/var/lib/zwavejs2mqtt\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zwavejs2mqtt\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zwavejs2mqtt\n\n# Arch Linux\nsudo pacman -Syu zwavejs2mqtt\n\n# Alpine Linux\napk update && apk upgrade zwavejs2mqtt\n\n# openSUSE\nsudo zypper update zwavejs2mqtt\n\n# FreeBSD\npkg update && pkg upgrade zwavejs2mqtt\n\n# Always backup before updates\ntar -czf /backup/zwavejs2mqtt-pre-update-$(date +%Y%m%d).tar.gz /etc/zwavejs2mqtt\n\n# Restart after updates\nsudo systemctl restart zwavejs2mqtt\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zwavejs2mqtt\n\n# Clean old logs\nfind /var/log/zwavejs2mqtt -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zwavejs2mqtt\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zwavejs2mqtt.org/\n- GitHub Repository: https://github.com/zwavejs2mqtt/zwavejs2mqtt\n- Community Forum: https://forum.zwavejs2mqtt.org/\n- Best Practices Guide: https://docs.zwavejs2mqtt.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">zwavejs2mqtt is a free and open-source Z-Wave to MQTT. ZwaveJS2MQTT bridges Z-Wave devices to MQTT</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 500MB for data</li>\n<li class=\"mobile-list-item\">Network: Z-Wave/MQTT</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8091 (default zwavejs2mqtt port)</li>\n<li class=\"mobile-list-item\">WS on 3000</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zwavejs2mqtt\nsudo dnf install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zwavejs2mqtt\nsudo apt install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo ufw allow 8091\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zwavejs2mqtt\nsudo pacman -S zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zwavejs2mqtt\napk add --no-cache zwavejs2mqtt\n\n# Enable and start service\nrc-update add zwavejs2mqtt default\nrc-service zwavejs2mqtt start\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zwavejs2mqtt\nsudo zypper install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zwavejs2mqtt\n\n# Start service\nbrew services start zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zwavejs2mqtt\n\n# Enable in rc.conf\necho &#039;zwavejs2mqtt_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zwavejs2mqtt start\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zwavejs2mqtt\n\n# Or using Scoop\nscoop install zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zwavejs2mqtt\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zwavejs2mqtt\n\n# Start service\nsudo systemctl start zwavejs2mqtt\n\n# Stop service\nsudo systemctl stop zwavejs2mqtt\n\n# Restart service\nsudo systemctl restart zwavejs2mqtt\n\n# Check status\nsudo systemctl status zwavejs2mqtt\n\n# View logs\nsudo journalctl -u zwavejs2mqtt -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zwavejs2mqtt default\n\n# Start service\nrc-service zwavejs2mqtt start\n\n# Stop service\nrc-service zwavejs2mqtt stop\n\n# Restart service\nrc-service zwavejs2mqtt restart\n\n# Check status\nrc-service zwavejs2mqtt status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zwavejs2mqtt_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zwavejs2mqtt start\n\n# Stop service\nservice zwavejs2mqtt stop\n\n# Restart service\nservice zwavejs2mqtt restart\n\n# Check status\nservice zwavejs2mqtt status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zwavejs2mqtt\nbrew services stop zwavejs2mqtt\nbrew services restart zwavejs2mqtt\n\n# Check status\nbrew services list | grep zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zwavejs2mqtt\n\n# Stop service\nnet stop zwavejs2mqtt\n\n# Using PowerShell\nStart-Service zwavejs2mqtt\nStop-Service zwavejs2mqtt\nRestart-Service zwavejs2mqtt\n\n# Check status\nGet-Service zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zwavejs2mqtt_backend {\n    server 127.0.0.1:8091;\n}\n\nserver {\n    listen 80;\n    server_name zwavejs2mqtt.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zwavejs2mqtt.example.com;\n\n    ssl_certificate /etc/ssl/certs/zwavejs2mqtt.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zwavejs2mqtt.example.com.key;\n\n    location / {\n        proxy_pass http://zwavejs2mqtt_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zwavejs2mqtt.example.com\n    Redirect permanent / https://zwavejs2mqtt.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zwavejs2mqtt.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zwavejs2mqtt.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zwavejs2mqtt.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8091/\n    ProxyPassReverse / http://127.0.0.1:8091/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zwavejs2mqtt_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zwavejs2mqtt.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zwavejs2mqtt_backend\n\nbackend zwavejs2mqtt_backend\n    balance roundrobin\n    server zwavejs2mqtt1 127.0.0.1:8091 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zwavejs2mqtt:zwavejs2mqtt /etc/zwavejs2mqtt\nsudo chmod 750 /etc/zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zwavejs2mqtt\n\n# View logs\nsudo journalctl -u zwavejs2mqtt -f\n\n# Monitor resource usage\ntop -p $(pgrep zwavejs2mqtt)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zwavejs2mqtt&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zwavejs2mqtt-backup-$DATE.tar.gz&quot; /etc/zwavejs2mqtt /var/lib/zwavejs2mqtt\n\necho &quot;Backup completed: $BACKUP_DIR/zwavejs2mqtt-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zwavejs2mqtt\n\n# Restore from backup\ntar -xzf /backup/zwavejs2mqtt/zwavejs2mqtt-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zwavejs2mqtt -n 100\nsudo tail -f /var/log/zwavejs2mqtt/zwavejs2mqtt.log\n\n# Check configuration\nzwavejs2mqtt --version\n\n# Check permissions\nls -la /etc/zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8091\n\n# Test connectivity\ntelnet localhost 8091\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zwavejs2mqtt)\n\n# Check disk I/O\niotop -p $(pgrep zwavejs2mqtt)\n\n# Check connections\nss -an | grep 8091</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zwavejs2mqtt:\n    image: zwavejs2mqtt:latest\n    ports:\n      - &quot;8091:8091&quot;\n    volumes:\n      - ./config:/etc/zwavejs2mqtt\n      - ./data:/var/lib/zwavejs2mqtt\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zwavejs2mqtt\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zwavejs2mqtt\n\n# Arch Linux\nsudo pacman -Syu zwavejs2mqtt\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zwavejs2mqtt\n\n# openSUSE\nsudo zypper update zwavejs2mqtt\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zwavejs2mqtt\n\n# Always backup before updates\ntar -czf /backup/zwavejs2mqtt-pre-update-$(date +%Y%m%d).tar.gz /etc/zwavejs2mqtt\n\n# Restart after updates\nsudo systemctl restart zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zwavejs2mqtt\n\n# Clean old logs\nfind /var/log/zwavejs2mqtt -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zwavejs2mqtt.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zwavejs2mqtt/zwavejs2mqtt</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zwavejs2mqtt.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zwavejs2mqtt.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1268,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:06.316Z",
            "metadataVersion": "2.0"
          }
        ],
        "icon": "🔧",
        "color": "#6272a4",
        "metadata": {
          "totalGuides": 8,
          "languages": [],
          "difficultyLevels": [
            "intermediate"
          ],
          "features": [
            "backup-restore-procedures",
            "comprehensive-documentation",
            "multi-os-support",
            "performance-optimization",
            "security-hardening",
            "troubleshooting-guides"
          ],
          "avgStars": 0,
          "totalStars": 0,
          "supportedOS": [
            "almalinux",
            "alpine",
            "arch",
            "centos",
            "debian",
            "freebsd",
            "macos",
            "opensuse",
            "rhel",
            "rocky",
            "sles",
            "ubuntu",
            "windows"
          ],
          "maintenanceStatuses": [
            "active"
          ]
        }
      },
      "container-management": {
        "name": "Container management",
        "description": "Container management tools and applications",
        "guides": [
          {
            "name": "yacht",
            "displayName": "Yacht",
            "slug": "yacht",
            "description": "Yacht is a web-based UI for managing Docker containers",
            "category": "container-management",
            "subcategory": "container-management",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              8000
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "docker",
              "containers",
              "web-interface",
              "management"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/container-management/yacht",
            "documentationUrl": "https://howtomgr.github.io/container-management/yacht",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/yacht",
            "updatedAt": "2025-09-16T18:04:21Z",
            "createdAt": "2025-09-08T03:18:45Z",
            "readmeRaw": "# Yacht Installation Guide\n\nYacht is a free and open-source Container Management. A web-based UI for managing Docker containers\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 10GB minimum\n  - Network: 8000 ports required\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10 Pro\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8000 (default yacht port)\n  - Firewall rules configured\n- **Dependencies**:\n  - docker, docker-compose\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install yacht\nsudo dnf install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install yacht\nsudo apt install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo ufw allow 8000\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### Arch Linux\n\n```bash\n# Install yacht\nsudo pacman -S yacht\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### Alpine Linux\n\n```bash\n# Install yacht\napk add --no-cache yacht\n\n# Enable and start service\nrc-update add yacht default\nrc-service yacht start\n\n# Verify installation\nyacht --version || rc-service yacht status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install yacht\nsudo zypper install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install yacht\n\n# Start service\nbrew services start yacht\n\n# Verify installation\nyacht --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install yacht\n\n# Enable in rc.conf\necho 'yacht_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Verify installation\nyacht --version || service yacht status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install yacht\n\n# Or using Scoop\nscoop install yacht\n\n# Verify installation\nyacht --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /config\n\n# Set up basic configuration\nsudo tee /config/yacht.conf << 'EOF'\n# Yacht Configuration\nWORKERS=4\nEOF\n\n# Set appropriate permissions\nsudo chown -R yacht:yacht /config || \\\n  sudo chown -R $(whoami):$(whoami) /config\n\n# Test configuration\nsudo yacht --test || sudo yacht configtest\n```\n\n### Security Hardening\n\n```bash\n# Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false yacht || true\n\n# Secure configuration files\nsudo chmod 750 /config\nsudo chmod 640 /config/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable yacht\n\n# Start service\nsudo systemctl start yacht\n\n# Stop service\nsudo systemctl stop yacht\n\n# Restart service\nsudo systemctl restart yacht\n\n# Reload configuration\nsudo systemctl reload yacht\n\n# Check status\nsudo systemctl status yacht\n\n# View logs\nsudo journalctl -u yacht -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add yacht default\n\n# Start service\nrc-service yacht start\n\n# Stop service\nrc-service yacht stop\n\n# Restart service\nrc-service yacht restart\n\n# Check status\nrc-service yacht status\n\n# View logs\ntail -f /config/logs/yacht.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'yacht_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Stop service\nservice yacht stop\n\n# Restart service\nservice yacht restart\n\n# Check status\nservice yacht status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start yacht\nbrew services stop yacht\nbrew services restart yacht\n\n# Check status\nbrew services list | grep yacht\n\n# View logs\ntail -f $(brew --prefix)/var/log/yacht.log\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start yacht\n\n# Stop service\nnet stop yacht\n\n# Using PowerShell\nStart-Service yacht\nStop-Service yacht\nRestart-Service yacht\n\n# Check status\nGet-Service yacht\n\n# Set to automatic startup\nSet-Service yacht -StartupType Automatic\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /config/yacht.conf << 'EOF'\n# Performance tuning\nWORKERS=4\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart yacht\n```\n\n### High Availability Setup\n\n```bash\n# Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream yacht_backend {\n    server 127.0.0.1:8000;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name yacht.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name yacht.example.com;\n\n    ssl_certificate /etc/ssl/certs/yacht.crt;\n    ssl_certificate_key /etc/ssl/private/yacht.key;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    location / {\n        proxy_pass http://yacht_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName yacht.example.com\n    Redirect permanent / https://yacht.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName yacht.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/yacht.crt\n    SSLCertificateKeyFile /etc/ssl/private/yacht.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    <Location />\n        ProxyPass http://127.0.0.1:8000/\n        ProxyPassReverse http://127.0.0.1:8000/\n    </Location>\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:8000/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nglobal\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend yacht_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/yacht.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    \n    default_backend yacht_backend\n\nbackend yacht_backend\n    balance roundrobin\n    option httpchk GET /health\n    server yacht1 127.0.0.1:8000 check\n```\n\n### Caddy Configuration\n\n```caddy\nyacht.example.com {\n    reverse_proxy 127.0.0.1:8000 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection \"1; mode=block\"\n    }\n    \n    encode gzip\n}\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Create dedicated user\nsudo useradd --system --shell /bin/false --home /config yacht || true\n\n# Set ownership\nsudo chown -R yacht:yacht /config\nsudo chown -R yacht:yacht /config/logs\n\n# Set permissions\nsudo chmod 750 /config\nsudo chmod 640 /config/*\nsudo chmod 750 /config/logs\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 8000 proto tcp comment \"Yacht\"\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=yacht\nsudo firewall-cmd --permanent --service=yacht --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=yacht\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 8000 || true\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/yacht.key \\\n    -out /etc/ssl/certs/yacht.crt \\\n    -subj \"/C=US/ST=State/L=City/O=Organization/CN=yacht.example.com\"\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/yacht.key\nsudo chmod 644 /etc/ssl/certs/yacht.crt\n\n# For production, use Let's Encrypt\nsudo certbot certonly --standalone -d yacht.example.com\n```\n\n### Fail2ban Configuration\n\n```ini\n# /etc/fail2ban/jail.d/yacht.conf\n[yacht]\nenabled = true\nport = 8000\nfilter = yacht\nlogpath = /config/logs/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\n```\n\n```ini\n# /etc/fail2ban/filter.d/yacht.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from <HOST>.*$\n            ^.*Authentication failed.*from <HOST>.*$\n            ^.*Invalid credentials.*from <HOST>.*$\nignoreregex =\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE yacht_db;\nCREATE USER yacht_user WITH ENCRYPTED PASSWORD 'secure_password_here';\nGRANT ALL PRIVILEGES ON DATABASE yacht_db TO yacht_user;\n\\q\nEOF\n\n# Configure connection in Yacht\necho \"DATABASE_URL=postgresql://yacht_user:secure_password_here@localhost/yacht_db\" | \\\n  sudo tee -a /config/yacht.env\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE yacht_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'yacht_user'@'localhost' IDENTIFIED BY 'secure_password_here';\nGRANT ALL PRIVILEGES ON yacht_db.* TO 'yacht_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho \"DATABASE_URL=mysql://yacht_user:secure_password_here@localhost/yacht_db\" | \\\n  sudo tee -a /config/yacht.env\n```\n\n### SQLite Backend (if applicable)\n\n```bash\n# Create database directory\nsudo mkdir -p /var/lib/yacht\nsudo chown yacht:yacht /var/lib/yacht\n\n# Initialize database\nsudo -u yacht yacht init-db\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters for better performance\ncat << 'EOF' | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat << 'EOF' | sudo tee -a /etc/security/limits.conf\nyacht soft nofile 65535\nyacht hard nofile 65535\nyacht soft nproc 32768\nyacht hard nproc 32768\nEOF\n```\n\n### Application Tuning\n\n```bash\n# Configure application-specific performance settings\ncat << 'EOF' | sudo tee -a /config/performance.conf\n# Performance configuration\nWORKERS=4\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart yacht\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: 'yacht'\n    static_configs:\n      - targets: ['localhost:8000/metrics']\n    metrics_path: '/metrics'\n    scrape_interval: 30s\n```\n\n### Health Check Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/yacht-health\n\n# Check if service is running\nif ! systemctl is-active --quiet yacht; then\n    echo \"CRITICAL: Yacht service is not running\"\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 8000 2>/dev/null; then\n    echo \"CRITICAL: Yacht is not listening on port 8000\"\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:8000/health || echo \"999\")\nif (( $(echo \"$response_time > 5\" | bc -l) )); then\n    echo \"WARNING: Slow response time: ${response_time}s\"\n    exit 1\nfi\n\necho \"OK: Yacht is healthy (response time: ${response_time}s)\"\nexit 0\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\ncat << 'EOF' | sudo tee /etc/logrotate.d/yacht\n/config/logs/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 yacht yacht\n    postrotate\n        systemctl reload yacht > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/yacht\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/yacht-backup\n\nBACKUP_DIR=\"/backup/yacht\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/yacht_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if needed for consistency)\necho \"Stopping Yacht service...\"\nsystemctl stop yacht\n\n# Backup configuration\necho \"Backing up configuration...\"\ntar -czf \"$BACKUP_FILE\" \\\n    /config \\\n    /var/lib/yacht \\\n    /config/logs\n\n# Backup database (if applicable)\nif command -v pg_dump &> /dev/null; then\n    echo \"Backing up database...\"\n    sudo -u postgres pg_dump yacht_db | gzip > \"$BACKUP_DIR/yacht_db_$DATE.sql.gz\"\nfi\n\n# Start service\necho \"Starting Yacht service...\"\nsystemctl start yacht\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\nfind \"$BACKUP_DIR\" -name \"*.sql.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_FILE\"\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/yacht-restore\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 <backup_file>\"\n    exit 1\nfi\n\nBACKUP_FILE=\"$1\"\n\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"Error: Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\n# Stop service\necho \"Stopping Yacht service...\"\nsystemctl stop yacht\n\n# Restore files\necho \"Restoring from backup...\"\ntar -xzf \"$BACKUP_FILE\" -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo \"$BACKUP_FILE\" | sed 's/.tar.gz$/_db.sql.gz/')\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"Restoring database...\"\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql yacht_db\nfi\n\n# Fix permissions\nchown -R yacht:yacht /config\nchown -R yacht:yacht /var/lib/yacht\n\n# Start service\necho \"Starting Yacht service...\"\nsystemctl start yacht\n\necho \"Restore completed successfully\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check service status and logs\nsudo systemctl status yacht\nsudo journalctl -u yacht -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 8000\nsudo lsof -i :8000\n\n# Verify configuration\nsudo yacht --test || sudo yacht configtest\n\n# Check permissions\nls -la /config\nls -la /config/logs\n```\n\n2. **Cannot access web interface**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep yacht\ncurl -I http://localhost:8000\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 8000\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep yacht\n```\n\n3. **High memory/CPU usage**:\n```bash\n# Monitor resource usage\ntop -p $(pgrep python)\nhtop -p $(pgrep python)\n\n# Check for memory leaks\nps aux | grep python\ncat /proc/$(pgrep python)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /config/logs/*.log | tail -50\n```\n\n4. **Database connection errors**:\n```bash\n# Test database connection\npsql -U yacht_user -d yacht_db -c \"SELECT 1;\"\nmysql -u yacht_user -p yacht_db -e \"SELECT 1;\"\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho \"debug = true\" | sudo tee -a /config/yacht.conf\n\n# Restart with debug mode\nsudo systemctl stop yacht\nsudo -u yacht yacht --debug\n\n# Watch debug logs\ntail -f /config/logs/debug.log\n```\n\n### Performance Analysis\n\n```bash\n# Profile CPU usage\nsudo perf record -p $(pgrep python) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/yacht.pcap port 8000\nsudo tcpdump -r /tmp/yacht.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep python)\n```\n\n## Integration Examples\n\n### Docker Deployment\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  yacht:\n    image: yacht:yacht\n    container_name: yacht\n    restart: unless-stopped\n    ports:\n      - \"8000:8000\"\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/config\n      - ./data:/var/lib/yacht\n      - ./logs:/config/logs\n    networks:\n      - yacht_network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  yacht_network:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\n# yacht-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: yacht\n  labels:\n    app: yacht\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: yacht\n  template:\n    metadata:\n      labels:\n        app: yacht\n    spec:\n      containers:\n      - name: yacht\n        image: yacht:yacht\n        ports:\n        - containerPort: 8000\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /config\n        - name: data\n          mountPath: /var/lib/yacht\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: yacht-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: yacht-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: yacht\nspec:\n  selector:\n    app: yacht\n  ports:\n  - protocol: TCP\n    port: 8000\n    targetPort: 8000\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: yacht-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n```\n\n### Ansible Playbook\n\n```yaml\n---\n# yacht-playbook.yml\n- name: Install and configure Yacht\n  hosts: all\n  become: yes\n  vars:\n    yacht_version: latest\n    yacht_port: 8000\n    yacht_config_dir: /config\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - docker, docker-compose\n        state: present\n    \n    - name: Install Yacht\n      package:\n        name: yacht\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: \"{{ yacht_config_dir }}\"\n        state: directory\n        owner: yacht\n        group: yacht\n        mode: '0750'\n    \n    - name: Deploy configuration\n      template:\n        src: yacht.conf.j2\n        dest: \"{{ yacht_config_dir }}/yacht.conf\"\n        owner: yacht\n        group: yacht\n        mode: '0640'\n      notify: restart yacht\n    \n    - name: Start and enable service\n      systemd:\n        name: yacht\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: \"{{ yacht_port }}/tcp\"\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart yacht\n      systemd:\n        name: yacht\n        state: restarted\n```\n\n### Terraform Configuration\n\n```hcl\n# yacht.tf\nresource \"aws_instance\" \"yacht_server\" {\n  ami           = var.ami_id\n  instance_type = \"t3.medium\"\n  \n  vpc_security_group_ids = [aws_security_group.yacht.id]\n  \n  user_data = <<-EOF\n    #!/bin/bash\n    # Install Yacht\n    apt-get update\n    apt-get install -y yacht docker, docker-compose\n    \n    # Configure Yacht\n    systemctl enable yacht\n    systemctl start yacht\n  EOF\n  \n  tags = {\n    Name = \"Yacht Server\"\n    Application = \"Yacht\"\n  }\n}\n\nresource \"aws_security_group\" \"yacht\" {\n  name        = \"yacht-sg\"\n  description = \"Security group for Yacht\"\n  \n  ingress {\n    from_port   = 8000\n    to_port     = 8000\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  tags = {\n    Name = \"Yacht Security Group\"\n  }\n}\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update yacht\nsudo dnf update yacht\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade yacht\n\n# Arch Linux\nsudo pacman -Syu yacht\n\n# Alpine Linux\napk update\napk upgrade yacht\n\n# openSUSE\nsudo zypper ref\nsudo zypper update yacht\n\n# FreeBSD\npkg update\npkg upgrade yacht\n\n# Always backup before updates\n/usr/local/bin/yacht-backup\n\n# Restart after updates\nsudo systemctl restart yacht\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean old logs\nfind /config/logs -name \"*.log\" -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze yacht_db\n\n# Check disk usage\ndf -h | grep -E \"(/$|yacht)\"\ndu -sh /var/lib/yacht\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u yacht | grep -i \"error\\|fail\\|deny\"\n```\n\n### Health Monitoring Checklist\n\n- [ ] Service is running and enabled\n- [ ] Web interface is accessible\n- [ ] Database connections are healthy\n- [ ] Disk usage is below 80%\n- [ ] No critical errors in logs\n- [ ] Backups are running successfully\n- [ ] SSL certificates are valid\n- [ ] Security updates are applied\n\n## Additional Resources\n\n- Official Documentation: https://docs.yacht.org/\n- GitHub Repository: https://github.com/yacht/yacht\n- Community Forum: https://forum.yacht.org/\n- Wiki: https://wiki.yacht.org/\n- Docker Hub: https://hub.docker.com/r/yacht/yacht\n- Security Advisories: https://security.yacht.org/\n- Best Practices: https://docs.yacht.org/best-practices\n- API Documentation: https://api.yacht.org/\n- Comparison with Portainer, Rancher, Docker Swarm UI, Shipyard: https://docs.yacht.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">Yacht is a free and open-source Container Management. A web-based UI for managing Docker containers</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum</li>\n<li class=\"mobile-list-item\">Network: 8000 ports required</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10 Pro</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8000 (default yacht port)</li>\n<li class=\"mobile-list-item\">Firewall rules configured</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">docker, docker-compose</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install yacht\nsudo dnf install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install yacht\nsudo apt install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo ufw allow 8000\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install yacht\nsudo pacman -S yacht\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install yacht\napk add --no-cache yacht\n\n# Enable and start service\nrc-update add yacht default\nrc-service yacht start\n\n# Verify installation\nyacht --version || rc-service yacht status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install yacht\nsudo zypper install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install yacht\n\n# Start service\nbrew services start yacht\n\n# Verify installation\nyacht --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install yacht\n\n# Enable in rc.conf\necho &#039;yacht_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Verify installation\nyacht --version || service yacht status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install yacht\n\n# Or using Scoop\nscoop install yacht\n\n# Verify installation\nyacht --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /config\n\n# Set up basic configuration\nsudo tee /config/yacht.conf &lt;&lt; &#039;EOF&#039;\n# Yacht Configuration\nWORKERS=4\nEOF\n\n# Set appropriate permissions\nsudo chown -R yacht:yacht /config || \\\n  sudo chown -R $(whoami):$(whoami) /config\n\n# Test configuration\nsudo yacht --test || sudo yacht configtest</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false yacht || true\n\n# Secure configuration files\nsudo chmod 750 /config\nsudo chmod 640 /config/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable yacht\n\n# Start service\nsudo systemctl start yacht\n\n# Stop service\nsudo systemctl stop yacht\n\n# Restart service\nsudo systemctl restart yacht\n\n# Reload configuration\nsudo systemctl reload yacht\n\n# Check status\nsudo systemctl status yacht\n\n# View logs\nsudo journalctl -u yacht -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add yacht default\n\n# Start service\nrc-service yacht start\n\n# Stop service\nrc-service yacht stop\n\n# Restart service\nrc-service yacht restart\n\n# Check status\nrc-service yacht status\n\n# View logs\ntail -f /config/logs/yacht.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;yacht_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Stop service\nservice yacht stop\n\n# Restart service\nservice yacht restart\n\n# Check status\nservice yacht status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start yacht\nbrew services stop yacht\nbrew services restart yacht\n\n# Check status\nbrew services list | grep yacht\n\n# View logs\ntail -f $(brew --prefix)/var/log/yacht.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start yacht\n\n# Stop service\nnet stop yacht\n\n# Using PowerShell\nStart-Service yacht\nStop-Service yacht\nRestart-Service yacht\n\n# Check status\nGet-Service yacht\n\n# Set to automatic startup\nSet-Service yacht -StartupType Automatic</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /config/yacht.conf &lt;&lt; &#039;EOF&#039;\n# Performance tuning\nWORKERS=4\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho &quot;vm.swappiness=10&quot; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream yacht_backend {\n    server 127.0.0.1:8000;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name yacht.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name yacht.example.com;\n\n    ssl_certificate /etc/ssl/certs/yacht.crt;\n    ssl_certificate_key /etc/ssl/private/yacht.key;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n\n    location / {\n        proxy_pass http://yacht_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName yacht.example.com\n    Redirect permanent / https://yacht.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName yacht.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/yacht.crt\n    SSLCertificateKeyFile /etc/ssl/private/yacht.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    &lt;Location /&gt;\n        ProxyPass http://127.0.0.1:8000/\n        ProxyPassReverse http://127.0.0.1:8000/\n    &lt;/Location&gt;\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:8000/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">global\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend yacht_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/yacht.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    \n    default_backend yacht_backend\n\nbackend yacht_backend\n    balance roundrobin\n    option httpchk GET /health\n    server yacht1 127.0.0.1:8000 check</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddy\">yacht.example.com {\n    reverse_proxy 127.0.0.1:8000 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection &quot;1; mode=block&quot;\n    }\n    \n    encode gzip\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user\nsudo useradd --system --shell /bin/false --home /config yacht || true\n\n# Set ownership\nsudo chown -R yacht:yacht /config\nsudo chown -R yacht:yacht /config/logs\n\n# Set permissions\nsudo chmod 750 /config\nsudo chmod 640 /config/*\nsudo chmod 750 /config/logs\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 8000 proto tcp comment &quot;Yacht&quot;\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=yacht\nsudo firewall-cmd --permanent --service=yacht --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=yacht\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 8000 || true</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/yacht.key \\\n    -out /etc/ssl/certs/yacht.crt \\\n    -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=yacht.example.com&quot;\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/yacht.key\nsudo chmod 644 /etc/ssl/certs/yacht.crt\n\n# For production, use Let&#039;s Encrypt\nsudo certbot certonly --standalone -d yacht.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"fail2ban-configuration\" class=\"mobile-header\">Fail2ban Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/jail.d/yacht.conf\n[yacht]\nenabled = true\nport = 8000\nfilter = yacht\nlogpath = /config/logs/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/filter.d/yacht.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from &lt;HOST&gt;.*$\n            ^.*Authentication failed.*from &lt;HOST&gt;.*$\n            ^.*Invalid credentials.*from &lt;HOST&gt;.*$\nignoreregex =</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE yacht_db;\nCREATE USER yacht_user WITH ENCRYPTED PASSWORD &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON DATABASE yacht_db TO yacht_user;\n\\q\nEOF\n\n# Configure connection in Yacht\necho &quot;DATABASE_URL=postgresql://yacht_user:secure_password_here@localhost/yacht_db&quot; | \\\n  sudo tee -a /config/yacht.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE yacht_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;yacht_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON yacht_db.* TO &#039;yacht_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho &quot;DATABASE_URL=mysql://yacht_user:secure_password_here@localhost/yacht_db&quot; | \\\n  sudo tee -a /config/yacht.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"sqlite-backend-if-applicable\" class=\"mobile-header\">SQLite Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database directory\nsudo mkdir -p /var/lib/yacht\nsudo chown yacht:yacht /var/lib/yacht\n\n# Initialize database\nsudo -u yacht yacht init-db</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters for better performance\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/security/limits.conf\nyacht soft nofile 65535\nyacht hard nofile 65535\nyacht soft nproc 32768\nyacht hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-tuning\" class=\"mobile-header\">Application Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure application-specific performance settings\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /config/performance.conf\n# Performance configuration\nWORKERS=4\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart yacht</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: &#039;yacht&#039;\n    static_configs:\n      - targets: [&#039;localhost:8000/metrics&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 30s</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-script\" class=\"mobile-header\">Health Check Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/yacht-health\n\n# Check if service is running\nif ! systemctl is-active --quiet yacht; then\n    echo &quot;CRITICAL: Yacht service is not running&quot;\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 8000 2&gt;/dev/null; then\n    echo &quot;CRITICAL: Yacht is not listening on port 8000&quot;\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w &#039;%{time_total}&#039; http://localhost:8000/health || echo &quot;999&quot;)\nif (( $(echo &quot;$response_time &gt; 5&quot; | bc -l) )); then\n    echo &quot;WARNING: Slow response time: ${response_time}s&quot;\n    exit 1\nfi\n\necho &quot;OK: Yacht is healthy (response time: ${response_time}s)&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\ncat &lt;&lt; &#039;EOF&#039; | sudo tee /etc/logrotate.d/yacht\n/config/logs/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 yacht yacht\n    postrotate\n        systemctl reload yacht &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/yacht</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/yacht-backup\n\nBACKUP_DIR=&quot;/backup/yacht&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/yacht_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if needed for consistency)\necho &quot;Stopping Yacht service...&quot;\nsystemctl stop yacht\n\n# Backup configuration\necho &quot;Backing up configuration...&quot;\ntar -czf &quot;$BACKUP_FILE&quot; \\\n    /config \\\n    /var/lib/yacht \\\n    /config/logs\n\n# Backup database (if applicable)\nif command -v pg_dump &amp;&gt; /dev/null; then\n    echo &quot;Backing up database...&quot;\n    sudo -u postgres pg_dump yacht_db | gzip &gt; &quot;$BACKUP_DIR/yacht_db_$DATE.sql.gz&quot;\nfi\n\n# Start service\necho &quot;Starting Yacht service...&quot;\nsystemctl start yacht\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.sql.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_FILE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/yacht-restore\n\nif [ $# -ne 1 ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    exit 1\nfi\n\nBACKUP_FILE=&quot;$1&quot;\n\nif [ ! -f &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Error: Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\n# Stop service\necho &quot;Stopping Yacht service...&quot;\nsystemctl stop yacht\n\n# Restore files\necho &quot;Restoring from backup...&quot;\ntar -xzf &quot;$BACKUP_FILE&quot; -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo &quot;$BACKUP_FILE&quot; | sed &#039;s/.tar.gz$/_db.sql.gz/&#039;)\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;Restoring database...&quot;\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql yacht_db\nfi\n\n# Fix permissions\nchown -R yacht:yacht /config\nchown -R yacht:yacht /var/lib/yacht\n\n# Start service\necho &quot;Starting Yacht service...&quot;\nsystemctl start yacht\n\necho &quot;Restore completed successfully&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status and logs\nsudo systemctl status yacht\nsudo journalctl -u yacht -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 8000\nsudo lsof -i :8000\n\n# Verify configuration\nsudo yacht --test || sudo yacht configtest\n\n# Check permissions\nls -la /config\nls -la /config/logs</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Cannot access web interface</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep yacht\ncurl -I http://localhost:8000\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 8000\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep yacht</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>High memory/CPU usage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor resource usage\ntop -p $(pgrep python)\nhtop -p $(pgrep python)\n\n# Check for memory leaks\nps aux | grep python\ncat /proc/$(pgrep python)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /config/logs/*.log | tail -50</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Database connection errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test database connection\npsql -U yacht_user -d yacht_db -c &quot;SELECT 1;&quot;\nmysql -u yacht_user -p yacht_db -e &quot;SELECT 1;&quot;\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &quot;debug = true&quot; | sudo tee -a /config/yacht.conf\n\n# Restart with debug mode\nsudo systemctl stop yacht\nsudo -u yacht yacht --debug\n\n# Watch debug logs\ntail -f /config/logs/debug.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-analysis\" class=\"mobile-header\">Performance Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Profile CPU usage\nsudo perf record -p $(pgrep python) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/yacht.pcap port 8000\nsudo tcpdump -r /tmp/yacht.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep python)</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-deployment\" class=\"mobile-header\">Docker Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml\nversion: &#039;3.8&#039;\n\nservices:\n  yacht:\n    image: yacht:yacht\n    container_name: yacht\n    restart: unless-stopped\n    ports:\n      - &quot;8000:8000&quot;\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/config\n      - ./data:/var/lib/yacht\n      - ./logs:/config/logs\n    networks:\n      - yacht_network\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8000/health&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  yacht_network:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># yacht-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: yacht\n  labels:\n    app: yacht\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: yacht\n  template:\n    metadata:\n      labels:\n        app: yacht\n    spec:\n      containers:\n      - name: yacht\n        image: yacht:yacht\n        ports:\n        - containerPort: 8000\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /config\n        - name: data\n          mountPath: /var/lib/yacht\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: yacht-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: yacht-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: yacht\nspec:\n  selector:\n    app: yacht\n  ports:\n  - protocol: TCP\n    port: 8000\n    targetPort: 8000\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: yacht-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n# yacht-playbook.yml\n- name: Install and configure Yacht\n  hosts: all\n  become: yes\n  vars:\n    yacht_version: latest\n    yacht_port: 8000\n    yacht_config_dir: /config\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - docker, docker-compose\n        state: present\n    \n    - name: Install Yacht\n      package:\n        name: yacht\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: &quot;{{ yacht_config_dir }}&quot;\n        state: directory\n        owner: yacht\n        group: yacht\n        mode: &#039;0750&#039;\n    \n    - name: Deploy configuration\n      template:\n        src: yacht.conf.j2\n        dest: &quot;{{ yacht_config_dir }}/yacht.conf&quot;\n        owner: yacht\n        group: yacht\n        mode: &#039;0640&#039;\n      notify: restart yacht\n    \n    - name: Start and enable service\n      systemd:\n        name: yacht\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: &quot;{{ yacht_port }}/tcp&quot;\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart yacht\n      systemd:\n        name: yacht\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-configuration\" class=\"mobile-header\">Terraform Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"hcl\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">hcl</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-hcl\"># yacht.tf\nresource &quot;aws_instance&quot; &quot;yacht_server&quot; {\n  ami           = var.ami_id\n  instance_type = &quot;t3.medium&quot;\n  \n  vpc_security_group_ids = [aws_security_group.yacht.id]\n  \n  user_data = &lt;&lt;-EOF\n    #!/bin/bash\n    # Install Yacht\n    apt-get update\n    apt-get install -y yacht docker, docker-compose\n    \n    # Configure Yacht\n    systemctl enable yacht\n    systemctl start yacht\n  EOF\n  \n  tags = {\n    Name = &quot;Yacht Server&quot;\n    Application = &quot;Yacht&quot;\n  }\n}\n\nresource &quot;aws_security_group&quot; &quot;yacht&quot; {\n  name        = &quot;yacht-sg&quot;\n  description = &quot;Security group for Yacht&quot;\n  \n  ingress {\n    from_port   = 8000\n    to_port     = 8000\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  tags = {\n    Name = &quot;Yacht Security Group&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update yacht\nsudo dnf update yacht\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade yacht\n\n# Arch Linux\nsudo pacman -Syu yacht\n\n# Alpine Linux\napk update\napk upgrade yacht\n\n# openSUSE\nsudo zypper ref\nsudo zypper update yacht\n\n# FreeBSD\npkg update\npkg upgrade yacht\n\n# Always backup before updates\n/usr/local/bin/yacht-backup\n\n# Restart after updates\nsudo systemctl restart yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean old logs\nfind /config/logs -name &quot;*.log&quot; -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze yacht_db\n\n# Check disk usage\ndf -h | grep -E &quot;(/$|yacht)&quot;\ndu -sh /var/lib/yacht\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u yacht | grep -i &quot;error\\|fail\\|deny&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring-checklist\" class=\"mobile-header\">Health Monitoring Checklist</h3>\n<li class=\"mobile-list-item\">[ ] Service is running and enabled</li>\n<li class=\"mobile-list-item\">[ ] Web interface is accessible</li>\n<li class=\"mobile-list-item\">[ ] Database connections are healthy</li>\n<li class=\"mobile-list-item\">[ ] Disk usage is below 80%</li>\n<li class=\"mobile-list-item\">[ ] No critical errors in logs</li>\n<li class=\"mobile-list-item\">[ ] Backups are running successfully</li>\n<li class=\"mobile-list-item\">[ ] SSL certificates are valid</li>\n<li class=\"mobile-list-item\">[ ] Security updates are applied</li>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.yacht.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/yacht/yacht</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.yacht.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.yacht.org/</li>\n<li class=\"mobile-list-item\">Docker Hub: https://hub.docker.com/r/yacht/yacht</li>\n<li class=\"mobile-list-item\">Security Advisories: https://security.yacht.org/</li>\n<li class=\"mobile-list-item\">Best Practices: https://docs.yacht.org/best-practices</li>\n<li class=\"mobile-list-item\">API Documentation: https://api.yacht.org/</li>\n<li class=\"mobile-list-item\">Comparison with Portainer, Rancher, Docker Swarm UI, Shipyard: https://docs.yacht.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "16 min",
            "wordCount": 3101,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 3,
                "text": "Security Hardening",
                "id": "security-hardening"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 3,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "High Availability Setup",
                "id": "high-availability-setup"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 3,
                "text": "Caddy Configuration",
                "id": "caddy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 3,
                "text": "SSL/TLS Configuration",
                "id": "ssltls-configuration"
              },
              {
                "level": 3,
                "text": "Fail2ban Configuration",
                "id": "fail2ban-configuration"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 3,
                "text": "PostgreSQL Backend (if applicable)",
                "id": "postgresql-backend-if-applicable"
              },
              {
                "level": 3,
                "text": "MySQL/MariaDB Backend (if applicable)",
                "id": "mysqlmariadb-backend-if-applicable"
              },
              {
                "level": 3,
                "text": "SQLite Backend (if applicable)",
                "id": "sqlite-backend-if-applicable"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 3,
                "text": "Application Tuning",
                "id": "application-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Prometheus Integration",
                "id": "prometheus-integration"
              },
              {
                "level": 3,
                "text": "Health Check Script",
                "id": "health-check-script"
              },
              {
                "level": 3,
                "text": "Log Monitoring",
                "id": "log-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Script",
                "id": "restore-script"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 3,
                "text": "Debug Mode",
                "id": "debug-mode"
              },
              {
                "level": 3,
                "text": "Performance Analysis",
                "id": "performance-analysis"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Deployment",
                "id": "docker-deployment"
              },
              {
                "level": 3,
                "text": "Kubernetes Deployment",
                "id": "kubernetes-deployment"
              },
              {
                "level": 3,
                "text": "Ansible Playbook",
                "id": "ansible-playbook"
              },
              {
                "level": 3,
                "text": "Terraform Configuration",
                "id": "terraform-configuration"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance Tasks",
                "id": "regular-maintenance-tasks"
              },
              {
                "level": 3,
                "text": "Health Monitoring Checklist",
                "id": "health-monitoring-checklist"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:09.042Z",
            "metadataVersion": "2.0"
          }
        ],
        "icon": "📦",
        "color": "#bd93f9",
        "metadata": {
          "totalGuides": 1,
          "languages": [],
          "difficultyLevels": [
            "intermediate"
          ],
          "features": [
            "backup-restore-procedures",
            "comprehensive-documentation",
            "multi-os-support",
            "performance-optimization",
            "security-hardening",
            "troubleshooting-guides"
          ],
          "avgStars": 0,
          "totalStars": 0,
          "supportedOS": [
            "almalinux",
            "alpine",
            "arch",
            "centos",
            "debian",
            "freebsd",
            "macos",
            "opensuse",
            "rhel",
            "rocky",
            "sles",
            "ubuntu",
            "windows"
          ],
          "maintenanceStatuses": [
            "active"
          ]
        }
      },
      "monitoring": {
        "name": "Monitoring",
        "description": "Monitoring tools and applications",
        "guides": [
          {
            "name": "zabbix",
            "displayName": "Zabbix",
            "slug": "zabbix",
            "description": "Zabbix is an enterprise-class monitoring solution for networks and applications",
            "category": "monitoring",
            "subcategory": "monitoring",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443,
              10051
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "monitoring",
              "alerting",
              "metrics",
              "enterprise"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/monitoring/zabbix",
            "documentationUrl": "https://howtomgr.github.io/monitoring/zabbix",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/zabbix",
            "updatedAt": "2025-09-16T18:04:35Z",
            "createdAt": "2025-09-08T03:18:59Z",
            "readmeRaw": "# Zabbix Installation Guide\n\nZabbix is a free and open-source Monitoring Platform. An enterprise-class monitoring solution for networks and applications\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 10GB minimum\n  - Network: 80 ports required\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10 Pro\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default zabbix port)\n  - Firewall rules configured\n- **Dependencies**:\n  - mysql, php, apache, zabbix-agent\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zabbix\nsudo dnf install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zabbix || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zabbix\nsudo apt install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server\n```\n\n### Arch Linux\n\n```bash\n# Install zabbix\nsudo pacman -S zabbix\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server\n```\n\n### Alpine Linux\n\n```bash\n# Install zabbix\napk add --no-cache zabbix\n\n# Enable and start service\nrc-update add zabbix-server default\nrc-service zabbix-server start\n\n# Verify installation\nzabbix --version || rc-service zabbix-server status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zabbix\nsudo zypper install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zabbix || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zabbix\n\n# Start service\nbrew services start zabbix\n\n# Verify installation\nzabbix --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zabbix\n\n# Enable in rc.conf\necho 'zabbix-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Verify installation\nzabbix --version || service zabbix-server status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install zabbix\n\n# Or using Scoop\nscoop install zabbix\n\n# Verify installation\nzabbix --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/zabbix\n\n# Set up basic configuration\nsudo tee /etc/zabbix/zabbix.conf << 'EOF'\n# Zabbix Configuration\nCacheSize=32M, StartPollers=5\nEOF\n\n# Set appropriate permissions\nsudo chown -R zabbix:zabbix /etc/zabbix || \\\n  sudo chown -R $(whoami):$(whoami) /etc/zabbix\n\n# Test configuration\nsudo zabbix --test || sudo zabbix-server configtest\n```\n\n### Security Hardening\n\n```bash\n# Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false zabbix || true\n\n# Secure configuration files\nsudo chmod 750 /etc/zabbix\nsudo chmod 640 /etc/zabbix/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zabbix-server\n\n# Start service\nsudo systemctl start zabbix-server\n\n# Stop service\nsudo systemctl stop zabbix-server\n\n# Restart service\nsudo systemctl restart zabbix-server\n\n# Reload configuration\nsudo systemctl reload zabbix-server\n\n# Check status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zabbix-server default\n\n# Start service\nrc-service zabbix-server start\n\n# Stop service\nrc-service zabbix-server stop\n\n# Restart service\nrc-service zabbix-server restart\n\n# Check status\nrc-service zabbix-server status\n\n# View logs\ntail -f /var/log/zabbix/zabbix-server.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zabbix-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Stop service\nservice zabbix-server stop\n\n# Restart service\nservice zabbix-server restart\n\n# Check status\nservice zabbix-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zabbix\nbrew services stop zabbix\nbrew services restart zabbix\n\n# Check status\nbrew services list | grep zabbix\n\n# View logs\ntail -f $(brew --prefix)/var/log/zabbix.log\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zabbix-server\n\n# Stop service\nnet stop zabbix-server\n\n# Using PowerShell\nStart-Service zabbix-server\nStop-Service zabbix-server\nRestart-Service zabbix-server\n\n# Check status\nGet-Service zabbix-server\n\n# Set to automatic startup\nSet-Service zabbix-server -StartupType Automatic\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/zabbix/zabbix.conf << 'EOF'\n# Performance tuning\nCacheSize=32M, StartPollers=5\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart zabbix-server\n```\n\n### High Availability Setup\n\n```bash\n# Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zabbix_backend {\n    server 127.0.0.1:80;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name zabbix.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zabbix.example.com;\n\n    ssl_certificate /etc/ssl/certs/zabbix.crt;\n    ssl_certificate_key /etc/ssl/private/zabbix.key;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    location / {\n        proxy_pass http://zabbix_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zabbix.example.com\n    Redirect permanent / https://zabbix.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zabbix.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zabbix.crt\n    SSLCertificateKeyFile /etc/ssl/private/zabbix.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    <Location />\n        ProxyPass http://127.0.0.1:80/\n        ProxyPassReverse http://127.0.0.1:80/\n    </Location>\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:80/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nglobal\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend zabbix_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zabbix.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    \n    default_backend zabbix_backend\n\nbackend zabbix_backend\n    balance roundrobin\n    option httpchk GET /health\n    server zabbix1 127.0.0.1:80 check\n```\n\n### Caddy Configuration\n\n```caddy\nzabbix.example.com {\n    reverse_proxy 127.0.0.1:80 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection \"1; mode=block\"\n    }\n    \n    encode gzip\n}\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Create dedicated user\nsudo useradd --system --shell /bin/false --home /etc/zabbix zabbix || true\n\n# Set ownership\nsudo chown -R zabbix:zabbix /etc/zabbix\nsudo chown -R zabbix:zabbix /var/log/zabbix\n\n# Set permissions\nsudo chmod 750 /etc/zabbix\nsudo chmod 640 /etc/zabbix/*\nsudo chmod 750 /var/log/zabbix\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 80 proto tcp comment \"Zabbix\"\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=zabbix\nsudo firewall-cmd --permanent --service=zabbix --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=zabbix\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 80 || true\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/zabbix.key \\\n    -out /etc/ssl/certs/zabbix.crt \\\n    -subj \"/C=US/ST=State/L=City/O=Organization/CN=zabbix.example.com\"\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/zabbix.key\nsudo chmod 644 /etc/ssl/certs/zabbix.crt\n\n# For production, use Let's Encrypt\nsudo certbot certonly --standalone -d zabbix.example.com\n```\n\n### Fail2ban Configuration\n\n```ini\n# /etc/fail2ban/jail.d/zabbix.conf\n[zabbix]\nenabled = true\nport = 80\nfilter = zabbix\nlogpath = /var/log/zabbix/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\n```\n\n```ini\n# /etc/fail2ban/filter.d/zabbix.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from <HOST>.*$\n            ^.*Authentication failed.*from <HOST>.*$\n            ^.*Invalid credentials.*from <HOST>.*$\nignoreregex =\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE zabbix_db;\nCREATE USER zabbix_user WITH ENCRYPTED PASSWORD 'secure_password_here';\nGRANT ALL PRIVILEGES ON DATABASE zabbix_db TO zabbix_user;\n\\q\nEOF\n\n# Configure connection in Zabbix\necho \"DATABASE_URL=postgresql://zabbix_user:secure_password_here@localhost/zabbix_db\" | \\\n  sudo tee -a /etc/zabbix/zabbix.env\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE zabbix_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'zabbix_user'@'localhost' IDENTIFIED BY 'secure_password_here';\nGRANT ALL PRIVILEGES ON zabbix_db.* TO 'zabbix_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho \"DATABASE_URL=mysql://zabbix_user:secure_password_here@localhost/zabbix_db\" | \\\n  sudo tee -a /etc/zabbix/zabbix.env\n```\n\n### SQLite Backend (if applicable)\n\n```bash\n# Create database directory\nsudo mkdir -p /var/lib/zabbix\nsudo chown zabbix:zabbix /var/lib/zabbix\n\n# Initialize database\nsudo -u zabbix zabbix init-db\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters for better performance\ncat << 'EOF' | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat << 'EOF' | sudo tee -a /etc/security/limits.conf\nzabbix soft nofile 65535\nzabbix hard nofile 65535\nzabbix soft nproc 32768\nzabbix hard nproc 32768\nEOF\n```\n\n### Application Tuning\n\n```bash\n# Configure application-specific performance settings\ncat << 'EOF' | sudo tee -a /etc/zabbix/performance.conf\n# Performance configuration\nCacheSize=32M, StartPollers=5\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart zabbix-server\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: 'zabbix'\n    static_configs:\n      - targets: ['localhost:80/metrics']\n    metrics_path: '/metrics'\n    scrape_interval: 30s\n```\n\n### Health Check Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/zabbix-health\n\n# Check if service is running\nif ! systemctl is-active --quiet zabbix-server; then\n    echo \"CRITICAL: Zabbix service is not running\"\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 80 2>/dev/null; then\n    echo \"CRITICAL: Zabbix is not listening on port 80\"\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:80/health || echo \"999\")\nif (( $(echo \"$response_time > 5\" | bc -l) )); then\n    echo \"WARNING: Slow response time: ${response_time}s\"\n    exit 1\nfi\n\necho \"OK: Zabbix is healthy (response time: ${response_time}s)\"\nexit 0\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\ncat << 'EOF' | sudo tee /etc/logrotate.d/zabbix\n/var/log/zabbix/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 zabbix zabbix\n    postrotate\n        systemctl reload zabbix-server > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/zabbix\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/zabbix-backup\n\nBACKUP_DIR=\"/backup/zabbix\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/zabbix_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if needed for consistency)\necho \"Stopping Zabbix service...\"\nsystemctl stop zabbix-server\n\n# Backup configuration\necho \"Backing up configuration...\"\ntar -czf \"$BACKUP_FILE\" \\\n    /etc/zabbix \\\n    /var/lib/zabbix \\\n    /var/log/zabbix\n\n# Backup database (if applicable)\nif command -v pg_dump &> /dev/null; then\n    echo \"Backing up database...\"\n    sudo -u postgres pg_dump zabbix_db | gzip > \"$BACKUP_DIR/zabbix_db_$DATE.sql.gz\"\nfi\n\n# Start service\necho \"Starting Zabbix service...\"\nsystemctl start zabbix-server\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\nfind \"$BACKUP_DIR\" -name \"*.sql.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_FILE\"\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/zabbix-restore\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 <backup_file>\"\n    exit 1\nfi\n\nBACKUP_FILE=\"$1\"\n\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"Error: Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\n# Stop service\necho \"Stopping Zabbix service...\"\nsystemctl stop zabbix-server\n\n# Restore files\necho \"Restoring from backup...\"\ntar -xzf \"$BACKUP_FILE\" -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo \"$BACKUP_FILE\" | sed 's/.tar.gz$/_db.sql.gz/')\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"Restoring database...\"\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql zabbix_db\nfi\n\n# Fix permissions\nchown -R zabbix:zabbix /etc/zabbix\nchown -R zabbix:zabbix /var/lib/zabbix\n\n# Start service\necho \"Starting Zabbix service...\"\nsystemctl start zabbix-server\n\necho \"Restore completed successfully\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check service status and logs\nsudo systemctl status zabbix-server\nsudo journalctl -u zabbix-server -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 80\nsudo lsof -i :80\n\n# Verify configuration\nsudo zabbix --test || sudo zabbix-server configtest\n\n# Check permissions\nls -la /etc/zabbix\nls -la /var/log/zabbix\n```\n\n2. **Cannot access web interface**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep zabbix-server\ncurl -I http://localhost:80\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 80\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep zabbix\n```\n\n3. **High memory/CPU usage**:\n```bash\n# Monitor resource usage\ntop -p $(pgrep zabbix_server)\nhtop -p $(pgrep zabbix_server)\n\n# Check for memory leaks\nps aux | grep zabbix_server\ncat /proc/$(pgrep zabbix_server)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /var/log/zabbix/*.log | tail -50\n```\n\n4. **Database connection errors**:\n```bash\n# Test database connection\npsql -U zabbix_user -d zabbix_db -c \"SELECT 1;\"\nmysql -u zabbix_user -p zabbix_db -e \"SELECT 1;\"\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho \"debug = true\" | sudo tee -a /etc/zabbix/zabbix.conf\n\n# Restart with debug mode\nsudo systemctl stop zabbix-server\nsudo -u zabbix zabbix --debug\n\n# Watch debug logs\ntail -f /var/log/zabbix/debug.log\n```\n\n### Performance Analysis\n\n```bash\n# Profile CPU usage\nsudo perf record -p $(pgrep zabbix_server) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/zabbix.pcap port 80\nsudo tcpdump -r /tmp/zabbix.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep zabbix_server)\n```\n\n## Integration Examples\n\n### Docker Deployment\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  zabbix:\n    image: zabbix:zabbix\n    container_name: zabbix\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/etc/zabbix\n      - ./data:/var/lib/zabbix\n      - ./logs:/var/log/zabbix\n    networks:\n      - zabbix_network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:80/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  zabbix_network:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\n# zabbix-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zabbix\n  labels:\n    app: zabbix\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: zabbix\n  template:\n    metadata:\n      labels:\n        app: zabbix\n    spec:\n      containers:\n      - name: zabbix\n        image: zabbix:zabbix\n        ports:\n        - containerPort: 80\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /etc/zabbix\n        - name: data\n          mountPath: /var/lib/zabbix\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: zabbix-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: zabbix-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: zabbix\nspec:\n  selector:\n    app: zabbix\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: zabbix-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n```\n\n### Ansible Playbook\n\n```yaml\n---\n# zabbix-playbook.yml\n- name: Install and configure Zabbix\n  hosts: all\n  become: yes\n  vars:\n    zabbix_version: latest\n    zabbix_port: 80\n    zabbix_config_dir: /etc/zabbix\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - mysql, php, apache, zabbix-agent\n        state: present\n    \n    - name: Install Zabbix\n      package:\n        name: zabbix\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: \"{{ zabbix_config_dir }}\"\n        state: directory\n        owner: zabbix\n        group: zabbix\n        mode: '0750'\n    \n    - name: Deploy configuration\n      template:\n        src: zabbix.conf.j2\n        dest: \"{{ zabbix_config_dir }}/zabbix.conf\"\n        owner: zabbix\n        group: zabbix\n        mode: '0640'\n      notify: restart zabbix\n    \n    - name: Start and enable service\n      systemd:\n        name: zabbix-server\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: \"{{ zabbix_port }}/tcp\"\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart zabbix\n      systemd:\n        name: zabbix-server\n        state: restarted\n```\n\n### Terraform Configuration\n\n```hcl\n# zabbix.tf\nresource \"aws_instance\" \"zabbix_server\" {\n  ami           = var.ami_id\n  instance_type = \"t3.medium\"\n  \n  vpc_security_group_ids = [aws_security_group.zabbix.id]\n  \n  user_data = <<-EOF\n    #!/bin/bash\n    # Install Zabbix\n    apt-get update\n    apt-get install -y zabbix mysql, php, apache, zabbix-agent\n    \n    # Configure Zabbix\n    systemctl enable zabbix-server\n    systemctl start zabbix-server\n  EOF\n  \n  tags = {\n    Name = \"Zabbix Server\"\n    Application = \"Zabbix\"\n  }\n}\n\nresource \"aws_security_group\" \"zabbix\" {\n  name        = \"zabbix-sg\"\n  description = \"Security group for Zabbix\"\n  \n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  tags = {\n    Name = \"Zabbix Security Group\"\n  }\n}\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update zabbix\nsudo dnf update zabbix\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade zabbix\n\n# Arch Linux\nsudo pacman -Syu zabbix\n\n# Alpine Linux\napk update\napk upgrade zabbix\n\n# openSUSE\nsudo zypper ref\nsudo zypper update zabbix\n\n# FreeBSD\npkg update\npkg upgrade zabbix\n\n# Always backup before updates\n/usr/local/bin/zabbix-backup\n\n# Restart after updates\nsudo systemctl restart zabbix-server\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean old logs\nfind /var/log/zabbix -name \"*.log\" -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze zabbix_db\n\n# Check disk usage\ndf -h | grep -E \"(/$|zabbix)\"\ndu -sh /var/lib/zabbix\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u zabbix-server | grep -i \"error\\|fail\\|deny\"\n```\n\n### Health Monitoring Checklist\n\n- [ ] Service is running and enabled\n- [ ] Web interface is accessible\n- [ ] Database connections are healthy\n- [ ] Disk usage is below 80%\n- [ ] No critical errors in logs\n- [ ] Backups are running successfully\n- [ ] SSL certificates are valid\n- [ ] Security updates are applied\n\n## Additional Resources\n\n- Official Documentation: https://docs.zabbix.org/\n- GitHub Repository: https://github.com/zabbix/zabbix\n- Community Forum: https://forum.zabbix.org/\n- Wiki: https://wiki.zabbix.org/\n- Docker Hub: https://hub.docker.com/r/zabbix/zabbix\n- Security Advisories: https://security.zabbix.org/\n- Best Practices: https://docs.zabbix.org/best-practices\n- API Documentation: https://api.zabbix.org/\n- Comparison with Nagios, Prometheus, PRTG, Datadog: https://docs.zabbix.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">Zabbix is a free and open-source Monitoring Platform. An enterprise-class monitoring solution for networks and applications</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum</li>\n<li class=\"mobile-list-item\">Network: 80 ports required</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10 Pro</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default zabbix port)</li>\n<li class=\"mobile-list-item\">Firewall rules configured</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">mysql, php, apache, zabbix-agent</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zabbix\nsudo dnf install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zabbix || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zabbix\nsudo apt install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\nsudo pacman -S zabbix\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\napk add --no-cache zabbix\n\n# Enable and start service\nrc-update add zabbix-server default\nrc-service zabbix-server start\n\n# Verify installation\nzabbix --version || rc-service zabbix-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\nsudo zypper install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zabbix || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zabbix\n\n# Start service\nbrew services start zabbix\n\n# Verify installation\nzabbix --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zabbix\n\n# Enable in rc.conf\necho &#039;zabbix-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Verify installation\nzabbix --version || service zabbix-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install zabbix\n\n# Or using Scoop\nscoop install zabbix\n\n# Verify installation\nzabbix --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/zabbix\n\n# Set up basic configuration\nsudo tee /etc/zabbix/zabbix.conf &lt;&lt; &#039;EOF&#039;\n# Zabbix Configuration\nCacheSize=32M, StartPollers=5\nEOF\n\n# Set appropriate permissions\nsudo chown -R zabbix:zabbix /etc/zabbix || \\\n  sudo chown -R $(whoami):$(whoami) /etc/zabbix\n\n# Test configuration\nsudo zabbix --test || sudo zabbix-server configtest</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false zabbix || true\n\n# Secure configuration files\nsudo chmod 750 /etc/zabbix\nsudo chmod 640 /etc/zabbix/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zabbix-server\n\n# Start service\nsudo systemctl start zabbix-server\n\n# Stop service\nsudo systemctl stop zabbix-server\n\n# Restart service\nsudo systemctl restart zabbix-server\n\n# Reload configuration\nsudo systemctl reload zabbix-server\n\n# Check status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zabbix-server default\n\n# Start service\nrc-service zabbix-server start\n\n# Stop service\nrc-service zabbix-server stop\n\n# Restart service\nrc-service zabbix-server restart\n\n# Check status\nrc-service zabbix-server status\n\n# View logs\ntail -f /var/log/zabbix/zabbix-server.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zabbix-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Stop service\nservice zabbix-server stop\n\n# Restart service\nservice zabbix-server restart\n\n# Check status\nservice zabbix-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zabbix\nbrew services stop zabbix\nbrew services restart zabbix\n\n# Check status\nbrew services list | grep zabbix\n\n# View logs\ntail -f $(brew --prefix)/var/log/zabbix.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zabbix-server\n\n# Stop service\nnet stop zabbix-server\n\n# Using PowerShell\nStart-Service zabbix-server\nStop-Service zabbix-server\nRestart-Service zabbix-server\n\n# Check status\nGet-Service zabbix-server\n\n# Set to automatic startup\nSet-Service zabbix-server -StartupType Automatic</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/zabbix/zabbix.conf &lt;&lt; &#039;EOF&#039;\n# Performance tuning\nCacheSize=32M, StartPollers=5\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho &quot;vm.swappiness=10&quot; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zabbix_backend {\n    server 127.0.0.1:80;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name zabbix.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zabbix.example.com;\n\n    ssl_certificate /etc/ssl/certs/zabbix.crt;\n    ssl_certificate_key /etc/ssl/private/zabbix.key;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n\n    location / {\n        proxy_pass http://zabbix_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zabbix.example.com\n    Redirect permanent / https://zabbix.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zabbix.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zabbix.crt\n    SSLCertificateKeyFile /etc/ssl/private/zabbix.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    &lt;Location /&gt;\n        ProxyPass http://127.0.0.1:80/\n        ProxyPassReverse http://127.0.0.1:80/\n    &lt;/Location&gt;\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:80/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">global\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend zabbix_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zabbix.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    \n    default_backend zabbix_backend\n\nbackend zabbix_backend\n    balance roundrobin\n    option httpchk GET /health\n    server zabbix1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddy\">zabbix.example.com {\n    reverse_proxy 127.0.0.1:80 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection &quot;1; mode=block&quot;\n    }\n    \n    encode gzip\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user\nsudo useradd --system --shell /bin/false --home /etc/zabbix zabbix || true\n\n# Set ownership\nsudo chown -R zabbix:zabbix /etc/zabbix\nsudo chown -R zabbix:zabbix /var/log/zabbix\n\n# Set permissions\nsudo chmod 750 /etc/zabbix\nsudo chmod 640 /etc/zabbix/*\nsudo chmod 750 /var/log/zabbix\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 80 proto tcp comment &quot;Zabbix&quot;\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=zabbix\nsudo firewall-cmd --permanent --service=zabbix --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=zabbix\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 80 || true</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/zabbix.key \\\n    -out /etc/ssl/certs/zabbix.crt \\\n    -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=zabbix.example.com&quot;\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/zabbix.key\nsudo chmod 644 /etc/ssl/certs/zabbix.crt\n\n# For production, use Let&#039;s Encrypt\nsudo certbot certonly --standalone -d zabbix.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"fail2ban-configuration\" class=\"mobile-header\">Fail2ban Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/jail.d/zabbix.conf\n[zabbix]\nenabled = true\nport = 80\nfilter = zabbix\nlogpath = /var/log/zabbix/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/filter.d/zabbix.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from &lt;HOST&gt;.*$\n            ^.*Authentication failed.*from &lt;HOST&gt;.*$\n            ^.*Invalid credentials.*from &lt;HOST&gt;.*$\nignoreregex =</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE zabbix_db;\nCREATE USER zabbix_user WITH ENCRYPTED PASSWORD &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON DATABASE zabbix_db TO zabbix_user;\n\\q\nEOF\n\n# Configure connection in Zabbix\necho &quot;DATABASE_URL=postgresql://zabbix_user:secure_password_here@localhost/zabbix_db&quot; | \\\n  sudo tee -a /etc/zabbix/zabbix.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE zabbix_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;zabbix_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON zabbix_db.* TO &#039;zabbix_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho &quot;DATABASE_URL=mysql://zabbix_user:secure_password_here@localhost/zabbix_db&quot; | \\\n  sudo tee -a /etc/zabbix/zabbix.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"sqlite-backend-if-applicable\" class=\"mobile-header\">SQLite Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database directory\nsudo mkdir -p /var/lib/zabbix\nsudo chown zabbix:zabbix /var/lib/zabbix\n\n# Initialize database\nsudo -u zabbix zabbix init-db</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters for better performance\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/security/limits.conf\nzabbix soft nofile 65535\nzabbix hard nofile 65535\nzabbix soft nproc 32768\nzabbix hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-tuning\" class=\"mobile-header\">Application Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure application-specific performance settings\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/zabbix/performance.conf\n# Performance configuration\nCacheSize=32M, StartPollers=5\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart zabbix-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: &#039;zabbix&#039;\n    static_configs:\n      - targets: [&#039;localhost:80/metrics&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 30s</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-script\" class=\"mobile-header\">Health Check Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/zabbix-health\n\n# Check if service is running\nif ! systemctl is-active --quiet zabbix-server; then\n    echo &quot;CRITICAL: Zabbix service is not running&quot;\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 80 2&gt;/dev/null; then\n    echo &quot;CRITICAL: Zabbix is not listening on port 80&quot;\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w &#039;%{time_total}&#039; http://localhost:80/health || echo &quot;999&quot;)\nif (( $(echo &quot;$response_time &gt; 5&quot; | bc -l) )); then\n    echo &quot;WARNING: Slow response time: ${response_time}s&quot;\n    exit 1\nfi\n\necho &quot;OK: Zabbix is healthy (response time: ${response_time}s)&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\ncat &lt;&lt; &#039;EOF&#039; | sudo tee /etc/logrotate.d/zabbix\n/var/log/zabbix/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 zabbix zabbix\n    postrotate\n        systemctl reload zabbix-server &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/zabbix</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/zabbix-backup\n\nBACKUP_DIR=&quot;/backup/zabbix&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/zabbix_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if needed for consistency)\necho &quot;Stopping Zabbix service...&quot;\nsystemctl stop zabbix-server\n\n# Backup configuration\necho &quot;Backing up configuration...&quot;\ntar -czf &quot;$BACKUP_FILE&quot; \\\n    /etc/zabbix \\\n    /var/lib/zabbix \\\n    /var/log/zabbix\n\n# Backup database (if applicable)\nif command -v pg_dump &amp;&gt; /dev/null; then\n    echo &quot;Backing up database...&quot;\n    sudo -u postgres pg_dump zabbix_db | gzip &gt; &quot;$BACKUP_DIR/zabbix_db_$DATE.sql.gz&quot;\nfi\n\n# Start service\necho &quot;Starting Zabbix service...&quot;\nsystemctl start zabbix-server\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.sql.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_FILE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/zabbix-restore\n\nif [ $# -ne 1 ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    exit 1\nfi\n\nBACKUP_FILE=&quot;$1&quot;\n\nif [ ! -f &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Error: Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\n# Stop service\necho &quot;Stopping Zabbix service...&quot;\nsystemctl stop zabbix-server\n\n# Restore files\necho &quot;Restoring from backup...&quot;\ntar -xzf &quot;$BACKUP_FILE&quot; -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo &quot;$BACKUP_FILE&quot; | sed &#039;s/.tar.gz$/_db.sql.gz/&#039;)\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;Restoring database...&quot;\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql zabbix_db\nfi\n\n# Fix permissions\nchown -R zabbix:zabbix /etc/zabbix\nchown -R zabbix:zabbix /var/lib/zabbix\n\n# Start service\necho &quot;Starting Zabbix service...&quot;\nsystemctl start zabbix-server\n\necho &quot;Restore completed successfully&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status and logs\nsudo systemctl status zabbix-server\nsudo journalctl -u zabbix-server -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 80\nsudo lsof -i :80\n\n# Verify configuration\nsudo zabbix --test || sudo zabbix-server configtest\n\n# Check permissions\nls -la /etc/zabbix\nls -la /var/log/zabbix</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Cannot access web interface</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep zabbix-server\ncurl -I http://localhost:80\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 80\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep zabbix</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>High memory/CPU usage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor resource usage\ntop -p $(pgrep zabbix_server)\nhtop -p $(pgrep zabbix_server)\n\n# Check for memory leaks\nps aux | grep zabbix_server\ncat /proc/$(pgrep zabbix_server)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /var/log/zabbix/*.log | tail -50</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Database connection errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test database connection\npsql -U zabbix_user -d zabbix_db -c &quot;SELECT 1;&quot;\nmysql -u zabbix_user -p zabbix_db -e &quot;SELECT 1;&quot;\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &quot;debug = true&quot; | sudo tee -a /etc/zabbix/zabbix.conf\n\n# Restart with debug mode\nsudo systemctl stop zabbix-server\nsudo -u zabbix zabbix --debug\n\n# Watch debug logs\ntail -f /var/log/zabbix/debug.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-analysis\" class=\"mobile-header\">Performance Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Profile CPU usage\nsudo perf record -p $(pgrep zabbix_server) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/zabbix.pcap port 80\nsudo tcpdump -r /tmp/zabbix.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep zabbix_server)</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-deployment\" class=\"mobile-header\">Docker Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml\nversion: &#039;3.8&#039;\n\nservices:\n  zabbix:\n    image: zabbix:zabbix\n    container_name: zabbix\n    restart: unless-stopped\n    ports:\n      - &quot;80:80&quot;\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/etc/zabbix\n      - ./data:/var/lib/zabbix\n      - ./logs:/var/log/zabbix\n    networks:\n      - zabbix_network\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:80/health&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  zabbix_network:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># zabbix-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zabbix\n  labels:\n    app: zabbix\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: zabbix\n  template:\n    metadata:\n      labels:\n        app: zabbix\n    spec:\n      containers:\n      - name: zabbix\n        image: zabbix:zabbix\n        ports:\n        - containerPort: 80\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /etc/zabbix\n        - name: data\n          mountPath: /var/lib/zabbix\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: zabbix-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: zabbix-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: zabbix\nspec:\n  selector:\n    app: zabbix\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: zabbix-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n# zabbix-playbook.yml\n- name: Install and configure Zabbix\n  hosts: all\n  become: yes\n  vars:\n    zabbix_version: latest\n    zabbix_port: 80\n    zabbix_config_dir: /etc/zabbix\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - mysql, php, apache, zabbix-agent\n        state: present\n    \n    - name: Install Zabbix\n      package:\n        name: zabbix\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: &quot;{{ zabbix_config_dir }}&quot;\n        state: directory\n        owner: zabbix\n        group: zabbix\n        mode: &#039;0750&#039;\n    \n    - name: Deploy configuration\n      template:\n        src: zabbix.conf.j2\n        dest: &quot;{{ zabbix_config_dir }}/zabbix.conf&quot;\n        owner: zabbix\n        group: zabbix\n        mode: &#039;0640&#039;\n      notify: restart zabbix\n    \n    - name: Start and enable service\n      systemd:\n        name: zabbix-server\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: &quot;{{ zabbix_port }}/tcp&quot;\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart zabbix\n      systemd:\n        name: zabbix-server\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-configuration\" class=\"mobile-header\">Terraform Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"hcl\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">hcl</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-hcl\"># zabbix.tf\nresource &quot;aws_instance&quot; &quot;zabbix_server&quot; {\n  ami           = var.ami_id\n  instance_type = &quot;t3.medium&quot;\n  \n  vpc_security_group_ids = [aws_security_group.zabbix.id]\n  \n  user_data = &lt;&lt;-EOF\n    #!/bin/bash\n    # Install Zabbix\n    apt-get update\n    apt-get install -y zabbix mysql, php, apache, zabbix-agent\n    \n    # Configure Zabbix\n    systemctl enable zabbix-server\n    systemctl start zabbix-server\n  EOF\n  \n  tags = {\n    Name = &quot;Zabbix Server&quot;\n    Application = &quot;Zabbix&quot;\n  }\n}\n\nresource &quot;aws_security_group&quot; &quot;zabbix&quot; {\n  name        = &quot;zabbix-sg&quot;\n  description = &quot;Security group for Zabbix&quot;\n  \n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  tags = {\n    Name = &quot;Zabbix Security Group&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update zabbix\nsudo dnf update zabbix\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade zabbix\n\n# Arch Linux\nsudo pacman -Syu zabbix\n\n# Alpine Linux\napk update\napk upgrade zabbix\n\n# openSUSE\nsudo zypper ref\nsudo zypper update zabbix\n\n# FreeBSD\npkg update\npkg upgrade zabbix\n\n# Always backup before updates\n/usr/local/bin/zabbix-backup\n\n# Restart after updates\nsudo systemctl restart zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean old logs\nfind /var/log/zabbix -name &quot;*.log&quot; -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze zabbix_db\n\n# Check disk usage\ndf -h | grep -E &quot;(/$|zabbix)&quot;\ndu -sh /var/lib/zabbix\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u zabbix-server | grep -i &quot;error\\|fail\\|deny&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring-checklist\" class=\"mobile-header\">Health Monitoring Checklist</h3>\n<li class=\"mobile-list-item\">[ ] Service is running and enabled</li>\n<li class=\"mobile-list-item\">[ ] Web interface is accessible</li>\n<li class=\"mobile-list-item\">[ ] Database connections are healthy</li>\n<li class=\"mobile-list-item\">[ ] Disk usage is below 80%</li>\n<li class=\"mobile-list-item\">[ ] No critical errors in logs</li>\n<li class=\"mobile-list-item\">[ ] Backups are running successfully</li>\n<li class=\"mobile-list-item\">[ ] SSL certificates are valid</li>\n<li class=\"mobile-list-item\">[ ] Security updates are applied</li>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zabbix.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zabbix/zabbix</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zabbix.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.zabbix.org/</li>\n<li class=\"mobile-list-item\">Docker Hub: https://hub.docker.com/r/zabbix/zabbix</li>\n<li class=\"mobile-list-item\">Security Advisories: https://security.zabbix.org/</li>\n<li class=\"mobile-list-item\">Best Practices: https://docs.zabbix.org/best-practices</li>\n<li class=\"mobile-list-item\">API Documentation: https://api.zabbix.org/</li>\n<li class=\"mobile-list-item\">Comparison with Nagios, Prometheus, PRTG, Datadog: https://docs.zabbix.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "16 min",
            "wordCount": 3115,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 3,
                "text": "Security Hardening",
                "id": "security-hardening"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 3,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "High Availability Setup",
                "id": "high-availability-setup"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 3,
                "text": "Caddy Configuration",
                "id": "caddy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 3,
                "text": "SSL/TLS Configuration",
                "id": "ssltls-configuration"
              },
              {
                "level": 3,
                "text": "Fail2ban Configuration",
                "id": "fail2ban-configuration"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 3,
                "text": "PostgreSQL Backend (if applicable)",
                "id": "postgresql-backend-if-applicable"
              },
              {
                "level": 3,
                "text": "MySQL/MariaDB Backend (if applicable)",
                "id": "mysqlmariadb-backend-if-applicable"
              },
              {
                "level": 3,
                "text": "SQLite Backend (if applicable)",
                "id": "sqlite-backend-if-applicable"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 3,
                "text": "Application Tuning",
                "id": "application-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Prometheus Integration",
                "id": "prometheus-integration"
              },
              {
                "level": 3,
                "text": "Health Check Script",
                "id": "health-check-script"
              },
              {
                "level": 3,
                "text": "Log Monitoring",
                "id": "log-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Script",
                "id": "restore-script"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 3,
                "text": "Debug Mode",
                "id": "debug-mode"
              },
              {
                "level": 3,
                "text": "Performance Analysis",
                "id": "performance-analysis"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Deployment",
                "id": "docker-deployment"
              },
              {
                "level": 3,
                "text": "Kubernetes Deployment",
                "id": "kubernetes-deployment"
              },
              {
                "level": 3,
                "text": "Ansible Playbook",
                "id": "ansible-playbook"
              },
              {
                "level": 3,
                "text": "Terraform Configuration",
                "id": "terraform-configuration"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance Tasks",
                "id": "regular-maintenance-tasks"
              },
              {
                "level": 3,
                "text": "Health Monitoring Checklist",
                "id": "health-monitoring-checklist"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:08.483Z",
            "metadataVersion": "2.0"
          }
        ],
        "icon": "📊",
        "color": "#ffb86c",
        "metadata": {
          "totalGuides": 1,
          "languages": [],
          "difficultyLevels": [
            "intermediate"
          ],
          "features": [
            "backup-restore-procedures",
            "comprehensive-documentation",
            "multi-os-support",
            "performance-optimization",
            "security-hardening",
            "troubleshooting-guides"
          ],
          "avgStars": 0,
          "totalStars": 0,
          "supportedOS": [
            "almalinux",
            "alpine",
            "arch",
            "centos",
            "debian",
            "freebsd",
            "macos",
            "opensuse",
            "rhel",
            "rocky",
            "sles",
            "ubuntu",
            "windows"
          ],
          "maintenanceStatuses": [
            "active"
          ]
        }
      },
      "iot-platforms": {
        "name": "Iot platforms",
        "description": "Iot platforms tools and applications",
        "guides": [
          {
            "name": "zigbee2mqtt",
            "displayName": "zigbee2mqtt Installation Guide",
            "slug": "zigbee2mqtt",
            "description": "zigbee2mqtt is a free and open-source Zigbee to MQTT bridge. Zigbee2MQTT bridges Zigbee devices to MQTT",
            "category": "iot-platforms",
            "subcategory": "iot-platforms",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "iot-platforms",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/iot-platforms/zigbee2mqtt",
            "documentationUrl": "https://howtomgr.github.io/iot-platforms/zigbee2mqtt",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/zigbee2mqtt",
            "updatedAt": "2025-09-16T18:05:04Z",
            "createdAt": "2025-09-08T03:19:12Z",
            "readmeRaw": "# zigbee2mqtt Installation Guide\n\nzigbee2mqtt is a free and open-source Zigbee to MQTT bridge. Zigbee2MQTT bridges Zigbee devices to MQTT\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 500MB for data\n  - Network: Zigbee/MQTT\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default zigbee2mqtt port)\n  - Frontend on 8080\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zigbee2mqtt\nsudo dnf install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zigbee2mqtt\nsudo apt install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### Arch Linux\n\n```bash\n# Install zigbee2mqtt\nsudo pacman -S zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zigbee2mqtt\napk add --no-cache zigbee2mqtt\n\n# Enable and start service\nrc-update add zigbee2mqtt default\nrc-service zigbee2mqtt start\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zigbee2mqtt\nsudo zypper install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zigbee2mqtt\n\n# Start service\nbrew services start zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zigbee2mqtt\n\n# Enable in rc.conf\necho 'zigbee2mqtt_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zigbee2mqtt start\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zigbee2mqtt\n\n# Or using Scoop\nscoop install zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zigbee2mqtt\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzigbee2mqtt --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zigbee2mqtt\n\n# Start service\nsudo systemctl start zigbee2mqtt\n\n# Stop service\nsudo systemctl stop zigbee2mqtt\n\n# Restart service\nsudo systemctl restart zigbee2mqtt\n\n# Check status\nsudo systemctl status zigbee2mqtt\n\n# View logs\nsudo journalctl -u zigbee2mqtt -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zigbee2mqtt default\n\n# Start service\nrc-service zigbee2mqtt start\n\n# Stop service\nrc-service zigbee2mqtt stop\n\n# Restart service\nrc-service zigbee2mqtt restart\n\n# Check status\nrc-service zigbee2mqtt status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zigbee2mqtt_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zigbee2mqtt start\n\n# Stop service\nservice zigbee2mqtt stop\n\n# Restart service\nservice zigbee2mqtt restart\n\n# Check status\nservice zigbee2mqtt status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zigbee2mqtt\nbrew services stop zigbee2mqtt\nbrew services restart zigbee2mqtt\n\n# Check status\nbrew services list | grep zigbee2mqtt\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zigbee2mqtt\n\n# Stop service\nnet stop zigbee2mqtt\n\n# Using PowerShell\nStart-Service zigbee2mqtt\nStop-Service zigbee2mqtt\nRestart-Service zigbee2mqtt\n\n# Check status\nGet-Service zigbee2mqtt\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zigbee2mqtt_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name zigbee2mqtt.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zigbee2mqtt.example.com;\n\n    ssl_certificate /etc/ssl/certs/zigbee2mqtt.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zigbee2mqtt.example.com.key;\n\n    location / {\n        proxy_pass http://zigbee2mqtt_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zigbee2mqtt.example.com\n    Redirect permanent / https://zigbee2mqtt.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zigbee2mqtt.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zigbee2mqtt.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zigbee2mqtt.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zigbee2mqtt_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zigbee2mqtt.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zigbee2mqtt_backend\n\nbackend zigbee2mqtt_backend\n    balance roundrobin\n    server zigbee2mqtt1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zigbee2mqtt:zigbee2mqtt /etc/zigbee2mqtt\nsudo chmod 750 /etc/zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zigbee2mqtt\n\n# View logs\nsudo journalctl -u zigbee2mqtt -f\n\n# Monitor resource usage\ntop -p $(pgrep zigbee2mqtt)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zigbee2mqtt\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zigbee2mqtt-backup-$DATE.tar.gz\" /etc/zigbee2mqtt /var/lib/zigbee2mqtt\n\necho \"Backup completed: $BACKUP_DIR/zigbee2mqtt-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zigbee2mqtt\n\n# Restore from backup\ntar -xzf /backup/zigbee2mqtt/zigbee2mqtt-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zigbee2mqtt\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zigbee2mqtt -n 100\nsudo tail -f /var/log/zigbee2mqtt/zigbee2mqtt.log\n\n# Check configuration\nzigbee2mqtt --version\n\n# Check permissions\nls -la /etc/zigbee2mqtt\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zigbee2mqtt)\n\n# Check disk I/O\niotop -p $(pgrep zigbee2mqtt)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zigbee2mqtt:\n    image: zigbee2mqtt:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/zigbee2mqtt\n      - ./data:/var/lib/zigbee2mqtt\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zigbee2mqtt\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zigbee2mqtt\n\n# Arch Linux\nsudo pacman -Syu zigbee2mqtt\n\n# Alpine Linux\napk update && apk upgrade zigbee2mqtt\n\n# openSUSE\nsudo zypper update zigbee2mqtt\n\n# FreeBSD\npkg update && pkg upgrade zigbee2mqtt\n\n# Always backup before updates\ntar -czf /backup/zigbee2mqtt-pre-update-$(date +%Y%m%d).tar.gz /etc/zigbee2mqtt\n\n# Restart after updates\nsudo systemctl restart zigbee2mqtt\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zigbee2mqtt\n\n# Clean old logs\nfind /var/log/zigbee2mqtt -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zigbee2mqtt\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zigbee2mqtt.org/\n- GitHub Repository: https://github.com/zigbee2mqtt/zigbee2mqtt\n- Community Forum: https://forum.zigbee2mqtt.org/\n- Best Practices Guide: https://docs.zigbee2mqtt.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">zigbee2mqtt is a free and open-source Zigbee to MQTT bridge. Zigbee2MQTT bridges Zigbee devices to MQTT</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 500MB for data</li>\n<li class=\"mobile-list-item\">Network: Zigbee/MQTT</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default zigbee2mqtt port)</li>\n<li class=\"mobile-list-item\">Frontend on 8080</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zigbee2mqtt\nsudo dnf install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zigbee2mqtt\nsudo apt install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zigbee2mqtt\nsudo pacman -S zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zigbee2mqtt\napk add --no-cache zigbee2mqtt\n\n# Enable and start service\nrc-update add zigbee2mqtt default\nrc-service zigbee2mqtt start\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zigbee2mqtt\nsudo zypper install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zigbee2mqtt\n\n# Start service\nbrew services start zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zigbee2mqtt\n\n# Enable in rc.conf\necho &#039;zigbee2mqtt_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zigbee2mqtt start\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zigbee2mqtt\n\n# Or using Scoop\nscoop install zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zigbee2mqtt\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zigbee2mqtt\n\n# Start service\nsudo systemctl start zigbee2mqtt\n\n# Stop service\nsudo systemctl stop zigbee2mqtt\n\n# Restart service\nsudo systemctl restart zigbee2mqtt\n\n# Check status\nsudo systemctl status zigbee2mqtt\n\n# View logs\nsudo journalctl -u zigbee2mqtt -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zigbee2mqtt default\n\n# Start service\nrc-service zigbee2mqtt start\n\n# Stop service\nrc-service zigbee2mqtt stop\n\n# Restart service\nrc-service zigbee2mqtt restart\n\n# Check status\nrc-service zigbee2mqtt status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zigbee2mqtt_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zigbee2mqtt start\n\n# Stop service\nservice zigbee2mqtt stop\n\n# Restart service\nservice zigbee2mqtt restart\n\n# Check status\nservice zigbee2mqtt status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zigbee2mqtt\nbrew services stop zigbee2mqtt\nbrew services restart zigbee2mqtt\n\n# Check status\nbrew services list | grep zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zigbee2mqtt\n\n# Stop service\nnet stop zigbee2mqtt\n\n# Using PowerShell\nStart-Service zigbee2mqtt\nStop-Service zigbee2mqtt\nRestart-Service zigbee2mqtt\n\n# Check status\nGet-Service zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zigbee2mqtt_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name zigbee2mqtt.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zigbee2mqtt.example.com;\n\n    ssl_certificate /etc/ssl/certs/zigbee2mqtt.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zigbee2mqtt.example.com.key;\n\n    location / {\n        proxy_pass http://zigbee2mqtt_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zigbee2mqtt.example.com\n    Redirect permanent / https://zigbee2mqtt.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zigbee2mqtt.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zigbee2mqtt.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zigbee2mqtt.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zigbee2mqtt_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zigbee2mqtt.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zigbee2mqtt_backend\n\nbackend zigbee2mqtt_backend\n    balance roundrobin\n    server zigbee2mqtt1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zigbee2mqtt:zigbee2mqtt /etc/zigbee2mqtt\nsudo chmod 750 /etc/zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zigbee2mqtt\n\n# View logs\nsudo journalctl -u zigbee2mqtt -f\n\n# Monitor resource usage\ntop -p $(pgrep zigbee2mqtt)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zigbee2mqtt&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zigbee2mqtt-backup-$DATE.tar.gz&quot; /etc/zigbee2mqtt /var/lib/zigbee2mqtt\n\necho &quot;Backup completed: $BACKUP_DIR/zigbee2mqtt-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zigbee2mqtt\n\n# Restore from backup\ntar -xzf /backup/zigbee2mqtt/zigbee2mqtt-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zigbee2mqtt -n 100\nsudo tail -f /var/log/zigbee2mqtt/zigbee2mqtt.log\n\n# Check configuration\nzigbee2mqtt --version\n\n# Check permissions\nls -la /etc/zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zigbee2mqtt)\n\n# Check disk I/O\niotop -p $(pgrep zigbee2mqtt)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zigbee2mqtt:\n    image: zigbee2mqtt:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/zigbee2mqtt\n      - ./data:/var/lib/zigbee2mqtt\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zigbee2mqtt\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zigbee2mqtt\n\n# Arch Linux\nsudo pacman -Syu zigbee2mqtt\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zigbee2mqtt\n\n# openSUSE\nsudo zypper update zigbee2mqtt\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zigbee2mqtt\n\n# Always backup before updates\ntar -czf /backup/zigbee2mqtt-pre-update-$(date +%Y%m%d).tar.gz /etc/zigbee2mqtt\n\n# Restart after updates\nsudo systemctl restart zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zigbee2mqtt\n\n# Clean old logs\nfind /var/log/zigbee2mqtt -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zigbee2mqtt.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zigbee2mqtt/zigbee2mqtt</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zigbee2mqtt.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zigbee2mqtt.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1269,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:07.347Z",
            "metadataVersion": "2.0"
          }
        ],
        "icon": "🔧",
        "color": "#6272a4",
        "metadata": {
          "totalGuides": 1,
          "languages": [],
          "difficultyLevels": [
            "intermediate"
          ],
          "features": [
            "backup-restore-procedures",
            "comprehensive-documentation",
            "multi-os-support",
            "performance-optimization",
            "security-hardening",
            "troubleshooting-guides"
          ],
          "avgStars": 0,
          "totalStars": 0,
          "supportedOS": [
            "almalinux",
            "alpine",
            "arch",
            "centos",
            "debian",
            "freebsd",
            "macos",
            "opensuse",
            "rhel",
            "rocky",
            "sles",
            "ubuntu",
            "windows"
          ],
          "maintenanceStatuses": [
            "active"
          ]
        }
      },
      "groupware": {
        "name": "Groupware",
        "description": "Groupware tools and applications",
        "guides": [
          {
            "name": "zimbra",
            "displayName": "Zimbra Installation Guide",
            "slug": "zimbra",
            "description": "Zimbra is a free and open-source Collaboration Suite. An open-source collaborative software suite",
            "category": "groupware",
            "subcategory": "groupware",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443,
              2048
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "groupware",
              "containerization",
              "orchestration",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection",
              "communication"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/groupware/zimbra",
            "documentationUrl": "https://howtomgr.github.io/groupware/zimbra",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/zimbra",
            "updatedAt": "2025-09-16T18:05:11Z",
            "createdAt": "2025-09-16T08:44:30Z",
            "readmeRaw": "# Zimbra Installation Guide\n\nZimbra is a free and open-source Collaboration Suite. An open-source collaborative software suite\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 443/7071 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443/7071 (default zimbra port)\n- **Dependencies**:\n  - perl, sysstat, sqlite\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zimbra\nsudo dnf install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Verify installation\nzimbra --version || systemctl status zimbra\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zimbra\nsudo apt install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo ufw allow 443/7071\n\n# Verify installation\nzimbra --version || systemctl status zimbra\n```\n\n### Arch Linux\n\n```bash\n# Install zimbra\nsudo pacman -S zimbra\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Verify installation\nzimbra --version || systemctl status zimbra\n```\n\n### Alpine Linux\n\n```bash\n# Install zimbra\napk add --no-cache zimbra\n\n# Enable and start service\nrc-update add zimbra default\nrc-service zimbra start\n\n# Verify installation\nzimbra --version || rc-service zimbra status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zimbra\nsudo zypper install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Verify installation\nzimbra --version || systemctl status zimbra\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zimbra\n\n# Start service\nbrew services start zimbra\n\n# Verify installation\nzimbra --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zimbra\n\n# Enable in rc.conf\necho 'zimbra_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zimbra start\n\n# Verify installation\nzimbra --version || service zimbra status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install zimbra\n\n# Or using Scoop\nscoop install zimbra\n\n# Verify installation\nzimbra --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /opt/zimbra/conf\n\n# Set up basic configuration\nsudo tee /opt/zimbra/conf/zimbra.conf << 'EOF'\n# Zimbra Configuration\nzimbraMailThreadPoolSize=250\nEOF\n\n# Test configuration\nsudo zimbra -t || sudo zimbra configtest\n\n# Reload service\nsudo systemctl reload zimbra\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chmod 750 /opt/zimbra/conf\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zimbra\n\n# Start service\nsudo systemctl start zimbra\n\n# Stop service\nsudo systemctl stop zimbra\n\n# Restart service\nsudo systemctl restart zimbra\n\n# Reload configuration\nsudo systemctl reload zimbra\n\n# Check status\nsudo systemctl status zimbra\n\n# View logs\nsudo journalctl -u zimbra -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zimbra default\n\n# Start service\nrc-service zimbra start\n\n# Stop service\nrc-service zimbra stop\n\n# Restart service\nrc-service zimbra restart\n\n# Check status\nrc-service zimbra status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zimbra_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zimbra start\n\n# Stop service\nservice zimbra stop\n\n# Restart service\nservice zimbra restart\n\n# Check status\nservice zimbra status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zimbra\nbrew services stop zimbra\nbrew services restart zimbra\n\n# Check status\nbrew services list | grep zimbra\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zimbra\n\n# Stop service\nnet stop zimbra\n\n# Using PowerShell\nStart-Service zimbra\nStop-Service zimbra\nRestart-Service zimbra\n\n# Check status\nGet-Service zimbra\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /opt/zimbra/conf/zimbra.conf << 'EOF'\nzimbraMailThreadPoolSize=250\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart zimbra\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zimbra_backend {\n    server 127.0.0.1:443/7071;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name zimbra.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zimbra.example.com;\n\n    ssl_certificate /etc/ssl/certs/zimbra.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zimbra.example.com.key;\n\n    location / {\n        proxy_pass http://zimbra_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zimbra.example.com\n    Redirect permanent / https://zimbra.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zimbra.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zimbra.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zimbra.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/7071/\n    ProxyPassReverse / http://127.0.0.1:443/7071/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:443/7071/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zimbra_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zimbra.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zimbra_backend\n\nbackend zimbra_backend\n    balance roundrobin\n    option httpchk GET /health\n    server zimbra1 127.0.0.1:443/7071 check\n    server zimbra2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chmod 750 /opt/zimbra/conf\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/zimbra.conf << 'EOF'\n[zimbra]\nenabled = true\nport = 443/7071\nfilter = zimbra\nlogpath = /opt/zimbra/log/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/zimbra.key \\\n    -out /etc/ssl/certs/zimbra.crt\n\n# Configure SSL in zimbra\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE zimbra_db;\nCREATE USER zimbra_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE zimbra_db TO zimbra_user;\nEOF\n\n# Configure zimbra to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE zimbra_db;\nCREATE USER 'zimbra_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON zimbra_db.* TO 'zimbra_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Zimbra specific tuning\nzimbraMailThreadPoolSize=250\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nzimbra soft nofile 65535\nzimbra hard nofile 65535\nzimbra soft nproc 32768\nzimbra hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'zimbra'\n    static_configs:\n      - targets: ['localhost:443/7071']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet zimbra; then\n    echo \"Zimbra is running\"\n    exit 0\nelse\n    echo \"Zimbra is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/zimbra << 'EOF'\n/opt/zimbra/log/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 zimbra zimbra\n    postrotate\n        systemctl reload zimbra > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Zimbra backup script\nBACKUP_DIR=\"/backup/zimbra\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop zimbra\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/zimbra-config-$DATE.tar.gz\" /opt/zimbra/conf\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/zimbra-data-$DATE.tar.gz\" /var/lib/zimbra\n\n# Start service\nsystemctl start zimbra\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zimbra\n\n# Restore configuration\nsudo tar -xzf /backup/zimbra/zimbra-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/zimbra/zimbra-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chown -R zimbra:zimbra /var/lib/zimbra\n\n# Start service\nsudo systemctl start zimbra\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zimbra -n 100\nsudo tail -f /opt/zimbra/log/*.log\n\n# Check configuration\nsudo zimbra -t || sudo zimbra configtest\n\n# Check permissions\nls -la /opt/zimbra/conf\nls -la /var/lib/zimbra\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443/7071\nsudo netstat -tlnp | grep 443/7071\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443/7071\nnc -zv localhost 443/7071\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zimbra)\nhtop -p $(pgrep zimbra)\n\n# Check connections\nss -ant | grep :443/7071 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep zimbra)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo zimbra -d\n# or\nsudo zimbra debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  zimbra:\n    image: zimbra:latest\n    container_name: zimbra\n    ports:\n      - \"443/7071:443/7071\"\n    volumes:\n      - ./config:/opt/zimbra/conf\n      - ./data:/var/lib/zimbra\n    environment:\n      - zimbra_CONFIG=/opt/zimbra/conf/zimbra.conf\n    restart: unless-stopped\n    networks:\n      - zimbra_net\n\nnetworks:\n  zimbra_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zimbra\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: zimbra\n  template:\n    metadata:\n      labels:\n        app: zimbra\n    spec:\n      containers:\n      - name: zimbra\n        image: zimbra:latest\n        ports:\n        - containerPort: 443/7071\n        volumeMounts:\n        - name: config\n          mountPath: /opt/zimbra/conf\n      volumes:\n      - name: config\n        configMap:\n          name: zimbra-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: zimbra\nspec:\n  selector:\n    app: zimbra\n  ports:\n  - port: 443/7071\n    targetPort: 443/7071\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Zimbra\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install zimbra\n      package:\n        name: zimbra\n        state: present\n    \n    - name: Configure zimbra\n      template:\n        src: zimbra.conf.j2\n        dest: /opt/zimbra/conf/zimbra.conf\n        owner: zimbra\n        group: zimbra\n        mode: '0640'\n      notify: restart zimbra\n    \n    - name: Start and enable zimbra\n      systemd:\n        name: zimbra\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart zimbra\n      systemd:\n        name: zimbra\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zimbra\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zimbra\n\n# Arch Linux\nsudo pacman -Syu zimbra\n\n# Alpine Linux\napk update && apk upgrade zimbra\n\n# openSUSE\nsudo zypper update zimbra\n\n# FreeBSD\npkg update && pkg upgrade zimbra\n\n# Always backup before updates\ntar -czf /backup/zimbra-pre-update-$(date +%Y%m%d).tar.gz /opt/zimbra/conf\n\n# Restart after updates\nsudo systemctl restart zimbra\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /opt/zimbra/log -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo zimbra --verify || sudo zimbra check\n\n# Update databases (if applicable)\nsudo zimbra-update-db\n\n# Optimize performance\nsudo zimbra-optimize\n\n# Check for security updates\nsudo zimbra --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zimbra.org/\n- GitHub Repository: https://github.com/zimbra/zimbra\n- Community Forum: https://forum.zimbra.org/\n- Wiki: https://wiki.zimbra.org/\n- Comparison vs Exchange, Kopano, Kolab, Nextcloud: https://docs.zimbra.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">Zimbra is a free and open-source Collaboration Suite. An open-source collaborative software suite</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 443/7071 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443/7071 (default zimbra port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">perl, sysstat, sqlite</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zimbra\nsudo dnf install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Verify installation\nzimbra --version || systemctl status zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zimbra\nsudo apt install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo ufw allow 443/7071\n\n# Verify installation\nzimbra --version || systemctl status zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zimbra\nsudo pacman -S zimbra\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Verify installation\nzimbra --version || systemctl status zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zimbra\napk add --no-cache zimbra\n\n# Enable and start service\nrc-update add zimbra default\nrc-service zimbra start\n\n# Verify installation\nzimbra --version || rc-service zimbra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zimbra\nsudo zypper install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Verify installation\nzimbra --version || systemctl status zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zimbra\n\n# Start service\nbrew services start zimbra\n\n# Verify installation\nzimbra --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zimbra\n\n# Enable in rc.conf\necho &#039;zimbra_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zimbra start\n\n# Verify installation\nzimbra --version || service zimbra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install zimbra\n\n# Or using Scoop\nscoop install zimbra\n\n# Verify installation\nzimbra --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /opt/zimbra/conf\n\n# Set up basic configuration\nsudo tee /opt/zimbra/conf/zimbra.conf &lt;&lt; &#039;EOF&#039;\n# Zimbra Configuration\nzimbraMailThreadPoolSize=250\nEOF\n\n# Test configuration\nsudo zimbra -t || sudo zimbra configtest\n\n# Reload service\nsudo systemctl reload zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chmod 750 /opt/zimbra/conf\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zimbra\n\n# Start service\nsudo systemctl start zimbra\n\n# Stop service\nsudo systemctl stop zimbra\n\n# Restart service\nsudo systemctl restart zimbra\n\n# Reload configuration\nsudo systemctl reload zimbra\n\n# Check status\nsudo systemctl status zimbra\n\n# View logs\nsudo journalctl -u zimbra -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zimbra default\n\n# Start service\nrc-service zimbra start\n\n# Stop service\nrc-service zimbra stop\n\n# Restart service\nrc-service zimbra restart\n\n# Check status\nrc-service zimbra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zimbra_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zimbra start\n\n# Stop service\nservice zimbra stop\n\n# Restart service\nservice zimbra restart\n\n# Check status\nservice zimbra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zimbra\nbrew services stop zimbra\nbrew services restart zimbra\n\n# Check status\nbrew services list | grep zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zimbra\n\n# Stop service\nnet stop zimbra\n\n# Using PowerShell\nStart-Service zimbra\nStop-Service zimbra\nRestart-Service zimbra\n\n# Check status\nGet-Service zimbra</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /opt/zimbra/conf/zimbra.conf &lt;&lt; &#039;EOF&#039;\nzimbraMailThreadPoolSize=250\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zimbra_backend {\n    server 127.0.0.1:443/7071;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name zimbra.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zimbra.example.com;\n\n    ssl_certificate /etc/ssl/certs/zimbra.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zimbra.example.com.key;\n\n    location / {\n        proxy_pass http://zimbra_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zimbra.example.com\n    Redirect permanent / https://zimbra.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zimbra.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zimbra.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zimbra.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/7071/\n    ProxyPassReverse / http://127.0.0.1:443/7071/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:443/7071/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zimbra_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zimbra.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zimbra_backend\n\nbackend zimbra_backend\n    balance roundrobin\n    option httpchk GET /health\n    server zimbra1 127.0.0.1:443/7071 check\n    server zimbra2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chmod 750 /opt/zimbra/conf\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/zimbra.conf &lt;&lt; &#039;EOF&#039;\n[zimbra]\nenabled = true\nport = 443/7071\nfilter = zimbra\nlogpath = /opt/zimbra/log/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/zimbra.key \\\n    -out /etc/ssl/certs/zimbra.crt\n\n# Configure SSL in zimbra\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE zimbra_db;\nCREATE USER zimbra_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE zimbra_db TO zimbra_user;\nEOF\n\n# Configure zimbra to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE zimbra_db;\nCREATE USER &#039;zimbra_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON zimbra_db.* TO &#039;zimbra_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Zimbra specific tuning\nzimbraMailThreadPoolSize=250</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nzimbra soft nofile 65535\nzimbra hard nofile 65535\nzimbra soft nproc 32768\nzimbra hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;zimbra&#039;\n    static_configs:\n      - targets: [&#039;localhost:443/7071&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet zimbra; then\n    echo &quot;Zimbra is running&quot;\n    exit 0\nelse\n    echo &quot;Zimbra is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/zimbra &lt;&lt; &#039;EOF&#039;\n/opt/zimbra/log/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 zimbra zimbra\n    postrotate\n        systemctl reload zimbra &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Zimbra backup script\nBACKUP_DIR=&quot;/backup/zimbra&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop zimbra\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/zimbra-config-$DATE.tar.gz&quot; /opt/zimbra/conf\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/zimbra-data-$DATE.tar.gz&quot; /var/lib/zimbra\n\n# Start service\nsystemctl start zimbra\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zimbra\n\n# Restore configuration\nsudo tar -xzf /backup/zimbra/zimbra-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/zimbra/zimbra-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chown -R zimbra:zimbra /var/lib/zimbra\n\n# Start service\nsudo systemctl start zimbra</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zimbra -n 100\nsudo tail -f /opt/zimbra/log/*.log\n\n# Check configuration\nsudo zimbra -t || sudo zimbra configtest\n\n# Check permissions\nls -la /opt/zimbra/conf\nls -la /var/lib/zimbra</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443/7071\nsudo netstat -tlnp | grep 443/7071\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443/7071\nnc -zv localhost 443/7071</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zimbra)\nhtop -p $(pgrep zimbra)\n\n# Check connections\nss -ant | grep :443/7071 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep zimbra)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo zimbra -d\n# or\nsudo zimbra debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zimbra:\n    image: zimbra:latest\n    container_name: zimbra\n    ports:\n      - &quot;443/7071:443/7071&quot;\n    volumes:\n      - ./config:/opt/zimbra/conf\n      - ./data:/var/lib/zimbra\n    environment:\n      - zimbra_CONFIG=/opt/zimbra/conf/zimbra.conf\n    restart: unless-stopped\n    networks:\n      - zimbra_net\n\nnetworks:\n  zimbra_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zimbra\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: zimbra\n  template:\n    metadata:\n      labels:\n        app: zimbra\n    spec:\n      containers:\n      - name: zimbra\n        image: zimbra:latest\n        ports:\n        - containerPort: 443/7071\n        volumeMounts:\n        - name: config\n          mountPath: /opt/zimbra/conf\n      volumes:\n      - name: config\n        configMap:\n          name: zimbra-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: zimbra\nspec:\n  selector:\n    app: zimbra\n  ports:\n  - port: 443/7071\n    targetPort: 443/7071\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Zimbra\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install zimbra\n      package:\n        name: zimbra\n        state: present\n    \n    - name: Configure zimbra\n      template:\n        src: zimbra.conf.j2\n        dest: /opt/zimbra/conf/zimbra.conf\n        owner: zimbra\n        group: zimbra\n        mode: &#039;0640&#039;\n      notify: restart zimbra\n    \n    - name: Start and enable zimbra\n      systemd:\n        name: zimbra\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart zimbra\n      systemd:\n        name: zimbra\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zimbra\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zimbra\n\n# Arch Linux\nsudo pacman -Syu zimbra\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zimbra\n\n# openSUSE\nsudo zypper update zimbra\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zimbra\n\n# Always backup before updates\ntar -czf /backup/zimbra-pre-update-$(date +%Y%m%d).tar.gz /opt/zimbra/conf\n\n# Restart after updates\nsudo systemctl restart zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /opt/zimbra/log -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo zimbra --verify || sudo zimbra check\n\n# Update databases (if applicable)\nsudo zimbra-update-db\n\n# Optimize performance\nsudo zimbra-optimize\n\n# Check for security updates\nsudo zimbra --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zimbra.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zimbra/zimbra</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zimbra.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.zimbra.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Exchange, Kopano, Kolab, Nextcloud: https://docs.zimbra.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "10 min",
            "wordCount": 1985,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 3,
                "text": "Security Hardening",
                "id": "security-hardening"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 3,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "Clustering and High Availability",
                "id": "clustering-and-high-availability"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 3,
                "text": "SSL/TLS Configuration",
                "id": "ssltls-configuration"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 3,
                "text": "PostgreSQL Backend (if applicable)",
                "id": "postgresql-backend-if-applicable"
              },
              {
                "level": 3,
                "text": "MySQL/MariaDB Backend (if applicable)",
                "id": "mysqlmariadb-backend-if-applicable"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 3,
                "text": "Resource Limits",
                "id": "resource-limits"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Prometheus Integration",
                "id": "prometheus-integration"
              },
              {
                "level": 3,
                "text": "Health Checks",
                "id": "health-checks"
              },
              {
                "level": 3,
                "text": "Log Monitoring",
                "id": "log-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 3,
                "text": "Debug Mode",
                "id": "debug-mode"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose",
                "id": "docker-compose"
              },
              {
                "level": 3,
                "text": "Kubernetes Deployment",
                "id": "kubernetes-deployment"
              },
              {
                "level": 3,
                "text": "Ansible Playbook",
                "id": "ansible-playbook"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance Tasks",
                "id": "regular-maintenance-tasks"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:07.120Z",
            "metadataVersion": "2.0"
          }
        ],
        "icon": "🔧",
        "color": "#6272a4",
        "metadata": {
          "totalGuides": 1,
          "languages": [],
          "difficultyLevels": [
            "intermediate"
          ],
          "features": [
            "backup-restore-procedures",
            "comprehensive-documentation",
            "multi-os-support",
            "performance-optimization",
            "security-hardening",
            "troubleshooting-guides"
          ],
          "avgStars": 0,
          "totalStars": 0,
          "supportedOS": [
            "almalinux",
            "alpine",
            "arch",
            "centos",
            "debian",
            "freebsd",
            "macos",
            "opensuse",
            "rhel",
            "rocky",
            "sles",
            "ubuntu",
            "windows"
          ],
          "maintenanceStatuses": [
            "active"
          ]
        }
      },
      "search-engines": {
        "name": "Search engines",
        "description": "Search engines tools and applications",
        "guides": [
          {
            "name": "zinc",
            "displayName": "zinc Installation Guide",
            "slug": "zinc",
            "description": "zinc is a free and open-source search engine. Zinc provides lightweight alternative to Elasticsearch",
            "category": "search-engines",
            "subcategory": "search-engines",
            "difficultyLevel": "intermediate",
            "estimatedSetupTime": "15-30 minutes",
            "supportedOS": [
              "rhel",
              "centos",
              "rocky",
              "almalinux",
              "debian",
              "ubuntu",
              "arch",
              "alpine",
              "opensuse",
              "sles",
              "macos",
              "freebsd",
              "windows"
            ],
            "defaultPorts": [
              80,
              443,
              4080
            ],
            "installationMethods": [
              "native-packages",
              "source-compilation"
            ],
            "features": [
              "multi-os-support",
              "comprehensive-documentation",
              "security-hardening",
              "performance-optimization",
              "backup-restore-procedures",
              "troubleshooting-guides"
            ],
            "tags": [
              "search-engines",
              "containerization",
              "observability",
              "data-storage",
              "networking",
              "security",
              "data-protection"
            ],
            "maintenanceStatus": "active",
            "specVersion": "2.0",
            "version": "1.0.0",
            "license": "Open Source",
            "websiteUrl": "https://howtomgr.github.io/search-engines/zinc",
            "documentationUrl": "https://howtomgr.github.io/search-engines/zinc",
            "language": null,
            "stars": 0,
            "forks": 0,
            "topics": [],
            "githubUrl": "https://github.com/howtomgr/zinc",
            "updatedAt": "2025-09-16T18:05:18Z",
            "createdAt": "2025-09-16T08:44:45Z",
            "readmeRaw": "# zinc Installation Guide\n\nzinc is a free and open-source search engine. Zinc provides lightweight alternative to Elasticsearch\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 10GB for indices\n  - Network: HTTP/REST API\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 4080 (default zinc port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zinc\nsudo dnf install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzinc --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zinc\nsudo apt install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo ufw allow 4080\n\n# Verify installation\nzinc --version\n```\n\n### Arch Linux\n\n```bash\n# Install zinc\nsudo pacman -S zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Verify installation\nzinc --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zinc\napk add --no-cache zinc\n\n# Enable and start service\nrc-update add zinc default\nrc-service zinc start\n\n# Verify installation\nzinc --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zinc\nsudo zypper install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzinc --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zinc\n\n# Start service\nbrew services start zinc\n\n# Verify installation\nzinc --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zinc\n\n# Enable in rc.conf\necho 'zinc_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zinc start\n\n# Verify installation\nzinc --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zinc\n\n# Or using Scoop\nscoop install zinc\n\n# Verify installation\nzinc --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zinc\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzinc --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zinc\n\n# Start service\nsudo systemctl start zinc\n\n# Stop service\nsudo systemctl stop zinc\n\n# Restart service\nsudo systemctl restart zinc\n\n# Check status\nsudo systemctl status zinc\n\n# View logs\nsudo journalctl -u zinc -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zinc default\n\n# Start service\nrc-service zinc start\n\n# Stop service\nrc-service zinc stop\n\n# Restart service\nrc-service zinc restart\n\n# Check status\nrc-service zinc status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zinc_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zinc start\n\n# Stop service\nservice zinc stop\n\n# Restart service\nservice zinc restart\n\n# Check status\nservice zinc status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zinc\nbrew services stop zinc\nbrew services restart zinc\n\n# Check status\nbrew services list | grep zinc\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zinc\n\n# Stop service\nnet stop zinc\n\n# Using PowerShell\nStart-Service zinc\nStop-Service zinc\nRestart-Service zinc\n\n# Check status\nGet-Service zinc\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zinc_backend {\n    server 127.0.0.1:4080;\n}\n\nserver {\n    listen 80;\n    server_name zinc.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zinc.example.com;\n\n    ssl_certificate /etc/ssl/certs/zinc.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zinc.example.com.key;\n\n    location / {\n        proxy_pass http://zinc_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zinc.example.com\n    Redirect permanent / https://zinc.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zinc.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zinc.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zinc.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:4080/\n    ProxyPassReverse / http://127.0.0.1:4080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zinc_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zinc.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zinc_backend\n\nbackend zinc_backend\n    balance roundrobin\n    server zinc1 127.0.0.1:4080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zinc:zinc /etc/zinc\nsudo chmod 750 /etc/zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zinc\n\n# View logs\nsudo journalctl -u zinc -f\n\n# Monitor resource usage\ntop -p $(pgrep zinc)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zinc\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zinc-backup-$DATE.tar.gz\" /etc/zinc /var/lib/zinc\n\necho \"Backup completed: $BACKUP_DIR/zinc-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zinc\n\n# Restore from backup\ntar -xzf /backup/zinc/zinc-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zinc\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zinc -n 100\nsudo tail -f /var/log/zinc/zinc.log\n\n# Check configuration\nzinc --version\n\n# Check permissions\nls -la /etc/zinc\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 4080\n\n# Test connectivity\ntelnet localhost 4080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zinc)\n\n# Check disk I/O\niotop -p $(pgrep zinc)\n\n# Check connections\nss -an | grep 4080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zinc:\n    image: zinc:latest\n    ports:\n      - \"4080:4080\"\n    volumes:\n      - ./config:/etc/zinc\n      - ./data:/var/lib/zinc\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zinc\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zinc\n\n# Arch Linux\nsudo pacman -Syu zinc\n\n# Alpine Linux\napk update && apk upgrade zinc\n\n# openSUSE\nsudo zypper update zinc\n\n# FreeBSD\npkg update && pkg upgrade zinc\n\n# Always backup before updates\ntar -czf /backup/zinc-pre-update-$(date +%Y%m%d).tar.gz /etc/zinc\n\n# Restart after updates\nsudo systemctl restart zinc\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zinc\n\n# Clean old logs\nfind /var/log/zinc -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zinc\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zinc.org/\n- GitHub Repository: https://github.com/zinc/zinc\n- Community Forum: https://forum.zinc.org/\n- Best Practices Guide: https://docs.zinc.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
            "readmeHtml": "<p class=\"mobile-paragraph\">zinc is a free and open-source search engine. Zinc provides lightweight alternative to Elasticsearch</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for indices</li>\n<li class=\"mobile-list-item\">Network: HTTP/REST API</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 4080 (default zinc port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zinc\nsudo dnf install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zinc\nsudo apt install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo ufw allow 4080\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zinc\nsudo pacman -S zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zinc\napk add --no-cache zinc\n\n# Enable and start service\nrc-update add zinc default\nrc-service zinc start\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zinc\nsudo zypper install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zinc\n\n# Start service\nbrew services start zinc\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zinc\n\n# Enable in rc.conf\necho &#039;zinc_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zinc start\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zinc\n\n# Or using Scoop\nscoop install zinc\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zinc\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzinc --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zinc\n\n# Start service\nsudo systemctl start zinc\n\n# Stop service\nsudo systemctl stop zinc\n\n# Restart service\nsudo systemctl restart zinc\n\n# Check status\nsudo systemctl status zinc\n\n# View logs\nsudo journalctl -u zinc -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zinc default\n\n# Start service\nrc-service zinc start\n\n# Stop service\nrc-service zinc stop\n\n# Restart service\nrc-service zinc restart\n\n# Check status\nrc-service zinc status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zinc_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zinc start\n\n# Stop service\nservice zinc stop\n\n# Restart service\nservice zinc restart\n\n# Check status\nservice zinc status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zinc\nbrew services stop zinc\nbrew services restart zinc\n\n# Check status\nbrew services list | grep zinc</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zinc\n\n# Stop service\nnet stop zinc\n\n# Using PowerShell\nStart-Service zinc\nStop-Service zinc\nRestart-Service zinc\n\n# Check status\nGet-Service zinc</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zinc_backend {\n    server 127.0.0.1:4080;\n}\n\nserver {\n    listen 80;\n    server_name zinc.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zinc.example.com;\n\n    ssl_certificate /etc/ssl/certs/zinc.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zinc.example.com.key;\n\n    location / {\n        proxy_pass http://zinc_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zinc.example.com\n    Redirect permanent / https://zinc.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zinc.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zinc.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zinc.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:4080/\n    ProxyPassReverse / http://127.0.0.1:4080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zinc_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zinc.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zinc_backend\n\nbackend zinc_backend\n    balance roundrobin\n    server zinc1 127.0.0.1:4080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zinc:zinc /etc/zinc\nsudo chmod 750 /etc/zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zinc\n\n# View logs\nsudo journalctl -u zinc -f\n\n# Monitor resource usage\ntop -p $(pgrep zinc)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zinc&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zinc-backup-$DATE.tar.gz&quot; /etc/zinc /var/lib/zinc\n\necho &quot;Backup completed: $BACKUP_DIR/zinc-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zinc\n\n# Restore from backup\ntar -xzf /backup/zinc/zinc-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zinc</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zinc -n 100\nsudo tail -f /var/log/zinc/zinc.log\n\n# Check configuration\nzinc --version\n\n# Check permissions\nls -la /etc/zinc</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 4080\n\n# Test connectivity\ntelnet localhost 4080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zinc)\n\n# Check disk I/O\niotop -p $(pgrep zinc)\n\n# Check connections\nss -an | grep 4080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zinc:\n    image: zinc:latest\n    ports:\n      - &quot;4080:4080&quot;\n    volumes:\n      - ./config:/etc/zinc\n      - ./data:/var/lib/zinc\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zinc\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zinc\n\n# Arch Linux\nsudo pacman -Syu zinc\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zinc\n\n# openSUSE\nsudo zypper update zinc\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zinc\n\n# Always backup before updates\ntar -czf /backup/zinc-pre-update-$(date +%Y%m%d).tar.gz /etc/zinc\n\n# Restart after updates\nsudo systemctl restart zinc</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zinc\n\n# Clean old logs\nfind /var/log/zinc -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zinc</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zinc.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zinc/zinc</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zinc.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zinc.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
            "readTime": "7 min",
            "wordCount": 1266,
            "tableOfContents": [
              {
                "level": 2,
                "text": "1. Prerequisites",
                "id": "1-prerequisites"
              },
              {
                "level": 2,
                "text": "2. Supported Operating Systems",
                "id": "2-supported-operating-systems"
              },
              {
                "level": 2,
                "text": "3. Installation",
                "id": "3-installation"
              },
              {
                "level": 3,
                "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
                "id": "rhelcentosrocky-linuxalmalinux"
              },
              {
                "level": 3,
                "text": "Debian/Ubuntu",
                "id": "debianubuntu"
              },
              {
                "level": 3,
                "text": "Arch Linux",
                "id": "arch-linux"
              },
              {
                "level": 3,
                "text": "Alpine Linux",
                "id": "alpine-linux"
              },
              {
                "level": 3,
                "text": "openSUSE/SLES",
                "id": "opensusesles"
              },
              {
                "level": 3,
                "text": "macOS",
                "id": "macos"
              },
              {
                "level": 3,
                "text": "FreeBSD",
                "id": "freebsd"
              },
              {
                "level": 3,
                "text": "Windows",
                "id": "windows"
              },
              {
                "level": 2,
                "text": "Initial Configuration",
                "id": "initial-configuration"
              },
              {
                "level": 3,
                "text": "Basic Configuration",
                "id": "basic-configuration"
              },
              {
                "level": 2,
                "text": "5. Service Management",
                "id": "5-service-management"
              },
              {
                "level": 3,
                "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
                "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
              },
              {
                "level": 3,
                "text": "OpenRC (Alpine Linux)",
                "id": "openrc-alpine-linux"
              },
              {
                "level": 3,
                "text": "rc.d (FreeBSD)",
                "id": "rcd-freebsd"
              },
              {
                "level": 3,
                "text": "launchd (macOS)",
                "id": "launchd-macos"
              },
              {
                "level": 3,
                "text": "Windows Service Manager",
                "id": "windows-service-manager"
              },
              {
                "level": 2,
                "text": "Advanced Configuration",
                "id": "advanced-configuration"
              },
              {
                "level": 2,
                "text": "Reverse Proxy Setup",
                "id": "reverse-proxy-setup"
              },
              {
                "level": 3,
                "text": "nginx Configuration",
                "id": "nginx-configuration"
              },
              {
                "level": 3,
                "text": "Apache Configuration",
                "id": "apache-configuration"
              },
              {
                "level": 3,
                "text": "HAProxy Configuration",
                "id": "haproxy-configuration"
              },
              {
                "level": 2,
                "text": "Security Configuration",
                "id": "security-configuration"
              },
              {
                "level": 3,
                "text": "Basic Security Setup",
                "id": "basic-security-setup"
              },
              {
                "level": 2,
                "text": "Database Setup",
                "id": "database-setup"
              },
              {
                "level": 2,
                "text": "Performance Optimization",
                "id": "performance-optimization"
              },
              {
                "level": 3,
                "text": "System Tuning",
                "id": "system-tuning"
              },
              {
                "level": 2,
                "text": "Monitoring",
                "id": "monitoring"
              },
              {
                "level": 3,
                "text": "Basic Monitoring",
                "id": "basic-monitoring"
              },
              {
                "level": 2,
                "text": "9. Backup and Restore",
                "id": "9-backup-and-restore"
              },
              {
                "level": 3,
                "text": "Backup Script",
                "id": "backup-script"
              },
              {
                "level": 3,
                "text": "Restore Procedure",
                "id": "restore-procedure"
              },
              {
                "level": 2,
                "text": "6. Troubleshooting",
                "id": "6-troubleshooting"
              },
              {
                "level": 3,
                "text": "Common Issues",
                "id": "common-issues"
              },
              {
                "level": 2,
                "text": "Integration Examples",
                "id": "integration-examples"
              },
              {
                "level": 3,
                "text": "Docker Compose Example",
                "id": "docker-compose-example"
              },
              {
                "level": 2,
                "text": "Maintenance",
                "id": "maintenance"
              },
              {
                "level": 3,
                "text": "Update Procedures",
                "id": "update-procedures"
              },
              {
                "level": 3,
                "text": "Regular Maintenance",
                "id": "regular-maintenance"
              },
              {
                "level": 2,
                "text": "Additional Resources",
                "id": "additional-resources"
              }
            ],
            "lastBuilt": "2025-09-23T03:24:06.852Z",
            "metadataVersion": "2.0"
          }
        ],
        "icon": "🔧",
        "color": "#6272a4",
        "metadata": {
          "totalGuides": 1,
          "languages": [],
          "difficultyLevels": [
            "intermediate"
          ],
          "features": [
            "backup-restore-procedures",
            "comprehensive-documentation",
            "multi-os-support",
            "performance-optimization",
            "security-hardening",
            "troubleshooting-guides"
          ],
          "avgStars": 0,
          "totalStars": 0,
          "supportedOS": [
            "almalinux",
            "alpine",
            "arch",
            "centos",
            "debian",
            "freebsd",
            "macos",
            "opensuse",
            "rhel",
            "rocky",
            "sles",
            "ubuntu",
            "windows"
          ],
          "maintenanceStatuses": [
            "active"
          ]
        }
      }
    }
  },
  "guides": [
    {
      "name": "wordpress",
      "displayName": "wordpress Installation Guide",
      "slug": "wordpress",
      "description": "wordpress is a free and open-source content management system. WordPress powers over 40% of the web with extensible CMS",
      "category": "cms",
      "subcategory": "cms",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "cms",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/cms/wordpress",
      "documentationUrl": "https://howtomgr.github.io/cms/wordpress",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/wordpress",
      "updatedAt": "2025-09-16T18:03:31Z",
      "createdAt": "2025-09-08T03:18:29Z",
      "readmeRaw": "# wordpress Installation Guide\n\nwordpress is a free and open-source content management system. WordPress powers over 40% of the web with extensible CMS\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default wordpress port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install wordpress\nsudo dnf install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwordpress --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install wordpress\nsudo apt install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nwordpress --version\n```\n\n### Arch Linux\n\n```bash\n# Install wordpress\nsudo pacman -S wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Verify installation\nwordpress --version\n```\n\n### Alpine Linux\n\n```bash\n# Install wordpress\napk add --no-cache wordpress\n\n# Enable and start service\nrc-update add wordpress default\nrc-service wordpress start\n\n# Verify installation\nwordpress --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install wordpress\nsudo zypper install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwordpress --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install wordpress\n\n# Start service\nbrew services start wordpress\n\n# Verify installation\nwordpress --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install wordpress\n\n# Enable in rc.conf\necho 'wordpress_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice wordpress start\n\n# Verify installation\nwordpress --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install wordpress\n\n# Or using Scoop\nscoop install wordpress\n\n# Verify installation\nwordpress --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/wordpress\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nwordpress --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable wordpress\n\n# Start service\nsudo systemctl start wordpress\n\n# Stop service\nsudo systemctl stop wordpress\n\n# Restart service\nsudo systemctl restart wordpress\n\n# Check status\nsudo systemctl status wordpress\n\n# View logs\nsudo journalctl -u wordpress -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add wordpress default\n\n# Start service\nrc-service wordpress start\n\n# Stop service\nrc-service wordpress stop\n\n# Restart service\nrc-service wordpress restart\n\n# Check status\nrc-service wordpress status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'wordpress_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice wordpress start\n\n# Stop service\nservice wordpress stop\n\n# Restart service\nservice wordpress restart\n\n# Check status\nservice wordpress status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start wordpress\nbrew services stop wordpress\nbrew services restart wordpress\n\n# Check status\nbrew services list | grep wordpress\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start wordpress\n\n# Stop service\nnet stop wordpress\n\n# Using PowerShell\nStart-Service wordpress\nStop-Service wordpress\nRestart-Service wordpress\n\n# Check status\nGet-Service wordpress\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream wordpress_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name wordpress.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name wordpress.example.com;\n\n    ssl_certificate /etc/ssl/certs/wordpress.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/wordpress.example.com.key;\n\n    location / {\n        proxy_pass http://wordpress_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName wordpress.example.com\n    Redirect permanent / https://wordpress.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName wordpress.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/wordpress.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/wordpress.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend wordpress_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/wordpress.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend wordpress_backend\n\nbackend wordpress_backend\n    balance roundrobin\n    server wordpress1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R wordpress:wordpress /etc/wordpress\nsudo chmod 750 /etc/wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status wordpress\n\n# View logs\nsudo journalctl -u wordpress -f\n\n# Monitor resource usage\ntop -p $(pgrep wordpress)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/wordpress\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/wordpress-backup-$DATE.tar.gz\" /etc/wordpress /var/lib/wordpress\n\necho \"Backup completed: $BACKUP_DIR/wordpress-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop wordpress\n\n# Restore from backup\ntar -xzf /backup/wordpress/wordpress-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start wordpress\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u wordpress -n 100\nsudo tail -f /var/log/wordpress/wordpress.log\n\n# Check configuration\nwordpress --version\n\n# Check permissions\nls -la /etc/wordpress\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep wordpress)\n\n# Check disk I/O\niotop -p $(pgrep wordpress)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  wordpress:\n    image: wordpress:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/wordpress\n      - ./data:/var/lib/wordpress\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update wordpress\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade wordpress\n\n# Arch Linux\nsudo pacman -Syu wordpress\n\n# Alpine Linux\napk update && apk upgrade wordpress\n\n# openSUSE\nsudo zypper update wordpress\n\n# FreeBSD\npkg update && pkg upgrade wordpress\n\n# Always backup before updates\ntar -czf /backup/wordpress-pre-update-$(date +%Y%m%d).tar.gz /etc/wordpress\n\n# Restart after updates\nsudo systemctl restart wordpress\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/wordpress\n\n# Clean old logs\nfind /var/log/wordpress -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/wordpress\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.wordpress.org/\n- GitHub Repository: https://github.com/wordpress/wordpress\n- Community Forum: https://forum.wordpress.org/\n- Best Practices Guide: https://docs.wordpress.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">wordpress is a free and open-source content management system. WordPress powers over 40% of the web with extensible CMS</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default wordpress port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install wordpress\nsudo dnf install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install wordpress\nsudo apt install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wordpress\nsudo pacman -S wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wordpress\napk add --no-cache wordpress\n\n# Enable and start service\nrc-update add wordpress default\nrc-service wordpress start\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wordpress\nsudo zypper install -y wordpress\n\n# Enable and start service\nsudo systemctl enable --now wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install wordpress\n\n# Start service\nbrew services start wordpress\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install wordpress\n\n# Enable in rc.conf\necho &#039;wordpress_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice wordpress start\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install wordpress\n\n# Or using Scoop\nscoop install wordpress\n\n# Verify installation\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/wordpress\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nwordpress --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable wordpress\n\n# Start service\nsudo systemctl start wordpress\n\n# Stop service\nsudo systemctl stop wordpress\n\n# Restart service\nsudo systemctl restart wordpress\n\n# Check status\nsudo systemctl status wordpress\n\n# View logs\nsudo journalctl -u wordpress -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add wordpress default\n\n# Start service\nrc-service wordpress start\n\n# Stop service\nrc-service wordpress stop\n\n# Restart service\nrc-service wordpress restart\n\n# Check status\nrc-service wordpress status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;wordpress_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice wordpress start\n\n# Stop service\nservice wordpress stop\n\n# Restart service\nservice wordpress restart\n\n# Check status\nservice wordpress status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start wordpress\nbrew services stop wordpress\nbrew services restart wordpress\n\n# Check status\nbrew services list | grep wordpress</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start wordpress\n\n# Stop service\nnet stop wordpress\n\n# Using PowerShell\nStart-Service wordpress\nStop-Service wordpress\nRestart-Service wordpress\n\n# Check status\nGet-Service wordpress</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream wordpress_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name wordpress.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name wordpress.example.com;\n\n    ssl_certificate /etc/ssl/certs/wordpress.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/wordpress.example.com.key;\n\n    location / {\n        proxy_pass http://wordpress_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName wordpress.example.com\n    Redirect permanent / https://wordpress.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName wordpress.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/wordpress.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/wordpress.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend wordpress_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/wordpress.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend wordpress_backend\n\nbackend wordpress_backend\n    balance roundrobin\n    server wordpress1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R wordpress:wordpress /etc/wordpress\nsudo chmod 750 /etc/wordpress\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status wordpress\n\n# View logs\nsudo journalctl -u wordpress -f\n\n# Monitor resource usage\ntop -p $(pgrep wordpress)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/wordpress&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/wordpress-backup-$DATE.tar.gz&quot; /etc/wordpress /var/lib/wordpress\n\necho &quot;Backup completed: $BACKUP_DIR/wordpress-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop wordpress\n\n# Restore from backup\ntar -xzf /backup/wordpress/wordpress-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start wordpress</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u wordpress -n 100\nsudo tail -f /var/log/wordpress/wordpress.log\n\n# Check configuration\nwordpress --version\n\n# Check permissions\nls -la /etc/wordpress</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep wordpress)\n\n# Check disk I/O\niotop -p $(pgrep wordpress)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  wordpress:\n    image: wordpress:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/wordpress\n      - ./data:/var/lib/wordpress\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update wordpress\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade wordpress\n\n# Arch Linux\nsudo pacman -Syu wordpress\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade wordpress\n\n# openSUSE\nsudo zypper update wordpress\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade wordpress\n\n# Always backup before updates\ntar -czf /backup/wordpress-pre-update-$(date +%Y%m%d).tar.gz /etc/wordpress\n\n# Restart after updates\nsudo systemctl restart wordpress</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/wordpress\n\n# Clean old logs\nfind /var/log/wordpress -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/wordpress</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.wordpress.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/wordpress/wordpress</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.wordpress.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.wordpress.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1271,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:10.833Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "wso2",
      "displayName": "wso2 Installation Guide",
      "slug": "wso2",
      "description": "wso2 is a free and open-source API management platform. WSO2 provides complete open source API management platform",
      "category": "api-gateways",
      "subcategory": "api-gateways",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443,
        9443
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "api-gateways",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/api-gateways/wso2",
      "documentationUrl": "https://howtomgr.github.io/api-gateways/wso2",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/wso2",
      "updatedAt": "2025-09-16T18:03:41Z",
      "createdAt": "2025-09-16T08:41:47Z",
      "readmeRaw": "# wso2 Installation Guide\n\nwso2 is a free and open-source API management platform. WSO2 provides complete open source API management platform\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores\n  - RAM: 4GB minimum\n  - Storage: 10GB for data\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9443 (default wso2 port)\n  - Various service ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install wso2\nsudo dnf install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwso2 --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install wso2\nsudo apt install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo ufw allow 9443\n\n# Verify installation\nwso2 --version\n```\n\n### Arch Linux\n\n```bash\n# Install wso2\nsudo pacman -S wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Verify installation\nwso2 --version\n```\n\n### Alpine Linux\n\n```bash\n# Install wso2\napk add --no-cache wso2\n\n# Enable and start service\nrc-update add wso2 default\nrc-service wso2 start\n\n# Verify installation\nwso2 --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install wso2\nsudo zypper install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwso2 --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install wso2\n\n# Start service\nbrew services start wso2\n\n# Verify installation\nwso2 --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install wso2\n\n# Enable in rc.conf\necho 'wso2_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice wso2 start\n\n# Verify installation\nwso2 --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install wso2\n\n# Or using Scoop\nscoop install wso2\n\n# Verify installation\nwso2 --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/wso2\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nwso2 --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable wso2\n\n# Start service\nsudo systemctl start wso2\n\n# Stop service\nsudo systemctl stop wso2\n\n# Restart service\nsudo systemctl restart wso2\n\n# Check status\nsudo systemctl status wso2\n\n# View logs\nsudo journalctl -u wso2 -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add wso2 default\n\n# Start service\nrc-service wso2 start\n\n# Stop service\nrc-service wso2 stop\n\n# Restart service\nrc-service wso2 restart\n\n# Check status\nrc-service wso2 status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'wso2_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice wso2 start\n\n# Stop service\nservice wso2 stop\n\n# Restart service\nservice wso2 restart\n\n# Check status\nservice wso2 status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start wso2\nbrew services stop wso2\nbrew services restart wso2\n\n# Check status\nbrew services list | grep wso2\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start wso2\n\n# Stop service\nnet stop wso2\n\n# Using PowerShell\nStart-Service wso2\nStop-Service wso2\nRestart-Service wso2\n\n# Check status\nGet-Service wso2\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream wso2_backend {\n    server 127.0.0.1:9443;\n}\n\nserver {\n    listen 80;\n    server_name wso2.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name wso2.example.com;\n\n    ssl_certificate /etc/ssl/certs/wso2.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/wso2.example.com.key;\n\n    location / {\n        proxy_pass http://wso2_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName wso2.example.com\n    Redirect permanent / https://wso2.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName wso2.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/wso2.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/wso2.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9443/\n    ProxyPassReverse / http://127.0.0.1:9443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend wso2_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/wso2.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend wso2_backend\n\nbackend wso2_backend\n    balance roundrobin\n    server wso21 127.0.0.1:9443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R wso2:wso2 /etc/wso2\nsudo chmod 750 /etc/wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status wso2\n\n# View logs\nsudo journalctl -u wso2 -f\n\n# Monitor resource usage\ntop -p $(pgrep wso2)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/wso2\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/wso2-backup-$DATE.tar.gz\" /etc/wso2 /var/lib/wso2\n\necho \"Backup completed: $BACKUP_DIR/wso2-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop wso2\n\n# Restore from backup\ntar -xzf /backup/wso2/wso2-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start wso2\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u wso2 -n 100\nsudo tail -f /var/log/wso2/wso2.log\n\n# Check configuration\nwso2 --version\n\n# Check permissions\nls -la /etc/wso2\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9443\n\n# Test connectivity\ntelnet localhost 9443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep wso2)\n\n# Check disk I/O\niotop -p $(pgrep wso2)\n\n# Check connections\nss -an | grep 9443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  wso2:\n    image: wso2:latest\n    ports:\n      - \"9443:9443\"\n    volumes:\n      - ./config:/etc/wso2\n      - ./data:/var/lib/wso2\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update wso2\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade wso2\n\n# Arch Linux\nsudo pacman -Syu wso2\n\n# Alpine Linux\napk update && apk upgrade wso2\n\n# openSUSE\nsudo zypper update wso2\n\n# FreeBSD\npkg update && pkg upgrade wso2\n\n# Always backup before updates\ntar -czf /backup/wso2-pre-update-$(date +%Y%m%d).tar.gz /etc/wso2\n\n# Restart after updates\nsudo systemctl restart wso2\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/wso2\n\n# Clean old logs\nfind /var/log/wso2 -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/wso2\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.wso2.org/\n- GitHub Repository: https://github.com/wso2/wso2\n- Community Forum: https://forum.wso2.org/\n- Best Practices Guide: https://docs.wso2.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">wso2 is a free and open-source API management platform. WSO2 provides complete open source API management platform</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9443 (default wso2 port)</li>\n<li class=\"mobile-list-item\">Various service ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install wso2\nsudo dnf install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install wso2\nsudo apt install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo ufw allow 9443\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wso2\nsudo pacman -S wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wso2\napk add --no-cache wso2\n\n# Enable and start service\nrc-update add wso2 default\nrc-service wso2 start\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install wso2\nsudo zypper install -y wso2\n\n# Enable and start service\nsudo systemctl enable --now wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install wso2\n\n# Start service\nbrew services start wso2\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install wso2\n\n# Enable in rc.conf\necho &#039;wso2_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice wso2 start\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install wso2\n\n# Or using Scoop\nscoop install wso2\n\n# Verify installation\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/wso2\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nwso2 --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable wso2\n\n# Start service\nsudo systemctl start wso2\n\n# Stop service\nsudo systemctl stop wso2\n\n# Restart service\nsudo systemctl restart wso2\n\n# Check status\nsudo systemctl status wso2\n\n# View logs\nsudo journalctl -u wso2 -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add wso2 default\n\n# Start service\nrc-service wso2 start\n\n# Stop service\nrc-service wso2 stop\n\n# Restart service\nrc-service wso2 restart\n\n# Check status\nrc-service wso2 status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;wso2_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice wso2 start\n\n# Stop service\nservice wso2 stop\n\n# Restart service\nservice wso2 restart\n\n# Check status\nservice wso2 status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start wso2\nbrew services stop wso2\nbrew services restart wso2\n\n# Check status\nbrew services list | grep wso2</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start wso2\n\n# Stop service\nnet stop wso2\n\n# Using PowerShell\nStart-Service wso2\nStop-Service wso2\nRestart-Service wso2\n\n# Check status\nGet-Service wso2</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream wso2_backend {\n    server 127.0.0.1:9443;\n}\n\nserver {\n    listen 80;\n    server_name wso2.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name wso2.example.com;\n\n    ssl_certificate /etc/ssl/certs/wso2.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/wso2.example.com.key;\n\n    location / {\n        proxy_pass http://wso2_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName wso2.example.com\n    Redirect permanent / https://wso2.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName wso2.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/wso2.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/wso2.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9443/\n    ProxyPassReverse / http://127.0.0.1:9443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend wso2_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/wso2.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend wso2_backend\n\nbackend wso2_backend\n    balance roundrobin\n    server wso21 127.0.0.1:9443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R wso2:wso2 /etc/wso2\nsudo chmod 750 /etc/wso2\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status wso2\n\n# View logs\nsudo journalctl -u wso2 -f\n\n# Monitor resource usage\ntop -p $(pgrep wso2)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/wso2&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/wso2-backup-$DATE.tar.gz&quot; /etc/wso2 /var/lib/wso2\n\necho &quot;Backup completed: $BACKUP_DIR/wso2-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop wso2\n\n# Restore from backup\ntar -xzf /backup/wso2/wso2-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start wso2</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u wso2 -n 100\nsudo tail -f /var/log/wso2/wso2.log\n\n# Check configuration\nwso2 --version\n\n# Check permissions\nls -la /etc/wso2</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9443\n\n# Test connectivity\ntelnet localhost 9443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep wso2)\n\n# Check disk I/O\niotop -p $(pgrep wso2)\n\n# Check connections\nss -an | grep 9443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  wso2:\n    image: wso2:latest\n    ports:\n      - &quot;9443:9443&quot;\n    volumes:\n      - ./config:/etc/wso2\n      - ./data:/var/lib/wso2\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update wso2\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade wso2\n\n# Arch Linux\nsudo pacman -Syu wso2\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade wso2\n\n# openSUSE\nsudo zypper update wso2\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade wso2\n\n# Always backup before updates\ntar -czf /backup/wso2-pre-update-$(date +%Y%m%d).tar.gz /etc/wso2\n\n# Restart after updates\nsudo systemctl restart wso2</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/wso2\n\n# Clean old logs\nfind /var/log/wso2 -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/wso2</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.wso2.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/wso2/wso2</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.wso2.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.wso2.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1269,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:10.548Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "x2go",
      "displayName": "x2go Installation Guide",
      "slug": "x2go",
      "description": "x2go is a free and open-source remote desktop. X2Go provides remote desktop solution for Linux",
      "category": "remote-access",
      "subcategory": "remote-access",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        22,
        80,
        443
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "remote-access",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/remote-access/x2go",
      "documentationUrl": "https://howtomgr.github.io/remote-access/x2go",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/x2go",
      "updatedAt": "2025-09-16T18:03:46Z",
      "createdAt": "2025-09-16T08:42:02Z",
      "readmeRaw": "# x2go Installation Guide\n\nx2go is a free and open-source remote desktop. X2Go provides remote desktop solution for Linux\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 1GB minimum\n  - Storage: 1GB for sessions\n  - Network: NX protocol\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 22 (default x2go port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install x2go\nsudo dnf install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nx2go --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install x2go\nsudo apt install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo ufw allow 22\n\n# Verify installation\nx2go --version\n```\n\n### Arch Linux\n\n```bash\n# Install x2go\nsudo pacman -S x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Verify installation\nx2go --version\n```\n\n### Alpine Linux\n\n```bash\n# Install x2go\napk add --no-cache x2go\n\n# Enable and start service\nrc-update add x2go default\nrc-service x2go start\n\n# Verify installation\nx2go --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install x2go\nsudo zypper install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nx2go --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install x2go\n\n# Start service\nbrew services start x2go\n\n# Verify installation\nx2go --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install x2go\n\n# Enable in rc.conf\necho 'x2go_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice x2go start\n\n# Verify installation\nx2go --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install x2go\n\n# Or using Scoop\nscoop install x2go\n\n# Verify installation\nx2go --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/x2go\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nx2go --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable x2go\n\n# Start service\nsudo systemctl start x2go\n\n# Stop service\nsudo systemctl stop x2go\n\n# Restart service\nsudo systemctl restart x2go\n\n# Check status\nsudo systemctl status x2go\n\n# View logs\nsudo journalctl -u x2go -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add x2go default\n\n# Start service\nrc-service x2go start\n\n# Stop service\nrc-service x2go stop\n\n# Restart service\nrc-service x2go restart\n\n# Check status\nrc-service x2go status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'x2go_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice x2go start\n\n# Stop service\nservice x2go stop\n\n# Restart service\nservice x2go restart\n\n# Check status\nservice x2go status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start x2go\nbrew services stop x2go\nbrew services restart x2go\n\n# Check status\nbrew services list | grep x2go\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start x2go\n\n# Stop service\nnet stop x2go\n\n# Using PowerShell\nStart-Service x2go\nStop-Service x2go\nRestart-Service x2go\n\n# Check status\nGet-Service x2go\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream x2go_backend {\n    server 127.0.0.1:22;\n}\n\nserver {\n    listen 80;\n    server_name x2go.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name x2go.example.com;\n\n    ssl_certificate /etc/ssl/certs/x2go.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/x2go.example.com.key;\n\n    location / {\n        proxy_pass http://x2go_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName x2go.example.com\n    Redirect permanent / https://x2go.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName x2go.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/x2go.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/x2go.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:22/\n    ProxyPassReverse / http://127.0.0.1:22/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend x2go_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/x2go.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend x2go_backend\n\nbackend x2go_backend\n    balance roundrobin\n    server x2go1 127.0.0.1:22 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R x2go:x2go /etc/x2go\nsudo chmod 750 /etc/x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status x2go\n\n# View logs\nsudo journalctl -u x2go -f\n\n# Monitor resource usage\ntop -p $(pgrep x2go)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/x2go\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/x2go-backup-$DATE.tar.gz\" /etc/x2go /var/lib/x2go\n\necho \"Backup completed: $BACKUP_DIR/x2go-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop x2go\n\n# Restore from backup\ntar -xzf /backup/x2go/x2go-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start x2go\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u x2go -n 100\nsudo tail -f /var/log/x2go/x2go.log\n\n# Check configuration\nx2go --version\n\n# Check permissions\nls -la /etc/x2go\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 22\n\n# Test connectivity\ntelnet localhost 22\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep x2go)\n\n# Check disk I/O\niotop -p $(pgrep x2go)\n\n# Check connections\nss -an | grep 22\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  x2go:\n    image: x2go:latest\n    ports:\n      - \"22:22\"\n    volumes:\n      - ./config:/etc/x2go\n      - ./data:/var/lib/x2go\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update x2go\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade x2go\n\n# Arch Linux\nsudo pacman -Syu x2go\n\n# Alpine Linux\napk update && apk upgrade x2go\n\n# openSUSE\nsudo zypper update x2go\n\n# FreeBSD\npkg update && pkg upgrade x2go\n\n# Always backup before updates\ntar -czf /backup/x2go-pre-update-$(date +%Y%m%d).tar.gz /etc/x2go\n\n# Restart after updates\nsudo systemctl restart x2go\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/x2go\n\n# Clean old logs\nfind /var/log/x2go -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/x2go\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.x2go.org/\n- GitHub Repository: https://github.com/x2go/x2go\n- Community Forum: https://forum.x2go.org/\n- Best Practices Guide: https://docs.x2go.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">x2go is a free and open-source remote desktop. X2Go provides remote desktop solution for Linux</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for sessions</li>\n<li class=\"mobile-list-item\">Network: NX protocol</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 22 (default x2go port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install x2go\nsudo dnf install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install x2go\nsudo apt install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo ufw allow 22\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install x2go\nsudo pacman -S x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install x2go\napk add --no-cache x2go\n\n# Enable and start service\nrc-update add x2go default\nrc-service x2go start\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install x2go\nsudo zypper install -y x2go\n\n# Enable and start service\nsudo systemctl enable --now x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install x2go\n\n# Start service\nbrew services start x2go\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install x2go\n\n# Enable in rc.conf\necho &#039;x2go_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice x2go start\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install x2go\n\n# Or using Scoop\nscoop install x2go\n\n# Verify installation\nx2go --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/x2go\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nx2go --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable x2go\n\n# Start service\nsudo systemctl start x2go\n\n# Stop service\nsudo systemctl stop x2go\n\n# Restart service\nsudo systemctl restart x2go\n\n# Check status\nsudo systemctl status x2go\n\n# View logs\nsudo journalctl -u x2go -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add x2go default\n\n# Start service\nrc-service x2go start\n\n# Stop service\nrc-service x2go stop\n\n# Restart service\nrc-service x2go restart\n\n# Check status\nrc-service x2go status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;x2go_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice x2go start\n\n# Stop service\nservice x2go stop\n\n# Restart service\nservice x2go restart\n\n# Check status\nservice x2go status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start x2go\nbrew services stop x2go\nbrew services restart x2go\n\n# Check status\nbrew services list | grep x2go</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start x2go\n\n# Stop service\nnet stop x2go\n\n# Using PowerShell\nStart-Service x2go\nStop-Service x2go\nRestart-Service x2go\n\n# Check status\nGet-Service x2go</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream x2go_backend {\n    server 127.0.0.1:22;\n}\n\nserver {\n    listen 80;\n    server_name x2go.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name x2go.example.com;\n\n    ssl_certificate /etc/ssl/certs/x2go.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/x2go.example.com.key;\n\n    location / {\n        proxy_pass http://x2go_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName x2go.example.com\n    Redirect permanent / https://x2go.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName x2go.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/x2go.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/x2go.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:22/\n    ProxyPassReverse / http://127.0.0.1:22/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend x2go_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/x2go.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend x2go_backend\n\nbackend x2go_backend\n    balance roundrobin\n    server x2go1 127.0.0.1:22 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R x2go:x2go /etc/x2go\nsudo chmod 750 /etc/x2go\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=22/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status x2go\n\n# View logs\nsudo journalctl -u x2go -f\n\n# Monitor resource usage\ntop -p $(pgrep x2go)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/x2go&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/x2go-backup-$DATE.tar.gz&quot; /etc/x2go /var/lib/x2go\n\necho &quot;Backup completed: $BACKUP_DIR/x2go-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop x2go\n\n# Restore from backup\ntar -xzf /backup/x2go/x2go-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start x2go</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u x2go -n 100\nsudo tail -f /var/log/x2go/x2go.log\n\n# Check configuration\nx2go --version\n\n# Check permissions\nls -la /etc/x2go</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 22\n\n# Test connectivity\ntelnet localhost 22\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep x2go)\n\n# Check disk I/O\niotop -p $(pgrep x2go)\n\n# Check connections\nss -an | grep 22</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  x2go:\n    image: x2go:latest\n    ports:\n      - &quot;22:22&quot;\n    volumes:\n      - ./config:/etc/x2go\n      - ./data:/var/lib/x2go\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update x2go\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade x2go\n\n# Arch Linux\nsudo pacman -Syu x2go\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade x2go\n\n# openSUSE\nsudo zypper update x2go\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade x2go\n\n# Always backup before updates\ntar -czf /backup/x2go-pre-update-$(date +%Y%m%d).tar.gz /etc/x2go\n\n# Restart after updates\nsudo systemctl restart x2go</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/x2go\n\n# Clean old logs\nfind /var/log/x2go -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/x2go</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.x2go.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/x2go/x2go</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.x2go.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.x2go.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1267,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:10.310Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "xcp-ng",
      "displayName": "xcp-ng Installation Guide",
      "slug": "xcp-ng",
      "description": "xcp-ng is a free and open-source XenServer alternative. XCP-ng provides enterprise virtualization based on XenServer, fully open source",
      "category": "miscellaneous",
      "subcategory": "miscellaneous",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "miscellaneous",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/miscellaneous/xcp-ng",
      "documentationUrl": "https://howtomgr.github.io/miscellaneous/xcp-ng",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/xcp-ng",
      "updatedAt": "2025-09-16T18:03:52Z",
      "createdAt": "2025-09-16T08:42:17Z",
      "readmeRaw": "# xcp-ng Installation Guide\n\nxcp-ng is a free and open-source XenServer alternative. XCP-ng provides enterprise virtualization based on XenServer, fully open source\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores\n  - RAM: 8GB minimum\n  - Storage: 46GB for dom0\n  - Network: Management network\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443 (default xcp-ng port)\n  - Various Xen ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xcp-ng\nsudo dnf install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxcp-ng --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install xcp-ng\nsudo apt install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nxcp-ng --version\n```\n\n### Arch Linux\n\n```bash\n# Install xcp-ng\nsudo pacman -S xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Verify installation\nxcp-ng --version\n```\n\n### Alpine Linux\n\n```bash\n# Install xcp-ng\napk add --no-cache xcp-ng\n\n# Enable and start service\nrc-update add xcp-ng default\nrc-service xcp-ng start\n\n# Verify installation\nxcp-ng --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install xcp-ng\nsudo zypper install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxcp-ng --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install xcp-ng\n\n# Start service\nbrew services start xcp-ng\n\n# Verify installation\nxcp-ng --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install xcp-ng\n\n# Enable in rc.conf\necho 'xcp-ng_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xcp-ng start\n\n# Verify installation\nxcp-ng --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install xcp-ng\n\n# Or using Scoop\nscoop install xcp-ng\n\n# Verify installation\nxcp-ng --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/xcp-ng\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxcp-ng --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable xcp-ng\n\n# Start service\nsudo systemctl start xcp-ng\n\n# Stop service\nsudo systemctl stop xcp-ng\n\n# Restart service\nsudo systemctl restart xcp-ng\n\n# Check status\nsudo systemctl status xcp-ng\n\n# View logs\nsudo journalctl -u xcp-ng -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add xcp-ng default\n\n# Start service\nrc-service xcp-ng start\n\n# Stop service\nrc-service xcp-ng stop\n\n# Restart service\nrc-service xcp-ng restart\n\n# Check status\nrc-service xcp-ng status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'xcp-ng_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xcp-ng start\n\n# Stop service\nservice xcp-ng stop\n\n# Restart service\nservice xcp-ng restart\n\n# Check status\nservice xcp-ng status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start xcp-ng\nbrew services stop xcp-ng\nbrew services restart xcp-ng\n\n# Check status\nbrew services list | grep xcp-ng\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start xcp-ng\n\n# Stop service\nnet stop xcp-ng\n\n# Using PowerShell\nStart-Service xcp-ng\nStop-Service xcp-ng\nRestart-Service xcp-ng\n\n# Check status\nGet-Service xcp-ng\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream xcp-ng_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name xcp-ng.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xcp-ng.example.com;\n\n    ssl_certificate /etc/ssl/certs/xcp-ng.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xcp-ng.example.com.key;\n\n    location / {\n        proxy_pass http://xcp-ng_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName xcp-ng.example.com\n    Redirect permanent / https://xcp-ng.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName xcp-ng.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xcp-ng.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xcp-ng.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend xcp-ng_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xcp-ng.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xcp-ng_backend\n\nbackend xcp-ng_backend\n    balance roundrobin\n    server xcp-ng1 127.0.0.1:443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R xcp-ng:xcp-ng /etc/xcp-ng\nsudo chmod 750 /etc/xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status xcp-ng\n\n# View logs\nsudo journalctl -u xcp-ng -f\n\n# Monitor resource usage\ntop -p $(pgrep xcp-ng)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/xcp-ng\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/xcp-ng-backup-$DATE.tar.gz\" /etc/xcp-ng /var/lib/xcp-ng\n\necho \"Backup completed: $BACKUP_DIR/xcp-ng-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop xcp-ng\n\n# Restore from backup\ntar -xzf /backup/xcp-ng/xcp-ng-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xcp-ng\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u xcp-ng -n 100\nsudo tail -f /var/log/xcp-ng/xcp-ng.log\n\n# Check configuration\nxcp-ng --version\n\n# Check permissions\nls -la /etc/xcp-ng\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep xcp-ng)\n\n# Check disk I/O\niotop -p $(pgrep xcp-ng)\n\n# Check connections\nss -an | grep 443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  xcp-ng:\n    image: xcp-ng:latest\n    ports:\n      - \"443:443\"\n    volumes:\n      - ./config:/etc/xcp-ng\n      - ./data:/var/lib/xcp-ng\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xcp-ng\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade xcp-ng\n\n# Arch Linux\nsudo pacman -Syu xcp-ng\n\n# Alpine Linux\napk update && apk upgrade xcp-ng\n\n# openSUSE\nsudo zypper update xcp-ng\n\n# FreeBSD\npkg update && pkg upgrade xcp-ng\n\n# Always backup before updates\ntar -czf /backup/xcp-ng-pre-update-$(date +%Y%m%d).tar.gz /etc/xcp-ng\n\n# Restart after updates\nsudo systemctl restart xcp-ng\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/xcp-ng\n\n# Clean old logs\nfind /var/log/xcp-ng -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xcp-ng\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.xcp-ng.org/\n- GitHub Repository: https://github.com/xcp-ng/xcp-ng\n- Community Forum: https://forum.xcp-ng.org/\n- Best Practices Guide: https://docs.xcp-ng.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">xcp-ng is a free and open-source XenServer alternative. XCP-ng provides enterprise virtualization based on XenServer, fully open source</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores</li>\n<li class=\"mobile-list-item\">RAM: 8GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 46GB for dom0</li>\n<li class=\"mobile-list-item\">Network: Management network</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443 (default xcp-ng port)</li>\n<li class=\"mobile-list-item\">Various Xen ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xcp-ng\nsudo dnf install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install xcp-ng\nsudo apt install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xcp-ng\nsudo pacman -S xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xcp-ng\napk add --no-cache xcp-ng\n\n# Enable and start service\nrc-update add xcp-ng default\nrc-service xcp-ng start\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xcp-ng\nsudo zypper install -y xcp-ng\n\n# Enable and start service\nsudo systemctl enable --now xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install xcp-ng\n\n# Start service\nbrew services start xcp-ng\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install xcp-ng\n\n# Enable in rc.conf\necho &#039;xcp-ng_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xcp-ng start\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install xcp-ng\n\n# Or using Scoop\nscoop install xcp-ng\n\n# Verify installation\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/xcp-ng\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxcp-ng --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable xcp-ng\n\n# Start service\nsudo systemctl start xcp-ng\n\n# Stop service\nsudo systemctl stop xcp-ng\n\n# Restart service\nsudo systemctl restart xcp-ng\n\n# Check status\nsudo systemctl status xcp-ng\n\n# View logs\nsudo journalctl -u xcp-ng -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add xcp-ng default\n\n# Start service\nrc-service xcp-ng start\n\n# Stop service\nrc-service xcp-ng stop\n\n# Restart service\nrc-service xcp-ng restart\n\n# Check status\nrc-service xcp-ng status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;xcp-ng_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xcp-ng start\n\n# Stop service\nservice xcp-ng stop\n\n# Restart service\nservice xcp-ng restart\n\n# Check status\nservice xcp-ng status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start xcp-ng\nbrew services stop xcp-ng\nbrew services restart xcp-ng\n\n# Check status\nbrew services list | grep xcp-ng</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start xcp-ng\n\n# Stop service\nnet stop xcp-ng\n\n# Using PowerShell\nStart-Service xcp-ng\nStop-Service xcp-ng\nRestart-Service xcp-ng\n\n# Check status\nGet-Service xcp-ng</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream xcp-ng_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name xcp-ng.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xcp-ng.example.com;\n\n    ssl_certificate /etc/ssl/certs/xcp-ng.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xcp-ng.example.com.key;\n\n    location / {\n        proxy_pass http://xcp-ng_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName xcp-ng.example.com\n    Redirect permanent / https://xcp-ng.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName xcp-ng.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xcp-ng.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xcp-ng.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend xcp-ng_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xcp-ng.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xcp-ng_backend\n\nbackend xcp-ng_backend\n    balance roundrobin\n    server xcp-ng1 127.0.0.1:443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R xcp-ng:xcp-ng /etc/xcp-ng\nsudo chmod 750 /etc/xcp-ng\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status xcp-ng\n\n# View logs\nsudo journalctl -u xcp-ng -f\n\n# Monitor resource usage\ntop -p $(pgrep xcp-ng)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/xcp-ng&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/xcp-ng-backup-$DATE.tar.gz&quot; /etc/xcp-ng /var/lib/xcp-ng\n\necho &quot;Backup completed: $BACKUP_DIR/xcp-ng-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop xcp-ng\n\n# Restore from backup\ntar -xzf /backup/xcp-ng/xcp-ng-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xcp-ng</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u xcp-ng -n 100\nsudo tail -f /var/log/xcp-ng/xcp-ng.log\n\n# Check configuration\nxcp-ng --version\n\n# Check permissions\nls -la /etc/xcp-ng</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep xcp-ng)\n\n# Check disk I/O\niotop -p $(pgrep xcp-ng)\n\n# Check connections\nss -an | grep 443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  xcp-ng:\n    image: xcp-ng:latest\n    ports:\n      - &quot;443:443&quot;\n    volumes:\n      - ./config:/etc/xcp-ng\n      - ./data:/var/lib/xcp-ng\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xcp-ng\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade xcp-ng\n\n# Arch Linux\nsudo pacman -Syu xcp-ng\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade xcp-ng\n\n# openSUSE\nsudo zypper update xcp-ng\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade xcp-ng\n\n# Always backup before updates\ntar -czf /backup/xcp-ng-pre-update-$(date +%Y%m%d).tar.gz /etc/xcp-ng\n\n# Restart after updates\nsudo systemctl restart xcp-ng</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/xcp-ng\n\n# Clean old logs\nfind /var/log/xcp-ng -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xcp-ng</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.xcp-ng.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/xcp-ng/xcp-ng</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.xcp-ng.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.xcp-ng.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1271,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:10.057Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "xen-orchestra",
      "displayName": "xen-orchestra - CentOS",
      "slug": "xen-orchestra",
      "description": "```bash",
      "category": "miscellaneous",
      "subcategory": "miscellaneous",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "miscellaneous"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/miscellaneous/xen-orchestra",
      "documentationUrl": "https://howtomgr.github.io/miscellaneous/xen-orchestra",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/xen-orchestra",
      "updatedAt": "2025-09-16T18:04:00Z",
      "createdAt": "2023-08-28T03:50:35Z",
      "readmeRaw": "# xen-orchestra - CentOS\n\n```bash\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall 'Development Tools'\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## xen-orchestra - Debian\n\n```bash\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## xen-orchestra - Updating\n\n```bash\ncd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build\n```\n",
      "readmeHtml": "<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall &#039;Development Tools&#039;\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-debian\" class=\"mobile-header\">xen-orchestra - Debian</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-updating\" class=\"mobile-header\">xen-orchestra - Updating</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build</code></pre>\n      </div>\n    </div>",
      "readTime": "1 min",
      "wordCount": 197,
      "tableOfContents": [
        {
          "level": 2,
          "text": "xen-orchestra - Debian",
          "id": "xen-orchestra-debian"
        },
        {
          "level": 2,
          "text": "xen-orchestra - Updating",
          "id": "xen-orchestra-updating"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:09.807Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "xrdp",
      "displayName": "xrdp Installation Guide",
      "slug": "xrdp",
      "description": "xrdp is a free and open-source RDP server. xrdp provides open source RDP server for Linux",
      "category": "remote-access",
      "subcategory": "remote-access",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443,
        3389
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "remote-access",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/remote-access/xrdp",
      "documentationUrl": "https://howtomgr.github.io/remote-access/xrdp",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/xrdp",
      "updatedAt": "2025-09-16T18:04:07Z",
      "createdAt": "2025-09-16T08:42:39Z",
      "readmeRaw": "# xrdp Installation Guide\n\nxrdp is a free and open-source RDP server. xrdp provides open source RDP server for Linux\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 1GB minimum\n  - Storage: 1GB for sessions\n  - Network: RDP protocol\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 3389 (default xrdp port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xrdp\nsudo dnf install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxrdp --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install xrdp\nsudo apt install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo ufw allow 3389\n\n# Verify installation\nxrdp --version\n```\n\n### Arch Linux\n\n```bash\n# Install xrdp\nsudo pacman -S xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Verify installation\nxrdp --version\n```\n\n### Alpine Linux\n\n```bash\n# Install xrdp\napk add --no-cache xrdp\n\n# Enable and start service\nrc-update add xrdp default\nrc-service xrdp start\n\n# Verify installation\nxrdp --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install xrdp\nsudo zypper install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxrdp --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install xrdp\n\n# Start service\nbrew services start xrdp\n\n# Verify installation\nxrdp --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install xrdp\n\n# Enable in rc.conf\necho 'xrdp_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xrdp start\n\n# Verify installation\nxrdp --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install xrdp\n\n# Or using Scoop\nscoop install xrdp\n\n# Verify installation\nxrdp --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/xrdp\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxrdp --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable xrdp\n\n# Start service\nsudo systemctl start xrdp\n\n# Stop service\nsudo systemctl stop xrdp\n\n# Restart service\nsudo systemctl restart xrdp\n\n# Check status\nsudo systemctl status xrdp\n\n# View logs\nsudo journalctl -u xrdp -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add xrdp default\n\n# Start service\nrc-service xrdp start\n\n# Stop service\nrc-service xrdp stop\n\n# Restart service\nrc-service xrdp restart\n\n# Check status\nrc-service xrdp status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'xrdp_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xrdp start\n\n# Stop service\nservice xrdp stop\n\n# Restart service\nservice xrdp restart\n\n# Check status\nservice xrdp status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start xrdp\nbrew services stop xrdp\nbrew services restart xrdp\n\n# Check status\nbrew services list | grep xrdp\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start xrdp\n\n# Stop service\nnet stop xrdp\n\n# Using PowerShell\nStart-Service xrdp\nStop-Service xrdp\nRestart-Service xrdp\n\n# Check status\nGet-Service xrdp\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream xrdp_backend {\n    server 127.0.0.1:3389;\n}\n\nserver {\n    listen 80;\n    server_name xrdp.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xrdp.example.com;\n\n    ssl_certificate /etc/ssl/certs/xrdp.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xrdp.example.com.key;\n\n    location / {\n        proxy_pass http://xrdp_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName xrdp.example.com\n    Redirect permanent / https://xrdp.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName xrdp.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xrdp.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xrdp.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3389/\n    ProxyPassReverse / http://127.0.0.1:3389/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend xrdp_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xrdp.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xrdp_backend\n\nbackend xrdp_backend\n    balance roundrobin\n    server xrdp1 127.0.0.1:3389 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R xrdp:xrdp /etc/xrdp\nsudo chmod 750 /etc/xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status xrdp\n\n# View logs\nsudo journalctl -u xrdp -f\n\n# Monitor resource usage\ntop -p $(pgrep xrdp)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/xrdp\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/xrdp-backup-$DATE.tar.gz\" /etc/xrdp /var/lib/xrdp\n\necho \"Backup completed: $BACKUP_DIR/xrdp-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop xrdp\n\n# Restore from backup\ntar -xzf /backup/xrdp/xrdp-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xrdp\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u xrdp -n 100\nsudo tail -f /var/log/xrdp/xrdp.log\n\n# Check configuration\nxrdp --version\n\n# Check permissions\nls -la /etc/xrdp\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 3389\n\n# Test connectivity\ntelnet localhost 3389\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep xrdp)\n\n# Check disk I/O\niotop -p $(pgrep xrdp)\n\n# Check connections\nss -an | grep 3389\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  xrdp:\n    image: xrdp:latest\n    ports:\n      - \"3389:3389\"\n    volumes:\n      - ./config:/etc/xrdp\n      - ./data:/var/lib/xrdp\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xrdp\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade xrdp\n\n# Arch Linux\nsudo pacman -Syu xrdp\n\n# Alpine Linux\napk update && apk upgrade xrdp\n\n# openSUSE\nsudo zypper update xrdp\n\n# FreeBSD\npkg update && pkg upgrade xrdp\n\n# Always backup before updates\ntar -czf /backup/xrdp-pre-update-$(date +%Y%m%d).tar.gz /etc/xrdp\n\n# Restart after updates\nsudo systemctl restart xrdp\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/xrdp\n\n# Clean old logs\nfind /var/log/xrdp -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xrdp\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.xrdp.org/\n- GitHub Repository: https://github.com/xrdp/xrdp\n- Community Forum: https://forum.xrdp.org/\n- Best Practices Guide: https://docs.xrdp.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">xrdp is a free and open-source RDP server. xrdp provides open source RDP server for Linux</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for sessions</li>\n<li class=\"mobile-list-item\">Network: RDP protocol</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3389 (default xrdp port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xrdp\nsudo dnf install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install xrdp\nsudo apt install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo ufw allow 3389\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xrdp\nsudo pacman -S xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xrdp\napk add --no-cache xrdp\n\n# Enable and start service\nrc-update add xrdp default\nrc-service xrdp start\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xrdp\nsudo zypper install -y xrdp\n\n# Enable and start service\nsudo systemctl enable --now xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install xrdp\n\n# Start service\nbrew services start xrdp\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install xrdp\n\n# Enable in rc.conf\necho &#039;xrdp_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xrdp start\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install xrdp\n\n# Or using Scoop\nscoop install xrdp\n\n# Verify installation\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/xrdp\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxrdp --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable xrdp\n\n# Start service\nsudo systemctl start xrdp\n\n# Stop service\nsudo systemctl stop xrdp\n\n# Restart service\nsudo systemctl restart xrdp\n\n# Check status\nsudo systemctl status xrdp\n\n# View logs\nsudo journalctl -u xrdp -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add xrdp default\n\n# Start service\nrc-service xrdp start\n\n# Stop service\nrc-service xrdp stop\n\n# Restart service\nrc-service xrdp restart\n\n# Check status\nrc-service xrdp status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;xrdp_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xrdp start\n\n# Stop service\nservice xrdp stop\n\n# Restart service\nservice xrdp restart\n\n# Check status\nservice xrdp status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start xrdp\nbrew services stop xrdp\nbrew services restart xrdp\n\n# Check status\nbrew services list | grep xrdp</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start xrdp\n\n# Stop service\nnet stop xrdp\n\n# Using PowerShell\nStart-Service xrdp\nStop-Service xrdp\nRestart-Service xrdp\n\n# Check status\nGet-Service xrdp</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream xrdp_backend {\n    server 127.0.0.1:3389;\n}\n\nserver {\n    listen 80;\n    server_name xrdp.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xrdp.example.com;\n\n    ssl_certificate /etc/ssl/certs/xrdp.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xrdp.example.com.key;\n\n    location / {\n        proxy_pass http://xrdp_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName xrdp.example.com\n    Redirect permanent / https://xrdp.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName xrdp.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xrdp.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xrdp.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:3389/\n    ProxyPassReverse / http://127.0.0.1:3389/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend xrdp_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xrdp.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xrdp_backend\n\nbackend xrdp_backend\n    balance roundrobin\n    server xrdp1 127.0.0.1:3389 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R xrdp:xrdp /etc/xrdp\nsudo chmod 750 /etc/xrdp\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3389/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status xrdp\n\n# View logs\nsudo journalctl -u xrdp -f\n\n# Monitor resource usage\ntop -p $(pgrep xrdp)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/xrdp&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/xrdp-backup-$DATE.tar.gz&quot; /etc/xrdp /var/lib/xrdp\n\necho &quot;Backup completed: $BACKUP_DIR/xrdp-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop xrdp\n\n# Restore from backup\ntar -xzf /backup/xrdp/xrdp-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xrdp</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u xrdp -n 100\nsudo tail -f /var/log/xrdp/xrdp.log\n\n# Check configuration\nxrdp --version\n\n# Check permissions\nls -la /etc/xrdp</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 3389\n\n# Test connectivity\ntelnet localhost 3389\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep xrdp)\n\n# Check disk I/O\niotop -p $(pgrep xrdp)\n\n# Check connections\nss -an | grep 3389</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  xrdp:\n    image: xrdp:latest\n    ports:\n      - &quot;3389:3389&quot;\n    volumes:\n      - ./config:/etc/xrdp\n      - ./data:/var/lib/xrdp\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xrdp\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade xrdp\n\n# Arch Linux\nsudo pacman -Syu xrdp\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade xrdp\n\n# openSUSE\nsudo zypper update xrdp\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade xrdp\n\n# Always backup before updates\ntar -czf /backup/xrdp-pre-update-$(date +%Y%m%d).tar.gz /etc/xrdp\n\n# Restart after updates\nsudo systemctl restart xrdp</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/xrdp\n\n# Clean old logs\nfind /var/log/xrdp -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xrdp</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.xrdp.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/xrdp/xrdp</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.xrdp.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.xrdp.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1268,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:09.553Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "xwiki",
      "displayName": "xwiki Installation Guide",
      "slug": "xwiki",
      "description": "xwiki is a free and open-source enterprise wiki. XWiki provides powerful wiki platform with application development capabilities",
      "category": "miscellaneous",
      "subcategory": "miscellaneous",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443,
        8080
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "miscellaneous",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/miscellaneous/xwiki",
      "documentationUrl": "https://howtomgr.github.io/miscellaneous/xwiki",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/xwiki",
      "updatedAt": "2025-09-16T18:04:14Z",
      "createdAt": "2025-09-16T08:42:53Z",
      "readmeRaw": "# xwiki Installation Guide\n\nxwiki is a free and open-source enterprise wiki. XWiki provides powerful wiki platform with application development capabilities\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 5GB for data\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default xwiki port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xwiki\nsudo dnf install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxwiki --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install xwiki\nsudo apt install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nxwiki --version\n```\n\n### Arch Linux\n\n```bash\n# Install xwiki\nsudo pacman -S xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Verify installation\nxwiki --version\n```\n\n### Alpine Linux\n\n```bash\n# Install xwiki\napk add --no-cache xwiki\n\n# Enable and start service\nrc-update add xwiki default\nrc-service xwiki start\n\n# Verify installation\nxwiki --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install xwiki\nsudo zypper install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxwiki --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install xwiki\n\n# Start service\nbrew services start xwiki\n\n# Verify installation\nxwiki --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install xwiki\n\n# Enable in rc.conf\necho 'xwiki_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xwiki start\n\n# Verify installation\nxwiki --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install xwiki\n\n# Or using Scoop\nscoop install xwiki\n\n# Verify installation\nxwiki --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/xwiki\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxwiki --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable xwiki\n\n# Start service\nsudo systemctl start xwiki\n\n# Stop service\nsudo systemctl stop xwiki\n\n# Restart service\nsudo systemctl restart xwiki\n\n# Check status\nsudo systemctl status xwiki\n\n# View logs\nsudo journalctl -u xwiki -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add xwiki default\n\n# Start service\nrc-service xwiki start\n\n# Stop service\nrc-service xwiki stop\n\n# Restart service\nrc-service xwiki restart\n\n# Check status\nrc-service xwiki status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'xwiki_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice xwiki start\n\n# Stop service\nservice xwiki stop\n\n# Restart service\nservice xwiki restart\n\n# Check status\nservice xwiki status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start xwiki\nbrew services stop xwiki\nbrew services restart xwiki\n\n# Check status\nbrew services list | grep xwiki\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start xwiki\n\n# Stop service\nnet stop xwiki\n\n# Using PowerShell\nStart-Service xwiki\nStop-Service xwiki\nRestart-Service xwiki\n\n# Check status\nGet-Service xwiki\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream xwiki_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name xwiki.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xwiki.example.com;\n\n    ssl_certificate /etc/ssl/certs/xwiki.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xwiki.example.com.key;\n\n    location / {\n        proxy_pass http://xwiki_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName xwiki.example.com\n    Redirect permanent / https://xwiki.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName xwiki.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xwiki.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xwiki.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend xwiki_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xwiki.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xwiki_backend\n\nbackend xwiki_backend\n    balance roundrobin\n    server xwiki1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R xwiki:xwiki /etc/xwiki\nsudo chmod 750 /etc/xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status xwiki\n\n# View logs\nsudo journalctl -u xwiki -f\n\n# Monitor resource usage\ntop -p $(pgrep xwiki)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/xwiki\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/xwiki-backup-$DATE.tar.gz\" /etc/xwiki /var/lib/xwiki\n\necho \"Backup completed: $BACKUP_DIR/xwiki-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop xwiki\n\n# Restore from backup\ntar -xzf /backup/xwiki/xwiki-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xwiki\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u xwiki -n 100\nsudo tail -f /var/log/xwiki/xwiki.log\n\n# Check configuration\nxwiki --version\n\n# Check permissions\nls -la /etc/xwiki\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep xwiki)\n\n# Check disk I/O\niotop -p $(pgrep xwiki)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  xwiki:\n    image: xwiki:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/xwiki\n      - ./data:/var/lib/xwiki\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xwiki\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade xwiki\n\n# Arch Linux\nsudo pacman -Syu xwiki\n\n# Alpine Linux\napk update && apk upgrade xwiki\n\n# openSUSE\nsudo zypper update xwiki\n\n# FreeBSD\npkg update && pkg upgrade xwiki\n\n# Always backup before updates\ntar -czf /backup/xwiki-pre-update-$(date +%Y%m%d).tar.gz /etc/xwiki\n\n# Restart after updates\nsudo systemctl restart xwiki\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/xwiki\n\n# Clean old logs\nfind /var/log/xwiki -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xwiki\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.xwiki.org/\n- GitHub Repository: https://github.com/xwiki/xwiki\n- Community Forum: https://forum.xwiki.org/\n- Best Practices Guide: https://docs.xwiki.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">xwiki is a free and open-source enterprise wiki. XWiki provides powerful wiki platform with application development capabilities</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 5GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default xwiki port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install xwiki\nsudo dnf install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install xwiki\nsudo apt install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xwiki\nsudo pacman -S xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xwiki\napk add --no-cache xwiki\n\n# Enable and start service\nrc-update add xwiki default\nrc-service xwiki start\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install xwiki\nsudo zypper install -y xwiki\n\n# Enable and start service\nsudo systemctl enable --now xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install xwiki\n\n# Start service\nbrew services start xwiki\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install xwiki\n\n# Enable in rc.conf\necho &#039;xwiki_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xwiki start\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install xwiki\n\n# Or using Scoop\nscoop install xwiki\n\n# Verify installation\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/xwiki\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nxwiki --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable xwiki\n\n# Start service\nsudo systemctl start xwiki\n\n# Stop service\nsudo systemctl stop xwiki\n\n# Restart service\nsudo systemctl restart xwiki\n\n# Check status\nsudo systemctl status xwiki\n\n# View logs\nsudo journalctl -u xwiki -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add xwiki default\n\n# Start service\nrc-service xwiki start\n\n# Stop service\nrc-service xwiki stop\n\n# Restart service\nrc-service xwiki restart\n\n# Check status\nrc-service xwiki status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;xwiki_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice xwiki start\n\n# Stop service\nservice xwiki stop\n\n# Restart service\nservice xwiki restart\n\n# Check status\nservice xwiki status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start xwiki\nbrew services stop xwiki\nbrew services restart xwiki\n\n# Check status\nbrew services list | grep xwiki</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start xwiki\n\n# Stop service\nnet stop xwiki\n\n# Using PowerShell\nStart-Service xwiki\nStop-Service xwiki\nRestart-Service xwiki\n\n# Check status\nGet-Service xwiki</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream xwiki_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name xwiki.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name xwiki.example.com;\n\n    ssl_certificate /etc/ssl/certs/xwiki.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/xwiki.example.com.key;\n\n    location / {\n        proxy_pass http://xwiki_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName xwiki.example.com\n    Redirect permanent / https://xwiki.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName xwiki.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/xwiki.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/xwiki.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend xwiki_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/xwiki.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend xwiki_backend\n\nbackend xwiki_backend\n    balance roundrobin\n    server xwiki1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R xwiki:xwiki /etc/xwiki\nsudo chmod 750 /etc/xwiki\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status xwiki\n\n# View logs\nsudo journalctl -u xwiki -f\n\n# Monitor resource usage\ntop -p $(pgrep xwiki)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/xwiki&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/xwiki-backup-$DATE.tar.gz&quot; /etc/xwiki /var/lib/xwiki\n\necho &quot;Backup completed: $BACKUP_DIR/xwiki-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop xwiki\n\n# Restore from backup\ntar -xzf /backup/xwiki/xwiki-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start xwiki</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u xwiki -n 100\nsudo tail -f /var/log/xwiki/xwiki.log\n\n# Check configuration\nxwiki --version\n\n# Check permissions\nls -la /etc/xwiki</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep xwiki)\n\n# Check disk I/O\niotop -p $(pgrep xwiki)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  xwiki:\n    image: xwiki:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/xwiki\n      - ./data:/var/lib/xwiki\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update xwiki\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade xwiki\n\n# Arch Linux\nsudo pacman -Syu xwiki\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade xwiki\n\n# openSUSE\nsudo zypper update xwiki\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade xwiki\n\n# Always backup before updates\ntar -czf /backup/xwiki-pre-update-$(date +%Y%m%d).tar.gz /etc/xwiki\n\n# Restart after updates\nsudo systemctl restart xwiki</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/xwiki\n\n# Clean old logs\nfind /var/log/xwiki -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/xwiki</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.xwiki.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/xwiki/xwiki</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.xwiki.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.xwiki.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1268,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:09.299Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "yacht",
      "displayName": "Yacht",
      "slug": "yacht",
      "description": "Yacht is a web-based UI for managing Docker containers",
      "category": "container-management",
      "subcategory": "container-management",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        8000
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "docker",
        "containers",
        "web-interface",
        "management"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/container-management/yacht",
      "documentationUrl": "https://howtomgr.github.io/container-management/yacht",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/yacht",
      "updatedAt": "2025-09-16T18:04:21Z",
      "createdAt": "2025-09-08T03:18:45Z",
      "readmeRaw": "# Yacht Installation Guide\n\nYacht is a free and open-source Container Management. A web-based UI for managing Docker containers\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 10GB minimum\n  - Network: 8000 ports required\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10 Pro\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8000 (default yacht port)\n  - Firewall rules configured\n- **Dependencies**:\n  - docker, docker-compose\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install yacht\nsudo dnf install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install yacht\nsudo apt install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo ufw allow 8000\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### Arch Linux\n\n```bash\n# Install yacht\nsudo pacman -S yacht\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### Alpine Linux\n\n```bash\n# Install yacht\napk add --no-cache yacht\n\n# Enable and start service\nrc-update add yacht default\nrc-service yacht start\n\n# Verify installation\nyacht --version || rc-service yacht status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install yacht\nsudo zypper install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install yacht\n\n# Start service\nbrew services start yacht\n\n# Verify installation\nyacht --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install yacht\n\n# Enable in rc.conf\necho 'yacht_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Verify installation\nyacht --version || service yacht status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install yacht\n\n# Or using Scoop\nscoop install yacht\n\n# Verify installation\nyacht --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /config\n\n# Set up basic configuration\nsudo tee /config/yacht.conf << 'EOF'\n# Yacht Configuration\nWORKERS=4\nEOF\n\n# Set appropriate permissions\nsudo chown -R yacht:yacht /config || \\\n  sudo chown -R $(whoami):$(whoami) /config\n\n# Test configuration\nsudo yacht --test || sudo yacht configtest\n```\n\n### Security Hardening\n\n```bash\n# Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false yacht || true\n\n# Secure configuration files\nsudo chmod 750 /config\nsudo chmod 640 /config/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable yacht\n\n# Start service\nsudo systemctl start yacht\n\n# Stop service\nsudo systemctl stop yacht\n\n# Restart service\nsudo systemctl restart yacht\n\n# Reload configuration\nsudo systemctl reload yacht\n\n# Check status\nsudo systemctl status yacht\n\n# View logs\nsudo journalctl -u yacht -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add yacht default\n\n# Start service\nrc-service yacht start\n\n# Stop service\nrc-service yacht stop\n\n# Restart service\nrc-service yacht restart\n\n# Check status\nrc-service yacht status\n\n# View logs\ntail -f /config/logs/yacht.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'yacht_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Stop service\nservice yacht stop\n\n# Restart service\nservice yacht restart\n\n# Check status\nservice yacht status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start yacht\nbrew services stop yacht\nbrew services restart yacht\n\n# Check status\nbrew services list | grep yacht\n\n# View logs\ntail -f $(brew --prefix)/var/log/yacht.log\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start yacht\n\n# Stop service\nnet stop yacht\n\n# Using PowerShell\nStart-Service yacht\nStop-Service yacht\nRestart-Service yacht\n\n# Check status\nGet-Service yacht\n\n# Set to automatic startup\nSet-Service yacht -StartupType Automatic\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /config/yacht.conf << 'EOF'\n# Performance tuning\nWORKERS=4\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart yacht\n```\n\n### High Availability Setup\n\n```bash\n# Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream yacht_backend {\n    server 127.0.0.1:8000;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name yacht.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name yacht.example.com;\n\n    ssl_certificate /etc/ssl/certs/yacht.crt;\n    ssl_certificate_key /etc/ssl/private/yacht.key;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    location / {\n        proxy_pass http://yacht_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName yacht.example.com\n    Redirect permanent / https://yacht.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName yacht.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/yacht.crt\n    SSLCertificateKeyFile /etc/ssl/private/yacht.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    <Location />\n        ProxyPass http://127.0.0.1:8000/\n        ProxyPassReverse http://127.0.0.1:8000/\n    </Location>\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:8000/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nglobal\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend yacht_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/yacht.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    \n    default_backend yacht_backend\n\nbackend yacht_backend\n    balance roundrobin\n    option httpchk GET /health\n    server yacht1 127.0.0.1:8000 check\n```\n\n### Caddy Configuration\n\n```caddy\nyacht.example.com {\n    reverse_proxy 127.0.0.1:8000 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection \"1; mode=block\"\n    }\n    \n    encode gzip\n}\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Create dedicated user\nsudo useradd --system --shell /bin/false --home /config yacht || true\n\n# Set ownership\nsudo chown -R yacht:yacht /config\nsudo chown -R yacht:yacht /config/logs\n\n# Set permissions\nsudo chmod 750 /config\nsudo chmod 640 /config/*\nsudo chmod 750 /config/logs\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 8000 proto tcp comment \"Yacht\"\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=yacht\nsudo firewall-cmd --permanent --service=yacht --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=yacht\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 8000 || true\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/yacht.key \\\n    -out /etc/ssl/certs/yacht.crt \\\n    -subj \"/C=US/ST=State/L=City/O=Organization/CN=yacht.example.com\"\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/yacht.key\nsudo chmod 644 /etc/ssl/certs/yacht.crt\n\n# For production, use Let's Encrypt\nsudo certbot certonly --standalone -d yacht.example.com\n```\n\n### Fail2ban Configuration\n\n```ini\n# /etc/fail2ban/jail.d/yacht.conf\n[yacht]\nenabled = true\nport = 8000\nfilter = yacht\nlogpath = /config/logs/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\n```\n\n```ini\n# /etc/fail2ban/filter.d/yacht.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from <HOST>.*$\n            ^.*Authentication failed.*from <HOST>.*$\n            ^.*Invalid credentials.*from <HOST>.*$\nignoreregex =\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE yacht_db;\nCREATE USER yacht_user WITH ENCRYPTED PASSWORD 'secure_password_here';\nGRANT ALL PRIVILEGES ON DATABASE yacht_db TO yacht_user;\n\\q\nEOF\n\n# Configure connection in Yacht\necho \"DATABASE_URL=postgresql://yacht_user:secure_password_here@localhost/yacht_db\" | \\\n  sudo tee -a /config/yacht.env\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE yacht_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'yacht_user'@'localhost' IDENTIFIED BY 'secure_password_here';\nGRANT ALL PRIVILEGES ON yacht_db.* TO 'yacht_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho \"DATABASE_URL=mysql://yacht_user:secure_password_here@localhost/yacht_db\" | \\\n  sudo tee -a /config/yacht.env\n```\n\n### SQLite Backend (if applicable)\n\n```bash\n# Create database directory\nsudo mkdir -p /var/lib/yacht\nsudo chown yacht:yacht /var/lib/yacht\n\n# Initialize database\nsudo -u yacht yacht init-db\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters for better performance\ncat << 'EOF' | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat << 'EOF' | sudo tee -a /etc/security/limits.conf\nyacht soft nofile 65535\nyacht hard nofile 65535\nyacht soft nproc 32768\nyacht hard nproc 32768\nEOF\n```\n\n### Application Tuning\n\n```bash\n# Configure application-specific performance settings\ncat << 'EOF' | sudo tee -a /config/performance.conf\n# Performance configuration\nWORKERS=4\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart yacht\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: 'yacht'\n    static_configs:\n      - targets: ['localhost:8000/metrics']\n    metrics_path: '/metrics'\n    scrape_interval: 30s\n```\n\n### Health Check Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/yacht-health\n\n# Check if service is running\nif ! systemctl is-active --quiet yacht; then\n    echo \"CRITICAL: Yacht service is not running\"\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 8000 2>/dev/null; then\n    echo \"CRITICAL: Yacht is not listening on port 8000\"\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:8000/health || echo \"999\")\nif (( $(echo \"$response_time > 5\" | bc -l) )); then\n    echo \"WARNING: Slow response time: ${response_time}s\"\n    exit 1\nfi\n\necho \"OK: Yacht is healthy (response time: ${response_time}s)\"\nexit 0\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\ncat << 'EOF' | sudo tee /etc/logrotate.d/yacht\n/config/logs/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 yacht yacht\n    postrotate\n        systemctl reload yacht > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/yacht\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/yacht-backup\n\nBACKUP_DIR=\"/backup/yacht\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/yacht_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if needed for consistency)\necho \"Stopping Yacht service...\"\nsystemctl stop yacht\n\n# Backup configuration\necho \"Backing up configuration...\"\ntar -czf \"$BACKUP_FILE\" \\\n    /config \\\n    /var/lib/yacht \\\n    /config/logs\n\n# Backup database (if applicable)\nif command -v pg_dump &> /dev/null; then\n    echo \"Backing up database...\"\n    sudo -u postgres pg_dump yacht_db | gzip > \"$BACKUP_DIR/yacht_db_$DATE.sql.gz\"\nfi\n\n# Start service\necho \"Starting Yacht service...\"\nsystemctl start yacht\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\nfind \"$BACKUP_DIR\" -name \"*.sql.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_FILE\"\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/yacht-restore\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 <backup_file>\"\n    exit 1\nfi\n\nBACKUP_FILE=\"$1\"\n\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"Error: Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\n# Stop service\necho \"Stopping Yacht service...\"\nsystemctl stop yacht\n\n# Restore files\necho \"Restoring from backup...\"\ntar -xzf \"$BACKUP_FILE\" -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo \"$BACKUP_FILE\" | sed 's/.tar.gz$/_db.sql.gz/')\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"Restoring database...\"\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql yacht_db\nfi\n\n# Fix permissions\nchown -R yacht:yacht /config\nchown -R yacht:yacht /var/lib/yacht\n\n# Start service\necho \"Starting Yacht service...\"\nsystemctl start yacht\n\necho \"Restore completed successfully\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check service status and logs\nsudo systemctl status yacht\nsudo journalctl -u yacht -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 8000\nsudo lsof -i :8000\n\n# Verify configuration\nsudo yacht --test || sudo yacht configtest\n\n# Check permissions\nls -la /config\nls -la /config/logs\n```\n\n2. **Cannot access web interface**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep yacht\ncurl -I http://localhost:8000\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 8000\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep yacht\n```\n\n3. **High memory/CPU usage**:\n```bash\n# Monitor resource usage\ntop -p $(pgrep python)\nhtop -p $(pgrep python)\n\n# Check for memory leaks\nps aux | grep python\ncat /proc/$(pgrep python)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /config/logs/*.log | tail -50\n```\n\n4. **Database connection errors**:\n```bash\n# Test database connection\npsql -U yacht_user -d yacht_db -c \"SELECT 1;\"\nmysql -u yacht_user -p yacht_db -e \"SELECT 1;\"\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho \"debug = true\" | sudo tee -a /config/yacht.conf\n\n# Restart with debug mode\nsudo systemctl stop yacht\nsudo -u yacht yacht --debug\n\n# Watch debug logs\ntail -f /config/logs/debug.log\n```\n\n### Performance Analysis\n\n```bash\n# Profile CPU usage\nsudo perf record -p $(pgrep python) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/yacht.pcap port 8000\nsudo tcpdump -r /tmp/yacht.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep python)\n```\n\n## Integration Examples\n\n### Docker Deployment\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  yacht:\n    image: yacht:yacht\n    container_name: yacht\n    restart: unless-stopped\n    ports:\n      - \"8000:8000\"\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/config\n      - ./data:/var/lib/yacht\n      - ./logs:/config/logs\n    networks:\n      - yacht_network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  yacht_network:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\n# yacht-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: yacht\n  labels:\n    app: yacht\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: yacht\n  template:\n    metadata:\n      labels:\n        app: yacht\n    spec:\n      containers:\n      - name: yacht\n        image: yacht:yacht\n        ports:\n        - containerPort: 8000\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /config\n        - name: data\n          mountPath: /var/lib/yacht\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: yacht-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: yacht-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: yacht\nspec:\n  selector:\n    app: yacht\n  ports:\n  - protocol: TCP\n    port: 8000\n    targetPort: 8000\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: yacht-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n```\n\n### Ansible Playbook\n\n```yaml\n---\n# yacht-playbook.yml\n- name: Install and configure Yacht\n  hosts: all\n  become: yes\n  vars:\n    yacht_version: latest\n    yacht_port: 8000\n    yacht_config_dir: /config\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - docker, docker-compose\n        state: present\n    \n    - name: Install Yacht\n      package:\n        name: yacht\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: \"{{ yacht_config_dir }}\"\n        state: directory\n        owner: yacht\n        group: yacht\n        mode: '0750'\n    \n    - name: Deploy configuration\n      template:\n        src: yacht.conf.j2\n        dest: \"{{ yacht_config_dir }}/yacht.conf\"\n        owner: yacht\n        group: yacht\n        mode: '0640'\n      notify: restart yacht\n    \n    - name: Start and enable service\n      systemd:\n        name: yacht\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: \"{{ yacht_port }}/tcp\"\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart yacht\n      systemd:\n        name: yacht\n        state: restarted\n```\n\n### Terraform Configuration\n\n```hcl\n# yacht.tf\nresource \"aws_instance\" \"yacht_server\" {\n  ami           = var.ami_id\n  instance_type = \"t3.medium\"\n  \n  vpc_security_group_ids = [aws_security_group.yacht.id]\n  \n  user_data = <<-EOF\n    #!/bin/bash\n    # Install Yacht\n    apt-get update\n    apt-get install -y yacht docker, docker-compose\n    \n    # Configure Yacht\n    systemctl enable yacht\n    systemctl start yacht\n  EOF\n  \n  tags = {\n    Name = \"Yacht Server\"\n    Application = \"Yacht\"\n  }\n}\n\nresource \"aws_security_group\" \"yacht\" {\n  name        = \"yacht-sg\"\n  description = \"Security group for Yacht\"\n  \n  ingress {\n    from_port   = 8000\n    to_port     = 8000\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  tags = {\n    Name = \"Yacht Security Group\"\n  }\n}\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update yacht\nsudo dnf update yacht\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade yacht\n\n# Arch Linux\nsudo pacman -Syu yacht\n\n# Alpine Linux\napk update\napk upgrade yacht\n\n# openSUSE\nsudo zypper ref\nsudo zypper update yacht\n\n# FreeBSD\npkg update\npkg upgrade yacht\n\n# Always backup before updates\n/usr/local/bin/yacht-backup\n\n# Restart after updates\nsudo systemctl restart yacht\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean old logs\nfind /config/logs -name \"*.log\" -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze yacht_db\n\n# Check disk usage\ndf -h | grep -E \"(/$|yacht)\"\ndu -sh /var/lib/yacht\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u yacht | grep -i \"error\\|fail\\|deny\"\n```\n\n### Health Monitoring Checklist\n\n- [ ] Service is running and enabled\n- [ ] Web interface is accessible\n- [ ] Database connections are healthy\n- [ ] Disk usage is below 80%\n- [ ] No critical errors in logs\n- [ ] Backups are running successfully\n- [ ] SSL certificates are valid\n- [ ] Security updates are applied\n\n## Additional Resources\n\n- Official Documentation: https://docs.yacht.org/\n- GitHub Repository: https://github.com/yacht/yacht\n- Community Forum: https://forum.yacht.org/\n- Wiki: https://wiki.yacht.org/\n- Docker Hub: https://hub.docker.com/r/yacht/yacht\n- Security Advisories: https://security.yacht.org/\n- Best Practices: https://docs.yacht.org/best-practices\n- API Documentation: https://api.yacht.org/\n- Comparison with Portainer, Rancher, Docker Swarm UI, Shipyard: https://docs.yacht.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">Yacht is a free and open-source Container Management. A web-based UI for managing Docker containers</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum</li>\n<li class=\"mobile-list-item\">Network: 8000 ports required</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10 Pro</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8000 (default yacht port)</li>\n<li class=\"mobile-list-item\">Firewall rules configured</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">docker, docker-compose</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install yacht\nsudo dnf install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install yacht\nsudo apt install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo ufw allow 8000\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install yacht\nsudo pacman -S yacht\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install yacht\napk add --no-cache yacht\n\n# Enable and start service\nrc-update add yacht default\nrc-service yacht start\n\n# Verify installation\nyacht --version || rc-service yacht status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install yacht\nsudo zypper install -y yacht docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now yacht\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=yacht || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyacht --version || systemctl status yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install yacht\n\n# Start service\nbrew services start yacht\n\n# Verify installation\nyacht --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install yacht\n\n# Enable in rc.conf\necho &#039;yacht_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Verify installation\nyacht --version || service yacht status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install yacht\n\n# Or using Scoop\nscoop install yacht\n\n# Verify installation\nyacht --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /config\n\n# Set up basic configuration\nsudo tee /config/yacht.conf &lt;&lt; &#039;EOF&#039;\n# Yacht Configuration\nWORKERS=4\nEOF\n\n# Set appropriate permissions\nsudo chown -R yacht:yacht /config || \\\n  sudo chown -R $(whoami):$(whoami) /config\n\n# Test configuration\nsudo yacht --test || sudo yacht configtest</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false yacht || true\n\n# Secure configuration files\nsudo chmod 750 /config\nsudo chmod 640 /config/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable yacht\n\n# Start service\nsudo systemctl start yacht\n\n# Stop service\nsudo systemctl stop yacht\n\n# Restart service\nsudo systemctl restart yacht\n\n# Reload configuration\nsudo systemctl reload yacht\n\n# Check status\nsudo systemctl status yacht\n\n# View logs\nsudo journalctl -u yacht -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add yacht default\n\n# Start service\nrc-service yacht start\n\n# Stop service\nrc-service yacht stop\n\n# Restart service\nrc-service yacht restart\n\n# Check status\nrc-service yacht status\n\n# View logs\ntail -f /config/logs/yacht.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;yacht_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice yacht start\n\n# Stop service\nservice yacht stop\n\n# Restart service\nservice yacht restart\n\n# Check status\nservice yacht status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start yacht\nbrew services stop yacht\nbrew services restart yacht\n\n# Check status\nbrew services list | grep yacht\n\n# View logs\ntail -f $(brew --prefix)/var/log/yacht.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start yacht\n\n# Stop service\nnet stop yacht\n\n# Using PowerShell\nStart-Service yacht\nStop-Service yacht\nRestart-Service yacht\n\n# Check status\nGet-Service yacht\n\n# Set to automatic startup\nSet-Service yacht -StartupType Automatic</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /config/yacht.conf &lt;&lt; &#039;EOF&#039;\n# Performance tuning\nWORKERS=4\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho &quot;vm.swappiness=10&quot; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream yacht_backend {\n    server 127.0.0.1:8000;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name yacht.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name yacht.example.com;\n\n    ssl_certificate /etc/ssl/certs/yacht.crt;\n    ssl_certificate_key /etc/ssl/private/yacht.key;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n\n    location / {\n        proxy_pass http://yacht_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName yacht.example.com\n    Redirect permanent / https://yacht.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName yacht.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/yacht.crt\n    SSLCertificateKeyFile /etc/ssl/private/yacht.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    &lt;Location /&gt;\n        ProxyPass http://127.0.0.1:8000/\n        ProxyPassReverse http://127.0.0.1:8000/\n    &lt;/Location&gt;\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:8000/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">global\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend yacht_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/yacht.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    \n    default_backend yacht_backend\n\nbackend yacht_backend\n    balance roundrobin\n    option httpchk GET /health\n    server yacht1 127.0.0.1:8000 check</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddy\">yacht.example.com {\n    reverse_proxy 127.0.0.1:8000 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection &quot;1; mode=block&quot;\n    }\n    \n    encode gzip\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user\nsudo useradd --system --shell /bin/false --home /config yacht || true\n\n# Set ownership\nsudo chown -R yacht:yacht /config\nsudo chown -R yacht:yacht /config/logs\n\n# Set permissions\nsudo chmod 750 /config\nsudo chmod 640 /config/*\nsudo chmod 750 /config/logs\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 8000 proto tcp comment &quot;Yacht&quot;\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=yacht\nsudo firewall-cmd --permanent --service=yacht --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=yacht\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 8000 || true</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/yacht.key \\\n    -out /etc/ssl/certs/yacht.crt \\\n    -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=yacht.example.com&quot;\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/yacht.key\nsudo chmod 644 /etc/ssl/certs/yacht.crt\n\n# For production, use Let&#039;s Encrypt\nsudo certbot certonly --standalone -d yacht.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"fail2ban-configuration\" class=\"mobile-header\">Fail2ban Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/jail.d/yacht.conf\n[yacht]\nenabled = true\nport = 8000\nfilter = yacht\nlogpath = /config/logs/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/filter.d/yacht.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from &lt;HOST&gt;.*$\n            ^.*Authentication failed.*from &lt;HOST&gt;.*$\n            ^.*Invalid credentials.*from &lt;HOST&gt;.*$\nignoreregex =</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE yacht_db;\nCREATE USER yacht_user WITH ENCRYPTED PASSWORD &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON DATABASE yacht_db TO yacht_user;\n\\q\nEOF\n\n# Configure connection in Yacht\necho &quot;DATABASE_URL=postgresql://yacht_user:secure_password_here@localhost/yacht_db&quot; | \\\n  sudo tee -a /config/yacht.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE yacht_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;yacht_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON yacht_db.* TO &#039;yacht_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho &quot;DATABASE_URL=mysql://yacht_user:secure_password_here@localhost/yacht_db&quot; | \\\n  sudo tee -a /config/yacht.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"sqlite-backend-if-applicable\" class=\"mobile-header\">SQLite Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database directory\nsudo mkdir -p /var/lib/yacht\nsudo chown yacht:yacht /var/lib/yacht\n\n# Initialize database\nsudo -u yacht yacht init-db</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters for better performance\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/security/limits.conf\nyacht soft nofile 65535\nyacht hard nofile 65535\nyacht soft nproc 32768\nyacht hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-tuning\" class=\"mobile-header\">Application Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure application-specific performance settings\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /config/performance.conf\n# Performance configuration\nWORKERS=4\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart yacht</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: &#039;yacht&#039;\n    static_configs:\n      - targets: [&#039;localhost:8000/metrics&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 30s</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-script\" class=\"mobile-header\">Health Check Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/yacht-health\n\n# Check if service is running\nif ! systemctl is-active --quiet yacht; then\n    echo &quot;CRITICAL: Yacht service is not running&quot;\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 8000 2&gt;/dev/null; then\n    echo &quot;CRITICAL: Yacht is not listening on port 8000&quot;\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w &#039;%{time_total}&#039; http://localhost:8000/health || echo &quot;999&quot;)\nif (( $(echo &quot;$response_time &gt; 5&quot; | bc -l) )); then\n    echo &quot;WARNING: Slow response time: ${response_time}s&quot;\n    exit 1\nfi\n\necho &quot;OK: Yacht is healthy (response time: ${response_time}s)&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\ncat &lt;&lt; &#039;EOF&#039; | sudo tee /etc/logrotate.d/yacht\n/config/logs/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 yacht yacht\n    postrotate\n        systemctl reload yacht &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/yacht</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/yacht-backup\n\nBACKUP_DIR=&quot;/backup/yacht&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/yacht_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if needed for consistency)\necho &quot;Stopping Yacht service...&quot;\nsystemctl stop yacht\n\n# Backup configuration\necho &quot;Backing up configuration...&quot;\ntar -czf &quot;$BACKUP_FILE&quot; \\\n    /config \\\n    /var/lib/yacht \\\n    /config/logs\n\n# Backup database (if applicable)\nif command -v pg_dump &amp;&gt; /dev/null; then\n    echo &quot;Backing up database...&quot;\n    sudo -u postgres pg_dump yacht_db | gzip &gt; &quot;$BACKUP_DIR/yacht_db_$DATE.sql.gz&quot;\nfi\n\n# Start service\necho &quot;Starting Yacht service...&quot;\nsystemctl start yacht\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.sql.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_FILE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/yacht-restore\n\nif [ $# -ne 1 ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    exit 1\nfi\n\nBACKUP_FILE=&quot;$1&quot;\n\nif [ ! -f &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Error: Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\n# Stop service\necho &quot;Stopping Yacht service...&quot;\nsystemctl stop yacht\n\n# Restore files\necho &quot;Restoring from backup...&quot;\ntar -xzf &quot;$BACKUP_FILE&quot; -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo &quot;$BACKUP_FILE&quot; | sed &#039;s/.tar.gz$/_db.sql.gz/&#039;)\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;Restoring database...&quot;\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql yacht_db\nfi\n\n# Fix permissions\nchown -R yacht:yacht /config\nchown -R yacht:yacht /var/lib/yacht\n\n# Start service\necho &quot;Starting Yacht service...&quot;\nsystemctl start yacht\n\necho &quot;Restore completed successfully&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status and logs\nsudo systemctl status yacht\nsudo journalctl -u yacht -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 8000\nsudo lsof -i :8000\n\n# Verify configuration\nsudo yacht --test || sudo yacht configtest\n\n# Check permissions\nls -la /config\nls -la /config/logs</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Cannot access web interface</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep yacht\ncurl -I http://localhost:8000\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 8000\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep yacht</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>High memory/CPU usage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor resource usage\ntop -p $(pgrep python)\nhtop -p $(pgrep python)\n\n# Check for memory leaks\nps aux | grep python\ncat /proc/$(pgrep python)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /config/logs/*.log | tail -50</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Database connection errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test database connection\npsql -U yacht_user -d yacht_db -c &quot;SELECT 1;&quot;\nmysql -u yacht_user -p yacht_db -e &quot;SELECT 1;&quot;\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &quot;debug = true&quot; | sudo tee -a /config/yacht.conf\n\n# Restart with debug mode\nsudo systemctl stop yacht\nsudo -u yacht yacht --debug\n\n# Watch debug logs\ntail -f /config/logs/debug.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-analysis\" class=\"mobile-header\">Performance Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Profile CPU usage\nsudo perf record -p $(pgrep python) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/yacht.pcap port 8000\nsudo tcpdump -r /tmp/yacht.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep python)</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-deployment\" class=\"mobile-header\">Docker Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml\nversion: &#039;3.8&#039;\n\nservices:\n  yacht:\n    image: yacht:yacht\n    container_name: yacht\n    restart: unless-stopped\n    ports:\n      - &quot;8000:8000&quot;\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/config\n      - ./data:/var/lib/yacht\n      - ./logs:/config/logs\n    networks:\n      - yacht_network\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8000/health&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  yacht_network:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># yacht-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: yacht\n  labels:\n    app: yacht\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: yacht\n  template:\n    metadata:\n      labels:\n        app: yacht\n    spec:\n      containers:\n      - name: yacht\n        image: yacht:yacht\n        ports:\n        - containerPort: 8000\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /config\n        - name: data\n          mountPath: /var/lib/yacht\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: yacht-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: yacht-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: yacht\nspec:\n  selector:\n    app: yacht\n  ports:\n  - protocol: TCP\n    port: 8000\n    targetPort: 8000\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: yacht-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n# yacht-playbook.yml\n- name: Install and configure Yacht\n  hosts: all\n  become: yes\n  vars:\n    yacht_version: latest\n    yacht_port: 8000\n    yacht_config_dir: /config\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - docker, docker-compose\n        state: present\n    \n    - name: Install Yacht\n      package:\n        name: yacht\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: &quot;{{ yacht_config_dir }}&quot;\n        state: directory\n        owner: yacht\n        group: yacht\n        mode: &#039;0750&#039;\n    \n    - name: Deploy configuration\n      template:\n        src: yacht.conf.j2\n        dest: &quot;{{ yacht_config_dir }}/yacht.conf&quot;\n        owner: yacht\n        group: yacht\n        mode: &#039;0640&#039;\n      notify: restart yacht\n    \n    - name: Start and enable service\n      systemd:\n        name: yacht\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: &quot;{{ yacht_port }}/tcp&quot;\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart yacht\n      systemd:\n        name: yacht\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-configuration\" class=\"mobile-header\">Terraform Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"hcl\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">hcl</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-hcl\"># yacht.tf\nresource &quot;aws_instance&quot; &quot;yacht_server&quot; {\n  ami           = var.ami_id\n  instance_type = &quot;t3.medium&quot;\n  \n  vpc_security_group_ids = [aws_security_group.yacht.id]\n  \n  user_data = &lt;&lt;-EOF\n    #!/bin/bash\n    # Install Yacht\n    apt-get update\n    apt-get install -y yacht docker, docker-compose\n    \n    # Configure Yacht\n    systemctl enable yacht\n    systemctl start yacht\n  EOF\n  \n  tags = {\n    Name = &quot;Yacht Server&quot;\n    Application = &quot;Yacht&quot;\n  }\n}\n\nresource &quot;aws_security_group&quot; &quot;yacht&quot; {\n  name        = &quot;yacht-sg&quot;\n  description = &quot;Security group for Yacht&quot;\n  \n  ingress {\n    from_port   = 8000\n    to_port     = 8000\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  tags = {\n    Name = &quot;Yacht Security Group&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update yacht\nsudo dnf update yacht\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade yacht\n\n# Arch Linux\nsudo pacman -Syu yacht\n\n# Alpine Linux\napk update\napk upgrade yacht\n\n# openSUSE\nsudo zypper ref\nsudo zypper update yacht\n\n# FreeBSD\npkg update\npkg upgrade yacht\n\n# Always backup before updates\n/usr/local/bin/yacht-backup\n\n# Restart after updates\nsudo systemctl restart yacht</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean old logs\nfind /config/logs -name &quot;*.log&quot; -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze yacht_db\n\n# Check disk usage\ndf -h | grep -E &quot;(/$|yacht)&quot;\ndu -sh /var/lib/yacht\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u yacht | grep -i &quot;error\\|fail\\|deny&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring-checklist\" class=\"mobile-header\">Health Monitoring Checklist</h3>\n<li class=\"mobile-list-item\">[ ] Service is running and enabled</li>\n<li class=\"mobile-list-item\">[ ] Web interface is accessible</li>\n<li class=\"mobile-list-item\">[ ] Database connections are healthy</li>\n<li class=\"mobile-list-item\">[ ] Disk usage is below 80%</li>\n<li class=\"mobile-list-item\">[ ] No critical errors in logs</li>\n<li class=\"mobile-list-item\">[ ] Backups are running successfully</li>\n<li class=\"mobile-list-item\">[ ] SSL certificates are valid</li>\n<li class=\"mobile-list-item\">[ ] Security updates are applied</li>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.yacht.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/yacht/yacht</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.yacht.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.yacht.org/</li>\n<li class=\"mobile-list-item\">Docker Hub: https://hub.docker.com/r/yacht/yacht</li>\n<li class=\"mobile-list-item\">Security Advisories: https://security.yacht.org/</li>\n<li class=\"mobile-list-item\">Best Practices: https://docs.yacht.org/best-practices</li>\n<li class=\"mobile-list-item\">API Documentation: https://api.yacht.org/</li>\n<li class=\"mobile-list-item\">Comparison with Portainer, Rancher, Docker Swarm UI, Shipyard: https://docs.yacht.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "16 min",
      "wordCount": 3101,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 3,
          "text": "Security Hardening",
          "id": "security-hardening"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 3,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "High Availability Setup",
          "id": "high-availability-setup"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 3,
          "text": "Caddy Configuration",
          "id": "caddy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 3,
          "text": "SSL/TLS Configuration",
          "id": "ssltls-configuration"
        },
        {
          "level": 3,
          "text": "Fail2ban Configuration",
          "id": "fail2ban-configuration"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 3,
          "text": "PostgreSQL Backend (if applicable)",
          "id": "postgresql-backend-if-applicable"
        },
        {
          "level": 3,
          "text": "MySQL/MariaDB Backend (if applicable)",
          "id": "mysqlmariadb-backend-if-applicable"
        },
        {
          "level": 3,
          "text": "SQLite Backend (if applicable)",
          "id": "sqlite-backend-if-applicable"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 3,
          "text": "Application Tuning",
          "id": "application-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Prometheus Integration",
          "id": "prometheus-integration"
        },
        {
          "level": 3,
          "text": "Health Check Script",
          "id": "health-check-script"
        },
        {
          "level": 3,
          "text": "Log Monitoring",
          "id": "log-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Script",
          "id": "restore-script"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 3,
          "text": "Debug Mode",
          "id": "debug-mode"
        },
        {
          "level": 3,
          "text": "Performance Analysis",
          "id": "performance-analysis"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Deployment",
          "id": "docker-deployment"
        },
        {
          "level": 3,
          "text": "Kubernetes Deployment",
          "id": "kubernetes-deployment"
        },
        {
          "level": 3,
          "text": "Ansible Playbook",
          "id": "ansible-playbook"
        },
        {
          "level": 3,
          "text": "Terraform Configuration",
          "id": "terraform-configuration"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance Tasks",
          "id": "regular-maintenance-tasks"
        },
        {
          "level": 3,
          "text": "Health Monitoring Checklist",
          "id": "health-monitoring-checklist"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:09.042Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "youtransfer",
      "displayName": "youtransfer Installation Guide",
      "slug": "youtransfer",
      "description": "youtransfer is a free and open-source self-hosted file transfer. YouTransfer enables easy file sharing with a simple, self-hosted platform",
      "category": "miscellaneous",
      "subcategory": "miscellaneous",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443,
        5000
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "miscellaneous",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/miscellaneous/youtransfer",
      "documentationUrl": "https://howtomgr.github.io/miscellaneous/youtransfer",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/youtransfer",
      "updatedAt": "2025-09-16T18:04:27Z",
      "createdAt": "2025-09-16T08:43:16Z",
      "readmeRaw": "# youtransfer Installation Guide\n\nyoutransfer is a free and open-source self-hosted file transfer. YouTransfer enables easy file sharing with a simple, self-hosted platform\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 1GB for files\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 5000 (default youtransfer port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install youtransfer\nsudo dnf install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyoutransfer --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install youtransfer\nsudo apt install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo ufw allow 5000\n\n# Verify installation\nyoutransfer --version\n```\n\n### Arch Linux\n\n```bash\n# Install youtransfer\nsudo pacman -S youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Verify installation\nyoutransfer --version\n```\n\n### Alpine Linux\n\n```bash\n# Install youtransfer\napk add --no-cache youtransfer\n\n# Enable and start service\nrc-update add youtransfer default\nrc-service youtransfer start\n\n# Verify installation\nyoutransfer --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install youtransfer\nsudo zypper install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyoutransfer --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install youtransfer\n\n# Start service\nbrew services start youtransfer\n\n# Verify installation\nyoutransfer --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install youtransfer\n\n# Enable in rc.conf\necho 'youtransfer_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice youtransfer start\n\n# Verify installation\nyoutransfer --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install youtransfer\n\n# Or using Scoop\nscoop install youtransfer\n\n# Verify installation\nyoutransfer --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/youtransfer\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nyoutransfer --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable youtransfer\n\n# Start service\nsudo systemctl start youtransfer\n\n# Stop service\nsudo systemctl stop youtransfer\n\n# Restart service\nsudo systemctl restart youtransfer\n\n# Check status\nsudo systemctl status youtransfer\n\n# View logs\nsudo journalctl -u youtransfer -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add youtransfer default\n\n# Start service\nrc-service youtransfer start\n\n# Stop service\nrc-service youtransfer stop\n\n# Restart service\nrc-service youtransfer restart\n\n# Check status\nrc-service youtransfer status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'youtransfer_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice youtransfer start\n\n# Stop service\nservice youtransfer stop\n\n# Restart service\nservice youtransfer restart\n\n# Check status\nservice youtransfer status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start youtransfer\nbrew services stop youtransfer\nbrew services restart youtransfer\n\n# Check status\nbrew services list | grep youtransfer\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start youtransfer\n\n# Stop service\nnet stop youtransfer\n\n# Using PowerShell\nStart-Service youtransfer\nStop-Service youtransfer\nRestart-Service youtransfer\n\n# Check status\nGet-Service youtransfer\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream youtransfer_backend {\n    server 127.0.0.1:5000;\n}\n\nserver {\n    listen 80;\n    server_name youtransfer.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name youtransfer.example.com;\n\n    ssl_certificate /etc/ssl/certs/youtransfer.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/youtransfer.example.com.key;\n\n    location / {\n        proxy_pass http://youtransfer_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName youtransfer.example.com\n    Redirect permanent / https://youtransfer.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName youtransfer.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/youtransfer.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/youtransfer.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5000/\n    ProxyPassReverse / http://127.0.0.1:5000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend youtransfer_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/youtransfer.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend youtransfer_backend\n\nbackend youtransfer_backend\n    balance roundrobin\n    server youtransfer1 127.0.0.1:5000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R youtransfer:youtransfer /etc/youtransfer\nsudo chmod 750 /etc/youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status youtransfer\n\n# View logs\nsudo journalctl -u youtransfer -f\n\n# Monitor resource usage\ntop -p $(pgrep youtransfer)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/youtransfer\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/youtransfer-backup-$DATE.tar.gz\" /etc/youtransfer /var/lib/youtransfer\n\necho \"Backup completed: $BACKUP_DIR/youtransfer-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop youtransfer\n\n# Restore from backup\ntar -xzf /backup/youtransfer/youtransfer-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start youtransfer\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u youtransfer -n 100\nsudo tail -f /var/log/youtransfer/youtransfer.log\n\n# Check configuration\nyoutransfer --version\n\n# Check permissions\nls -la /etc/youtransfer\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 5000\n\n# Test connectivity\ntelnet localhost 5000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep youtransfer)\n\n# Check disk I/O\niotop -p $(pgrep youtransfer)\n\n# Check connections\nss -an | grep 5000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  youtransfer:\n    image: youtransfer:latest\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - ./config:/etc/youtransfer\n      - ./data:/var/lib/youtransfer\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update youtransfer\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade youtransfer\n\n# Arch Linux\nsudo pacman -Syu youtransfer\n\n# Alpine Linux\napk update && apk upgrade youtransfer\n\n# openSUSE\nsudo zypper update youtransfer\n\n# FreeBSD\npkg update && pkg upgrade youtransfer\n\n# Always backup before updates\ntar -czf /backup/youtransfer-pre-update-$(date +%Y%m%d).tar.gz /etc/youtransfer\n\n# Restart after updates\nsudo systemctl restart youtransfer\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/youtransfer\n\n# Clean old logs\nfind /var/log/youtransfer -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/youtransfer\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.youtransfer.org/\n- GitHub Repository: https://github.com/youtransfer/youtransfer\n- Community Forum: https://forum.youtransfer.org/\n- Best Practices Guide: https://docs.youtransfer.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">youtransfer is a free and open-source self-hosted file transfer. YouTransfer enables easy file sharing with a simple, self-hosted platform</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for files</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5000 (default youtransfer port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install youtransfer\nsudo dnf install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install youtransfer\nsudo apt install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo ufw allow 5000\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install youtransfer\nsudo pacman -S youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install youtransfer\napk add --no-cache youtransfer\n\n# Enable and start service\nrc-update add youtransfer default\nrc-service youtransfer start\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install youtransfer\nsudo zypper install -y youtransfer\n\n# Enable and start service\nsudo systemctl enable --now youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install youtransfer\n\n# Start service\nbrew services start youtransfer\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install youtransfer\n\n# Enable in rc.conf\necho &#039;youtransfer_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice youtransfer start\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install youtransfer\n\n# Or using Scoop\nscoop install youtransfer\n\n# Verify installation\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/youtransfer\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nyoutransfer --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable youtransfer\n\n# Start service\nsudo systemctl start youtransfer\n\n# Stop service\nsudo systemctl stop youtransfer\n\n# Restart service\nsudo systemctl restart youtransfer\n\n# Check status\nsudo systemctl status youtransfer\n\n# View logs\nsudo journalctl -u youtransfer -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add youtransfer default\n\n# Start service\nrc-service youtransfer start\n\n# Stop service\nrc-service youtransfer stop\n\n# Restart service\nrc-service youtransfer restart\n\n# Check status\nrc-service youtransfer status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;youtransfer_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice youtransfer start\n\n# Stop service\nservice youtransfer stop\n\n# Restart service\nservice youtransfer restart\n\n# Check status\nservice youtransfer status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start youtransfer\nbrew services stop youtransfer\nbrew services restart youtransfer\n\n# Check status\nbrew services list | grep youtransfer</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start youtransfer\n\n# Stop service\nnet stop youtransfer\n\n# Using PowerShell\nStart-Service youtransfer\nStop-Service youtransfer\nRestart-Service youtransfer\n\n# Check status\nGet-Service youtransfer</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream youtransfer_backend {\n    server 127.0.0.1:5000;\n}\n\nserver {\n    listen 80;\n    server_name youtransfer.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name youtransfer.example.com;\n\n    ssl_certificate /etc/ssl/certs/youtransfer.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/youtransfer.example.com.key;\n\n    location / {\n        proxy_pass http://youtransfer_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName youtransfer.example.com\n    Redirect permanent / https://youtransfer.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName youtransfer.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/youtransfer.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/youtransfer.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5000/\n    ProxyPassReverse / http://127.0.0.1:5000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend youtransfer_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/youtransfer.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend youtransfer_backend\n\nbackend youtransfer_backend\n    balance roundrobin\n    server youtransfer1 127.0.0.1:5000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R youtransfer:youtransfer /etc/youtransfer\nsudo chmod 750 /etc/youtransfer\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status youtransfer\n\n# View logs\nsudo journalctl -u youtransfer -f\n\n# Monitor resource usage\ntop -p $(pgrep youtransfer)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/youtransfer&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/youtransfer-backup-$DATE.tar.gz&quot; /etc/youtransfer /var/lib/youtransfer\n\necho &quot;Backup completed: $BACKUP_DIR/youtransfer-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop youtransfer\n\n# Restore from backup\ntar -xzf /backup/youtransfer/youtransfer-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start youtransfer</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u youtransfer -n 100\nsudo tail -f /var/log/youtransfer/youtransfer.log\n\n# Check configuration\nyoutransfer --version\n\n# Check permissions\nls -la /etc/youtransfer</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 5000\n\n# Test connectivity\ntelnet localhost 5000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep youtransfer)\n\n# Check disk I/O\niotop -p $(pgrep youtransfer)\n\n# Check connections\nss -an | grep 5000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  youtransfer:\n    image: youtransfer:latest\n    ports:\n      - &quot;5000:5000&quot;\n    volumes:\n      - ./config:/etc/youtransfer\n      - ./data:/var/lib/youtransfer\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update youtransfer\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade youtransfer\n\n# Arch Linux\nsudo pacman -Syu youtransfer\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade youtransfer\n\n# openSUSE\nsudo zypper update youtransfer\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade youtransfer\n\n# Always backup before updates\ntar -czf /backup/youtransfer-pre-update-$(date +%Y%m%d).tar.gz /etc/youtransfer\n\n# Restart after updates\nsudo systemctl restart youtransfer</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/youtransfer\n\n# Clean old logs\nfind /var/log/youtransfer -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/youtransfer</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.youtransfer.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/youtransfer/youtransfer</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.youtransfer.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.youtransfer.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1271,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:08.771Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "zabbix",
      "displayName": "Zabbix",
      "slug": "zabbix",
      "description": "Zabbix is an enterprise-class monitoring solution for networks and applications",
      "category": "monitoring",
      "subcategory": "monitoring",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443,
        10051
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "monitoring",
        "alerting",
        "metrics",
        "enterprise"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/monitoring/zabbix",
      "documentationUrl": "https://howtomgr.github.io/monitoring/zabbix",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/zabbix",
      "updatedAt": "2025-09-16T18:04:35Z",
      "createdAt": "2025-09-08T03:18:59Z",
      "readmeRaw": "# Zabbix Installation Guide\n\nZabbix is a free and open-source Monitoring Platform. An enterprise-class monitoring solution for networks and applications\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 10GB minimum\n  - Network: 80 ports required\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10 Pro\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default zabbix port)\n  - Firewall rules configured\n- **Dependencies**:\n  - mysql, php, apache, zabbix-agent\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zabbix\nsudo dnf install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zabbix || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zabbix\nsudo apt install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server\n```\n\n### Arch Linux\n\n```bash\n# Install zabbix\nsudo pacman -S zabbix\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server\n```\n\n### Alpine Linux\n\n```bash\n# Install zabbix\napk add --no-cache zabbix\n\n# Enable and start service\nrc-update add zabbix-server default\nrc-service zabbix-server start\n\n# Verify installation\nzabbix --version || rc-service zabbix-server status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zabbix\nsudo zypper install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zabbix || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zabbix\n\n# Start service\nbrew services start zabbix\n\n# Verify installation\nzabbix --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zabbix\n\n# Enable in rc.conf\necho 'zabbix-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Verify installation\nzabbix --version || service zabbix-server status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install zabbix\n\n# Or using Scoop\nscoop install zabbix\n\n# Verify installation\nzabbix --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/zabbix\n\n# Set up basic configuration\nsudo tee /etc/zabbix/zabbix.conf << 'EOF'\n# Zabbix Configuration\nCacheSize=32M, StartPollers=5\nEOF\n\n# Set appropriate permissions\nsudo chown -R zabbix:zabbix /etc/zabbix || \\\n  sudo chown -R $(whoami):$(whoami) /etc/zabbix\n\n# Test configuration\nsudo zabbix --test || sudo zabbix-server configtest\n```\n\n### Security Hardening\n\n```bash\n# Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false zabbix || true\n\n# Secure configuration files\nsudo chmod 750 /etc/zabbix\nsudo chmod 640 /etc/zabbix/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zabbix-server\n\n# Start service\nsudo systemctl start zabbix-server\n\n# Stop service\nsudo systemctl stop zabbix-server\n\n# Restart service\nsudo systemctl restart zabbix-server\n\n# Reload configuration\nsudo systemctl reload zabbix-server\n\n# Check status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zabbix-server default\n\n# Start service\nrc-service zabbix-server start\n\n# Stop service\nrc-service zabbix-server stop\n\n# Restart service\nrc-service zabbix-server restart\n\n# Check status\nrc-service zabbix-server status\n\n# View logs\ntail -f /var/log/zabbix/zabbix-server.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zabbix-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Stop service\nservice zabbix-server stop\n\n# Restart service\nservice zabbix-server restart\n\n# Check status\nservice zabbix-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zabbix\nbrew services stop zabbix\nbrew services restart zabbix\n\n# Check status\nbrew services list | grep zabbix\n\n# View logs\ntail -f $(brew --prefix)/var/log/zabbix.log\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zabbix-server\n\n# Stop service\nnet stop zabbix-server\n\n# Using PowerShell\nStart-Service zabbix-server\nStop-Service zabbix-server\nRestart-Service zabbix-server\n\n# Check status\nGet-Service zabbix-server\n\n# Set to automatic startup\nSet-Service zabbix-server -StartupType Automatic\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/zabbix/zabbix.conf << 'EOF'\n# Performance tuning\nCacheSize=32M, StartPollers=5\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart zabbix-server\n```\n\n### High Availability Setup\n\n```bash\n# Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zabbix_backend {\n    server 127.0.0.1:80;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name zabbix.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zabbix.example.com;\n\n    ssl_certificate /etc/ssl/certs/zabbix.crt;\n    ssl_certificate_key /etc/ssl/private/zabbix.key;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    location / {\n        proxy_pass http://zabbix_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zabbix.example.com\n    Redirect permanent / https://zabbix.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zabbix.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zabbix.crt\n    SSLCertificateKeyFile /etc/ssl/private/zabbix.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    <Location />\n        ProxyPass http://127.0.0.1:80/\n        ProxyPassReverse http://127.0.0.1:80/\n    </Location>\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:80/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nglobal\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend zabbix_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zabbix.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    \n    default_backend zabbix_backend\n\nbackend zabbix_backend\n    balance roundrobin\n    option httpchk GET /health\n    server zabbix1 127.0.0.1:80 check\n```\n\n### Caddy Configuration\n\n```caddy\nzabbix.example.com {\n    reverse_proxy 127.0.0.1:80 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection \"1; mode=block\"\n    }\n    \n    encode gzip\n}\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Create dedicated user\nsudo useradd --system --shell /bin/false --home /etc/zabbix zabbix || true\n\n# Set ownership\nsudo chown -R zabbix:zabbix /etc/zabbix\nsudo chown -R zabbix:zabbix /var/log/zabbix\n\n# Set permissions\nsudo chmod 750 /etc/zabbix\nsudo chmod 640 /etc/zabbix/*\nsudo chmod 750 /var/log/zabbix\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 80 proto tcp comment \"Zabbix\"\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=zabbix\nsudo firewall-cmd --permanent --service=zabbix --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=zabbix\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 80 || true\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/zabbix.key \\\n    -out /etc/ssl/certs/zabbix.crt \\\n    -subj \"/C=US/ST=State/L=City/O=Organization/CN=zabbix.example.com\"\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/zabbix.key\nsudo chmod 644 /etc/ssl/certs/zabbix.crt\n\n# For production, use Let's Encrypt\nsudo certbot certonly --standalone -d zabbix.example.com\n```\n\n### Fail2ban Configuration\n\n```ini\n# /etc/fail2ban/jail.d/zabbix.conf\n[zabbix]\nenabled = true\nport = 80\nfilter = zabbix\nlogpath = /var/log/zabbix/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\n```\n\n```ini\n# /etc/fail2ban/filter.d/zabbix.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from <HOST>.*$\n            ^.*Authentication failed.*from <HOST>.*$\n            ^.*Invalid credentials.*from <HOST>.*$\nignoreregex =\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE zabbix_db;\nCREATE USER zabbix_user WITH ENCRYPTED PASSWORD 'secure_password_here';\nGRANT ALL PRIVILEGES ON DATABASE zabbix_db TO zabbix_user;\n\\q\nEOF\n\n# Configure connection in Zabbix\necho \"DATABASE_URL=postgresql://zabbix_user:secure_password_here@localhost/zabbix_db\" | \\\n  sudo tee -a /etc/zabbix/zabbix.env\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE zabbix_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'zabbix_user'@'localhost' IDENTIFIED BY 'secure_password_here';\nGRANT ALL PRIVILEGES ON zabbix_db.* TO 'zabbix_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho \"DATABASE_URL=mysql://zabbix_user:secure_password_here@localhost/zabbix_db\" | \\\n  sudo tee -a /etc/zabbix/zabbix.env\n```\n\n### SQLite Backend (if applicable)\n\n```bash\n# Create database directory\nsudo mkdir -p /var/lib/zabbix\nsudo chown zabbix:zabbix /var/lib/zabbix\n\n# Initialize database\nsudo -u zabbix zabbix init-db\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters for better performance\ncat << 'EOF' | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat << 'EOF' | sudo tee -a /etc/security/limits.conf\nzabbix soft nofile 65535\nzabbix hard nofile 65535\nzabbix soft nproc 32768\nzabbix hard nproc 32768\nEOF\n```\n\n### Application Tuning\n\n```bash\n# Configure application-specific performance settings\ncat << 'EOF' | sudo tee -a /etc/zabbix/performance.conf\n# Performance configuration\nCacheSize=32M, StartPollers=5\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart zabbix-server\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: 'zabbix'\n    static_configs:\n      - targets: ['localhost:80/metrics']\n    metrics_path: '/metrics'\n    scrape_interval: 30s\n```\n\n### Health Check Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/zabbix-health\n\n# Check if service is running\nif ! systemctl is-active --quiet zabbix-server; then\n    echo \"CRITICAL: Zabbix service is not running\"\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 80 2>/dev/null; then\n    echo \"CRITICAL: Zabbix is not listening on port 80\"\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:80/health || echo \"999\")\nif (( $(echo \"$response_time > 5\" | bc -l) )); then\n    echo \"WARNING: Slow response time: ${response_time}s\"\n    exit 1\nfi\n\necho \"OK: Zabbix is healthy (response time: ${response_time}s)\"\nexit 0\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\ncat << 'EOF' | sudo tee /etc/logrotate.d/zabbix\n/var/log/zabbix/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 zabbix zabbix\n    postrotate\n        systemctl reload zabbix-server > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/zabbix\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/zabbix-backup\n\nBACKUP_DIR=\"/backup/zabbix\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/zabbix_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if needed for consistency)\necho \"Stopping Zabbix service...\"\nsystemctl stop zabbix-server\n\n# Backup configuration\necho \"Backing up configuration...\"\ntar -czf \"$BACKUP_FILE\" \\\n    /etc/zabbix \\\n    /var/lib/zabbix \\\n    /var/log/zabbix\n\n# Backup database (if applicable)\nif command -v pg_dump &> /dev/null; then\n    echo \"Backing up database...\"\n    sudo -u postgres pg_dump zabbix_db | gzip > \"$BACKUP_DIR/zabbix_db_$DATE.sql.gz\"\nfi\n\n# Start service\necho \"Starting Zabbix service...\"\nsystemctl start zabbix-server\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\nfind \"$BACKUP_DIR\" -name \"*.sql.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_FILE\"\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/zabbix-restore\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 <backup_file>\"\n    exit 1\nfi\n\nBACKUP_FILE=\"$1\"\n\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"Error: Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\n# Stop service\necho \"Stopping Zabbix service...\"\nsystemctl stop zabbix-server\n\n# Restore files\necho \"Restoring from backup...\"\ntar -xzf \"$BACKUP_FILE\" -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo \"$BACKUP_FILE\" | sed 's/.tar.gz$/_db.sql.gz/')\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"Restoring database...\"\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql zabbix_db\nfi\n\n# Fix permissions\nchown -R zabbix:zabbix /etc/zabbix\nchown -R zabbix:zabbix /var/lib/zabbix\n\n# Start service\necho \"Starting Zabbix service...\"\nsystemctl start zabbix-server\n\necho \"Restore completed successfully\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check service status and logs\nsudo systemctl status zabbix-server\nsudo journalctl -u zabbix-server -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 80\nsudo lsof -i :80\n\n# Verify configuration\nsudo zabbix --test || sudo zabbix-server configtest\n\n# Check permissions\nls -la /etc/zabbix\nls -la /var/log/zabbix\n```\n\n2. **Cannot access web interface**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep zabbix-server\ncurl -I http://localhost:80\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 80\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep zabbix\n```\n\n3. **High memory/CPU usage**:\n```bash\n# Monitor resource usage\ntop -p $(pgrep zabbix_server)\nhtop -p $(pgrep zabbix_server)\n\n# Check for memory leaks\nps aux | grep zabbix_server\ncat /proc/$(pgrep zabbix_server)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /var/log/zabbix/*.log | tail -50\n```\n\n4. **Database connection errors**:\n```bash\n# Test database connection\npsql -U zabbix_user -d zabbix_db -c \"SELECT 1;\"\nmysql -u zabbix_user -p zabbix_db -e \"SELECT 1;\"\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho \"debug = true\" | sudo tee -a /etc/zabbix/zabbix.conf\n\n# Restart with debug mode\nsudo systemctl stop zabbix-server\nsudo -u zabbix zabbix --debug\n\n# Watch debug logs\ntail -f /var/log/zabbix/debug.log\n```\n\n### Performance Analysis\n\n```bash\n# Profile CPU usage\nsudo perf record -p $(pgrep zabbix_server) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/zabbix.pcap port 80\nsudo tcpdump -r /tmp/zabbix.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep zabbix_server)\n```\n\n## Integration Examples\n\n### Docker Deployment\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  zabbix:\n    image: zabbix:zabbix\n    container_name: zabbix\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/etc/zabbix\n      - ./data:/var/lib/zabbix\n      - ./logs:/var/log/zabbix\n    networks:\n      - zabbix_network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:80/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  zabbix_network:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\n# zabbix-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zabbix\n  labels:\n    app: zabbix\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: zabbix\n  template:\n    metadata:\n      labels:\n        app: zabbix\n    spec:\n      containers:\n      - name: zabbix\n        image: zabbix:zabbix\n        ports:\n        - containerPort: 80\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /etc/zabbix\n        - name: data\n          mountPath: /var/lib/zabbix\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: zabbix-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: zabbix-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: zabbix\nspec:\n  selector:\n    app: zabbix\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: zabbix-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n```\n\n### Ansible Playbook\n\n```yaml\n---\n# zabbix-playbook.yml\n- name: Install and configure Zabbix\n  hosts: all\n  become: yes\n  vars:\n    zabbix_version: latest\n    zabbix_port: 80\n    zabbix_config_dir: /etc/zabbix\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - mysql, php, apache, zabbix-agent\n        state: present\n    \n    - name: Install Zabbix\n      package:\n        name: zabbix\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: \"{{ zabbix_config_dir }}\"\n        state: directory\n        owner: zabbix\n        group: zabbix\n        mode: '0750'\n    \n    - name: Deploy configuration\n      template:\n        src: zabbix.conf.j2\n        dest: \"{{ zabbix_config_dir }}/zabbix.conf\"\n        owner: zabbix\n        group: zabbix\n        mode: '0640'\n      notify: restart zabbix\n    \n    - name: Start and enable service\n      systemd:\n        name: zabbix-server\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: \"{{ zabbix_port }}/tcp\"\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart zabbix\n      systemd:\n        name: zabbix-server\n        state: restarted\n```\n\n### Terraform Configuration\n\n```hcl\n# zabbix.tf\nresource \"aws_instance\" \"zabbix_server\" {\n  ami           = var.ami_id\n  instance_type = \"t3.medium\"\n  \n  vpc_security_group_ids = [aws_security_group.zabbix.id]\n  \n  user_data = <<-EOF\n    #!/bin/bash\n    # Install Zabbix\n    apt-get update\n    apt-get install -y zabbix mysql, php, apache, zabbix-agent\n    \n    # Configure Zabbix\n    systemctl enable zabbix-server\n    systemctl start zabbix-server\n  EOF\n  \n  tags = {\n    Name = \"Zabbix Server\"\n    Application = \"Zabbix\"\n  }\n}\n\nresource \"aws_security_group\" \"zabbix\" {\n  name        = \"zabbix-sg\"\n  description = \"Security group for Zabbix\"\n  \n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  tags = {\n    Name = \"Zabbix Security Group\"\n  }\n}\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update zabbix\nsudo dnf update zabbix\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade zabbix\n\n# Arch Linux\nsudo pacman -Syu zabbix\n\n# Alpine Linux\napk update\napk upgrade zabbix\n\n# openSUSE\nsudo zypper ref\nsudo zypper update zabbix\n\n# FreeBSD\npkg update\npkg upgrade zabbix\n\n# Always backup before updates\n/usr/local/bin/zabbix-backup\n\n# Restart after updates\nsudo systemctl restart zabbix-server\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean old logs\nfind /var/log/zabbix -name \"*.log\" -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze zabbix_db\n\n# Check disk usage\ndf -h | grep -E \"(/$|zabbix)\"\ndu -sh /var/lib/zabbix\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u zabbix-server | grep -i \"error\\|fail\\|deny\"\n```\n\n### Health Monitoring Checklist\n\n- [ ] Service is running and enabled\n- [ ] Web interface is accessible\n- [ ] Database connections are healthy\n- [ ] Disk usage is below 80%\n- [ ] No critical errors in logs\n- [ ] Backups are running successfully\n- [ ] SSL certificates are valid\n- [ ] Security updates are applied\n\n## Additional Resources\n\n- Official Documentation: https://docs.zabbix.org/\n- GitHub Repository: https://github.com/zabbix/zabbix\n- Community Forum: https://forum.zabbix.org/\n- Wiki: https://wiki.zabbix.org/\n- Docker Hub: https://hub.docker.com/r/zabbix/zabbix\n- Security Advisories: https://security.zabbix.org/\n- Best Practices: https://docs.zabbix.org/best-practices\n- API Documentation: https://api.zabbix.org/\n- Comparison with Nagios, Prometheus, PRTG, Datadog: https://docs.zabbix.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">Zabbix is a free and open-source Monitoring Platform. An enterprise-class monitoring solution for networks and applications</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum</li>\n<li class=\"mobile-list-item\">Network: 80 ports required</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10 Pro</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default zabbix port)</li>\n<li class=\"mobile-list-item\">Firewall rules configured</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">mysql, php, apache, zabbix-agent</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zabbix\nsudo dnf install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zabbix || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zabbix\nsudo apt install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\nsudo pacman -S zabbix\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\napk add --no-cache zabbix\n\n# Enable and start service\nrc-update add zabbix-server default\nrc-service zabbix-server start\n\n# Verify installation\nzabbix --version || rc-service zabbix-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\nsudo zypper install -y zabbix mysql, php, apache, zabbix-agent\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zabbix || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix --version || systemctl status zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zabbix\n\n# Start service\nbrew services start zabbix\n\n# Verify installation\nzabbix --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zabbix\n\n# Enable in rc.conf\necho &#039;zabbix-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Verify installation\nzabbix --version || service zabbix-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install zabbix\n\n# Or using Scoop\nscoop install zabbix\n\n# Verify installation\nzabbix --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/zabbix\n\n# Set up basic configuration\nsudo tee /etc/zabbix/zabbix.conf &lt;&lt; &#039;EOF&#039;\n# Zabbix Configuration\nCacheSize=32M, StartPollers=5\nEOF\n\n# Set appropriate permissions\nsudo chown -R zabbix:zabbix /etc/zabbix || \\\n  sudo chown -R $(whoami):$(whoami) /etc/zabbix\n\n# Test configuration\nsudo zabbix --test || sudo zabbix-server configtest</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false zabbix || true\n\n# Secure configuration files\nsudo chmod 750 /etc/zabbix\nsudo chmod 640 /etc/zabbix/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zabbix-server\n\n# Start service\nsudo systemctl start zabbix-server\n\n# Stop service\nsudo systemctl stop zabbix-server\n\n# Restart service\nsudo systemctl restart zabbix-server\n\n# Reload configuration\nsudo systemctl reload zabbix-server\n\n# Check status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zabbix-server default\n\n# Start service\nrc-service zabbix-server start\n\n# Stop service\nrc-service zabbix-server stop\n\n# Restart service\nrc-service zabbix-server restart\n\n# Check status\nrc-service zabbix-server status\n\n# View logs\ntail -f /var/log/zabbix/zabbix-server.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zabbix-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Stop service\nservice zabbix-server stop\n\n# Restart service\nservice zabbix-server restart\n\n# Check status\nservice zabbix-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zabbix\nbrew services stop zabbix\nbrew services restart zabbix\n\n# Check status\nbrew services list | grep zabbix\n\n# View logs\ntail -f $(brew --prefix)/var/log/zabbix.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zabbix-server\n\n# Stop service\nnet stop zabbix-server\n\n# Using PowerShell\nStart-Service zabbix-server\nStop-Service zabbix-server\nRestart-Service zabbix-server\n\n# Check status\nGet-Service zabbix-server\n\n# Set to automatic startup\nSet-Service zabbix-server -StartupType Automatic</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/zabbix/zabbix.conf &lt;&lt; &#039;EOF&#039;\n# Performance tuning\nCacheSize=32M, StartPollers=5\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho &quot;vm.swappiness=10&quot; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zabbix_backend {\n    server 127.0.0.1:80;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name zabbix.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zabbix.example.com;\n\n    ssl_certificate /etc/ssl/certs/zabbix.crt;\n    ssl_certificate_key /etc/ssl/private/zabbix.key;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n\n    location / {\n        proxy_pass http://zabbix_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zabbix.example.com\n    Redirect permanent / https://zabbix.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zabbix.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zabbix.crt\n    SSLCertificateKeyFile /etc/ssl/private/zabbix.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    &lt;Location /&gt;\n        ProxyPass http://127.0.0.1:80/\n        ProxyPassReverse http://127.0.0.1:80/\n    &lt;/Location&gt;\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:80/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">global\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend zabbix_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zabbix.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    \n    default_backend zabbix_backend\n\nbackend zabbix_backend\n    balance roundrobin\n    option httpchk GET /health\n    server zabbix1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddy\">zabbix.example.com {\n    reverse_proxy 127.0.0.1:80 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection &quot;1; mode=block&quot;\n    }\n    \n    encode gzip\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user\nsudo useradd --system --shell /bin/false --home /etc/zabbix zabbix || true\n\n# Set ownership\nsudo chown -R zabbix:zabbix /etc/zabbix\nsudo chown -R zabbix:zabbix /var/log/zabbix\n\n# Set permissions\nsudo chmod 750 /etc/zabbix\nsudo chmod 640 /etc/zabbix/*\nsudo chmod 750 /var/log/zabbix\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 80 proto tcp comment &quot;Zabbix&quot;\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=zabbix\nsudo firewall-cmd --permanent --service=zabbix --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=zabbix\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 80 || true</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/zabbix.key \\\n    -out /etc/ssl/certs/zabbix.crt \\\n    -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=zabbix.example.com&quot;\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/zabbix.key\nsudo chmod 644 /etc/ssl/certs/zabbix.crt\n\n# For production, use Let&#039;s Encrypt\nsudo certbot certonly --standalone -d zabbix.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"fail2ban-configuration\" class=\"mobile-header\">Fail2ban Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/jail.d/zabbix.conf\n[zabbix]\nenabled = true\nport = 80\nfilter = zabbix\nlogpath = /var/log/zabbix/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/filter.d/zabbix.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from &lt;HOST&gt;.*$\n            ^.*Authentication failed.*from &lt;HOST&gt;.*$\n            ^.*Invalid credentials.*from &lt;HOST&gt;.*$\nignoreregex =</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE zabbix_db;\nCREATE USER zabbix_user WITH ENCRYPTED PASSWORD &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON DATABASE zabbix_db TO zabbix_user;\n\\q\nEOF\n\n# Configure connection in Zabbix\necho &quot;DATABASE_URL=postgresql://zabbix_user:secure_password_here@localhost/zabbix_db&quot; | \\\n  sudo tee -a /etc/zabbix/zabbix.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE zabbix_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;zabbix_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON zabbix_db.* TO &#039;zabbix_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho &quot;DATABASE_URL=mysql://zabbix_user:secure_password_here@localhost/zabbix_db&quot; | \\\n  sudo tee -a /etc/zabbix/zabbix.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"sqlite-backend-if-applicable\" class=\"mobile-header\">SQLite Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database directory\nsudo mkdir -p /var/lib/zabbix\nsudo chown zabbix:zabbix /var/lib/zabbix\n\n# Initialize database\nsudo -u zabbix zabbix init-db</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters for better performance\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/security/limits.conf\nzabbix soft nofile 65535\nzabbix hard nofile 65535\nzabbix soft nproc 32768\nzabbix hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-tuning\" class=\"mobile-header\">Application Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure application-specific performance settings\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/zabbix/performance.conf\n# Performance configuration\nCacheSize=32M, StartPollers=5\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart zabbix-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: &#039;zabbix&#039;\n    static_configs:\n      - targets: [&#039;localhost:80/metrics&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 30s</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-script\" class=\"mobile-header\">Health Check Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/zabbix-health\n\n# Check if service is running\nif ! systemctl is-active --quiet zabbix-server; then\n    echo &quot;CRITICAL: Zabbix service is not running&quot;\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 80 2&gt;/dev/null; then\n    echo &quot;CRITICAL: Zabbix is not listening on port 80&quot;\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w &#039;%{time_total}&#039; http://localhost:80/health || echo &quot;999&quot;)\nif (( $(echo &quot;$response_time &gt; 5&quot; | bc -l) )); then\n    echo &quot;WARNING: Slow response time: ${response_time}s&quot;\n    exit 1\nfi\n\necho &quot;OK: Zabbix is healthy (response time: ${response_time}s)&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\ncat &lt;&lt; &#039;EOF&#039; | sudo tee /etc/logrotate.d/zabbix\n/var/log/zabbix/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 zabbix zabbix\n    postrotate\n        systemctl reload zabbix-server &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/zabbix</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/zabbix-backup\n\nBACKUP_DIR=&quot;/backup/zabbix&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/zabbix_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if needed for consistency)\necho &quot;Stopping Zabbix service...&quot;\nsystemctl stop zabbix-server\n\n# Backup configuration\necho &quot;Backing up configuration...&quot;\ntar -czf &quot;$BACKUP_FILE&quot; \\\n    /etc/zabbix \\\n    /var/lib/zabbix \\\n    /var/log/zabbix\n\n# Backup database (if applicable)\nif command -v pg_dump &amp;&gt; /dev/null; then\n    echo &quot;Backing up database...&quot;\n    sudo -u postgres pg_dump zabbix_db | gzip &gt; &quot;$BACKUP_DIR/zabbix_db_$DATE.sql.gz&quot;\nfi\n\n# Start service\necho &quot;Starting Zabbix service...&quot;\nsystemctl start zabbix-server\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.sql.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_FILE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/zabbix-restore\n\nif [ $# -ne 1 ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    exit 1\nfi\n\nBACKUP_FILE=&quot;$1&quot;\n\nif [ ! -f &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Error: Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\n# Stop service\necho &quot;Stopping Zabbix service...&quot;\nsystemctl stop zabbix-server\n\n# Restore files\necho &quot;Restoring from backup...&quot;\ntar -xzf &quot;$BACKUP_FILE&quot; -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo &quot;$BACKUP_FILE&quot; | sed &#039;s/.tar.gz$/_db.sql.gz/&#039;)\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;Restoring database...&quot;\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql zabbix_db\nfi\n\n# Fix permissions\nchown -R zabbix:zabbix /etc/zabbix\nchown -R zabbix:zabbix /var/lib/zabbix\n\n# Start service\necho &quot;Starting Zabbix service...&quot;\nsystemctl start zabbix-server\n\necho &quot;Restore completed successfully&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status and logs\nsudo systemctl status zabbix-server\nsudo journalctl -u zabbix-server -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 80\nsudo lsof -i :80\n\n# Verify configuration\nsudo zabbix --test || sudo zabbix-server configtest\n\n# Check permissions\nls -la /etc/zabbix\nls -la /var/log/zabbix</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Cannot access web interface</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep zabbix-server\ncurl -I http://localhost:80\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 80\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep zabbix</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>High memory/CPU usage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor resource usage\ntop -p $(pgrep zabbix_server)\nhtop -p $(pgrep zabbix_server)\n\n# Check for memory leaks\nps aux | grep zabbix_server\ncat /proc/$(pgrep zabbix_server)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /var/log/zabbix/*.log | tail -50</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Database connection errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test database connection\npsql -U zabbix_user -d zabbix_db -c &quot;SELECT 1;&quot;\nmysql -u zabbix_user -p zabbix_db -e &quot;SELECT 1;&quot;\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &quot;debug = true&quot; | sudo tee -a /etc/zabbix/zabbix.conf\n\n# Restart with debug mode\nsudo systemctl stop zabbix-server\nsudo -u zabbix zabbix --debug\n\n# Watch debug logs\ntail -f /var/log/zabbix/debug.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-analysis\" class=\"mobile-header\">Performance Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Profile CPU usage\nsudo perf record -p $(pgrep zabbix_server) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/zabbix.pcap port 80\nsudo tcpdump -r /tmp/zabbix.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep zabbix_server)</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-deployment\" class=\"mobile-header\">Docker Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml\nversion: &#039;3.8&#039;\n\nservices:\n  zabbix:\n    image: zabbix:zabbix\n    container_name: zabbix\n    restart: unless-stopped\n    ports:\n      - &quot;80:80&quot;\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/etc/zabbix\n      - ./data:/var/lib/zabbix\n      - ./logs:/var/log/zabbix\n    networks:\n      - zabbix_network\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:80/health&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  zabbix_network:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># zabbix-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zabbix\n  labels:\n    app: zabbix\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: zabbix\n  template:\n    metadata:\n      labels:\n        app: zabbix\n    spec:\n      containers:\n      - name: zabbix\n        image: zabbix:zabbix\n        ports:\n        - containerPort: 80\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /etc/zabbix\n        - name: data\n          mountPath: /var/lib/zabbix\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: zabbix-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: zabbix-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: zabbix\nspec:\n  selector:\n    app: zabbix\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 80\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: zabbix-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n# zabbix-playbook.yml\n- name: Install and configure Zabbix\n  hosts: all\n  become: yes\n  vars:\n    zabbix_version: latest\n    zabbix_port: 80\n    zabbix_config_dir: /etc/zabbix\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - mysql, php, apache, zabbix-agent\n        state: present\n    \n    - name: Install Zabbix\n      package:\n        name: zabbix\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: &quot;{{ zabbix_config_dir }}&quot;\n        state: directory\n        owner: zabbix\n        group: zabbix\n        mode: &#039;0750&#039;\n    \n    - name: Deploy configuration\n      template:\n        src: zabbix.conf.j2\n        dest: &quot;{{ zabbix_config_dir }}/zabbix.conf&quot;\n        owner: zabbix\n        group: zabbix\n        mode: &#039;0640&#039;\n      notify: restart zabbix\n    \n    - name: Start and enable service\n      systemd:\n        name: zabbix-server\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: &quot;{{ zabbix_port }}/tcp&quot;\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart zabbix\n      systemd:\n        name: zabbix-server\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-configuration\" class=\"mobile-header\">Terraform Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"hcl\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">hcl</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-hcl\"># zabbix.tf\nresource &quot;aws_instance&quot; &quot;zabbix_server&quot; {\n  ami           = var.ami_id\n  instance_type = &quot;t3.medium&quot;\n  \n  vpc_security_group_ids = [aws_security_group.zabbix.id]\n  \n  user_data = &lt;&lt;-EOF\n    #!/bin/bash\n    # Install Zabbix\n    apt-get update\n    apt-get install -y zabbix mysql, php, apache, zabbix-agent\n    \n    # Configure Zabbix\n    systemctl enable zabbix-server\n    systemctl start zabbix-server\n  EOF\n  \n  tags = {\n    Name = &quot;Zabbix Server&quot;\n    Application = &quot;Zabbix&quot;\n  }\n}\n\nresource &quot;aws_security_group&quot; &quot;zabbix&quot; {\n  name        = &quot;zabbix-sg&quot;\n  description = &quot;Security group for Zabbix&quot;\n  \n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  tags = {\n    Name = &quot;Zabbix Security Group&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update zabbix\nsudo dnf update zabbix\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade zabbix\n\n# Arch Linux\nsudo pacman -Syu zabbix\n\n# Alpine Linux\napk update\napk upgrade zabbix\n\n# openSUSE\nsudo zypper ref\nsudo zypper update zabbix\n\n# FreeBSD\npkg update\npkg upgrade zabbix\n\n# Always backup before updates\n/usr/local/bin/zabbix-backup\n\n# Restart after updates\nsudo systemctl restart zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean old logs\nfind /var/log/zabbix -name &quot;*.log&quot; -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze zabbix_db\n\n# Check disk usage\ndf -h | grep -E &quot;(/$|zabbix)&quot;\ndu -sh /var/lib/zabbix\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u zabbix-server | grep -i &quot;error\\|fail\\|deny&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring-checklist\" class=\"mobile-header\">Health Monitoring Checklist</h3>\n<li class=\"mobile-list-item\">[ ] Service is running and enabled</li>\n<li class=\"mobile-list-item\">[ ] Web interface is accessible</li>\n<li class=\"mobile-list-item\">[ ] Database connections are healthy</li>\n<li class=\"mobile-list-item\">[ ] Disk usage is below 80%</li>\n<li class=\"mobile-list-item\">[ ] No critical errors in logs</li>\n<li class=\"mobile-list-item\">[ ] Backups are running successfully</li>\n<li class=\"mobile-list-item\">[ ] SSL certificates are valid</li>\n<li class=\"mobile-list-item\">[ ] Security updates are applied</li>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zabbix.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zabbix/zabbix</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zabbix.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.zabbix.org/</li>\n<li class=\"mobile-list-item\">Docker Hub: https://hub.docker.com/r/zabbix/zabbix</li>\n<li class=\"mobile-list-item\">Security Advisories: https://security.zabbix.org/</li>\n<li class=\"mobile-list-item\">Best Practices: https://docs.zabbix.org/best-practices</li>\n<li class=\"mobile-list-item\">API Documentation: https://api.zabbix.org/</li>\n<li class=\"mobile-list-item\">Comparison with Nagios, Prometheus, PRTG, Datadog: https://docs.zabbix.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "16 min",
      "wordCount": 3115,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 3,
          "text": "Security Hardening",
          "id": "security-hardening"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 3,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "High Availability Setup",
          "id": "high-availability-setup"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 3,
          "text": "Caddy Configuration",
          "id": "caddy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 3,
          "text": "SSL/TLS Configuration",
          "id": "ssltls-configuration"
        },
        {
          "level": 3,
          "text": "Fail2ban Configuration",
          "id": "fail2ban-configuration"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 3,
          "text": "PostgreSQL Backend (if applicable)",
          "id": "postgresql-backend-if-applicable"
        },
        {
          "level": 3,
          "text": "MySQL/MariaDB Backend (if applicable)",
          "id": "mysqlmariadb-backend-if-applicable"
        },
        {
          "level": 3,
          "text": "SQLite Backend (if applicable)",
          "id": "sqlite-backend-if-applicable"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 3,
          "text": "Application Tuning",
          "id": "application-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Prometheus Integration",
          "id": "prometheus-integration"
        },
        {
          "level": 3,
          "text": "Health Check Script",
          "id": "health-check-script"
        },
        {
          "level": 3,
          "text": "Log Monitoring",
          "id": "log-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Script",
          "id": "restore-script"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 3,
          "text": "Debug Mode",
          "id": "debug-mode"
        },
        {
          "level": 3,
          "text": "Performance Analysis",
          "id": "performance-analysis"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Deployment",
          "id": "docker-deployment"
        },
        {
          "level": 3,
          "text": "Kubernetes Deployment",
          "id": "kubernetes-deployment"
        },
        {
          "level": 3,
          "text": "Ansible Playbook",
          "id": "ansible-playbook"
        },
        {
          "level": 3,
          "text": "Terraform Configuration",
          "id": "terraform-configuration"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance Tasks",
          "id": "regular-maintenance-tasks"
        },
        {
          "level": 3,
          "text": "Health Monitoring Checklist",
          "id": "health-monitoring-checklist"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:08.483Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "zabbix-server",
      "displayName": "zabbix Installation Guide",
      "slug": "zabbix-server",
      "description": "zabbix is a free and open-source enterprise-class monitoring solution. Zabbix provides comprehensive monitoring for networks, servers, and applications, serving as an open-source alternative to Nagios, PRTG, or SolarWinds",
      "category": "miscellaneous",
      "subcategory": "miscellaneous",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443,
        10050,
        10051
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "miscellaneous",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/miscellaneous/zabbix-server",
      "documentationUrl": "https://howtomgr.github.io/miscellaneous/zabbix-server",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/zabbix-server",
      "updatedAt": "2025-09-16T18:04:42Z",
      "createdAt": "2025-09-16T08:43:39Z",
      "readmeRaw": "# zabbix Installation Guide\n\nzabbix is a free and open-source enterprise-class monitoring solution. Zabbix provides comprehensive monitoring for networks, servers, and applications, serving as an open-source alternative to Nagios, PRTG, or SolarWinds\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores recommended\n  - RAM: 2GB minimum (8GB+ for large deployments)\n  - Storage: 10GB+ for metrics\n  - Network: Agent and SNMP connectivity\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 10051 (default zabbix port)\n  - Port 10050 for agents\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zabbix\nsudo dnf install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix_server --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zabbix\nsudo apt install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo ufw allow 10051\n\n# Verify installation\nzabbix_server --version\n```\n\n### Arch Linux\n\n```bash\n# Install zabbix\nsudo pacman -S zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Verify installation\nzabbix_server --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zabbix\napk add --no-cache zabbix-server\n\n# Enable and start service\nrc-update add zabbix-server default\nrc-service zabbix-server start\n\n# Verify installation\nzabbix_server --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zabbix\nsudo zypper install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix_server --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zabbix-server\n\n# Start service\nbrew services start zabbix-server\n\n# Verify installation\nzabbix_server --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zabbix-server\n\n# Enable in rc.conf\necho 'zabbix-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Verify installation\nzabbix_server --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zabbix-server\n\n# Or using Scoop\nscoop install zabbix-server\n\n# Verify installation\nzabbix_server --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zabbix-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzabbix_server --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zabbix-server\n\n# Start service\nsudo systemctl start zabbix-server\n\n# Stop service\nsudo systemctl stop zabbix-server\n\n# Restart service\nsudo systemctl restart zabbix-server\n\n# Check status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zabbix-server default\n\n# Start service\nrc-service zabbix-server start\n\n# Stop service\nrc-service zabbix-server stop\n\n# Restart service\nrc-service zabbix-server restart\n\n# Check status\nrc-service zabbix-server status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zabbix-server_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Stop service\nservice zabbix-server stop\n\n# Restart service\nservice zabbix-server restart\n\n# Check status\nservice zabbix-server status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zabbix-server\nbrew services stop zabbix-server\nbrew services restart zabbix-server\n\n# Check status\nbrew services list | grep zabbix-server\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zabbix-server\n\n# Stop service\nnet stop zabbix-server\n\n# Using PowerShell\nStart-Service zabbix-server\nStop-Service zabbix-server\nRestart-Service zabbix-server\n\n# Check status\nGet-Service zabbix-server\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zabbix-server_backend {\n    server 127.0.0.1:10051;\n}\n\nserver {\n    listen 80;\n    server_name zabbix-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zabbix-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/zabbix-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zabbix-server.example.com.key;\n\n    location / {\n        proxy_pass http://zabbix-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zabbix-server.example.com\n    Redirect permanent / https://zabbix-server.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zabbix-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zabbix-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zabbix-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:10051/\n    ProxyPassReverse / http://127.0.0.1:10051/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zabbix-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zabbix-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zabbix-server_backend\n\nbackend zabbix-server_backend\n    balance roundrobin\n    server zabbix-server1 127.0.0.1:10051 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zabbix-server:zabbix-server /etc/zabbix-server\nsudo chmod 750 /etc/zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f\n\n# Monitor resource usage\ntop -p $(pgrep zabbix-server)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zabbix-server\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zabbix-server-backup-$DATE.tar.gz\" /etc/zabbix-server /var/lib/zabbix-server\n\necho \"Backup completed: $BACKUP_DIR/zabbix-server-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zabbix-server\n\n# Restore from backup\ntar -xzf /backup/zabbix-server/zabbix-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zabbix-server\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zabbix-server -n 100\nsudo tail -f /var/log/zabbix-server/zabbix-server.log\n\n# Check configuration\nzabbix_server --version\n\n# Check permissions\nls -la /etc/zabbix-server\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 10051\n\n# Test connectivity\ntelnet localhost 10051\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zabbix-server)\n\n# Check disk I/O\niotop -p $(pgrep zabbix-server)\n\n# Check connections\nss -an | grep 10051\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zabbix-server:\n    image: zabbix-server:latest\n    ports:\n      - \"10051:10051\"\n    volumes:\n      - ./config:/etc/zabbix-server\n      - ./data:/var/lib/zabbix-server\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zabbix-server\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zabbix-server\n\n# Arch Linux\nsudo pacman -Syu zabbix-server\n\n# Alpine Linux\napk update && apk upgrade zabbix-server\n\n# openSUSE\nsudo zypper update zabbix-server\n\n# FreeBSD\npkg update && pkg upgrade zabbix-server\n\n# Always backup before updates\ntar -czf /backup/zabbix-server-pre-update-$(date +%Y%m%d).tar.gz /etc/zabbix-server\n\n# Restart after updates\nsudo systemctl restart zabbix-server\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zabbix-server\n\n# Clean old logs\nfind /var/log/zabbix-server -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zabbix-server\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zabbix-server.org/\n- GitHub Repository: https://github.com/zabbix-server/zabbix-server\n- Community Forum: https://forum.zabbix-server.org/\n- Best Practices Guide: https://docs.zabbix-server.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">zabbix is a free and open-source enterprise-class monitoring solution. Zabbix provides comprehensive monitoring for networks, servers, and applications, serving as an open-source alternative to Nagios, PRTG, or SolarWinds</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores recommended</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ for large deployments)</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ for metrics</li>\n<li class=\"mobile-list-item\">Network: Agent and SNMP connectivity</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 10051 (default zabbix port)</li>\n<li class=\"mobile-list-item\">Port 10050 for agents</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zabbix\nsudo dnf install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zabbix\nsudo apt install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo ufw allow 10051\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\nsudo pacman -S zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\napk add --no-cache zabbix-server\n\n# Enable and start service\nrc-update add zabbix-server default\nrc-service zabbix-server start\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zabbix\nsudo zypper install -y zabbix-server\n\n# Enable and start service\nsudo systemctl enable --now zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zabbix-server\n\n# Start service\nbrew services start zabbix-server\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zabbix-server\n\n# Enable in rc.conf\necho &#039;zabbix-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zabbix-server\n\n# Or using Scoop\nscoop install zabbix-server\n\n# Verify installation\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zabbix-server\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzabbix_server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zabbix-server\n\n# Start service\nsudo systemctl start zabbix-server\n\n# Stop service\nsudo systemctl stop zabbix-server\n\n# Restart service\nsudo systemctl restart zabbix-server\n\n# Check status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zabbix-server default\n\n# Start service\nrc-service zabbix-server start\n\n# Stop service\nrc-service zabbix-server stop\n\n# Restart service\nrc-service zabbix-server restart\n\n# Check status\nrc-service zabbix-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zabbix-server_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zabbix-server start\n\n# Stop service\nservice zabbix-server stop\n\n# Restart service\nservice zabbix-server restart\n\n# Check status\nservice zabbix-server status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zabbix-server\nbrew services stop zabbix-server\nbrew services restart zabbix-server\n\n# Check status\nbrew services list | grep zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zabbix-server\n\n# Stop service\nnet stop zabbix-server\n\n# Using PowerShell\nStart-Service zabbix-server\nStop-Service zabbix-server\nRestart-Service zabbix-server\n\n# Check status\nGet-Service zabbix-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zabbix-server_backend {\n    server 127.0.0.1:10051;\n}\n\nserver {\n    listen 80;\n    server_name zabbix-server.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zabbix-server.example.com;\n\n    ssl_certificate /etc/ssl/certs/zabbix-server.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zabbix-server.example.com.key;\n\n    location / {\n        proxy_pass http://zabbix-server_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zabbix-server.example.com\n    Redirect permanent / https://zabbix-server.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zabbix-server.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zabbix-server.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zabbix-server.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:10051/\n    ProxyPassReverse / http://127.0.0.1:10051/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zabbix-server_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zabbix-server.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zabbix-server_backend\n\nbackend zabbix-server_backend\n    balance roundrobin\n    server zabbix-server1 127.0.0.1:10051 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zabbix-server:zabbix-server /etc/zabbix-server\nsudo chmod 750 /etc/zabbix-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=10051/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zabbix-server\n\n# View logs\nsudo journalctl -u zabbix-server -f\n\n# Monitor resource usage\ntop -p $(pgrep zabbix-server)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zabbix-server&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zabbix-server-backup-$DATE.tar.gz&quot; /etc/zabbix-server /var/lib/zabbix-server\n\necho &quot;Backup completed: $BACKUP_DIR/zabbix-server-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zabbix-server\n\n# Restore from backup\ntar -xzf /backup/zabbix-server/zabbix-server-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zabbix-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zabbix-server -n 100\nsudo tail -f /var/log/zabbix-server/zabbix-server.log\n\n# Check configuration\nzabbix_server --version\n\n# Check permissions\nls -la /etc/zabbix-server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 10051\n\n# Test connectivity\ntelnet localhost 10051\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zabbix-server)\n\n# Check disk I/O\niotop -p $(pgrep zabbix-server)\n\n# Check connections\nss -an | grep 10051</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zabbix-server:\n    image: zabbix-server:latest\n    ports:\n      - &quot;10051:10051&quot;\n    volumes:\n      - ./config:/etc/zabbix-server\n      - ./data:/var/lib/zabbix-server\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zabbix-server\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zabbix-server\n\n# Arch Linux\nsudo pacman -Syu zabbix-server\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zabbix-server\n\n# openSUSE\nsudo zypper update zabbix-server\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zabbix-server\n\n# Always backup before updates\ntar -czf /backup/zabbix-server-pre-update-$(date +%Y%m%d).tar.gz /etc/zabbix-server\n\n# Restart after updates\nsudo systemctl restart zabbix-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zabbix-server\n\n# Clean old logs\nfind /var/log/zabbix-server -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zabbix-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zabbix-server.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zabbix-server/zabbix-server</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zabbix-server.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zabbix-server.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1289,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:08.188Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "zen_cart",
      "displayName": "zen-cart Installation Guide",
      "slug": "zen_cart",
      "description": "zen-cart is a free and open-source e-commerce software. Zen Cart provides user-friendly e-commerce software",
      "category": "miscellaneous",
      "subcategory": "miscellaneous",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "miscellaneous",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/miscellaneous/zen_cart",
      "documentationUrl": "https://howtomgr.github.io/miscellaneous/zen_cart",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/zen_cart",
      "updatedAt": "2025-09-16T18:04:49Z",
      "createdAt": "2025-09-16T08:43:53Z",
      "readmeRaw": "# zen-cart Installation Guide\n\nzen-cart is a free and open-source e-commerce software. Zen Cart provides user-friendly e-commerce software\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 1GB minimum\n  - Storage: 5GB for data\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default zen-cart port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zen-cart\nsudo dnf install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzen-cart --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zen-cart\nsudo apt install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nzen-cart --version\n```\n\n### Arch Linux\n\n```bash\n# Install zen-cart\nsudo pacman -S zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Verify installation\nzen-cart --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zen-cart\napk add --no-cache zen_cart\n\n# Enable and start service\nrc-update add zen-cart default\nrc-service zen-cart start\n\n# Verify installation\nzen-cart --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zen-cart\nsudo zypper install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzen-cart --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zen_cart\n\n# Start service\nbrew services start zen_cart\n\n# Verify installation\nzen-cart --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zen_cart\n\n# Enable in rc.conf\necho 'zen-cart_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zen-cart start\n\n# Verify installation\nzen-cart --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zen_cart\n\n# Or using Scoop\nscoop install zen_cart\n\n# Verify installation\nzen-cart --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zen_cart\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzen-cart --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zen-cart\n\n# Start service\nsudo systemctl start zen-cart\n\n# Stop service\nsudo systemctl stop zen-cart\n\n# Restart service\nsudo systemctl restart zen-cart\n\n# Check status\nsudo systemctl status zen-cart\n\n# View logs\nsudo journalctl -u zen-cart -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zen-cart default\n\n# Start service\nrc-service zen-cart start\n\n# Stop service\nrc-service zen-cart stop\n\n# Restart service\nrc-service zen-cart restart\n\n# Check status\nrc-service zen-cart status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zen-cart_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zen-cart start\n\n# Stop service\nservice zen-cart stop\n\n# Restart service\nservice zen-cart restart\n\n# Check status\nservice zen-cart status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zen_cart\nbrew services stop zen_cart\nbrew services restart zen_cart\n\n# Check status\nbrew services list | grep zen_cart\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zen-cart\n\n# Stop service\nnet stop zen-cart\n\n# Using PowerShell\nStart-Service zen-cart\nStop-Service zen-cart\nRestart-Service zen-cart\n\n# Check status\nGet-Service zen-cart\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zen_cart_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name zen_cart.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zen_cart.example.com;\n\n    ssl_certificate /etc/ssl/certs/zen_cart.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zen_cart.example.com.key;\n\n    location / {\n        proxy_pass http://zen_cart_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zen_cart.example.com\n    Redirect permanent / https://zen_cart.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zen_cart.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zen_cart.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zen_cart.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zen_cart_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zen_cart.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zen_cart_backend\n\nbackend zen_cart_backend\n    balance roundrobin\n    server zen_cart1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zen_cart:zen_cart /etc/zen_cart\nsudo chmod 750 /etc/zen_cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zen-cart\n\n# View logs\nsudo journalctl -u zen-cart -f\n\n# Monitor resource usage\ntop -p $(pgrep zen_cart)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zen_cart\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zen_cart-backup-$DATE.tar.gz\" /etc/zen_cart /var/lib/zen_cart\n\necho \"Backup completed: $BACKUP_DIR/zen_cart-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zen-cart\n\n# Restore from backup\ntar -xzf /backup/zen_cart/zen_cart-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zen-cart\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zen-cart -n 100\nsudo tail -f /var/log/zen_cart/zen_cart.log\n\n# Check configuration\nzen-cart --version\n\n# Check permissions\nls -la /etc/zen_cart\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zen_cart)\n\n# Check disk I/O\niotop -p $(pgrep zen_cart)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zen_cart:\n    image: zen_cart:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/zen_cart\n      - ./data:/var/lib/zen_cart\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zen_cart\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zen_cart\n\n# Arch Linux\nsudo pacman -Syu zen_cart\n\n# Alpine Linux\napk update && apk upgrade zen_cart\n\n# openSUSE\nsudo zypper update zen_cart\n\n# FreeBSD\npkg update && pkg upgrade zen_cart\n\n# Always backup before updates\ntar -czf /backup/zen_cart-pre-update-$(date +%Y%m%d).tar.gz /etc/zen_cart\n\n# Restart after updates\nsudo systemctl restart zen-cart\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zen_cart\n\n# Clean old logs\nfind /var/log/zen_cart -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zen_cart\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zen_cart.org/\n- GitHub Repository: https://github.com/zen_cart/zen_cart\n- Community Forum: https://forum.zen_cart.org/\n- Best Practices Guide: https://docs.zen_cart.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">zen-cart is a free and open-source e-commerce software. Zen Cart provides user-friendly e-commerce software</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 1GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 5GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default zen-cart port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zen-cart\nsudo dnf install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zen-cart\nsudo apt install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zen-cart\nsudo pacman -S zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zen-cart\napk add --no-cache zen_cart\n\n# Enable and start service\nrc-update add zen-cart default\nrc-service zen-cart start\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zen-cart\nsudo zypper install -y zen_cart\n\n# Enable and start service\nsudo systemctl enable --now zen-cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zen_cart\n\n# Start service\nbrew services start zen_cart\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zen_cart\n\n# Enable in rc.conf\necho &#039;zen-cart_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zen-cart start\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zen_cart\n\n# Or using Scoop\nscoop install zen_cart\n\n# Verify installation\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zen_cart\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzen-cart --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zen-cart\n\n# Start service\nsudo systemctl start zen-cart\n\n# Stop service\nsudo systemctl stop zen-cart\n\n# Restart service\nsudo systemctl restart zen-cart\n\n# Check status\nsudo systemctl status zen-cart\n\n# View logs\nsudo journalctl -u zen-cart -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zen-cart default\n\n# Start service\nrc-service zen-cart start\n\n# Stop service\nrc-service zen-cart stop\n\n# Restart service\nrc-service zen-cart restart\n\n# Check status\nrc-service zen-cart status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zen-cart_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zen-cart start\n\n# Stop service\nservice zen-cart stop\n\n# Restart service\nservice zen-cart restart\n\n# Check status\nservice zen-cart status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zen_cart\nbrew services stop zen_cart\nbrew services restart zen_cart\n\n# Check status\nbrew services list | grep zen_cart</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zen-cart\n\n# Stop service\nnet stop zen-cart\n\n# Using PowerShell\nStart-Service zen-cart\nStop-Service zen-cart\nRestart-Service zen-cart\n\n# Check status\nGet-Service zen-cart</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zen_cart_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name zen_cart.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zen_cart.example.com;\n\n    ssl_certificate /etc/ssl/certs/zen_cart.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zen_cart.example.com.key;\n\n    location / {\n        proxy_pass http://zen_cart_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zen_cart.example.com\n    Redirect permanent / https://zen_cart.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zen_cart.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zen_cart.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zen_cart.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zen_cart_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zen_cart.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zen_cart_backend\n\nbackend zen_cart_backend\n    balance roundrobin\n    server zen_cart1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zen_cart:zen_cart /etc/zen_cart\nsudo chmod 750 /etc/zen_cart\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zen-cart\n\n# View logs\nsudo journalctl -u zen-cart -f\n\n# Monitor resource usage\ntop -p $(pgrep zen_cart)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zen_cart&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zen_cart-backup-$DATE.tar.gz&quot; /etc/zen_cart /var/lib/zen_cart\n\necho &quot;Backup completed: $BACKUP_DIR/zen_cart-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zen-cart\n\n# Restore from backup\ntar -xzf /backup/zen_cart/zen_cart-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zen-cart</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zen-cart -n 100\nsudo tail -f /var/log/zen_cart/zen_cart.log\n\n# Check configuration\nzen-cart --version\n\n# Check permissions\nls -la /etc/zen_cart</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zen_cart)\n\n# Check disk I/O\niotop -p $(pgrep zen_cart)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zen_cart:\n    image: zen_cart:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/zen_cart\n      - ./data:/var/lib/zen_cart\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zen_cart\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zen_cart\n\n# Arch Linux\nsudo pacman -Syu zen_cart\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zen_cart\n\n# openSUSE\nsudo zypper update zen_cart\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zen_cart\n\n# Always backup before updates\ntar -czf /backup/zen_cart-pre-update-$(date +%Y%m%d).tar.gz /etc/zen_cart\n\n# Restart after updates\nsudo systemctl restart zen-cart</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zen_cart\n\n# Clean old logs\nfind /var/log/zen_cart -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zen_cart</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zen_cart.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zen_cart/zen_cart</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zen_cart.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zen_cart.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1265,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:07.919Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "zerotier-one",
      "displayName": "zerotier Installation Guide",
      "slug": "zerotier-one",
      "description": "zerotier is a free and open-source global virtual networking. ZeroTier creates secure peer-to-peer virtual networks, serving as a software-defined networking solution for distributed teams",
      "category": "miscellaneous",
      "subcategory": "miscellaneous",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443,
        9993
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "miscellaneous",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/miscellaneous/zerotier-one",
      "documentationUrl": "https://howtomgr.github.io/miscellaneous/zerotier-one",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/zerotier-one",
      "updatedAt": "2025-09-16T18:04:57Z",
      "createdAt": "2025-09-16T08:44:08Z",
      "readmeRaw": "# zerotier Installation Guide\n\nzerotier is a free and open-source global virtual networking. ZeroTier creates secure peer-to-peer virtual networks, serving as a software-defined networking solution for distributed teams\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB for installation\n  - Network: UDP port 9993\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9993 (default zerotier port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zerotier\nsudo dnf install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzerotier-cli status\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zerotier\nsudo apt install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo ufw allow 9993\n\n# Verify installation\nzerotier-cli status\n```\n\n### Arch Linux\n\n```bash\n# Install zerotier\nsudo pacman -S zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Verify installation\nzerotier-cli status\n```\n\n### Alpine Linux\n\n```bash\n# Install zerotier\napk add --no-cache zerotier-one\n\n# Enable and start service\nrc-update add zerotier-one default\nrc-service zerotier-one start\n\n# Verify installation\nzerotier-cli status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zerotier\nsudo zypper install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzerotier-cli status\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zerotier-one\n\n# Start service\nbrew services start zerotier-one\n\n# Verify installation\nzerotier-cli status\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zerotier-one\n\n# Enable in rc.conf\necho 'zerotier-one_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zerotier-one start\n\n# Verify installation\nzerotier-cli status\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zerotier-one\n\n# Or using Scoop\nscoop install zerotier-one\n\n# Verify installation\nzerotier-cli status\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zerotier-one\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzerotier-cli status\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zerotier-one\n\n# Start service\nsudo systemctl start zerotier-one\n\n# Stop service\nsudo systemctl stop zerotier-one\n\n# Restart service\nsudo systemctl restart zerotier-one\n\n# Check status\nsudo systemctl status zerotier-one\n\n# View logs\nsudo journalctl -u zerotier-one -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zerotier-one default\n\n# Start service\nrc-service zerotier-one start\n\n# Stop service\nrc-service zerotier-one stop\n\n# Restart service\nrc-service zerotier-one restart\n\n# Check status\nrc-service zerotier-one status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zerotier-one_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zerotier-one start\n\n# Stop service\nservice zerotier-one stop\n\n# Restart service\nservice zerotier-one restart\n\n# Check status\nservice zerotier-one status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zerotier-one\nbrew services stop zerotier-one\nbrew services restart zerotier-one\n\n# Check status\nbrew services list | grep zerotier-one\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zerotier-one\n\n# Stop service\nnet stop zerotier-one\n\n# Using PowerShell\nStart-Service zerotier-one\nStop-Service zerotier-one\nRestart-Service zerotier-one\n\n# Check status\nGet-Service zerotier-one\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zerotier-one_backend {\n    server 127.0.0.1:9993;\n}\n\nserver {\n    listen 80;\n    server_name zerotier-one.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zerotier-one.example.com;\n\n    ssl_certificate /etc/ssl/certs/zerotier-one.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zerotier-one.example.com.key;\n\n    location / {\n        proxy_pass http://zerotier-one_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zerotier-one.example.com\n    Redirect permanent / https://zerotier-one.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zerotier-one.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zerotier-one.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zerotier-one.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9993/\n    ProxyPassReverse / http://127.0.0.1:9993/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zerotier-one_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zerotier-one.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zerotier-one_backend\n\nbackend zerotier-one_backend\n    balance roundrobin\n    server zerotier-one1 127.0.0.1:9993 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zerotier-one:zerotier-one /etc/zerotier-one\nsudo chmod 750 /etc/zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zerotier-one\n\n# View logs\nsudo journalctl -u zerotier-one -f\n\n# Monitor resource usage\ntop -p $(pgrep zerotier-one)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zerotier-one\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zerotier-one-backup-$DATE.tar.gz\" /etc/zerotier-one /var/lib/zerotier-one\n\necho \"Backup completed: $BACKUP_DIR/zerotier-one-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zerotier-one\n\n# Restore from backup\ntar -xzf /backup/zerotier-one/zerotier-one-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zerotier-one\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zerotier-one -n 100\nsudo tail -f /var/log/zerotier-one/zerotier-one.log\n\n# Check configuration\nzerotier-cli status\n\n# Check permissions\nls -la /etc/zerotier-one\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9993\n\n# Test connectivity\ntelnet localhost 9993\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zerotier-one)\n\n# Check disk I/O\niotop -p $(pgrep zerotier-one)\n\n# Check connections\nss -an | grep 9993\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zerotier-one:\n    image: zerotier-one:latest\n    ports:\n      - \"9993:9993\"\n    volumes:\n      - ./config:/etc/zerotier-one\n      - ./data:/var/lib/zerotier-one\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zerotier-one\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zerotier-one\n\n# Arch Linux\nsudo pacman -Syu zerotier-one\n\n# Alpine Linux\napk update && apk upgrade zerotier-one\n\n# openSUSE\nsudo zypper update zerotier-one\n\n# FreeBSD\npkg update && pkg upgrade zerotier-one\n\n# Always backup before updates\ntar -czf /backup/zerotier-one-pre-update-$(date +%Y%m%d).tar.gz /etc/zerotier-one\n\n# Restart after updates\nsudo systemctl restart zerotier-one\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zerotier-one\n\n# Clean old logs\nfind /var/log/zerotier-one -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zerotier-one\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zerotier-one.org/\n- GitHub Repository: https://github.com/zerotier-one/zerotier-one\n- Community Forum: https://forum.zerotier-one.org/\n- Best Practices Guide: https://docs.zerotier-one.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">zerotier is a free and open-source global virtual networking. ZeroTier creates secure peer-to-peer virtual networks, serving as a software-defined networking solution for distributed teams</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: UDP port 9993</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9993 (default zerotier port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zerotier\nsudo dnf install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zerotier\nsudo apt install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo ufw allow 9993\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zerotier\nsudo pacman -S zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zerotier\napk add --no-cache zerotier-one\n\n# Enable and start service\nrc-update add zerotier-one default\nrc-service zerotier-one start\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zerotier\nsudo zypper install -y zerotier-one\n\n# Enable and start service\nsudo systemctl enable --now zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zerotier-one\n\n# Start service\nbrew services start zerotier-one\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zerotier-one\n\n# Enable in rc.conf\necho &#039;zerotier-one_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zerotier-one start\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zerotier-one\n\n# Or using Scoop\nscoop install zerotier-one\n\n# Verify installation\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zerotier-one\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzerotier-cli status</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zerotier-one\n\n# Start service\nsudo systemctl start zerotier-one\n\n# Stop service\nsudo systemctl stop zerotier-one\n\n# Restart service\nsudo systemctl restart zerotier-one\n\n# Check status\nsudo systemctl status zerotier-one\n\n# View logs\nsudo journalctl -u zerotier-one -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zerotier-one default\n\n# Start service\nrc-service zerotier-one start\n\n# Stop service\nrc-service zerotier-one stop\n\n# Restart service\nrc-service zerotier-one restart\n\n# Check status\nrc-service zerotier-one status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zerotier-one_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zerotier-one start\n\n# Stop service\nservice zerotier-one stop\n\n# Restart service\nservice zerotier-one restart\n\n# Check status\nservice zerotier-one status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zerotier-one\nbrew services stop zerotier-one\nbrew services restart zerotier-one\n\n# Check status\nbrew services list | grep zerotier-one</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zerotier-one\n\n# Stop service\nnet stop zerotier-one\n\n# Using PowerShell\nStart-Service zerotier-one\nStop-Service zerotier-one\nRestart-Service zerotier-one\n\n# Check status\nGet-Service zerotier-one</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zerotier-one_backend {\n    server 127.0.0.1:9993;\n}\n\nserver {\n    listen 80;\n    server_name zerotier-one.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zerotier-one.example.com;\n\n    ssl_certificate /etc/ssl/certs/zerotier-one.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zerotier-one.example.com.key;\n\n    location / {\n        proxy_pass http://zerotier-one_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zerotier-one.example.com\n    Redirect permanent / https://zerotier-one.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zerotier-one.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zerotier-one.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zerotier-one.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9993/\n    ProxyPassReverse / http://127.0.0.1:9993/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zerotier-one_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zerotier-one.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zerotier-one_backend\n\nbackend zerotier-one_backend\n    balance roundrobin\n    server zerotier-one1 127.0.0.1:9993 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zerotier-one:zerotier-one /etc/zerotier-one\nsudo chmod 750 /etc/zerotier-one\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9993/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zerotier-one\n\n# View logs\nsudo journalctl -u zerotier-one -f\n\n# Monitor resource usage\ntop -p $(pgrep zerotier-one)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zerotier-one&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zerotier-one-backup-$DATE.tar.gz&quot; /etc/zerotier-one /var/lib/zerotier-one\n\necho &quot;Backup completed: $BACKUP_DIR/zerotier-one-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zerotier-one\n\n# Restore from backup\ntar -xzf /backup/zerotier-one/zerotier-one-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zerotier-one</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zerotier-one -n 100\nsudo tail -f /var/log/zerotier-one/zerotier-one.log\n\n# Check configuration\nzerotier-cli status\n\n# Check permissions\nls -la /etc/zerotier-one</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9993\n\n# Test connectivity\ntelnet localhost 9993\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zerotier-one)\n\n# Check disk I/O\niotop -p $(pgrep zerotier-one)\n\n# Check connections\nss -an | grep 9993</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zerotier-one:\n    image: zerotier-one:latest\n    ports:\n      - &quot;9993:9993&quot;\n    volumes:\n      - ./config:/etc/zerotier-one\n      - ./data:/var/lib/zerotier-one\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zerotier-one\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zerotier-one\n\n# Arch Linux\nsudo pacman -Syu zerotier-one\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zerotier-one\n\n# openSUSE\nsudo zypper update zerotier-one\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zerotier-one\n\n# Always backup before updates\ntar -czf /backup/zerotier-one-pre-update-$(date +%Y%m%d).tar.gz /etc/zerotier-one\n\n# Restart after updates\nsudo systemctl restart zerotier-one</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zerotier-one\n\n# Clean old logs\nfind /var/log/zerotier-one -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zerotier-one</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zerotier-one.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zerotier-one/zerotier-one</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zerotier-one.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zerotier-one.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1277,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:07.611Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "zigbee2mqtt",
      "displayName": "zigbee2mqtt Installation Guide",
      "slug": "zigbee2mqtt",
      "description": "zigbee2mqtt is a free and open-source Zigbee to MQTT bridge. Zigbee2MQTT bridges Zigbee devices to MQTT",
      "category": "iot-platforms",
      "subcategory": "iot-platforms",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "iot-platforms",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/iot-platforms/zigbee2mqtt",
      "documentationUrl": "https://howtomgr.github.io/iot-platforms/zigbee2mqtt",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/zigbee2mqtt",
      "updatedAt": "2025-09-16T18:05:04Z",
      "createdAt": "2025-09-08T03:19:12Z",
      "readmeRaw": "# zigbee2mqtt Installation Guide\n\nzigbee2mqtt is a free and open-source Zigbee to MQTT bridge. Zigbee2MQTT bridges Zigbee devices to MQTT\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 500MB for data\n  - Network: Zigbee/MQTT\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default zigbee2mqtt port)\n  - Frontend on 8080\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zigbee2mqtt\nsudo dnf install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zigbee2mqtt\nsudo apt install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### Arch Linux\n\n```bash\n# Install zigbee2mqtt\nsudo pacman -S zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zigbee2mqtt\napk add --no-cache zigbee2mqtt\n\n# Enable and start service\nrc-update add zigbee2mqtt default\nrc-service zigbee2mqtt start\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zigbee2mqtt\nsudo zypper install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zigbee2mqtt\n\n# Start service\nbrew services start zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zigbee2mqtt\n\n# Enable in rc.conf\necho 'zigbee2mqtt_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zigbee2mqtt start\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zigbee2mqtt\n\n# Or using Scoop\nscoop install zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zigbee2mqtt\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzigbee2mqtt --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zigbee2mqtt\n\n# Start service\nsudo systemctl start zigbee2mqtt\n\n# Stop service\nsudo systemctl stop zigbee2mqtt\n\n# Restart service\nsudo systemctl restart zigbee2mqtt\n\n# Check status\nsudo systemctl status zigbee2mqtt\n\n# View logs\nsudo journalctl -u zigbee2mqtt -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zigbee2mqtt default\n\n# Start service\nrc-service zigbee2mqtt start\n\n# Stop service\nrc-service zigbee2mqtt stop\n\n# Restart service\nrc-service zigbee2mqtt restart\n\n# Check status\nrc-service zigbee2mqtt status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zigbee2mqtt_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zigbee2mqtt start\n\n# Stop service\nservice zigbee2mqtt stop\n\n# Restart service\nservice zigbee2mqtt restart\n\n# Check status\nservice zigbee2mqtt status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zigbee2mqtt\nbrew services stop zigbee2mqtt\nbrew services restart zigbee2mqtt\n\n# Check status\nbrew services list | grep zigbee2mqtt\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zigbee2mqtt\n\n# Stop service\nnet stop zigbee2mqtt\n\n# Using PowerShell\nStart-Service zigbee2mqtt\nStop-Service zigbee2mqtt\nRestart-Service zigbee2mqtt\n\n# Check status\nGet-Service zigbee2mqtt\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zigbee2mqtt_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name zigbee2mqtt.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zigbee2mqtt.example.com;\n\n    ssl_certificate /etc/ssl/certs/zigbee2mqtt.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zigbee2mqtt.example.com.key;\n\n    location / {\n        proxy_pass http://zigbee2mqtt_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zigbee2mqtt.example.com\n    Redirect permanent / https://zigbee2mqtt.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zigbee2mqtt.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zigbee2mqtt.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zigbee2mqtt.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zigbee2mqtt_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zigbee2mqtt.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zigbee2mqtt_backend\n\nbackend zigbee2mqtt_backend\n    balance roundrobin\n    server zigbee2mqtt1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zigbee2mqtt:zigbee2mqtt /etc/zigbee2mqtt\nsudo chmod 750 /etc/zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zigbee2mqtt\n\n# View logs\nsudo journalctl -u zigbee2mqtt -f\n\n# Monitor resource usage\ntop -p $(pgrep zigbee2mqtt)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zigbee2mqtt\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zigbee2mqtt-backup-$DATE.tar.gz\" /etc/zigbee2mqtt /var/lib/zigbee2mqtt\n\necho \"Backup completed: $BACKUP_DIR/zigbee2mqtt-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zigbee2mqtt\n\n# Restore from backup\ntar -xzf /backup/zigbee2mqtt/zigbee2mqtt-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zigbee2mqtt\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zigbee2mqtt -n 100\nsudo tail -f /var/log/zigbee2mqtt/zigbee2mqtt.log\n\n# Check configuration\nzigbee2mqtt --version\n\n# Check permissions\nls -la /etc/zigbee2mqtt\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zigbee2mqtt)\n\n# Check disk I/O\niotop -p $(pgrep zigbee2mqtt)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zigbee2mqtt:\n    image: zigbee2mqtt:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/zigbee2mqtt\n      - ./data:/var/lib/zigbee2mqtt\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zigbee2mqtt\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zigbee2mqtt\n\n# Arch Linux\nsudo pacman -Syu zigbee2mqtt\n\n# Alpine Linux\napk update && apk upgrade zigbee2mqtt\n\n# openSUSE\nsudo zypper update zigbee2mqtt\n\n# FreeBSD\npkg update && pkg upgrade zigbee2mqtt\n\n# Always backup before updates\ntar -czf /backup/zigbee2mqtt-pre-update-$(date +%Y%m%d).tar.gz /etc/zigbee2mqtt\n\n# Restart after updates\nsudo systemctl restart zigbee2mqtt\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zigbee2mqtt\n\n# Clean old logs\nfind /var/log/zigbee2mqtt -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zigbee2mqtt\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zigbee2mqtt.org/\n- GitHub Repository: https://github.com/zigbee2mqtt/zigbee2mqtt\n- Community Forum: https://forum.zigbee2mqtt.org/\n- Best Practices Guide: https://docs.zigbee2mqtt.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">zigbee2mqtt is a free and open-source Zigbee to MQTT bridge. Zigbee2MQTT bridges Zigbee devices to MQTT</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 500MB for data</li>\n<li class=\"mobile-list-item\">Network: Zigbee/MQTT</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default zigbee2mqtt port)</li>\n<li class=\"mobile-list-item\">Frontend on 8080</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zigbee2mqtt\nsudo dnf install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zigbee2mqtt\nsudo apt install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zigbee2mqtt\nsudo pacman -S zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zigbee2mqtt\napk add --no-cache zigbee2mqtt\n\n# Enable and start service\nrc-update add zigbee2mqtt default\nrc-service zigbee2mqtt start\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zigbee2mqtt\nsudo zypper install -y zigbee2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zigbee2mqtt\n\n# Start service\nbrew services start zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zigbee2mqtt\n\n# Enable in rc.conf\necho &#039;zigbee2mqtt_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zigbee2mqtt start\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zigbee2mqtt\n\n# Or using Scoop\nscoop install zigbee2mqtt\n\n# Verify installation\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zigbee2mqtt\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzigbee2mqtt --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zigbee2mqtt\n\n# Start service\nsudo systemctl start zigbee2mqtt\n\n# Stop service\nsudo systemctl stop zigbee2mqtt\n\n# Restart service\nsudo systemctl restart zigbee2mqtt\n\n# Check status\nsudo systemctl status zigbee2mqtt\n\n# View logs\nsudo journalctl -u zigbee2mqtt -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zigbee2mqtt default\n\n# Start service\nrc-service zigbee2mqtt start\n\n# Stop service\nrc-service zigbee2mqtt stop\n\n# Restart service\nrc-service zigbee2mqtt restart\n\n# Check status\nrc-service zigbee2mqtt status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zigbee2mqtt_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zigbee2mqtt start\n\n# Stop service\nservice zigbee2mqtt stop\n\n# Restart service\nservice zigbee2mqtt restart\n\n# Check status\nservice zigbee2mqtt status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zigbee2mqtt\nbrew services stop zigbee2mqtt\nbrew services restart zigbee2mqtt\n\n# Check status\nbrew services list | grep zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zigbee2mqtt\n\n# Stop service\nnet stop zigbee2mqtt\n\n# Using PowerShell\nStart-Service zigbee2mqtt\nStop-Service zigbee2mqtt\nRestart-Service zigbee2mqtt\n\n# Check status\nGet-Service zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zigbee2mqtt_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name zigbee2mqtt.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zigbee2mqtt.example.com;\n\n    ssl_certificate /etc/ssl/certs/zigbee2mqtt.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zigbee2mqtt.example.com.key;\n\n    location / {\n        proxy_pass http://zigbee2mqtt_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zigbee2mqtt.example.com\n    Redirect permanent / https://zigbee2mqtt.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zigbee2mqtt.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zigbee2mqtt.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zigbee2mqtt.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zigbee2mqtt_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zigbee2mqtt.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zigbee2mqtt_backend\n\nbackend zigbee2mqtt_backend\n    balance roundrobin\n    server zigbee2mqtt1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zigbee2mqtt:zigbee2mqtt /etc/zigbee2mqtt\nsudo chmod 750 /etc/zigbee2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zigbee2mqtt\n\n# View logs\nsudo journalctl -u zigbee2mqtt -f\n\n# Monitor resource usage\ntop -p $(pgrep zigbee2mqtt)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zigbee2mqtt&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zigbee2mqtt-backup-$DATE.tar.gz&quot; /etc/zigbee2mqtt /var/lib/zigbee2mqtt\n\necho &quot;Backup completed: $BACKUP_DIR/zigbee2mqtt-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zigbee2mqtt\n\n# Restore from backup\ntar -xzf /backup/zigbee2mqtt/zigbee2mqtt-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zigbee2mqtt -n 100\nsudo tail -f /var/log/zigbee2mqtt/zigbee2mqtt.log\n\n# Check configuration\nzigbee2mqtt --version\n\n# Check permissions\nls -la /etc/zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zigbee2mqtt)\n\n# Check disk I/O\niotop -p $(pgrep zigbee2mqtt)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zigbee2mqtt:\n    image: zigbee2mqtt:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/zigbee2mqtt\n      - ./data:/var/lib/zigbee2mqtt\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zigbee2mqtt\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zigbee2mqtt\n\n# Arch Linux\nsudo pacman -Syu zigbee2mqtt\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zigbee2mqtt\n\n# openSUSE\nsudo zypper update zigbee2mqtt\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zigbee2mqtt\n\n# Always backup before updates\ntar -czf /backup/zigbee2mqtt-pre-update-$(date +%Y%m%d).tar.gz /etc/zigbee2mqtt\n\n# Restart after updates\nsudo systemctl restart zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zigbee2mqtt\n\n# Clean old logs\nfind /var/log/zigbee2mqtt -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zigbee2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zigbee2mqtt.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zigbee2mqtt/zigbee2mqtt</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zigbee2mqtt.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zigbee2mqtt.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1269,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:07.347Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "zimbra",
      "displayName": "Zimbra Installation Guide",
      "slug": "zimbra",
      "description": "Zimbra is a free and open-source Collaboration Suite. An open-source collaborative software suite",
      "category": "groupware",
      "subcategory": "groupware",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443,
        2048
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "groupware",
        "containerization",
        "orchestration",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection",
        "communication"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/groupware/zimbra",
      "documentationUrl": "https://howtomgr.github.io/groupware/zimbra",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/zimbra",
      "updatedAt": "2025-09-16T18:05:11Z",
      "createdAt": "2025-09-16T08:44:30Z",
      "readmeRaw": "# Zimbra Installation Guide\n\nZimbra is a free and open-source Collaboration Suite. An open-source collaborative software suite\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 443/7071 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443/7071 (default zimbra port)\n- **Dependencies**:\n  - perl, sysstat, sqlite\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zimbra\nsudo dnf install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Verify installation\nzimbra --version || systemctl status zimbra\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zimbra\nsudo apt install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo ufw allow 443/7071\n\n# Verify installation\nzimbra --version || systemctl status zimbra\n```\n\n### Arch Linux\n\n```bash\n# Install zimbra\nsudo pacman -S zimbra\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Verify installation\nzimbra --version || systemctl status zimbra\n```\n\n### Alpine Linux\n\n```bash\n# Install zimbra\napk add --no-cache zimbra\n\n# Enable and start service\nrc-update add zimbra default\nrc-service zimbra start\n\n# Verify installation\nzimbra --version || rc-service zimbra status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zimbra\nsudo zypper install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Verify installation\nzimbra --version || systemctl status zimbra\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zimbra\n\n# Start service\nbrew services start zimbra\n\n# Verify installation\nzimbra --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zimbra\n\n# Enable in rc.conf\necho 'zimbra_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zimbra start\n\n# Verify installation\nzimbra --version || service zimbra status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install zimbra\n\n# Or using Scoop\nscoop install zimbra\n\n# Verify installation\nzimbra --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /opt/zimbra/conf\n\n# Set up basic configuration\nsudo tee /opt/zimbra/conf/zimbra.conf << 'EOF'\n# Zimbra Configuration\nzimbraMailThreadPoolSize=250\nEOF\n\n# Test configuration\nsudo zimbra -t || sudo zimbra configtest\n\n# Reload service\nsudo systemctl reload zimbra\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chmod 750 /opt/zimbra/conf\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zimbra\n\n# Start service\nsudo systemctl start zimbra\n\n# Stop service\nsudo systemctl stop zimbra\n\n# Restart service\nsudo systemctl restart zimbra\n\n# Reload configuration\nsudo systemctl reload zimbra\n\n# Check status\nsudo systemctl status zimbra\n\n# View logs\nsudo journalctl -u zimbra -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zimbra default\n\n# Start service\nrc-service zimbra start\n\n# Stop service\nrc-service zimbra stop\n\n# Restart service\nrc-service zimbra restart\n\n# Check status\nrc-service zimbra status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zimbra_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zimbra start\n\n# Stop service\nservice zimbra stop\n\n# Restart service\nservice zimbra restart\n\n# Check status\nservice zimbra status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zimbra\nbrew services stop zimbra\nbrew services restart zimbra\n\n# Check status\nbrew services list | grep zimbra\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zimbra\n\n# Stop service\nnet stop zimbra\n\n# Using PowerShell\nStart-Service zimbra\nStop-Service zimbra\nRestart-Service zimbra\n\n# Check status\nGet-Service zimbra\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /opt/zimbra/conf/zimbra.conf << 'EOF'\nzimbraMailThreadPoolSize=250\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart zimbra\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zimbra_backend {\n    server 127.0.0.1:443/7071;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name zimbra.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zimbra.example.com;\n\n    ssl_certificate /etc/ssl/certs/zimbra.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zimbra.example.com.key;\n\n    location / {\n        proxy_pass http://zimbra_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zimbra.example.com\n    Redirect permanent / https://zimbra.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zimbra.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zimbra.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zimbra.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/7071/\n    ProxyPassReverse / http://127.0.0.1:443/7071/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:443/7071/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zimbra_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zimbra.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zimbra_backend\n\nbackend zimbra_backend\n    balance roundrobin\n    option httpchk GET /health\n    server zimbra1 127.0.0.1:443/7071 check\n    server zimbra2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chmod 750 /opt/zimbra/conf\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/zimbra.conf << 'EOF'\n[zimbra]\nenabled = true\nport = 443/7071\nfilter = zimbra\nlogpath = /opt/zimbra/log/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/zimbra.key \\\n    -out /etc/ssl/certs/zimbra.crt\n\n# Configure SSL in zimbra\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE zimbra_db;\nCREATE USER zimbra_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE zimbra_db TO zimbra_user;\nEOF\n\n# Configure zimbra to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE zimbra_db;\nCREATE USER 'zimbra_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON zimbra_db.* TO 'zimbra_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Zimbra specific tuning\nzimbraMailThreadPoolSize=250\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nzimbra soft nofile 65535\nzimbra hard nofile 65535\nzimbra soft nproc 32768\nzimbra hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'zimbra'\n    static_configs:\n      - targets: ['localhost:443/7071']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet zimbra; then\n    echo \"Zimbra is running\"\n    exit 0\nelse\n    echo \"Zimbra is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/zimbra << 'EOF'\n/opt/zimbra/log/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 zimbra zimbra\n    postrotate\n        systemctl reload zimbra > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Zimbra backup script\nBACKUP_DIR=\"/backup/zimbra\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop zimbra\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/zimbra-config-$DATE.tar.gz\" /opt/zimbra/conf\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/zimbra-data-$DATE.tar.gz\" /var/lib/zimbra\n\n# Start service\nsystemctl start zimbra\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zimbra\n\n# Restore configuration\nsudo tar -xzf /backup/zimbra/zimbra-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/zimbra/zimbra-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chown -R zimbra:zimbra /var/lib/zimbra\n\n# Start service\nsudo systemctl start zimbra\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zimbra -n 100\nsudo tail -f /opt/zimbra/log/*.log\n\n# Check configuration\nsudo zimbra -t || sudo zimbra configtest\n\n# Check permissions\nls -la /opt/zimbra/conf\nls -la /var/lib/zimbra\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443/7071\nsudo netstat -tlnp | grep 443/7071\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443/7071\nnc -zv localhost 443/7071\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zimbra)\nhtop -p $(pgrep zimbra)\n\n# Check connections\nss -ant | grep :443/7071 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep zimbra)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo zimbra -d\n# or\nsudo zimbra debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  zimbra:\n    image: zimbra:latest\n    container_name: zimbra\n    ports:\n      - \"443/7071:443/7071\"\n    volumes:\n      - ./config:/opt/zimbra/conf\n      - ./data:/var/lib/zimbra\n    environment:\n      - zimbra_CONFIG=/opt/zimbra/conf/zimbra.conf\n    restart: unless-stopped\n    networks:\n      - zimbra_net\n\nnetworks:\n  zimbra_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zimbra\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: zimbra\n  template:\n    metadata:\n      labels:\n        app: zimbra\n    spec:\n      containers:\n      - name: zimbra\n        image: zimbra:latest\n        ports:\n        - containerPort: 443/7071\n        volumeMounts:\n        - name: config\n          mountPath: /opt/zimbra/conf\n      volumes:\n      - name: config\n        configMap:\n          name: zimbra-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: zimbra\nspec:\n  selector:\n    app: zimbra\n  ports:\n  - port: 443/7071\n    targetPort: 443/7071\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Zimbra\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install zimbra\n      package:\n        name: zimbra\n        state: present\n    \n    - name: Configure zimbra\n      template:\n        src: zimbra.conf.j2\n        dest: /opt/zimbra/conf/zimbra.conf\n        owner: zimbra\n        group: zimbra\n        mode: '0640'\n      notify: restart zimbra\n    \n    - name: Start and enable zimbra\n      systemd:\n        name: zimbra\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart zimbra\n      systemd:\n        name: zimbra\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zimbra\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zimbra\n\n# Arch Linux\nsudo pacman -Syu zimbra\n\n# Alpine Linux\napk update && apk upgrade zimbra\n\n# openSUSE\nsudo zypper update zimbra\n\n# FreeBSD\npkg update && pkg upgrade zimbra\n\n# Always backup before updates\ntar -czf /backup/zimbra-pre-update-$(date +%Y%m%d).tar.gz /opt/zimbra/conf\n\n# Restart after updates\nsudo systemctl restart zimbra\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /opt/zimbra/log -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo zimbra --verify || sudo zimbra check\n\n# Update databases (if applicable)\nsudo zimbra-update-db\n\n# Optimize performance\nsudo zimbra-optimize\n\n# Check for security updates\nsudo zimbra --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zimbra.org/\n- GitHub Repository: https://github.com/zimbra/zimbra\n- Community Forum: https://forum.zimbra.org/\n- Wiki: https://wiki.zimbra.org/\n- Comparison vs Exchange, Kopano, Kolab, Nextcloud: https://docs.zimbra.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">Zimbra is a free and open-source Collaboration Suite. An open-source collaborative software suite</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 443/7071 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443/7071 (default zimbra port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">perl, sysstat, sqlite</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zimbra\nsudo dnf install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Verify installation\nzimbra --version || systemctl status zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zimbra\nsudo apt install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo ufw allow 443/7071\n\n# Verify installation\nzimbra --version || systemctl status zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zimbra\nsudo pacman -S zimbra\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Verify installation\nzimbra --version || systemctl status zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zimbra\napk add --no-cache zimbra\n\n# Enable and start service\nrc-update add zimbra default\nrc-service zimbra start\n\n# Verify installation\nzimbra --version || rc-service zimbra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zimbra\nsudo zypper install -y zimbra perl, sysstat, sqlite\n\n# Enable and start service\nsudo systemctl enable --now zimbra\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Verify installation\nzimbra --version || systemctl status zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zimbra\n\n# Start service\nbrew services start zimbra\n\n# Verify installation\nzimbra --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zimbra\n\n# Enable in rc.conf\necho &#039;zimbra_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zimbra start\n\n# Verify installation\nzimbra --version || service zimbra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install zimbra\n\n# Or using Scoop\nscoop install zimbra\n\n# Verify installation\nzimbra --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /opt/zimbra/conf\n\n# Set up basic configuration\nsudo tee /opt/zimbra/conf/zimbra.conf &lt;&lt; &#039;EOF&#039;\n# Zimbra Configuration\nzimbraMailThreadPoolSize=250\nEOF\n\n# Test configuration\nsudo zimbra -t || sudo zimbra configtest\n\n# Reload service\nsudo systemctl reload zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chmod 750 /opt/zimbra/conf\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zimbra\n\n# Start service\nsudo systemctl start zimbra\n\n# Stop service\nsudo systemctl stop zimbra\n\n# Restart service\nsudo systemctl restart zimbra\n\n# Reload configuration\nsudo systemctl reload zimbra\n\n# Check status\nsudo systemctl status zimbra\n\n# View logs\nsudo journalctl -u zimbra -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zimbra default\n\n# Start service\nrc-service zimbra start\n\n# Stop service\nrc-service zimbra stop\n\n# Restart service\nrc-service zimbra restart\n\n# Check status\nrc-service zimbra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zimbra_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zimbra start\n\n# Stop service\nservice zimbra stop\n\n# Restart service\nservice zimbra restart\n\n# Check status\nservice zimbra status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zimbra\nbrew services stop zimbra\nbrew services restart zimbra\n\n# Check status\nbrew services list | grep zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zimbra\n\n# Stop service\nnet stop zimbra\n\n# Using PowerShell\nStart-Service zimbra\nStop-Service zimbra\nRestart-Service zimbra\n\n# Check status\nGet-Service zimbra</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /opt/zimbra/conf/zimbra.conf &lt;&lt; &#039;EOF&#039;\nzimbraMailThreadPoolSize=250\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zimbra_backend {\n    server 127.0.0.1:443/7071;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name zimbra.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zimbra.example.com;\n\n    ssl_certificate /etc/ssl/certs/zimbra.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zimbra.example.com.key;\n\n    location / {\n        proxy_pass http://zimbra_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zimbra.example.com\n    Redirect permanent / https://zimbra.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zimbra.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zimbra.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zimbra.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/7071/\n    ProxyPassReverse / http://127.0.0.1:443/7071/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:443/7071/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zimbra_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zimbra.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zimbra_backend\n\nbackend zimbra_backend\n    balance roundrobin\n    option httpchk GET /health\n    server zimbra1 127.0.0.1:443/7071 check\n    server zimbra2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chmod 750 /opt/zimbra/conf\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=zimbra\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/zimbra.conf &lt;&lt; &#039;EOF&#039;\n[zimbra]\nenabled = true\nport = 443/7071\nfilter = zimbra\nlogpath = /opt/zimbra/log/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/zimbra.key \\\n    -out /etc/ssl/certs/zimbra.crt\n\n# Configure SSL in zimbra\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE zimbra_db;\nCREATE USER zimbra_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE zimbra_db TO zimbra_user;\nEOF\n\n# Configure zimbra to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE zimbra_db;\nCREATE USER &#039;zimbra_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON zimbra_db.* TO &#039;zimbra_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Zimbra specific tuning\nzimbraMailThreadPoolSize=250</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nzimbra soft nofile 65535\nzimbra hard nofile 65535\nzimbra soft nproc 32768\nzimbra hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;zimbra&#039;\n    static_configs:\n      - targets: [&#039;localhost:443/7071&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet zimbra; then\n    echo &quot;Zimbra is running&quot;\n    exit 0\nelse\n    echo &quot;Zimbra is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/zimbra &lt;&lt; &#039;EOF&#039;\n/opt/zimbra/log/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 zimbra zimbra\n    postrotate\n        systemctl reload zimbra &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Zimbra backup script\nBACKUP_DIR=&quot;/backup/zimbra&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop zimbra\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/zimbra-config-$DATE.tar.gz&quot; /opt/zimbra/conf\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/zimbra-data-$DATE.tar.gz&quot; /var/lib/zimbra\n\n# Start service\nsystemctl start zimbra\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zimbra\n\n# Restore configuration\nsudo tar -xzf /backup/zimbra/zimbra-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/zimbra/zimbra-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R zimbra:zimbra /opt/zimbra/conf\nsudo chown -R zimbra:zimbra /var/lib/zimbra\n\n# Start service\nsudo systemctl start zimbra</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zimbra -n 100\nsudo tail -f /opt/zimbra/log/*.log\n\n# Check configuration\nsudo zimbra -t || sudo zimbra configtest\n\n# Check permissions\nls -la /opt/zimbra/conf\nls -la /var/lib/zimbra</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443/7071\nsudo netstat -tlnp | grep 443/7071\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443/7071\nnc -zv localhost 443/7071</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zimbra)\nhtop -p $(pgrep zimbra)\n\n# Check connections\nss -ant | grep :443/7071 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep zimbra)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo zimbra -d\n# or\nsudo zimbra debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zimbra:\n    image: zimbra:latest\n    container_name: zimbra\n    ports:\n      - &quot;443/7071:443/7071&quot;\n    volumes:\n      - ./config:/opt/zimbra/conf\n      - ./data:/var/lib/zimbra\n    environment:\n      - zimbra_CONFIG=/opt/zimbra/conf/zimbra.conf\n    restart: unless-stopped\n    networks:\n      - zimbra_net\n\nnetworks:\n  zimbra_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: zimbra\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: zimbra\n  template:\n    metadata:\n      labels:\n        app: zimbra\n    spec:\n      containers:\n      - name: zimbra\n        image: zimbra:latest\n        ports:\n        - containerPort: 443/7071\n        volumeMounts:\n        - name: config\n          mountPath: /opt/zimbra/conf\n      volumes:\n      - name: config\n        configMap:\n          name: zimbra-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: zimbra\nspec:\n  selector:\n    app: zimbra\n  ports:\n  - port: 443/7071\n    targetPort: 443/7071\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Zimbra\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install zimbra\n      package:\n        name: zimbra\n        state: present\n    \n    - name: Configure zimbra\n      template:\n        src: zimbra.conf.j2\n        dest: /opt/zimbra/conf/zimbra.conf\n        owner: zimbra\n        group: zimbra\n        mode: &#039;0640&#039;\n      notify: restart zimbra\n    \n    - name: Start and enable zimbra\n      systemd:\n        name: zimbra\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart zimbra\n      systemd:\n        name: zimbra\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zimbra\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zimbra\n\n# Arch Linux\nsudo pacman -Syu zimbra\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zimbra\n\n# openSUSE\nsudo zypper update zimbra\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zimbra\n\n# Always backup before updates\ntar -czf /backup/zimbra-pre-update-$(date +%Y%m%d).tar.gz /opt/zimbra/conf\n\n# Restart after updates\nsudo systemctl restart zimbra</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /opt/zimbra/log -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo zimbra --verify || sudo zimbra check\n\n# Update databases (if applicable)\nsudo zimbra-update-db\n\n# Optimize performance\nsudo zimbra-optimize\n\n# Check for security updates\nsudo zimbra --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zimbra.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zimbra/zimbra</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zimbra.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.zimbra.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Exchange, Kopano, Kolab, Nextcloud: https://docs.zimbra.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "10 min",
      "wordCount": 1985,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 3,
          "text": "Security Hardening",
          "id": "security-hardening"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 3,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "Clustering and High Availability",
          "id": "clustering-and-high-availability"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 3,
          "text": "SSL/TLS Configuration",
          "id": "ssltls-configuration"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 3,
          "text": "PostgreSQL Backend (if applicable)",
          "id": "postgresql-backend-if-applicable"
        },
        {
          "level": 3,
          "text": "MySQL/MariaDB Backend (if applicable)",
          "id": "mysqlmariadb-backend-if-applicable"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 3,
          "text": "Resource Limits",
          "id": "resource-limits"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Prometheus Integration",
          "id": "prometheus-integration"
        },
        {
          "level": 3,
          "text": "Health Checks",
          "id": "health-checks"
        },
        {
          "level": 3,
          "text": "Log Monitoring",
          "id": "log-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 3,
          "text": "Debug Mode",
          "id": "debug-mode"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose",
          "id": "docker-compose"
        },
        {
          "level": 3,
          "text": "Kubernetes Deployment",
          "id": "kubernetes-deployment"
        },
        {
          "level": 3,
          "text": "Ansible Playbook",
          "id": "ansible-playbook"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance Tasks",
          "id": "regular-maintenance-tasks"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:07.120Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "zinc",
      "displayName": "zinc Installation Guide",
      "slug": "zinc",
      "description": "zinc is a free and open-source search engine. Zinc provides lightweight alternative to Elasticsearch",
      "category": "search-engines",
      "subcategory": "search-engines",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443,
        4080
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "search-engines",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/search-engines/zinc",
      "documentationUrl": "https://howtomgr.github.io/search-engines/zinc",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/zinc",
      "updatedAt": "2025-09-16T18:05:18Z",
      "createdAt": "2025-09-16T08:44:45Z",
      "readmeRaw": "# zinc Installation Guide\n\nzinc is a free and open-source search engine. Zinc provides lightweight alternative to Elasticsearch\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 10GB for indices\n  - Network: HTTP/REST API\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 4080 (default zinc port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zinc\nsudo dnf install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzinc --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zinc\nsudo apt install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo ufw allow 4080\n\n# Verify installation\nzinc --version\n```\n\n### Arch Linux\n\n```bash\n# Install zinc\nsudo pacman -S zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Verify installation\nzinc --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zinc\napk add --no-cache zinc\n\n# Enable and start service\nrc-update add zinc default\nrc-service zinc start\n\n# Verify installation\nzinc --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zinc\nsudo zypper install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzinc --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zinc\n\n# Start service\nbrew services start zinc\n\n# Verify installation\nzinc --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zinc\n\n# Enable in rc.conf\necho 'zinc_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zinc start\n\n# Verify installation\nzinc --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zinc\n\n# Or using Scoop\nscoop install zinc\n\n# Verify installation\nzinc --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zinc\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzinc --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zinc\n\n# Start service\nsudo systemctl start zinc\n\n# Stop service\nsudo systemctl stop zinc\n\n# Restart service\nsudo systemctl restart zinc\n\n# Check status\nsudo systemctl status zinc\n\n# View logs\nsudo journalctl -u zinc -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zinc default\n\n# Start service\nrc-service zinc start\n\n# Stop service\nrc-service zinc stop\n\n# Restart service\nrc-service zinc restart\n\n# Check status\nrc-service zinc status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zinc_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zinc start\n\n# Stop service\nservice zinc stop\n\n# Restart service\nservice zinc restart\n\n# Check status\nservice zinc status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zinc\nbrew services stop zinc\nbrew services restart zinc\n\n# Check status\nbrew services list | grep zinc\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zinc\n\n# Stop service\nnet stop zinc\n\n# Using PowerShell\nStart-Service zinc\nStop-Service zinc\nRestart-Service zinc\n\n# Check status\nGet-Service zinc\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zinc_backend {\n    server 127.0.0.1:4080;\n}\n\nserver {\n    listen 80;\n    server_name zinc.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zinc.example.com;\n\n    ssl_certificate /etc/ssl/certs/zinc.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zinc.example.com.key;\n\n    location / {\n        proxy_pass http://zinc_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zinc.example.com\n    Redirect permanent / https://zinc.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zinc.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zinc.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zinc.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:4080/\n    ProxyPassReverse / http://127.0.0.1:4080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zinc_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zinc.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zinc_backend\n\nbackend zinc_backend\n    balance roundrobin\n    server zinc1 127.0.0.1:4080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zinc:zinc /etc/zinc\nsudo chmod 750 /etc/zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zinc\n\n# View logs\nsudo journalctl -u zinc -f\n\n# Monitor resource usage\ntop -p $(pgrep zinc)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zinc\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zinc-backup-$DATE.tar.gz\" /etc/zinc /var/lib/zinc\n\necho \"Backup completed: $BACKUP_DIR/zinc-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zinc\n\n# Restore from backup\ntar -xzf /backup/zinc/zinc-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zinc\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zinc -n 100\nsudo tail -f /var/log/zinc/zinc.log\n\n# Check configuration\nzinc --version\n\n# Check permissions\nls -la /etc/zinc\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 4080\n\n# Test connectivity\ntelnet localhost 4080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zinc)\n\n# Check disk I/O\niotop -p $(pgrep zinc)\n\n# Check connections\nss -an | grep 4080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zinc:\n    image: zinc:latest\n    ports:\n      - \"4080:4080\"\n    volumes:\n      - ./config:/etc/zinc\n      - ./data:/var/lib/zinc\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zinc\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zinc\n\n# Arch Linux\nsudo pacman -Syu zinc\n\n# Alpine Linux\napk update && apk upgrade zinc\n\n# openSUSE\nsudo zypper update zinc\n\n# FreeBSD\npkg update && pkg upgrade zinc\n\n# Always backup before updates\ntar -czf /backup/zinc-pre-update-$(date +%Y%m%d).tar.gz /etc/zinc\n\n# Restart after updates\nsudo systemctl restart zinc\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zinc\n\n# Clean old logs\nfind /var/log/zinc -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zinc\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zinc.org/\n- GitHub Repository: https://github.com/zinc/zinc\n- Community Forum: https://forum.zinc.org/\n- Best Practices Guide: https://docs.zinc.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">zinc is a free and open-source search engine. Zinc provides lightweight alternative to Elasticsearch</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for indices</li>\n<li class=\"mobile-list-item\">Network: HTTP/REST API</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 4080 (default zinc port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zinc\nsudo dnf install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zinc\nsudo apt install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo ufw allow 4080\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zinc\nsudo pacman -S zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zinc\napk add --no-cache zinc\n\n# Enable and start service\nrc-update add zinc default\nrc-service zinc start\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zinc\nsudo zypper install -y zinc\n\n# Enable and start service\nsudo systemctl enable --now zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zinc\n\n# Start service\nbrew services start zinc\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zinc\n\n# Enable in rc.conf\necho &#039;zinc_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zinc start\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zinc\n\n# Or using Scoop\nscoop install zinc\n\n# Verify installation\nzinc --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zinc\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzinc --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zinc\n\n# Start service\nsudo systemctl start zinc\n\n# Stop service\nsudo systemctl stop zinc\n\n# Restart service\nsudo systemctl restart zinc\n\n# Check status\nsudo systemctl status zinc\n\n# View logs\nsudo journalctl -u zinc -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zinc default\n\n# Start service\nrc-service zinc start\n\n# Stop service\nrc-service zinc stop\n\n# Restart service\nrc-service zinc restart\n\n# Check status\nrc-service zinc status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zinc_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zinc start\n\n# Stop service\nservice zinc stop\n\n# Restart service\nservice zinc restart\n\n# Check status\nservice zinc status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zinc\nbrew services stop zinc\nbrew services restart zinc\n\n# Check status\nbrew services list | grep zinc</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zinc\n\n# Stop service\nnet stop zinc\n\n# Using PowerShell\nStart-Service zinc\nStop-Service zinc\nRestart-Service zinc\n\n# Check status\nGet-Service zinc</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zinc_backend {\n    server 127.0.0.1:4080;\n}\n\nserver {\n    listen 80;\n    server_name zinc.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zinc.example.com;\n\n    ssl_certificate /etc/ssl/certs/zinc.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zinc.example.com.key;\n\n    location / {\n        proxy_pass http://zinc_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zinc.example.com\n    Redirect permanent / https://zinc.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zinc.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zinc.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zinc.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:4080/\n    ProxyPassReverse / http://127.0.0.1:4080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zinc_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zinc.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zinc_backend\n\nbackend zinc_backend\n    balance roundrobin\n    server zinc1 127.0.0.1:4080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zinc:zinc /etc/zinc\nsudo chmod 750 /etc/zinc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zinc\n\n# View logs\nsudo journalctl -u zinc -f\n\n# Monitor resource usage\ntop -p $(pgrep zinc)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zinc&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zinc-backup-$DATE.tar.gz&quot; /etc/zinc /var/lib/zinc\n\necho &quot;Backup completed: $BACKUP_DIR/zinc-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zinc\n\n# Restore from backup\ntar -xzf /backup/zinc/zinc-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zinc</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zinc -n 100\nsudo tail -f /var/log/zinc/zinc.log\n\n# Check configuration\nzinc --version\n\n# Check permissions\nls -la /etc/zinc</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 4080\n\n# Test connectivity\ntelnet localhost 4080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zinc)\n\n# Check disk I/O\niotop -p $(pgrep zinc)\n\n# Check connections\nss -an | grep 4080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zinc:\n    image: zinc:latest\n    ports:\n      - &quot;4080:4080&quot;\n    volumes:\n      - ./config:/etc/zinc\n      - ./data:/var/lib/zinc\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zinc\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zinc\n\n# Arch Linux\nsudo pacman -Syu zinc\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zinc\n\n# openSUSE\nsudo zypper update zinc\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zinc\n\n# Always backup before updates\ntar -czf /backup/zinc-pre-update-$(date +%Y%m%d).tar.gz /etc/zinc\n\n# Restart after updates\nsudo systemctl restart zinc</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zinc\n\n# Clean old logs\nfind /var/log/zinc -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zinc</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zinc.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zinc/zinc</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zinc.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zinc.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1266,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:06.852Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "zuul",
      "displayName": "zuul Installation Guide",
      "slug": "zuul",
      "description": "zuul is a free and open-source edge service. Netflix Zuul provides edge service for dynamic routing and monitoring",
      "category": "api-gateways",
      "subcategory": "api-gateways",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443,
        8080
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "api-gateways",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/api-gateways/zuul",
      "documentationUrl": "https://howtomgr.github.io/api-gateways/zuul",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/zuul",
      "updatedAt": "2025-09-16T18:05:26Z",
      "createdAt": "2025-09-16T08:45:00Z",
      "readmeRaw": "# zuul Installation Guide\n\nzuul is a free and open-source edge service. Netflix Zuul provides edge service for dynamic routing and monitoring\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 1GB for config\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default zuul port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zuul\nsudo dnf install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzuul --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zuul\nsudo apt install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nzuul --version\n```\n\n### Arch Linux\n\n```bash\n# Install zuul\nsudo pacman -S zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Verify installation\nzuul --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zuul\napk add --no-cache zuul\n\n# Enable and start service\nrc-update add zuul default\nrc-service zuul start\n\n# Verify installation\nzuul --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zuul\nsudo zypper install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzuul --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zuul\n\n# Start service\nbrew services start zuul\n\n# Verify installation\nzuul --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zuul\n\n# Enable in rc.conf\necho 'zuul_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zuul start\n\n# Verify installation\nzuul --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zuul\n\n# Or using Scoop\nscoop install zuul\n\n# Verify installation\nzuul --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zuul\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzuul --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zuul\n\n# Start service\nsudo systemctl start zuul\n\n# Stop service\nsudo systemctl stop zuul\n\n# Restart service\nsudo systemctl restart zuul\n\n# Check status\nsudo systemctl status zuul\n\n# View logs\nsudo journalctl -u zuul -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zuul default\n\n# Start service\nrc-service zuul start\n\n# Stop service\nrc-service zuul stop\n\n# Restart service\nrc-service zuul restart\n\n# Check status\nrc-service zuul status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zuul_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zuul start\n\n# Stop service\nservice zuul stop\n\n# Restart service\nservice zuul restart\n\n# Check status\nservice zuul status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zuul\nbrew services stop zuul\nbrew services restart zuul\n\n# Check status\nbrew services list | grep zuul\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zuul\n\n# Stop service\nnet stop zuul\n\n# Using PowerShell\nStart-Service zuul\nStop-Service zuul\nRestart-Service zuul\n\n# Check status\nGet-Service zuul\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zuul_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name zuul.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zuul.example.com;\n\n    ssl_certificate /etc/ssl/certs/zuul.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zuul.example.com.key;\n\n    location / {\n        proxy_pass http://zuul_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zuul.example.com\n    Redirect permanent / https://zuul.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zuul.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zuul.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zuul.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zuul_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zuul.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zuul_backend\n\nbackend zuul_backend\n    balance roundrobin\n    server zuul1 127.0.0.1:8080 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zuul:zuul /etc/zuul\nsudo chmod 750 /etc/zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zuul\n\n# View logs\nsudo journalctl -u zuul -f\n\n# Monitor resource usage\ntop -p $(pgrep zuul)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zuul\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zuul-backup-$DATE.tar.gz\" /etc/zuul /var/lib/zuul\n\necho \"Backup completed: $BACKUP_DIR/zuul-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zuul\n\n# Restore from backup\ntar -xzf /backup/zuul/zuul-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zuul\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zuul -n 100\nsudo tail -f /var/log/zuul/zuul.log\n\n# Check configuration\nzuul --version\n\n# Check permissions\nls -la /etc/zuul\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zuul)\n\n# Check disk I/O\niotop -p $(pgrep zuul)\n\n# Check connections\nss -an | grep 8080\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zuul:\n    image: zuul:latest\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - ./config:/etc/zuul\n      - ./data:/var/lib/zuul\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zuul\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zuul\n\n# Arch Linux\nsudo pacman -Syu zuul\n\n# Alpine Linux\napk update && apk upgrade zuul\n\n# openSUSE\nsudo zypper update zuul\n\n# FreeBSD\npkg update && pkg upgrade zuul\n\n# Always backup before updates\ntar -czf /backup/zuul-pre-update-$(date +%Y%m%d).tar.gz /etc/zuul\n\n# Restart after updates\nsudo systemctl restart zuul\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zuul\n\n# Clean old logs\nfind /var/log/zuul -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zuul\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zuul.org/\n- GitHub Repository: https://github.com/zuul/zuul\n- Community Forum: https://forum.zuul.org/\n- Best Practices Guide: https://docs.zuul.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">zuul is a free and open-source edge service. Netflix Zuul provides edge service for dynamic routing and monitoring</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for config</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default zuul port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zuul\nsudo dnf install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zuul\nsudo apt install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo ufw allow 8080\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zuul\nsudo pacman -S zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zuul\napk add --no-cache zuul\n\n# Enable and start service\nrc-update add zuul default\nrc-service zuul start\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zuul\nsudo zypper install -y zuul\n\n# Enable and start service\nsudo systemctl enable --now zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zuul\n\n# Start service\nbrew services start zuul\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zuul\n\n# Enable in rc.conf\necho &#039;zuul_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zuul start\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zuul\n\n# Or using Scoop\nscoop install zuul\n\n# Verify installation\nzuul --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zuul\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzuul --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zuul\n\n# Start service\nsudo systemctl start zuul\n\n# Stop service\nsudo systemctl stop zuul\n\n# Restart service\nsudo systemctl restart zuul\n\n# Check status\nsudo systemctl status zuul\n\n# View logs\nsudo journalctl -u zuul -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zuul default\n\n# Start service\nrc-service zuul start\n\n# Stop service\nrc-service zuul stop\n\n# Restart service\nrc-service zuul restart\n\n# Check status\nrc-service zuul status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zuul_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zuul start\n\n# Stop service\nservice zuul stop\n\n# Restart service\nservice zuul restart\n\n# Check status\nservice zuul status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zuul\nbrew services stop zuul\nbrew services restart zuul\n\n# Check status\nbrew services list | grep zuul</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zuul\n\n# Stop service\nnet stop zuul\n\n# Using PowerShell\nStart-Service zuul\nStop-Service zuul\nRestart-Service zuul\n\n# Check status\nGet-Service zuul</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zuul_backend {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    listen 80;\n    server_name zuul.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zuul.example.com;\n\n    ssl_certificate /etc/ssl/certs/zuul.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zuul.example.com.key;\n\n    location / {\n        proxy_pass http://zuul_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zuul.example.com\n    Redirect permanent / https://zuul.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zuul.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zuul.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zuul.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zuul_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zuul.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zuul_backend\n\nbackend zuul_backend\n    balance roundrobin\n    server zuul1 127.0.0.1:8080 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zuul:zuul /etc/zuul\nsudo chmod 750 /etc/zuul\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zuul\n\n# View logs\nsudo journalctl -u zuul -f\n\n# Monitor resource usage\ntop -p $(pgrep zuul)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zuul&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zuul-backup-$DATE.tar.gz&quot; /etc/zuul /var/lib/zuul\n\necho &quot;Backup completed: $BACKUP_DIR/zuul-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zuul\n\n# Restore from backup\ntar -xzf /backup/zuul/zuul-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zuul</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zuul -n 100\nsudo tail -f /var/log/zuul/zuul.log\n\n# Check configuration\nzuul --version\n\n# Check permissions\nls -la /etc/zuul</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8080\n\n# Test connectivity\ntelnet localhost 8080\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zuul)\n\n# Check disk I/O\niotop -p $(pgrep zuul)\n\n# Check connections\nss -an | grep 8080</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zuul:\n    image: zuul:latest\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./config:/etc/zuul\n      - ./data:/var/lib/zuul\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zuul\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zuul\n\n# Arch Linux\nsudo pacman -Syu zuul\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zuul\n\n# openSUSE\nsudo zypper update zuul\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zuul\n\n# Always backup before updates\ntar -czf /backup/zuul-pre-update-$(date +%Y%m%d).tar.gz /etc/zuul\n\n# Restart after updates\nsudo systemctl restart zuul</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zuul\n\n# Clean old logs\nfind /var/log/zuul -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zuul</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zuul.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zuul/zuul</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zuul.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zuul.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1268,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:06.578Z",
      "metadataVersion": "2.0"
    },
    {
      "name": "zwavejs2mqtt",
      "displayName": "zwavejs2mqtt Installation Guide",
      "slug": "zwavejs2mqtt",
      "description": "zwavejs2mqtt is a free and open-source Z-Wave to MQTT. ZwaveJS2MQTT bridges Z-Wave devices to MQTT",
      "category": "miscellaneous",
      "subcategory": "miscellaneous",
      "difficultyLevel": "intermediate",
      "estimatedSetupTime": "15-30 minutes",
      "supportedOS": [
        "rhel",
        "centos",
        "rocky",
        "almalinux",
        "debian",
        "ubuntu",
        "arch",
        "alpine",
        "opensuse",
        "sles",
        "macos",
        "freebsd",
        "windows"
      ],
      "defaultPorts": [
        80,
        443,
        8091
      ],
      "installationMethods": [
        "native-packages",
        "source-compilation"
      ],
      "features": [
        "multi-os-support",
        "comprehensive-documentation",
        "security-hardening",
        "performance-optimization",
        "backup-restore-procedures",
        "troubleshooting-guides"
      ],
      "tags": [
        "miscellaneous",
        "containerization",
        "observability",
        "data-storage",
        "networking",
        "security",
        "data-protection"
      ],
      "maintenanceStatus": "active",
      "specVersion": "2.0",
      "version": "1.0.0",
      "license": "Open Source",
      "websiteUrl": "https://howtomgr.github.io/miscellaneous/zwavejs2mqtt",
      "documentationUrl": "https://howtomgr.github.io/miscellaneous/zwavejs2mqtt",
      "language": null,
      "stars": 0,
      "forks": 0,
      "topics": [],
      "githubUrl": "https://github.com/howtomgr/zwavejs2mqtt",
      "updatedAt": "2025-09-16T18:05:32Z",
      "createdAt": "2025-09-16T08:45:15Z",
      "readmeRaw": "# zwavejs2mqtt Installation Guide\n\nzwavejs2mqtt is a free and open-source Z-Wave to MQTT. ZwaveJS2MQTT bridges Z-Wave devices to MQTT\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 500MB for data\n  - Network: Z-Wave/MQTT\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8091 (default zwavejs2mqtt port)\n  - WS on 3000\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zwavejs2mqtt\nsudo dnf install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install zwavejs2mqtt\nsudo apt install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo ufw allow 8091\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### Arch Linux\n\n```bash\n# Install zwavejs2mqtt\nsudo pacman -S zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### Alpine Linux\n\n```bash\n# Install zwavejs2mqtt\napk add --no-cache zwavejs2mqtt\n\n# Enable and start service\nrc-update add zwavejs2mqtt default\nrc-service zwavejs2mqtt start\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install zwavejs2mqtt\nsudo zypper install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install zwavejs2mqtt\n\n# Start service\nbrew services start zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install zwavejs2mqtt\n\n# Enable in rc.conf\necho 'zwavejs2mqtt_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zwavejs2mqtt start\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install zwavejs2mqtt\n\n# Or using Scoop\nscoop install zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/zwavejs2mqtt\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzwavejs2mqtt --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable zwavejs2mqtt\n\n# Start service\nsudo systemctl start zwavejs2mqtt\n\n# Stop service\nsudo systemctl stop zwavejs2mqtt\n\n# Restart service\nsudo systemctl restart zwavejs2mqtt\n\n# Check status\nsudo systemctl status zwavejs2mqtt\n\n# View logs\nsudo journalctl -u zwavejs2mqtt -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add zwavejs2mqtt default\n\n# Start service\nrc-service zwavejs2mqtt start\n\n# Stop service\nrc-service zwavejs2mqtt stop\n\n# Restart service\nrc-service zwavejs2mqtt restart\n\n# Check status\nrc-service zwavejs2mqtt status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'zwavejs2mqtt_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice zwavejs2mqtt start\n\n# Stop service\nservice zwavejs2mqtt stop\n\n# Restart service\nservice zwavejs2mqtt restart\n\n# Check status\nservice zwavejs2mqtt status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start zwavejs2mqtt\nbrew services stop zwavejs2mqtt\nbrew services restart zwavejs2mqtt\n\n# Check status\nbrew services list | grep zwavejs2mqtt\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start zwavejs2mqtt\n\n# Stop service\nnet stop zwavejs2mqtt\n\n# Using PowerShell\nStart-Service zwavejs2mqtt\nStop-Service zwavejs2mqtt\nRestart-Service zwavejs2mqtt\n\n# Check status\nGet-Service zwavejs2mqtt\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream zwavejs2mqtt_backend {\n    server 127.0.0.1:8091;\n}\n\nserver {\n    listen 80;\n    server_name zwavejs2mqtt.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zwavejs2mqtt.example.com;\n\n    ssl_certificate /etc/ssl/certs/zwavejs2mqtt.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zwavejs2mqtt.example.com.key;\n\n    location / {\n        proxy_pass http://zwavejs2mqtt_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName zwavejs2mqtt.example.com\n    Redirect permanent / https://zwavejs2mqtt.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName zwavejs2mqtt.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zwavejs2mqtt.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zwavejs2mqtt.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8091/\n    ProxyPassReverse / http://127.0.0.1:8091/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend zwavejs2mqtt_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zwavejs2mqtt.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zwavejs2mqtt_backend\n\nbackend zwavejs2mqtt_backend\n    balance roundrobin\n    server zwavejs2mqtt1 127.0.0.1:8091 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R zwavejs2mqtt:zwavejs2mqtt /etc/zwavejs2mqtt\nsudo chmod 750 /etc/zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status zwavejs2mqtt\n\n# View logs\nsudo journalctl -u zwavejs2mqtt -f\n\n# Monitor resource usage\ntop -p $(pgrep zwavejs2mqtt)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/zwavejs2mqtt\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/zwavejs2mqtt-backup-$DATE.tar.gz\" /etc/zwavejs2mqtt /var/lib/zwavejs2mqtt\n\necho \"Backup completed: $BACKUP_DIR/zwavejs2mqtt-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop zwavejs2mqtt\n\n# Restore from backup\ntar -xzf /backup/zwavejs2mqtt/zwavejs2mqtt-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zwavejs2mqtt\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u zwavejs2mqtt -n 100\nsudo tail -f /var/log/zwavejs2mqtt/zwavejs2mqtt.log\n\n# Check configuration\nzwavejs2mqtt --version\n\n# Check permissions\nls -la /etc/zwavejs2mqtt\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8091\n\n# Test connectivity\ntelnet localhost 8091\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep zwavejs2mqtt)\n\n# Check disk I/O\niotop -p $(pgrep zwavejs2mqtt)\n\n# Check connections\nss -an | grep 8091\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  zwavejs2mqtt:\n    image: zwavejs2mqtt:latest\n    ports:\n      - \"8091:8091\"\n    volumes:\n      - ./config:/etc/zwavejs2mqtt\n      - ./data:/var/lib/zwavejs2mqtt\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zwavejs2mqtt\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade zwavejs2mqtt\n\n# Arch Linux\nsudo pacman -Syu zwavejs2mqtt\n\n# Alpine Linux\napk update && apk upgrade zwavejs2mqtt\n\n# openSUSE\nsudo zypper update zwavejs2mqtt\n\n# FreeBSD\npkg update && pkg upgrade zwavejs2mqtt\n\n# Always backup before updates\ntar -czf /backup/zwavejs2mqtt-pre-update-$(date +%Y%m%d).tar.gz /etc/zwavejs2mqtt\n\n# Restart after updates\nsudo systemctl restart zwavejs2mqtt\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/zwavejs2mqtt\n\n# Clean old logs\nfind /var/log/zwavejs2mqtt -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zwavejs2mqtt\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.zwavejs2mqtt.org/\n- GitHub Repository: https://github.com/zwavejs2mqtt/zwavejs2mqtt\n- Community Forum: https://forum.zwavejs2mqtt.org/\n- Best Practices Guide: https://docs.zwavejs2mqtt.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n",
      "readmeHtml": "<p class=\"mobile-paragraph\">zwavejs2mqtt is a free and open-source Z-Wave to MQTT. ZwaveJS2MQTT bridges Z-Wave devices to MQTT</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 500MB for data</li>\n<li class=\"mobile-list-item\">Network: Z-Wave/MQTT</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8091 (default zwavejs2mqtt port)</li>\n<li class=\"mobile-list-item\">WS on 3000</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install zwavejs2mqtt\nsudo dnf install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install zwavejs2mqtt\nsudo apt install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo ufw allow 8091\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zwavejs2mqtt\nsudo pacman -S zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zwavejs2mqtt\napk add --no-cache zwavejs2mqtt\n\n# Enable and start service\nrc-update add zwavejs2mqtt default\nrc-service zwavejs2mqtt start\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install zwavejs2mqtt\nsudo zypper install -y zwavejs2mqtt\n\n# Enable and start service\nsudo systemctl enable --now zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install zwavejs2mqtt\n\n# Start service\nbrew services start zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install zwavejs2mqtt\n\n# Enable in rc.conf\necho &#039;zwavejs2mqtt_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zwavejs2mqtt start\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install zwavejs2mqtt\n\n# Or using Scoop\nscoop install zwavejs2mqtt\n\n# Verify installation\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/zwavejs2mqtt\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nzwavejs2mqtt --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable zwavejs2mqtt\n\n# Start service\nsudo systemctl start zwavejs2mqtt\n\n# Stop service\nsudo systemctl stop zwavejs2mqtt\n\n# Restart service\nsudo systemctl restart zwavejs2mqtt\n\n# Check status\nsudo systemctl status zwavejs2mqtt\n\n# View logs\nsudo journalctl -u zwavejs2mqtt -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add zwavejs2mqtt default\n\n# Start service\nrc-service zwavejs2mqtt start\n\n# Stop service\nrc-service zwavejs2mqtt stop\n\n# Restart service\nrc-service zwavejs2mqtt restart\n\n# Check status\nrc-service zwavejs2mqtt status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;zwavejs2mqtt_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice zwavejs2mqtt start\n\n# Stop service\nservice zwavejs2mqtt stop\n\n# Restart service\nservice zwavejs2mqtt restart\n\n# Check status\nservice zwavejs2mqtt status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start zwavejs2mqtt\nbrew services stop zwavejs2mqtt\nbrew services restart zwavejs2mqtt\n\n# Check status\nbrew services list | grep zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start zwavejs2mqtt\n\n# Stop service\nnet stop zwavejs2mqtt\n\n# Using PowerShell\nStart-Service zwavejs2mqtt\nStop-Service zwavejs2mqtt\nRestart-Service zwavejs2mqtt\n\n# Check status\nGet-Service zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream zwavejs2mqtt_backend {\n    server 127.0.0.1:8091;\n}\n\nserver {\n    listen 80;\n    server_name zwavejs2mqtt.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name zwavejs2mqtt.example.com;\n\n    ssl_certificate /etc/ssl/certs/zwavejs2mqtt.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/zwavejs2mqtt.example.com.key;\n\n    location / {\n        proxy_pass http://zwavejs2mqtt_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName zwavejs2mqtt.example.com\n    Redirect permanent / https://zwavejs2mqtt.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName zwavejs2mqtt.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/zwavejs2mqtt.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/zwavejs2mqtt.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8091/\n    ProxyPassReverse / http://127.0.0.1:8091/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend zwavejs2mqtt_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/zwavejs2mqtt.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend zwavejs2mqtt_backend\n\nbackend zwavejs2mqtt_backend\n    balance roundrobin\n    server zwavejs2mqtt1 127.0.0.1:8091 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R zwavejs2mqtt:zwavejs2mqtt /etc/zwavejs2mqtt\nsudo chmod 750 /etc/zwavejs2mqtt\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8091/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status zwavejs2mqtt\n\n# View logs\nsudo journalctl -u zwavejs2mqtt -f\n\n# Monitor resource usage\ntop -p $(pgrep zwavejs2mqtt)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/zwavejs2mqtt&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/zwavejs2mqtt-backup-$DATE.tar.gz&quot; /etc/zwavejs2mqtt /var/lib/zwavejs2mqtt\n\necho &quot;Backup completed: $BACKUP_DIR/zwavejs2mqtt-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop zwavejs2mqtt\n\n# Restore from backup\ntar -xzf /backup/zwavejs2mqtt/zwavejs2mqtt-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u zwavejs2mqtt -n 100\nsudo tail -f /var/log/zwavejs2mqtt/zwavejs2mqtt.log\n\n# Check configuration\nzwavejs2mqtt --version\n\n# Check permissions\nls -la /etc/zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8091\n\n# Test connectivity\ntelnet localhost 8091\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep zwavejs2mqtt)\n\n# Check disk I/O\niotop -p $(pgrep zwavejs2mqtt)\n\n# Check connections\nss -an | grep 8091</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  zwavejs2mqtt:\n    image: zwavejs2mqtt:latest\n    ports:\n      - &quot;8091:8091&quot;\n    volumes:\n      - ./config:/etc/zwavejs2mqtt\n      - ./data:/var/lib/zwavejs2mqtt\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update zwavejs2mqtt\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade zwavejs2mqtt\n\n# Arch Linux\nsudo pacman -Syu zwavejs2mqtt\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade zwavejs2mqtt\n\n# openSUSE\nsudo zypper update zwavejs2mqtt\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade zwavejs2mqtt\n\n# Always backup before updates\ntar -czf /backup/zwavejs2mqtt-pre-update-$(date +%Y%m%d).tar.gz /etc/zwavejs2mqtt\n\n# Restart after updates\nsudo systemctl restart zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/zwavejs2mqtt\n\n# Clean old logs\nfind /var/log/zwavejs2mqtt -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/zwavejs2mqtt</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.zwavejs2mqtt.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/zwavejs2mqtt/zwavejs2mqtt</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.zwavejs2mqtt.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.zwavejs2mqtt.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>",
      "readTime": "7 min",
      "wordCount": 1268,
      "tableOfContents": [
        {
          "level": 2,
          "text": "1. Prerequisites",
          "id": "1-prerequisites"
        },
        {
          "level": 2,
          "text": "2. Supported Operating Systems",
          "id": "2-supported-operating-systems"
        },
        {
          "level": 2,
          "text": "3. Installation",
          "id": "3-installation"
        },
        {
          "level": 3,
          "text": "RHEL/CentOS/Rocky Linux/AlmaLinux",
          "id": "rhelcentosrocky-linuxalmalinux"
        },
        {
          "level": 3,
          "text": "Debian/Ubuntu",
          "id": "debianubuntu"
        },
        {
          "level": 3,
          "text": "Arch Linux",
          "id": "arch-linux"
        },
        {
          "level": 3,
          "text": "Alpine Linux",
          "id": "alpine-linux"
        },
        {
          "level": 3,
          "text": "openSUSE/SLES",
          "id": "opensusesles"
        },
        {
          "level": 3,
          "text": "macOS",
          "id": "macos"
        },
        {
          "level": 3,
          "text": "FreeBSD",
          "id": "freebsd"
        },
        {
          "level": 3,
          "text": "Windows",
          "id": "windows"
        },
        {
          "level": 2,
          "text": "Initial Configuration",
          "id": "initial-configuration"
        },
        {
          "level": 3,
          "text": "Basic Configuration",
          "id": "basic-configuration"
        },
        {
          "level": 2,
          "text": "5. Service Management",
          "id": "5-service-management"
        },
        {
          "level": 3,
          "text": "systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)",
          "id": "systemd-rhel-debian-ubuntu-arch-opensuse"
        },
        {
          "level": 3,
          "text": "OpenRC (Alpine Linux)",
          "id": "openrc-alpine-linux"
        },
        {
          "level": 3,
          "text": "rc.d (FreeBSD)",
          "id": "rcd-freebsd"
        },
        {
          "level": 3,
          "text": "launchd (macOS)",
          "id": "launchd-macos"
        },
        {
          "level": 3,
          "text": "Windows Service Manager",
          "id": "windows-service-manager"
        },
        {
          "level": 2,
          "text": "Advanced Configuration",
          "id": "advanced-configuration"
        },
        {
          "level": 2,
          "text": "Reverse Proxy Setup",
          "id": "reverse-proxy-setup"
        },
        {
          "level": 3,
          "text": "nginx Configuration",
          "id": "nginx-configuration"
        },
        {
          "level": 3,
          "text": "Apache Configuration",
          "id": "apache-configuration"
        },
        {
          "level": 3,
          "text": "HAProxy Configuration",
          "id": "haproxy-configuration"
        },
        {
          "level": 2,
          "text": "Security Configuration",
          "id": "security-configuration"
        },
        {
          "level": 3,
          "text": "Basic Security Setup",
          "id": "basic-security-setup"
        },
        {
          "level": 2,
          "text": "Database Setup",
          "id": "database-setup"
        },
        {
          "level": 2,
          "text": "Performance Optimization",
          "id": "performance-optimization"
        },
        {
          "level": 3,
          "text": "System Tuning",
          "id": "system-tuning"
        },
        {
          "level": 2,
          "text": "Monitoring",
          "id": "monitoring"
        },
        {
          "level": 3,
          "text": "Basic Monitoring",
          "id": "basic-monitoring"
        },
        {
          "level": 2,
          "text": "9. Backup and Restore",
          "id": "9-backup-and-restore"
        },
        {
          "level": 3,
          "text": "Backup Script",
          "id": "backup-script"
        },
        {
          "level": 3,
          "text": "Restore Procedure",
          "id": "restore-procedure"
        },
        {
          "level": 2,
          "text": "6. Troubleshooting",
          "id": "6-troubleshooting"
        },
        {
          "level": 3,
          "text": "Common Issues",
          "id": "common-issues"
        },
        {
          "level": 2,
          "text": "Integration Examples",
          "id": "integration-examples"
        },
        {
          "level": 3,
          "text": "Docker Compose Example",
          "id": "docker-compose-example"
        },
        {
          "level": 2,
          "text": "Maintenance",
          "id": "maintenance"
        },
        {
          "level": 3,
          "text": "Update Procedures",
          "id": "update-procedures"
        },
        {
          "level": 3,
          "text": "Regular Maintenance",
          "id": "regular-maintenance"
        },
        {
          "level": 2,
          "text": "Additional Resources",
          "id": "additional-resources"
        }
      ],
      "lastBuilt": "2025-09-23T03:24:06.316Z",
      "metadataVersion": "2.0"
    }
  ]
}