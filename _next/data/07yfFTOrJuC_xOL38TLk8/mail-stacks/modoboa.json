{"pageProps":{"guide":{"name":"modoboa","displayName":"Modoboa Installation Guide","slug":"modoboa","description":"Modoboa is a free and open-source Mail Server Stack. Mail hosting made simple","category":"mail-stacks","subcategory":"mail-stacks","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["mail-stacks","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/mail-stacks/modoboa","documentationUrl":"https://howtomgr.github.io/mail-stacks/modoboa","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/modoboa","updatedAt":"2025-09-16T17:32:05Z","createdAt":"2025-09-16T03:44:42Z","readmeRaw":"# Modoboa Installation Guide\n\nModoboa is a free and open-source Mail Server Stack. Mail hosting made simple\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 443 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443 (default modoboa port)\n- **Dependencies**:\n  - python3, postgresql, nginx\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install modoboa\nsudo dnf install -y modoboa python3, postgresql, nginx\n\n# Enable and start service\nsudo systemctl enable --now modoboa\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=modoboa\nsudo firewall-cmd --reload\n\n# Verify installation\nmodoboa --version || systemctl status modoboa\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install modoboa\nsudo apt install -y modoboa python3, postgresql, nginx\n\n# Enable and start service\nsudo systemctl enable --now modoboa\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nmodoboa --version || systemctl status modoboa\n```\n\n### Arch Linux\n\n```bash\n# Install modoboa\nsudo pacman -S modoboa\n\n# Enable and start service\nsudo systemctl enable --now modoboa\n\n# Verify installation\nmodoboa --version || systemctl status modoboa\n```\n\n### Alpine Linux\n\n```bash\n# Install modoboa\napk add --no-cache modoboa\n\n# Enable and start service\nrc-update add modoboa default\nrc-service modoboa start\n\n# Verify installation\nmodoboa --version || rc-service modoboa status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install modoboa\nsudo zypper install -y modoboa python3, postgresql, nginx\n\n# Enable and start service\nsudo systemctl enable --now modoboa\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=modoboa\nsudo firewall-cmd --reload\n\n# Verify installation\nmodoboa --version || systemctl status modoboa\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install modoboa\n\n# Start service\nbrew services start modoboa\n\n# Verify installation\nmodoboa --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install modoboa\n\n# Enable in rc.conf\necho 'modoboa_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice modoboa start\n\n# Verify installation\nmodoboa --version || service modoboa status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install modoboa\n\n# Or using Scoop\nscoop install modoboa\n\n# Verify installation\nmodoboa --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/modoboa\n\n# Set up basic configuration\nsudo tee /etc/modoboa/modoboa.conf << 'EOF'\n# Modoboa Configuration\nprocesses = 4\nEOF\n\n# Test configuration\nsudo modoboa -t || sudo modoboa configtest\n\n# Reload service\nsudo systemctl reload modoboa\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R modoboa:modoboa /etc/modoboa\nsudo chmod 750 /etc/modoboa\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable modoboa\n\n# Start service\nsudo systemctl start modoboa\n\n# Stop service\nsudo systemctl stop modoboa\n\n# Restart service\nsudo systemctl restart modoboa\n\n# Reload configuration\nsudo systemctl reload modoboa\n\n# Check status\nsudo systemctl status modoboa\n\n# View logs\nsudo journalctl -u modoboa -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add modoboa default\n\n# Start service\nrc-service modoboa start\n\n# Stop service\nrc-service modoboa stop\n\n# Restart service\nrc-service modoboa restart\n\n# Check status\nrc-service modoboa status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'modoboa_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice modoboa start\n\n# Stop service\nservice modoboa stop\n\n# Restart service\nservice modoboa restart\n\n# Check status\nservice modoboa status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start modoboa\nbrew services stop modoboa\nbrew services restart modoboa\n\n# Check status\nbrew services list | grep modoboa\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start modoboa\n\n# Stop service\nnet stop modoboa\n\n# Using PowerShell\nStart-Service modoboa\nStop-Service modoboa\nRestart-Service modoboa\n\n# Check status\nGet-Service modoboa\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/modoboa/modoboa.conf << 'EOF'\nprocesses = 4\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart modoboa\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream modoboa_backend {\n    server 127.0.0.1:443;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name modoboa.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name modoboa.example.com;\n\n    ssl_certificate /etc/ssl/certs/modoboa.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/modoboa.example.com.key;\n\n    location / {\n        proxy_pass http://modoboa_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName modoboa.example.com\n    Redirect permanent / https://modoboa.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName modoboa.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/modoboa.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/modoboa.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:443/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend modoboa_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/modoboa.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend modoboa_backend\n\nbackend modoboa_backend\n    balance roundrobin\n    option httpchk GET /health\n    server modoboa1 127.0.0.1:443 check\n    server modoboa2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R modoboa:modoboa /etc/modoboa\nsudo chmod 750 /etc/modoboa\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=modoboa\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/modoboa.conf << 'EOF'\n[modoboa]\nenabled = true\nport = 443\nfilter = modoboa\nlogpath = /var/log/modoboa/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/modoboa.key \\\n    -out /etc/ssl/certs/modoboa.crt\n\n# Configure SSL in modoboa\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE modoboa_db;\nCREATE USER modoboa_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE modoboa_db TO modoboa_user;\nEOF\n\n# Configure modoboa to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE modoboa_db;\nCREATE USER 'modoboa_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON modoboa_db.* TO 'modoboa_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Modoboa specific tuning\nprocesses = 4\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nmodoboa soft nofile 65535\nmodoboa hard nofile 65535\nmodoboa soft nproc 32768\nmodoboa hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'modoboa'\n    static_configs:\n      - targets: ['localhost:443']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet modoboa; then\n    echo \"Modoboa is running\"\n    exit 0\nelse\n    echo \"Modoboa is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/modoboa << 'EOF'\n/var/log/modoboa/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 modoboa modoboa\n    postrotate\n        systemctl reload modoboa > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Modoboa backup script\nBACKUP_DIR=\"/backup/modoboa\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop modoboa\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/modoboa-config-$DATE.tar.gz\" /etc/modoboa\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/modoboa-data-$DATE.tar.gz\" /var/lib/modoboa\n\n# Start service\nsystemctl start modoboa\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop modoboa\n\n# Restore configuration\nsudo tar -xzf /backup/modoboa/modoboa-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/modoboa/modoboa-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R modoboa:modoboa /etc/modoboa\nsudo chown -R modoboa:modoboa /var/lib/modoboa\n\n# Start service\nsudo systemctl start modoboa\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u modoboa -n 100\nsudo tail -f /var/log/modoboa/*.log\n\n# Check configuration\nsudo modoboa -t || sudo modoboa configtest\n\n# Check permissions\nls -la /etc/modoboa\nls -la /var/lib/modoboa\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443\nsudo netstat -tlnp | grep 443\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443\nnc -zv localhost 443\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep uwsgi)\nhtop -p $(pgrep uwsgi)\n\n# Check connections\nss -ant | grep :443 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep uwsgi)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo modoboa -d\n# or\nsudo modoboa debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  modoboa:\n    image: modoboa:latest\n    container_name: modoboa\n    ports:\n      - \"443:443\"\n    volumes:\n      - ./config:/etc/modoboa\n      - ./data:/var/lib/modoboa\n    environment:\n      - modoboa_CONFIG=/etc/modoboa/modoboa.conf\n    restart: unless-stopped\n    networks:\n      - modoboa_net\n\nnetworks:\n  modoboa_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: modoboa\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: modoboa\n  template:\n    metadata:\n      labels:\n        app: modoboa\n    spec:\n      containers:\n      - name: modoboa\n        image: modoboa:latest\n        ports:\n        - containerPort: 443\n        volumeMounts:\n        - name: config\n          mountPath: /etc/modoboa\n      volumes:\n      - name: config\n        configMap:\n          name: modoboa-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: modoboa\nspec:\n  selector:\n    app: modoboa\n  ports:\n  - port: 443\n    targetPort: 443\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Modoboa\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install modoboa\n      package:\n        name: modoboa\n        state: present\n    \n    - name: Configure modoboa\n      template:\n        src: modoboa.conf.j2\n        dest: /etc/modoboa/modoboa.conf\n        owner: modoboa\n        group: modoboa\n        mode: '0640'\n      notify: restart modoboa\n    \n    - name: Start and enable modoboa\n      systemd:\n        name: modoboa\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart modoboa\n      systemd:\n        name: modoboa\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update modoboa\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade modoboa\n\n# Arch Linux\nsudo pacman -Syu modoboa\n\n# Alpine Linux\napk update && apk upgrade modoboa\n\n# openSUSE\nsudo zypper update modoboa\n\n# FreeBSD\npkg update && pkg upgrade modoboa\n\n# Always backup before updates\ntar -czf /backup/modoboa-pre-update-$(date +%Y%m%d).tar.gz /etc/modoboa\n\n# Restart after updates\nsudo systemctl restart modoboa\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/modoboa -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo modoboa --verify || sudo modoboa check\n\n# Update databases (if applicable)\nsudo modoboa-update-db\n\n# Optimize performance\nsudo modoboa-optimize\n\n# Check for security updates\nsudo modoboa --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.modoboa.org/\n- GitHub Repository: https://github.com/modoboa/modoboa\n- Community Forum: https://forum.modoboa.org/\n- Wiki: https://wiki.modoboa.org/\n- Comparison vs mailcow, Mailu, iRedMail, Postal: https://docs.modoboa.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Modoboa is a free and open-source Mail Server Stack. Mail hosting made simple</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 443 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443 (default modoboa port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">python3, postgresql, nginx</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install modoboa\nsudo dnf install -y modoboa python3, postgresql, nginx\n\n# Enable and start service\nsudo systemctl enable --now modoboa\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=modoboa\nsudo firewall-cmd --reload\n\n# Verify installation\nmodoboa --version || systemctl status modoboa</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install modoboa\nsudo apt install -y modoboa python3, postgresql, nginx\n\n# Enable and start service\nsudo systemctl enable --now modoboa\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nmodoboa --version || systemctl status modoboa</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install modoboa\nsudo pacman -S modoboa\n\n# Enable and start service\nsudo systemctl enable --now modoboa\n\n# Verify installation\nmodoboa --version || systemctl status modoboa</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install modoboa\napk add --no-cache modoboa\n\n# Enable and start service\nrc-update add modoboa default\nrc-service modoboa start\n\n# Verify installation\nmodoboa --version || rc-service modoboa status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install modoboa\nsudo zypper install -y modoboa python3, postgresql, nginx\n\n# Enable and start service\nsudo systemctl enable --now modoboa\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=modoboa\nsudo firewall-cmd --reload\n\n# Verify installation\nmodoboa --version || systemctl status modoboa</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install modoboa\n\n# Start service\nbrew services start modoboa\n\n# Verify installation\nmodoboa --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install modoboa\n\n# Enable in rc.conf\necho &#039;modoboa_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice modoboa start\n\n# Verify installation\nmodoboa --version || service modoboa status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install modoboa\n\n# Or using Scoop\nscoop install modoboa\n\n# Verify installation\nmodoboa --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/modoboa\n\n# Set up basic configuration\nsudo tee /etc/modoboa/modoboa.conf &lt;&lt; &#039;EOF&#039;\n# Modoboa Configuration\nprocesses = 4\nEOF\n\n# Test configuration\nsudo modoboa -t || sudo modoboa configtest\n\n# Reload service\nsudo systemctl reload modoboa</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R modoboa:modoboa /etc/modoboa\nsudo chmod 750 /etc/modoboa\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable modoboa\n\n# Start service\nsudo systemctl start modoboa\n\n# Stop service\nsudo systemctl stop modoboa\n\n# Restart service\nsudo systemctl restart modoboa\n\n# Reload configuration\nsudo systemctl reload modoboa\n\n# Check status\nsudo systemctl status modoboa\n\n# View logs\nsudo journalctl -u modoboa -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add modoboa default\n\n# Start service\nrc-service modoboa start\n\n# Stop service\nrc-service modoboa stop\n\n# Restart service\nrc-service modoboa restart\n\n# Check status\nrc-service modoboa status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;modoboa_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice modoboa start\n\n# Stop service\nservice modoboa stop\n\n# Restart service\nservice modoboa restart\n\n# Check status\nservice modoboa status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start modoboa\nbrew services stop modoboa\nbrew services restart modoboa\n\n# Check status\nbrew services list | grep modoboa</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start modoboa\n\n# Stop service\nnet stop modoboa\n\n# Using PowerShell\nStart-Service modoboa\nStop-Service modoboa\nRestart-Service modoboa\n\n# Check status\nGet-Service modoboa</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/modoboa/modoboa.conf &lt;&lt; &#039;EOF&#039;\nprocesses = 4\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart modoboa</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream modoboa_backend {\n    server 127.0.0.1:443;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name modoboa.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name modoboa.example.com;\n\n    ssl_certificate /etc/ssl/certs/modoboa.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/modoboa.example.com.key;\n\n    location / {\n        proxy_pass http://modoboa_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName modoboa.example.com\n    Redirect permanent / https://modoboa.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName modoboa.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/modoboa.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/modoboa.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:443/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend modoboa_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/modoboa.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend modoboa_backend\n\nbackend modoboa_backend\n    balance roundrobin\n    option httpchk GET /health\n    server modoboa1 127.0.0.1:443 check\n    server modoboa2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R modoboa:modoboa /etc/modoboa\nsudo chmod 750 /etc/modoboa\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=modoboa\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/modoboa.conf &lt;&lt; &#039;EOF&#039;\n[modoboa]\nenabled = true\nport = 443\nfilter = modoboa\nlogpath = /var/log/modoboa/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/modoboa.key \\\n    -out /etc/ssl/certs/modoboa.crt\n\n# Configure SSL in modoboa\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE modoboa_db;\nCREATE USER modoboa_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE modoboa_db TO modoboa_user;\nEOF\n\n# Configure modoboa to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE modoboa_db;\nCREATE USER &#039;modoboa_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON modoboa_db.* TO &#039;modoboa_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Modoboa specific tuning\nprocesses = 4</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nmodoboa soft nofile 65535\nmodoboa hard nofile 65535\nmodoboa soft nproc 32768\nmodoboa hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;modoboa&#039;\n    static_configs:\n      - targets: [&#039;localhost:443&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet modoboa; then\n    echo &quot;Modoboa is running&quot;\n    exit 0\nelse\n    echo &quot;Modoboa is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/modoboa &lt;&lt; &#039;EOF&#039;\n/var/log/modoboa/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 modoboa modoboa\n    postrotate\n        systemctl reload modoboa &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Modoboa backup script\nBACKUP_DIR=&quot;/backup/modoboa&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop modoboa\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/modoboa-config-$DATE.tar.gz&quot; /etc/modoboa\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/modoboa-data-$DATE.tar.gz&quot; /var/lib/modoboa\n\n# Start service\nsystemctl start modoboa\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop modoboa\n\n# Restore configuration\nsudo tar -xzf /backup/modoboa/modoboa-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/modoboa/modoboa-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R modoboa:modoboa /etc/modoboa\nsudo chown -R modoboa:modoboa /var/lib/modoboa\n\n# Start service\nsudo systemctl start modoboa</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u modoboa -n 100\nsudo tail -f /var/log/modoboa/*.log\n\n# Check configuration\nsudo modoboa -t || sudo modoboa configtest\n\n# Check permissions\nls -la /etc/modoboa\nls -la /var/lib/modoboa</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443\nsudo netstat -tlnp | grep 443\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443\nnc -zv localhost 443</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep uwsgi)\nhtop -p $(pgrep uwsgi)\n\n# Check connections\nss -ant | grep :443 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep uwsgi)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo modoboa -d\n# or\nsudo modoboa debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  modoboa:\n    image: modoboa:latest\n    container_name: modoboa\n    ports:\n      - &quot;443:443&quot;\n    volumes:\n      - ./config:/etc/modoboa\n      - ./data:/var/lib/modoboa\n    environment:\n      - modoboa_CONFIG=/etc/modoboa/modoboa.conf\n    restart: unless-stopped\n    networks:\n      - modoboa_net\n\nnetworks:\n  modoboa_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: modoboa\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: modoboa\n  template:\n    metadata:\n      labels:\n        app: modoboa\n    spec:\n      containers:\n      - name: modoboa\n        image: modoboa:latest\n        ports:\n        - containerPort: 443\n        volumeMounts:\n        - name: config\n          mountPath: /etc/modoboa\n      volumes:\n      - name: config\n        configMap:\n          name: modoboa-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: modoboa\nspec:\n  selector:\n    app: modoboa\n  ports:\n  - port: 443\n    targetPort: 443\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Modoboa\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install modoboa\n      package:\n        name: modoboa\n        state: present\n    \n    - name: Configure modoboa\n      template:\n        src: modoboa.conf.j2\n        dest: /etc/modoboa/modoboa.conf\n        owner: modoboa\n        group: modoboa\n        mode: &#039;0640&#039;\n      notify: restart modoboa\n    \n    - name: Start and enable modoboa\n      systemd:\n        name: modoboa\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart modoboa\n      systemd:\n        name: modoboa\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update modoboa\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade modoboa\n\n# Arch Linux\nsudo pacman -Syu modoboa\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade modoboa\n\n# openSUSE\nsudo zypper update modoboa\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade modoboa\n\n# Always backup before updates\ntar -czf /backup/modoboa-pre-update-$(date +%Y%m%d).tar.gz /etc/modoboa\n\n# Restart after updates\nsudo systemctl restart modoboa</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/modoboa -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo modoboa --verify || sudo modoboa check\n\n# Update databases (if applicable)\nsudo modoboa-update-db\n\n# Optimize performance\nsudo modoboa-optimize\n\n# Check for security updates\nsudo modoboa --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.modoboa.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/modoboa/modoboa</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.modoboa.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.modoboa.org/</li>\n<li class=\"mobile-list-item\">Comparison vs mailcow, Mailu, iRedMail, Postal: https://docs.modoboa.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1991,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-18T18:13:55.706Z","metadataVersion":"2.0"},"category":{"key":"mail-stacks","name":"Mail stacks","description":"Mail stacks tools and applications","icon":"💬","color":"#f1fa8c"},"relatedGuides":[{"name":"iredmail","displayName":"iRedMail Installation Guide","slug":"iredmail","description":"iRedMail is a free and open-source Mail Server Stack. Full-featured mail server solution","category":"mail-stacks","subcategory":"mail-stacks","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["mail-stacks","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/mail-stacks/iredmail","documentationUrl":"https://howtomgr.github.io/mail-stacks/iredmail","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/iredmail","updatedAt":"2025-09-16T17:20:49Z","createdAt":"2025-09-16T03:23:33Z","readmeRaw":"# iRedMail Installation Guide\n\niRedMail is a free and open-source Mail Server Stack. Full-featured mail server solution\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 443 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443 (default iredmail port)\n- **Dependencies**:\n  - postfix, dovecot, nginx\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install iredmail\nsudo dnf install -y iredmail postfix, dovecot, nginx\n\n# Enable and start service\nsudo systemctl enable --now iredmail\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=iredmail\nsudo firewall-cmd --reload\n\n# Verify installation\niredmail --version || systemctl status iredmail\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install iredmail\nsudo apt install -y iredmail postfix, dovecot, nginx\n\n# Enable and start service\nsudo systemctl enable --now iredmail\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\niredmail --version || systemctl status iredmail\n```\n\n### Arch Linux\n\n```bash\n# Install iredmail\nsudo pacman -S iredmail\n\n# Enable and start service\nsudo systemctl enable --now iredmail\n\n# Verify installation\niredmail --version || systemctl status iredmail\n```\n\n### Alpine Linux\n\n```bash\n# Install iredmail\napk add --no-cache iredmail\n\n# Enable and start service\nrc-update add iredmail default\nrc-service iredmail start\n\n# Verify installation\niredmail --version || rc-service iredmail status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install iredmail\nsudo zypper install -y iredmail postfix, dovecot, nginx\n\n# Enable and start service\nsudo systemctl enable --now iredmail\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=iredmail\nsudo firewall-cmd --reload\n\n# Verify installation\niredmail --version || systemctl status iredmail\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install iredmail\n\n# Start service\nbrew services start iredmail\n\n# Verify installation\niredmail --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install iredmail\n\n# Enable in rc.conf\necho 'iredmail_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice iredmail start\n\n# Verify installation\niredmail --version || service iredmail status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install iredmail\n\n# Or using Scoop\nscoop install iredmail\n\n# Verify installation\niredmail --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /opt/iredmail\n\n# Set up basic configuration\nsudo tee /opt/iredmail/iredmail.conf << 'EOF'\n# iRedMail Configuration\nprocess_limit = 1024\nEOF\n\n# Test configuration\nsudo iredmail -t || sudo iredmail configtest\n\n# Reload service\nsudo systemctl reload iredmail\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R iredmail:iredmail /opt/iredmail\nsudo chmod 750 /opt/iredmail\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable iredmail\n\n# Start service\nsudo systemctl start iredmail\n\n# Stop service\nsudo systemctl stop iredmail\n\n# Restart service\nsudo systemctl restart iredmail\n\n# Reload configuration\nsudo systemctl reload iredmail\n\n# Check status\nsudo systemctl status iredmail\n\n# View logs\nsudo journalctl -u iredmail -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add iredmail default\n\n# Start service\nrc-service iredmail start\n\n# Stop service\nrc-service iredmail stop\n\n# Restart service\nrc-service iredmail restart\n\n# Check status\nrc-service iredmail status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'iredmail_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice iredmail start\n\n# Stop service\nservice iredmail stop\n\n# Restart service\nservice iredmail restart\n\n# Check status\nservice iredmail status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start iredmail\nbrew services stop iredmail\nbrew services restart iredmail\n\n# Check status\nbrew services list | grep iredmail\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start iredmail\n\n# Stop service\nnet stop iredmail\n\n# Using PowerShell\nStart-Service iredmail\nStop-Service iredmail\nRestart-Service iredmail\n\n# Check status\nGet-Service iredmail\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /opt/iredmail/iredmail.conf << 'EOF'\nprocess_limit = 1024\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart iredmail\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream iredmail_backend {\n    server 127.0.0.1:443;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name iredmail.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name iredmail.example.com;\n\n    ssl_certificate /etc/ssl/certs/iredmail.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/iredmail.example.com.key;\n\n    location / {\n        proxy_pass http://iredmail_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName iredmail.example.com\n    Redirect permanent / https://iredmail.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName iredmail.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/iredmail.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/iredmail.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:443/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend iredmail_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/iredmail.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend iredmail_backend\n\nbackend iredmail_backend\n    balance roundrobin\n    option httpchk GET /health\n    server iredmail1 127.0.0.1:443 check\n    server iredmail2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R iredmail:iredmail /opt/iredmail\nsudo chmod 750 /opt/iredmail\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=iredmail\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/iredmail.conf << 'EOF'\n[iredmail]\nenabled = true\nport = 443\nfilter = iredmail\nlogpath = /var/log/iredmail/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/iredmail.key \\\n    -out /etc/ssl/certs/iredmail.crt\n\n# Configure SSL in iredmail\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE iredmail_db;\nCREATE USER iredmail_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE iredmail_db TO iredmail_user;\nEOF\n\n# Configure iredmail to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE iredmail_db;\nCREATE USER 'iredmail_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON iredmail_db.* TO 'iredmail_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# iRedMail specific tuning\nprocess_limit = 1024\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\niredmail soft nofile 65535\niredmail hard nofile 65535\niredmail soft nproc 32768\niredmail hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'iredmail'\n    static_configs:\n      - targets: ['localhost:443']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet iredmail; then\n    echo \"iRedMail is running\"\n    exit 0\nelse\n    echo \"iRedMail is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/iredmail << 'EOF'\n/var/log/iredmail/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 iredmail iredmail\n    postrotate\n        systemctl reload iredmail > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# iRedMail backup script\nBACKUP_DIR=\"/backup/iredmail\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop iredmail\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/iredmail-config-$DATE.tar.gz\" /opt/iredmail\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/iredmail-data-$DATE.tar.gz\" /var/lib/iredmail\n\n# Start service\nsystemctl start iredmail\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop iredmail\n\n# Restore configuration\nsudo tar -xzf /backup/iredmail/iredmail-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/iredmail/iredmail-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R iredmail:iredmail /opt/iredmail\nsudo chown -R iredmail:iredmail /var/lib/iredmail\n\n# Start service\nsudo systemctl start iredmail\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u iredmail -n 100\nsudo tail -f /var/log/iredmail/*.log\n\n# Check configuration\nsudo iredmail -t || sudo iredmail configtest\n\n# Check permissions\nls -la /opt/iredmail\nls -la /var/lib/iredmail\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443\nsudo netstat -tlnp | grep 443\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443\nnc -zv localhost 443\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep dovecot)\nhtop -p $(pgrep dovecot)\n\n# Check connections\nss -ant | grep :443 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep dovecot)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo iredmail -d\n# or\nsudo iredmail debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  iredmail:\n    image: iredmail:latest\n    container_name: iredmail\n    ports:\n      - \"443:443\"\n    volumes:\n      - ./config:/opt/iredmail\n      - ./data:/var/lib/iredmail\n    environment:\n      - iredmail_CONFIG=/opt/iredmail/iredmail.conf\n    restart: unless-stopped\n    networks:\n      - iredmail_net\n\nnetworks:\n  iredmail_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: iredmail\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: iredmail\n  template:\n    metadata:\n      labels:\n        app: iredmail\n    spec:\n      containers:\n      - name: iredmail\n        image: iredmail:latest\n        ports:\n        - containerPort: 443\n        volumeMounts:\n        - name: config\n          mountPath: /opt/iredmail\n      volumes:\n      - name: config\n        configMap:\n          name: iredmail-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: iredmail\nspec:\n  selector:\n    app: iredmail\n  ports:\n  - port: 443\n    targetPort: 443\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure iRedMail\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install iredmail\n      package:\n        name: iredmail\n        state: present\n    \n    - name: Configure iredmail\n      template:\n        src: iredmail.conf.j2\n        dest: /opt/iredmail/iredmail.conf\n        owner: iredmail\n        group: iredmail\n        mode: '0640'\n      notify: restart iredmail\n    \n    - name: Start and enable iredmail\n      systemd:\n        name: iredmail\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart iredmail\n      systemd:\n        name: iredmail\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update iredmail\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade iredmail\n\n# Arch Linux\nsudo pacman -Syu iredmail\n\n# Alpine Linux\napk update && apk upgrade iredmail\n\n# openSUSE\nsudo zypper update iredmail\n\n# FreeBSD\npkg update && pkg upgrade iredmail\n\n# Always backup before updates\ntar -czf /backup/iredmail-pre-update-$(date +%Y%m%d).tar.gz /opt/iredmail\n\n# Restart after updates\nsudo systemctl restart iredmail\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/iredmail -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo iredmail --verify || sudo iredmail check\n\n# Update databases (if applicable)\nsudo iredmail-update-db\n\n# Optimize performance\nsudo iredmail-optimize\n\n# Check for security updates\nsudo iredmail --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.iredmail.org/\n- GitHub Repository: https://github.com/iredmail/iredmail\n- Community Forum: https://forum.iredmail.org/\n- Wiki: https://wiki.iredmail.org/\n- Comparison vs mailcow, Mailu, Mail-in-a-Box, Zimbra: https://docs.iredmail.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">iRedMail is a free and open-source Mail Server Stack. Full-featured mail server solution</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 443 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443 (default iredmail port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">postfix, dovecot, nginx</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install iredmail\nsudo dnf install -y iredmail postfix, dovecot, nginx\n\n# Enable and start service\nsudo systemctl enable --now iredmail\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=iredmail\nsudo firewall-cmd --reload\n\n# Verify installation\niredmail --version || systemctl status iredmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install iredmail\nsudo apt install -y iredmail postfix, dovecot, nginx\n\n# Enable and start service\nsudo systemctl enable --now iredmail\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\niredmail --version || systemctl status iredmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install iredmail\nsudo pacman -S iredmail\n\n# Enable and start service\nsudo systemctl enable --now iredmail\n\n# Verify installation\niredmail --version || systemctl status iredmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install iredmail\napk add --no-cache iredmail\n\n# Enable and start service\nrc-update add iredmail default\nrc-service iredmail start\n\n# Verify installation\niredmail --version || rc-service iredmail status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install iredmail\nsudo zypper install -y iredmail postfix, dovecot, nginx\n\n# Enable and start service\nsudo systemctl enable --now iredmail\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=iredmail\nsudo firewall-cmd --reload\n\n# Verify installation\niredmail --version || systemctl status iredmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install iredmail\n\n# Start service\nbrew services start iredmail\n\n# Verify installation\niredmail --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install iredmail\n\n# Enable in rc.conf\necho &#039;iredmail_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice iredmail start\n\n# Verify installation\niredmail --version || service iredmail status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install iredmail\n\n# Or using Scoop\nscoop install iredmail\n\n# Verify installation\niredmail --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /opt/iredmail\n\n# Set up basic configuration\nsudo tee /opt/iredmail/iredmail.conf &lt;&lt; &#039;EOF&#039;\n# iRedMail Configuration\nprocess_limit = 1024\nEOF\n\n# Test configuration\nsudo iredmail -t || sudo iredmail configtest\n\n# Reload service\nsudo systemctl reload iredmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R iredmail:iredmail /opt/iredmail\nsudo chmod 750 /opt/iredmail\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable iredmail\n\n# Start service\nsudo systemctl start iredmail\n\n# Stop service\nsudo systemctl stop iredmail\n\n# Restart service\nsudo systemctl restart iredmail\n\n# Reload configuration\nsudo systemctl reload iredmail\n\n# Check status\nsudo systemctl status iredmail\n\n# View logs\nsudo journalctl -u iredmail -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add iredmail default\n\n# Start service\nrc-service iredmail start\n\n# Stop service\nrc-service iredmail stop\n\n# Restart service\nrc-service iredmail restart\n\n# Check status\nrc-service iredmail status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;iredmail_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice iredmail start\n\n# Stop service\nservice iredmail stop\n\n# Restart service\nservice iredmail restart\n\n# Check status\nservice iredmail status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start iredmail\nbrew services stop iredmail\nbrew services restart iredmail\n\n# Check status\nbrew services list | grep iredmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start iredmail\n\n# Stop service\nnet stop iredmail\n\n# Using PowerShell\nStart-Service iredmail\nStop-Service iredmail\nRestart-Service iredmail\n\n# Check status\nGet-Service iredmail</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /opt/iredmail/iredmail.conf &lt;&lt; &#039;EOF&#039;\nprocess_limit = 1024\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart iredmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream iredmail_backend {\n    server 127.0.0.1:443;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name iredmail.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name iredmail.example.com;\n\n    ssl_certificate /etc/ssl/certs/iredmail.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/iredmail.example.com.key;\n\n    location / {\n        proxy_pass http://iredmail_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName iredmail.example.com\n    Redirect permanent / https://iredmail.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName iredmail.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/iredmail.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/iredmail.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:443/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend iredmail_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/iredmail.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend iredmail_backend\n\nbackend iredmail_backend\n    balance roundrobin\n    option httpchk GET /health\n    server iredmail1 127.0.0.1:443 check\n    server iredmail2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R iredmail:iredmail /opt/iredmail\nsudo chmod 750 /opt/iredmail\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=iredmail\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/iredmail.conf &lt;&lt; &#039;EOF&#039;\n[iredmail]\nenabled = true\nport = 443\nfilter = iredmail\nlogpath = /var/log/iredmail/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/iredmail.key \\\n    -out /etc/ssl/certs/iredmail.crt\n\n# Configure SSL in iredmail\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE iredmail_db;\nCREATE USER iredmail_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE iredmail_db TO iredmail_user;\nEOF\n\n# Configure iredmail to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE iredmail_db;\nCREATE USER &#039;iredmail_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON iredmail_db.* TO &#039;iredmail_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# iRedMail specific tuning\nprocess_limit = 1024</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\niredmail soft nofile 65535\niredmail hard nofile 65535\niredmail soft nproc 32768\niredmail hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;iredmail&#039;\n    static_configs:\n      - targets: [&#039;localhost:443&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet iredmail; then\n    echo &quot;iRedMail is running&quot;\n    exit 0\nelse\n    echo &quot;iRedMail is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/iredmail &lt;&lt; &#039;EOF&#039;\n/var/log/iredmail/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 iredmail iredmail\n    postrotate\n        systemctl reload iredmail &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# iRedMail backup script\nBACKUP_DIR=&quot;/backup/iredmail&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop iredmail\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/iredmail-config-$DATE.tar.gz&quot; /opt/iredmail\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/iredmail-data-$DATE.tar.gz&quot; /var/lib/iredmail\n\n# Start service\nsystemctl start iredmail\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop iredmail\n\n# Restore configuration\nsudo tar -xzf /backup/iredmail/iredmail-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/iredmail/iredmail-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R iredmail:iredmail /opt/iredmail\nsudo chown -R iredmail:iredmail /var/lib/iredmail\n\n# Start service\nsudo systemctl start iredmail</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u iredmail -n 100\nsudo tail -f /var/log/iredmail/*.log\n\n# Check configuration\nsudo iredmail -t || sudo iredmail configtest\n\n# Check permissions\nls -la /opt/iredmail\nls -la /var/lib/iredmail</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443\nsudo netstat -tlnp | grep 443\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443\nnc -zv localhost 443</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep dovecot)\nhtop -p $(pgrep dovecot)\n\n# Check connections\nss -ant | grep :443 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep dovecot)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo iredmail -d\n# or\nsudo iredmail debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  iredmail:\n    image: iredmail:latest\n    container_name: iredmail\n    ports:\n      - &quot;443:443&quot;\n    volumes:\n      - ./config:/opt/iredmail\n      - ./data:/var/lib/iredmail\n    environment:\n      - iredmail_CONFIG=/opt/iredmail/iredmail.conf\n    restart: unless-stopped\n    networks:\n      - iredmail_net\n\nnetworks:\n  iredmail_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: iredmail\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: iredmail\n  template:\n    metadata:\n      labels:\n        app: iredmail\n    spec:\n      containers:\n      - name: iredmail\n        image: iredmail:latest\n        ports:\n        - containerPort: 443\n        volumeMounts:\n        - name: config\n          mountPath: /opt/iredmail\n      volumes:\n      - name: config\n        configMap:\n          name: iredmail-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: iredmail\nspec:\n  selector:\n    app: iredmail\n  ports:\n  - port: 443\n    targetPort: 443\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure iRedMail\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install iredmail\n      package:\n        name: iredmail\n        state: present\n    \n    - name: Configure iredmail\n      template:\n        src: iredmail.conf.j2\n        dest: /opt/iredmail/iredmail.conf\n        owner: iredmail\n        group: iredmail\n        mode: &#039;0640&#039;\n      notify: restart iredmail\n    \n    - name: Start and enable iredmail\n      systemd:\n        name: iredmail\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart iredmail\n      systemd:\n        name: iredmail\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update iredmail\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade iredmail\n\n# Arch Linux\nsudo pacman -Syu iredmail\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade iredmail\n\n# openSUSE\nsudo zypper update iredmail\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade iredmail\n\n# Always backup before updates\ntar -czf /backup/iredmail-pre-update-$(date +%Y%m%d).tar.gz /opt/iredmail\n\n# Restart after updates\nsudo systemctl restart iredmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/iredmail -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo iredmail --verify || sudo iredmail check\n\n# Update databases (if applicable)\nsudo iredmail-update-db\n\n# Optimize performance\nsudo iredmail-optimize\n\n# Check for security updates\nsudo iredmail --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.iredmail.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/iredmail/iredmail</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.iredmail.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.iredmail.org/</li>\n<li class=\"mobile-list-item\">Comparison vs mailcow, Mailu, Mail-in-a-Box, Zimbra: https://docs.iredmail.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1991,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-18T18:14:26.649Z","metadataVersion":"2.0"},{"name":"mailcow","displayName":"mailcow Installation Guide","slug":"mailcow","description":"mailcow is a free and open-source Mail Server Stack. Dockerized email server with modern web UI","category":"mail-stacks","subcategory":"mail-stacks","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["mail-stacks","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/mail-stacks/mailcow","documentationUrl":"https://howtomgr.github.io/mail-stacks/mailcow","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mailcow","updatedAt":"2025-09-16T17:28:27Z","createdAt":"2025-09-16T03:38:02Z","readmeRaw":"# mailcow Installation Guide\n\nmailcow is a free and open-source Mail Server Stack. Dockerized email server with modern web UI\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 443 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443 (default mailcow port)\n- **Dependencies**:\n  - docker, docker-compose\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mailcow\nsudo dnf install -y mailcow docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailcow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailcow\nsudo firewall-cmd --reload\n\n# Verify installation\nmailcow --version || systemctl status mailcow\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install mailcow\nsudo apt install -y mailcow docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailcow\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nmailcow --version || systemctl status mailcow\n```\n\n### Arch Linux\n\n```bash\n# Install mailcow\nsudo pacman -S mailcow\n\n# Enable and start service\nsudo systemctl enable --now mailcow\n\n# Verify installation\nmailcow --version || systemctl status mailcow\n```\n\n### Alpine Linux\n\n```bash\n# Install mailcow\napk add --no-cache mailcow\n\n# Enable and start service\nrc-update add mailcow default\nrc-service mailcow start\n\n# Verify installation\nmailcow --version || rc-service mailcow status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install mailcow\nsudo zypper install -y mailcow docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailcow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailcow\nsudo firewall-cmd --reload\n\n# Verify installation\nmailcow --version || systemctl status mailcow\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install mailcow\n\n# Start service\nbrew services start mailcow\n\n# Verify installation\nmailcow --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install mailcow\n\n# Enable in rc.conf\necho 'mailcow_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mailcow start\n\n# Verify installation\nmailcow --version || service mailcow status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install mailcow\n\n# Or using Scoop\nscoop install mailcow\n\n# Verify installation\nmailcow --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /opt/mailcow\n\n# Set up basic configuration\nsudo tee /opt/mailcow/mailcow.conf << 'EOF'\n# mailcow Configuration\nCOMPOSE_PROJECT_NAME=mailcow\nEOF\n\n# Test configuration\nsudo mailcow -t || sudo mailcow configtest\n\n# Reload service\nsudo systemctl reload mailcow\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R mailcow:mailcow /opt/mailcow\nsudo chmod 750 /opt/mailcow\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable mailcow\n\n# Start service\nsudo systemctl start mailcow\n\n# Stop service\nsudo systemctl stop mailcow\n\n# Restart service\nsudo systemctl restart mailcow\n\n# Reload configuration\nsudo systemctl reload mailcow\n\n# Check status\nsudo systemctl status mailcow\n\n# View logs\nsudo journalctl -u mailcow -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add mailcow default\n\n# Start service\nrc-service mailcow start\n\n# Stop service\nrc-service mailcow stop\n\n# Restart service\nrc-service mailcow restart\n\n# Check status\nrc-service mailcow status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'mailcow_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mailcow start\n\n# Stop service\nservice mailcow stop\n\n# Restart service\nservice mailcow restart\n\n# Check status\nservice mailcow status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start mailcow\nbrew services stop mailcow\nbrew services restart mailcow\n\n# Check status\nbrew services list | grep mailcow\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start mailcow\n\n# Stop service\nnet stop mailcow\n\n# Using PowerShell\nStart-Service mailcow\nStop-Service mailcow\nRestart-Service mailcow\n\n# Check status\nGet-Service mailcow\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /opt/mailcow/mailcow.conf << 'EOF'\nCOMPOSE_PROJECT_NAME=mailcow\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart mailcow\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream mailcow_backend {\n    server 127.0.0.1:443;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name mailcow.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name mailcow.example.com;\n\n    ssl_certificate /etc/ssl/certs/mailcow.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/mailcow.example.com.key;\n\n    location / {\n        proxy_pass http://mailcow_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName mailcow.example.com\n    Redirect permanent / https://mailcow.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName mailcow.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/mailcow.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/mailcow.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:443/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend mailcow_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/mailcow.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend mailcow_backend\n\nbackend mailcow_backend\n    balance roundrobin\n    option httpchk GET /health\n    server mailcow1 127.0.0.1:443 check\n    server mailcow2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R mailcow:mailcow /opt/mailcow\nsudo chmod 750 /opt/mailcow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailcow\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/mailcow.conf << 'EOF'\n[mailcow]\nenabled = true\nport = 443\nfilter = mailcow\nlogpath = /var/log/mailcow/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/mailcow.key \\\n    -out /etc/ssl/certs/mailcow.crt\n\n# Configure SSL in mailcow\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE mailcow_db;\nCREATE USER mailcow_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE mailcow_db TO mailcow_user;\nEOF\n\n# Configure mailcow to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE mailcow_db;\nCREATE USER 'mailcow_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON mailcow_db.* TO 'mailcow_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# mailcow specific tuning\nCOMPOSE_PROJECT_NAME=mailcow\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nmailcow soft nofile 65535\nmailcow hard nofile 65535\nmailcow soft nproc 32768\nmailcow hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'mailcow'\n    static_configs:\n      - targets: ['localhost:443']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet mailcow; then\n    echo \"mailcow is running\"\n    exit 0\nelse\n    echo \"mailcow is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/mailcow << 'EOF'\n/var/log/mailcow/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 mailcow mailcow\n    postrotate\n        systemctl reload mailcow > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# mailcow backup script\nBACKUP_DIR=\"/backup/mailcow\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop mailcow\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/mailcow-config-$DATE.tar.gz\" /opt/mailcow\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/mailcow-data-$DATE.tar.gz\" /var/lib/mailcow\n\n# Start service\nsystemctl start mailcow\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop mailcow\n\n# Restore configuration\nsudo tar -xzf /backup/mailcow/mailcow-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/mailcow/mailcow-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R mailcow:mailcow /opt/mailcow\nsudo chown -R mailcow:mailcow /var/lib/mailcow\n\n# Start service\nsudo systemctl start mailcow\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u mailcow -n 100\nsudo tail -f /var/log/mailcow/*.log\n\n# Check configuration\nsudo mailcow -t || sudo mailcow configtest\n\n# Check permissions\nls -la /opt/mailcow\nls -la /var/lib/mailcow\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443\nsudo netstat -tlnp | grep 443\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443\nnc -zv localhost 443\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep supervisord)\nhtop -p $(pgrep supervisord)\n\n# Check connections\nss -ant | grep :443 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep supervisord)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo mailcow -d\n# or\nsudo mailcow debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  mailcow:\n    image: mailcow:latest\n    container_name: mailcow\n    ports:\n      - \"443:443\"\n    volumes:\n      - ./config:/opt/mailcow\n      - ./data:/var/lib/mailcow\n    environment:\n      - mailcow_CONFIG=/opt/mailcow/mailcow.conf\n    restart: unless-stopped\n    networks:\n      - mailcow_net\n\nnetworks:\n  mailcow_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mailcow\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mailcow\n  template:\n    metadata:\n      labels:\n        app: mailcow\n    spec:\n      containers:\n      - name: mailcow\n        image: mailcow:latest\n        ports:\n        - containerPort: 443\n        volumeMounts:\n        - name: config\n          mountPath: /opt/mailcow\n      volumes:\n      - name: config\n        configMap:\n          name: mailcow-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mailcow\nspec:\n  selector:\n    app: mailcow\n  ports:\n  - port: 443\n    targetPort: 443\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure mailcow\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install mailcow\n      package:\n        name: mailcow\n        state: present\n    \n    - name: Configure mailcow\n      template:\n        src: mailcow.conf.j2\n        dest: /opt/mailcow/mailcow.conf\n        owner: mailcow\n        group: mailcow\n        mode: '0640'\n      notify: restart mailcow\n    \n    - name: Start and enable mailcow\n      systemd:\n        name: mailcow\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart mailcow\n      systemd:\n        name: mailcow\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update mailcow\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade mailcow\n\n# Arch Linux\nsudo pacman -Syu mailcow\n\n# Alpine Linux\napk update && apk upgrade mailcow\n\n# openSUSE\nsudo zypper update mailcow\n\n# FreeBSD\npkg update && pkg upgrade mailcow\n\n# Always backup before updates\ntar -czf /backup/mailcow-pre-update-$(date +%Y%m%d).tar.gz /opt/mailcow\n\n# Restart after updates\nsudo systemctl restart mailcow\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/mailcow -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo mailcow --verify || sudo mailcow check\n\n# Update databases (if applicable)\nsudo mailcow-update-db\n\n# Optimize performance\nsudo mailcow-optimize\n\n# Check for security updates\nsudo mailcow --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.mailcow.org/\n- GitHub Repository: https://github.com/mailcow/mailcow\n- Community Forum: https://forum.mailcow.org/\n- Wiki: https://wiki.mailcow.org/\n- Comparison vs Mail-in-a-Box, iRedMail, Mailu, Postal: https://docs.mailcow.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">mailcow is a free and open-source Mail Server Stack. Dockerized email server with modern web UI</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 443 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443 (default mailcow port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">docker, docker-compose</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mailcow\nsudo dnf install -y mailcow docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailcow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailcow\nsudo firewall-cmd --reload\n\n# Verify installation\nmailcow --version || systemctl status mailcow</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install mailcow\nsudo apt install -y mailcow docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailcow\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nmailcow --version || systemctl status mailcow</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mailcow\nsudo pacman -S mailcow\n\n# Enable and start service\nsudo systemctl enable --now mailcow\n\n# Verify installation\nmailcow --version || systemctl status mailcow</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mailcow\napk add --no-cache mailcow\n\n# Enable and start service\nrc-update add mailcow default\nrc-service mailcow start\n\n# Verify installation\nmailcow --version || rc-service mailcow status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mailcow\nsudo zypper install -y mailcow docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailcow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailcow\nsudo firewall-cmd --reload\n\n# Verify installation\nmailcow --version || systemctl status mailcow</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install mailcow\n\n# Start service\nbrew services start mailcow\n\n# Verify installation\nmailcow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install mailcow\n\n# Enable in rc.conf\necho &#039;mailcow_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mailcow start\n\n# Verify installation\nmailcow --version || service mailcow status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install mailcow\n\n# Or using Scoop\nscoop install mailcow\n\n# Verify installation\nmailcow --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /opt/mailcow\n\n# Set up basic configuration\nsudo tee /opt/mailcow/mailcow.conf &lt;&lt; &#039;EOF&#039;\n# mailcow Configuration\nCOMPOSE_PROJECT_NAME=mailcow\nEOF\n\n# Test configuration\nsudo mailcow -t || sudo mailcow configtest\n\n# Reload service\nsudo systemctl reload mailcow</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R mailcow:mailcow /opt/mailcow\nsudo chmod 750 /opt/mailcow\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable mailcow\n\n# Start service\nsudo systemctl start mailcow\n\n# Stop service\nsudo systemctl stop mailcow\n\n# Restart service\nsudo systemctl restart mailcow\n\n# Reload configuration\nsudo systemctl reload mailcow\n\n# Check status\nsudo systemctl status mailcow\n\n# View logs\nsudo journalctl -u mailcow -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add mailcow default\n\n# Start service\nrc-service mailcow start\n\n# Stop service\nrc-service mailcow stop\n\n# Restart service\nrc-service mailcow restart\n\n# Check status\nrc-service mailcow status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;mailcow_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mailcow start\n\n# Stop service\nservice mailcow stop\n\n# Restart service\nservice mailcow restart\n\n# Check status\nservice mailcow status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start mailcow\nbrew services stop mailcow\nbrew services restart mailcow\n\n# Check status\nbrew services list | grep mailcow</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start mailcow\n\n# Stop service\nnet stop mailcow\n\n# Using PowerShell\nStart-Service mailcow\nStop-Service mailcow\nRestart-Service mailcow\n\n# Check status\nGet-Service mailcow</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /opt/mailcow/mailcow.conf &lt;&lt; &#039;EOF&#039;\nCOMPOSE_PROJECT_NAME=mailcow\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart mailcow</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream mailcow_backend {\n    server 127.0.0.1:443;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name mailcow.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name mailcow.example.com;\n\n    ssl_certificate /etc/ssl/certs/mailcow.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/mailcow.example.com.key;\n\n    location / {\n        proxy_pass http://mailcow_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName mailcow.example.com\n    Redirect permanent / https://mailcow.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName mailcow.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/mailcow.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/mailcow.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:443/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend mailcow_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/mailcow.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend mailcow_backend\n\nbackend mailcow_backend\n    balance roundrobin\n    option httpchk GET /health\n    server mailcow1 127.0.0.1:443 check\n    server mailcow2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R mailcow:mailcow /opt/mailcow\nsudo chmod 750 /opt/mailcow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailcow\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/mailcow.conf &lt;&lt; &#039;EOF&#039;\n[mailcow]\nenabled = true\nport = 443\nfilter = mailcow\nlogpath = /var/log/mailcow/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/mailcow.key \\\n    -out /etc/ssl/certs/mailcow.crt\n\n# Configure SSL in mailcow\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE mailcow_db;\nCREATE USER mailcow_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE mailcow_db TO mailcow_user;\nEOF\n\n# Configure mailcow to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE mailcow_db;\nCREATE USER &#039;mailcow_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON mailcow_db.* TO &#039;mailcow_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# mailcow specific tuning\nCOMPOSE_PROJECT_NAME=mailcow</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nmailcow soft nofile 65535\nmailcow hard nofile 65535\nmailcow soft nproc 32768\nmailcow hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;mailcow&#039;\n    static_configs:\n      - targets: [&#039;localhost:443&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet mailcow; then\n    echo &quot;mailcow is running&quot;\n    exit 0\nelse\n    echo &quot;mailcow is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/mailcow &lt;&lt; &#039;EOF&#039;\n/var/log/mailcow/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 mailcow mailcow\n    postrotate\n        systemctl reload mailcow &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mailcow backup script\nBACKUP_DIR=&quot;/backup/mailcow&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop mailcow\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/mailcow-config-$DATE.tar.gz&quot; /opt/mailcow\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/mailcow-data-$DATE.tar.gz&quot; /var/lib/mailcow\n\n# Start service\nsystemctl start mailcow\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop mailcow\n\n# Restore configuration\nsudo tar -xzf /backup/mailcow/mailcow-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/mailcow/mailcow-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R mailcow:mailcow /opt/mailcow\nsudo chown -R mailcow:mailcow /var/lib/mailcow\n\n# Start service\nsudo systemctl start mailcow</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mailcow -n 100\nsudo tail -f /var/log/mailcow/*.log\n\n# Check configuration\nsudo mailcow -t || sudo mailcow configtest\n\n# Check permissions\nls -la /opt/mailcow\nls -la /var/lib/mailcow</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443\nsudo netstat -tlnp | grep 443\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443\nnc -zv localhost 443</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep supervisord)\nhtop -p $(pgrep supervisord)\n\n# Check connections\nss -ant | grep :443 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep supervisord)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo mailcow -d\n# or\nsudo mailcow debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  mailcow:\n    image: mailcow:latest\n    container_name: mailcow\n    ports:\n      - &quot;443:443&quot;\n    volumes:\n      - ./config:/opt/mailcow\n      - ./data:/var/lib/mailcow\n    environment:\n      - mailcow_CONFIG=/opt/mailcow/mailcow.conf\n    restart: unless-stopped\n    networks:\n      - mailcow_net\n\nnetworks:\n  mailcow_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mailcow\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mailcow\n  template:\n    metadata:\n      labels:\n        app: mailcow\n    spec:\n      containers:\n      - name: mailcow\n        image: mailcow:latest\n        ports:\n        - containerPort: 443\n        volumeMounts:\n        - name: config\n          mountPath: /opt/mailcow\n      volumes:\n      - name: config\n        configMap:\n          name: mailcow-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mailcow\nspec:\n  selector:\n    app: mailcow\n  ports:\n  - port: 443\n    targetPort: 443\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure mailcow\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install mailcow\n      package:\n        name: mailcow\n        state: present\n    \n    - name: Configure mailcow\n      template:\n        src: mailcow.conf.j2\n        dest: /opt/mailcow/mailcow.conf\n        owner: mailcow\n        group: mailcow\n        mode: &#039;0640&#039;\n      notify: restart mailcow\n    \n    - name: Start and enable mailcow\n      systemd:\n        name: mailcow\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart mailcow\n      systemd:\n        name: mailcow\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update mailcow\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade mailcow\n\n# Arch Linux\nsudo pacman -Syu mailcow\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade mailcow\n\n# openSUSE\nsudo zypper update mailcow\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade mailcow\n\n# Always backup before updates\ntar -czf /backup/mailcow-pre-update-$(date +%Y%m%d).tar.gz /opt/mailcow\n\n# Restart after updates\nsudo systemctl restart mailcow</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/mailcow -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo mailcow --verify || sudo mailcow check\n\n# Update databases (if applicable)\nsudo mailcow-update-db\n\n# Optimize performance\nsudo mailcow-optimize\n\n# Check for security updates\nsudo mailcow --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.mailcow.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/mailcow/mailcow</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.mailcow.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.mailcow.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Mail-in-a-Box, iRedMail, Mailu, Postal: https://docs.mailcow.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1984,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-18T18:14:05.103Z","metadataVersion":"2.0"},{"name":"mailu","displayName":"Mailu Installation Guide","slug":"mailu","description":"Mailu is a free and open-source Mail Server Stack. Simple yet full-featured mail server","category":"mail-stacks","subcategory":"mail-stacks","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["mail-stacks","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/mail-stacks/mailu","documentationUrl":"https://howtomgr.github.io/mail-stacks/mailu","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mailu","updatedAt":"2025-09-16T17:29:01Z","createdAt":"2025-09-16T03:39:07Z","readmeRaw":"# Mailu Installation Guide\n\nMailu is a free and open-source Mail Server Stack. Simple yet full-featured mail server\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 443 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443 (default mailu port)\n- **Dependencies**:\n  - docker, docker-compose\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mailu\nsudo dnf install -y mailu docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailu\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailu\nsudo firewall-cmd --reload\n\n# Verify installation\nmailu --version || systemctl status mailu\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install mailu\nsudo apt install -y mailu docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailu\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nmailu --version || systemctl status mailu\n```\n\n### Arch Linux\n\n```bash\n# Install mailu\nsudo pacman -S mailu\n\n# Enable and start service\nsudo systemctl enable --now mailu\n\n# Verify installation\nmailu --version || systemctl status mailu\n```\n\n### Alpine Linux\n\n```bash\n# Install mailu\napk add --no-cache mailu\n\n# Enable and start service\nrc-update add mailu default\nrc-service mailu start\n\n# Verify installation\nmailu --version || rc-service mailu status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install mailu\nsudo zypper install -y mailu docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailu\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailu\nsudo firewall-cmd --reload\n\n# Verify installation\nmailu --version || systemctl status mailu\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install mailu\n\n# Start service\nbrew services start mailu\n\n# Verify installation\nmailu --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install mailu\n\n# Enable in rc.conf\necho 'mailu_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mailu start\n\n# Verify installation\nmailu --version || service mailu status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install mailu\n\n# Or using Scoop\nscoop install mailu\n\n# Verify installation\nmailu --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /mailu\n\n# Set up basic configuration\nsudo tee /mailu/mailu.conf << 'EOF'\n# Mailu Configuration\nMESSAGE_RATELIMIT=200/hour\nEOF\n\n# Test configuration\nsudo mailu -t || sudo mailu configtest\n\n# Reload service\nsudo systemctl reload mailu\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R mailu:mailu /mailu\nsudo chmod 750 /mailu\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable mailu\n\n# Start service\nsudo systemctl start mailu\n\n# Stop service\nsudo systemctl stop mailu\n\n# Restart service\nsudo systemctl restart mailu\n\n# Reload configuration\nsudo systemctl reload mailu\n\n# Check status\nsudo systemctl status mailu\n\n# View logs\nsudo journalctl -u mailu -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add mailu default\n\n# Start service\nrc-service mailu start\n\n# Stop service\nrc-service mailu stop\n\n# Restart service\nrc-service mailu restart\n\n# Check status\nrc-service mailu status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'mailu_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mailu start\n\n# Stop service\nservice mailu stop\n\n# Restart service\nservice mailu restart\n\n# Check status\nservice mailu status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start mailu\nbrew services stop mailu\nbrew services restart mailu\n\n# Check status\nbrew services list | grep mailu\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start mailu\n\n# Stop service\nnet stop mailu\n\n# Using PowerShell\nStart-Service mailu\nStop-Service mailu\nRestart-Service mailu\n\n# Check status\nGet-Service mailu\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /mailu/mailu.conf << 'EOF'\nMESSAGE_RATELIMIT=200/hour\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart mailu\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream mailu_backend {\n    server 127.0.0.1:443;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name mailu.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name mailu.example.com;\n\n    ssl_certificate /etc/ssl/certs/mailu.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/mailu.example.com.key;\n\n    location / {\n        proxy_pass http://mailu_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName mailu.example.com\n    Redirect permanent / https://mailu.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName mailu.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/mailu.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/mailu.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:443/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend mailu_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/mailu.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend mailu_backend\n\nbackend mailu_backend\n    balance roundrobin\n    option httpchk GET /health\n    server mailu1 127.0.0.1:443 check\n    server mailu2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R mailu:mailu /mailu\nsudo chmod 750 /mailu\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailu\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/mailu.conf << 'EOF'\n[mailu]\nenabled = true\nport = 443\nfilter = mailu\nlogpath = /var/log/mailu/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/mailu.key \\\n    -out /etc/ssl/certs/mailu.crt\n\n# Configure SSL in mailu\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE mailu_db;\nCREATE USER mailu_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE mailu_db TO mailu_user;\nEOF\n\n# Configure mailu to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE mailu_db;\nCREATE USER 'mailu_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON mailu_db.* TO 'mailu_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Mailu specific tuning\nMESSAGE_RATELIMIT=200/hour\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nmailu soft nofile 65535\nmailu hard nofile 65535\nmailu soft nproc 32768\nmailu hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'mailu'\n    static_configs:\n      - targets: ['localhost:443']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet mailu; then\n    echo \"Mailu is running\"\n    exit 0\nelse\n    echo \"Mailu is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/mailu << 'EOF'\n/var/log/mailu/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 mailu mailu\n    postrotate\n        systemctl reload mailu > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Mailu backup script\nBACKUP_DIR=\"/backup/mailu\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop mailu\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/mailu-config-$DATE.tar.gz\" /mailu\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/mailu-data-$DATE.tar.gz\" /var/lib/mailu\n\n# Start service\nsystemctl start mailu\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop mailu\n\n# Restore configuration\nsudo tar -xzf /backup/mailu/mailu-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/mailu/mailu-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R mailu:mailu /mailu\nsudo chown -R mailu:mailu /var/lib/mailu\n\n# Start service\nsudo systemctl start mailu\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u mailu -n 100\nsudo tail -f /var/log/mailu/*.log\n\n# Check configuration\nsudo mailu -t || sudo mailu configtest\n\n# Check permissions\nls -la /mailu\nls -la /var/lib/mailu\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443\nsudo netstat -tlnp | grep 443\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443\nnc -zv localhost 443\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep nginx)\nhtop -p $(pgrep nginx)\n\n# Check connections\nss -ant | grep :443 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep nginx)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo mailu -d\n# or\nsudo mailu debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  mailu:\n    image: mailu:latest\n    container_name: mailu\n    ports:\n      - \"443:443\"\n    volumes:\n      - ./config:/mailu\n      - ./data:/var/lib/mailu\n    environment:\n      - mailu_CONFIG=/mailu/mailu.conf\n    restart: unless-stopped\n    networks:\n      - mailu_net\n\nnetworks:\n  mailu_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mailu\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mailu\n  template:\n    metadata:\n      labels:\n        app: mailu\n    spec:\n      containers:\n      - name: mailu\n        image: mailu:latest\n        ports:\n        - containerPort: 443\n        volumeMounts:\n        - name: config\n          mountPath: /mailu\n      volumes:\n      - name: config\n        configMap:\n          name: mailu-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mailu\nspec:\n  selector:\n    app: mailu\n  ports:\n  - port: 443\n    targetPort: 443\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Mailu\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install mailu\n      package:\n        name: mailu\n        state: present\n    \n    - name: Configure mailu\n      template:\n        src: mailu.conf.j2\n        dest: /mailu/mailu.conf\n        owner: mailu\n        group: mailu\n        mode: '0640'\n      notify: restart mailu\n    \n    - name: Start and enable mailu\n      systemd:\n        name: mailu\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart mailu\n      systemd:\n        name: mailu\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update mailu\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade mailu\n\n# Arch Linux\nsudo pacman -Syu mailu\n\n# Alpine Linux\napk update && apk upgrade mailu\n\n# openSUSE\nsudo zypper update mailu\n\n# FreeBSD\npkg update && pkg upgrade mailu\n\n# Always backup before updates\ntar -czf /backup/mailu-pre-update-$(date +%Y%m%d).tar.gz /mailu\n\n# Restart after updates\nsudo systemctl restart mailu\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/mailu -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo mailu --verify || sudo mailu check\n\n# Update databases (if applicable)\nsudo mailu-update-db\n\n# Optimize performance\nsudo mailu-optimize\n\n# Check for security updates\nsudo mailu --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.mailu.org/\n- GitHub Repository: https://github.com/mailu/mailu\n- Community Forum: https://forum.mailu.org/\n- Wiki: https://wiki.mailu.org/\n- Comparison vs mailcow, Mail-in-a-Box, iRedMail, Postal: https://docs.mailu.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Mailu is a free and open-source Mail Server Stack. Simple yet full-featured mail server</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 443 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443 (default mailu port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">docker, docker-compose</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mailu\nsudo dnf install -y mailu docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailu\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailu\nsudo firewall-cmd --reload\n\n# Verify installation\nmailu --version || systemctl status mailu</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install mailu\nsudo apt install -y mailu docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailu\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nmailu --version || systemctl status mailu</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mailu\nsudo pacman -S mailu\n\n# Enable and start service\nsudo systemctl enable --now mailu\n\n# Verify installation\nmailu --version || systemctl status mailu</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mailu\napk add --no-cache mailu\n\n# Enable and start service\nrc-update add mailu default\nrc-service mailu start\n\n# Verify installation\nmailu --version || rc-service mailu status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mailu\nsudo zypper install -y mailu docker, docker-compose\n\n# Enable and start service\nsudo systemctl enable --now mailu\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailu\nsudo firewall-cmd --reload\n\n# Verify installation\nmailu --version || systemctl status mailu</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install mailu\n\n# Start service\nbrew services start mailu\n\n# Verify installation\nmailu --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install mailu\n\n# Enable in rc.conf\necho &#039;mailu_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mailu start\n\n# Verify installation\nmailu --version || service mailu status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install mailu\n\n# Or using Scoop\nscoop install mailu\n\n# Verify installation\nmailu --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /mailu\n\n# Set up basic configuration\nsudo tee /mailu/mailu.conf &lt;&lt; &#039;EOF&#039;\n# Mailu Configuration\nMESSAGE_RATELIMIT=200/hour\nEOF\n\n# Test configuration\nsudo mailu -t || sudo mailu configtest\n\n# Reload service\nsudo systemctl reload mailu</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R mailu:mailu /mailu\nsudo chmod 750 /mailu\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable mailu\n\n# Start service\nsudo systemctl start mailu\n\n# Stop service\nsudo systemctl stop mailu\n\n# Restart service\nsudo systemctl restart mailu\n\n# Reload configuration\nsudo systemctl reload mailu\n\n# Check status\nsudo systemctl status mailu\n\n# View logs\nsudo journalctl -u mailu -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add mailu default\n\n# Start service\nrc-service mailu start\n\n# Stop service\nrc-service mailu stop\n\n# Restart service\nrc-service mailu restart\n\n# Check status\nrc-service mailu status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;mailu_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mailu start\n\n# Stop service\nservice mailu stop\n\n# Restart service\nservice mailu restart\n\n# Check status\nservice mailu status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start mailu\nbrew services stop mailu\nbrew services restart mailu\n\n# Check status\nbrew services list | grep mailu</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start mailu\n\n# Stop service\nnet stop mailu\n\n# Using PowerShell\nStart-Service mailu\nStop-Service mailu\nRestart-Service mailu\n\n# Check status\nGet-Service mailu</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /mailu/mailu.conf &lt;&lt; &#039;EOF&#039;\nMESSAGE_RATELIMIT=200/hour\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart mailu</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream mailu_backend {\n    server 127.0.0.1:443;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name mailu.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name mailu.example.com;\n\n    ssl_certificate /etc/ssl/certs/mailu.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/mailu.example.com.key;\n\n    location / {\n        proxy_pass http://mailu_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName mailu.example.com\n    Redirect permanent / https://mailu.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName mailu.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/mailu.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/mailu.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:443/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend mailu_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/mailu.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend mailu_backend\n\nbackend mailu_backend\n    balance roundrobin\n    option httpchk GET /health\n    server mailu1 127.0.0.1:443 check\n    server mailu2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R mailu:mailu /mailu\nsudo chmod 750 /mailu\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mailu\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/mailu.conf &lt;&lt; &#039;EOF&#039;\n[mailu]\nenabled = true\nport = 443\nfilter = mailu\nlogpath = /var/log/mailu/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/mailu.key \\\n    -out /etc/ssl/certs/mailu.crt\n\n# Configure SSL in mailu\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE mailu_db;\nCREATE USER mailu_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE mailu_db TO mailu_user;\nEOF\n\n# Configure mailu to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE mailu_db;\nCREATE USER &#039;mailu_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON mailu_db.* TO &#039;mailu_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Mailu specific tuning\nMESSAGE_RATELIMIT=200/hour</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nmailu soft nofile 65535\nmailu hard nofile 65535\nmailu soft nproc 32768\nmailu hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;mailu&#039;\n    static_configs:\n      - targets: [&#039;localhost:443&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet mailu; then\n    echo &quot;Mailu is running&quot;\n    exit 0\nelse\n    echo &quot;Mailu is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/mailu &lt;&lt; &#039;EOF&#039;\n/var/log/mailu/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 mailu mailu\n    postrotate\n        systemctl reload mailu &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Mailu backup script\nBACKUP_DIR=&quot;/backup/mailu&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop mailu\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/mailu-config-$DATE.tar.gz&quot; /mailu\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/mailu-data-$DATE.tar.gz&quot; /var/lib/mailu\n\n# Start service\nsystemctl start mailu\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop mailu\n\n# Restore configuration\nsudo tar -xzf /backup/mailu/mailu-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/mailu/mailu-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R mailu:mailu /mailu\nsudo chown -R mailu:mailu /var/lib/mailu\n\n# Start service\nsudo systemctl start mailu</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mailu -n 100\nsudo tail -f /var/log/mailu/*.log\n\n# Check configuration\nsudo mailu -t || sudo mailu configtest\n\n# Check permissions\nls -la /mailu\nls -la /var/lib/mailu</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443\nsudo netstat -tlnp | grep 443\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 443\nnc -zv localhost 443</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep nginx)\nhtop -p $(pgrep nginx)\n\n# Check connections\nss -ant | grep :443 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep nginx)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo mailu -d\n# or\nsudo mailu debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  mailu:\n    image: mailu:latest\n    container_name: mailu\n    ports:\n      - &quot;443:443&quot;\n    volumes:\n      - ./config:/mailu\n      - ./data:/var/lib/mailu\n    environment:\n      - mailu_CONFIG=/mailu/mailu.conf\n    restart: unless-stopped\n    networks:\n      - mailu_net\n\nnetworks:\n  mailu_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: mailu\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mailu\n  template:\n    metadata:\n      labels:\n        app: mailu\n    spec:\n      containers:\n      - name: mailu\n        image: mailu:latest\n        ports:\n        - containerPort: 443\n        volumeMounts:\n        - name: config\n          mountPath: /mailu\n      volumes:\n      - name: config\n        configMap:\n          name: mailu-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mailu\nspec:\n  selector:\n    app: mailu\n  ports:\n  - port: 443\n    targetPort: 443\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Mailu\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install mailu\n      package:\n        name: mailu\n        state: present\n    \n    - name: Configure mailu\n      template:\n        src: mailu.conf.j2\n        dest: /mailu/mailu.conf\n        owner: mailu\n        group: mailu\n        mode: &#039;0640&#039;\n      notify: restart mailu\n    \n    - name: Start and enable mailu\n      systemd:\n        name: mailu\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart mailu\n      systemd:\n        name: mailu\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update mailu\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade mailu\n\n# Arch Linux\nsudo pacman -Syu mailu\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade mailu\n\n# openSUSE\nsudo zypper update mailu\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade mailu\n\n# Always backup before updates\ntar -czf /backup/mailu-pre-update-$(date +%Y%m%d).tar.gz /mailu\n\n# Restart after updates\nsudo systemctl restart mailu</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/mailu -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo mailu --verify || sudo mailu check\n\n# Update databases (if applicable)\nsudo mailu-update-db\n\n# Optimize performance\nsudo mailu-optimize\n\n# Check for security updates\nsudo mailu --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.mailu.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/mailu/mailu</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.mailu.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.mailu.org/</li>\n<li class=\"mobile-list-item\">Comparison vs mailcow, Mail-in-a-Box, iRedMail, Postal: https://docs.mailu.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1982,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-18T18:14:03.929Z","metadataVersion":"2.0"}]},"__N_SSG":true}