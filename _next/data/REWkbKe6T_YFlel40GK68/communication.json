{"pageProps":{"category":{"key":"communication","name":"Communication","description":"Communication tools and applications","icon":"ðŸ’¬","color":"#f1fa8c"},"guides":[{"name":"mastodon","displayName":"Mastodon Installation Guide","slug":"mastodon","description":"Mastodon is a free and open-source decentralized social media platform that serves as an alternative to proprietary platforms like Twitter/X. It's part of the fediverse, uses the ActivityPub protocol for federation, and allows users to run their own social media instances with full control over their data and community.","category":"communication","subcategory":"communication","difficultyLevel":"advanced","estimatedSetupTime":"1-2 hours","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles"],"defaultPorts":[80,443,3000,4000],"installationMethods":["native-packages","source-installation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["social-media","fediverse","activitypub","decentralized","microblogging"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"AGPL-3.0","websiteUrl":"https://howtomgr.github.io/communication/mastodon","documentationUrl":"https://howtomgr.github.io/communication/mastodon","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mastodon","updatedAt":"2025-09-16T17:29:29Z","createdAt":"2023-08-28T03:48:35Z","readmeRaw":"# Mastodon Installation Guide\n\nMastodon is a free, open-source federated social network server that provides a decentralized alternative to proprietary platforms like Twitter/X. Built on Ruby on Rails and using ActivityPub protocol, Mastodon allows users to run their own social media instance while connecting to the broader fediverse.\n\n## Prerequisites\n\n### Hardware Requirements\n- **CPU**: 2+ cores (4+ cores recommended for production)\n- **RAM**: 4GB minimum (8GB+ recommended for production)\n- **Storage**: 20GB minimum (SSD recommended, scale based on media storage needs)\n- **Network**: Reliable internet connection with public IP (for federation)\n\n### Software Dependencies\n- **Operating System**: Linux (RHEL-based, Debian-based, Arch Linux, Alpine Linux)\n- **Database**: PostgreSQL 12+ (PostgreSQL 15+ recommended)\n- **Cache/Queue**: Redis 6.0+\n- **Runtime**: Ruby 3.0+ (Ruby 3.2+ recommended)\n- **Web Server**: nginx or Apache (for reverse proxy)\n- **SSL Certificate**: Let's Encrypt or commercial certificate\n- **Node.js**: 16+ (for asset compilation)\n- **Yarn**: Package manager for Node.js dependencies\n\n### Network Requirements\n- **Ports**: \n  - 80/443 (HTTP/HTTPS)\n  - 25/587 (SMTP - for email delivery)\n  - 3000 (Mastodon web interface)\n  - 4000 (Mastodon streaming API)\n- **Domain**: Registered domain name with DNS control\n- **Email**: SMTP server for notifications and user registration\n\n### System Access\n- Root or sudo access required for installation\n- Dedicated user account for Mastodon service\n- Firewall configuration access\n\n## Supported Operating Systems\n\nThis guide supports installation on:\n- **RHEL-based**: RHEL 8/9, CentOS Stream 8/9, Rocky Linux 8/9, AlmaLinux 8/9, Fedora 37+\n- **Debian-based**: Debian 11/12, Ubuntu 20.04/22.04/24.04 LTS\n- **Arch Linux**: Arch Linux (rolling), Manjaro\n- **Alpine Linux**: 3.18+ (containerized deployments)\n- **macOS**: 12+ (development only)\n- **FreeBSD**: 13.0+ (experimental)\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL and PowerTools repositories\nsudo dnf install -y epel-release\nsudo dnf config-manager --set-enabled powertools  # CentOS Stream 8\nsudo dnf config-manager --set-enabled crb         # CentOS Stream 9, Rocky, AlmaLinux\n\n# Install Node.js repository\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\n\n# Install Yarn repository\ncurl -sL https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\n# Install PostgreSQL repository (for latest version)\nsudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-$(rpm -E %{rhel})-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install required packages\nsudo dnf install -y \\\n    git curl wget gnupg2 \\\n    gcc gcc-c++ make automake autoconf libtool \\\n    postgresql15-server postgresql15-devel \\\n    redis \\\n    nodejs yarn \\\n    nginx \\\n    ImageMagick ImageMagick-devel \\\n    ffmpeg \\\n    libxml2-devel libxslt-devel \\\n    libidn-devel \\\n    openssl-devel \\\n    readline-devel \\\n    zlib-devel \\\n    libyaml-devel \\\n    gdbm-devel \\\n    ncurses-devel \\\n    libffi-devel\n\n# Initialize PostgreSQL\nsudo postgresql-15-setup initdb\nsudo systemctl enable --now postgresql-15 redis\n\n# Configure PostgreSQL\nsudo -u postgres createuser mastodon --createdb\nsudo -u postgres psql -c \"ALTER USER mastodon WITH ENCRYPTED PASSWORD 'secure_random_password_here';\"\n\n# Create mastodon user\nsudo useradd -m -s /bin/bash mastodon\nsudo usermod -a -G mastodon nginx\n\n# Install Ruby (using rbenv for version management)\nsudo -u mastodon bash << 'EOF'\ncd /home/mastodon\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv\necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc\necho 'eval \"$(rbenv init -)\"' >> ~/.bashrc\ngit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nrbenv install 3.2.2\nrbenv global 3.2.2\ngem install bundler\nEOF\n\n# Clone Mastodon\nsudo -u mastodon git clone https://github.com/mastodon/mastodon.git /home/mastodon/live\ncd /home/mastodon/live\nsudo -u mastodon git checkout $(git tag -l | grep -v 'rc' | sort -V | tail -n 1)\n\n# Install Ruby dependencies\nsudo -u mastodon bash << 'EOF'\ncd /home/mastodon/live\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nbundle config deployment 'true'\nbundle config without 'development test'\nbundle install\nEOF\n\n# Install Node.js dependencies\nsudo -u mastodon bash << 'EOF'\ncd /home/mastodon/live\nyarn install --pure-lockfile\nEOF\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package list\nsudo apt update\n\n# Install curl and gnupg (if not already installed)\nsudo apt install -y curl gnupg\n\n# Add Node.js repository\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\n\n# Add Yarn repository\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\n\n# Add PostgreSQL repository (for latest version)\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\necho \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" | sudo tee /etc/apt/sources.list.d/pgdg.list\n\n# Update package list\nsudo apt update\n\n# Install required packages\nsudo apt install -y \\\n    git curl wget gnupg \\\n    build-essential \\\n    postgresql-15 postgresql-contrib-15 postgresql-server-dev-15 \\\n    redis-server \\\n    nodejs yarn \\\n    nginx \\\n    imagemagick ffmpeg \\\n    libxml2-dev libxslt1-dev \\\n    libidn11-dev \\\n    libssl-dev \\\n    libreadline-dev \\\n    zlib1g-dev \\\n    libyaml-dev \\\n    libgdbm-dev \\\n    libncurses5-dev \\\n    libffi-dev \\\n    libpq-dev\n\n# Start and enable services\nsudo systemctl enable --now postgresql redis-server\n\n# Configure PostgreSQL\nsudo -u postgres createuser mastodon --createdb\nsudo -u postgres psql -c \"ALTER USER mastodon WITH ENCRYPTED PASSWORD 'secure_random_password_here';\"\n\n# Create mastodon user\nsudo useradd -m -s /bin/bash mastodon\nsudo usermod -a -G mastodon www-data\n\n# Install Ruby (using rbenv)\nsudo -u mastodon bash << 'EOF'\ncd /home/mastodon\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv\necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc\necho 'eval \"$(rbenv init -)\"' >> ~/.bashrc\ngit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nrbenv install 3.2.2\nrbenv global 3.2.2\ngem install bundler\nEOF\n\n# Clone Mastodon\nsudo -u mastodon git clone https://github.com/mastodon/mastodon.git /home/mastodon/live\ncd /home/mastodon/live\nsudo -u mastodon git checkout $(git tag -l | grep -v 'rc' | sort -V | tail -n 1)\n\n# Install dependencies\nsudo -u mastodon bash << 'EOF'\ncd /home/mastodon/live\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nbundle config deployment 'true'\nbundle config without 'development test'\nbundle install\nyarn install --pure-lockfile\nEOF\n```\n\n### Arch Linux\n\n```bash\n# Update system\nsudo pacman -Syu\n\n# Install required packages\nsudo pacman -S --needed \\\n    git curl wget gnupg \\\n    base-devel \\\n    postgresql redis \\\n    nodejs npm yarn \\\n    nginx \\\n    imagemagick ffmpeg \\\n    libxml2 libxslt \\\n    libidn \\\n    openssl \\\n    readline \\\n    zlib \\\n    libyaml \\\n    gdbm \\\n    ncurses \\\n    libffi\n\n# Initialize PostgreSQL\nsudo -u postgres initdb -D /var/lib/postgres/data\nsudo systemctl enable --now postgresql redis\n\n# Configure PostgreSQL\nsudo -u postgres createuser mastodon --createdb\nsudo -u postgres psql -c \"ALTER USER mastodon WITH ENCRYPTED PASSWORD 'secure_random_password_here';\"\n\n# Create mastodon user\nsudo useradd -m -s /bin/bash mastodon\nsudo usermod -a -G mastodon http\n\n# Install Ruby using rbenv\nsudo -u mastodon bash << 'EOF'\ncd /home/mastodon\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv\necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.bashrc\necho 'eval \"$(rbenv init -)\"' >> ~/.bashrc\ngit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nrbenv install 3.2.2\nrbenv global 3.2.2\ngem install bundler\nEOF\n\n# Clone and setup Mastodon\nsudo -u mastodon git clone https://github.com/mastodon/mastodon.git /home/mastodon/live\ncd /home/mastodon/live\nsudo -u mastodon git checkout $(git tag -l | grep -v 'rc' | sort -V | tail -n 1)\n\n# Install dependencies\nsudo -u mastodon bash << 'EOF'\ncd /home/mastodon/live\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nbundle config deployment 'true'\nbundle config without 'development test'\nbundle install\nyarn install --pure-lockfile\nEOF\n```\n\n### Alpine Linux\n\n```bash\n# Update package index\napk update\n\n# Install required packages\napk add --no-cache \\\n    git curl wget gnupg \\\n    build-base \\\n    postgresql15 postgresql15-dev postgresql15-contrib \\\n    redis \\\n    nodejs npm yarn \\\n    nginx \\\n    imagemagick imagemagick-dev ffmpeg \\\n    libxml2-dev libxslt-dev \\\n    libidn-dev \\\n    openssl-dev \\\n    readline-dev \\\n    zlib-dev \\\n    yaml-dev \\\n    gdbm-dev \\\n    ncurses-dev \\\n    libffi-dev\n\n# Initialize and start services\nrc-service postgresql setup\nrc-service postgresql start\nrc-service redis start\nrc-update add postgresql\nrc-update add redis\n\n# Configure PostgreSQL\nsudo -u postgres createuser mastodon --createdb\nsudo -u postgres psql -c \"ALTER USER mastodon WITH ENCRYPTED PASSWORD 'secure_random_password_here';\"\n\n# Create mastodon user\nadduser -D -s /bin/ash mastodon\naddgroup mastodon nginx\n\n# Install Ruby using rbenv\nsudo -u mastodon ash << 'EOF'\ncd /home/mastodon\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv\necho 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.profile\necho 'eval \"$(rbenv init -)\"' >> ~/.profile\ngit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nrbenv install 3.2.2\nrbenv global 3.2.2\ngem install bundler\nEOF\n\n# Clone and setup Mastodon\nsudo -u mastodon git clone https://github.com/mastodon/mastodon.git /home/mastodon/live\ncd /home/mastodon/live\nsudo -u mastodon git checkout $(git tag -l | grep -v 'rc' | sort -V | tail -n 1)\n\n# Install dependencies\nsudo -u mastodon ash << 'EOF'\ncd /home/mastodon/live\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nbundle config deployment 'true'\nbundle config without 'development test'\nbundle install\nyarn install --pure-lockfile\nEOF\n```\n\n## Configuration\n\n### Environment Configuration\n\n```bash\n# Switch to mastodon user\nsudo -u mastodon bash\n\n# Navigate to Mastodon directory\ncd /home/mastodon/live\n\n# Generate configuration\nRAILS_ENV=production bundle exec rake mastodon:setup\n```\n\nThis interactive setup will prompt for:\n- Domain name (e.g., mastodon.example.com)\n- Database configuration\n- Redis configuration\n- Email settings (SMTP)\n- File storage settings\n- Admin account creation\n\n### Manual Environment Configuration\n\nIf you prefer manual configuration, create `/home/mastodon/live/.env.production`:\n\n```bash\n# Create environment file\nsudo -u mastodon tee /home/mastodon/live/.env.production << 'EOF'\n# Federation\nLOCAL_DOMAIN=mastodon.example.com\nWEB_DOMAIN=mastodon.example.com\n\n# Redis\nREDIS_HOST=127.0.0.1\nREDIS_PORT=6379\n\n# PostgreSQL\nDB_HOST=127.0.0.1\nDB_USER=mastodon\nDB_NAME=mastodon_production\nDB_PASS=secure_random_password_here\nDB_PORT=5432\n\n# ElasticSearch (optional, for full-text search)\n# ES_ENABLED=true\n# ES_HOST=localhost\n# ES_PORT=9200\n\n# Secrets\n# Generate with: bundle exec rake secret\nSECRET_KEY_BASE=generate_with_rake_secret\nOTP_SECRET=generate_with_rake_secret\n\n# VAPID keys (for push notifications)\n# Generate with: bundle exec rake mastodon:webpush:generate_vapid_key\nVAPID_PRIVATE_KEY=\nVAPID_PUBLIC_KEY=\n\n# Sending mail\nSMTP_SERVER=smtp.example.com\nSMTP_PORT=587\nSMTP_LOGIN=mastodon@example.com\nSMTP_PASSWORD=smtp_password\nSMTP_FROM_ADDRESS=mastodon@example.com\n\n# File storage (local)\nPAPERCLIP_ROOT_PATH=/home/mastodon/live/public/system\n\n# Optional S3/compatible storage\n# S3_ENABLED=true\n# S3_BUCKET=mastodon\n# AWS_ACCESS_KEY_ID=\n# AWS_SECRET_ACCESS_KEY=\n# S3_REGION=us-east-1\n# S3_HOSTNAME=s3.amazonaws.com\n\n# Optional CDN\n# CDN_HOST=assets.example.com\n\n# Streaming\nSTREAMING_CLUSTER_NUM=1\nSTREAMING_API_BASE_URL=wss://mastodon.example.com\n\n# Advanced settings\nMAX_TOOT_CHARS=500\nSINGLE_USER_MODE=false\nAUTHORIZED_FETCH=false\nLIMITED_FEDERATION_MODE=false\nEOF\n```\n\n### Database Setup\n\n```bash\n# Switch to mastodon user and setup database\nsudo -u mastodon bash << 'EOF'\ncd /home/mastodon/live\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\n\n# Create database\nRAILS_ENV=production bundle exec rails db:create\nRAILS_ENV=production bundle exec rails db:schema:load\nRAILS_ENV=production bundle exec rails db:seed\n\n# Compile assets\nRAILS_ENV=production bundle exec rails assets:precompile\nEOF\n```\n\n## Service Management\n\n### Systemd Service Files (RHEL/Debian/Arch/SUSE)\n\nCreate the web service (`/etc/systemd/system/mastodon-web.service`):\n\n```ini\n[Unit]\nDescription=mastodon-web\nAfter=network.target\n\n[Service]\nType=simple\nUser=mastodon\nWorkingDirectory=/home/mastodon/live\nEnvironment=\"RAILS_ENV=production\"\nEnvironment=\"PORT=3000\"\nExecStart=/home/mastodon/.rbenv/shims/bundle exec puma -C config/puma.rb\nExecReload=/bin/kill -SIGUSR1 $MAINPID\nTimeoutSec=15\nRestart=always\nRestartSec=10\nSyslogIdentifier=mastodon-web\n\n[Install]\nWantedBy=multi-user.target\n```\n\nCreate the background jobs service (`/etc/systemd/system/mastodon-sidekiq.service`):\n\n```ini\n[Unit]\nDescription=mastodon-sidekiq\nAfter=network.target\n\n[Service]\nType=simple\nUser=mastodon\nWorkingDirectory=/home/mastodon/live\nEnvironment=\"RAILS_ENV=production\"\nEnvironment=\"DB_POOL=25\"\nExecStart=/home/mastodon/.rbenv/shims/bundle exec sidekiq -c 25\nTimeoutSec=15\nRestart=always\nRestartSec=10\nSyslogIdentifier=mastodon-sidekiq\n\n[Install]\nWantedBy=multi-user.target\n```\n\nCreate the streaming service (`/etc/systemd/system/mastodon-streaming.service`):\n\n```ini\n[Unit]\nDescription=mastodon-streaming\nAfter=network.target\n\n[Service]\nType=simple\nUser=mastodon\nWorkingDirectory=/home/mastodon/live\nEnvironment=\"NODE_ENV=production\"\nEnvironment=\"PORT=4000\"\nExecStart=/usr/bin/node streaming\nTimeoutSec=15\nRestart=always\nRestartSec=10\nSyslogIdentifier=mastodon-streaming\n\n[Install]\nWantedBy=multi-user.target\n```\n\n### Enable and Start Services\n\n```bash\n# Reload systemd and enable services\nsudo systemctl daemon-reload\nsudo systemctl enable mastodon-web mastodon-sidekiq mastodon-streaming\nsudo systemctl start mastodon-web mastodon-sidekiq mastodon-streaming\n\n# Check status\nsudo systemctl status mastodon-web mastodon-sidekiq mastodon-streaming\n```\n\n### OpenRC Services (Alpine Linux)\n\nCreate `/etc/init.d/mastodon-web`:\n\n```bash\n#!/sbin/openrc-run\n\nname=\"mastodon-web\"\ndescription=\"Mastodon web service\"\n\nuser=\"mastodon\"\ngroup=\"mastodon\"\ndirectory=\"/home/mastodon/live\"\n\ncommand=\"/home/mastodon/.rbenv/shims/bundle\"\ncommand_args=\"exec puma -C config/puma.rb\"\ncommand_background=\"yes\"\n\npidfile=\"/run/${name}.pid\"\noutput_log=\"/var/log/${name}.log\"\nerror_log=\"/var/log/${name}.error.log\"\n\ndepend() {\n    need net postgresql redis\n}\n\nstart_pre() {\n    export RAILS_ENV=production\n    export PORT=3000\n}\n```\n\nCreate similar files for `mastodon-sidekiq` and `mastodon-streaming`, then:\n\n```bash\n# Make executable\nsudo chmod +x /etc/init.d/mastodon-*\n\n# Enable and start\nsudo rc-update add mastodon-web\nsudo rc-update add mastodon-sidekiq  \nsudo rc-update add mastodon-streaming\nsudo rc-service mastodon-web start\nsudo rc-service mastodon-sidekiq start\nsudo rc-service mastodon-streaming start\n```\n\n## Troubleshooting\n\n### Common Issues\n\n**Ruby/Bundle Issues:**\n```bash\n# Ensure proper rbenv setup\nsudo -u mastodon bash << 'EOF'\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nwhich ruby\nruby --version\nEOF\n\n# Reinstall gems if needed\nsudo -u mastodon bash << 'EOF'\ncd /home/mastodon/live\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nbundle install --deployment --without development test\nEOF\n```\n\n**Database Connection Issues:**\n```bash\n# Test PostgreSQL connection\nsudo -u mastodon psql -h localhost -U mastodon mastodon_production\n\n# Check PostgreSQL logs\nsudo journalctl -u postgresql-15 -f\n\n# Verify database configuration\nsudo -u mastodon bash << 'EOF'\ncd /home/mastodon/live\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nRAILS_ENV=production bundle exec rails console\n# In console: ActiveRecord::Base.connection\nEOF\n```\n\n**Asset Compilation Issues:**\n```bash\n# Clear and recompile assets\nsudo -u mastodon bash << 'EOF'\ncd /home/mastodon/live\nexport PATH=\"$HOME/.rbenv/bin:$PATH\"\neval \"$(rbenv init -)\"\nRAILS_ENV=production bundle exec rails assets:clobber\nRAILS_ENV=production bundle exec rails assets:precompile\nEOF\n```\n\n**Service Startup Issues:**\n```bash\n# Check service logs\nsudo journalctl -u mastodon-web -f\nsudo journalctl -u mastodon-sidekiq -f\nsudo journalctl -u mastodon-streaming -f\n\n# Check for port conflicts\nsudo netstat -tlnp | grep :3000\nsudo netstat -tlnp | grep :4000\n\n# Verify file permissions\nsudo ls -la /home/mastodon/live/\nsudo -u mastodon test -r /home/mastodon/live/.env.production && echo \"Can read env file\"\n```\n\n## Security Considerations\n\n### Firewall Configuration\n\n**firewalld (RHEL/CentOS/Fedora):**\n```bash\n# Open required ports\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --permanent --add-port=4000/tcp\nsudo firewall-cmd --reload\n```\n\n**ufw (Ubuntu/Debian):**\n```bash\n# Configure firewall\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw allow 3000/tcp\nsudo ufw allow 4000/tcp\nsudo ufw enable\n```\n\n**iptables (Generic):**\n```bash\n# Basic firewall rules\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 3000 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 4000 -j ACCEPT\n```\n\n### SSL/TLS Configuration with nginx\n\nCreate `/etc/nginx/sites-available/mastodon` (Debian/Ubuntu) or `/etc/nginx/conf.d/mastodon.conf` (RHEL):\n\n```nginx\nmap $http_upgrade $connection_upgrade {\n  default upgrade;\n  ''      close;\n}\n\nupstream backend {\n    server 127.0.0.1:3000 fail_timeout=0;\n}\n\nupstream streaming {\n    server 127.0.0.1:4000 fail_timeout=0;\n}\n\nproxy_cache_path /var/cache/nginx/mastodon keys_zone=CACHE:10m levels=1:2 inactive=7d max_size=1g;\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name mastodon.example.com;\n    root /home/mastodon/live/public;\n    location /.well-known/acme-challenge/ { allow all; }\n    location / { return 301 https://$host$request_uri; }\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name mastodon.example.com;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_tickets off;\n\n    ssl_certificate     /etc/letsencrypt/live/mastodon.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/mastodon.example.com/privkey.pem;\n\n    keepalive_timeout    70;\n    sendfile             on;\n    client_max_body_size 80m;\n\n    root /home/mastodon/live/public;\n\n    gzip on;\n    gzip_disable \"msie6\";\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    add_header Strict-Transport-Security \"max-age=31536000\" always;\n\n    location / {\n        try_files $uri @proxy;\n    }\n\n    location ~ ^/(emoji|packs|system/accounts/avatars|system/media_attachments/files) {\n        add_header Cache-Control \"public, max-age=31536000, immutable\";\n        add_header Strict-Transport-Security \"max-age=31536000\" always;\n        try_files $uri @proxy;\n    }\n    \n    location /sw.js {\n        add_header Cache-Control \"public, max-age=604800, must-revalidate\";\n        add_header Strict-Transport-Security \"max-age=31536000\" always;\n        try_files $uri @proxy;\n    }\n\n    location @proxy {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Proxy \"\";\n        proxy_pass_header Server;\n\n        proxy_pass http://backend;\n        proxy_buffering on;\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        proxy_cache CACHE;\n        proxy_cache_valid 200 7d;\n        proxy_cache_valid 410 24h;\n        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;\n        proxy_cache_lock on;\n\n        tcp_nodelay on;\n    }\n\n    location /api/v1/streaming {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Proxy \"\";\n\n        proxy_pass http://streaming;\n        proxy_buffering off;\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        tcp_nodelay on;\n    }\n\n    error_page 500 501 502 503 504 /500.html;\n}\n```\n\n### SSL Certificate Setup\n\n```bash\n# Install Certbot\n# RHEL/CentOS/Fedora\nsudo dnf install -y certbot python3-certbot-nginx\n\n# Debian/Ubuntu  \nsudo apt install -y certbot python3-certbot-nginx\n\n# Arch Linux\nsudo pacman -S certbot certbot-nginx\n\n# Obtain certificate\nsudo certbot --nginx -d mastodon.example.com\n\n# Auto-renewal\necho \"0 12 * * * /usr/bin/certbot renew --quiet\" | sudo crontab -\n```\n\n### SELinux Configuration (RHEL-based systems)\n\n```bash\n# Allow nginx to connect to Mastodon services\nsudo setsebool -P httpd_can_network_connect 1\n\n# Set SELinux contexts for Mastodon files\nsudo semanage fcontext -a -t httpd_exec_t \"/home/mastodon/live/public(/.*)?\"\nsudo restorecon -R /home/mastodon/live/public/\n\n# Allow Mastodon to bind to required ports\nsudo semanage port -a -t http_port_t -p tcp 3000\nsudo semanage port -a -t http_port_t -p tcp 4000\n```\n\n## Performance Tuning\n\n### PostgreSQL Optimization\n\nEdit `/var/lib/pgsql/15/data/postgresql.conf`:\n\n```ini\n# Memory settings (adjust based on available RAM)\nshared_buffers = 256MB                 # 1/4 of RAM\neffective_cache_size = 1GB            # 3/4 of RAM\nwork_mem = 4MB                        # RAM/max_connections/4\nmaintenance_work_mem = 64MB           # RAM/16\n\n# Connection settings\nmax_connections = 100\nsuperuser_reserved_connections = 3\n\n# WAL settings for better performance\nwal_buffers = 16MB\ncheckpoint_completion_target = 0.7\ncheckpoint_timeout = 5min\nmax_wal_size = 1GB\nmin_wal_size = 80MB\n\n# Query optimization\nrandom_page_cost = 1.1                # For SSD storage\neffective_io_concurrency = 200        # For SSD storage\n```\n\n### Redis Optimization\n\nEdit `/etc/redis/redis.conf` or `/etc/redis.conf`:\n\n```ini\n# Memory optimization\nmaxmemory 256mb\nmaxmemory-policy allkeys-lru\n\n# Persistence (adjust based on needs)\nsave 900 1\nsave 300 10\nsave 60 10000\n\n# Network optimization\ntcp-keepalive 300\ntimeout 0\n```\n\n### Ruby/Rails Optimization\n\nEdit `/home/mastodon/live/.env.production`:\n\n```bash\n# Database connection pooling\nDB_POOL=25\n\n# Sidekiq concurrency\nSIDEKIQ_CONCURRENCY=25\n\n# Puma workers (number of CPU cores)\nWEB_CONCURRENCY=4\nMAX_THREADS=5\n\n# Streaming cluster\nSTREAMING_CLUSTER_NUM=4\n```\n\n### System-level Optimization\n\n```bash\n# Increase file descriptors limit\necho \"mastodon soft nofile 65536\" | sudo tee -a /etc/security/limits.conf\necho \"mastodon hard nofile 65536\" | sudo tee -a /etc/security/limits.conf\n\n# Optimize kernel parameters\nsudo tee -a /etc/sysctl.conf << 'EOF'\n# Network optimization\nnet.core.somaxconn = 1024\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 1024\nnet.ipv4.tcp_keepalive_time = 120\nnet.ipv4.tcp_keepalive_intvl = 30\nnet.ipv4.tcp_keepalive_probes = 3\n\n# Memory optimization\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\nsudo sysctl -p\n```\n\n## Backup and Restore\n\n### Database Backup\n\n```bash\n# Create backup script\nsudo tee /usr/local/bin/mastodon-backup.sh << 'EOF'\n#!/bin/bash\n\nBACKUP_DIR=\"/backup/mastodon\"\nDATE=$(date +%Y%m%d_%H%M%S)\nDB_NAME=\"mastodon_production\"\nMEDIA_DIR=\"/home/mastodon/live/public/system\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Database backup\nsudo -u postgres pg_dump \"$DB_NAME\" | gzip > \"$BACKUP_DIR/db_${DATE}.sql.gz\"\n\n# Media backup (if stored locally)\nif [ -d \"$MEDIA_DIR\" ]; then\n    tar -czf \"$BACKUP_DIR/media_${DATE}.tar.gz\" -C \"$(dirname \"$MEDIA_DIR\")\" \"$(basename \"$MEDIA_DIR\")\"\nfi\n\n# Configuration backup\ntar -czf \"$BACKUP_DIR/config_${DATE}.tar.gz\" /home/mastodon/live/.env.production\n\n# Remove backups older than 30 days\nfind \"$BACKUP_DIR\" -name \"*.gz\" -mtime +30 -delete\n\necho \"Backup completed: $DATE\"\nEOF\n\nsudo chmod +x /usr/local/bin/mastodon-backup.sh\n```\n\n### Automated Backups\n\n```bash\n# Add to crontab\necho \"0 2 * * * /usr/local/bin/mastodon-backup.sh\" | sudo crontab -\n```\n\n### Restore Procedure\n\n```bash\n# Stop Mastodon services\nsudo systemctl stop mastodon-web mastodon-sidekiq mastodon-streaming\n\n# Restore database\nsudo -u postgres dropdb mastodon_production\nsudo -u postgres createdb mastodon_production\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE mastodon_production TO mastodon;\"\ngunzip -c /backup/mastodon/db_YYYYMMDD_HHMMSS.sql.gz | sudo -u postgres psql mastodon_production\n\n# Restore media files (if needed)\nsudo rm -rf /home/mastodon/live/public/system\nsudo tar -xzf /backup/mastodon/media_YYYYMMDD_HHMMSS.tar.gz -C /home/mastodon/live/public/\nsudo chown -R mastodon:mastodon /home/mastodon/live/public/system\n\n# Restore configuration\nsudo tar -xzf /backup/mastodon/config_YYYYMMDD_HHMMSS.tar.gz -C /\n\n# Start services\nsudo systemctl start mastodon-web mastodon-sidekiq mastodon-streaming\n```\n\n## System Requirements\n\n### Minimum Requirements\n- **CPU**: 2 cores, 2.0 GHz\n- **RAM**: 4GB\n- **Storage**: 20GB SSD\n- **Network**: 100 Mbps\n- **OS**: Linux (64-bit)\n\n### Recommended Production Requirements\n- **CPU**: 4+ cores, 2.5+ GHz\n- **RAM**: 8GB+ (16GB for large instances)\n- **Storage**: 100GB+ SSD with good IOPS\n- **Network**: 1 Gbps with low latency\n- **OS**: Recent Linux distribution with long-term support\n\n### Scaling Considerations\n- **Small Instance**: <1,000 users - 2 cores, 4GB RAM, 50GB storage\n- **Medium Instance**: 1,000-10,000 users - 4 cores, 8GB RAM, 200GB storage\n- **Large Instance**: 10,000+ users - 8+ cores, 16GB+ RAM, 500GB+ storage\n\n## Support\n\n### Official Resources\n- **Official Website**: [https://joinmastodon.org](https://joinmastodon.org)\n- **Documentation**: [https://docs.joinmastodon.org](https://docs.joinmastodon.org)\n- **GitHub Repository**: [https://github.com/mastodon/mastodon](https://github.com/mastodon/mastodon)\n- **Admin Documentation**: [https://docs.joinmastodon.org/admin/](https://docs.joinmastodon.org/admin/)\n\n### Community Support\n- **Mastodon Discord**: [https://discord.gg/mastodon](https://discord.gg/mastodon)\n- **GitHub Issues**: [https://github.com/mastodon/mastodon/issues](https://github.com/mastodon/mastodon/issues)\n- **Mastodon Community**: Follow @Mastodon@mastodon.social\n- **Admin Forums**: Various Mastodon admin communities on the fediverse\n\n### Commercial Support\n- Available from various consulting companies\n- Managed hosting providers offer Mastodon services\n- Professional services for large deployments\n\n## Contributing\n\n### How to Contribute\n1. **Report Bugs**: Submit issues to [GitHub](https://github.com/mastodon/mastodon/issues)\n2. **Translate**: Help with internationalization at [Crowdin](https://crowdin.com/project/mastodon)\n3. **Code Contributions**: Submit pull requests for bug fixes and features\n4. **Documentation**: Improve documentation and guides\n5. **Testing**: Test release candidates and provide feedback\n\n### Development Setup\n```bash\n# Clone repository\ngit clone https://github.com/mastodon/mastodon.git\ncd mastodon\n\n# Install dependencies\nbundle install\nyarn install\n\n# Setup development database\nrails db:setup\n\n# Run development server\nforeman start\n```\n\n### Contribution Guidelines\n- Follow Ruby and JavaScript style guides\n- Include tests for new features\n- Update documentation for changes\n- Use conventional commit messages\n- Sign commits with GPG key\n\n## License\n\nMastodon is licensed under the **GNU Affero General Public License v3.0 (AGPL-3.0)**.\n\n### Key License Points\n- **Free to Use**: Can be used for any purpose\n- **Source Available**: Source code must be provided to users\n- **Copyleft**: Derivative works must use same license\n- **Network Use**: AGPL applies to network/web services\n- **No Warranty**: Software provided \"as is\"\n\n### License Compliance\n- Keep license notices intact\n- Provide source code to users\n- Document any modifications\n- Use same license for derivatives\n- Consider legal requirements for your jurisdiction\n\nFull license text: [https://github.com/mastodon/mastodon/blob/main/LICENSE](https://github.com/mastodon/mastodon/blob/main/LICENSE)\n\n## Acknowledgments\n\n### Core Team\n- **Eugen Rochko** - Creator and lead developer\n- **Claire** - Core maintainer\n- **Renaud Chaput** - Core maintainer\n- **ThibG** - Significant contributor\n- And many other contributors\n\n### Technologies Used\n- **Ruby on Rails** - Web application framework\n- **PostgreSQL** - Primary database\n- **Redis** - Caching and job queue\n- **React.js** - Frontend user interface\n- **ActivityPub** - Federation protocol\n- **Sidekiq** - Background job processing\n\n### Community\n- **Translators** - Making Mastodon available in many languages\n- **Instance Administrators** - Running the fediverse\n- **Users** - Creating the vibrant community\n- **Contributors** - Improving the software\n\n## Version History\n\n### Major Releases\n- **v4.2** (September 2023) - Enhanced moderation tools, quote posts\n- **v4.1** (February 2023) - Improved federation, performance optimizations\n- **v4.0** (October 2022) - Major UI overhaul, new features\n- **v3.5** (May 2022) - Content warnings improvements, admin features\n- **v3.4** (October 2021) - Server rules, report improvements\n- **v3.3** (February 2021) - Profile directory, admin announcements\n- **v3.2** (July 2020) - Audio uploads, admin interface improvements\n- **v3.1** (February 2020) - Polls, improved federation\n- **v3.0** (October 2019) - Single column mode, admin dashboard\n\n### Current Stable Version\n- **v4.2.x** - Latest stable release\n- Check [GitHub releases](https://github.com/mastodon/mastodon/releases) for current version\n\n### Upgrade Path\n- Always backup before upgrading\n- Follow official upgrade guides\n- Test in staging environment first\n- Monitor for federation issues after upgrade\n\n## Appendices\n\n### Appendix A: Port Reference\n\n| Port | Service | Protocol | Description |\n|------|---------|----------|-------------|\n| 80 | HTTP | TCP | Web traffic (redirects to HTTPS) |\n| 443 | HTTPS | TCP | Secure web traffic |\n| 3000 | Mastodon Web | TCP | Internal web service |\n| 4000 | Mastodon Streaming | TCP | Real-time updates |\n| 5432 | PostgreSQL | TCP | Database (internal) |\n| 6379 | Redis | TCP | Cache and queues (internal) |\n| 25/587 | SMTP | TCP | Email delivery (outbound) |\n\n### Appendix B: File Locations\n\n| Path | Description |\n|------|-------------|\n| `/home/mastodon/live/` | Mastodon application directory |\n| `/home/mastodon/live/.env.production` | Main configuration file |\n| `/home/mastodon/live/public/system/` | Media files storage |\n| `/etc/systemd/system/mastodon-*.service` | Service definitions |\n| `/etc/nginx/sites-available/mastodon` | nginx configuration |\n| `/var/lib/postgresql/*/data/` | PostgreSQL data directory |\n| `/etc/redis/redis.conf` | Redis configuration |\n| `/var/log/nginx/` | nginx logs |\n\n### Appendix C: Common Commands\n\n```bash\n# Service management\nsudo systemctl status mastodon-web mastodon-sidekiq mastodon-streaming\nsudo systemctl restart mastodon-web mastodon-sidekiq mastodon-streaming\n\n# Mastodon maintenance\nsudo -u mastodon bash -c 'cd /home/mastodon/live && RAILS_ENV=production bundle exec rails mastodon:maintenance'\n\n# Database management\nsudo -u postgres psql mastodon_production\n\n# Log monitoring\nsudo journalctl -u mastodon-web -f\nsudo tail -f /var/log/nginx/access.log\n```\n\n### Appendix D: Environment Variables Reference\n\n| Variable | Description | Required |\n|----------|-------------|----------|\n| `LOCAL_DOMAIN` | Your Mastodon domain | Yes |\n| `SECRET_KEY_BASE` | Rails secret key | Yes |\n| `OTP_SECRET` | Two-factor authentication secret | Yes |\n| `VAPID_PRIVATE_KEY` | Push notification private key | Yes |\n| `VAPID_PUBLIC_KEY` | Push notification public key | Yes |\n| `DB_HOST` | Database hostname | Yes |\n| `DB_USER` | Database username | Yes |\n| `DB_PASS` | Database password | Yes |\n| `DB_NAME` | Database name | Yes |\n| `REDIS_HOST` | Redis hostname | Yes |\n| `SMTP_SERVER` | SMTP server hostname | Recommended |\n| `SMTP_FROM_ADDRESS` | From email address | Recommended |\n| `S3_ENABLED` | Enable S3 storage | No |\n| `CDN_HOST` | CDN hostname for assets | No |\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official Mastodon documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">Mastodon is a free, open-source federated social network server that provides a decentralized alternative to proprietary platforms like Twitter/X. Built on Ruby on Rails and using ActivityPub protocol, Mastodon allows users to run their own social media instance while connecting to the broader fediverse.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<h3 id=\"hardware-requirements\" class=\"mobile-header\">Hardware Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 2+ cores (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 4GB minimum (8GB+ recommended for production)</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 20GB minimum (SSD recommended, scale based on media storage needs)</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Reliable internet connection with public IP (for federation)</li>\n<h3 id=\"software-dependencies\" class=\"mobile-header\">Software Dependencies</h3>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: Linux (RHEL-based, Debian-based, Arch Linux, Alpine Linux)</li>\n<li class=\"mobile-list-item\"><strong>Database</strong>: PostgreSQL 12+ (PostgreSQL 15+ recommended)</li>\n<li class=\"mobile-list-item\"><strong>Cache/Queue</strong>: Redis 6.0+</li>\n<li class=\"mobile-list-item\"><strong>Runtime</strong>: Ruby 3.0+ (Ruby 3.2+ recommended)</li>\n<li class=\"mobile-list-item\"><strong>Web Server</strong>: nginx or Apache (for reverse proxy)</li>\n<li class=\"mobile-list-item\"><strong>SSL Certificate</strong>: Let's Encrypt or commercial certificate</li>\n<li class=\"mobile-list-item\"><strong>Node.js</strong>: 16+ (for asset compilation)</li>\n<li class=\"mobile-list-item\"><strong>Yarn</strong>: Package manager for Node.js dependencies</li>\n<h3 id=\"network-requirements\" class=\"mobile-header\">Network Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Ports</strong>: </li>\n<li class=\"mobile-list-item\">80/443 (HTTP/HTTPS)</li>\n<li class=\"mobile-list-item\">25/587 (SMTP - for email delivery)</li>\n<li class=\"mobile-list-item\">3000 (Mastodon web interface)</li>\n<li class=\"mobile-list-item\">4000 (Mastodon streaming API)</li>\n<li class=\"mobile-list-item\"><strong>Domain</strong>: Registered domain name with DNS control</li>\n<li class=\"mobile-list-item\"><strong>Email</strong>: SMTP server for notifications and user registration</li>\n<h3 id=\"system-access\" class=\"mobile-header\">System Access</h3>\n<li class=\"mobile-list-item\">Root or sudo access required for installation</li>\n<li class=\"mobile-list-item\">Dedicated user account for Mastodon service</li>\n<li class=\"mobile-list-item\">Firewall configuration access</li>\n<h2 id=\"supported-operating-systems\" class=\"mobile-header\">Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\"><strong>RHEL-based</strong>: RHEL 8/9, CentOS Stream 8/9, Rocky Linux 8/9, AlmaLinux 8/9, Fedora 37+</li>\n<li class=\"mobile-list-item\"><strong>Debian-based</strong>: Debian 11/12, Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\"><strong>Arch Linux</strong>: Arch Linux (rolling), Manjaro</li>\n<li class=\"mobile-list-item\"><strong>Alpine Linux</strong>: 3.18+ (containerized deployments)</li>\n<li class=\"mobile-list-item\"><strong>macOS</strong>: 12+ (development only)</li>\n<li class=\"mobile-list-item\"><strong>FreeBSD</strong>: 13.0+ (experimental)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL and PowerTools repositories\nsudo dnf install -y epel-release\nsudo dnf config-manager --set-enabled powertools  # CentOS Stream 8\nsudo dnf config-manager --set-enabled crb         # CentOS Stream 9, Rocky, AlmaLinux\n\n# Install Node.js repository\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\n\n# Install Yarn repository\ncurl -sL https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\n# Install PostgreSQL repository (for latest version)\nsudo dnf install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-$(rpm -E %{rhel})-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install required packages\nsudo dnf install -y \\\n    git curl wget gnupg2 \\\n    gcc gcc-c++ make automake autoconf libtool \\\n    postgresql15-server postgresql15-devel \\\n    redis \\\n    nodejs yarn \\\n    nginx \\\n    ImageMagick ImageMagick-devel \\\n    ffmpeg \\\n    libxml2-devel libxslt-devel \\\n    libidn-devel \\\n    openssl-devel \\\n    readline-devel \\\n    zlib-devel \\\n    libyaml-devel \\\n    gdbm-devel \\\n    ncurses-devel \\\n    libffi-devel\n\n# Initialize PostgreSQL\nsudo postgresql-15-setup initdb\nsudo systemctl enable --now postgresql-15 redis\n\n# Configure PostgreSQL\nsudo -u postgres createuser mastodon --createdb\nsudo -u postgres psql -c &quot;ALTER USER mastodon WITH ENCRYPTED PASSWORD &#039;secure_random_password_here&#039;;&quot;\n\n# Create mastodon user\nsudo useradd -m -s /bin/bash mastodon\nsudo usermod -a -G mastodon nginx\n\n# Install Ruby (using rbenv for version management)\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv\necho &#039;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#039; &gt;&gt; ~/.bashrc\necho &#039;eval &quot;$(rbenv init -)&quot;&#039; &gt;&gt; ~/.bashrc\ngit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nrbenv install 3.2.2\nrbenv global 3.2.2\ngem install bundler\nEOF\n\n# Clone Mastodon\nsudo -u mastodon git clone https://github.com/mastodon/mastodon.git /home/mastodon/live\ncd /home/mastodon/live\nsudo -u mastodon git checkout $(git tag -l | grep -v &#039;rc&#039; | sort -V | tail -n 1)\n\n# Install Ruby dependencies\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon/live\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nbundle config deployment &#039;true&#039;\nbundle config without &#039;development test&#039;\nbundle install\nEOF\n\n# Install Node.js dependencies\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon/live\nyarn install --pure-lockfile\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install curl and gnupg (if not already installed)\nsudo apt install -y curl gnupg\n\n# Add Node.js repository\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\n\n# Add Yarn repository\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list\n\n# Add PostgreSQL repository (for latest version)\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\necho &quot;deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main&quot; | sudo tee /etc/apt/sources.list.d/pgdg.list\n\n# Update package list\nsudo apt update\n\n# Install required packages\nsudo apt install -y \\\n    git curl wget gnupg \\\n    build-essential \\\n    postgresql-15 postgresql-contrib-15 postgresql-server-dev-15 \\\n    redis-server \\\n    nodejs yarn \\\n    nginx \\\n    imagemagick ffmpeg \\\n    libxml2-dev libxslt1-dev \\\n    libidn11-dev \\\n    libssl-dev \\\n    libreadline-dev \\\n    zlib1g-dev \\\n    libyaml-dev \\\n    libgdbm-dev \\\n    libncurses5-dev \\\n    libffi-dev \\\n    libpq-dev\n\n# Start and enable services\nsudo systemctl enable --now postgresql redis-server\n\n# Configure PostgreSQL\nsudo -u postgres createuser mastodon --createdb\nsudo -u postgres psql -c &quot;ALTER USER mastodon WITH ENCRYPTED PASSWORD &#039;secure_random_password_here&#039;;&quot;\n\n# Create mastodon user\nsudo useradd -m -s /bin/bash mastodon\nsudo usermod -a -G mastodon www-data\n\n# Install Ruby (using rbenv)\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv\necho &#039;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#039; &gt;&gt; ~/.bashrc\necho &#039;eval &quot;$(rbenv init -)&quot;&#039; &gt;&gt; ~/.bashrc\ngit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nrbenv install 3.2.2\nrbenv global 3.2.2\ngem install bundler\nEOF\n\n# Clone Mastodon\nsudo -u mastodon git clone https://github.com/mastodon/mastodon.git /home/mastodon/live\ncd /home/mastodon/live\nsudo -u mastodon git checkout $(git tag -l | grep -v &#039;rc&#039; | sort -V | tail -n 1)\n\n# Install dependencies\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon/live\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nbundle config deployment &#039;true&#039;\nbundle config without &#039;development test&#039;\nbundle install\nyarn install --pure-lockfile\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system\nsudo pacman -Syu\n\n# Install required packages\nsudo pacman -S --needed \\\n    git curl wget gnupg \\\n    base-devel \\\n    postgresql redis \\\n    nodejs npm yarn \\\n    nginx \\\n    imagemagick ffmpeg \\\n    libxml2 libxslt \\\n    libidn \\\n    openssl \\\n    readline \\\n    zlib \\\n    libyaml \\\n    gdbm \\\n    ncurses \\\n    libffi\n\n# Initialize PostgreSQL\nsudo -u postgres initdb -D /var/lib/postgres/data\nsudo systemctl enable --now postgresql redis\n\n# Configure PostgreSQL\nsudo -u postgres createuser mastodon --createdb\nsudo -u postgres psql -c &quot;ALTER USER mastodon WITH ENCRYPTED PASSWORD &#039;secure_random_password_here&#039;;&quot;\n\n# Create mastodon user\nsudo useradd -m -s /bin/bash mastodon\nsudo usermod -a -G mastodon http\n\n# Install Ruby using rbenv\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv\necho &#039;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#039; &gt;&gt; ~/.bashrc\necho &#039;eval &quot;$(rbenv init -)&quot;&#039; &gt;&gt; ~/.bashrc\ngit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nrbenv install 3.2.2\nrbenv global 3.2.2\ngem install bundler\nEOF\n\n# Clone and setup Mastodon\nsudo -u mastodon git clone https://github.com/mastodon/mastodon.git /home/mastodon/live\ncd /home/mastodon/live\nsudo -u mastodon git checkout $(git tag -l | grep -v &#039;rc&#039; | sort -V | tail -n 1)\n\n# Install dependencies\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon/live\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nbundle config deployment &#039;true&#039;\nbundle config without &#039;development test&#039;\nbundle install\nyarn install --pure-lockfile\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\napk update\n\n# Install required packages\napk add --no-cache \\\n    git curl wget gnupg \\\n    build-base \\\n    postgresql15 postgresql15-dev postgresql15-contrib \\\n    redis \\\n    nodejs npm yarn \\\n    nginx \\\n    imagemagick imagemagick-dev ffmpeg \\\n    libxml2-dev libxslt-dev \\\n    libidn-dev \\\n    openssl-dev \\\n    readline-dev \\\n    zlib-dev \\\n    yaml-dev \\\n    gdbm-dev \\\n    ncurses-dev \\\n    libffi-dev\n\n# Initialize and start services\nrc-service postgresql setup\nrc-service postgresql start\nrc-service redis start\nrc-update add postgresql\nrc-update add redis\n\n# Configure PostgreSQL\nsudo -u postgres createuser mastodon --createdb\nsudo -u postgres psql -c &quot;ALTER USER mastodon WITH ENCRYPTED PASSWORD &#039;secure_random_password_here&#039;;&quot;\n\n# Create mastodon user\nadduser -D -s /bin/ash mastodon\naddgroup mastodon nginx\n\n# Install Ruby using rbenv\nsudo -u mastodon ash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon\ngit clone https://github.com/rbenv/rbenv.git ~/.rbenv\necho &#039;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#039; &gt;&gt; ~/.profile\necho &#039;eval &quot;$(rbenv init -)&quot;&#039; &gt;&gt; ~/.profile\ngit clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nrbenv install 3.2.2\nrbenv global 3.2.2\ngem install bundler\nEOF\n\n# Clone and setup Mastodon\nsudo -u mastodon git clone https://github.com/mastodon/mastodon.git /home/mastodon/live\ncd /home/mastodon/live\nsudo -u mastodon git checkout $(git tag -l | grep -v &#039;rc&#039; | sort -V | tail -n 1)\n\n# Install dependencies\nsudo -u mastodon ash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon/live\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nbundle config deployment &#039;true&#039;\nbundle config without &#039;development test&#039;\nbundle install\nyarn install --pure-lockfile\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"environment-configuration\" class=\"mobile-header\">Environment Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Switch to mastodon user\nsudo -u mastodon bash\n\n# Navigate to Mastodon directory\ncd /home/mastodon/live\n\n# Generate configuration\nRAILS_ENV=production bundle exec rake mastodon:setup</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">This interactive setup will prompt for:</p>\n<li class=\"mobile-list-item\">Domain name (e.g., mastodon.example.com)</li>\n<li class=\"mobile-list-item\">Database configuration</li>\n<li class=\"mobile-list-item\">Redis configuration</li>\n<li class=\"mobile-list-item\">Email settings (SMTP)</li>\n<li class=\"mobile-list-item\">File storage settings</li>\n<li class=\"mobile-list-item\">Admin account creation</li>\n<h3 id=\"manual-environment-configuration\" class=\"mobile-header\">Manual Environment Configuration</h3>\n<p class=\"mobile-paragraph\">If you prefer manual configuration, create <code class=\"mobile-inline-code\">/home/mastodon/live/.env.production</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create environment file\nsudo -u mastodon tee /home/mastodon/live/.env.production &lt;&lt; &#039;EOF&#039;\n# Federation\nLOCAL_DOMAIN=mastodon.example.com\nWEB_DOMAIN=mastodon.example.com\n\n# Redis\nREDIS_HOST=127.0.0.1\nREDIS_PORT=6379\n\n# PostgreSQL\nDB_HOST=127.0.0.1\nDB_USER=mastodon\nDB_NAME=mastodon_production\nDB_PASS=secure_random_password_here\nDB_PORT=5432\n\n# ElasticSearch (optional, for full-text search)\n# ES_ENABLED=true\n# ES_HOST=localhost\n# ES_PORT=9200\n\n# Secrets\n# Generate with: bundle exec rake secret\nSECRET_KEY_BASE=generate_with_rake_secret\nOTP_SECRET=generate_with_rake_secret\n\n# VAPID keys (for push notifications)\n# Generate with: bundle exec rake mastodon:webpush:generate_vapid_key\nVAPID_PRIVATE_KEY=\nVAPID_PUBLIC_KEY=\n\n# Sending mail\nSMTP_SERVER=smtp.example.com\nSMTP_PORT=587\nSMTP_LOGIN=mastodon@example.com\nSMTP_PASSWORD=smtp_password\nSMTP_FROM_ADDRESS=mastodon@example.com\n\n# File storage (local)\nPAPERCLIP_ROOT_PATH=/home/mastodon/live/public/system\n\n# Optional S3/compatible storage\n# S3_ENABLED=true\n# S3_BUCKET=mastodon\n# AWS_ACCESS_KEY_ID=\n# AWS_SECRET_ACCESS_KEY=\n# S3_REGION=us-east-1\n# S3_HOSTNAME=s3.amazonaws.com\n\n# Optional CDN\n# CDN_HOST=assets.example.com\n\n# Streaming\nSTREAMING_CLUSTER_NUM=1\nSTREAMING_API_BASE_URL=wss://mastodon.example.com\n\n# Advanced settings\nMAX_TOOT_CHARS=500\nSINGLE_USER_MODE=false\nAUTHORIZED_FETCH=false\nLIMITED_FEDERATION_MODE=false\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-setup\" class=\"mobile-header\">Database Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Switch to mastodon user and setup database\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon/live\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\n\n# Create database\nRAILS_ENV=production bundle exec rails db:create\nRAILS_ENV=production bundle exec rails db:schema:load\nRAILS_ENV=production bundle exec rails db:seed\n\n# Compile assets\nRAILS_ENV=production bundle exec rails assets:precompile\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-service-files-rheldebianarchsuse\" class=\"mobile-header\">Systemd Service Files (RHEL/Debian/Arch/SUSE)</h3>\n<p class=\"mobile-paragraph\">Create the web service (<code class=\"mobile-inline-code\">/etc/systemd/system/mastodon-web.service</code>):</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[Unit]\nDescription=mastodon-web\nAfter=network.target\n\n[Service]\nType=simple\nUser=mastodon\nWorkingDirectory=/home/mastodon/live\nEnvironment=&quot;RAILS_ENV=production&quot;\nEnvironment=&quot;PORT=3000&quot;\nExecStart=/home/mastodon/.rbenv/shims/bundle exec puma -C config/puma.rb\nExecReload=/bin/kill -SIGUSR1 $MAINPID\nTimeoutSec=15\nRestart=always\nRestartSec=10\nSyslogIdentifier=mastodon-web\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Create the background jobs service (<code class=\"mobile-inline-code\">/etc/systemd/system/mastodon-sidekiq.service</code>):</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[Unit]\nDescription=mastodon-sidekiq\nAfter=network.target\n\n[Service]\nType=simple\nUser=mastodon\nWorkingDirectory=/home/mastodon/live\nEnvironment=&quot;RAILS_ENV=production&quot;\nEnvironment=&quot;DB_POOL=25&quot;\nExecStart=/home/mastodon/.rbenv/shims/bundle exec sidekiq -c 25\nTimeoutSec=15\nRestart=always\nRestartSec=10\nSyslogIdentifier=mastodon-sidekiq\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Create the streaming service (<code class=\"mobile-inline-code\">/etc/systemd/system/mastodon-streaming.service</code>):</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[Unit]\nDescription=mastodon-streaming\nAfter=network.target\n\n[Service]\nType=simple\nUser=mastodon\nWorkingDirectory=/home/mastodon/live\nEnvironment=&quot;NODE_ENV=production&quot;\nEnvironment=&quot;PORT=4000&quot;\nExecStart=/usr/bin/node streaming\nTimeoutSec=15\nRestart=always\nRestartSec=10\nSyslogIdentifier=mastodon-streaming\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n      </div>\n    </div>\n<h3 id=\"enable-and-start-services\" class=\"mobile-header\">Enable and Start Services</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Reload systemd and enable services\nsudo systemctl daemon-reload\nsudo systemctl enable mastodon-web mastodon-sidekiq mastodon-streaming\nsudo systemctl start mastodon-web mastodon-sidekiq mastodon-streaming\n\n# Check status\nsudo systemctl status mastodon-web mastodon-sidekiq mastodon-streaming</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-services-alpine-linux\" class=\"mobile-header\">OpenRC Services (Alpine Linux)</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/init.d/mastodon-web</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/sbin/openrc-run\n\nname=&quot;mastodon-web&quot;\ndescription=&quot;Mastodon web service&quot;\n\nuser=&quot;mastodon&quot;\ngroup=&quot;mastodon&quot;\ndirectory=&quot;/home/mastodon/live&quot;\n\ncommand=&quot;/home/mastodon/.rbenv/shims/bundle&quot;\ncommand_args=&quot;exec puma -C config/puma.rb&quot;\ncommand_background=&quot;yes&quot;\n\npidfile=&quot;/run/${name}.pid&quot;\noutput_log=&quot;/var/log/${name}.log&quot;\nerror_log=&quot;/var/log/${name}.error.log&quot;\n\ndepend() {\n    need net postgresql redis\n}\n\nstart_pre() {\n    export RAILS_ENV=production\n    export PORT=3000\n}</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Create similar files for <code class=\"mobile-inline-code\">mastodon-sidekiq</code> and <code class=\"mobile-inline-code\">mastodon-streaming</code>, then:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Make executable\nsudo chmod +x /etc/init.d/mastodon-*\n\n# Enable and start\nsudo rc-update add mastodon-web\nsudo rc-update add mastodon-sidekiq  \nsudo rc-update add mastodon-streaming\nsudo rc-service mastodon-web start\nsudo rc-service mastodon-sidekiq start\nsudo rc-service mastodon-streaming start</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\"><strong>Ruby/Bundle Issues:</strong></p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ensure proper rbenv setup\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nwhich ruby\nruby --version\nEOF\n\n# Reinstall gems if needed\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon/live\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nbundle install --deployment --without development test\nEOF</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>Database Connection Issues:</strong></p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test PostgreSQL connection\nsudo -u mastodon psql -h localhost -U mastodon mastodon_production\n\n# Check PostgreSQL logs\nsudo journalctl -u postgresql-15 -f\n\n# Verify database configuration\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon/live\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nRAILS_ENV=production bundle exec rails console\n# In console: ActiveRecord::Base.connection\nEOF</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>Asset Compilation Issues:</strong></p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clear and recompile assets\nsudo -u mastodon bash &lt;&lt; &#039;EOF&#039;\ncd /home/mastodon/live\nexport PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\nRAILS_ENV=production bundle exec rails assets:clobber\nRAILS_ENV=production bundle exec rails assets:precompile\nEOF</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>Service Startup Issues:</strong></p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service logs\nsudo journalctl -u mastodon-web -f\nsudo journalctl -u mastodon-sidekiq -f\nsudo journalctl -u mastodon-streaming -f\n\n# Check for port conflicts\nsudo netstat -tlnp | grep :3000\nsudo netstat -tlnp | grep :4000\n\n# Verify file permissions\nsudo ls -la /home/mastodon/live/\nsudo -u mastodon test -r /home/mastodon/live/.env.production &amp;&amp; echo &quot;Can read env file&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-considerations\" class=\"mobile-header\">Security Considerations</h2>\n<h3 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h3>\n<p class=\"mobile-paragraph\"><strong>firewalld (RHEL/CentOS/Fedora):</strong></p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Open required ports\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --permanent --add-port=4000/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>ufw (Ubuntu/Debian):</strong></p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure firewall\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw allow 3000/tcp\nsudo ufw allow 4000/tcp\nsudo ufw enable</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>iptables (Generic):</strong></p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic firewall rules\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 3000 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 4000 -j ACCEPT</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration-with-nginx\" class=\"mobile-header\">SSL/TLS Configuration with nginx</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/nginx/sites-available/mastodon</code> (Debian/Ubuntu) or <code class=\"mobile-inline-code\">/etc/nginx/conf.d/mastodon.conf</code> (RHEL):</p>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">map $http_upgrade $connection_upgrade {\n  default upgrade;\n  &#039;&#039;      close;\n}\n\nupstream backend {\n    server 127.0.0.1:3000 fail_timeout=0;\n}\n\nupstream streaming {\n    server 127.0.0.1:4000 fail_timeout=0;\n}\n\nproxy_cache_path /var/cache/nginx/mastodon keys_zone=CACHE:10m levels=1:2 inactive=7d max_size=1g;\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name mastodon.example.com;\n    root /home/mastodon/live/public;\n    location /.well-known/acme-challenge/ { allow all; }\n    location / { return 301 https://$host$request_uri; }\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name mastodon.example.com;\n\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_tickets off;\n\n    ssl_certificate     /etc/letsencrypt/live/mastodon.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/mastodon.example.com/privkey.pem;\n\n    keepalive_timeout    70;\n    sendfile             on;\n    client_max_body_size 80m;\n\n    root /home/mastodon/live/public;\n\n    gzip on;\n    gzip_disable &quot;msie6&quot;;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    add_header Strict-Transport-Security &quot;max-age=31536000&quot; always;\n\n    location / {\n        try_files $uri @proxy;\n    }\n\n    location ~ ^/(emoji|packs|system/accounts/avatars|system/media_attachments/files) {\n        add_header Cache-Control &quot;public, max-age=31536000, immutable&quot;;\n        add_header Strict-Transport-Security &quot;max-age=31536000&quot; always;\n        try_files $uri @proxy;\n    }\n    \n    location /sw.js {\n        add_header Cache-Control &quot;public, max-age=604800, must-revalidate&quot;;\n        add_header Strict-Transport-Security &quot;max-age=31536000&quot; always;\n        try_files $uri @proxy;\n    }\n\n    location @proxy {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Proxy &quot;&quot;;\n        proxy_pass_header Server;\n\n        proxy_pass http://backend;\n        proxy_buffering on;\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        proxy_cache CACHE;\n        proxy_cache_valid 200 7d;\n        proxy_cache_valid 410 24h;\n        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;\n        proxy_cache_lock on;\n\n        tcp_nodelay on;\n    }\n\n    location /api/v1/streaming {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Proxy &quot;&quot;;\n\n        proxy_pass http://streaming;\n        proxy_buffering off;\n        proxy_redirect off;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n\n        tcp_nodelay on;\n    }\n\n    error_page 500 501 502 503 504 /500.html;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssl-certificate-setup\" class=\"mobile-header\">SSL Certificate Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot\n# RHEL/CentOS/Fedora\nsudo dnf install -y certbot python3-certbot-nginx\n\n# Debian/Ubuntu  \nsudo apt install -y certbot python3-certbot-nginx\n\n# Arch Linux\nsudo pacman -S certbot certbot-nginx\n\n# Obtain certificate\nsudo certbot --nginx -d mastodon.example.com\n\n# Auto-renewal\necho &quot;0 12 * * * /usr/bin/certbot renew --quiet&quot; | sudo crontab -</code></pre>\n      </div>\n    </div>\n<h3 id=\"selinux-configuration-rhel-based-systems\" class=\"mobile-header\">SELinux Configuration (RHEL-based systems)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Allow nginx to connect to Mastodon services\nsudo setsebool -P httpd_can_network_connect 1\n\n# Set SELinux contexts for Mastodon files\nsudo semanage fcontext -a -t httpd_exec_t &quot;/home/mastodon/live/public(/.*)?&quot;\nsudo restorecon -R /home/mastodon/live/public/\n\n# Allow Mastodon to bind to required ports\nsudo semanage port -a -t http_port_t -p tcp 3000\nsudo semanage port -a -t http_port_t -p tcp 4000</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-tuning\" class=\"mobile-header\">Performance Tuning</h2>\n<h3 id=\"postgresql-optimization\" class=\"mobile-header\">PostgreSQL Optimization</h3>\n<p class=\"mobile-paragraph\">Edit <code class=\"mobile-inline-code\">/var/lib/pgsql/15/data/postgresql.conf</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Memory settings (adjust based on available RAM)\nshared_buffers = 256MB                 # 1/4 of RAM\neffective_cache_size = 1GB            # 3/4 of RAM\nwork_mem = 4MB                        # RAM/max_connections/4\nmaintenance_work_mem = 64MB           # RAM/16\n\n# Connection settings\nmax_connections = 100\nsuperuser_reserved_connections = 3\n\n# WAL settings for better performance\nwal_buffers = 16MB\ncheckpoint_completion_target = 0.7\ncheckpoint_timeout = 5min\nmax_wal_size = 1GB\nmin_wal_size = 80MB\n\n# Query optimization\nrandom_page_cost = 1.1                # For SSD storage\neffective_io_concurrency = 200        # For SSD storage</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-optimization\" class=\"mobile-header\">Redis Optimization</h3>\n<p class=\"mobile-paragraph\">Edit <code class=\"mobile-inline-code\">/etc/redis/redis.conf</code> or <code class=\"mobile-inline-code\">/etc/redis.conf</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Memory optimization\nmaxmemory 256mb\nmaxmemory-policy allkeys-lru\n\n# Persistence (adjust based on needs)\nsave 900 1\nsave 300 10\nsave 60 10000\n\n# Network optimization\ntcp-keepalive 300\ntimeout 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"rubyrails-optimization\" class=\"mobile-header\">Ruby/Rails Optimization</h3>\n<p class=\"mobile-paragraph\">Edit <code class=\"mobile-inline-code\">/home/mastodon/live/.env.production</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Database connection pooling\nDB_POOL=25\n\n# Sidekiq concurrency\nSIDEKIQ_CONCURRENCY=25\n\n# Puma workers (number of CPU cores)\nWEB_CONCURRENCY=4\nMAX_THREADS=5\n\n# Streaming cluster\nSTREAMING_CLUSTER_NUM=4</code></pre>\n      </div>\n    </div>\n<h3 id=\"system-level-optimization\" class=\"mobile-header\">System-level Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase file descriptors limit\necho &quot;mastodon soft nofile 65536&quot; | sudo tee -a /etc/security/limits.conf\necho &quot;mastodon hard nofile 65536&quot; | sudo tee -a /etc/security/limits.conf\n\n# Optimize kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; &#039;EOF&#039;\n# Network optimization\nnet.core.somaxconn = 1024\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 1024\nnet.ipv4.tcp_keepalive_time = 120\nnet.ipv4.tcp_keepalive_intvl = 30\nnet.ipv4.tcp_keepalive_probes = 3\n\n# Memory optimization\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"database-backup\" class=\"mobile-header\">Database Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/mastodon-backup.sh &lt;&lt; &#039;EOF&#039;\n#!/bin/bash\n\nBACKUP_DIR=&quot;/backup/mastodon&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nDB_NAME=&quot;mastodon_production&quot;\nMEDIA_DIR=&quot;/home/mastodon/live/public/system&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Database backup\nsudo -u postgres pg_dump &quot;$DB_NAME&quot; | gzip &gt; &quot;$BACKUP_DIR/db_${DATE}.sql.gz&quot;\n\n# Media backup (if stored locally)\nif [ -d &quot;$MEDIA_DIR&quot; ]; then\n    tar -czf &quot;$BACKUP_DIR/media_${DATE}.tar.gz&quot; -C &quot;$(dirname &quot;$MEDIA_DIR&quot;)&quot; &quot;$(basename &quot;$MEDIA_DIR&quot;)&quot;\nfi\n\n# Configuration backup\ntar -czf &quot;$BACKUP_DIR/config_${DATE}.tar.gz&quot; /home/mastodon/live/.env.production\n\n# Remove backups older than 30 days\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $DATE&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/mastodon-backup.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"automated-backups\" class=\"mobile-header\">Automated Backups</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add to crontab\necho &quot;0 2 * * * /usr/local/bin/mastodon-backup.sh&quot; | sudo crontab -</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop Mastodon services\nsudo systemctl stop mastodon-web mastodon-sidekiq mastodon-streaming\n\n# Restore database\nsudo -u postgres dropdb mastodon_production\nsudo -u postgres createdb mastodon_production\nsudo -u postgres psql -c &quot;GRANT ALL PRIVILEGES ON DATABASE mastodon_production TO mastodon;&quot;\ngunzip -c /backup/mastodon/db_YYYYMMDD_HHMMSS.sql.gz | sudo -u postgres psql mastodon_production\n\n# Restore media files (if needed)\nsudo rm -rf /home/mastodon/live/public/system\nsudo tar -xzf /backup/mastodon/media_YYYYMMDD_HHMMSS.tar.gz -C /home/mastodon/live/public/\nsudo chown -R mastodon:mastodon /home/mastodon/live/public/system\n\n# Restore configuration\nsudo tar -xzf /backup/mastodon/config_YYYYMMDD_HHMMSS.tar.gz -C /\n\n# Start services\nsudo systemctl start mastodon-web mastodon-sidekiq mastodon-streaming</code></pre>\n      </div>\n    </div>\n<h2 id=\"system-requirements\" class=\"mobile-header\">System Requirements</h2>\n<h3 id=\"minimum-requirements\" class=\"mobile-header\">Minimum Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 2 cores, 2.0 GHz</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 4GB</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 20GB SSD</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: 100 Mbps</li>\n<li class=\"mobile-list-item\"><strong>OS</strong>: Linux (64-bit)</li>\n<h3 id=\"recommended-production-requirements\" class=\"mobile-header\">Recommended Production Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 4+ cores, 2.5+ GHz</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 8GB+ (16GB for large instances)</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 100GB+ SSD with good IOPS</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: 1 Gbps with low latency</li>\n<li class=\"mobile-list-item\"><strong>OS</strong>: Recent Linux distribution with long-term support</li>\n<h3 id=\"scaling-considerations\" class=\"mobile-header\">Scaling Considerations</h3>\n<li class=\"mobile-list-item\"><strong>Small Instance</strong>: <1,000 users - 2 cores, 4GB RAM, 50GB storage</li>\n<li class=\"mobile-list-item\"><strong>Medium Instance</strong>: 1,000-10,000 users - 4 cores, 8GB RAM, 200GB storage</li>\n<li class=\"mobile-list-item\"><strong>Large Instance</strong>: 10,000+ users - 8+ cores, 16GB+ RAM, 500GB+ storage</li>\n<h2 id=\"support\" class=\"mobile-header\">Support</h2>\n<h3 id=\"official-resources\" class=\"mobile-header\">Official Resources</h3>\n<li class=\"mobile-list-item\"><strong>Official Website</strong>: <a href=\"https://joinmastodon.org\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">https://joinmastodon.org</a></li>\n<li class=\"mobile-list-item\"><strong>Documentation</strong>: <a href=\"https://docs.joinmastodon.org\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">https://docs.joinmastodon.org</a></li>\n<li class=\"mobile-list-item\"><strong>GitHub Repository</strong>: <a href=\"https://github.com/mastodon/mastodon\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">https://github.com/mastodon/mastodon</a></li>\n<li class=\"mobile-list-item\"><strong>Admin Documentation</strong>: <a href=\"https://docs.joinmastodon.org/admin/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">https://docs.joinmastodon.org/admin/</a></li>\n<h3 id=\"community-support\" class=\"mobile-header\">Community Support</h3>\n<li class=\"mobile-list-item\"><strong>Mastodon Discord</strong>: <a href=\"https://discord.gg/mastodon\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">https://discord.gg/mastodon</a></li>\n<li class=\"mobile-list-item\"><strong>GitHub Issues</strong>: <a href=\"https://github.com/mastodon/mastodon/issues\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">https://github.com/mastodon/mastodon/issues</a></li>\n<li class=\"mobile-list-item\"><strong>Mastodon Community</strong>: Follow @Mastodon@mastodon.social</li>\n<li class=\"mobile-list-item\"><strong>Admin Forums</strong>: Various Mastodon admin communities on the fediverse</li>\n<h3 id=\"commercial-support\" class=\"mobile-header\">Commercial Support</h3>\n<li class=\"mobile-list-item\">Available from various consulting companies</li>\n<li class=\"mobile-list-item\">Managed hosting providers offer Mastodon services</li>\n<li class=\"mobile-list-item\">Professional services for large deployments</li>\n<h2 id=\"contributing\" class=\"mobile-header\">Contributing</h2>\n<h3 id=\"how-to-contribute\" class=\"mobile-header\">How to Contribute</h3>\n<p class=\"mobile-paragraph\">1. <strong>Report Bugs</strong>: Submit issues to <a href=\"https://github.com/mastodon/mastodon/issues\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub</a></p>\n<p class=\"mobile-paragraph\">2. <strong>Translate</strong>: Help with internationalization at <a href=\"https://crowdin.com/project/mastodon\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Crowdin</a></p>\n<p class=\"mobile-paragraph\">3. <strong>Code Contributions</strong>: Submit pull requests for bug fixes and features</p>\n<p class=\"mobile-paragraph\">4. <strong>Documentation</strong>: Improve documentation and guides</p>\n<p class=\"mobile-paragraph\">5. <strong>Testing</strong>: Test release candidates and provide feedback</p>\n<h3 id=\"development-setup\" class=\"mobile-header\">Development Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clone repository\ngit clone https://github.com/mastodon/mastodon.git\ncd mastodon\n\n# Install dependencies\nbundle install\nyarn install\n\n# Setup development database\nrails db:setup\n\n# Run development server\nforeman start</code></pre>\n      </div>\n    </div>\n<h3 id=\"contribution-guidelines\" class=\"mobile-header\">Contribution Guidelines</h3>\n<li class=\"mobile-list-item\">Follow Ruby and JavaScript style guides</li>\n<li class=\"mobile-list-item\">Include tests for new features</li>\n<li class=\"mobile-list-item\">Update documentation for changes</li>\n<li class=\"mobile-list-item\">Use conventional commit messages</li>\n<li class=\"mobile-list-item\">Sign commits with GPG key</li>\n<h2 id=\"license\" class=\"mobile-header\">License</h2>\n<p class=\"mobile-paragraph\">Mastodon is licensed under the <strong>GNU Affero General Public License v3.0 (AGPL-3.0)</strong>.</p>\n<h3 id=\"key-license-points\" class=\"mobile-header\">Key License Points</h3>\n<li class=\"mobile-list-item\"><strong>Free to Use</strong>: Can be used for any purpose</li>\n<li class=\"mobile-list-item\"><strong>Source Available</strong>: Source code must be provided to users</li>\n<li class=\"mobile-list-item\"><strong>Copyleft</strong>: Derivative works must use same license</li>\n<li class=\"mobile-list-item\"><strong>Network Use</strong>: AGPL applies to network/web services</li>\n<li class=\"mobile-list-item\"><strong>No Warranty</strong>: Software provided \"as is\"</li>\n<h3 id=\"license-compliance\" class=\"mobile-header\">License Compliance</h3>\n<li class=\"mobile-list-item\">Keep license notices intact</li>\n<li class=\"mobile-list-item\">Provide source code to users</li>\n<li class=\"mobile-list-item\">Document any modifications</li>\n<li class=\"mobile-list-item\">Use same license for derivatives</li>\n<li class=\"mobile-list-item\">Consider legal requirements for your jurisdiction</li>\n<p class=\"mobile-paragraph\">Full license text: <a href=\"https://github.com/mastodon/mastodon/blob/main/LICENSE\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">https://github.com/mastodon/mastodon/blob/main/LICENSE</a></p>\n<h2 id=\"acknowledgments\" class=\"mobile-header\">Acknowledgments</h2>\n<h3 id=\"core-team\" class=\"mobile-header\">Core Team</h3>\n<li class=\"mobile-list-item\"><strong>Eugen Rochko</strong> - Creator and lead developer</li>\n<li class=\"mobile-list-item\"><strong>Claire</strong> - Core maintainer</li>\n<li class=\"mobile-list-item\"><strong>Renaud Chaput</strong> - Core maintainer</li>\n<li class=\"mobile-list-item\"><strong>ThibG</strong> - Significant contributor</li>\n<li class=\"mobile-list-item\">And many other contributors</li>\n<h3 id=\"technologies-used\" class=\"mobile-header\">Technologies Used</h3>\n<li class=\"mobile-list-item\"><strong>Ruby on Rails</strong> - Web application framework</li>\n<li class=\"mobile-list-item\"><strong>PostgreSQL</strong> - Primary database</li>\n<li class=\"mobile-list-item\"><strong>Redis</strong> - Caching and job queue</li>\n<li class=\"mobile-list-item\"><strong>React.js</strong> - Frontend user interface</li>\n<li class=\"mobile-list-item\"><strong>ActivityPub</strong> - Federation protocol</li>\n<li class=\"mobile-list-item\"><strong>Sidekiq</strong> - Background job processing</li>\n<h3 id=\"community\" class=\"mobile-header\">Community</h3>\n<li class=\"mobile-list-item\"><strong>Translators</strong> - Making Mastodon available in many languages</li>\n<li class=\"mobile-list-item\"><strong>Instance Administrators</strong> - Running the fediverse</li>\n<li class=\"mobile-list-item\"><strong>Users</strong> - Creating the vibrant community</li>\n<li class=\"mobile-list-item\"><strong>Contributors</strong> - Improving the software</li>\n<h2 id=\"version-history\" class=\"mobile-header\">Version History</h2>\n<h3 id=\"major-releases\" class=\"mobile-header\">Major Releases</h3>\n<li class=\"mobile-list-item\"><strong>v4.2</strong> (September 2023) - Enhanced moderation tools, quote posts</li>\n<li class=\"mobile-list-item\"><strong>v4.1</strong> (February 2023) - Improved federation, performance optimizations</li>\n<li class=\"mobile-list-item\"><strong>v4.0</strong> (October 2022) - Major UI overhaul, new features</li>\n<li class=\"mobile-list-item\"><strong>v3.5</strong> (May 2022) - Content warnings improvements, admin features</li>\n<li class=\"mobile-list-item\"><strong>v3.4</strong> (October 2021) - Server rules, report improvements</li>\n<li class=\"mobile-list-item\"><strong>v3.3</strong> (February 2021) - Profile directory, admin announcements</li>\n<li class=\"mobile-list-item\"><strong>v3.2</strong> (July 2020) - Audio uploads, admin interface improvements</li>\n<li class=\"mobile-list-item\"><strong>v3.1</strong> (February 2020) - Polls, improved federation</li>\n<li class=\"mobile-list-item\"><strong>v3.0</strong> (October 2019) - Single column mode, admin dashboard</li>\n<h3 id=\"current-stable-version\" class=\"mobile-header\">Current Stable Version</h3>\n<li class=\"mobile-list-item\"><strong>v4.2.x</strong> - Latest stable release</li>\n<li class=\"mobile-list-item\">Check <a href=\"https://github.com/mastodon/mastodon/releases\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub releases</a> for current version</li>\n<h3 id=\"upgrade-path\" class=\"mobile-header\">Upgrade Path</h3>\n<li class=\"mobile-list-item\">Always backup before upgrading</li>\n<li class=\"mobile-list-item\">Follow official upgrade guides</li>\n<li class=\"mobile-list-item\">Test in staging environment first</li>\n<li class=\"mobile-list-item\">Monitor for federation issues after upgrade</li>\n<h2 id=\"appendices\" class=\"mobile-header\">Appendices</h2>\n<h3 id=\"appendix-a-port-reference\" class=\"mobile-header\">Appendix A: Port Reference</h3>\n<p class=\"mobile-paragraph\">| Port | Service | Protocol | Description |</p>\n<p class=\"mobile-paragraph\">|------|---------|----------|-------------|</p>\n<p class=\"mobile-paragraph\">| 80 | HTTP | TCP | Web traffic (redirects to HTTPS) |</p>\n<p class=\"mobile-paragraph\">| 443 | HTTPS | TCP | Secure web traffic |</p>\n<p class=\"mobile-paragraph\">| 3000 | Mastodon Web | TCP | Internal web service |</p>\n<p class=\"mobile-paragraph\">| 4000 | Mastodon Streaming | TCP | Real-time updates |</p>\n<p class=\"mobile-paragraph\">| 5432 | PostgreSQL | TCP | Database (internal) |</p>\n<p class=\"mobile-paragraph\">| 6379 | Redis | TCP | Cache and queues (internal) |</p>\n<p class=\"mobile-paragraph\">| 25/587 | SMTP | TCP | Email delivery (outbound) |</p>\n<h3 id=\"appendix-b-file-locations\" class=\"mobile-header\">Appendix B: File Locations</h3>\n<p class=\"mobile-paragraph\">| Path | Description |</p>\n<p class=\"mobile-paragraph\">|------|-------------|</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/home/mastodon/live/</code> | Mastodon application directory |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/home/mastodon/live/.env.production</code> | Main configuration file |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/home/mastodon/live/public/system/</code> | Media files storage |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/etc/systemd/system/mastodon-*.service</code> | Service definitions |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/etc/nginx/sites-available/mastodon</code> | nginx configuration |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/var/lib/postgresql/*/data/</code> | PostgreSQL data directory |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/etc/redis/redis.conf</code> | Redis configuration |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/var/log/nginx/</code> | nginx logs |</p>\n<h3 id=\"appendix-c-common-commands\" class=\"mobile-header\">Appendix C: Common Commands</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Service management\nsudo systemctl status mastodon-web mastodon-sidekiq mastodon-streaming\nsudo systemctl restart mastodon-web mastodon-sidekiq mastodon-streaming\n\n# Mastodon maintenance\nsudo -u mastodon bash -c &#039;cd /home/mastodon/live &amp;&amp; RAILS_ENV=production bundle exec rails mastodon:maintenance&#039;\n\n# Database management\nsudo -u postgres psql mastodon_production\n\n# Log monitoring\nsudo journalctl -u mastodon-web -f\nsudo tail -f /var/log/nginx/access.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"appendix-d-environment-variables-reference\" class=\"mobile-header\">Appendix D: Environment Variables Reference</h3>\n<p class=\"mobile-paragraph\">| Variable | Description | Required |</p>\n<p class=\"mobile-paragraph\">|----------|-------------|----------|</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">LOCAL_DOMAIN</code> | Your Mastodon domain | Yes |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">SECRET_KEY_BASE</code> | Rails secret key | Yes |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">OTP_SECRET</code> | Two-factor authentication secret | Yes |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">VAPID_PRIVATE_KEY</code> | Push notification private key | Yes |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">VAPID_PUBLIC_KEY</code> | Push notification public key | Yes |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">DB_HOST</code> | Database hostname | Yes |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">DB_USER</code> | Database username | Yes |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">DB_PASS</code> | Database password | Yes |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">DB_NAME</code> | Database name | Yes |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">REDIS_HOST</code> | Redis hostname | Yes |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">SMTP_SERVER</code> | SMTP server hostname | Recommended |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">SMTP_FROM_ADDRESS</code> | From email address | Recommended |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">S3_ENABLED</code> | Enable S3 storage | No |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">CDN_HOST</code> | CDN hostname for assets | No |</p>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official Mastodon documentation for the most up-to-date information.</p>","readTime":"20 min","wordCount":3905,"tableOfContents":[{"level":2,"text":"Prerequisites","id":"prerequisites"},{"level":3,"text":"Hardware Requirements","id":"hardware-requirements"},{"level":3,"text":"Software Dependencies","id":"software-dependencies"},{"level":3,"text":"Network Requirements","id":"network-requirements"},{"level":3,"text":"System Access","id":"system-access"},{"level":2,"text":"Supported Operating Systems","id":"supported-operating-systems"},{"level":2,"text":"Installation","id":"installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":2,"text":"Configuration","id":"configuration"},{"level":3,"text":"Environment Configuration","id":"environment-configuration"},{"level":3,"text":"Manual Environment Configuration","id":"manual-environment-configuration"},{"level":3,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Service Management","id":"service-management"},{"level":3,"text":"Systemd Service Files (RHEL/Debian/Arch/SUSE)","id":"systemd-service-files-rheldebianarchsuse"},{"level":3,"text":"Enable and Start Services","id":"enable-and-start-services"},{"level":3,"text":"OpenRC Services (Alpine Linux)","id":"openrc-services-alpine-linux"},{"level":2,"text":"Troubleshooting","id":"troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Security Considerations","id":"security-considerations"},{"level":3,"text":"Firewall Configuration","id":"firewall-configuration"},{"level":3,"text":"SSL/TLS Configuration with nginx","id":"ssltls-configuration-with-nginx"},{"level":3,"text":"SSL Certificate Setup","id":"ssl-certificate-setup"},{"level":3,"text":"SELinux Configuration (RHEL-based systems)","id":"selinux-configuration-rhel-based-systems"},{"level":2,"text":"Performance Tuning","id":"performance-tuning"},{"level":3,"text":"PostgreSQL Optimization","id":"postgresql-optimization"},{"level":3,"text":"Redis Optimization","id":"redis-optimization"},{"level":3,"text":"Ruby/Rails Optimization","id":"rubyrails-optimization"},{"level":3,"text":"System-level Optimization","id":"system-level-optimization"},{"level":2,"text":"Backup and Restore","id":"backup-and-restore"},{"level":3,"text":"Database Backup","id":"database-backup"},{"level":3,"text":"Automated Backups","id":"automated-backups"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"System Requirements","id":"system-requirements"},{"level":3,"text":"Minimum Requirements","id":"minimum-requirements"},{"level":3,"text":"Recommended Production Requirements","id":"recommended-production-requirements"},{"level":3,"text":"Scaling Considerations","id":"scaling-considerations"},{"level":2,"text":"Support","id":"support"},{"level":3,"text":"Official Resources","id":"official-resources"},{"level":3,"text":"Community Support","id":"community-support"},{"level":3,"text":"Commercial Support","id":"commercial-support"},{"level":2,"text":"Contributing","id":"contributing"},{"level":3,"text":"How to Contribute","id":"how-to-contribute"},{"level":3,"text":"Development Setup","id":"development-setup"},{"level":3,"text":"Contribution Guidelines","id":"contribution-guidelines"},{"level":2,"text":"License","id":"license"},{"level":3,"text":"Key License Points","id":"key-license-points"},{"level":3,"text":"License Compliance","id":"license-compliance"},{"level":2,"text":"Acknowledgments","id":"acknowledgments"},{"level":3,"text":"Core Team","id":"core-team"},{"level":3,"text":"Technologies Used","id":"technologies-used"},{"level":3,"text":"Community","id":"community"},{"level":2,"text":"Version History","id":"version-history"},{"level":3,"text":"Major Releases","id":"major-releases"},{"level":3,"text":"Current Stable Version","id":"current-stable-version"},{"level":3,"text":"Upgrade Path","id":"upgrade-path"},{"level":2,"text":"Appendices","id":"appendices"},{"level":3,"text":"Appendix A: Port Reference","id":"appendix-a-port-reference"},{"level":3,"text":"Appendix B: File Locations","id":"appendix-b-file-locations"},{"level":3,"text":"Appendix C: Common Commands","id":"appendix-c-common-commands"},{"level":3,"text":"Appendix D: Environment Variables Reference","id":"appendix-d-environment-variables-reference"}],"lastBuilt":"2025-10-25T06:15:20.874Z","metadataVersion":"2.0"}]},"__N_SSG":true}