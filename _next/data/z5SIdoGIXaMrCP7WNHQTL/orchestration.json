{"pageProps":{"category":{"key":"orchestration","name":"Orchestration","description":"Orchestration tools and applications","icon":"ðŸ“¦","color":"#bd93f9"},"guides":[{"name":"k3s","displayName":"k3s Installation Guide","slug":"k3s","description":"k3s is a free and open-source lightweight Kubernetes distribution. K3s provides a production-ready Kubernetes distribution optimized for edge, IoT, and resource-constrained environments, serving as a lightweight alternative to full Kubernetes","category":"orchestration","subcategory":"orchestration","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,6443,10250],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["orchestration","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/orchestration/k3s","documentationUrl":"https://howtomgr.github.io/orchestration/k3s","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/k3s","updatedAt":"2025-09-16T17:22:58Z","createdAt":"2025-09-08T03:09:43Z","readmeRaw":"# k3s Installation Guide\n\nk3s is a free and open-source lightweight Kubernetes distribution. K3s provides a production-ready Kubernetes distribution optimized for edge, IoT, and resource-constrained environments, serving as a lightweight alternative to full Kubernetes\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ recommended)\n  - RAM: 512MB minimum (1GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: Cluster networking\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 6443 (default k3s port)\n  - Port 10250 for kubelet\n- **Dependencies**:\n  - systemd or openrc\n  - iptables or nftables  \n  - containerd (bundled) or Docker\n  - curl or wget for installation\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install k3s\nsudo dnf install -y k3s\n\n# Enable and start service\nsudo systemctl enable --now k3s\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nk3s --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install k3s\nsudo apt install -y k3s\n\n# Enable and start service\nsudo systemctl enable --now k3s\n\n# Configure firewall\nsudo ufw allow 6443\n\n# Verify installation\nk3s --version\n```\n\n### Arch Linux\n\n```bash\n# Install k3s\nsudo pacman -S k3s\n\n# Enable and start service\nsudo systemctl enable --now k3s\n\n# Verify installation\nk3s --version\n```\n\n### Alpine Linux\n\n```bash\n# Install k3s\napk add --no-cache k3s\n\n# Enable and start service\nrc-update add k3s default\nrc-service k3s start\n\n# Verify installation\nk3s --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install k3s\nsudo zypper install -y k3s\n\n# Enable and start service\nsudo systemctl enable --now k3s\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nk3s --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install k3s\n\n# Start service\nbrew services start k3s\n\n# Verify installation\nk3s --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install k3s\n\n# Enable in rc.conf\necho 'k3s_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice k3s start\n\n# Verify installation\nk3s --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install k3s\n\n# Or using Scoop\nscoop install k3s\n\n# Verify installation\nk3s --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/k3s\n\n# Set up basic configuration\ncat > /etc/k3s/config.yaml << 'EOF'\n# K3s server configuration\nwrite-kubeconfig-mode: \"0644\"\ntls-san:\n  - \"k3s.example.com\"\n  - \"10.0.0.10\"\ncluster-cidr: \"10.42.0.0/16\"\nservice-cidr: \"10.43.0.0/16\"\ncluster-dns: \"10.43.0.10\"\ncluster-domain: \"cluster.local\"\nlog: \"/var/log/k3s.log\"\nEOF\n\n# Test configuration\nk3s --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable k3s\n\n# Start service\nsudo systemctl start k3s\n\n# Stop service\nsudo systemctl stop k3s\n\n# Restart service\nsudo systemctl restart k3s\n\n# Check status\nsudo systemctl status k3s\n\n# View logs\nsudo journalctl -u k3s -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add k3s default\n\n# Start service\nrc-service k3s start\n\n# Stop service\nrc-service k3s stop\n\n# Restart service\nrc-service k3s restart\n\n# Check status\nrc-service k3s status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'k3s_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice k3s start\n\n# Stop service\nservice k3s stop\n\n# Restart service\nservice k3s restart\n\n# Check status\nservice k3s status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start k3s\nbrew services stop k3s\nbrew services restart k3s\n\n# Check status\nbrew services list | grep k3s\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start k3s\n\n# Stop service\nnet stop k3s\n\n# Using PowerShell\nStart-Service k3s\nStop-Service k3s\nRestart-Service k3s\n\n# Check status\nGet-Service k3s\n```\n\n## Advanced Configuration\n\n### High Availability Setup\n```yaml\n# /etc/k3s/config.yaml for HA masters\ncluster-init: true  # First master only\nserver: https://10.0.0.10:6443  # Other masters join here\ntoken: \"your-secret-token\"\n\n# Embedded etcd configuration\ndatastore-endpoint: \"etcd\"\ndatastore-cafile: \"/etc/k3s/etcd/ca.crt\"\ndatastore-certfile: \"/etc/k3s/etcd/server.crt\" \ndatastore-keyfile: \"/etc/k3s/etcd/server.key\"\n\n# External datastore (PostgreSQL/MySQL)\ndatastore-endpoint: \"postgres://username:password@hostname:5432/k3s\"\n```\n\n### Network Configuration\n```yaml\n# Custom CNI configuration\nflannel-backend: \"vxlan\"  # or host-gw, wireguard\nflannel-iface: \"eth0\"\n\n# Disable bundled components\nflannel-backend: \"none\"  # Use Calico/Cilium instead\ndisable:\n  - traefik\n  - servicelb\n  - metrics-server\n  - local-storage\n\n# Node IP configuration  \nnode-ip: \"10.0.0.20\"\nnode-external-ip: \"203.0.113.20\"\nadvertise-address: \"10.0.0.20\"\n```\n\n### Security Hardening\n```yaml\n# CIS Hardening flags\nprotect-kernel-defaults: true\nsecretsencryption: true\naudit-log-path: \"/var/log/k3s-audit.log\"\naudit-log-maxage: 30\naudit-log-maxbackup: 10\naudit-log-maxsize: 100\n\n# Pod Security Standards\nkube-apiserver-arg:\n  - \"enable-admission-plugins=NodeRestriction,PodSecurityPolicy\"\n  - \"audit-policy-file=/etc/k3s/audit-policy.yaml\"\n  - \"tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\"\n\n# Kubelet security\nkubelet-arg:\n  - \"read-only-port=0\"\n  - \"streaming-connection-idle-timeout=5m\"  \n  - \"make-iptables-util-chains=true\"\n```\n\n### Resource Management\n```yaml  \n# System reserved resources\nkubelet-arg:\n  - \"system-reserved=cpu=500m,memory=1Gi\"\n  - \"kube-reserved=cpu=500m,memory=1Gi\"\n  - \"eviction-hard=memory.available<500Mi,nodefs.available<10%\"\n  - \"max-pods=110\"\n\n# Etcd snapshots\netcd-snapshot: true\netcd-snapshot-schedule-cron: \"0 */12 * * *\"\netcd-snapshot-retention: 5\netcd-s3: true\netcd-s3-bucket: \"k3s-backups\"\netcd-s3-region: \"us-east-1\"\n```\n\n### GPU Support\n```bash\n# Install NVIDIA container toolkit first\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\n\n# K3s with GPU\ncat >> /etc/k3s/config.yaml << 'EOF'\nkubelet-arg:\n  - \"feature-gates=DevicePlugins=true\"\ncontainer-runtime-endpoint: \"/run/containerd/containerd.sock\"\nEOF\n\n# Deploy NVIDIA device plugin\nkubectl apply -f https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/v0.14.0/nvidia-device-plugin.yml\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream k3s_backend {\n    server 127.0.0.1:6443;\n}\n\nserver {\n    listen 80;\n    server_name k3s.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name k3s.example.com;\n\n    ssl_certificate /etc/ssl/certs/k3s.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/k3s.example.com.key;\n\n    location / {\n        proxy_pass http://k3s_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName k3s.example.com\n    Redirect permanent / https://k3s.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName k3s.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/k3s.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/k3s.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6443/\n    ProxyPassReverse / http://127.0.0.1:6443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend k3s_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/k3s.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend k3s_backend\n\nbackend k3s_backend\n    balance roundrobin\n    server k3s1 127.0.0.1:6443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R k3s:k3s /etc/k3s\nsudo chmod 750 /etc/k3s\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\n### External Database Configuration\n\n#### PostgreSQL Setup\n```sql\n-- Create database for K3s\nCREATE DATABASE k3s;\nCREATE USER k3s WITH ENCRYPTED PASSWORD 'secure-password';\nGRANT ALL PRIVILEGES ON DATABASE k3s TO k3s;\n\n-- Required for K3s\nALTER DATABASE k3s SET log_statement TO 'all';\n```\n\n```yaml\n# /etc/k3s/config.yaml\ndatastore-endpoint: \"postgres://k3s:secure-password@postgres.example.com:5432/k3s?sslmode=require\"\n```\n\n#### MySQL/MariaDB Setup  \n```sql\nCREATE DATABASE k3s CHARACTER SET utf8 COLLATE utf8_general_ci;\nCREATE USER 'k3s'@'%' IDENTIFIED BY 'secure-password';\nGRANT ALL ON k3s.* TO 'k3s'@'%';\nFLUSH PRIVILEGES;\n```\n\n```yaml\n# /etc/k3s/config.yaml\ndatastore-endpoint: \"mysql://k3s:secure-password@tcp(mysql.example.com:3306)/k3s\"\n```\n\n### Embedded etcd Backup\n```bash\n#!/bin/bash\n# Backup script for embedded etcd\nBACKUP_DIR=\"/var/backups/k3s\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Take snapshot\nk3s etcd-snapshot save \\\n  --name=\"backup-${DATE}\" \\\n  --dir=\"${BACKUP_DIR}\"\n\n# Upload to S3 (optional)\naws s3 cp \"${BACKUP_DIR}/backup-${DATE}\" \\\n  s3://my-bucket/k3s-backups/\n  \n# Clean old backups  \nfind $BACKUP_DIR -name \"*.db\" -mtime +7 -delete\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status k3s\n\n# View logs\nsudo journalctl -u k3s -f\n\n# Monitor resource usage\ntop -p $(pgrep k3s)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/k3s\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/k3s-backup-$DATE.tar.gz\" /etc/k3s /var/lib/k3s\n\necho \"Backup completed: $BACKUP_DIR/k3s-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop k3s\n\n# Restore from backup\ntar -xzf /backup/k3s/k3s-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start k3s\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u k3s -n 100\nsudo tail -f /var/log/k3s/k3s.log\n\n# Check configuration\nk3s --version\n\n# Check permissions\nls -la /etc/k3s\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 6443\n\n# Test connectivity\ntelnet localhost 6443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep k3s)\n\n# Check disk I/O\niotop -p $(pgrep k3s)\n\n# Check connections\nss -an | grep 6443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  k3s:\n    image: k3s:latest\n    ports:\n      - \"6443:6443\"\n    volumes:\n      - ./config:/etc/k3s\n      - ./data:/var/lib/k3s\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update k3s\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade k3s\n\n# Arch Linux\nsudo pacman -Syu k3s\n\n# Alpine Linux\napk update && apk upgrade k3s\n\n# openSUSE\nsudo zypper update k3s\n\n# FreeBSD\npkg update && pkg upgrade k3s\n\n# Always backup before updates\ntar -czf /backup/k3s-pre-update-$(date +%Y%m%d).tar.gz /etc/k3s\n\n# Restart after updates\nsudo systemctl restart k3s\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/k3s\n\n# Clean old logs\nfind /var/log/k3s -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/k3s\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.k3s.org/\n- GitHub Repository: https://github.com/k3s/k3s\n- Community Forum: https://forum.k3s.org/\n- Best Practices Guide: https://docs.k3s.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">k3s is a free and open-source lightweight Kubernetes distribution. K3s provides a production-ready Kubernetes distribution optimized for edge, IoT, and resource-constrained environments, serving as a lightweight alternative to full Kubernetes</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ recommended)</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum (1GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: Cluster networking</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 6443 (default k3s port)</li>\n<li class=\"mobile-list-item\">Port 10250 for kubelet</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">systemd or openrc</li>\n<li class=\"mobile-list-item\">iptables or nftables  </li>\n<li class=\"mobile-list-item\">containerd (bundled) or Docker</li>\n<li class=\"mobile-list-item\">curl or wget for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install k3s\nsudo dnf install -y k3s\n\n# Enable and start service\nsudo systemctl enable --now k3s\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nk3s --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install k3s\nsudo apt install -y k3s\n\n# Enable and start service\nsudo systemctl enable --now k3s\n\n# Configure firewall\nsudo ufw allow 6443\n\n# Verify installation\nk3s --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install k3s\nsudo pacman -S k3s\n\n# Enable and start service\nsudo systemctl enable --now k3s\n\n# Verify installation\nk3s --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install k3s\napk add --no-cache k3s\n\n# Enable and start service\nrc-update add k3s default\nrc-service k3s start\n\n# Verify installation\nk3s --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install k3s\nsudo zypper install -y k3s\n\n# Enable and start service\nsudo systemctl enable --now k3s\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nk3s --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install k3s\n\n# Start service\nbrew services start k3s\n\n# Verify installation\nk3s --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install k3s\n\n# Enable in rc.conf\necho &#039;k3s_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice k3s start\n\n# Verify installation\nk3s --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install k3s\n\n# Or using Scoop\nscoop install k3s\n\n# Verify installation\nk3s --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/k3s\n\n# Set up basic configuration\ncat &gt; /etc/k3s/config.yaml &lt;&lt; &#039;EOF&#039;\n# K3s server configuration\nwrite-kubeconfig-mode: &quot;0644&quot;\ntls-san:\n  - &quot;k3s.example.com&quot;\n  - &quot;10.0.0.10&quot;\ncluster-cidr: &quot;10.42.0.0/16&quot;\nservice-cidr: &quot;10.43.0.0/16&quot;\ncluster-dns: &quot;10.43.0.10&quot;\ncluster-domain: &quot;cluster.local&quot;\nlog: &quot;/var/log/k3s.log&quot;\nEOF\n\n# Test configuration\nk3s --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable k3s\n\n# Start service\nsudo systemctl start k3s\n\n# Stop service\nsudo systemctl stop k3s\n\n# Restart service\nsudo systemctl restart k3s\n\n# Check status\nsudo systemctl status k3s\n\n# View logs\nsudo journalctl -u k3s -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add k3s default\n\n# Start service\nrc-service k3s start\n\n# Stop service\nrc-service k3s stop\n\n# Restart service\nrc-service k3s restart\n\n# Check status\nrc-service k3s status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;k3s_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice k3s start\n\n# Stop service\nservice k3s stop\n\n# Restart service\nservice k3s restart\n\n# Check status\nservice k3s status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start k3s\nbrew services stop k3s\nbrew services restart k3s\n\n# Check status\nbrew services list | grep k3s</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start k3s\n\n# Stop service\nnet stop k3s\n\n# Using PowerShell\nStart-Service k3s\nStop-Service k3s\nRestart-Service k3s\n\n# Check status\nGet-Service k3s</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/k3s/config.yaml for HA masters\ncluster-init: true  # First master only\nserver: https://10.0.0.10:6443  # Other masters join here\ntoken: &quot;your-secret-token&quot;\n\n# Embedded etcd configuration\ndatastore-endpoint: &quot;etcd&quot;\ndatastore-cafile: &quot;/etc/k3s/etcd/ca.crt&quot;\ndatastore-certfile: &quot;/etc/k3s/etcd/server.crt&quot; \ndatastore-keyfile: &quot;/etc/k3s/etcd/server.key&quot;\n\n# External datastore (PostgreSQL/MySQL)\ndatastore-endpoint: &quot;postgres://username:password@hostname:5432/k3s&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-configuration\" class=\"mobile-header\">Network Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Custom CNI configuration\nflannel-backend: &quot;vxlan&quot;  # or host-gw, wireguard\nflannel-iface: &quot;eth0&quot;\n\n# Disable bundled components\nflannel-backend: &quot;none&quot;  # Use Calico/Cilium instead\ndisable:\n  - traefik\n  - servicelb\n  - metrics-server\n  - local-storage\n\n# Node IP configuration  \nnode-ip: &quot;10.0.0.20&quot;\nnode-external-ip: &quot;203.0.113.20&quot;\nadvertise-address: &quot;10.0.0.20&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># CIS Hardening flags\nprotect-kernel-defaults: true\nsecretsencryption: true\naudit-log-path: &quot;/var/log/k3s-audit.log&quot;\naudit-log-maxage: 30\naudit-log-maxbackup: 10\naudit-log-maxsize: 100\n\n# Pod Security Standards\nkube-apiserver-arg:\n  - &quot;enable-admission-plugins=NodeRestriction,PodSecurityPolicy&quot;\n  - &quot;audit-policy-file=/etc/k3s/audit-policy.yaml&quot;\n  - &quot;tls-cipher-suites=TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&quot;\n\n# Kubelet security\nkubelet-arg:\n  - &quot;read-only-port=0&quot;\n  - &quot;streaming-connection-idle-timeout=5m&quot;  \n  - &quot;make-iptables-util-chains=true&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-management\" class=\"mobile-header\">Resource Management</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># System reserved resources\nkubelet-arg:\n  - &quot;system-reserved=cpu=500m,memory=1Gi&quot;\n  - &quot;kube-reserved=cpu=500m,memory=1Gi&quot;\n  - &quot;eviction-hard=memory.available&lt;500Mi,nodefs.available&lt;10%&quot;\n  - &quot;max-pods=110&quot;\n\n# Etcd snapshots\netcd-snapshot: true\netcd-snapshot-schedule-cron: &quot;0 */12 * * *&quot;\netcd-snapshot-retention: 5\netcd-s3: true\netcd-s3-bucket: &quot;k3s-backups&quot;\netcd-s3-region: &quot;us-east-1&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"gpu-support\" class=\"mobile-header\">GPU Support</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NVIDIA container toolkit first\ncurl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -\n\n# K3s with GPU\ncat &gt;&gt; /etc/k3s/config.yaml &lt;&lt; &#039;EOF&#039;\nkubelet-arg:\n  - &quot;feature-gates=DevicePlugins=true&quot;\ncontainer-runtime-endpoint: &quot;/run/containerd/containerd.sock&quot;\nEOF\n\n# Deploy NVIDIA device plugin\nkubectl apply -f https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/v0.14.0/nvidia-device-plugin.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream k3s_backend {\n    server 127.0.0.1:6443;\n}\n\nserver {\n    listen 80;\n    server_name k3s.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name k3s.example.com;\n\n    ssl_certificate /etc/ssl/certs/k3s.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/k3s.example.com.key;\n\n    location / {\n        proxy_pass http://k3s_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName k3s.example.com\n    Redirect permanent / https://k3s.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName k3s.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/k3s.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/k3s.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6443/\n    ProxyPassReverse / http://127.0.0.1:6443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend k3s_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/k3s.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend k3s_backend\n\nbackend k3s_backend\n    balance roundrobin\n    server k3s1 127.0.0.1:6443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R k3s:k3s /etc/k3s\nsudo chmod 750 /etc/k3s\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"external-database-configuration\" class=\"mobile-header\">External Database Configuration</h3>\n<p class=\"mobile-paragraph\">#### PostgreSQL Setup</p>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Create database for K3s\nCREATE DATABASE k3s;\nCREATE USER k3s WITH ENCRYPTED PASSWORD &#039;secure-password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE k3s TO k3s;\n\n-- Required for K3s\nALTER DATABASE k3s SET log_statement TO &#039;all&#039;;</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/k3s/config.yaml\ndatastore-endpoint: &quot;postgres://k3s:secure-password@postgres.example.com:5432/k3s?sslmode=require&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### MySQL/MariaDB Setup  </p>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">CREATE DATABASE k3s CHARACTER SET utf8 COLLATE utf8_general_ci;\nCREATE USER &#039;k3s&#039;@&#039;%&#039; IDENTIFIED BY &#039;secure-password&#039;;\nGRANT ALL ON k3s.* TO &#039;k3s&#039;@&#039;%&#039;;\nFLUSH PRIVILEGES;</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/k3s/config.yaml\ndatastore-endpoint: &quot;mysql://k3s:secure-password@tcp(mysql.example.com:3306)/k3s&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"embedded-etcd-backup\" class=\"mobile-header\">Embedded etcd Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Backup script for embedded etcd\nBACKUP_DIR=&quot;/var/backups/k3s&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Take snapshot\nk3s etcd-snapshot save \\\n  --name=&quot;backup-${DATE}&quot; \\\n  --dir=&quot;${BACKUP_DIR}&quot;\n\n# Upload to S3 (optional)\naws s3 cp &quot;${BACKUP_DIR}/backup-${DATE}&quot; \\\n  s3://my-bucket/k3s-backups/\n  \n# Clean old backups  \nfind $BACKUP_DIR -name &quot;*.db&quot; -mtime +7 -delete</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status k3s\n\n# View logs\nsudo journalctl -u k3s -f\n\n# Monitor resource usage\ntop -p $(pgrep k3s)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/k3s&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/k3s-backup-$DATE.tar.gz&quot; /etc/k3s /var/lib/k3s\n\necho &quot;Backup completed: $BACKUP_DIR/k3s-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop k3s\n\n# Restore from backup\ntar -xzf /backup/k3s/k3s-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start k3s</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u k3s -n 100\nsudo tail -f /var/log/k3s/k3s.log\n\n# Check configuration\nk3s --version\n\n# Check permissions\nls -la /etc/k3s</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 6443\n\n# Test connectivity\ntelnet localhost 6443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep k3s)\n\n# Check disk I/O\niotop -p $(pgrep k3s)\n\n# Check connections\nss -an | grep 6443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  k3s:\n    image: k3s:latest\n    ports:\n      - &quot;6443:6443&quot;\n    volumes:\n      - ./config:/etc/k3s\n      - ./data:/var/lib/k3s\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update k3s\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade k3s\n\n# Arch Linux\nsudo pacman -Syu k3s\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade k3s\n\n# openSUSE\nsudo zypper update k3s\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade k3s\n\n# Always backup before updates\ntar -czf /backup/k3s-pre-update-$(date +%Y%m%d).tar.gz /etc/k3s\n\n# Restart after updates\nsudo systemctl restart k3s</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/k3s\n\n# Clean old logs\nfind /var/log/k3s -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/k3s</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.k3s.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/k3s/k3s</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.k3s.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.k3s.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"9 min","wordCount":1651,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"High Availability Setup","id":"high-availability-setup"},{"level":3,"text":"Network Configuration","id":"network-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":3,"text":"Resource Management","id":"resource-management"},{"level":3,"text":"GPU Support","id":"gpu-support"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"External Database Configuration","id":"external-database-configuration"},{"level":3,"text":"Embedded etcd Backup","id":"embedded-etcd-backup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-16T18:19:16.277Z","metadataVersion":"2.0"},{"name":"kubernetes","displayName":"Kubernetes Installation Guide","slug":"kubernetes","description":"Kubernetes is a free and open-source container orchestration platform for automating deployment, scaling, and management of containerized applications. Originally developed by Google and now maintained by the Cloud Native Computing Foundation (CNCF), Kubernetes serves as the industry standard for container orchestration. It provides enterprise-grade security, scalability, and reliability for cloud-native applications, offering a robust alternative to proprietary solutions like AWS ECS, Azure Container Instances, or Google Cloud Run without vendor lock-in.","category":"orchestration","subcategory":"orchestration","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[0,1,2,3,8,1234,2379,2380,6443,8001,10250,10257,10259,30000,32767],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["orchestration","containerization","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/orchestration/kubernetes","documentationUrl":"https://howtomgr.github.io/orchestration/kubernetes","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/kubernetes","updatedAt":"2025-09-16T17:25:50Z","createdAt":"2025-09-08T03:10:10Z","readmeRaw":"# Kubernetes Installation Guide\n\nKubernetes is a free and open-source container orchestration platform for automating deployment, scaling, and management of containerized applications. Originally developed by Google and now maintained by the Cloud Native Computing Foundation (CNCF), Kubernetes serves as the industry standard for container orchestration. It provides enterprise-grade security, scalability, and reliability for cloud-native applications, offering a robust alternative to proprietary solutions like AWS ECS, Azure Container Instances, or Google Cloud Run without vendor lock-in.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores for control plane, 1+ core for worker nodes\n  - RAM: 2GB+ per control plane node, 1GB+ per worker node\n  - Storage: 20GB+ available disk space per node (SSD recommended)\n  - Network: Stable connectivity between all nodes (1Gbps+ recommended)\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.10+ (4.x+ recommended)\n  - Container runtime support (containerd, Docker, CRI-O)\n  - macOS: Docker Desktop with Kubernetes enabled (development only)\n  - Windows: Docker Desktop with Kubernetes enabled (development only)\n- **Network Requirements**:\n  - Unique hostname, MAC address, and product_uuid for every node\n  - Port 6443 (Kubernetes API server)\n  - Port 2379-2380 (etcd server client API)\n  - Port 10250 (kubelet API)\n  - Port 10259 (kube-scheduler)\n  - Port 10257 (kube-controller-manager)\n  - Port 30000-32767 (NodePort Services)\n- **Dependencies**:\n  - Container runtime (containerd recommended)\n  - systemd or compatible init system\n  - iptables (for network rules)\n  - ebtables and ethtool (for networking)\n- **System Access**: root or sudo privileges required\n- **Special Requirements**:\n  - Swap must be disabled on all nodes\n  - SELinux in permissive mode (for RHEL/CentOS)\n  - Firewall configured to allow cluster communication\n\n## System Preparation (All Distributions)\n\n### Disable Swap (Required)\n```bash\n# Disable swap immediately\nsudo swapoff -a\n\n# Disable swap permanently\nsudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n\n# Verify swap is disabled\nfree -h\nswapon --show\n```\n\n### Configure Kernel Modules\n```bash\n# Load required kernel modules\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# Configure sysctl parameters\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\nsudo sysctl --system\n```\n\n## Container Runtime Installation\n\n### containerd (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt-get update\n\n# Install dependencies\nsudo apt-get install -y ca-certificates curl gnupg lsb-release\n\n# Add Docker repository for containerd\nsudo mkdir -m 0755 -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install containerd\nsudo apt-get update\nsudo apt-get install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install prerequisites\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install containerd\nsudo yum install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n```\n\n#### Fedora\n```bash\n# Install containerd\nsudo dnf install -y containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n```\n\n#### Arch Linux\n```bash\n# Install containerd\nsudo pacman -Syu containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Enable and start containerd\nsudo systemctl enable --now containerd\n```\n\n## Kubernetes Installation\n\n### kubeadm, kubelet, kubectl Installation\n\n#### Ubuntu/Debian\n```bash\n# Update package index and install packages needed for apt to use HTTPS\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\n\n# Download and add the Kubernetes signing key\ncurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n# Add Kubernetes repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n# Update package index and install Kubernetes components\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\n\n# Hold packages to prevent automatic updates\nsudo apt-mark hold kubelet kubeadm kubectl\n\n# Enable kubelet\nsudo systemctl enable --now kubelet\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux/Fedora\n```bash\n# Create Kubernetes repository\ncat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/\nenabled=1\ngpgcheck=1\ngpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\nexclude=kubelet kubeadm kubectl cri-tools kubernetes-cni\nEOF\n\n# Set SELinux to permissive mode (required for cluster communication)\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\n# Install Kubernetes components\nsudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n\n# Enable kubelet\nsudo systemctl enable --now kubelet\n```\n\n#### Arch Linux\n```bash\n# Install from AUR (using yay)\nyay -S kubeadm-bin kubelet-bin kubectl-bin\n\n# Or build from source\ngit clone https://aur.archlinux.org/kubectl-bin.git\ncd kubectl-bin && makepkg -si\n\n# Enable kubelet\nsudo systemctl enable --now kubelet\n```\n\n#### openSUSE/SLES\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper refresh\n\n# Add Kubernetes repository\nsudo rpm --import https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\necho 'baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/' | sudo tee /etc/zypp/repos.d/kubernetes.repo\n\n# Install Kubernetes components\nsudo zypper install -y kubelet kubeadm kubectl\n\n# SLES 15 (requires additional modules)\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y kubelet kubeadm kubectl\n\n# Enable kubelet\nsudo systemctl enable --now kubelet\n```\n\n#### Alpine Linux\n```bash\n# Install containerd first\napk add --no-cache containerd\n\n# Add community repository for Kubernetes\necho \"http://dl-cdn.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories\napk update\n\n# Install Kubernetes components (if available)\napk add --no-cache kubectl\n\n# Or install from binary\nKUBE_VERSION=\"v1.29.0\"\ncurl -LO \"https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubectl\"\ncurl -LO \"https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubeadm\"\ncurl -LO \"https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubelet\"\n\nchmod +x kubectl kubeadm kubelet\nsudo mv kubectl kubeadm kubelet /usr/local/bin/\n\n# Configure OpenRC service\nsudo tee /etc/init.d/kubelet > /dev/null <<'EOF'\n#!/sbin/openrc-run\nname=\"kubelet\"\ncommand=\"/usr/local/bin/kubelet\"\ncommand_args=\"--config=/var/lib/kubelet/config.yaml --kubeconfig=/etc/kubernetes/kubelet.conf\"\npidfile=\"/var/run/kubelet.pid\"\ncommand_background=\"yes\"\ndepend() {\n    need net\n    after containerd\n}\nEOF\n\nsudo chmod +x /etc/init.d/kubelet\nsudo rc-update add kubelet default\n```\n\n#### macOS (Development Only)\n```bash\n# Install Docker Desktop\n# Download from: https://www.docker.com/products/docker-desktop\n\n# Enable Kubernetes in Docker Desktop\n# Docker Desktop â†’ Preferences â†’ Kubernetes â†’ Enable Kubernetes\n\n# Install kubectl via Homebrew\nbrew install kubectl\n\n# Alternative: Install kubectl directly\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl\"\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin/\n\n# Verify installation\nkubectl version --client\nkubectl cluster-info\n\n# Configure kubectl context\nkubectl config use-context docker-desktop\n```\n\n#### FreeBSD\n```bash\n# Install from ports\ncd /usr/ports/sysutils/kubectl && make install clean\n\n# Or install from packages\npkg install kubectl\n\n# Note: Full Kubernetes cluster on FreeBSD requires manual compilation\n# For development, use kubectl to connect to remote clusters\n\n# Install container runtime (if needed)\npkg install containerd\n\n# Configure kubectl for remote cluster access\nmkdir -p ~/.kube\n# Copy kubeconfig from Linux cluster to ~/.kube/config\n```\n\n#### Windows (Development Only)\n```powershell\n# Method 1: Install Docker Desktop\n# Download from: https://www.docker.com/products/docker-desktop\n# Enable Kubernetes in Docker Desktop settings\n\n# Method 2: Install using Chocolatey\nchoco install kubernetes-cli\n\n# Method 3: Install using Scoop\nscoop install kubectl\n\n# Method 4: Manual installation\n# Download from https://dl.k8s.io/release/v1.29.0/bin/windows/amd64/kubectl.exe\n# Add to PATH environment variable\n\n# Enable Kubernetes in Docker Desktop\n# Docker Desktop â†’ Settings â†’ Kubernetes â†’ Enable Kubernetes\n\n# Verify installation\nkubectl version --client\nkubectl cluster-info\n\n# Configure PowerShell completion (optional)\nkubectl completion powershell | Out-String | Invoke-Expression\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Verify system requirements**:\n```bash\n# Check if swap is disabled\nfree -h\nswapon --show\n\n# Verify required ports are available\nsudo ss -tlnp | grep -E ':(6443|2379|2380|10250|10259|10257)'\n\n# Check container runtime\nsudo systemctl status containerd\n```\n\n2. **Configure container runtime**:\n```bash\n# Default containerd configuration directory\nsudo mkdir -p /etc/containerd\n\n# Generate default configuration\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup for better resource management\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Restart containerd with new configuration\nsudo systemctl restart containerd\n```\n\n3. **Initialize cluster networking**:\n```bash\n# Load required kernel modules\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# Configure sysctl for networking\necho 'net.bridge.bridge-nf-call-iptables=1' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.ip_forward=1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n4. **Set up kubelet configuration**:\n```bash\n# Create kubelet configuration directory\nsudo mkdir -p /var/lib/kubelet\n\n# Set kubelet to automatically restart\nsudo systemctl enable kubelet\n```\n\n### Testing Initial Setup\n\n```bash\n# Verify container runtime is working\nsudo crictl version\nsudo crictl info\n\n# Check if kubelet is ready\nsudo systemctl status kubelet\n\n# Verify kernel modules are loaded\nlsmod | grep -E 'overlay|br_netfilter'\n\n# Test container runtime with a simple container\nsudo crictl pull k8s.gcr.io/pause:3.9\nsudo crictl images\n```\n\n**WARNING:** Ensure all prerequisite steps are completed before proceeding to cluster initialization!\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Kubernetes services to start on boot\nsudo systemctl enable kubelet\nsudo systemctl enable containerd\n\n# Start services\nsudo systemctl start containerd\nsudo systemctl start kubelet\n\n# Stop services\nsudo systemctl stop kubelet\nsudo systemctl stop containerd\n\n# Restart services\nsudo systemctl restart containerd\nsudo systemctl restart kubelet\n\n# Check service status\nsudo systemctl status kubelet\nsudo systemctl status containerd\n\n# View service logs\nsudo journalctl -u kubelet -f\nsudo journalctl -u containerd -f\n\n# Reload systemd daemon after config changes\nsudo systemctl daemon-reload\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable services to start on boot\nsudo rc-update add containerd default\nsudo rc-update add kubelet default\n\n# Start services\nsudo rc-service containerd start\nsudo rc-service kubelet start\n\n# Stop services\nsudo rc-service kubelet stop\nsudo rc-service containerd stop\n\n# Restart services\nsudo rc-service containerd restart\nsudo rc-service kubelet restart\n\n# Check service status\nsudo rc-service kubelet status\nsudo rc-service containerd status\n\n# View logs\nsudo tail -f /var/log/kubelet.log\n```\n\n### launchd (macOS with Docker Desktop)\n\n```bash\n# Docker Desktop manages Kubernetes services automatically\n# Use Docker Desktop interface to start/stop Kubernetes\n\n# Check Kubernetes status\nkubectl cluster-info\n\n# Restart Kubernetes through Docker Desktop\n# Docker Desktop â†’ Preferences â†’ Kubernetes â†’ Reset Kubernetes Cluster\n\n# View logs through Docker Desktop\n# Docker Desktop â†’ Troubleshoot â†’ Clean / Purge data\n```\n\n### Windows Service Manager\n\n```powershell\n# Docker Desktop manages Kubernetes services on Windows\n# Use Docker Desktop interface for management\n\n# Check Kubernetes status\nkubectl cluster-info\n\n# Restart Docker Desktop service\nRestart-Service com.docker.service\n\n# View Docker Desktop logs\nGet-EventLog -LogName Application -Source \"Docker Desktop\"\n```\n\n## Cluster Initialization\n\n### Control Plane Setup (Master Node)\n```bash\n# Initialize cluster with security best practices\nsudo kubeadm init \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --service-cidr=10.96.0.0/12 \\\n  --apiserver-advertise-address=$(hostname -I | awk '{print $1}') \\\n  --node-name=$(hostname) \\\n  --ignore-preflight-errors=NumCPU\n\n# Configure kubectl for regular user\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# Alternative: Root user configuration\nexport KUBECONFIG=/etc/kubernetes/admin.conf\necho 'export KUBECONFIG=/etc/kubernetes/admin.conf' >> ~/.bashrc\n\n# Verify control plane is running\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods --all-namespaces\n```\n\n### Network Plugin Installation\n\n#### Flannel (Simple, recommended for beginners)\n```bash\n# Install Flannel CNI\nkubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n\n# Verify Flannel pods are running\nkubectl get pods -n kube-flannel\n```\n\n#### Calico (Advanced networking and network policies)\n```bash\n# Install Calico CNI\nkubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml\n\n# Download and apply Calico custom resources\ncurl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O\nkubectl create -f custom-resources.yaml\n\n# Verify Calico is running\nkubectl get pods -n calico-system\n```\n\n#### Cilium (eBPF-based networking)\n```bash\n# Install Cilium CLI\nCILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)\nCLI_ARCH=amd64\nif [ \"$(uname -m)\" = \"aarch64\" ]; then CLI_ARCH=arm64; fi\ncurl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\nsha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum\nsudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin\nrm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\n\n# Install Cilium\ncilium install\n\n# Verify installation\ncilium status --wait\n```\n\n### Worker Node Setup\n```bash\n# On worker nodes, use the join command from control plane initialization\n# Example (replace with your actual token and hash):\nsudo kubeadm join 192.168.1.100:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234567890abcdef...\n\n# If you need to get the join command again:\n# On control plane:\nkubeadm token create --print-join-command\n\n# Verify nodes joined successfully\nkubectl get nodes -o wide\n```\n\n## Security Hardening (2024 Best Practices)\n\n### RBAC Configuration\n```bash\n# Create service account with limited permissions\nkubectl create serviceaccount developer-sa -n default\n\n# Create role with specific permissions\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: developer-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\", \"configmaps\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"\"]\n  resources: [\"pods/log\"]\n  verbs: [\"get\", \"list\"]\nEOF\n\n# Create role binding\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: developer-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: developer-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: developer-role\n  apiGroup: rbac.authorization.k8s.io\nEOF\n\n# Test RBAC configuration\nkubectl auth can-i create deployments --as=system:serviceaccount:default:developer-sa\n```\n\n### Pod Security Standards\n```bash\n# Enable Pod Security Standards (baseline level)\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: secure-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: baseline\n    pod-security.kubernetes.io/audit: baseline\n    pod-security.kubernetes.io/warn: baseline\nEOF\n\n# For restricted security (recommended for production)\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: restricted-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\nEOF\n\n# Example secure pod configuration\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secure-pod\n  namespace: restricted-namespace\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    runAsGroup: 3000\n    fsGroup: 2000\n    seccompProfile:\n      type: RuntimeDefault\n  containers:\n  - name: app\n    image: nginx:latest\n    securityContext:\n      allowPrivilegeEscalation: false\n      readOnlyRootFilesystem: true\n      capabilities:\n        drop:\n        - ALL\n    ports:\n    - containerPort: 80\n    volumeMounts:\n    - name: tmp-volume\n      mountPath: /tmp\n    - name: cache-volume\n      mountPath: /var/cache/nginx\n  volumes:\n  - name: tmp-volume\n    emptyDir: {}\n  - name: cache-volume\n    emptyDir: {}\nEOF\n```\n\n### Network Policies\n```bash\n# Default deny all network policy\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\nEOF\n\n# Allow specific communication\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-nginx-ingress\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: nginx\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    ports:\n    - protocol: TCP\n      port: 80\nEOF\n\n# Allow egress for DNS\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-dns-egress\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  - to: []\n    ports:\n    - protocol: UDP\n      port: 53\nEOF\n```\n\n### etcd Security\n```bash\n# Check etcd encryption at rest\nkubectl get secrets --all-namespaces -o json | kubectl replace -f-\n\n# Create encryption configuration\ncat <<EOF | sudo tee /etc/kubernetes/enc.yaml\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  - configmaps\n  - pandas.awesome.bears.example\n  providers:\n  - aescbc:\n      keys:\n      - name: key1\n        secret: $(head -c 32 /dev/urandom | base64)\n  - identity: {}\nEOF\n\n# Update kube-apiserver configuration\nsudo sed -i '/--encryption-provider-config=/d' /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i '/- kube-apiserver/a\\    - --encryption-provider-config=/etc/kubernetes/enc.yaml' /etc/kubernetes/manifests/kube-apiserver.yaml\n\n# Mount encryption config in kube-apiserver\nsudo sed -i '/volumeMounts:/a\\    - mountPath: /etc/kubernetes/enc.yaml\\n      name: encryption-config\\n      readOnly: true' /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i '/volumes:/a\\  - hostPath:\\n      path: /etc/kubernetes/enc.yaml\\n      type: FileOrCreate\\n    name: encryption-config' /etc/kubernetes/manifests/kube-apiserver.yaml\n```\n\n## Alternative Installation Methods\n\n### k3s (Lightweight Kubernetes)\n```bash\n# Install k3s on control plane\ncurl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644\n\n# Get node token for workers\nsudo cat /var/lib/rancher/k3s/server/node-token\n\n# Install on worker nodes\ncurl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\nsudo chown $(id -u):$(id -g) ~/.kube/config\nexport KUBECONFIG=~/.kube/config\n\n# Verify cluster\nkubectl get nodes\n```\n\n### k0s (Zero-deps Kubernetes)\n```bash\n# Download k0s\ncurl -sSLf https://get.k0s.sh | sudo sh\n\n# Initialize controller\nsudo k0s install controller --single\n\n# Start k0s\nsudo systemctl start k0scontroller\n\n# Generate worker join token\nsudo k0s token create --role=worker\n\n# On worker nodes:\nsudo k0s install worker --token-file /path/to/token/file\nsudo systemctl start k0sworker\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo k0s kubeconfig admin > ~/.kube/config\n```\n\n### MicroK8s (Ubuntu/Snap)\n```bash\n# Install MicroK8s\nsudo snap install microk8s --classic\n\n# Add user to microk8s group\nsudo usermod -a -G microk8s $USER\nsudo chown -f -R $USER ~/.kube\nnewgrp microk8s\n\n# Enable essential addons\nmicrok8s enable dns dashboard storage\n\n# Configure kubectl alias\necho 'alias kubectl=\"microk8s kubectl\"' >> ~/.bashrc\nsource ~/.bashrc\n\n# Get cluster info\nmicrok8s kubectl cluster-info\n```\n\n### Minikube (Development)\n```bash\n# Install minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Start cluster with specific configuration\nminikube start \\\n  --driver=containerd \\\n  --cpus=4 \\\n  --memory=8g \\\n  --disk-size=50g \\\n  --kubernetes-version=v1.29.0\n\n# Enable addons\nminikube addons enable dashboard\nminikube addons enable metrics-server\nminikube addons enable ingress\nminikube addons enable registry\n\n# Configure kubectl context\nkubectl config use-context minikube\n\n# Access dashboard\nminikube dashboard\n```\n\n## Essential Add-ons Installation\n\n### Metrics Server\n```bash\n# Install metrics-server for resource monitoring\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\n# For development clusters, may need to add --kubelet-insecure-tls\nkubectl patch deployment metrics-server -n kube-system --type='json' -p='[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/args/-\", \"value\": \"--kubelet-insecure-tls\"}]'\n\n# Verify metrics server\nkubectl top nodes\nkubectl top pods --all-namespaces\n```\n\n### Kubernetes Dashboard\n```bash\n# Install dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n# Create admin service account\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\nEOF\n\n# Get access token\nkubectl -n kubernetes-dashboard create token admin-user\n\n# Access dashboard\nkubectl proxy &\n# Visit: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\n```\n\n### Ingress Controller (NGINX)\n```bash\n# Install NGINX Ingress Controller\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml\n\n# For bare metal installations\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/baremetal/deploy.yaml\n\n# Verify installation\nkubectl get pods -n ingress-nginx\nkubectl get svc -n ingress-nginx\n\n# Create sample ingress\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - example.com\n    secretName: example-tls\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: web-service\n            port:\n              number: 80\nEOF\n```\n\n## Reverse Proxy Setup\n\n### NGINX Ingress Controller Configuration\n\n```bash\n# Install NGINX Ingress Controller with custom configuration\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ingress-nginx\n---\napiVersion: helm.cattle.io/v1\nkind: HelmChart\nmetadata:\n  name: ingress-nginx\n  namespace: ingress-nginx\nspec:\n  chart: ingress-nginx\n  repo: https://kubernetes.github.io/ingress-nginx\n  targetNamespace: ingress-nginx\n  valuesContent: |-\n    controller:\n      replicaCount: 2\n      service:\n        type: LoadBalancer\n        externalTrafficPolicy: Local\n      config:\n        ssl-redirect: \"true\"\n        force-ssl-redirect: \"true\"\n        ssl-protocols: \"TLSv1.2 TLSv1.3\"\n        ssl-ciphers: \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\"\n        client-body-buffer-size: \"64k\"\n        client-body-timeout: \"60\"\n        client-header-timeout: \"60\"\n        large-client-header-buffers: \"4 64k\"\n        proxy-body-size: \"50m\"\n        server-name-hash-bucket-size: \"128\"\n      metrics:\n        enabled: true\n        serviceMonitor:\n          enabled: true\nEOF\n```\n\n### Traefik Ingress Controller\n\n```bash\n# Install Traefik with custom configuration\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: traefik-system\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: traefik\n  namespace: argocd\nspec:\n  project: default\n  source:\n    chart: traefik\n    repoURL: https://traefik.github.io/charts\n    targetRevision: 21.1.0\n    helm:\n      values: |\n        deployment:\n          replicas: 2\n        service:\n          type: LoadBalancer\n        ingressRoute:\n          dashboard:\n            enabled: true\n        logs:\n          general:\n            level: INFO\n          access:\n            enabled: true\n        metrics:\n          prometheus:\n            enabled: true\n        certificatesResolvers:\n          letsencrypt:\n            acme:\n              email: admin@example.com\n              storage: /data/acme.json\n              httpChallenge:\n                entryPoint: web\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: traefik-system\nEOF\n```\n\n### HAProxy Load Balancer for API Server\n\n```bash\n# Install HAProxy for external load balancing\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: haproxy-config\n  namespace: kube-system\ndata:\n  haproxy.cfg: |\n    global\n        log stdout local0\n        daemon\n        \n    defaults\n        mode tcp\n        log global\n        option tcplog\n        timeout connect 5000ms\n        timeout client 50000ms\n        timeout server 50000ms\n        \n    frontend k8s-api-frontend\n        bind *:6443\n        mode tcp\n        default_backend k8s-api-backend\n        \n    backend k8s-api-backend\n        mode tcp\n        balance roundrobin\n        option tcp-check\n        server master1 10.0.1.10:6443 check\n        server master2 10.0.1.11:6443 check\n        server master3 10.0.1.12:6443 check\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: haproxy-lb\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app: haproxy-lb\n  template:\n    metadata:\n      labels:\n        app: haproxy-lb\n    spec:\n      hostNetwork: true\n      containers:\n      - name: haproxy\n        image: haproxy:2.8-alpine\n        ports:\n        - containerPort: 6443\n          hostPort: 6443\n        volumeMounts:\n        - name: haproxy-config\n          mountPath: /usr/local/etc/haproxy\n      volumes:\n      - name: haproxy-config\n        configMap:\n          name: haproxy-config\nEOF\n```\n\n## Database Setup\n\n### PostgreSQL StatefulSet with HA\n\n```bash\n# Deploy PostgreSQL cluster with replication\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: postgresql\n---\napiVersion: postgresql.cnpg.io/v1\nkind: Cluster\nmetadata:\n  name: postgresql-cluster\n  namespace: postgresql\nspec:\n  instances: 3\n  primaryUpdateStrategy: unsupervised\n  \n  postgresql:\n    parameters:\n      max_connections: \"200\"\n      shared_buffers: \"256MB\"\n      effective_cache_size: \"1GB\"\n      maintenance_work_mem: \"64MB\"\n      checkpoint_completion_target: \"0.9\"\n      wal_buffers: \"16MB\"\n      default_statistics_target: \"100\"\n      random_page_cost: \"1.1\"\n      effective_io_concurrency: \"200\"\n      \n  bootstrap:\n    initdb:\n      database: app_database\n      owner: app_user\n      secret:\n        name: postgresql-credentials\n        \n  storage:\n    storageClass: \"fast-ssd\"\n    size: \"100Gi\"\n    \n  monitoring:\n    enabled: true\n    \n  backup:\n    retentionPolicy: \"30d\"\n    barmanObjectStore:\n      destinationPath: s3://postgresql-backups/cluster1\n      s3Credentials:\n        accessKeyId:\n          name: backup-credentials\n          key: ACCESS_KEY_ID\n        secretAccessKey:\n          name: backup-credentials\n          key: SECRET_ACCESS_KEY\n      wal:\n        retention: \"5d\"\n      data:\n        retention: \"30d\"\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: postgresql-credentials\n  namespace: postgresql\ntype: kubernetes.io/basic-auth\ndata:\n  username: $(echo -n 'app_user' | base64)\n  password: $(echo -n 'secure_database_password_123!' | base64)\nEOF\n```\n\n### MySQL Cluster with Percona Operator\n\n```bash\n# Deploy MySQL cluster using Percona Operator\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: mysql\n---\napiVersion: pxc.percona.com/v1-12-0\nkind: PerconaXtraDBCluster\nmetadata:\n  name: mysql-cluster\n  namespace: mysql\nspec:\n  crVersion: 1.12.0\n  allowUnsafeConfigurations: false\n  secretsName: mysql-secrets\n  vaultSecretName: \"\"\n  sslSecretName: \"\"\n  sslInternalSecretName: \"\"\n  logCollectorSecretName: \"\"\n  \n  pxc:\n    size: 3\n    image: percona/percona-xtradb-cluster:8.0.32-24.2\n    autoRecovery: true\n    configuration: |\n      [mysqld]\n      wsrep_provider_options=\"debug=1;gcache.size=1G;gcache.page_size=1G\"\n      wsrep_debug=1\n      wsrep_cluster_address=gcomm://\n      binlog_format=ROW\n      default_storage_engine=InnoDB\n      innodb_autoinc_lock_mode=2\n      innodb_locks_unsafe_for_binlog=1\n      max_connections=350\n      innodb_buffer_pool_size=512M\n      \n    resources:\n      requests:\n        memory: 1G\n        cpu: 600m\n      limits:\n        memory: 1G\n        cpu: \"1\"\n        \n    volumeSpec:\n      persistentVolumeClaim:\n        storageClassName: fast-ssd\n        accessModes: [ \"ReadWriteOnce\" ]\n        resources:\n          requests:\n            storage: 80Gi\n            \n    affinity:\n      antiAffinityTopologyKey: \"kubernetes.io/hostname\"\n      \n  haproxy:\n    enabled: true\n    size: 2\n    image: percona/percona-xtradb-cluster-operator:1.12.0-haproxy\n    \n    resources:\n      requests:\n        memory: 256M\n        cpu: 250m\n      limits:\n        memory: 256M\n        cpu: 500m\n        \n  proxysql:\n    enabled: false\n    \n  backup:\n    image: percona/percona-xtradb-cluster-operator:1.12.0-pxc8.0-backup\n    schedule:\n      - name: \"daily-backup\"\n        schedule: \"0 2 * * *\"\n        keep: 7\n        storageName: s3-backup-storage\n        \n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secrets\n  namespace: mysql\ntype: Opaque\ndata:\n  root: $(echo -n 'secure_mysql_root_password!' | base64)\n  xtrabackup: $(echo -n 'backup_password_123!' | base64)\n  monitor: $(echo -n 'monitor_user_password!' | base64)\n  clustercheck: $(echo -n 'cluster_check_password!' | base64)\n  proxysql: $(echo -n 'proxysql_admin_password!' | base64)\n  operator: $(echo -n 'operator_user_password!' | base64)\nEOF\n```\n\n### Redis Cluster Deployment\n\n```bash\n# Deploy Redis cluster with Redis Operator\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: redis\n---\napiVersion: redis.redis.opstreelabs.in/v1beta1\nkind: RedisCluster\nmetadata:\n  name: redis-cluster\n  namespace: redis\nspec:\n  clusterSize: 6\n  clusterVersion: v7\n  persistenceEnabled: true\n  redisSecret:\n    name: redis-secret\n    key: password\n  redisConfig:\n    redis-config: |\n      maxmemory 512mb\n      maxmemory-policy allkeys-lru\n      save 900 1\n      save 300 10\n      save 60 10000\n      tcp-keepalive 60\n      tcp-backlog 8192\n      timeout 300\n      \n  storage:\n    volumeClaimTemplate:\n      spec:\n        accessModes: [\"ReadWriteOnce\"]\n        storageClassName: fast-ssd\n        resources:\n          requests:\n            storage: 50Gi\n            \n  resources:\n    requests:\n      memory: 512Mi\n      cpu: 250m\n    limits:\n      memory: 512Mi\n      cpu: 500m\n      \n  nodeSelector:\n    node-type: \"redis-optimized\"\n    \n  podSecurityContext:\n    runAsUser: 1000\n    runAsGroup: 1000\n    fsGroup: 1000\n    \n  securityContext:\n    allowPrivilegeEscalation: false\n    readOnlyRootFilesystem: true\n    runAsNonRoot: true\n    capabilities:\n      drop:\n      - ALL\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-secret\n  namespace: redis\ntype: Opaque\ndata:\n  password: $(echo -n 'secure_redis_password_123!' | base64)\nEOF\n```\n\n## Storage Configuration\n\n### Persistent Volumes and Storage Classes\n```bash\n# Create local storage class\ncat <<EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: local-storage\nprovisioner: kubernetes.io/no-provisioner\nvolumeBindingMode: WaitForFirstConsumer\nallowVolumeExpansion: true\nreclaimPolicy: Delete\nEOF\n\n# Create persistent volume\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: local-pv-1\nspec:\n  capacity:\n    storage: 10Gi\n  volumeMode: Filesystem\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Delete\n  storageClassName: local-storage\n  local:\n    path: /mnt/disk1\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/hostname\n          operator: In\n          values:\n          - node-1\nEOF\n\n# Create persistent volume claim\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: app-data-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: local-storage\n  resources:\n    requests:\n      storage: 5Gi\nEOF\n```\n\n### NFS Storage (Shared volumes)\n```bash\n# Install NFS client utilities (all nodes)\n# Ubuntu/Debian\nsudo apt install -y nfs-common\n\n# RHEL/CentOS\nsudo yum install -y nfs-utils\n\n# Create NFS storage class\ncat <<EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: nfs-storage\nprovisioner: example.com/nfs\nparameters:\n  server: 192.168.1.200\n  path: /exported/path\n  readOnly: \"false\"\nreclaimPolicy: Retain\nallowVolumeExpansion: true\nmountOptions:\n  - hard\n  - nfsvers=4.1\nEOF\n```\n\n## Firewall Configuration (Cross-Platform)\n\n### Required Ports\n```bash\n# Control plane ports\nsudo firewall-cmd --permanent --add-port=6443/tcp    # API server\nsudo firewall-cmd --permanent --add-port=2379-2380/tcp  # etcd\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=10259/tcp  # kube-scheduler\nsudo firewall-cmd --permanent --add-port=10257/tcp  # kube-controller-manager\n\n# Worker node ports\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=30000-32767/tcp  # NodePort services\n\n# CNI ports (Flannel)\nsudo firewall-cmd --permanent --add-port=8285/udp   # Flannel\nsudo firewall-cmd --permanent --add-port=8472/udp   # Flannel VXLAN\n\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 6443/tcp\nsudo ufw allow 2379:2380/tcp\nsudo ufw allow 10250/tcp\nsudo ufw allow 10259/tcp\nsudo ufw allow 10257/tcp\nsudo ufw allow 30000:32767/tcp\nsudo ufw allow 8285/udp\nsudo ufw allow 8472/udp\n\n# iptables (manual configuration)\nsudo iptables -A INPUT -p tcp --dport 6443 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 2379:2380 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 10250 -j ACCEPT\n```\n\n### SELinux Configuration (RHEL/CentOS)\n```bash\n# Configure SELinux for Kubernetes\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\n# Alternative: Configure SELinux policies instead of disabling\nsudo setsebool -P container_manage_cgroup true\nsudo setsebool -P container_use_cgroup true\n\n# Install SELinux policies for containers\nsudo yum install -y container-selinux\n\n# Check for denials\nsudo ausearch -m AVC,USER_AVC -ts recent\n```\n\n## High Availability Setup\n\n### Multi-Master Cluster with kubeadm\n```bash\n# On first control plane node\nsudo kubeadm init \\\n  --control-plane-endpoint=\"k8s-cluster.example.com:6443\" \\\n  --upload-certs \\\n  --pod-network-cidr=10.244.0.0/16\n\n# Note the commands to join additional control plane nodes and workers\n\n# On additional control plane nodes:\nsudo kubeadm join k8s-cluster.example.com:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234... \\\n  --control-plane \\\n  --certificate-key 1234...\n\n# Configure load balancer (HAProxy example)\ncat <<EOF | sudo tee /etc/haproxy/haproxy.cfg\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode tcp\n    log global\n    option tcplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend k8s-api\n    bind *:6443\n    mode tcp\n    default_backend k8s-api-backend\n\nbackend k8s-api-backend\n    mode tcp\n    balance roundrobin\n    server k8s-master-1 192.168.1.101:6443 check\n    server k8s-master-2 192.168.1.102:6443 check\n    server k8s-master-3 192.168.1.103:6443 check\nEOF\n\nsudo systemctl restart haproxy\n```\n\n### External etcd Cluster\n```bash\n# Install etcd on dedicated nodes\nETCD_VER=v3.5.9\ncurl -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzf etcd-${ETCD_VER}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VER}-linux-amd64/{etcd,etcdctl} /usr/local/bin/\n\n# Create etcd configuration\nsudo tee /etc/systemd/system/etcd.service > /dev/null <<EOF\n[Unit]\nDescription=etcd\nDocumentation=https://github.com/coreos\n\n[Service]\nType=notify\nUser=etcd\nExecStart=/usr/local/bin/etcd \\\\\n  --name=etcd-1 \\\\\n  --data-dir=/var/lib/etcd \\\\\n  --listen-client-urls=https://192.168.1.201:2379 \\\\\n  --advertise-client-urls=https://192.168.1.201:2379 \\\\\n  --listen-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-advertise-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-cluster=etcd-1=https://192.168.1.201:2380,etcd-2=https://192.168.1.202:2380,etcd-3=https://192.168.1.203:2380 \\\\\n  --initial-cluster-token=etcd-cluster-1 \\\\\n  --initial-cluster-state=new \\\\\n  --cert-file=/etc/etcd/pki/server.crt \\\\\n  --key-file=/etc/etcd/pki/server.key \\\\\n  --peer-cert-file=/etc/etcd/pki/peer.crt \\\\\n  --peer-key-file=/etc/etcd/pki/peer.key \\\\\n  --trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-client-cert-auth \\\\\n  --client-cert-auth\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create etcd user and directories\nsudo useradd -r etcd\nsudo mkdir -p /var/lib/etcd /etc/etcd/pki\nsudo chown etcd:etcd /var/lib/etcd\nsudo systemctl enable --now etcd\n```\n\n## Application Deployment Examples\n\n### Secure Application Deployment\n```bash\n# Create namespace with network policies\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: myapp\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: myapp-sa\n  namespace: myapp\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: myapp\n  name: myapp-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: myapp-rolebinding\n  namespace: myapp\nsubjects:\n- kind: ServiceAccount\n  name: myapp-sa\n  namespace: myapp\nroleRef:\n  kind: Role\n  name: myapp-role\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-deployment\n  namespace: myapp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      serviceAccountName: myapp-sa\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        runAsGroup: 3000\n        fsGroup: 2000\n        seccompProfile:\n          type: RuntimeDefault\n      containers:\n      - name: app\n        image: nginx:alpine\n        ports:\n        - containerPort: 80\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n        resources:\n          requests:\n            memory: \"64Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        volumeMounts:\n        - name: tmp-volume\n          mountPath: /tmp\n        - name: cache-volume\n          mountPath: /var/cache/nginx\n      volumes:\n      - name: tmp-volume\n        emptyDir: {}\n      - name: cache-volume\n        emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-service\n  namespace: myapp\nspec:\n  selector:\n    app: myapp\n  ports:\n  - port: 80\n    targetPort: 80\n  type: ClusterIP\nEOF\n```\n\n### StatefulSet with Persistent Storage\n```bash\n# Deploy StatefulSet application (database example)\ncat <<EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql-statefulset\n  namespace: myapp\nspec:\n  serviceName: mysql-service\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      securityContext:\n        runAsUser: 999\n        runAsGroup: 999\n        fsGroup: 999\n      containers:\n      - name: mysql\n        image: mysql:8.0\n        ports:\n        - containerPort: 3306\n          name: mysql\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: root-password\n        volumeMounts:\n        - name: mysql-storage\n          mountPath: /var/lib/mysql\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n  volumeClaimTemplates:\n  - metadata:\n      name: mysql-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      storageClassName: \"local-storage\"\n      resources:\n        requests:\n          storage: 10Gi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-service\n  namespace: myapp\nspec:\n  clusterIP: None\n  selector:\n    app: mysql\n  ports:\n  - port: 3306\n    targetPort: 3306\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secret\n  namespace: myapp\ntype: Opaque\ndata:\n  root-password: $(echo -n 'secure_mysql_password' | base64)\nEOF\n```\n\n## Backup and Disaster Recovery\n\n### etcd Backup\n```bash\n# Create etcd backup script\nsudo tee /usr/local/bin/etcd-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/etcd\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create etcd snapshot\nETCDCTL_API=3 etcdctl snapshot save ${BACKUP_DIR}/etcd-backup-${DATE}.db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Verify snapshot\nETCDCTL_API=3 etcdctl snapshot status ${BACKUP_DIR}/etcd-backup-${DATE}.db -w table\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"etcd-backup-*.db\" -type f -mtime +7 -delete\n\necho \"etcd backup completed: etcd-backup-${DATE}.db\"\nEOF\n\nsudo chmod +x /usr/local/bin/etcd-backup.sh\n\n# Schedule backup\necho \"0 2 * * * root /usr/local/bin/etcd-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Cluster State Backup\n```bash\n# Backup all cluster resources\nkubectl get all --all-namespaces -o yaml > cluster-backup-$(date +%Y%m%d).yaml\n\n# Backup specific resource types\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml > cluster-data-backup-$(date +%Y%m%d).yaml\n\n# Create backup script for all resources\nsudo tee /usr/local/bin/k8s-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/kubernetes\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup all cluster resources\nkubectl get all --all-namespaces -o yaml > ${BACKUP_DIR}/cluster-all-${DATE}.yaml\n\n# Backup critical resources separately\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml > ${BACKUP_DIR}/cluster-data-${DATE}.yaml\n\n# Backup custom resources\nkubectl get crd -o yaml > ${BACKUP_DIR}/cluster-crd-${DATE}.yaml\n\n# Backup RBAC\nkubectl get clusterroles,clusterrolebindings,roles,rolebindings --all-namespaces -o yaml > ${BACKUP_DIR}/cluster-rbac-${DATE}.yaml\n\n# etcd backup\n/usr/local/bin/etcd-backup.sh\n\n# Compress backups\ntar -czf ${BACKUP_DIR}/k8s-complete-backup-${DATE}.tar.gz ${BACKUP_DIR}/*-${DATE}.yaml\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"*-${DATE:0:8}*\" -type f -mtime +7 -delete\n\necho \"Kubernetes backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/k8s-backup.sh\necho \"0 3 * * * root /usr/local/bin/k8s-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Verification and Testing\n\n### Cluster Health Checks\n```bash\n# Check cluster components\nkubectl get componentstatuses\nkubectl cluster-info\nkubectl get nodes -o wide\n\n# Check all pods in system namespaces\nkubectl get pods --all-namespaces\nkubectl get events --all-namespaces --sort-by=.metadata.creationTimestamp\n\n# Test DNS resolution\nkubectl run test-dns --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default\n\n# Test pod networking\nkubectl run test-pod-1 --image=nginx --port=80\nkubectl expose pod test-pod-1 --port=80 --type=ClusterIP\nkubectl run test-pod-2 --image=busybox --rm -it --restart=Never -- wget -qO- test-pod-1\n\n# Check resource usage\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Verify RBAC\nkubectl auth can-i create deployments\nkubectl auth can-i get secrets --as=system:serviceaccount:default:default\n\n# Test persistent storage\nkubectl apply -f - <<EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: test-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-storage-pod\nspec:\n  containers:\n  - name: app\n    image: busybox\n    command: ['sh', '-c', 'echo \"Storage test\" > /data/test.txt && cat /data/test.txt && sleep 3600']\n    volumeMounts:\n    - name: storage\n      mountPath: /data\n  volumes:\n  - name: storage\n    persistentVolumeClaim:\n      claimName: test-pvc\nEOF\n\nkubectl logs test-storage-pod\nkubectl delete pod test-storage-pod\nkubectl delete pvc test-pvc\n```\n\n### Security Validation\n```bash\n# Run CIS Kubernetes Benchmark\ndocker run --rm -v $(pwd):/tmp aquasec/kube-bench:latest run --targets master,node,etcd,policies\n\n# Check pod security policies\nkubectl get psp  # For older versions\nkubectl get podsecuritypolicies  # For older versions\n\n# Verify network policies are working\nkubectl describe networkpolicy default-deny-all\n\n# Check for privileged containers\nkubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.securityContext.privileged}{\"\\n\"}{end}' | grep true\n\n# Audit security contexts\nkubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\t\"}{.spec.securityContext}{\"\\n\"}{end}'\n\n# Check for containers running as root\nkubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.containers[*].securityContext.runAsUser}{\"\\n\"}{end}' | grep -E '\\t0$|\\t$'\n```\n\n## 6. Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Node not ready issues\nkubectl describe node <node-name>\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Check kubelet logs\nsudo journalctl -u kubelet -f\n\n# Check container runtime\nsudo systemctl status containerd\nsudo crictl pods\n\n# Network issues\nkubectl get pods -n kube-system\nkubectl describe pod <cni-pod-name> -n kube-system\n\n# Permission issues (SELinux)\nsudo ausearch -m AVC -ts recent\nsudo setsebool -P container_manage_cgroup true\n\n# Certificate issues\nsudo kubeadm certs check-expiration\nopenssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout\n\n# Resource exhaustion\nkubectl describe node <node-name>\nkubectl top nodes\nkubectl top pods --all-namespaces --sort-by=memory\n\n# etcd issues\nsudo etcdctl endpoint health \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Reset cluster (if needed)\nsudo kubeadm reset\nsudo rm -rf /etc/cni/net.d\nsudo rm -rf $HOME/.kube/config\n```\n\n### Debug Pod Issues\n```bash\n# Debug failing pods\nkubectl describe pod <pod-name>\nkubectl logs <pod-name> -c <container-name>\nkubectl get events --field-selector involvedObject.name=<pod-name>\n\n# Debug networking\nkubectl run debug-pod --image=nicolaka/netshoot --rm -it --restart=Never\n\n# Check resource constraints\nkubectl describe resourcequota -n <namespace>\nkubectl describe limitrange -n <namespace>\n\n# Debug storage issues\nkubectl describe pvc <pvc-name>\nkubectl get events --field-selector involvedObject.name=<pvc-name>\n\n# Debug service connectivity\nkubectl run debug --image=busybox --rm -it --restart=Never -- nslookup <service-name>\nkubectl get endpoints <service-name>\n\n# Debug ingress issues\nkubectl describe ingress <ingress-name>\nkubectl get events --field-selector involvedObject.name=<ingress-name>\nkubectl logs -n ingress-nginx deployment/ingress-nginx-controller\n```\n\n## Performance Optimization\n\n### System-Level Tuning\n\n```bash\n# Kernel optimization for Kubernetes\nsudo tee -a /etc/sysctl.conf > /dev/null <<EOF\n# Kubernetes performance tuning\nnet.core.somaxconn = 32768\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.tcp_max_tw_buckets = 2000000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 1024 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 134217728\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 134217728\nnet.ipv4.tcp_rmem = 4096 87380 134217728\nnet.ipv4.tcp_wmem = 4096 65536 134217728\nfs.file-max = 2097152\nfs.inotify.max_user_instances = 8192\nfs.inotify.max_user_watches = 1048576\nvm.swappiness = 0\nvm.overcommit_memory = 1\nvm.dirty_ratio = 80\nvm.dirty_background_ratio = 5\nkernel.pid_max = 4194304\nEOF\n\nsudo sysctl -p\n\n# Set resource limits\nsudo tee -a /etc/security/limits.conf > /dev/null <<EOF\nroot soft nofile 65536\nroot hard nofile 65536\n* soft nofile 65536\n* hard nofile 65536\n* soft nproc 65536\n* hard nproc 65536\nEOF\n\n# Configure systemd limits for containerd and kubelet\nsudo mkdir -p /etc/systemd/system/containerd.service.d/\nsudo tee /etc/systemd/system/containerd.service.d/limits.conf > /dev/null <<EOF\n[Service]\nLimitNOFILE=1048576\nLimitNPROC=1048576\nLimitCORE=infinity\nOOMScoreAdjust=-999\nEOF\n\nsudo mkdir -p /etc/systemd/system/kubelet.service.d/\nsudo tee /etc/systemd/system/kubelet.service.d/limits.conf > /dev/null <<EOF\n[Service]\nLimitNOFILE=1048576\nLimitNPROC=1048576\nLimitCORE=infinity\nOOMScoreAdjust=-999\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart containerd kubelet\n```\n\n### Kubernetes Performance Configuration\n\n```bash\n# Optimize kubelet configuration\nsudo tee /var/lib/kubelet/config.yaml > /dev/null <<EOF\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\naddress: 0.0.0.0\nport: 10250\nreadOnlyPort: 0\nauthentication:\n  webhook:\n    enabled: true\nauthorization:\n  mode: Webhook\nclusterDomain: cluster.local\nclusterDNS:\n- 10.96.0.10\nmaxPods: 250\npodsPerCore: 10\ncgroupDriver: systemd\ncontainerLogMaxSize: 50Mi\ncontainerLogMaxFiles: 5\neventRecordQPS: 50\neventBurst: 100\nkubeAPIQPS: 50\nkubeAPIBurst: 100\nserializeImagePulls: false\nregistryPullQPS: 10\nregistryBurst: 20\nsyncFrequency: 1m\nfileCheckFrequency: 20s\nhttpCheckFrequency: 20s\nnodeStatusUpdateFrequency: 10s\nimageMinimumGCAge: 2m\nimageGCHighThresholdPercent: 85\nimageGCLowThresholdPercent: 80\nvolumeStatsAggPeriod: 1m\nsystemReserved:\n  cpu: 200m\n  memory: 512Mi\n  ephemeral-storage: 2Gi\nkubeReserved:\n  cpu: 200m\n  memory: 512Mi\n  ephemeral-storage: 2Gi\nEOF\n\n# Optimize API server configuration\nsudo sed -i '/- kube-apiserver/a\\\n    - --max-requests-inflight=2000\\\n    - --max-mutating-requests-inflight=1000\\\n    - --watch-cache-sizes=nodes#100,pods#1000,replicationcontrollers#500\\\n    - --target-ram-mb=2048\\\n    - --event-ttl=168h0m0s' /etc/kubernetes/manifests/kube-apiserver.yaml\n\n# Optimize etcd configuration\nsudo tee -a /etc/kubernetes/manifests/etcd.yaml > /dev/null <<EOF\n    - --max-request-bytes=33554432\n    - --quota-backend-bytes=8589934592\n    - --snapshot-count=10000\n    - --heartbeat-interval=100\n    - --election-timeout=1000\nEOF\n```\n\n## Integration Examples\n\n### Python Client Library\n\n```python\n# kubernetes-client example\nfrom kubernetes import client, config\nimport json\n\n# Load kubeconfig\nconfig.load_kube_config()  # or config.load_incluster_config() for in-cluster\n\n# Initialize API clients\nv1 = client.CoreV1Api()\napps_v1 = client.AppsV1Api()\nnetworking_v1 = client.NetworkingV1Api()\n\n# Create a namespace\nnamespace = client.V1Namespace(\n    metadata=client.V1ObjectMeta(name=\"python-app\")\n)\nv1.create_namespace(body=namespace)\n\n# Create a deployment\ndeployment = client.V1Deployment(\n    metadata=client.V1ObjectMeta(name=\"nginx-deployment\"),\n    spec=client.V1DeploymentSpec(\n        replicas=3,\n        selector=client.V1LabelSelector(\n            match_labels={\"app\": \"nginx\"}\n        ),\n        template=client.V1PodTemplateSpec(\n            metadata=client.V1ObjectMeta(\n                labels={\"app\": \"nginx\"}\n            ),\n            spec=client.V1PodSpec(\n                containers=[\n                    client.V1Container(\n                        name=\"nginx\",\n                        image=\"nginx:alpine\",\n                        ports=[client.V1ContainerPort(container_port=80)],\n                        resources=client.V1ResourceRequirements(\n                            requests={\"cpu\": \"100m\", \"memory\": \"128Mi\"},\n                            limits={\"cpu\": \"500m\", \"memory\": \"512Mi\"}\n                        )\n                    )\n                ]\n            )\n        )\n    )\n)\n\napps_v1.create_namespaced_deployment(\n    namespace=\"python-app\", \n    body=deployment\n)\n\n# Create a service\nservice = client.V1Service(\n    metadata=client.V1ObjectMeta(name=\"nginx-service\"),\n    spec=client.V1ServiceSpec(\n        selector={\"app\": \"nginx\"},\n        ports=[\n            client.V1ServicePort(port=80, target_port=80)\n        ],\n        type=\"LoadBalancer\"\n    )\n)\n\nv1.create_namespaced_service(namespace=\"python-app\", body=service)\n\n# Monitor pods\ndef monitor_pods():\n    pods = v1.list_namespaced_pod(namespace=\"python-app\")\n    for pod in pods.items:\n        print(f\"Pod: {pod.metadata.name}, Status: {pod.status.phase}\")\n\nmonitor_pods()\n\n# Stream logs\ndef stream_logs(pod_name):\n    for line in v1.read_namespaced_pod_log(\n        name=pod_name, \n        namespace=\"python-app\", \n        follow=True, \n        _preload_content=False\n    ).stream():\n        print(line.decode('utf-8'), end='')\n\n# Clean up\napps_v1.delete_namespaced_deployment(name=\"nginx-deployment\", namespace=\"python-app\")\nv1.delete_namespaced_service(name=\"nginx-service\", namespace=\"python-app\")\nv1.delete_namespace(name=\"python-app\")\n```\n\n### Node.js Client Example\n\n```javascript\n// kubernetes-example.js\nconst k8s = require('@kubernetes/client-node');\n\n// Load kubeconfig\nconst kc = new k8s.KubeConfig();\nkc.loadFromDefault();\n\nconst k8sApi = kc.makeApiClient(k8s.CoreV1Api);\nconst k8sAppsApi = kc.makeApiClient(k8s.AppsV1Api);\n\nconst namespace = 'nodejs-app';\n\nasync function createNamespace() {\n    const namespaceManifest = {\n        metadata: {\n            name: namespace\n        }\n    };\n    \n    try {\n        await k8sApi.createNamespace(namespaceManifest);\n        console.log(`Namespace ${namespace} created`);\n    } catch (error) {\n        console.error('Error creating namespace:', error.response?.body || error.message);\n    }\n}\n\nasync function createDeployment() {\n    const deploymentManifest = {\n        metadata: {\n            name: 'nginx-deployment'\n        },\n        spec: {\n            replicas: 3,\n            selector: {\n                matchLabels: {\n                    app: 'nginx'\n                }\n            },\n            template: {\n                metadata: {\n                    labels: {\n                        app: 'nginx'\n                    }\n                },\n                spec: {\n                    containers: [{\n                        name: 'nginx',\n                        image: 'nginx:alpine',\n                        ports: [{\n                            containerPort: 80\n                        }],\n                        resources: {\n                            requests: {\n                                cpu: '100m',\n                                memory: '128Mi'\n                            },\n                            limits: {\n                                cpu: '500m',\n                                memory: '512Mi'\n                            }\n                        }\n                    }]\n                }\n            }\n        }\n    };\n    \n    try {\n        await k8sAppsApi.createNamespacedDeployment(namespace, deploymentManifest);\n        console.log('Deployment created: nginx-deployment');\n    } catch (error) {\n        console.error('Error creating deployment:', error.response?.body || error.message);\n    }\n}\n\nasync function createService() {\n    const serviceManifest = {\n        metadata: {\n            name: 'nginx-service'\n        },\n        spec: {\n            selector: {\n                app: 'nginx'\n            },\n            ports: [{\n                port: 80,\n                targetPort: 80\n            }],\n            type: 'LoadBalancer'\n        }\n    };\n    \n    try {\n        await k8sApi.createNamespacedService(namespace, serviceManifest);\n        console.log('Service created: nginx-service');\n    } catch (error) {\n        console.error('Error creating service:', error.response?.body || error.message);\n    }\n}\n\nasync function listPods() {\n    try {\n        const response = await k8sApi.listNamespacedPod(namespace);\n        console.log(`Found ${response.body.items.length} pods:`);\n        response.body.items.forEach(pod => {\n            console.log(`Pod: ${pod.metadata.name}, Status: ${pod.status.phase}`);\n        });\n    } catch (error) {\n        console.error('Error listing pods:', error.response?.body || error.message);\n    }\n}\n\nasync function cleanup() {\n    try {\n        await k8sAppsApi.deleteNamespacedDeployment('nginx-deployment', namespace);\n        await k8sApi.deleteNamespacedService('nginx-service', namespace);\n        await k8sApi.deleteNamespace(namespace);\n        console.log('Resources cleaned up');\n    } catch (error) {\n        console.error('Error during cleanup:', error.response?.body || error.message);\n    }\n}\n\nasync function main() {\n    await createNamespace();\n    await createDeployment();\n    await createService();\n    \n    // Wait a bit for pods to start\n    setTimeout(async () => {\n        await listPods();\n        await cleanup();\n    }, 5000);\n}\n\nmain().catch(console.error);\n```\n\n### Java Client Example\n\n```java\n// KubernetesExample.java\nimport io.kubernetes.client.openapi.ApiClient;\nimport io.kubernetes.client.openapi.ApiException;\nimport io.kubernetes.client.openapi.Configuration;\nimport io.kubernetes.client.openapi.apis.AppsV1Api;\nimport io.kubernetes.client.openapi.apis.CoreV1Api;\nimport io.kubernetes.client.openapi.models.*;\nimport io.kubernetes.client.util.Config;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class KubernetesExample {\n    public static void main(String[] args) throws Exception {\n        // Load kubeconfig\n        ApiClient client = Config.defaultClient();\n        Configuration.setDefaultApiClient(client);\n        \n        CoreV1Api coreV1Api = new CoreV1Api();\n        AppsV1Api appsV1Api = new AppsV1Api();\n        \n        String namespace = \"java-app\";\n        \n        // Create namespace\n        V1Namespace ns = new V1Namespace()\n            .metadata(new V1ObjectMeta().name(namespace));\n        \n        try {\n            coreV1Api.createNamespace(ns, null, null, null, null);\n            System.out.println(\"Namespace created: \" + namespace);\n        } catch (ApiException e) {\n            System.err.println(\"Failed to create namespace: \" + e.getResponseBody());\n        }\n        \n        // Create deployment\n        Map<String, String> labels = new HashMap<>();\n        labels.put(\"app\", \"nginx\");\n        \n        V1Deployment deployment = new V1Deployment()\n            .metadata(new V1ObjectMeta().name(\"nginx-deployment\"))\n            .spec(new V1DeploymentSpec()\n                .replicas(3)\n                .selector(new V1LabelSelector().matchLabels(labels))\n                .template(new V1PodTemplateSpec()\n                    .metadata(new V1ObjectMeta().labels(labels))\n                    .spec(new V1PodSpec()\n                        .containers(Collections.singletonList(\n                            new V1Container()\n                                .name(\"nginx\")\n                                .image(\"nginx:alpine\")\n                                .ports(Collections.singletonList(\n                                    new V1ContainerPort().containerPort(80)\n                                ))\n                                .resources(new V1ResourceRequirements()\n                                    .requests(Map.of(\n                                        \"cpu\", Quantity.fromString(\"100m\"),\n                                        \"memory\", Quantity.fromString(\"128Mi\")\n                                    ))\n                                    .limits(Map.of(\n                                        \"cpu\", Quantity.fromString(\"500m\"),\n                                        \"memory\", Quantity.fromString(\"512Mi\")\n                                    ))\n                                )\n                        ))\n                    )\n                )\n            );\n            \n        try {\n            appsV1Api.createNamespacedDeployment(namespace, deployment, null, null, null, null);\n            System.out.println(\"Deployment created: nginx-deployment\");\n        } catch (ApiException e) {\n            System.err.println(\"Failed to create deployment: \" + e.getResponseBody());\n        }\n        \n        // Create service\n        V1Service service = new V1Service()\n            .metadata(new V1ObjectMeta().name(\"nginx-service\"))\n            .spec(new V1ServiceSpec()\n                .selector(labels)\n                .ports(Collections.singletonList(\n                    new V1ServicePort().port(80).targetPort(new IntOrString(80))\n                ))\n                .type(\"LoadBalancer\")\n            );\n            \n        try {\n            coreV1Api.createNamespacedService(namespace, service, null, null, null, null);\n            System.out.println(\"Service created: nginx-service\");\n        } catch (ApiException e) {\n            System.err.println(\"Failed to create service: \" + e.getResponseBody());\n        }\n        \n        // List pods\n        try {\n            V1PodList pods = coreV1Api.listNamespacedPod(namespace, null, null, null, null, null, null, null, null, null, null);\n            System.out.println(\"Found \" + pods.getItems().size() + \" pods:\");\n            for (V1Pod pod : pods.getItems()) {\n                System.out.println(\"Pod: \" + pod.getMetadata().getName() + \n                                 \", Status: \" + pod.getStatus().getPhase());\n            }\n        } catch (ApiException e) {\n            System.err.println(\"Failed to list pods: \" + e.getResponseBody());\n        }\n        \n        // Cleanup\n        try {\n            appsV1Api.deleteNamespacedDeployment(\"nginx-deployment\", namespace, null, null, null, null, null, null);\n            coreV1Api.deleteNamespacedService(\"nginx-service\", namespace, null, null, null, null, null, null);\n            coreV1Api.deleteNamespace(namespace, null, null, null, null, null, null);\n            System.out.println(\"Resources cleaned up\");\n        } catch (ApiException e) {\n            System.err.println(\"Failed to cleanup: \" + e.getResponseBody());\n        }\n    }\n}\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# Check current Kubernetes version\nkubectl version --short\n\n# Plan upgrade with kubeadm\nsudo kubeadm upgrade plan\n\n# Upgrade kubeadm first\nsudo apt update && sudo apt-mark unhold kubeadm\nsudo apt install -y kubeadm=1.29.1-00\nsudo apt-mark hold kubeadm\n\n# Or for RHEL/CentOS\nsudo yum update -y kubeadm-1.29.1\n\n# Upgrade control plane\nsudo kubeadm upgrade apply v1.29.1\n\n# Upgrade kubelet and kubectl\nsudo apt-mark unhold kubelet kubectl\nsudo apt install -y kubelet=1.29.1-00 kubectl=1.29.1-00\nsudo apt-mark hold kubelet kubectl\n\nsudo systemctl daemon-reload\nsudo systemctl restart kubelet\n\n# Drain and upgrade worker nodes\nkubectl drain <worker-node> --ignore-daemonsets --delete-emptydir-data\n# On worker node:\nsudo kubeadm upgrade node\nsudo apt install -y kubelet=1.29.1-00 kubectl=1.29.1-00\nsudo systemctl daemon-reload\nsudo systemctl restart kubelet\n\n# Uncordon worker node\nkubectl uncordon <worker-node>\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# k8s-maintenance.sh\n\n# Check cluster health\necho \"=== Cluster Health Check ===\"\nkubectl get nodes -o wide\nkubectl get pods --all-namespaces | grep -v Running | grep -v Completed\n\n# Check resource usage\necho \"=== Resource Usage ===\"\nkubectl top nodes\nkubectl top pods --all-namespaces --sort-by=cpu | head -10\n\n# Check certificate expiry\necho \"=== Certificate Expiry ===\"\nsudo kubeadm certs check-expiration\n\n# Clean up completed jobs\necho \"=== Cleanup ===\"\nkubectl get jobs --all-namespaces -o json | jq -r '.items[] | select(.status.conditions[]?.type == \"Complete\") | \"\\(.metadata.namespace) \\(.metadata.name)\"' | xargs -l bash -c 'kubectl delete job $1 -n $0'\n\n# Clean up evicted pods\nkubectl get pods --all-namespaces --field-selector=status.phase=Failed -o json | jq -r '.items[] | \"\\(.metadata.namespace) \\(.metadata.name)\"' | xargs -l bash -c 'kubectl delete pod $1 -n $0'\n\n# Check for security updates\necho \"=== Security Updates Available ===\"\nsudo apt list --upgradable | grep -i security\n\n# Backup etcd\necho \"=== etcd Backup ===\"\nsudo etcdctl snapshot save /backup/etcd-$(date +%Y%m%d_%H%M%S).db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\necho \"Maintenance completed at: $(date)\"\n```\n\n## Additional Resources\n\n- [Official Documentation](https://kubernetes.io/docs/)\n- [kubectl Reference](https://kubernetes.io/docs/reference/kubectl/)\n- [Security Best Practices](https://kubernetes.io/docs/concepts/security/)\n- [CIS Kubernetes Benchmark](https://www.cisecurity.org/benchmark/kubernetes)\n- [OWASP Kubernetes Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Kubernetes_Security_Cheat_Sheet.html)\n- [Kubernetes The Hard Way](https://github.com/kelseyhightower/kubernetes-the-hard-way)\n- [Kubernetes Academy](https://kubernetes.academy/)\n- [CNCF Landscape](https://landscape.cncf.io/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<p class=\"mobile-paragraph\">Kubernetes is a free and open-source container orchestration platform for automating deployment, scaling, and management of containerized applications. Originally developed by Google and now maintained by the Cloud Native Computing Foundation (CNCF), Kubernetes serves as the industry standard for container orchestration. It provides enterprise-grade security, scalability, and reliability for cloud-native applications, offering a robust alternative to proprietary solutions like AWS ECS, Azure Container Instances, or Google Cloud Run without vendor lock-in.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores for control plane, 1+ core for worker nodes</li>\n<li class=\"mobile-list-item\">RAM: 2GB+ per control plane node, 1GB+ per worker node</li>\n<li class=\"mobile-list-item\">Storage: 20GB+ available disk space per node (SSD recommended)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity between all nodes (1Gbps+ recommended)</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.10+ (4.x+ recommended)</li>\n<li class=\"mobile-list-item\">Container runtime support (containerd, Docker, CRI-O)</li>\n<li class=\"mobile-list-item\">macOS: Docker Desktop with Kubernetes enabled (development only)</li>\n<li class=\"mobile-list-item\">Windows: Docker Desktop with Kubernetes enabled (development only)</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Unique hostname, MAC address, and product_uuid for every node</li>\n<li class=\"mobile-list-item\">Port 6443 (Kubernetes API server)</li>\n<li class=\"mobile-list-item\">Port 2379-2380 (etcd server client API)</li>\n<li class=\"mobile-list-item\">Port 10250 (kubelet API)</li>\n<li class=\"mobile-list-item\">Port 10259 (kube-scheduler)</li>\n<li class=\"mobile-list-item\">Port 10257 (kube-controller-manager)</li>\n<li class=\"mobile-list-item\">Port 30000-32767 (NodePort Services)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Container runtime (containerd recommended)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system</li>\n<li class=\"mobile-list-item\">iptables (for network rules)</li>\n<li class=\"mobile-list-item\">ebtables and ethtool (for networking)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<li class=\"mobile-list-item\"><strong>Special Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Swap must be disabled on all nodes</li>\n<li class=\"mobile-list-item\">SELinux in permissive mode (for RHEL/CentOS)</li>\n<li class=\"mobile-list-item\">Firewall configured to allow cluster communication</li>\n<h2 id=\"system-preparation-all-distributions\" class=\"mobile-header\">System Preparation (All Distributions)</h2>\n<h3 id=\"disable-swap-required\" class=\"mobile-header\">Disable Swap (Required)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Disable swap immediately\nsudo swapoff -a\n\n# Disable swap permanently\nsudo sed -i &#039;/ swap / s/^\\(.*\\)$/#\\1/g&#039; /etc/fstab\n\n# Verify swap is disabled\nfree -h\nswapon --show</code></pre>\n      </div>\n    </div>\n<h3 id=\"configure-kernel-modules\" class=\"mobile-header\">Configure Kernel Modules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Load required kernel modules\ncat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# Configure sysctl parameters\ncat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\nsudo sysctl --system</code></pre>\n      </div>\n    </div>\n<h2 id=\"container-runtime-installation\" class=\"mobile-header\">Container Runtime Installation</h2>\n<h3 id=\"containerd-recommended\" class=\"mobile-header\">containerd (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt-get update\n\n# Install dependencies\nsudo apt-get install -y ca-certificates curl gnupg lsb-release\n\n# Add Docker repository for containerd\nsudo mkdir -m 0755 -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Install containerd\nsudo apt-get update\nsudo apt-get install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install prerequisites\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install containerd\nsudo yum install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install containerd\nsudo dnf install -y containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install containerd\nsudo pacman -Syu containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Enable and start containerd\nsudo systemctl enable --now containerd</code></pre>\n      </div>\n    </div>\n<h2 id=\"kubernetes-installation\" class=\"mobile-header\">Kubernetes Installation</h2>\n<h3 id=\"kubeadm-kubelet-kubectl-installation\" class=\"mobile-header\">kubeadm, kubelet, kubectl Installation</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index and install packages needed for apt to use HTTPS\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\n\n# Download and add the Kubernetes signing key\ncurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n# Add Kubernetes repository\necho &#039;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /&#039; | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n# Update package index and install Kubernetes components\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\n\n# Hold packages to prevent automatic updates\nsudo apt-mark hold kubelet kubeadm kubectl\n\n# Enable kubelet\nsudo systemctl enable --now kubelet</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux/Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Kubernetes repository\ncat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/\nenabled=1\ngpgcheck=1\ngpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\nexclude=kubelet kubeadm kubectl cri-tools kubernetes-cni\nEOF\n\n# Set SELinux to permissive mode (required for cluster communication)\nsudo setenforce 0\nsudo sed -i &#039;s/^SELINUX=enforcing$/SELINUX=permissive/&#039; /etc/selinux/config\n\n# Install Kubernetes components\nsudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n\n# Enable kubelet\nsudo systemctl enable --now kubelet</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from AUR (using yay)\nyay -S kubeadm-bin kubelet-bin kubectl-bin\n\n# Or build from source\ngit clone https://aur.archlinux.org/kubectl-bin.git\ncd kubectl-bin &amp;&amp; makepkg -si\n\n# Enable kubelet\nsudo systemctl enable --now kubelet</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### openSUSE/SLES</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper refresh\n\n# Add Kubernetes repository\nsudo rpm --import https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\necho &#039;baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/&#039; | sudo tee /etc/zypp/repos.d/kubernetes.repo\n\n# Install Kubernetes components\nsudo zypper install -y kubelet kubeadm kubectl\n\n# SLES 15 (requires additional modules)\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y kubelet kubeadm kubectl\n\n# Enable kubelet\nsudo systemctl enable --now kubelet</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install containerd first\napk add --no-cache containerd\n\n# Add community repository for Kubernetes\necho &quot;http://dl-cdn.alpinelinux.org/alpine/edge/community&quot; &gt;&gt; /etc/apk/repositories\napk update\n\n# Install Kubernetes components (if available)\napk add --no-cache kubectl\n\n# Or install from binary\nKUBE_VERSION=&quot;v1.29.0&quot;\ncurl -LO &quot;https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubectl&quot;\ncurl -LO &quot;https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubeadm&quot;\ncurl -LO &quot;https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubelet&quot;\n\nchmod +x kubectl kubeadm kubelet\nsudo mv kubectl kubeadm kubelet /usr/local/bin/\n\n# Configure OpenRC service\nsudo tee /etc/init.d/kubelet &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/sbin/openrc-run\nname=&quot;kubelet&quot;\ncommand=&quot;/usr/local/bin/kubelet&quot;\ncommand_args=&quot;--config=/var/lib/kubelet/config.yaml --kubeconfig=/etc/kubernetes/kubelet.conf&quot;\npidfile=&quot;/var/run/kubelet.pid&quot;\ncommand_background=&quot;yes&quot;\ndepend() {\n    need net\n    after containerd\n}\nEOF\n\nsudo chmod +x /etc/init.d/kubelet\nsudo rc-update add kubelet default</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### macOS (Development Only)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker Desktop\n# Download from: https://www.docker.com/products/docker-desktop\n\n# Enable Kubernetes in Docker Desktop\n# Docker Desktop â†’ Preferences â†’ Kubernetes â†’ Enable Kubernetes\n\n# Install kubectl via Homebrew\nbrew install kubectl\n\n# Alternative: Install kubectl directly\ncurl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl&quot;\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin/\n\n# Verify installation\nkubectl version --client\nkubectl cluster-info\n\n# Configure kubectl context\nkubectl config use-context docker-desktop</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### FreeBSD</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from ports\ncd /usr/ports/sysutils/kubectl &amp;&amp; make install clean\n\n# Or install from packages\npkg install kubectl\n\n# Note: Full Kubernetes cluster on FreeBSD requires manual compilation\n# For development, use kubectl to connect to remote clusters\n\n# Install container runtime (if needed)\npkg install containerd\n\n# Configure kubectl for remote cluster access\nmkdir -p ~/.kube\n# Copy kubeconfig from Linux cluster to ~/.kube/config</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Windows (Development Only)</p>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Install Docker Desktop\n# Download from: https://www.docker.com/products/docker-desktop\n# Enable Kubernetes in Docker Desktop settings\n\n# Method 2: Install using Chocolatey\nchoco install kubernetes-cli\n\n# Method 3: Install using Scoop\nscoop install kubectl\n\n# Method 4: Manual installation\n# Download from https://dl.k8s.io/release/v1.29.0/bin/windows/amd64/kubectl.exe\n# Add to PATH environment variable\n\n# Enable Kubernetes in Docker Desktop\n# Docker Desktop â†’ Settings â†’ Kubernetes â†’ Enable Kubernetes\n\n# Verify installation\nkubectl version --client\nkubectl cluster-info\n\n# Configure PowerShell completion (optional)\nkubectl completion powershell | Out-String | Invoke-Expression</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Verify system requirements</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if swap is disabled\nfree -h\nswapon --show\n\n# Verify required ports are available\nsudo ss -tlnp | grep -E &#039;:(6443|2379|2380|10250|10259|10257)&#039;\n\n# Check container runtime\nsudo systemctl status containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Configure container runtime</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Default containerd configuration directory\nsudo mkdir -p /etc/containerd\n\n# Generate default configuration\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup for better resource management\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Restart containerd with new configuration\nsudo systemctl restart containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Initialize cluster networking</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Load required kernel modules\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# Configure sysctl for networking\necho &#039;net.bridge.bridge-nf-call-iptables=1&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.ip_forward=1&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Set up kubelet configuration</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create kubelet configuration directory\nsudo mkdir -p /var/lib/kubelet\n\n# Set kubelet to automatically restart\nsudo systemctl enable kubelet</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Verify container runtime is working\nsudo crictl version\nsudo crictl info\n\n# Check if kubelet is ready\nsudo systemctl status kubelet\n\n# Verify kernel modules are loaded\nlsmod | grep -E &#039;overlay|br_netfilter&#039;\n\n# Test container runtime with a simple container\nsudo crictl pull k8s.gcr.io/pause:3.9\nsudo crictl images</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Ensure all prerequisite steps are completed before proceeding to cluster initialization!</p>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Kubernetes services to start on boot\nsudo systemctl enable kubelet\nsudo systemctl enable containerd\n\n# Start services\nsudo systemctl start containerd\nsudo systemctl start kubelet\n\n# Stop services\nsudo systemctl stop kubelet\nsudo systemctl stop containerd\n\n# Restart services\nsudo systemctl restart containerd\nsudo systemctl restart kubelet\n\n# Check service status\nsudo systemctl status kubelet\nsudo systemctl status containerd\n\n# View service logs\nsudo journalctl -u kubelet -f\nsudo journalctl -u containerd -f\n\n# Reload systemd daemon after config changes\nsudo systemctl daemon-reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable services to start on boot\nsudo rc-update add containerd default\nsudo rc-update add kubelet default\n\n# Start services\nsudo rc-service containerd start\nsudo rc-service kubelet start\n\n# Stop services\nsudo rc-service kubelet stop\nsudo rc-service containerd stop\n\n# Restart services\nsudo rc-service containerd restart\nsudo rc-service kubelet restart\n\n# Check service status\nsudo rc-service kubelet status\nsudo rc-service containerd status\n\n# View logs\nsudo tail -f /var/log/kubelet.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos-with-docker-desktop\" class=\"mobile-header\">launchd (macOS with Docker Desktop)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Docker Desktop manages Kubernetes services automatically\n# Use Docker Desktop interface to start/stop Kubernetes\n\n# Check Kubernetes status\nkubectl cluster-info\n\n# Restart Kubernetes through Docker Desktop\n# Docker Desktop â†’ Preferences â†’ Kubernetes â†’ Reset Kubernetes Cluster\n\n# View logs through Docker Desktop\n# Docker Desktop â†’ Troubleshoot â†’ Clean / Purge data</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Docker Desktop manages Kubernetes services on Windows\n# Use Docker Desktop interface for management\n\n# Check Kubernetes status\nkubectl cluster-info\n\n# Restart Docker Desktop service\nRestart-Service com.docker.service\n\n# View Docker Desktop logs\nGet-EventLog -LogName Application -Source &quot;Docker Desktop&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"cluster-initialization\" class=\"mobile-header\">Cluster Initialization</h2>\n<h3 id=\"control-plane-setup-master-node\" class=\"mobile-header\">Control Plane Setup (Master Node)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize cluster with security best practices\nsudo kubeadm init \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --service-cidr=10.96.0.0/12 \\\n  --apiserver-advertise-address=$(hostname -I | awk &#039;{print $1}&#039;) \\\n  --node-name=$(hostname) \\\n  --ignore-preflight-errors=NumCPU\n\n# Configure kubectl for regular user\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# Alternative: Root user configuration\nexport KUBECONFIG=/etc/kubernetes/admin.conf\necho &#039;export KUBECONFIG=/etc/kubernetes/admin.conf&#039; &gt;&gt; ~/.bashrc\n\n# Verify control plane is running\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods --all-namespaces</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-plugin-installation\" class=\"mobile-header\">Network Plugin Installation</h3>\n<p class=\"mobile-paragraph\">#### Flannel (Simple, recommended for beginners)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Flannel CNI\nkubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n\n# Verify Flannel pods are running\nkubectl get pods -n kube-flannel</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Calico (Advanced networking and network policies)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Calico CNI\nkubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml\n\n# Download and apply Calico custom resources\ncurl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O\nkubectl create -f custom-resources.yaml\n\n# Verify Calico is running\nkubectl get pods -n calico-system</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Cilium (eBPF-based networking)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Cilium CLI\nCILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)\nCLI_ARCH=amd64\nif [ &quot;$(uname -m)&quot; = &quot;aarch64&quot; ]; then CLI_ARCH=arm64; fi\ncurl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\nsha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum\nsudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin\nrm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\n\n# Install Cilium\ncilium install\n\n# Verify installation\ncilium status --wait</code></pre>\n      </div>\n    </div>\n<h3 id=\"worker-node-setup\" class=\"mobile-header\">Worker Node Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># On worker nodes, use the join command from control plane initialization\n# Example (replace with your actual token and hash):\nsudo kubeadm join 192.168.1.100:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234567890abcdef...\n\n# If you need to get the join command again:\n# On control plane:\nkubeadm token create --print-join-command\n\n# Verify nodes joined successfully\nkubectl get nodes -o wide</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening-2024-best-practices\" class=\"mobile-header\">Security Hardening (2024 Best Practices)</h2>\n<h3 id=\"rbac-configuration\" class=\"mobile-header\">RBAC Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create service account with limited permissions\nkubectl create serviceaccount developer-sa -n default\n\n# Create role with specific permissions\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: developer-role\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods&quot;, &quot;services&quot;, &quot;configmaps&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]\n- apiGroups: [&quot;apps&quot;]\n  resources: [&quot;deployments&quot;, &quot;replicasets&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods/log&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;]\nEOF\n\n# Create role binding\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: developer-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: developer-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: developer-role\n  apiGroup: rbac.authorization.k8s.io\nEOF\n\n# Test RBAC configuration\nkubectl auth can-i create deployments --as=system:serviceaccount:default:developer-sa</code></pre>\n      </div>\n    </div>\n<h3 id=\"pod-security-standards\" class=\"mobile-header\">Pod Security Standards</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Pod Security Standards (baseline level)\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: secure-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: baseline\n    pod-security.kubernetes.io/audit: baseline\n    pod-security.kubernetes.io/warn: baseline\nEOF\n\n# For restricted security (recommended for production)\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: restricted-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\nEOF\n\n# Example secure pod configuration\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secure-pod\n  namespace: restricted-namespace\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    runAsGroup: 3000\n    fsGroup: 2000\n    seccompProfile:\n      type: RuntimeDefault\n  containers:\n  - name: app\n    image: nginx:latest\n    securityContext:\n      allowPrivilegeEscalation: false\n      readOnlyRootFilesystem: true\n      capabilities:\n        drop:\n        - ALL\n    ports:\n    - containerPort: 80\n    volumeMounts:\n    - name: tmp-volume\n      mountPath: /tmp\n    - name: cache-volume\n      mountPath: /var/cache/nginx\n  volumes:\n  - name: tmp-volume\n    emptyDir: {}\n  - name: cache-volume\n    emptyDir: {}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-policies\" class=\"mobile-header\">Network Policies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Default deny all network policy\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\nEOF\n\n# Allow specific communication\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-nginx-ingress\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: nginx\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    ports:\n    - protocol: TCP\n      port: 80\nEOF\n\n# Allow egress for DNS\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-dns-egress\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  - to: []\n    ports:\n    - protocol: UDP\n      port: 53\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"etcd-security\" class=\"mobile-header\">etcd Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check etcd encryption at rest\nkubectl get secrets --all-namespaces -o json | kubectl replace -f-\n\n# Create encryption configuration\ncat &lt;&lt;EOF | sudo tee /etc/kubernetes/enc.yaml\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  - configmaps\n  - pandas.awesome.bears.example\n  providers:\n  - aescbc:\n      keys:\n      - name: key1\n        secret: $(head -c 32 /dev/urandom | base64)\n  - identity: {}\nEOF\n\n# Update kube-apiserver configuration\nsudo sed -i &#039;/--encryption-provider-config=/d&#039; /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i &#039;/- kube-apiserver/a\\    - --encryption-provider-config=/etc/kubernetes/enc.yaml&#039; /etc/kubernetes/manifests/kube-apiserver.yaml\n\n# Mount encryption config in kube-apiserver\nsudo sed -i &#039;/volumeMounts:/a\\    - mountPath: /etc/kubernetes/enc.yaml\\n      name: encryption-config\\n      readOnly: true&#039; /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i &#039;/volumes:/a\\  - hostPath:\\n      path: /etc/kubernetes/enc.yaml\\n      type: FileOrCreate\\n    name: encryption-config&#039; /etc/kubernetes/manifests/kube-apiserver.yaml</code></pre>\n      </div>\n    </div>\n<h2 id=\"alternative-installation-methods\" class=\"mobile-header\">Alternative Installation Methods</h2>\n<h3 id=\"k3s-lightweight-kubernetes\" class=\"mobile-header\">k3s (Lightweight Kubernetes)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install k3s on control plane\ncurl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644\n\n# Get node token for workers\nsudo cat /var/lib/rancher/k3s/server/node-token\n\n# Install on worker nodes\ncurl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\nsudo chown $(id -u):$(id -g) ~/.kube/config\nexport KUBECONFIG=~/.kube/config\n\n# Verify cluster\nkubectl get nodes</code></pre>\n      </div>\n    </div>\n<h3 id=\"k0s-zero-deps-kubernetes\" class=\"mobile-header\">k0s (Zero-deps Kubernetes)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download k0s\ncurl -sSLf https://get.k0s.sh | sudo sh\n\n# Initialize controller\nsudo k0s install controller --single\n\n# Start k0s\nsudo systemctl start k0scontroller\n\n# Generate worker join token\nsudo k0s token create --role=worker\n\n# On worker nodes:\nsudo k0s install worker --token-file /path/to/token/file\nsudo systemctl start k0sworker\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo k0s kubeconfig admin &gt; ~/.kube/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"microk8s-ubuntusnap\" class=\"mobile-header\">MicroK8s (Ubuntu/Snap)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MicroK8s\nsudo snap install microk8s --classic\n\n# Add user to microk8s group\nsudo usermod -a -G microk8s $USER\nsudo chown -f -R $USER ~/.kube\nnewgrp microk8s\n\n# Enable essential addons\nmicrok8s enable dns dashboard storage\n\n# Configure kubectl alias\necho &#039;alias kubectl=&quot;microk8s kubectl&quot;&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Get cluster info\nmicrok8s kubectl cluster-info</code></pre>\n      </div>\n    </div>\n<h3 id=\"minikube-development\" class=\"mobile-header\">Minikube (Development)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Start cluster with specific configuration\nminikube start \\\n  --driver=containerd \\\n  --cpus=4 \\\n  --memory=8g \\\n  --disk-size=50g \\\n  --kubernetes-version=v1.29.0\n\n# Enable addons\nminikube addons enable dashboard\nminikube addons enable metrics-server\nminikube addons enable ingress\nminikube addons enable registry\n\n# Configure kubectl context\nkubectl config use-context minikube\n\n# Access dashboard\nminikube dashboard</code></pre>\n      </div>\n    </div>\n<h2 id=\"essential-add-ons-installation\" class=\"mobile-header\">Essential Add-ons Installation</h2>\n<h3 id=\"metrics-server\" class=\"mobile-header\">Metrics Server</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install metrics-server for resource monitoring\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\n# For development clusters, may need to add --kubelet-insecure-tls\nkubectl patch deployment metrics-server -n kube-system --type=&#039;json&#039; -p=&#039;[{&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/args/-&quot;, &quot;value&quot;: &quot;--kubelet-insecure-tls&quot;}]&#039;\n\n# Verify metrics server\nkubectl top nodes\nkubectl top pods --all-namespaces</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-dashboard\" class=\"mobile-header\">Kubernetes Dashboard</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n# Create admin service account\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\nEOF\n\n# Get access token\nkubectl -n kubernetes-dashboard create token admin-user\n\n# Access dashboard\nkubectl proxy &amp;\n# Visit: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code></pre>\n      </div>\n    </div>\n<h3 id=\"ingress-controller-nginx\" class=\"mobile-header\">Ingress Controller (NGINX)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX Ingress Controller\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml\n\n# For bare metal installations\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/baremetal/deploy.yaml\n\n# Verify installation\nkubectl get pods -n ingress-nginx\nkubectl get svc -n ingress-nginx\n\n# Create sample ingress\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: &quot;true&quot;\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - example.com\n    secretName: example-tls\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: web-service\n            port:\n              number: 80\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-ingress-controller-configuration\" class=\"mobile-header\">NGINX Ingress Controller Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX Ingress Controller with custom configuration\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ingress-nginx\n---\napiVersion: helm.cattle.io/v1\nkind: HelmChart\nmetadata:\n  name: ingress-nginx\n  namespace: ingress-nginx\nspec:\n  chart: ingress-nginx\n  repo: https://kubernetes.github.io/ingress-nginx\n  targetNamespace: ingress-nginx\n  valuesContent: |-\n    controller:\n      replicaCount: 2\n      service:\n        type: LoadBalancer\n        externalTrafficPolicy: Local\n      config:\n        ssl-redirect: &quot;true&quot;\n        force-ssl-redirect: &quot;true&quot;\n        ssl-protocols: &quot;TLSv1.2 TLSv1.3&quot;\n        ssl-ciphers: &quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384&quot;\n        client-body-buffer-size: &quot;64k&quot;\n        client-body-timeout: &quot;60&quot;\n        client-header-timeout: &quot;60&quot;\n        large-client-header-buffers: &quot;4 64k&quot;\n        proxy-body-size: &quot;50m&quot;\n        server-name-hash-bucket-size: &quot;128&quot;\n      metrics:\n        enabled: true\n        serviceMonitor:\n          enabled: true\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"traefik-ingress-controller\" class=\"mobile-header\">Traefik Ingress Controller</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Traefik with custom configuration\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: traefik-system\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: traefik\n  namespace: argocd\nspec:\n  project: default\n  source:\n    chart: traefik\n    repoURL: https://traefik.github.io/charts\n    targetRevision: 21.1.0\n    helm:\n      values: |\n        deployment:\n          replicas: 2\n        service:\n          type: LoadBalancer\n        ingressRoute:\n          dashboard:\n            enabled: true\n        logs:\n          general:\n            level: INFO\n          access:\n            enabled: true\n        metrics:\n          prometheus:\n            enabled: true\n        certificatesResolvers:\n          letsencrypt:\n            acme:\n              email: admin@example.com\n              storage: /data/acme.json\n              httpChallenge:\n                entryPoint: web\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: traefik-system\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-load-balancer-for-api-server\" class=\"mobile-header\">HAProxy Load Balancer for API Server</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install HAProxy for external load balancing\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: haproxy-config\n  namespace: kube-system\ndata:\n  haproxy.cfg: |\n    global\n        log stdout local0\n        daemon\n        \n    defaults\n        mode tcp\n        log global\n        option tcplog\n        timeout connect 5000ms\n        timeout client 50000ms\n        timeout server 50000ms\n        \n    frontend k8s-api-frontend\n        bind *:6443\n        mode tcp\n        default_backend k8s-api-backend\n        \n    backend k8s-api-backend\n        mode tcp\n        balance roundrobin\n        option tcp-check\n        server master1 10.0.1.10:6443 check\n        server master2 10.0.1.11:6443 check\n        server master3 10.0.1.12:6443 check\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: haproxy-lb\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app: haproxy-lb\n  template:\n    metadata:\n      labels:\n        app: haproxy-lb\n    spec:\n      hostNetwork: true\n      containers:\n      - name: haproxy\n        image: haproxy:2.8-alpine\n        ports:\n        - containerPort: 6443\n          hostPort: 6443\n        volumeMounts:\n        - name: haproxy-config\n          mountPath: /usr/local/etc/haproxy\n      volumes:\n      - name: haproxy-config\n        configMap:\n          name: haproxy-config\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-statefulset-with-ha\" class=\"mobile-header\">PostgreSQL StatefulSet with HA</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy PostgreSQL cluster with replication\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: postgresql\n---\napiVersion: postgresql.cnpg.io/v1\nkind: Cluster\nmetadata:\n  name: postgresql-cluster\n  namespace: postgresql\nspec:\n  instances: 3\n  primaryUpdateStrategy: unsupervised\n  \n  postgresql:\n    parameters:\n      max_connections: &quot;200&quot;\n      shared_buffers: &quot;256MB&quot;\n      effective_cache_size: &quot;1GB&quot;\n      maintenance_work_mem: &quot;64MB&quot;\n      checkpoint_completion_target: &quot;0.9&quot;\n      wal_buffers: &quot;16MB&quot;\n      default_statistics_target: &quot;100&quot;\n      random_page_cost: &quot;1.1&quot;\n      effective_io_concurrency: &quot;200&quot;\n      \n  bootstrap:\n    initdb:\n      database: app_database\n      owner: app_user\n      secret:\n        name: postgresql-credentials\n        \n  storage:\n    storageClass: &quot;fast-ssd&quot;\n    size: &quot;100Gi&quot;\n    \n  monitoring:\n    enabled: true\n    \n  backup:\n    retentionPolicy: &quot;30d&quot;\n    barmanObjectStore:\n      destinationPath: s3://postgresql-backups/cluster1\n      s3Credentials:\n        accessKeyId:\n          name: backup-credentials\n          key: ACCESS_KEY_ID\n        secretAccessKey:\n          name: backup-credentials\n          key: SECRET_ACCESS_KEY\n      wal:\n        retention: &quot;5d&quot;\n      data:\n        retention: &quot;30d&quot;\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: postgresql-credentials\n  namespace: postgresql\ntype: kubernetes.io/basic-auth\ndata:\n  username: $(echo -n &#039;app_user&#039; | base64)\n  password: $(echo -n &#039;secure_database_password_123!&#039; | base64)\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-cluster-with-percona-operator\" class=\"mobile-header\">MySQL Cluster with Percona Operator</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy MySQL cluster using Percona Operator\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: mysql\n---\napiVersion: pxc.percona.com/v1-12-0\nkind: PerconaXtraDBCluster\nmetadata:\n  name: mysql-cluster\n  namespace: mysql\nspec:\n  crVersion: 1.12.0\n  allowUnsafeConfigurations: false\n  secretsName: mysql-secrets\n  vaultSecretName: &quot;&quot;\n  sslSecretName: &quot;&quot;\n  sslInternalSecretName: &quot;&quot;\n  logCollectorSecretName: &quot;&quot;\n  \n  pxc:\n    size: 3\n    image: percona/percona-xtradb-cluster:8.0.32-24.2\n    autoRecovery: true\n    configuration: |\n      [mysqld]\n      wsrep_provider_options=&quot;debug=1;gcache.size=1G;gcache.page_size=1G&quot;\n      wsrep_debug=1\n      wsrep_cluster_address=gcomm://\n      binlog_format=ROW\n      default_storage_engine=InnoDB\n      innodb_autoinc_lock_mode=2\n      innodb_locks_unsafe_for_binlog=1\n      max_connections=350\n      innodb_buffer_pool_size=512M\n      \n    resources:\n      requests:\n        memory: 1G\n        cpu: 600m\n      limits:\n        memory: 1G\n        cpu: &quot;1&quot;\n        \n    volumeSpec:\n      persistentVolumeClaim:\n        storageClassName: fast-ssd\n        accessModes: [ &quot;ReadWriteOnce&quot; ]\n        resources:\n          requests:\n            storage: 80Gi\n            \n    affinity:\n      antiAffinityTopologyKey: &quot;kubernetes.io/hostname&quot;\n      \n  haproxy:\n    enabled: true\n    size: 2\n    image: percona/percona-xtradb-cluster-operator:1.12.0-haproxy\n    \n    resources:\n      requests:\n        memory: 256M\n        cpu: 250m\n      limits:\n        memory: 256M\n        cpu: 500m\n        \n  proxysql:\n    enabled: false\n    \n  backup:\n    image: percona/percona-xtradb-cluster-operator:1.12.0-pxc8.0-backup\n    schedule:\n      - name: &quot;daily-backup&quot;\n        schedule: &quot;0 2 * * *&quot;\n        keep: 7\n        storageName: s3-backup-storage\n        \n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secrets\n  namespace: mysql\ntype: Opaque\ndata:\n  root: $(echo -n &#039;secure_mysql_root_password!&#039; | base64)\n  xtrabackup: $(echo -n &#039;backup_password_123!&#039; | base64)\n  monitor: $(echo -n &#039;monitor_user_password!&#039; | base64)\n  clustercheck: $(echo -n &#039;cluster_check_password!&#039; | base64)\n  proxysql: $(echo -n &#039;proxysql_admin_password!&#039; | base64)\n  operator: $(echo -n &#039;operator_user_password!&#039; | base64)\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-cluster-deployment\" class=\"mobile-header\">Redis Cluster Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy Redis cluster with Redis Operator\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: redis\n---\napiVersion: redis.redis.opstreelabs.in/v1beta1\nkind: RedisCluster\nmetadata:\n  name: redis-cluster\n  namespace: redis\nspec:\n  clusterSize: 6\n  clusterVersion: v7\n  persistenceEnabled: true\n  redisSecret:\n    name: redis-secret\n    key: password\n  redisConfig:\n    redis-config: |\n      maxmemory 512mb\n      maxmemory-policy allkeys-lru\n      save 900 1\n      save 300 10\n      save 60 10000\n      tcp-keepalive 60\n      tcp-backlog 8192\n      timeout 300\n      \n  storage:\n    volumeClaimTemplate:\n      spec:\n        accessModes: [&quot;ReadWriteOnce&quot;]\n        storageClassName: fast-ssd\n        resources:\n          requests:\n            storage: 50Gi\n            \n  resources:\n    requests:\n      memory: 512Mi\n      cpu: 250m\n    limits:\n      memory: 512Mi\n      cpu: 500m\n      \n  nodeSelector:\n    node-type: &quot;redis-optimized&quot;\n    \n  podSecurityContext:\n    runAsUser: 1000\n    runAsGroup: 1000\n    fsGroup: 1000\n    \n  securityContext:\n    allowPrivilegeEscalation: false\n    readOnlyRootFilesystem: true\n    runAsNonRoot: true\n    capabilities:\n      drop:\n      - ALL\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-secret\n  namespace: redis\ntype: Opaque\ndata:\n  password: $(echo -n &#039;secure_redis_password_123!&#039; | base64)\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"storage-configuration\" class=\"mobile-header\">Storage Configuration</h2>\n<h3 id=\"persistent-volumes-and-storage-classes\" class=\"mobile-header\">Persistent Volumes and Storage Classes</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create local storage class\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: local-storage\nprovisioner: kubernetes.io/no-provisioner\nvolumeBindingMode: WaitForFirstConsumer\nallowVolumeExpansion: true\nreclaimPolicy: Delete\nEOF\n\n# Create persistent volume\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: local-pv-1\nspec:\n  capacity:\n    storage: 10Gi\n  volumeMode: Filesystem\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Delete\n  storageClassName: local-storage\n  local:\n    path: /mnt/disk1\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/hostname\n          operator: In\n          values:\n          - node-1\nEOF\n\n# Create persistent volume claim\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: app-data-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: local-storage\n  resources:\n    requests:\n      storage: 5Gi\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"nfs-storage-shared-volumes\" class=\"mobile-header\">NFS Storage (Shared volumes)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NFS client utilities (all nodes)\n# Ubuntu/Debian\nsudo apt install -y nfs-common\n\n# RHEL/CentOS\nsudo yum install -y nfs-utils\n\n# Create NFS storage class\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: nfs-storage\nprovisioner: example.com/nfs\nparameters:\n  server: 192.168.1.200\n  path: /exported/path\n  readOnly: &quot;false&quot;\nreclaimPolicy: Retain\nallowVolumeExpansion: true\nmountOptions:\n  - hard\n  - nfsvers=4.1\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration-cross-platform\" class=\"mobile-header\">Firewall Configuration (Cross-Platform)</h2>\n<h3 id=\"required-ports\" class=\"mobile-header\">Required Ports</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Control plane ports\nsudo firewall-cmd --permanent --add-port=6443/tcp    # API server\nsudo firewall-cmd --permanent --add-port=2379-2380/tcp  # etcd\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=10259/tcp  # kube-scheduler\nsudo firewall-cmd --permanent --add-port=10257/tcp  # kube-controller-manager\n\n# Worker node ports\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=30000-32767/tcp  # NodePort services\n\n# CNI ports (Flannel)\nsudo firewall-cmd --permanent --add-port=8285/udp   # Flannel\nsudo firewall-cmd --permanent --add-port=8472/udp   # Flannel VXLAN\n\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 6443/tcp\nsudo ufw allow 2379:2380/tcp\nsudo ufw allow 10250/tcp\nsudo ufw allow 10259/tcp\nsudo ufw allow 10257/tcp\nsudo ufw allow 30000:32767/tcp\nsudo ufw allow 8285/udp\nsudo ufw allow 8472/udp\n\n# iptables (manual configuration)\nsudo iptables -A INPUT -p tcp --dport 6443 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 2379:2380 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 10250 -j ACCEPT</code></pre>\n      </div>\n    </div>\n<h3 id=\"selinux-configuration-rhelcentos\" class=\"mobile-header\">SELinux Configuration (RHEL/CentOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure SELinux for Kubernetes\nsudo setenforce 0\nsudo sed -i &#039;s/^SELINUX=enforcing$/SELINUX=permissive/&#039; /etc/selinux/config\n\n# Alternative: Configure SELinux policies instead of disabling\nsudo setsebool -P container_manage_cgroup true\nsudo setsebool -P container_use_cgroup true\n\n# Install SELinux policies for containers\nsudo yum install -y container-selinux\n\n# Check for denials\nsudo ausearch -m AVC,USER_AVC -ts recent</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h2>\n<h3 id=\"multi-master-cluster-with-kubeadm\" class=\"mobile-header\">Multi-Master Cluster with kubeadm</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># On first control plane node\nsudo kubeadm init \\\n  --control-plane-endpoint=&quot;k8s-cluster.example.com:6443&quot; \\\n  --upload-certs \\\n  --pod-network-cidr=10.244.0.0/16\n\n# Note the commands to join additional control plane nodes and workers\n\n# On additional control plane nodes:\nsudo kubeadm join k8s-cluster.example.com:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234... \\\n  --control-plane \\\n  --certificate-key 1234...\n\n# Configure load balancer (HAProxy example)\ncat &lt;&lt;EOF | sudo tee /etc/haproxy/haproxy.cfg\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode tcp\n    log global\n    option tcplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend k8s-api\n    bind *:6443\n    mode tcp\n    default_backend k8s-api-backend\n\nbackend k8s-api-backend\n    mode tcp\n    balance roundrobin\n    server k8s-master-1 192.168.1.101:6443 check\n    server k8s-master-2 192.168.1.102:6443 check\n    server k8s-master-3 192.168.1.103:6443 check\nEOF\n\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-etcd-cluster\" class=\"mobile-header\">External etcd Cluster</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install etcd on dedicated nodes\nETCD_VER=v3.5.9\ncurl -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzf etcd-${ETCD_VER}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VER}-linux-amd64/{etcd,etcdctl} /usr/local/bin/\n\n# Create etcd configuration\nsudo tee /etc/systemd/system/etcd.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=etcd\nDocumentation=https://github.com/coreos\n\n[Service]\nType=notify\nUser=etcd\nExecStart=/usr/local/bin/etcd \\\\\n  --name=etcd-1 \\\\\n  --data-dir=/var/lib/etcd \\\\\n  --listen-client-urls=https://192.168.1.201:2379 \\\\\n  --advertise-client-urls=https://192.168.1.201:2379 \\\\\n  --listen-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-advertise-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-cluster=etcd-1=https://192.168.1.201:2380,etcd-2=https://192.168.1.202:2380,etcd-3=https://192.168.1.203:2380 \\\\\n  --initial-cluster-token=etcd-cluster-1 \\\\\n  --initial-cluster-state=new \\\\\n  --cert-file=/etc/etcd/pki/server.crt \\\\\n  --key-file=/etc/etcd/pki/server.key \\\\\n  --peer-cert-file=/etc/etcd/pki/peer.crt \\\\\n  --peer-key-file=/etc/etcd/pki/peer.key \\\\\n  --trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-client-cert-auth \\\\\n  --client-cert-auth\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create etcd user and directories\nsudo useradd -r etcd\nsudo mkdir -p /var/lib/etcd /etc/etcd/pki\nsudo chown etcd:etcd /var/lib/etcd\nsudo systemctl enable --now etcd</code></pre>\n      </div>\n    </div>\n<h2 id=\"application-deployment-examples\" class=\"mobile-header\">Application Deployment Examples</h2>\n<h3 id=\"secure-application-deployment\" class=\"mobile-header\">Secure Application Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create namespace with network policies\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: myapp\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: myapp-sa\n  namespace: myapp\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: myapp\n  name: myapp-role\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;configmaps&quot;, &quot;secrets&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: myapp-rolebinding\n  namespace: myapp\nsubjects:\n- kind: ServiceAccount\n  name: myapp-sa\n  namespace: myapp\nroleRef:\n  kind: Role\n  name: myapp-role\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-deployment\n  namespace: myapp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      serviceAccountName: myapp-sa\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        runAsGroup: 3000\n        fsGroup: 2000\n        seccompProfile:\n          type: RuntimeDefault\n      containers:\n      - name: app\n        image: nginx:alpine\n        ports:\n        - containerPort: 80\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n        resources:\n          requests:\n            memory: &quot;64Mi&quot;\n            cpu: &quot;250m&quot;\n          limits:\n            memory: &quot;128Mi&quot;\n            cpu: &quot;500m&quot;\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        volumeMounts:\n        - name: tmp-volume\n          mountPath: /tmp\n        - name: cache-volume\n          mountPath: /var/cache/nginx\n      volumes:\n      - name: tmp-volume\n        emptyDir: {}\n      - name: cache-volume\n        emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-service\n  namespace: myapp\nspec:\n  selector:\n    app: myapp\n  ports:\n  - port: 80\n    targetPort: 80\n  type: ClusterIP\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"statefulset-with-persistent-storage\" class=\"mobile-header\">StatefulSet with Persistent Storage</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy StatefulSet application (database example)\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql-statefulset\n  namespace: myapp\nspec:\n  serviceName: mysql-service\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      securityContext:\n        runAsUser: 999\n        runAsGroup: 999\n        fsGroup: 999\n      containers:\n      - name: mysql\n        image: mysql:8.0\n        ports:\n        - containerPort: 3306\n          name: mysql\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: root-password\n        volumeMounts:\n        - name: mysql-storage\n          mountPath: /var/lib/mysql\n        resources:\n          requests:\n            memory: &quot;1Gi&quot;\n            cpu: &quot;500m&quot;\n          limits:\n            memory: &quot;2Gi&quot;\n            cpu: &quot;1000m&quot;\n  volumeClaimTemplates:\n  - metadata:\n      name: mysql-storage\n    spec:\n      accessModes: [&quot;ReadWriteOnce&quot;]\n      storageClassName: &quot;local-storage&quot;\n      resources:\n        requests:\n          storage: 10Gi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-service\n  namespace: myapp\nspec:\n  clusterIP: None\n  selector:\n    app: mysql\n  ports:\n  - port: 3306\n    targetPort: 3306\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secret\n  namespace: myapp\ntype: Opaque\ndata:\n  root-password: $(echo -n &#039;secure_mysql_password&#039; | base64)\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"etcd-backup\" class=\"mobile-header\">etcd Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create etcd backup script\nsudo tee /usr/local/bin/etcd-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/etcd&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create etcd snapshot\nETCDCTL_API=3 etcdctl snapshot save ${BACKUP_DIR}/etcd-backup-${DATE}.db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Verify snapshot\nETCDCTL_API=3 etcdctl snapshot status ${BACKUP_DIR}/etcd-backup-${DATE}.db -w table\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;etcd-backup-*.db&quot; -type f -mtime +7 -delete\n\necho &quot;etcd backup completed: etcd-backup-${DATE}.db&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/etcd-backup.sh\n\n# Schedule backup\necho &quot;0 2 * * * root /usr/local/bin/etcd-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"cluster-state-backup\" class=\"mobile-header\">Cluster State Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup all cluster resources\nkubectl get all --all-namespaces -o yaml &gt; cluster-backup-$(date +%Y%m%d).yaml\n\n# Backup specific resource types\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml &gt; cluster-data-backup-$(date +%Y%m%d).yaml\n\n# Create backup script for all resources\nsudo tee /usr/local/bin/k8s-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/kubernetes&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup all cluster resources\nkubectl get all --all-namespaces -o yaml &gt; ${BACKUP_DIR}/cluster-all-${DATE}.yaml\n\n# Backup critical resources separately\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml &gt; ${BACKUP_DIR}/cluster-data-${DATE}.yaml\n\n# Backup custom resources\nkubectl get crd -o yaml &gt; ${BACKUP_DIR}/cluster-crd-${DATE}.yaml\n\n# Backup RBAC\nkubectl get clusterroles,clusterrolebindings,roles,rolebindings --all-namespaces -o yaml &gt; ${BACKUP_DIR}/cluster-rbac-${DATE}.yaml\n\n# etcd backup\n/usr/local/bin/etcd-backup.sh\n\n# Compress backups\ntar -czf ${BACKUP_DIR}/k8s-complete-backup-${DATE}.tar.gz ${BACKUP_DIR}/*-${DATE}.yaml\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;*-${DATE:0:8}*&quot; -type f -mtime +7 -delete\n\necho &quot;Kubernetes backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/k8s-backup.sh\necho &quot;0 3 * * * root /usr/local/bin/k8s-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-testing\" class=\"mobile-header\">Verification and Testing</h2>\n<h3 id=\"cluster-health-checks\" class=\"mobile-header\">Cluster Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check cluster components\nkubectl get componentstatuses\nkubectl cluster-info\nkubectl get nodes -o wide\n\n# Check all pods in system namespaces\nkubectl get pods --all-namespaces\nkubectl get events --all-namespaces --sort-by=.metadata.creationTimestamp\n\n# Test DNS resolution\nkubectl run test-dns --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default\n\n# Test pod networking\nkubectl run test-pod-1 --image=nginx --port=80\nkubectl expose pod test-pod-1 --port=80 --type=ClusterIP\nkubectl run test-pod-2 --image=busybox --rm -it --restart=Never -- wget -qO- test-pod-1\n\n# Check resource usage\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Verify RBAC\nkubectl auth can-i create deployments\nkubectl auth can-i get secrets --as=system:serviceaccount:default:default\n\n# Test persistent storage\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: test-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-storage-pod\nspec:\n  containers:\n  - name: app\n    image: busybox\n    command: [&#039;sh&#039;, &#039;-c&#039;, &#039;echo &quot;Storage test&quot; &gt; /data/test.txt &amp;&amp; cat /data/test.txt &amp;&amp; sleep 3600&#039;]\n    volumeMounts:\n    - name: storage\n      mountPath: /data\n  volumes:\n  - name: storage\n    persistentVolumeClaim:\n      claimName: test-pvc\nEOF\n\nkubectl logs test-storage-pod\nkubectl delete pod test-storage-pod\nkubectl delete pvc test-pvc</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-validation\" class=\"mobile-header\">Security Validation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run CIS Kubernetes Benchmark\ndocker run --rm -v $(pwd):/tmp aquasec/kube-bench:latest run --targets master,node,etcd,policies\n\n# Check pod security policies\nkubectl get psp  # For older versions\nkubectl get podsecuritypolicies  # For older versions\n\n# Verify network policies are working\nkubectl describe networkpolicy default-deny-all\n\n# Check for privileged containers\nkubectl get pods --all-namespaces -o jsonpath=&#039;{range .items[*]}{.metadata.name}{&quot;\\t&quot;}{.spec.securityContext.privileged}{&quot;\\n&quot;}{end}&#039; | grep true\n\n# Audit security contexts\nkubectl get pods --all-namespaces -o jsonpath=&#039;{range .items[*]}{.metadata.namespace}{&quot;\\t&quot;}{.metadata.name}{&quot;\\t&quot;}{.spec.securityContext}{&quot;\\n&quot;}{end}&#039;\n\n# Check for containers running as root\nkubectl get pods --all-namespaces -o jsonpath=&#039;{range .items[*]}{.metadata.name}{&quot;\\t&quot;}{.spec.containers[*].securityContext.runAsUser}{&quot;\\n&quot;}{end}&#039; | grep -E &#039;\\t0$|\\t$&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting-cross-platform\" class=\"mobile-header\">6. Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Node not ready issues\nkubectl describe node &lt;node-name&gt;\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Check kubelet logs\nsudo journalctl -u kubelet -f\n\n# Check container runtime\nsudo systemctl status containerd\nsudo crictl pods\n\n# Network issues\nkubectl get pods -n kube-system\nkubectl describe pod &lt;cni-pod-name&gt; -n kube-system\n\n# Permission issues (SELinux)\nsudo ausearch -m AVC -ts recent\nsudo setsebool -P container_manage_cgroup true\n\n# Certificate issues\nsudo kubeadm certs check-expiration\nopenssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout\n\n# Resource exhaustion\nkubectl describe node &lt;node-name&gt;\nkubectl top nodes\nkubectl top pods --all-namespaces --sort-by=memory\n\n# etcd issues\nsudo etcdctl endpoint health \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Reset cluster (if needed)\nsudo kubeadm reset\nsudo rm -rf /etc/cni/net.d\nsudo rm -rf $HOME/.kube/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-pod-issues\" class=\"mobile-header\">Debug Pod Issues</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug failing pods\nkubectl describe pod &lt;pod-name&gt;\nkubectl logs &lt;pod-name&gt; -c &lt;container-name&gt;\nkubectl get events --field-selector involvedObject.name=&lt;pod-name&gt;\n\n# Debug networking\nkubectl run debug-pod --image=nicolaka/netshoot --rm -it --restart=Never\n\n# Check resource constraints\nkubectl describe resourcequota -n &lt;namespace&gt;\nkubectl describe limitrange -n &lt;namespace&gt;\n\n# Debug storage issues\nkubectl describe pvc &lt;pvc-name&gt;\nkubectl get events --field-selector involvedObject.name=&lt;pvc-name&gt;\n\n# Debug service connectivity\nkubectl run debug --image=busybox --rm -it --restart=Never -- nslookup &lt;service-name&gt;\nkubectl get endpoints &lt;service-name&gt;\n\n# Debug ingress issues\nkubectl describe ingress &lt;ingress-name&gt;\nkubectl get events --field-selector involvedObject.name=&lt;ingress-name&gt;\nkubectl logs -n ingress-nginx deployment/ingress-nginx-controller</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-level-tuning\" class=\"mobile-header\">System-Level Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel optimization for Kubernetes\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;EOF\n# Kubernetes performance tuning\nnet.core.somaxconn = 32768\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.tcp_max_tw_buckets = 2000000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 1024 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 134217728\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 134217728\nnet.ipv4.tcp_rmem = 4096 87380 134217728\nnet.ipv4.tcp_wmem = 4096 65536 134217728\nfs.file-max = 2097152\nfs.inotify.max_user_instances = 8192\nfs.inotify.max_user_watches = 1048576\nvm.swappiness = 0\nvm.overcommit_memory = 1\nvm.dirty_ratio = 80\nvm.dirty_background_ratio = 5\nkernel.pid_max = 4194304\nEOF\n\nsudo sysctl -p\n\n# Set resource limits\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;EOF\nroot soft nofile 65536\nroot hard nofile 65536\n* soft nofile 65536\n* hard nofile 65536\n* soft nproc 65536\n* hard nproc 65536\nEOF\n\n# Configure systemd limits for containerd and kubelet\nsudo mkdir -p /etc/systemd/system/containerd.service.d/\nsudo tee /etc/systemd/system/containerd.service.d/limits.conf &gt; /dev/null &lt;&lt;EOF\n[Service]\nLimitNOFILE=1048576\nLimitNPROC=1048576\nLimitCORE=infinity\nOOMScoreAdjust=-999\nEOF\n\nsudo mkdir -p /etc/systemd/system/kubelet.service.d/\nsudo tee /etc/systemd/system/kubelet.service.d/limits.conf &gt; /dev/null &lt;&lt;EOF\n[Service]\nLimitNOFILE=1048576\nLimitNPROC=1048576\nLimitCORE=infinity\nOOMScoreAdjust=-999\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart containerd kubelet</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-performance-configuration\" class=\"mobile-header\">Kubernetes Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize kubelet configuration\nsudo tee /var/lib/kubelet/config.yaml &gt; /dev/null &lt;&lt;EOF\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\naddress: 0.0.0.0\nport: 10250\nreadOnlyPort: 0\nauthentication:\n  webhook:\n    enabled: true\nauthorization:\n  mode: Webhook\nclusterDomain: cluster.local\nclusterDNS:\n- 10.96.0.10\nmaxPods: 250\npodsPerCore: 10\ncgroupDriver: systemd\ncontainerLogMaxSize: 50Mi\ncontainerLogMaxFiles: 5\neventRecordQPS: 50\neventBurst: 100\nkubeAPIQPS: 50\nkubeAPIBurst: 100\nserializeImagePulls: false\nregistryPullQPS: 10\nregistryBurst: 20\nsyncFrequency: 1m\nfileCheckFrequency: 20s\nhttpCheckFrequency: 20s\nnodeStatusUpdateFrequency: 10s\nimageMinimumGCAge: 2m\nimageGCHighThresholdPercent: 85\nimageGCLowThresholdPercent: 80\nvolumeStatsAggPeriod: 1m\nsystemReserved:\n  cpu: 200m\n  memory: 512Mi\n  ephemeral-storage: 2Gi\nkubeReserved:\n  cpu: 200m\n  memory: 512Mi\n  ephemeral-storage: 2Gi\nEOF\n\n# Optimize API server configuration\nsudo sed -i &#039;/- kube-apiserver/a\\\n    - --max-requests-inflight=2000\\\n    - --max-mutating-requests-inflight=1000\\\n    - --watch-cache-sizes=nodes#100,pods#1000,replicationcontrollers#500\\\n    - --target-ram-mb=2048\\\n    - --event-ttl=168h0m0s&#039; /etc/kubernetes/manifests/kube-apiserver.yaml\n\n# Optimize etcd configuration\nsudo tee -a /etc/kubernetes/manifests/etcd.yaml &gt; /dev/null &lt;&lt;EOF\n    - --max-request-bytes=33554432\n    - --quota-backend-bytes=8589934592\n    - --snapshot-count=10000\n    - --heartbeat-interval=100\n    - --election-timeout=1000\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-client-library\" class=\"mobile-header\">Python Client Library</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># kubernetes-client example\nfrom kubernetes import client, config\nimport json\n\n# Load kubeconfig\nconfig.load_kube_config()  # or config.load_incluster_config() for in-cluster\n\n# Initialize API clients\nv1 = client.CoreV1Api()\napps_v1 = client.AppsV1Api()\nnetworking_v1 = client.NetworkingV1Api()\n\n# Create a namespace\nnamespace = client.V1Namespace(\n    metadata=client.V1ObjectMeta(name=&quot;python-app&quot;)\n)\nv1.create_namespace(body=namespace)\n\n# Create a deployment\ndeployment = client.V1Deployment(\n    metadata=client.V1ObjectMeta(name=&quot;nginx-deployment&quot;),\n    spec=client.V1DeploymentSpec(\n        replicas=3,\n        selector=client.V1LabelSelector(\n            match_labels={&quot;app&quot;: &quot;nginx&quot;}\n        ),\n        template=client.V1PodTemplateSpec(\n            metadata=client.V1ObjectMeta(\n                labels={&quot;app&quot;: &quot;nginx&quot;}\n            ),\n            spec=client.V1PodSpec(\n                containers=[\n                    client.V1Container(\n                        name=&quot;nginx&quot;,\n                        image=&quot;nginx:alpine&quot;,\n                        ports=[client.V1ContainerPort(container_port=80)],\n                        resources=client.V1ResourceRequirements(\n                            requests={&quot;cpu&quot;: &quot;100m&quot;, &quot;memory&quot;: &quot;128Mi&quot;},\n                            limits={&quot;cpu&quot;: &quot;500m&quot;, &quot;memory&quot;: &quot;512Mi&quot;}\n                        )\n                    )\n                ]\n            )\n        )\n    )\n)\n\napps_v1.create_namespaced_deployment(\n    namespace=&quot;python-app&quot;, \n    body=deployment\n)\n\n# Create a service\nservice = client.V1Service(\n    metadata=client.V1ObjectMeta(name=&quot;nginx-service&quot;),\n    spec=client.V1ServiceSpec(\n        selector={&quot;app&quot;: &quot;nginx&quot;},\n        ports=[\n            client.V1ServicePort(port=80, target_port=80)\n        ],\n        type=&quot;LoadBalancer&quot;\n    )\n)\n\nv1.create_namespaced_service(namespace=&quot;python-app&quot;, body=service)\n\n# Monitor pods\ndef monitor_pods():\n    pods = v1.list_namespaced_pod(namespace=&quot;python-app&quot;)\n    for pod in pods.items:\n        print(f&quot;Pod: {pod.metadata.name}, Status: {pod.status.phase}&quot;)\n\nmonitor_pods()\n\n# Stream logs\ndef stream_logs(pod_name):\n    for line in v1.read_namespaced_pod_log(\n        name=pod_name, \n        namespace=&quot;python-app&quot;, \n        follow=True, \n        _preload_content=False\n    ).stream():\n        print(line.decode(&#039;utf-8&#039;), end=&#039;&#039;)\n\n# Clean up\napps_v1.delete_namespaced_deployment(name=&quot;nginx-deployment&quot;, namespace=&quot;python-app&quot;)\nv1.delete_namespaced_service(name=&quot;nginx-service&quot;, namespace=&quot;python-app&quot;)\nv1.delete_namespace(name=&quot;python-app&quot;)</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-client-example\" class=\"mobile-header\">Node.js Client Example</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// kubernetes-example.js\nconst k8s = require(&#039;@kubernetes/client-node&#039;);\n\n// Load kubeconfig\nconst kc = new k8s.KubeConfig();\nkc.loadFromDefault();\n\nconst k8sApi = kc.makeApiClient(k8s.CoreV1Api);\nconst k8sAppsApi = kc.makeApiClient(k8s.AppsV1Api);\n\nconst namespace = &#039;nodejs-app&#039;;\n\nasync function createNamespace() {\n    const namespaceManifest = {\n        metadata: {\n            name: namespace\n        }\n    };\n    \n    try {\n        await k8sApi.createNamespace(namespaceManifest);\n        console.log(`Namespace ${namespace} created`);\n    } catch (error) {\n        console.error(&#039;Error creating namespace:&#039;, error.response?.body || error.message);\n    }\n}\n\nasync function createDeployment() {\n    const deploymentManifest = {\n        metadata: {\n            name: &#039;nginx-deployment&#039;\n        },\n        spec: {\n            replicas: 3,\n            selector: {\n                matchLabels: {\n                    app: &#039;nginx&#039;\n                }\n            },\n            template: {\n                metadata: {\n                    labels: {\n                        app: &#039;nginx&#039;\n                    }\n                },\n                spec: {\n                    containers: [{\n                        name: &#039;nginx&#039;,\n                        image: &#039;nginx:alpine&#039;,\n                        ports: [{\n                            containerPort: 80\n                        }],\n                        resources: {\n                            requests: {\n                                cpu: &#039;100m&#039;,\n                                memory: &#039;128Mi&#039;\n                            },\n                            limits: {\n                                cpu: &#039;500m&#039;,\n                                memory: &#039;512Mi&#039;\n                            }\n                        }\n                    }]\n                }\n            }\n        }\n    };\n    \n    try {\n        await k8sAppsApi.createNamespacedDeployment(namespace, deploymentManifest);\n        console.log(&#039;Deployment created: nginx-deployment&#039;);\n    } catch (error) {\n        console.error(&#039;Error creating deployment:&#039;, error.response?.body || error.message);\n    }\n}\n\nasync function createService() {\n    const serviceManifest = {\n        metadata: {\n            name: &#039;nginx-service&#039;\n        },\n        spec: {\n            selector: {\n                app: &#039;nginx&#039;\n            },\n            ports: [{\n                port: 80,\n                targetPort: 80\n            }],\n            type: &#039;LoadBalancer&#039;\n        }\n    };\n    \n    try {\n        await k8sApi.createNamespacedService(namespace, serviceManifest);\n        console.log(&#039;Service created: nginx-service&#039;);\n    } catch (error) {\n        console.error(&#039;Error creating service:&#039;, error.response?.body || error.message);\n    }\n}\n\nasync function listPods() {\n    try {\n        const response = await k8sApi.listNamespacedPod(namespace);\n        console.log(`Found ${response.body.items.length} pods:`);\n        response.body.items.forEach(pod =&gt; {\n            console.log(`Pod: ${pod.metadata.name}, Status: ${pod.status.phase}`);\n        });\n    } catch (error) {\n        console.error(&#039;Error listing pods:&#039;, error.response?.body || error.message);\n    }\n}\n\nasync function cleanup() {\n    try {\n        await k8sAppsApi.deleteNamespacedDeployment(&#039;nginx-deployment&#039;, namespace);\n        await k8sApi.deleteNamespacedService(&#039;nginx-service&#039;, namespace);\n        await k8sApi.deleteNamespace(namespace);\n        console.log(&#039;Resources cleaned up&#039;);\n    } catch (error) {\n        console.error(&#039;Error during cleanup:&#039;, error.response?.body || error.message);\n    }\n}\n\nasync function main() {\n    await createNamespace();\n    await createDeployment();\n    await createService();\n    \n    // Wait a bit for pods to start\n    setTimeout(async () =&gt; {\n        await listPods();\n        await cleanup();\n    }, 5000);\n}\n\nmain().catch(console.error);</code></pre>\n      </div>\n    </div>\n<h3 id=\"java-client-example\" class=\"mobile-header\">Java Client Example</h3>\n<div class=\"mobile-code-block\" data-language=\"java\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">java</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-java\">// KubernetesExample.java\nimport io.kubernetes.client.openapi.ApiClient;\nimport io.kubernetes.client.openapi.ApiException;\nimport io.kubernetes.client.openapi.Configuration;\nimport io.kubernetes.client.openapi.apis.AppsV1Api;\nimport io.kubernetes.client.openapi.apis.CoreV1Api;\nimport io.kubernetes.client.openapi.models.*;\nimport io.kubernetes.client.util.Config;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class KubernetesExample {\n    public static void main(String[] args) throws Exception {\n        // Load kubeconfig\n        ApiClient client = Config.defaultClient();\n        Configuration.setDefaultApiClient(client);\n        \n        CoreV1Api coreV1Api = new CoreV1Api();\n        AppsV1Api appsV1Api = new AppsV1Api();\n        \n        String namespace = &quot;java-app&quot;;\n        \n        // Create namespace\n        V1Namespace ns = new V1Namespace()\n            .metadata(new V1ObjectMeta().name(namespace));\n        \n        try {\n            coreV1Api.createNamespace(ns, null, null, null, null);\n            System.out.println(&quot;Namespace created: &quot; + namespace);\n        } catch (ApiException e) {\n            System.err.println(&quot;Failed to create namespace: &quot; + e.getResponseBody());\n        }\n        \n        // Create deployment\n        Map&lt;String, String&gt; labels = new HashMap&lt;&gt;();\n        labels.put(&quot;app&quot;, &quot;nginx&quot;);\n        \n        V1Deployment deployment = new V1Deployment()\n            .metadata(new V1ObjectMeta().name(&quot;nginx-deployment&quot;))\n            .spec(new V1DeploymentSpec()\n                .replicas(3)\n                .selector(new V1LabelSelector().matchLabels(labels))\n                .template(new V1PodTemplateSpec()\n                    .metadata(new V1ObjectMeta().labels(labels))\n                    .spec(new V1PodSpec()\n                        .containers(Collections.singletonList(\n                            new V1Container()\n                                .name(&quot;nginx&quot;)\n                                .image(&quot;nginx:alpine&quot;)\n                                .ports(Collections.singletonList(\n                                    new V1ContainerPort().containerPort(80)\n                                ))\n                                .resources(new V1ResourceRequirements()\n                                    .requests(Map.of(\n                                        &quot;cpu&quot;, Quantity.fromString(&quot;100m&quot;),\n                                        &quot;memory&quot;, Quantity.fromString(&quot;128Mi&quot;)\n                                    ))\n                                    .limits(Map.of(\n                                        &quot;cpu&quot;, Quantity.fromString(&quot;500m&quot;),\n                                        &quot;memory&quot;, Quantity.fromString(&quot;512Mi&quot;)\n                                    ))\n                                )\n                        ))\n                    )\n                )\n            );\n            \n        try {\n            appsV1Api.createNamespacedDeployment(namespace, deployment, null, null, null, null);\n            System.out.println(&quot;Deployment created: nginx-deployment&quot;);\n        } catch (ApiException e) {\n            System.err.println(&quot;Failed to create deployment: &quot; + e.getResponseBody());\n        }\n        \n        // Create service\n        V1Service service = new V1Service()\n            .metadata(new V1ObjectMeta().name(&quot;nginx-service&quot;))\n            .spec(new V1ServiceSpec()\n                .selector(labels)\n                .ports(Collections.singletonList(\n                    new V1ServicePort().port(80).targetPort(new IntOrString(80))\n                ))\n                .type(&quot;LoadBalancer&quot;)\n            );\n            \n        try {\n            coreV1Api.createNamespacedService(namespace, service, null, null, null, null);\n            System.out.println(&quot;Service created: nginx-service&quot;);\n        } catch (ApiException e) {\n            System.err.println(&quot;Failed to create service: &quot; + e.getResponseBody());\n        }\n        \n        // List pods\n        try {\n            V1PodList pods = coreV1Api.listNamespacedPod(namespace, null, null, null, null, null, null, null, null, null, null);\n            System.out.println(&quot;Found &quot; + pods.getItems().size() + &quot; pods:&quot;);\n            for (V1Pod pod : pods.getItems()) {\n                System.out.println(&quot;Pod: &quot; + pod.getMetadata().getName() + \n                                 &quot;, Status: &quot; + pod.getStatus().getPhase());\n            }\n        } catch (ApiException e) {\n            System.err.println(&quot;Failed to list pods: &quot; + e.getResponseBody());\n        }\n        \n        // Cleanup\n        try {\n            appsV1Api.deleteNamespacedDeployment(&quot;nginx-deployment&quot;, namespace, null, null, null, null, null, null);\n            coreV1Api.deleteNamespacedService(&quot;nginx-service&quot;, namespace, null, null, null, null, null, null);\n            coreV1Api.deleteNamespace(namespace, null, null, null, null, null, null);\n            System.out.println(&quot;Resources cleaned up&quot;);\n        } catch (ApiException e) {\n            System.err.println(&quot;Failed to cleanup: &quot; + e.getResponseBody());\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check current Kubernetes version\nkubectl version --short\n\n# Plan upgrade with kubeadm\nsudo kubeadm upgrade plan\n\n# Upgrade kubeadm first\nsudo apt update &amp;&amp; sudo apt-mark unhold kubeadm\nsudo apt install -y kubeadm=1.29.1-00\nsudo apt-mark hold kubeadm\n\n# Or for RHEL/CentOS\nsudo yum update -y kubeadm-1.29.1\n\n# Upgrade control plane\nsudo kubeadm upgrade apply v1.29.1\n\n# Upgrade kubelet and kubectl\nsudo apt-mark unhold kubelet kubectl\nsudo apt install -y kubelet=1.29.1-00 kubectl=1.29.1-00\nsudo apt-mark hold kubelet kubectl\n\nsudo systemctl daemon-reload\nsudo systemctl restart kubelet\n\n# Drain and upgrade worker nodes\nkubectl drain &lt;worker-node&gt; --ignore-daemonsets --delete-emptydir-data\n# On worker node:\nsudo kubeadm upgrade node\nsudo apt install -y kubelet=1.29.1-00 kubectl=1.29.1-00\nsudo systemctl daemon-reload\nsudo systemctl restart kubelet\n\n# Uncordon worker node\nkubectl uncordon &lt;worker-node&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# k8s-maintenance.sh\n\n# Check cluster health\necho &quot;=== Cluster Health Check ===&quot;\nkubectl get nodes -o wide\nkubectl get pods --all-namespaces | grep -v Running | grep -v Completed\n\n# Check resource usage\necho &quot;=== Resource Usage ===&quot;\nkubectl top nodes\nkubectl top pods --all-namespaces --sort-by=cpu | head -10\n\n# Check certificate expiry\necho &quot;=== Certificate Expiry ===&quot;\nsudo kubeadm certs check-expiration\n\n# Clean up completed jobs\necho &quot;=== Cleanup ===&quot;\nkubectl get jobs --all-namespaces -o json | jq -r &#039;.items[] | select(.status.conditions[]?.type == &quot;Complete&quot;) | &quot;\\(.metadata.namespace) \\(.metadata.name)&quot;&#039; | xargs -l bash -c &#039;kubectl delete job $1 -n $0&#039;\n\n# Clean up evicted pods\nkubectl get pods --all-namespaces --field-selector=status.phase=Failed -o json | jq -r &#039;.items[] | &quot;\\(.metadata.namespace) \\(.metadata.name)&quot;&#039; | xargs -l bash -c &#039;kubectl delete pod $1 -n $0&#039;\n\n# Check for security updates\necho &quot;=== Security Updates Available ===&quot;\nsudo apt list --upgradable | grep -i security\n\n# Backup etcd\necho &quot;=== etcd Backup ===&quot;\nsudo etcdctl snapshot save /backup/etcd-$(date +%Y%m%d_%H%M%S).db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\necho &quot;Maintenance completed at: $(date)&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/reference/kubectl/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">kubectl Reference</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/concepts/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.cisecurity.org/benchmark/kubernetes\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">CIS Kubernetes Benchmark</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Kubernetes_Security_Cheat_Sheet.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">OWASP Kubernetes Security Cheat Sheet</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/kelseyhightower/kubernetes-the-hard-way\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Kubernetes The Hard Way</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.academy/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Kubernetes Academy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://landscape.cncf.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">CNCF Landscape</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"35 min","wordCount":6997,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"System Preparation (All Distributions)","id":"system-preparation-all-distributions"},{"level":3,"text":"Disable Swap (Required)","id":"disable-swap-required"},{"level":3,"text":"Configure Kernel Modules","id":"configure-kernel-modules"},{"level":2,"text":"Container Runtime Installation","id":"container-runtime-installation"},{"level":3,"text":"containerd (Recommended)","id":"containerd-recommended"},{"level":2,"text":"Kubernetes Installation","id":"kubernetes-installation"},{"level":3,"text":"kubeadm, kubelet, kubectl Installation","id":"kubeadm-kubelet-kubectl-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"First-Run Setup","id":"first-run-setup"},{"level":3,"text":"Testing Initial Setup","id":"testing-initial-setup"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"launchd (macOS with Docker Desktop)","id":"launchd-macos-with-docker-desktop"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Cluster Initialization","id":"cluster-initialization"},{"level":3,"text":"Control Plane Setup (Master Node)","id":"control-plane-setup-master-node"},{"level":3,"text":"Network Plugin Installation","id":"network-plugin-installation"},{"level":3,"text":"Worker Node Setup","id":"worker-node-setup"},{"level":2,"text":"Security Hardening (2024 Best Practices)","id":"security-hardening-2024-best-practices"},{"level":3,"text":"RBAC Configuration","id":"rbac-configuration"},{"level":3,"text":"Pod Security Standards","id":"pod-security-standards"},{"level":3,"text":"Network Policies","id":"network-policies"},{"level":3,"text":"etcd Security","id":"etcd-security"},{"level":2,"text":"Alternative Installation Methods","id":"alternative-installation-methods"},{"level":3,"text":"k3s (Lightweight Kubernetes)","id":"k3s-lightweight-kubernetes"},{"level":3,"text":"k0s (Zero-deps Kubernetes)","id":"k0s-zero-deps-kubernetes"},{"level":3,"text":"MicroK8s (Ubuntu/Snap)","id":"microk8s-ubuntusnap"},{"level":3,"text":"Minikube (Development)","id":"minikube-development"},{"level":2,"text":"Essential Add-ons Installation","id":"essential-add-ons-installation"},{"level":3,"text":"Metrics Server","id":"metrics-server"},{"level":3,"text":"Kubernetes Dashboard","id":"kubernetes-dashboard"},{"level":3,"text":"Ingress Controller (NGINX)","id":"ingress-controller-nginx"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"NGINX Ingress Controller Configuration","id":"nginx-ingress-controller-configuration"},{"level":3,"text":"Traefik Ingress Controller","id":"traefik-ingress-controller"},{"level":3,"text":"HAProxy Load Balancer for API Server","id":"haproxy-load-balancer-for-api-server"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL StatefulSet with HA","id":"postgresql-statefulset-with-ha"},{"level":3,"text":"MySQL Cluster with Percona Operator","id":"mysql-cluster-with-percona-operator"},{"level":3,"text":"Redis Cluster Deployment","id":"redis-cluster-deployment"},{"level":2,"text":"Storage Configuration","id":"storage-configuration"},{"level":3,"text":"Persistent Volumes and Storage Classes","id":"persistent-volumes-and-storage-classes"},{"level":3,"text":"NFS Storage (Shared volumes)","id":"nfs-storage-shared-volumes"},{"level":2,"text":"Firewall Configuration (Cross-Platform)","id":"firewall-configuration-cross-platform"},{"level":3,"text":"Required Ports","id":"required-ports"},{"level":3,"text":"SELinux Configuration (RHEL/CentOS)","id":"selinux-configuration-rhelcentos"},{"level":2,"text":"High Availability Setup","id":"high-availability-setup"},{"level":3,"text":"Multi-Master Cluster with kubeadm","id":"multi-master-cluster-with-kubeadm"},{"level":3,"text":"External etcd Cluster","id":"external-etcd-cluster"},{"level":2,"text":"Application Deployment Examples","id":"application-deployment-examples"},{"level":3,"text":"Secure Application Deployment","id":"secure-application-deployment"},{"level":3,"text":"StatefulSet with Persistent Storage","id":"statefulset-with-persistent-storage"},{"level":2,"text":"Backup and Disaster Recovery","id":"backup-and-disaster-recovery"},{"level":3,"text":"etcd Backup","id":"etcd-backup"},{"level":3,"text":"Cluster State Backup","id":"cluster-state-backup"},{"level":2,"text":"Verification and Testing","id":"verification-and-testing"},{"level":3,"text":"Cluster Health Checks","id":"cluster-health-checks"},{"level":3,"text":"Security Validation","id":"security-validation"},{"level":2,"text":"6. Troubleshooting (Cross-Platform)","id":"6-troubleshooting-cross-platform"},{"level":3,"text":"Common Issues and Solutions","id":"common-issues-and-solutions"},{"level":3,"text":"Debug Pod Issues","id":"debug-pod-issues"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System-Level Tuning","id":"system-level-tuning"},{"level":3,"text":"Kubernetes Performance Configuration","id":"kubernetes-performance-configuration"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Python Client Library","id":"python-client-library"},{"level":3,"text":"Node.js Client Example","id":"nodejs-client-example"},{"level":3,"text":"Java Client Example","id":"java-client-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Maintenance Tasks","id":"maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-16T18:18:58.482Z","metadataVersion":"2.0"},{"name":"minikube","displayName":"Minikube","slug":"minikube","description":"Minikube is a local Kubernetes cluster for development and testing","category":"orchestration","subcategory":"orchestration","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[8443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["kubernetes","containers","orchestration","development"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/orchestration/minikube","documentationUrl":"https://howtomgr.github.io/orchestration/minikube","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minikube","updatedAt":"2025-09-16T17:31:30Z","createdAt":"2025-09-08T03:11:15Z","readmeRaw":"# Minikube Installation Guide\n\nMinikube is a free and open-source Container Orchestration. Local Kubernetes cluster for development and testing\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 10GB minimum\n  - Network: 8443 ports required\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10 Pro\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8443 (default minikube port)\n  - Firewall rules configured\n- **Dependencies**:\n  - docker, kubectl, virtualization\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install minikube\nsudo dnf install -y minikube docker, kubectl, virtualization\n\n# Enable and start service\nsudo systemctl enable --now minikube\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=minikube || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nminikube --version || systemctl status minikube\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install minikube\nsudo apt install -y minikube docker, kubectl, virtualization\n\n# Enable and start service\nsudo systemctl enable --now minikube\n\n# Configure firewall\nsudo ufw allow 8443\n\n# Verify installation\nminikube --version || systemctl status minikube\n```\n\n### Arch Linux\n\n```bash\n# Install minikube\nsudo pacman -S minikube\n\n# Enable and start service\nsudo systemctl enable --now minikube\n\n# Verify installation\nminikube --version || systemctl status minikube\n```\n\n### Alpine Linux\n\n```bash\n# Install minikube\napk add --no-cache minikube\n\n# Enable and start service\nrc-update add minikube default\nrc-service minikube start\n\n# Verify installation\nminikube --version || rc-service minikube status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install minikube\nsudo zypper install -y minikube docker, kubectl, virtualization\n\n# Enable and start service\nsudo systemctl enable --now minikube\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=minikube || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nminikube --version || systemctl status minikube\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install minikube\n\n# Start service\nbrew services start minikube\n\n# Verify installation\nminikube --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install minikube\n\n# Enable in rc.conf\necho 'minikube_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice minikube start\n\n# Verify installation\nminikube --version || service minikube status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install minikube\n\n# Or using Scoop\nscoop install minikube\n\n# Verify installation\nminikube --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p $HOME/.minikube\n\n# Set up basic configuration\nsudo tee $HOME/.minikube/minikube.conf << 'EOF'\n# Minikube Configuration\n--cpus=4 --memory=8192 --disk-size=50g\nEOF\n\n# Set appropriate permissions\nsudo chown -R minikube:minikube $HOME/.minikube || \\\n  sudo chown -R $(whoami):$(whoami) $HOME/.minikube\n\n# Test configuration\nsudo minikube --test || sudo minikube configtest\n```\n\n### Security Hardening\n\n```bash\n# Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false minikube || true\n\n# Secure configuration files\nsudo chmod 750 $HOME/.minikube\nsudo chmod 640 $HOME/.minikube/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable minikube\n\n# Start service\nsudo systemctl start minikube\n\n# Stop service\nsudo systemctl stop minikube\n\n# Restart service\nsudo systemctl restart minikube\n\n# Reload configuration\nsudo systemctl reload minikube\n\n# Check status\nsudo systemctl status minikube\n\n# View logs\nsudo journalctl -u minikube -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add minikube default\n\n# Start service\nrc-service minikube start\n\n# Stop service\nrc-service minikube stop\n\n# Restart service\nrc-service minikube restart\n\n# Check status\nrc-service minikube status\n\n# View logs\ntail -f $HOME/.minikube/logs/minikube.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'minikube_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice minikube start\n\n# Stop service\nservice minikube stop\n\n# Restart service\nservice minikube restart\n\n# Check status\nservice minikube status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start minikube\nbrew services stop minikube\nbrew services restart minikube\n\n# Check status\nbrew services list | grep minikube\n\n# View logs\ntail -f $(brew --prefix)/var/log/minikube.log\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start minikube\n\n# Stop service\nnet stop minikube\n\n# Using PowerShell\nStart-Service minikube\nStop-Service minikube\nRestart-Service minikube\n\n# Check status\nGet-Service minikube\n\n# Set to automatic startup\nSet-Service minikube -StartupType Automatic\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> $HOME/.minikube/minikube.conf << 'EOF'\n# Performance tuning\n--cpus=4 --memory=8192 --disk-size=50g\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart minikube\n```\n\n### High Availability Setup\n\n```bash\n# Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream minikube_backend {\n    server 127.0.0.1:8443;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name minikube.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name minikube.example.com;\n\n    ssl_certificate /etc/ssl/certs/minikube.crt;\n    ssl_certificate_key /etc/ssl/private/minikube.key;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    location / {\n        proxy_pass http://minikube_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName minikube.example.com\n    Redirect permanent / https://minikube.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName minikube.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/minikube.crt\n    SSLCertificateKeyFile /etc/ssl/private/minikube.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    <Location />\n        ProxyPass http://127.0.0.1:8443/\n        ProxyPassReverse http://127.0.0.1:8443/\n    </Location>\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:8443/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nglobal\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend minikube_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/minikube.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    \n    default_backend minikube_backend\n\nbackend minikube_backend\n    balance roundrobin\n    option httpchk GET /health\n    server minikube1 127.0.0.1:8443 check\n```\n\n### Caddy Configuration\n\n```caddy\nminikube.example.com {\n    reverse_proxy 127.0.0.1:8443 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection \"1; mode=block\"\n    }\n    \n    encode gzip\n}\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Create dedicated user\nsudo useradd --system --shell /bin/false --home $HOME/.minikube minikube || true\n\n# Set ownership\nsudo chown -R minikube:minikube $HOME/.minikube\nsudo chown -R minikube:minikube $HOME/.minikube/logs\n\n# Set permissions\nsudo chmod 750 $HOME/.minikube\nsudo chmod 640 $HOME/.minikube/*\nsudo chmod 750 $HOME/.minikube/logs\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 8443 proto tcp comment \"Minikube\"\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=minikube\nsudo firewall-cmd --permanent --service=minikube --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=minikube\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 8443 || true\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/minikube.key \\\n    -out /etc/ssl/certs/minikube.crt \\\n    -subj \"/C=US/ST=State/L=City/O=Organization/CN=minikube.example.com\"\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/minikube.key\nsudo chmod 644 /etc/ssl/certs/minikube.crt\n\n# For production, use Let's Encrypt\nsudo certbot certonly --standalone -d minikube.example.com\n```\n\n### Fail2ban Configuration\n\n```ini\n# /etc/fail2ban/jail.d/minikube.conf\n[minikube]\nenabled = true\nport = 8443\nfilter = minikube\nlogpath = $HOME/.minikube/logs/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\n```\n\n```ini\n# /etc/fail2ban/filter.d/minikube.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from <HOST>.*$\n            ^.*Authentication failed.*from <HOST>.*$\n            ^.*Invalid credentials.*from <HOST>.*$\nignoreregex =\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE minikube_db;\nCREATE USER minikube_user WITH ENCRYPTED PASSWORD 'secure_password_here';\nGRANT ALL PRIVILEGES ON DATABASE minikube_db TO minikube_user;\n\\q\nEOF\n\n# Configure connection in Minikube\necho \"DATABASE_URL=postgresql://minikube_user:secure_password_here@localhost/minikube_db\" | \\\n  sudo tee -a $HOME/.minikube/minikube.env\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE minikube_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'minikube_user'@'localhost' IDENTIFIED BY 'secure_password_here';\nGRANT ALL PRIVILEGES ON minikube_db.* TO 'minikube_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho \"DATABASE_URL=mysql://minikube_user:secure_password_here@localhost/minikube_db\" | \\\n  sudo tee -a $HOME/.minikube/minikube.env\n```\n\n### SQLite Backend (if applicable)\n\n```bash\n# Create database directory\nsudo mkdir -p /var/lib/minikube\nsudo chown minikube:minikube /var/lib/minikube\n\n# Initialize database\nsudo -u minikube minikube init-db\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters for better performance\ncat << 'EOF' | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat << 'EOF' | sudo tee -a /etc/security/limits.conf\nminikube soft nofile 65535\nminikube hard nofile 65535\nminikube soft nproc 32768\nminikube hard nproc 32768\nEOF\n```\n\n### Application Tuning\n\n```bash\n# Configure application-specific performance settings\ncat << 'EOF' | sudo tee -a $HOME/.minikube/performance.conf\n# Performance configuration\n--cpus=4 --memory=8192 --disk-size=50g\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart minikube\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: 'minikube'\n    static_configs:\n      - targets: ['localhost:8443/metrics']\n    metrics_path: '/metrics'\n    scrape_interval: 30s\n```\n\n### Health Check Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/minikube-health\n\n# Check if service is running\nif ! systemctl is-active --quiet minikube; then\n    echo \"CRITICAL: Minikube service is not running\"\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 8443 2>/dev/null; then\n    echo \"CRITICAL: Minikube is not listening on port 8443\"\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:8443/health || echo \"999\")\nif (( $(echo \"$response_time > 5\" | bc -l) )); then\n    echo \"WARNING: Slow response time: ${response_time}s\"\n    exit 1\nfi\n\necho \"OK: Minikube is healthy (response time: ${response_time}s)\"\nexit 0\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\ncat << 'EOF' | sudo tee /etc/logrotate.d/minikube\n$HOME/.minikube/logs/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 minikube minikube\n    postrotate\n        systemctl reload minikube > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/minikube\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/minikube-backup\n\nBACKUP_DIR=\"/backup/minikube\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/minikube_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if needed for consistency)\necho \"Stopping Minikube service...\"\nsystemctl stop minikube\n\n# Backup configuration\necho \"Backing up configuration...\"\ntar -czf \"$BACKUP_FILE\" \\\n    $HOME/.minikube \\\n    /var/lib/minikube \\\n    $HOME/.minikube/logs\n\n# Backup database (if applicable)\nif command -v pg_dump &> /dev/null; then\n    echo \"Backing up database...\"\n    sudo -u postgres pg_dump minikube_db | gzip > \"$BACKUP_DIR/minikube_db_$DATE.sql.gz\"\nfi\n\n# Start service\necho \"Starting Minikube service...\"\nsystemctl start minikube\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\nfind \"$BACKUP_DIR\" -name \"*.sql.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_FILE\"\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/minikube-restore\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 <backup_file>\"\n    exit 1\nfi\n\nBACKUP_FILE=\"$1\"\n\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"Error: Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\n# Stop service\necho \"Stopping Minikube service...\"\nsystemctl stop minikube\n\n# Restore files\necho \"Restoring from backup...\"\ntar -xzf \"$BACKUP_FILE\" -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo \"$BACKUP_FILE\" | sed 's/.tar.gz$/_db.sql.gz/')\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"Restoring database...\"\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql minikube_db\nfi\n\n# Fix permissions\nchown -R minikube:minikube $HOME/.minikube\nchown -R minikube:minikube /var/lib/minikube\n\n# Start service\necho \"Starting Minikube service...\"\nsystemctl start minikube\n\necho \"Restore completed successfully\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check service status and logs\nsudo systemctl status minikube\nsudo journalctl -u minikube -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 8443\nsudo lsof -i :8443\n\n# Verify configuration\nsudo minikube --test || sudo minikube configtest\n\n# Check permissions\nls -la $HOME/.minikube\nls -la $HOME/.minikube/logs\n```\n\n2. **Cannot access web interface**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep minikube\ncurl -I http://localhost:8443\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 8443\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep minikube\n```\n\n3. **High memory/CPU usage**:\n```bash\n# Monitor resource usage\ntop -p $(pgrep minikube)\nhtop -p $(pgrep minikube)\n\n# Check for memory leaks\nps aux | grep minikube\ncat /proc/$(pgrep minikube)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error $HOME/.minikube/logs/*.log | tail -50\n```\n\n4. **Database connection errors**:\n```bash\n# Test database connection\npsql -U minikube_user -d minikube_db -c \"SELECT 1;\"\nmysql -u minikube_user -p minikube_db -e \"SELECT 1;\"\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho \"debug = true\" | sudo tee -a $HOME/.minikube/minikube.conf\n\n# Restart with debug mode\nsudo systemctl stop minikube\nsudo -u minikube minikube --debug\n\n# Watch debug logs\ntail -f $HOME/.minikube/logs/debug.log\n```\n\n### Performance Analysis\n\n```bash\n# Profile CPU usage\nsudo perf record -p $(pgrep minikube) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/minikube.pcap port 8443\nsudo tcpdump -r /tmp/minikube.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep minikube)\n```\n\n## Integration Examples\n\n### Docker Deployment\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  minikube:\n    image: minikube:minikube\n    container_name: minikube\n    restart: unless-stopped\n    ports:\n      - \"8443:8443\"\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:$HOME/.minikube\n      - ./data:/var/lib/minikube\n      - ./logs:$HOME/.minikube/logs\n    networks:\n      - minikube_network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8443/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  minikube_network:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\n# minikube-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: minikube\n  labels:\n    app: minikube\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: minikube\n  template:\n    metadata:\n      labels:\n        app: minikube\n    spec:\n      containers:\n      - name: minikube\n        image: minikube:minikube\n        ports:\n        - containerPort: 8443\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: $HOME/.minikube\n        - name: data\n          mountPath: /var/lib/minikube\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8443\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8443\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: minikube-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: minikube-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: minikube\nspec:\n  selector:\n    app: minikube\n  ports:\n  - protocol: TCP\n    port: 8443\n    targetPort: 8443\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: minikube-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n```\n\n### Ansible Playbook\n\n```yaml\n---\n# minikube-playbook.yml\n- name: Install and configure Minikube\n  hosts: all\n  become: yes\n  vars:\n    minikube_version: latest\n    minikube_port: 8443\n    minikube_config_dir: $HOME/.minikube\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - docker, kubectl, virtualization\n        state: present\n    \n    - name: Install Minikube\n      package:\n        name: minikube\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: \"{{ minikube_config_dir }}\"\n        state: directory\n        owner: minikube\n        group: minikube\n        mode: '0750'\n    \n    - name: Deploy configuration\n      template:\n        src: minikube.conf.j2\n        dest: \"{{ minikube_config_dir }}/minikube.conf\"\n        owner: minikube\n        group: minikube\n        mode: '0640'\n      notify: restart minikube\n    \n    - name: Start and enable service\n      systemd:\n        name: minikube\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: \"{{ minikube_port }}/tcp\"\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart minikube\n      systemd:\n        name: minikube\n        state: restarted\n```\n\n### Terraform Configuration\n\n```hcl\n# minikube.tf\nresource \"aws_instance\" \"minikube_server\" {\n  ami           = var.ami_id\n  instance_type = \"t3.medium\"\n  \n  vpc_security_group_ids = [aws_security_group.minikube.id]\n  \n  user_data = <<-EOF\n    #!/bin/bash\n    # Install Minikube\n    apt-get update\n    apt-get install -y minikube docker, kubectl, virtualization\n    \n    # Configure Minikube\n    systemctl enable minikube\n    systemctl start minikube\n  EOF\n  \n  tags = {\n    Name = \"Minikube Server\"\n    Application = \"Minikube\"\n  }\n}\n\nresource \"aws_security_group\" \"minikube\" {\n  name        = \"minikube-sg\"\n  description = \"Security group for Minikube\"\n  \n  ingress {\n    from_port   = 8443\n    to_port     = 8443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  tags = {\n    Name = \"Minikube Security Group\"\n  }\n}\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update minikube\nsudo dnf update minikube\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade minikube\n\n# Arch Linux\nsudo pacman -Syu minikube\n\n# Alpine Linux\napk update\napk upgrade minikube\n\n# openSUSE\nsudo zypper ref\nsudo zypper update minikube\n\n# FreeBSD\npkg update\npkg upgrade minikube\n\n# Always backup before updates\n/usr/local/bin/minikube-backup\n\n# Restart after updates\nsudo systemctl restart minikube\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean old logs\nfind $HOME/.minikube/logs -name \"*.log\" -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze minikube_db\n\n# Check disk usage\ndf -h | grep -E \"(/$|minikube)\"\ndu -sh /var/lib/minikube\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u minikube | grep -i \"error\\|fail\\|deny\"\n```\n\n### Health Monitoring Checklist\n\n- [ ] Service is running and enabled\n- [ ] Web interface is accessible\n- [ ] Database connections are healthy\n- [ ] Disk usage is below 80%\n- [ ] No critical errors in logs\n- [ ] Backups are running successfully\n- [ ] SSL certificates are valid\n- [ ] Security updates are applied\n\n## Additional Resources\n\n- Official Documentation: https://docs.minikube.org/\n- GitHub Repository: https://github.com/minikube/minikube\n- Community Forum: https://forum.minikube.org/\n- Wiki: https://wiki.minikube.org/\n- Docker Hub: https://hub.docker.com/r/minikube/minikube\n- Security Advisories: https://security.minikube.org/\n- Best Practices: https://docs.minikube.org/best-practices\n- API Documentation: https://api.minikube.org/\n- Comparison with k3s, kind, Docker Desktop, MicroK8s: https://docs.minikube.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Minikube is a free and open-source Container Orchestration. Local Kubernetes cluster for development and testing</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum</li>\n<li class=\"mobile-list-item\">Network: 8443 ports required</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10 Pro</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8443 (default minikube port)</li>\n<li class=\"mobile-list-item\">Firewall rules configured</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">docker, kubectl, virtualization</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install minikube\nsudo dnf install -y minikube docker, kubectl, virtualization\n\n# Enable and start service\nsudo systemctl enable --now minikube\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=minikube || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nminikube --version || systemctl status minikube</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install minikube\nsudo apt install -y minikube docker, kubectl, virtualization\n\n# Enable and start service\nsudo systemctl enable --now minikube\n\n# Configure firewall\nsudo ufw allow 8443\n\n# Verify installation\nminikube --version || systemctl status minikube</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install minikube\nsudo pacman -S minikube\n\n# Enable and start service\nsudo systemctl enable --now minikube\n\n# Verify installation\nminikube --version || systemctl status minikube</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install minikube\napk add --no-cache minikube\n\n# Enable and start service\nrc-update add minikube default\nrc-service minikube start\n\n# Verify installation\nminikube --version || rc-service minikube status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install minikube\nsudo zypper install -y minikube docker, kubectl, virtualization\n\n# Enable and start service\nsudo systemctl enable --now minikube\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=minikube || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nminikube --version || systemctl status minikube</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install minikube\n\n# Start service\nbrew services start minikube\n\n# Verify installation\nminikube --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install minikube\n\n# Enable in rc.conf\necho &#039;minikube_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice minikube start\n\n# Verify installation\nminikube --version || service minikube status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install minikube\n\n# Or using Scoop\nscoop install minikube\n\n# Verify installation\nminikube --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p $HOME/.minikube\n\n# Set up basic configuration\nsudo tee $HOME/.minikube/minikube.conf &lt;&lt; &#039;EOF&#039;\n# Minikube Configuration\n--cpus=4 --memory=8192 --disk-size=50g\nEOF\n\n# Set appropriate permissions\nsudo chown -R minikube:minikube $HOME/.minikube || \\\n  sudo chown -R $(whoami):$(whoami) $HOME/.minikube\n\n# Test configuration\nsudo minikube --test || sudo minikube configtest</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false minikube || true\n\n# Secure configuration files\nsudo chmod 750 $HOME/.minikube\nsudo chmod 640 $HOME/.minikube/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable minikube\n\n# Start service\nsudo systemctl start minikube\n\n# Stop service\nsudo systemctl stop minikube\n\n# Restart service\nsudo systemctl restart minikube\n\n# Reload configuration\nsudo systemctl reload minikube\n\n# Check status\nsudo systemctl status minikube\n\n# View logs\nsudo journalctl -u minikube -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add minikube default\n\n# Start service\nrc-service minikube start\n\n# Stop service\nrc-service minikube stop\n\n# Restart service\nrc-service minikube restart\n\n# Check status\nrc-service minikube status\n\n# View logs\ntail -f $HOME/.minikube/logs/minikube.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;minikube_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice minikube start\n\n# Stop service\nservice minikube stop\n\n# Restart service\nservice minikube restart\n\n# Check status\nservice minikube status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start minikube\nbrew services stop minikube\nbrew services restart minikube\n\n# Check status\nbrew services list | grep minikube\n\n# View logs\ntail -f $(brew --prefix)/var/log/minikube.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start minikube\n\n# Stop service\nnet stop minikube\n\n# Using PowerShell\nStart-Service minikube\nStop-Service minikube\nRestart-Service minikube\n\n# Check status\nGet-Service minikube\n\n# Set to automatic startup\nSet-Service minikube -StartupType Automatic</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; $HOME/.minikube/minikube.conf &lt;&lt; &#039;EOF&#039;\n# Performance tuning\n--cpus=4 --memory=8192 --disk-size=50g\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho &quot;vm.swappiness=10&quot; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart minikube</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream minikube_backend {\n    server 127.0.0.1:8443;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name minikube.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name minikube.example.com;\n\n    ssl_certificate /etc/ssl/certs/minikube.crt;\n    ssl_certificate_key /etc/ssl/private/minikube.key;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n\n    location / {\n        proxy_pass http://minikube_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName minikube.example.com\n    Redirect permanent / https://minikube.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName minikube.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/minikube.crt\n    SSLCertificateKeyFile /etc/ssl/private/minikube.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    &lt;Location /&gt;\n        ProxyPass http://127.0.0.1:8443/\n        ProxyPassReverse http://127.0.0.1:8443/\n    &lt;/Location&gt;\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:8443/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">global\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend minikube_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/minikube.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    \n    default_backend minikube_backend\n\nbackend minikube_backend\n    balance roundrobin\n    option httpchk GET /health\n    server minikube1 127.0.0.1:8443 check</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddy\">minikube.example.com {\n    reverse_proxy 127.0.0.1:8443 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection &quot;1; mode=block&quot;\n    }\n    \n    encode gzip\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user\nsudo useradd --system --shell /bin/false --home $HOME/.minikube minikube || true\n\n# Set ownership\nsudo chown -R minikube:minikube $HOME/.minikube\nsudo chown -R minikube:minikube $HOME/.minikube/logs\n\n# Set permissions\nsudo chmod 750 $HOME/.minikube\nsudo chmod 640 $HOME/.minikube/*\nsudo chmod 750 $HOME/.minikube/logs\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 8443 proto tcp comment &quot;Minikube&quot;\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=minikube\nsudo firewall-cmd --permanent --service=minikube --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=minikube\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 8443 || true</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/minikube.key \\\n    -out /etc/ssl/certs/minikube.crt \\\n    -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=minikube.example.com&quot;\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/minikube.key\nsudo chmod 644 /etc/ssl/certs/minikube.crt\n\n# For production, use Let&#039;s Encrypt\nsudo certbot certonly --standalone -d minikube.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"fail2ban-configuration\" class=\"mobile-header\">Fail2ban Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/jail.d/minikube.conf\n[minikube]\nenabled = true\nport = 8443\nfilter = minikube\nlogpath = $HOME/.minikube/logs/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/filter.d/minikube.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from &lt;HOST&gt;.*$\n            ^.*Authentication failed.*from &lt;HOST&gt;.*$\n            ^.*Invalid credentials.*from &lt;HOST&gt;.*$\nignoreregex =</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE minikube_db;\nCREATE USER minikube_user WITH ENCRYPTED PASSWORD &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON DATABASE minikube_db TO minikube_user;\n\\q\nEOF\n\n# Configure connection in Minikube\necho &quot;DATABASE_URL=postgresql://minikube_user:secure_password_here@localhost/minikube_db&quot; | \\\n  sudo tee -a $HOME/.minikube/minikube.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE minikube_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;minikube_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON minikube_db.* TO &#039;minikube_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho &quot;DATABASE_URL=mysql://minikube_user:secure_password_here@localhost/minikube_db&quot; | \\\n  sudo tee -a $HOME/.minikube/minikube.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"sqlite-backend-if-applicable\" class=\"mobile-header\">SQLite Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database directory\nsudo mkdir -p /var/lib/minikube\nsudo chown minikube:minikube /var/lib/minikube\n\n# Initialize database\nsudo -u minikube minikube init-db</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters for better performance\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/security/limits.conf\nminikube soft nofile 65535\nminikube hard nofile 65535\nminikube soft nproc 32768\nminikube hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-tuning\" class=\"mobile-header\">Application Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure application-specific performance settings\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a $HOME/.minikube/performance.conf\n# Performance configuration\n--cpus=4 --memory=8192 --disk-size=50g\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart minikube</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: &#039;minikube&#039;\n    static_configs:\n      - targets: [&#039;localhost:8443/metrics&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 30s</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-script\" class=\"mobile-header\">Health Check Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/minikube-health\n\n# Check if service is running\nif ! systemctl is-active --quiet minikube; then\n    echo &quot;CRITICAL: Minikube service is not running&quot;\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 8443 2&gt;/dev/null; then\n    echo &quot;CRITICAL: Minikube is not listening on port 8443&quot;\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w &#039;%{time_total}&#039; http://localhost:8443/health || echo &quot;999&quot;)\nif (( $(echo &quot;$response_time &gt; 5&quot; | bc -l) )); then\n    echo &quot;WARNING: Slow response time: ${response_time}s&quot;\n    exit 1\nfi\n\necho &quot;OK: Minikube is healthy (response time: ${response_time}s)&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\ncat &lt;&lt; &#039;EOF&#039; | sudo tee /etc/logrotate.d/minikube\n$HOME/.minikube/logs/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 minikube minikube\n    postrotate\n        systemctl reload minikube &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/minikube</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/minikube-backup\n\nBACKUP_DIR=&quot;/backup/minikube&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/minikube_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if needed for consistency)\necho &quot;Stopping Minikube service...&quot;\nsystemctl stop minikube\n\n# Backup configuration\necho &quot;Backing up configuration...&quot;\ntar -czf &quot;$BACKUP_FILE&quot; \\\n    $HOME/.minikube \\\n    /var/lib/minikube \\\n    $HOME/.minikube/logs\n\n# Backup database (if applicable)\nif command -v pg_dump &amp;&gt; /dev/null; then\n    echo &quot;Backing up database...&quot;\n    sudo -u postgres pg_dump minikube_db | gzip &gt; &quot;$BACKUP_DIR/minikube_db_$DATE.sql.gz&quot;\nfi\n\n# Start service\necho &quot;Starting Minikube service...&quot;\nsystemctl start minikube\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.sql.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_FILE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/minikube-restore\n\nif [ $# -ne 1 ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    exit 1\nfi\n\nBACKUP_FILE=&quot;$1&quot;\n\nif [ ! -f &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Error: Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\n# Stop service\necho &quot;Stopping Minikube service...&quot;\nsystemctl stop minikube\n\n# Restore files\necho &quot;Restoring from backup...&quot;\ntar -xzf &quot;$BACKUP_FILE&quot; -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo &quot;$BACKUP_FILE&quot; | sed &#039;s/.tar.gz$/_db.sql.gz/&#039;)\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;Restoring database...&quot;\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql minikube_db\nfi\n\n# Fix permissions\nchown -R minikube:minikube $HOME/.minikube\nchown -R minikube:minikube /var/lib/minikube\n\n# Start service\necho &quot;Starting Minikube service...&quot;\nsystemctl start minikube\n\necho &quot;Restore completed successfully&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status and logs\nsudo systemctl status minikube\nsudo journalctl -u minikube -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 8443\nsudo lsof -i :8443\n\n# Verify configuration\nsudo minikube --test || sudo minikube configtest\n\n# Check permissions\nls -la $HOME/.minikube\nls -la $HOME/.minikube/logs</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Cannot access web interface</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep minikube\ncurl -I http://localhost:8443\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 8443\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep minikube</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>High memory/CPU usage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor resource usage\ntop -p $(pgrep minikube)\nhtop -p $(pgrep minikube)\n\n# Check for memory leaks\nps aux | grep minikube\ncat /proc/$(pgrep minikube)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error $HOME/.minikube/logs/*.log | tail -50</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Database connection errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test database connection\npsql -U minikube_user -d minikube_db -c &quot;SELECT 1;&quot;\nmysql -u minikube_user -p minikube_db -e &quot;SELECT 1;&quot;\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &quot;debug = true&quot; | sudo tee -a $HOME/.minikube/minikube.conf\n\n# Restart with debug mode\nsudo systemctl stop minikube\nsudo -u minikube minikube --debug\n\n# Watch debug logs\ntail -f $HOME/.minikube/logs/debug.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-analysis\" class=\"mobile-header\">Performance Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Profile CPU usage\nsudo perf record -p $(pgrep minikube) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/minikube.pcap port 8443\nsudo tcpdump -r /tmp/minikube.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep minikube)</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-deployment\" class=\"mobile-header\">Docker Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml\nversion: &#039;3.8&#039;\n\nservices:\n  minikube:\n    image: minikube:minikube\n    container_name: minikube\n    restart: unless-stopped\n    ports:\n      - &quot;8443:8443&quot;\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:$HOME/.minikube\n      - ./data:/var/lib/minikube\n      - ./logs:$HOME/.minikube/logs\n    networks:\n      - minikube_network\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8443/health&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  minikube_network:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># minikube-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: minikube\n  labels:\n    app: minikube\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: minikube\n  template:\n    metadata:\n      labels:\n        app: minikube\n    spec:\n      containers:\n      - name: minikube\n        image: minikube:minikube\n        ports:\n        - containerPort: 8443\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: $HOME/.minikube\n        - name: data\n          mountPath: /var/lib/minikube\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8443\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8443\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: minikube-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: minikube-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: minikube\nspec:\n  selector:\n    app: minikube\n  ports:\n  - protocol: TCP\n    port: 8443\n    targetPort: 8443\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: minikube-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n# minikube-playbook.yml\n- name: Install and configure Minikube\n  hosts: all\n  become: yes\n  vars:\n    minikube_version: latest\n    minikube_port: 8443\n    minikube_config_dir: $HOME/.minikube\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - docker, kubectl, virtualization\n        state: present\n    \n    - name: Install Minikube\n      package:\n        name: minikube\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: &quot;{{ minikube_config_dir }}&quot;\n        state: directory\n        owner: minikube\n        group: minikube\n        mode: &#039;0750&#039;\n    \n    - name: Deploy configuration\n      template:\n        src: minikube.conf.j2\n        dest: &quot;{{ minikube_config_dir }}/minikube.conf&quot;\n        owner: minikube\n        group: minikube\n        mode: &#039;0640&#039;\n      notify: restart minikube\n    \n    - name: Start and enable service\n      systemd:\n        name: minikube\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: &quot;{{ minikube_port }}/tcp&quot;\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart minikube\n      systemd:\n        name: minikube\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-configuration\" class=\"mobile-header\">Terraform Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"hcl\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">hcl</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-hcl\"># minikube.tf\nresource &quot;aws_instance&quot; &quot;minikube_server&quot; {\n  ami           = var.ami_id\n  instance_type = &quot;t3.medium&quot;\n  \n  vpc_security_group_ids = [aws_security_group.minikube.id]\n  \n  user_data = &lt;&lt;-EOF\n    #!/bin/bash\n    # Install Minikube\n    apt-get update\n    apt-get install -y minikube docker, kubectl, virtualization\n    \n    # Configure Minikube\n    systemctl enable minikube\n    systemctl start minikube\n  EOF\n  \n  tags = {\n    Name = &quot;Minikube Server&quot;\n    Application = &quot;Minikube&quot;\n  }\n}\n\nresource &quot;aws_security_group&quot; &quot;minikube&quot; {\n  name        = &quot;minikube-sg&quot;\n  description = &quot;Security group for Minikube&quot;\n  \n  ingress {\n    from_port   = 8443\n    to_port     = 8443\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  tags = {\n    Name = &quot;Minikube Security Group&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update minikube\nsudo dnf update minikube\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade minikube\n\n# Arch Linux\nsudo pacman -Syu minikube\n\n# Alpine Linux\napk update\napk upgrade minikube\n\n# openSUSE\nsudo zypper ref\nsudo zypper update minikube\n\n# FreeBSD\npkg update\npkg upgrade minikube\n\n# Always backup before updates\n/usr/local/bin/minikube-backup\n\n# Restart after updates\nsudo systemctl restart minikube</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean old logs\nfind $HOME/.minikube/logs -name &quot;*.log&quot; -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze minikube_db\n\n# Check disk usage\ndf -h | grep -E &quot;(/$|minikube)&quot;\ndu -sh /var/lib/minikube\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u minikube | grep -i &quot;error\\|fail\\|deny&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring-checklist\" class=\"mobile-header\">Health Monitoring Checklist</h3>\n<li class=\"mobile-list-item\">[ ] Service is running and enabled</li>\n<li class=\"mobile-list-item\">[ ] Web interface is accessible</li>\n<li class=\"mobile-list-item\">[ ] Database connections are healthy</li>\n<li class=\"mobile-list-item\">[ ] Disk usage is below 80%</li>\n<li class=\"mobile-list-item\">[ ] No critical errors in logs</li>\n<li class=\"mobile-list-item\">[ ] Backups are running successfully</li>\n<li class=\"mobile-list-item\">[ ] SSL certificates are valid</li>\n<li class=\"mobile-list-item\">[ ] Security updates are applied</li>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.minikube.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/minikube/minikube</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.minikube.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.minikube.org/</li>\n<li class=\"mobile-list-item\">Docker Hub: https://hub.docker.com/r/minikube/minikube</li>\n<li class=\"mobile-list-item\">Security Advisories: https://security.minikube.org/</li>\n<li class=\"mobile-list-item\">Best Practices: https://docs.minikube.org/best-practices</li>\n<li class=\"mobile-list-item\">API Documentation: https://api.minikube.org/</li>\n<li class=\"mobile-list-item\">Comparison with k3s, kind, Docker Desktop, MicroK8s: https://docs.minikube.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"16 min","wordCount":3112,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"High Availability Setup","id":"high-availability-setup"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":3,"text":"Caddy Configuration","id":"caddy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":3,"text":"Fail2ban Configuration","id":"fail2ban-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":3,"text":"SQLite Backend (if applicable)","id":"sqlite-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Application Tuning","id":"application-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Check Script","id":"health-check-script"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Script","id":"restore-script"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":3,"text":"Performance Analysis","id":"performance-analysis"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Deployment","id":"docker-deployment"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":3,"text":"Terraform Configuration","id":"terraform-configuration"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":3,"text":"Health Monitoring Checklist","id":"health-monitoring-checklist"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-16T18:18:24.165Z","metadataVersion":"2.0"}]},"__N_SSG":true}