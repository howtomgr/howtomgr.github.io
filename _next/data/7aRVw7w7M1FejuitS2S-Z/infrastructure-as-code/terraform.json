{"pageProps":{"guide":{"name":"terraform","displayName":"Terraform Installation and Management Guide","slug":"terraform","description":"Terraform installation and configuration guide","category":"infrastructure-as-code","subcategory":"infrastructure-as-code","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[0,4,5,443,2379,5432,8080,8500,8800,8801],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["infrastructure-as-code","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/infrastructure-as-code/terraform","documentationUrl":"https://howtomgr.github.io/infrastructure-as-code/terraform","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/terraform","updatedAt":"2025-09-16T17:57:00Z","createdAt":"2025-09-08T03:16:51Z","readmeRaw":"# Terraform Installation and Management Guide\n\n\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Introduction\n\nTerraform is a free and open-source Infrastructure as Code (IaC) tool developed by HashiCorp for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers. Originally created by Mitchell Hashimoto in 2014, Terraform uses declarative configuration files written in HashiCorp Configuration Language (HCL) to manage infrastructure resources with a declarative approach.\n\n### FOSS Context\n\nAs a pure open-source solution, Terraform serves as a powerful alternative to commercial IaC solutions like AWS CloudFormation (AWS-specific), Azure Resource Manager (Azure-specific), or proprietary enterprise tools like Pulumi Enterprise or VMware vRealize. Terraform provides enterprise-grade capabilities without licensing costs:\n\n- **Multi-cloud management** across 3000+ providers\n- **State management** with remote backends and locking\n- **Extensive provider ecosystem** maintained by HashiCorp and community\n- **Team collaboration** features through Terraform Cloud (freemium) or self-hosted alternatives\n- **Module system** for reusable infrastructure components\n- **Import capabilities** for existing infrastructure\n- **Plan and apply workflow** with preview and approval processes\n\n### Key Benefits\n\n- **Vendor neutrality**: Works across all major cloud providers and on-premises systems\n- **Declarative syntax**: Define desired state, Terraform handles the implementation\n- **Resource graph**: Automatically determines resource dependencies and creation order\n- **State tracking**: Maintains current infrastructure state for accurate change management\n- **Immutable infrastructure**: Encourages infrastructure replacement rather than modification\n- **Community support**: Large ecosystem with extensive documentation and community modules\n\n## 2. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for large infrastructures)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 5GB minimum (more for state files and provider binaries)\n  - Network: Stable connectivity for cloud provider APIs\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 12.0+\n- **Network Requirements**:\n  - HTTPS access to cloud provider APIs (port 443)\n  - Access to Terraform Registry (registry.terraform.io)\n  - Access to HashiCorp releases (releases.hashicorp.com)\n- **Dependencies**:\n  - Cloud provider CLI tools (aws-cli, azure-cli, gcloud)\n  - Git for configuration management\n  - Text editor or IDE\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required for installation\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform\n\n# Verify installation\nterraform version\n\n# Alternative: DNF for newer systems\nsudo dnf install -y yum-utils\nsudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\nsudo dnf install -y terraform\n```\n\n### Debian/Ubuntu\n\n```bash\n# Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install Terraform\nsudo apt update\nsudo apt install -y terraform\n\n# Verify installation\nterraform version\n```\n\n### Arch Linux\n\n```bash\n# Install from community repository\nsudo pacman -S terraform\n\n# Alternative: Install from AUR\nyay -S terraform\n\n# Install additional tools\nsudo pacman -S terraform-docs tflint\n\n# Verify installation\nterraform version\n```\n\n### Alpine Linux\n\n```bash\n# Install from Alpine repositories\nsudo apk update\nsudo apk add terraform\n\n# Install additional tools\nsudo apk add bash git curl\n\n# Verify installation\nterraform version\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y terraform\n\n# SLES 15\nsudo SUSEConnect -p sle-module-development-tools/15.5/x86_64\nsudo zypper install -y terraform\n\n# Alternative: Add HashiCorp repository\nsudo zypper addrepo https://rpm.releases.hashicorp.com/SLES/hashicorp.repo\nsudo zypper refresh\nsudo zypper install terraform\n\n# Verify installation\nterraform version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew tap hashicorp/tap\nbrew install hashicorp/tap/terraform\n\n# Alternative: Install specific version\nbrew install terraform@1.6\n\n# Verify installation\nterraform version\n\n# Using tfenv for version management\nbrew install tfenv\ntfenv install latest\ntfenv use latest\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install terraform\n\n# Using ports\ncd /usr/ports/sysutils/terraform\nmake install clean\n\n# Verify installation\nterraform version\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install terraform\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install terraform\n\n# Method 3: Manual installation\n# Download from https://releases.hashicorp.com/terraform/\n# Extract terraform.exe to C:\\terraform\n# Add C:\\terraform to PATH\n\n# Method 4: Using Winget\nwinget install HashiCorp.Terraform\n\n# Verify installation\nterraform version\n```\n\n## 4. Initial Configuration\n\n### First-Run Setup\n\n1. **Create terraform user** (optional for dedicated service):\n```bash\n# Linux systems\nsudo useradd -r -d /opt/terraform -s /sbin/nologin -c \"Terraform Service\" terraform\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/terraform/` (custom) or `/usr/local/bin/`\n- Debian/Ubuntu: `/etc/terraform/` (custom) or `/usr/local/bin/`\n- Arch Linux: `/etc/terraform/` (custom) or `/usr/bin/`\n- Alpine Linux: `/etc/terraform/` (custom) or `/usr/bin/`\n- openSUSE/SLES: `/etc/terraform/` (custom) or `/usr/local/bin/`\n- macOS: `/usr/local/etc/terraform/` or `/opt/homebrew/etc/terraform/`\n- FreeBSD: `/usr/local/etc/terraform/`\n- Windows: `C:\\terraform\\` or `%APPDATA%\\terraform\\`\n\n3. **Essential initial configuration**:\n\n```bash\n# Create workspace directory\nmkdir -p ~/terraform/projects\ncd ~/terraform/projects\n\n# Create first Terraform configuration\ncat > main.tf <<EOF\nterraform {\n  required_version = \">= 1.6\"\n  required_providers {\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~> 2.0\"\n    }\n  }\n}\n\nresource \"local_file\" \"hello_world\" {\n  content  = \"Hello, World from Terraform!\"\n  filename = \"hello.txt\"\n}\nEOF\n\n# Initialize Terraform\nterraform init\n\n# Validate configuration\nterraform validate\n\n# Plan deployment\nterraform plan\n\n# Apply configuration\nterraform apply\n```\n\n### Testing Initial Setup\n\n```bash\n# Check Terraform version\nterraform version\n\n# Validate configuration\nterraform validate\n\n# Format configuration files\nterraform fmt\n\n# Initialize and test basic functionality\nterraform init\nterraform plan\nterraform apply\n\n# List state\nterraform state list\n\n# Show state details\nterraform show\n\n# Clean up test resources\nterraform destroy\n```\n\n**WARNING:** Configure proper authentication for cloud providers before deploying real infrastructure!\n\n## 5. Service Management\n\n### systemd (Linux Systems)\n\n```bash\n# Create systemd service for Terraform agent (if using)\nsudo tee /etc/systemd/system/terraform-agent.service <<EOF\n[Unit]\nDescription=Terraform Agent\nAfter=network.target\n\n[Service]\nType=simple\nUser=terraform\nWorkingDirectory=/opt/terraform\nExecStart=/usr/local/bin/terraform-agent\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable terraform-agent\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Create OpenRC service script\nsudo tee /etc/init.d/terraform-agent <<EOF\n#!/sbin/openrc-run\n\nname=\"terraform-agent\"\ndescription=\"Terraform Agent\"\ncommand=\"/usr/bin/terraform-agent\"\ncommand_user=\"terraform\"\ncommand_background=true\npidfile=\"/var/run/terraform-agent.pid\"\n\ndepend() {\n    need net\n}\nEOF\n\nsudo chmod +x /etc/init.d/terraform-agent\nrc-update add terraform-agent default\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Create rc.d script\nsudo tee /usr/local/etc/rc.d/terraform_agent <<EOF\n#!/bin/sh\n. /etc/rc.subr\n\nname=terraform_agent\nrcvar=terraform_agent_enable\ncommand=\"/usr/local/bin/terraform-agent\"\npidfile=\"/var/run/terraform_agent.pid\"\nstart_cmd=\"terraform_agent_start\"\n\nterraform_agent_start() {\n    daemon -p \\${pidfile} \\${command}\n}\n\nload_rc_config \\$name\nrun_rc_command \"\\$1\"\nEOF\n\nsudo chmod +x /usr/local/etc/rc.d/terraform_agent\necho 'terraform_agent_enable=\"YES\"' >> /etc/rc.conf\n```\n\n### launchd (macOS)\n\n```bash\n# Create LaunchDaemon plist\nsudo tee /Library/LaunchDaemons/com.hashicorp.terraform.agent.plist <<EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>com.hashicorp.terraform.agent</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>/usr/local/bin/terraform-agent</string>\n    </array>\n    <key>RunAtLoad</key>\n    <true/>\n    <key>KeepAlive</key>\n    <true/>\n</dict>\n</plist>\nEOF\n\nsudo launchctl load /Library/LaunchDaemons/com.hashicorp.terraform.agent.plist\n```\n\n### Windows Service Manager\n\n```powershell\n# Install Terraform as Windows service using NSSM\nnssm install TerraformAgent \"C:\\terraform\\terraform-agent.exe\"\nnssm set TerraformAgent AppDirectory \"C:\\terraform\"\nnssm set TerraformAgent DisplayName \"Terraform Agent\"\nnssm set TerraformAgent Description \"HashiCorp Terraform Agent\"\nnssm start TerraformAgent\n\n# Alternative: Using sc command\nsc create TerraformAgent binPath=\"C:\\terraform\\terraform-agent.exe\" start=auto\nsc start TerraformAgent\n```\n\n## 6. Advanced Configuration\n\n### Multi-Cloud Provider Setup\n\n```bash\n# Create comprehensive multi-cloud configuration\ncat > providers.tf <<EOF\nterraform {\n  required_version = \">= 1.6\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.0\"\n    }\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 5.0\"\n    }\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \"~> 2.0\"\n    }\n    helm = {\n      source  = \"hashicorp/helm\"\n      version = \"~> 2.0\"\n    }\n  }\n  \n  # Remote state configuration\n  backend \"s3\" {\n    bucket = \"terraform-state-bucket\"\n    key    = \"infrastructure/terraform.tfstate\"\n    region = \"us-west-2\"\n    \n    # State locking with DynamoDB\n    dynamodb_table = \"terraform-state-lock\"\n    encrypt        = true\n  }\n}\n\n# AWS Provider\nprovider \"aws\" {\n  region = var.aws_region\n  \n  default_tags {\n    tags = {\n      Environment   = var.environment\n      ManagedBy     = \"terraform\"\n      Project       = var.project_name\n      Owner         = var.owner\n    }\n  }\n}\n\n# Azure Provider\nprovider \"azurerm\" {\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n    key_vault {\n      purge_soft_delete_on_destroy = true\n    }\n  }\n}\n\n# Google Cloud Provider\nprovider \"google\" {\n  project = var.gcp_project_id\n  region  = var.gcp_region\n  zone    = var.gcp_zone\n}\n\n# Kubernetes Provider\nprovider \"kubernetes\" {\n  config_path = \"~/.kube/config\"\n}\n\n# Helm Provider\nprovider \"helm\" {\n  kubernetes {\n    config_path = \"~/.kube/config\"\n  }\n}\nEOF\n```\n\n### Enterprise Features Configuration\n\n```bash\n# Terraform Cloud/Enterprise configuration\ncat > cloud.tf <<EOF\nterraform {\n  cloud {\n    organization = \"your-organization\"\n    \n    workspaces {\n      name = \"production-infrastructure\"\n    }\n  }\n}\n\n# Remote execution configuration\nterraform {\n  cloud {\n    organization = \"your-organization\"\n    \n    workspaces {\n      tags = [\"production\", \"web-app\"]\n    }\n  }\n  \n  required_providers {\n    tfe = {\n      source  = \"hashicorp/tfe\"\n      version = \"~> 0.48\"\n    }\n  }\n}\n\n# Terraform Enterprise configuration\nprovider \"tfe\" {\n  hostname = \"terraform.company.com\"\n  token    = var.tfe_token\n}\n\n# Workspace configuration\nresource \"tfe_workspace\" \"production\" {\n  name         = \"production-infrastructure\"\n  organization = var.tfe_organization\n  \n  auto_apply = false\n  queue_all_runs = false\n  \n  terraform_version = \"1.6.4\"\n  \n  vcs_repo {\n    identifier     = \"company/infrastructure\"\n    branch         = \"main\"\n    oauth_token_id = var.vcs_oauth_token_id\n  }\n  \n  working_directory = \"environments/production\"\n}\nEOF\n```\n\n### Advanced State Management\n\n```bash\n# Encrypted remote state with multiple backends\ncat > backend-s3.tf <<EOF\n# S3 backend with encryption and locking\nterraform {\n  backend \"s3\" {\n    bucket         = \"terraform-state-bucket\"\n    key            = \"infrastructure/terraform.tfstate\"\n    region         = \"us-west-2\"\n    encrypt        = true\n    kms_key_id     = \"arn:aws:kms:us-west-2:ACCOUNT:key/KEY-ID\"\n    dynamodb_table = \"terraform-state-lock\"\n    \n    # Additional security\n    skip_region_validation      = false\n    skip_credentials_validation = false\n    skip_metadata_api_check     = false\n  }\n}\n\n# State bucket with versioning and lifecycle\nresource \"aws_s3_bucket\" \"terraform_state\" {\n  bucket = \"terraform-state-bucket\"\n  \n  tags = {\n    Name        = \"Terraform State Bucket\"\n    Environment = var.environment\n  }\n}\n\nresource \"aws_s3_bucket_versioning\" \"terraform_state_versioning\" {\n  bucket = aws_s3_bucket.terraform_state.id\n  versioning_configuration {\n    status = \"Enabled\"\n  }\n}\n\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"terraform_state_encryption\" {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  rule {\n    apply_server_side_encryption_by_default {\n      kms_master_key_id = aws_kms_key.terraform_bucket_key.arn\n      sse_algorithm     = \"aws:kms\"\n    }\n  }\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"terraform_state\" {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\n# KMS key for encryption\nresource \"aws_kms_key\" \"terraform_bucket_key\" {\n  description             = \"KMS key for Terraform state bucket encryption\"\n  deletion_window_in_days = 7\n\n  tags = {\n    Name        = \"Terraform State Bucket Key\"\n    Environment = var.environment\n  }\n}\n\n# DynamoDB table for state locking\nresource \"aws_dynamodb_table\" \"terraform_state_lock\" {\n  name           = \"terraform-state-lock\"\n  billing_mode   = \"PAY_PER_REQUEST\"\n  hash_key       = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n\n  server_side_encryption {\n    enabled = true\n  }\n\n  point_in_time_recovery {\n    enabled = true\n  }\n\n  tags = {\n    Name        = \"Terraform State Lock Table\"\n    Environment = var.environment\n  }\n}\nEOF\n```\n\n### Terraform Workspaces and Environment Management\n\n```bash\n# Enterprise workspace management\ncat > workspace-management.tf <<EOF\n# Workspace-specific variables\nvariable \"workspace_configs\" {\n  description = \"Configuration per workspace\"\n  type = map(object({\n    instance_type    = string\n    min_size        = number\n    max_size        = number\n    environment_tag = string\n    backup_retention = number\n    monitoring_level = string\n  }))\n  default = {\n    development = {\n      instance_type    = \"t3.micro\"\n      min_size        = 1\n      max_size        = 3\n      environment_tag = \"dev\"\n      backup_retention = 7\n      monitoring_level = \"basic\"\n    }\n    staging = {\n      instance_type    = \"t3.small\"\n      min_size        = 2\n      max_size        = 5\n      environment_tag = \"staging\"\n      backup_retention = 14\n      monitoring_level = \"standard\"\n    }\n    production = {\n      instance_type    = \"m5.large\"\n      min_size        = 3\n      max_size        = 10\n      environment_tag = \"prod\"\n      backup_retention = 30\n      monitoring_level = \"comprehensive\"\n    }\n  }\n}\n\n# Current workspace configuration\nlocals {\n  workspace_config = var.workspace_configs[terraform.workspace]\n  \n  common_tags = {\n    Environment   = local.workspace_config.environment_tag\n    Workspace     = terraform.workspace\n    Project       = var.project_name\n    ManagedBy     = \"terraform\"\n    Owner         = var.owner\n    CostCenter    = var.cost_center\n    Compliance    = var.compliance_level\n  }\n}\n\n# Workspace-aware resource sizing\nresource \"aws_launch_template\" \"web_servers\" {\n  name_prefix   = \"${var.project_name}-${terraform.workspace}-\"\n  image_id      = data.aws_ami.ubuntu.id\n  instance_type = local.workspace_config.instance_type\n  \n  vpc_security_group_ids = [aws_security_group.web.id]\n  \n  user_data = base64encode(templatefile(\"${path.module}/user-data.sh\", {\n    environment = terraform.workspace\n    log_level   = local.workspace_config.monitoring_level\n  }))\n  \n  tag_specifications {\n    resource_type = \"instance\"\n    tags          = local.common_tags\n  }\n  \n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\n# Auto-scaling based on workspace\nresource \"aws_autoscaling_group\" \"web\" {\n  name                = \"${var.project_name}-${terraform.workspace}-asg\"\n  vpc_zone_identifier = var.private_subnet_ids\n  target_group_arns   = [aws_lb_target_group.web.arn]\n  health_check_type   = \"ELB\"\n  health_check_grace_period = 300\n\n  min_size         = local.workspace_config.min_size\n  max_size         = local.workspace_config.max_size\n  desired_capacity = local.workspace_config.min_size\n\n  launch_template {\n    id      = aws_launch_template.web_servers.id\n    version = \"$Latest\"\n  }\n  \n  dynamic \"tag\" {\n    for_each = local.common_tags\n    content {\n      key                 = tag.key\n      value               = tag.value\n      propagate_at_launch = true\n    }\n  }\n}\nEOF\n\n# Workspace management commands\ncat > scripts/workspace-management.sh <<'EOF'\n#!/bin/bash\n\n# List all workspaces with their status\nlist_workspaces() {\n    echo \"📋 Terraform Workspaces:\"\n    terraform workspace list\n    echo \"\"\n    echo \"Current workspace: $(terraform workspace show)\"\n}\n\n# Create new workspace with initialization\ncreate_workspace() {\n    local workspace_name=\"$1\"\n    \n    if [[ -z \"$workspace_name\" ]]; then\n        echo \"Usage: create_workspace <workspace-name>\"\n        return 1\n    fi\n    \n    echo \"🚀 Creating workspace: $workspace_name\"\n    terraform workspace new \"$workspace_name\"\n    terraform workspace select \"$workspace_name\"\n    \n    # Initialize with workspace-specific variables\n    if [[ ! -f \"$workspace_name.tfvars\" ]]; then\n        echo \"Creating $workspace_name.tfvars template...\"\n        cat > \"$workspace_name.tfvars\" <<VARS\n# Workspace-specific variables for $workspace_name\nproject_name = \"myproject-$workspace_name\"\nenvironment = \"$workspace_name\"\nowner = \"$(whoami)\"\ncost_center = \"engineering\"\ncompliance_level = \"standard\"\n\n# Network configuration\nvpc_cidr = \"10.0.0.0/16\"\navailability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]\n\n# Resource sizing (adjust per environment)\ninstance_type = \"t3.micro\"\nmin_capacity = 1\nmax_capacity = 3\nVARS\n        echo \"✅ Template created at $workspace_name.tfvars\"\n        echo \"💡 Please review and customize the variables before applying\"\n    fi\n}\n\n# Switch workspace with validation\nswitch_workspace() {\n    local workspace_name=\"$1\"\n    \n    if [[ -z \"$workspace_name\" ]]; then\n        echo \"Usage: switch_workspace <workspace-name>\"\n        return 1\n    fi\n    \n    if terraform workspace list | grep -q \"\\b$workspace_name\\b\"; then\n        terraform workspace select \"$workspace_name\"\n        echo \"✅ Switched to workspace: $workspace_name\"\n        \n        # Show current configuration\n        echo \"📄 Current configuration file: $workspace_name.tfvars\"\n        if [[ -f \"$workspace_name.tfvars\" ]]; then\n            echo \"✅ Variables file exists\"\n        else\n            echo \"⚠️  Variables file missing - creating template\"\n            create_workspace \"$workspace_name\"\n        fi\n    else\n        echo \"❌ Workspace '$workspace_name' not found\"\n        echo \"Available workspaces:\"\n        terraform workspace list\n    fi\n}\n\n# Delete workspace with safety checks\ndelete_workspace() {\n    local workspace_name=\"$1\"\n    \n    if [[ -z \"$workspace_name\" ]]; then\n        echo \"Usage: delete_workspace <workspace-name>\"\n        return 1\n    fi\n    \n    if [[ \"$workspace_name\" == \"default\" ]]; then\n        echo \"❌ Cannot delete the default workspace\"\n        return 1\n    fi\n    \n    echo \"⚠️  WARNING: This will delete workspace '$workspace_name' and all its resources!\"\n    echo \"Current resources in workspace:\"\n    \n    # Switch to workspace and show resources\n    terraform workspace select \"$workspace_name\"\n    terraform state list\n    \n    echo \"\"\n    read -p \"Are you sure you want to proceed? (yes/no): \" confirm\n    \n    if [[ \"$confirm\" == \"yes\" ]]; then\n        echo \"🗑️  Destroying resources in workspace: $workspace_name\"\n        terraform destroy -auto-approve -var-file=\"$workspace_name.tfvars\"\n        \n        echo \"🗑️  Deleting workspace: $workspace_name\"\n        terraform workspace select default\n        terraform workspace delete \"$workspace_name\"\n        \n        echo \"✅ Workspace '$workspace_name' deleted\"\n    else\n        echo \"❌ Operation cancelled\"\n    fi\n}\n\n# Main command dispatcher\ncase \"${1:-help}\" in\n    \"list\")\n        list_workspaces\n        ;;\n    \"create\")\n        create_workspace \"$2\"\n        ;;\n    \"switch\")\n        switch_workspace \"$2\"\n        ;;\n    \"delete\")\n        delete_workspace \"$2\"\n        ;;\n    \"help\"|*)\n        echo \"Terraform Workspace Management\"\n        echo \"Usage: $0 [list|create|switch|delete] [workspace-name]\"\n        echo \"\"\n        echo \"Commands:\"\n        echo \"  list                    - List all workspaces\"\n        echo \"  create <name>          - Create new workspace with template\"\n        echo \"  switch <name>          - Switch to existing workspace\"\n        echo \"  delete <name>          - Delete workspace and all resources\"\n        ;;\nesac\nEOF\n\nchmod +x scripts/workspace-management.sh\n```\n\n### Remote State Configuration Best Practices\n\n```bash\n# Enterprise remote state configuration\ncat > remote-state-setup.tf <<EOF\n# Multi-environment state configuration\nterraform {\n  backend \"s3\" {\n    # Use workspace-aware state keys\n    key            = \"infrastructure/\\${terraform.workspace}/terraform.tfstate\"\n    bucket         = var.state_bucket_name\n    region         = var.aws_region\n    encrypt        = true\n    kms_key_id     = var.state_kms_key_arn\n    dynamodb_table = var.state_lock_table\n    \n    # Workspace isolation\n    workspace_key_prefix = \"workspaces\"\n  }\n}\n\n# State bucket with advanced features\nresource \"aws_s3_bucket\" \"terraform_state\" {\n  bucket        = var.state_bucket_name\n  force_destroy = false  # Prevent accidental deletion\n  \n  tags = {\n    Name            = \"Terraform State Bucket\"\n    Purpose         = \"Infrastructure State Storage\"\n    Environment     = \"global\"\n    BackupRequired  = \"true\"\n    ComplianceLevel = \"high\"\n  }\n}\n\n# Cross-region replication for disaster recovery\nresource \"aws_s3_bucket_replication_configuration\" \"terraform_state_replication\" {\n  role   = aws_iam_role.replication.arn\n  bucket = aws_s3_bucket.terraform_state.id\n\n  rule {\n    id     = \"terraform-state-replication\"\n    status = \"Enabled\"\n    \n    filter {\n      prefix = \"workspaces/\"\n    }\n\n    destination {\n      bucket        = aws_s3_bucket.terraform_state_replica.arn\n      storage_class = \"STANDARD_IA\"\n      \n      encryption_configuration {\n        replica_kms_key_id = aws_kms_key.terraform_state_replica.arn\n      }\n    }\n  }\n}\n\n# Lifecycle management for cost optimization\nresource \"aws_s3_bucket_lifecycle_configuration\" \"terraform_state_lifecycle\" {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  rule {\n    id     = \"state_file_lifecycle\"\n    status = \"Enabled\"\n\n    noncurrent_version_transition {\n      noncurrent_days = 30\n      storage_class   = \"STANDARD_IA\"\n    }\n\n    noncurrent_version_transition {\n      noncurrent_days = 90\n      storage_class   = \"GLACIER\"\n    }\n\n    noncurrent_version_expiration {\n      noncurrent_days = 365\n    }\n  }\n}\n\n# Advanced DynamoDB table for state locking with point-in-time recovery\nresource \"aws_dynamodb_table\" \"terraform_state_lock\" {\n  name           = var.state_lock_table\n  billing_mode   = \"PAY_PER_REQUEST\"\n  hash_key       = \"LockID\"\n  \n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n\n  # Enable point-in-time recovery\n  point_in_time_recovery {\n    enabled = true\n  }\n\n  # Server-side encryption\n  server_side_encryption {\n    enabled     = true\n    kms_key_arn = aws_kms_key.terraform_state.arn\n  }\n\n  # Enable continuous backups\n  tags = {\n    Name           = \"Terraform State Lock\"\n    BackupRequired = \"true\"\n    Environment    = \"global\"\n  }\n}\n\n# CloudWatch alarms for state operations\nresource \"aws_cloudwatch_metric_alarm\" \"state_bucket_errors\" {\n  alarm_name          = \"terraform-state-bucket-errors\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name         = \"4xxErrors\"\n  namespace           = \"AWS/S3\"\n  period              = \"300\"\n  statistic           = \"Sum\"\n  threshold           = \"5\"\n  alarm_description   = \"This metric monitors S3 bucket errors for Terraform state\"\n\n  dimensions = {\n    BucketName = aws_s3_bucket.terraform_state.bucket\n  }\n\n  alarm_actions = [aws_sns_topic.infrastructure_alerts.arn]\n}\nEOF\n```\n\n## 7. Reverse Proxy Setup\n\nTerraform itself doesn't typically require reverse proxy setup, but when using Terraform Enterprise or Cloud, you might need to configure proxies for API access:\n\n### Corporate Proxy Configuration\n\n```bash\n# Configure Terraform to work through corporate proxy\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1,.company.com\n\n# Add to ~/.bashrc or ~/.zshrc\ncat >> ~/.bashrc <<EOF\n# Terraform proxy settings\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1,.company.com\nEOF\n\n# Configure Git for proxy (if needed for modules)\ngit config --global http.proxy http://proxy.company.com:8080\ngit config --global https.proxy http://proxy.company.com:8080\n```\n\n### nginx Configuration for Terraform Enterprise\n\n```nginx\n# /etc/nginx/sites-available/terraform-enterprise\nupstream terraform_enterprise {\n    server 127.0.0.1:8800;\n    server 127.0.0.1:8801 backup;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name terraform.company.com;\n\n    ssl_certificate /etc/ssl/certs/terraform.company.com.crt;\n    ssl_certificate_key /etc/ssl/private/terraform.company.com.key;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000\" always;\n    add_header X-Frame-Options \"DENY\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n\n    location / {\n        proxy_pass http://terraform_enterprise;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support for real-time updates\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeouts for long-running operations\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 300s;\n    }\n}\n```\n\n## 8. Security Configuration\n\n### Secure Credential Management\n\n```bash\n# Use environment variables for credentials\ncat > .env.example <<EOF\n# AWS credentials\nAWS_ACCESS_KEY_ID=your_access_key\nAWS_SECRET_ACCESS_KEY=your_secret_key\nAWS_DEFAULT_REGION=us-west-2\n\n# Azure credentials\nARM_CLIENT_ID=your_client_id\nARM_CLIENT_SECRET=your_client_secret\nARM_SUBSCRIPTION_ID=your_subscription_id\nARM_TENANT_ID=your_tenant_id\n\n# GCP credentials\nGOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account-key.json\nGOOGLE_PROJECT=your_project_id\n\n# Terraform Cloud\nTF_CLOUD_TOKEN=your_terraform_cloud_token\nEOF\n\n# Use IAM roles for AWS (recommended)\ncat > aws-iam-role.tf <<EOF\n# IAM role for Terraform execution\nresource \"aws_iam_role\" \"terraform_execution\" {\n  name = \"TerraformExecutionRole\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"ec2.amazonaws.com\"\n        }\n      },\n    ]\n  })\n}\n\n# Attach managed policies with least privilege\nresource \"aws_iam_role_policy_attachment\" \"terraform_execution\" {\n  for_each = toset([\n    \"arn:aws:iam::aws:policy/PowerUserAccess\"\n  ])\n  \n  role       = aws_iam_role.terraform_execution.name\n  policy_arn = each.value\n}\n\n# Create instance profile\nresource \"aws_iam_instance_profile\" \"terraform_execution\" {\n  name = \"TerraformExecutionProfile\"\n  role = aws_iam_role.terraform_execution.name\n}\nEOF\n```\n\n### Security Scanning and Compliance\n\n```bash\n# Pre-commit hooks for security\ncat > .pre-commit-config.yaml <<EOF\nrepos:\n- repo: https://github.com/antonbabenko/pre-commit-terraform\n  rev: v1.83.5\n  hooks:\n    - id: terraform_fmt\n    - id: terraform_validate\n    - id: terraform_docs\n    - id: terraform_tflint\n    - id: terraform_checkov\n    - id: terraform_trivy\n\n- repo: https://github.com/Yelp/detect-secrets\n  rev: v1.4.0\n  hooks:\n    - id: detect-secrets\n      args: ['--baseline', '.secrets.baseline']\nEOF\n\n# Checkov configuration for security scanning\ncat > .checkov.yaml <<EOF\nframework:\n  - terraform\n  - secrets\n\ncheck:\n  - CKV_AWS_79  # Ensure Instance Metadata Service Version 1 is not enabled\n  - CKV_AWS_8   # Ensure Launch Configuration EBS encryption\n  - CKV_AZURE_1 # Ensure storage account encryption\n\nskip-check:\n  - CKV_AWS_23  # Skip S3 bucket public read check for specific use cases\n\noutput: cli\nquiet: false\ncompact: false\nEOF\n\n# TFLint configuration\ncat > .tflint.hcl <<EOF\nplugin \"aws\" {\n    enabled = true\n    version = \"0.21.2\"\n    source  = \"github.com/terraform-linters/tflint-ruleset-aws\"\n}\n\nplugin \"azurerm\" {\n    enabled = true\n    version = \"0.21.0\"\n    source  = \"github.com/terraform-linters/tflint-ruleset-azurerm\"\n}\n\nrule \"terraform_unused_declarations\" {\n  enabled = true\n}\n\nrule \"terraform_naming_convention\" {\n  enabled = true\n  format  = \"snake_case\"\n}\nEOF\n```\n\n### Policy as Code with OPA\n\n```bash\n# OPA (Open Policy Agent) security policies\ncat > policy/security.rego <<EOF\npackage terraform.security\n\n# Deny instances without encryption\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == \"aws_instance\"\n    resource.change.after.root_block_device[_].encrypted == false\n    reason := \"AWS instances must have encrypted root volumes\"\n}\n\n# Deny public S3 buckets\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == \"aws_s3_bucket_public_access_block\"\n    resource.change.after.block_public_acls == false\n    reason := \"S3 buckets must block public access\"\n}\n\n# Require specific instance types in production\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == \"aws_instance\"\n    instance_type := resource.change.after.instance_type\n    not allowed_instance_type(instance_type)\n    workspace := input.terraform_version.workspace\n    workspace == \"production\"\n    reason := sprintf(\"Production instances must use approved instance types, got: %v\", [instance_type])\n}\n\nallowed_instance_type(instance_type) {\n    allowed_types := [\"t3.micro\", \"t3.small\", \"t3.medium\", \"m5.large\", \"m5.xlarge\"]\n    instance_type in allowed_types\n}\nEOF\n\n# Policy validation script\ncat > scripts/validate-policy.sh <<'EOF'\n#!/bin/bash\n\n# Generate Terraform plan\nterraform plan -out=tfplan\nterraform show -json tfplan > tfplan.json\n\n# Validate against policies\nconftest test tfplan.json --policy policy/\n\n# Cleanup\nrm tfplan tfplan.json\nEOF\n\nchmod +x scripts/validate-policy.sh\n```\n\n## 9. Database Setup\n\nTerraform doesn't require a traditional database, but it does use state files and can integrate with various storage backends:\n\n### State Storage Backends\n\n```bash\n# PostgreSQL backend (for Terraform Enterprise)\ncat > backend-postgres.tf <<EOF\nterraform {\n  backend \"pg\" {\n    conn_str = \"postgres://user:pass@localhost/terraform_backend?sslmode=require\"\n  }\n}\nEOF\n\n# Consul backend for distributed state\ncat > backend-consul.tf <<EOF\nterraform {\n  backend \"consul\" {\n    address = \"consul.company.com:8500\"\n    scheme  = \"https\"\n    path    = \"terraform/infrastructure\"\n  }\n}\nEOF\n\n# etcd backend\ncat > backend-etcd.tf <<EOF\nterraform {\n  backend \"etcdv3\" {\n    endpoints = [\"http://etcd1:2379\", \"http://etcd2:2379\", \"http://etcd3:2379\"]\n    lock      = true\n    prefix    = \"terraform-state/\"\n  }\n}\nEOF\n```\n\n### Database Infrastructure Management\n\n```bash\n# Database deployment with Terraform\ncat > database.tf <<EOF\n# RDS instance with Multi-AZ\nresource \"aws_db_instance\" \"main\" {\n  identifier = \"${var.project_name}-db\"\n  \n  engine         = \"postgresql\"\n  engine_version = \"15.4\"\n  instance_class = \"db.t3.micro\"\n  \n  allocated_storage     = 20\n  max_allocated_storage = 100\n  storage_type         = \"gp3\"\n  storage_encrypted    = true\n  kms_key_id          = aws_kms_key.rds.arn\n  \n  db_name  = var.database_name\n  username = var.database_username\n  password = var.database_password\n  port     = 5432\n  \n  multi_az               = true\n  publicly_accessible    = false\n  backup_retention_period = 7\n  backup_window          = \"03:00-04:00\"\n  maintenance_window     = \"sun:04:00-sun:05:00\"\n  \n  skip_final_snapshot = false\n  final_snapshot_identifier = \"${var.project_name}-db-final-snapshot\"\n  \n  vpc_security_group_ids = [aws_security_group.rds.id]\n  db_subnet_group_name   = aws_db_subnet_group.main.name\n  \n  tags = var.common_tags\n}\n\n# Database subnet group\nresource \"aws_db_subnet_group\" \"main\" {\n  name       = \"${var.project_name}-db-subnet-group\"\n  subnet_ids = var.private_subnet_ids\n\n  tags = merge(var.common_tags, {\n    Name = \"${var.project_name}-db-subnet-group\"\n  })\n}\n\n# KMS key for RDS encryption\nresource \"aws_kms_key\" \"rds\" {\n  description             = \"KMS key for RDS encryption\"\n  deletion_window_in_days = 7\n\n  tags = merge(var.common_tags, {\n    Name = \"${var.project_name}-rds-kms-key\"\n  })\n}\nEOF\n```\n\n## 10. Performance Optimization\n\n### Terraform Performance Tuning\n\n```bash\n# Optimize Terraform execution\ncat > terraform.tfvars <<EOF\n# Performance settings\nterraform_parallelism = 10\nterraform_refresh = true\nterraform_upgrade = false\nEOF\n\n# Performance optimization script\ncat > scripts/optimize-terraform.sh <<'EOF'\n#!/bin/bash\n\n# Increase parallelism for faster execution\nexport TF_CLI_ARGS_plan=\"-parallelism=10\"\nexport TF_CLI_ARGS_apply=\"-parallelism=10\"\n\n# Use faster JSON output for large states\nexport TF_CLI_ARGS_show=\"-json\"\n\n# Optimize provider caching\nexport TF_PLUGIN_CACHE_DIR=\"$HOME/.terraform.d/plugin-cache\"\nmkdir -p \"$TF_PLUGIN_CACHE_DIR\"\n\n# Performance monitoring\necho \"Starting Terraform operation at $(date)\"\ntime terraform \"$@\"\necho \"Completed Terraform operation at $(date)\"\nEOF\n\nchmod +x scripts/optimize-terraform.sh\n```\n\n### Large Infrastructure Management\n\n```bash\n# Workspace and module organization\ncat > modules/infrastructure/main.tf <<EOF\n# Optimized module structure for large deployments\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n  }\n}\n\n# Use data sources efficiently\ndata \"aws_availability_zones\" \"available\" {\n  state = \"available\"\n  \n  # Cache this data to avoid repeated API calls\n  lifecycle {\n    postcondition {\n      condition     = length(self.names) >= 2\n      error_message = \"At least 2 availability zones required.\"\n    }\n  }\n}\n\n# Optimize resource creation with for_each\nresource \"aws_subnet\" \"private\" {\n  for_each = toset(slice(data.aws_availability_zones.available.names, 0, var.subnet_count))\n  \n  vpc_id            = aws_vpc.main.id\n  cidr_block        = cidrsubnet(var.vpc_cidr, 8, index(data.aws_availability_zones.available.names, each.value) + 10)\n  availability_zone = each.value\n  \n  tags = merge(var.common_tags, {\n    Name = \"${var.name_prefix}-private-${each.value}\"\n    Type = \"private\"\n  })\n}\n\n# Use locals for complex computations\nlocals {\n  # Pre-compute values to avoid recalculation\n  availability_zones = slice(data.aws_availability_zones.available.names, 0, var.subnet_count)\n  \n  # Create maps for efficient lookups\n  subnet_map = {\n    for subnet in aws_subnet.private : \n    subnet.availability_zone => subnet.id\n  }\n}\nEOF\n```\n\n### State Optimization\n\n```bash\n# State file optimization script\ncat > scripts/optimize-state.sh <<'EOF'\n#!/bin/bash\n\n# Pull current state for backup\nterraform state pull > state-backup-$(date +%Y%m%d_%H%M%S).json\n\n# Remove unused resources from state\nterraform state list | while read resource; do\n    if terraform plan -target=\"$resource\" | grep -q \"No changes\"; then\n        echo \"Checking if $resource can be safely removed...\"\n        # Add logic to safely remove unused resources\n    fi\ndone\n\n# Refresh state to sync with real infrastructure\nterraform refresh\n\necho \"State optimization completed\"\nEOF\n\nchmod +x scripts/optimize-state.sh\n```\n\n## 11. Monitoring\n\n### Terraform Operations Monitoring\n\n```bash\n# Terraform execution monitoring\ncat > scripts/monitor-terraform.sh <<'EOF'\n#!/bin/bash\n\nLOG_FILE=\"/var/log/terraform/operations.log\"\nMETRICS_FILE=\"/var/log/terraform/metrics.log\"\n\n# Ensure log directory exists\nmkdir -p \"$(dirname \"$LOG_FILE\")\"\nmkdir -p \"$(dirname \"$METRICS_FILE\")\"\n\n# Function to log operations\nlog_operation() {\n    local operation=\"$1\"\n    local status=\"$2\"\n    local duration=\"$3\"\n    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')\n    \n    echo \"[$timestamp] Operation: $operation, Status: $status, Duration: ${duration}s\" >> \"$LOG_FILE\"\n    echo \"terraform_operation_duration{operation=\\\"$operation\\\",status=\\\"$status\\\"} $duration\" >> \"$METRICS_FILE\"\n}\n\n# Wrapper function for terraform commands\nterraform_monitored() {\n    local operation=\"$1\"\n    shift\n    local start_time=$(date +%s)\n    local exit_code=0\n    \n    echo \"Starting Terraform $operation at $(date)\"\n    \n    if terraform \"$operation\" \"$@\"; then\n        local end_time=$(date +%s)\n        local duration=$((end_time - start_time))\n        log_operation \"$operation\" \"success\" \"$duration\"\n        echo \"Terraform $operation completed successfully in ${duration}s\"\n    else\n        exit_code=$?\n        local end_time=$(date +%s)\n        local duration=$((end_time - start_time))\n        log_operation \"$operation\" \"failure\" \"$duration\"\n        echo \"Terraform $operation failed after ${duration}s\"\n        return $exit_code\n    fi\n}\n\n# Usage: terraform_monitored plan, terraform_monitored apply, etc.\nterraform_monitored \"$@\"\nEOF\n\nchmod +x scripts/monitor-terraform.sh\n```\n\n### Infrastructure Monitoring with Terraform\n\n```bash\n# Deploy monitoring stack with Terraform\ncat > monitoring.tf <<EOF\n# CloudWatch alarms for infrastructure\nresource \"aws_cloudwatch_metric_alarm\" \"high_cpu\" {\n  for_each = toset(module.compute.instance_ids)\n  \n  alarm_name          = \"high-cpu-${each.key}\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name        = \"CPUUtilization\"\n  namespace          = \"AWS/EC2\"\n  period             = \"300\"\n  statistic          = \"Average\"\n  threshold          = \"80\"\n  alarm_description  = \"This metric monitors EC2 CPU utilization\"\n\n  dimensions = {\n    InstanceId = each.value\n  }\n\n  alarm_actions = [aws_sns_topic.alerts.arn]\n  \n  tags = var.common_tags\n}\n\n# SNS topic for alerts\nresource \"aws_sns_topic\" \"alerts\" {\n  name = \"${var.project_name}-infrastructure-alerts\"\n  \n  tags = var.common_tags\n}\n\nresource \"aws_sns_topic_subscription\" \"email_alerts\" {\n  topic_arn = aws_sns_topic.alerts.arn\n  protocol  = \"email\"\n  endpoint  = var.alert_email\n}\n\n# Log group for Terraform operations\nresource \"aws_cloudwatch_log_group\" \"terraform_ops\" {\n  name              = \"/terraform/operations\"\n  retention_in_days = 30\n  \n  tags = var.common_tags\n}\n\n# Dashboard for infrastructure monitoring\nresource \"aws_cloudwatch_dashboard\" \"main\" {\n  dashboard_name = \"${var.project_name}-infrastructure\"\n\n  dashboard_body = jsonencode({\n    widgets = [\n      {\n        type   = \"metric\"\n        x      = 0\n        y      = 0\n        width  = 12\n        height = 6\n\n        properties = {\n          metrics = [\n            [\"AWS/EC2\", \"CPUUtilization\", \"InstanceId\", module.compute.instance_ids[0]],\n          ]\n          view    = \"timeSeries\"\n          stacked = false\n          region  = var.aws_region\n          title   = \"EC2 Instance CPU\"\n          period  = 300\n        }\n      }\n    ]\n  })\n}\nEOF\n```\n\n### Terraform Cloud Monitoring\n\n```bash\n# Monitor Terraform Cloud workspaces\ncat > scripts/monitor-tf-cloud.sh <<'EOF'\n#!/bin/bash\n\nTF_CLOUD_TOKEN=\"${TF_CLOUD_TOKEN}\"\nORGANIZATION=\"${TF_ORGANIZATION}\"\n\n# Function to get workspace status\nget_workspace_status() {\n    local workspace_name=\"$1\"\n    \n    curl -s \\\n        --header \"Authorization: Bearer $TF_CLOUD_TOKEN\" \\\n        --header \"Content-Type: application/vnd.api+json\" \\\n        \"https://app.terraform.io/api/v2/organizations/$ORGANIZATION/workspaces/$workspace_name/current-run\" \\\n        | jq -r '.data.attributes.status'\n}\n\n# Function to get workspace runs\nget_recent_runs() {\n    local workspace_id=\"$1\"\n    \n    curl -s \\\n        --header \"Authorization: Bearer $TF_CLOUD_TOKEN\" \\\n        --header \"Content-Type: application/vnd.api+json\" \\\n        \"https://app.terraform.io/api/v2/workspaces/$workspace_id/runs\" \\\n        | jq -r '.data[].attributes | \"\\(.status) - \\(.created_at)\"'\n}\n\n# Monitor critical workspaces\nWORKSPACES=(\"production-web\" \"production-database\" \"staging-environment\")\n\nfor workspace in \"${WORKSPACES[@]}\"; do\n    status=$(get_workspace_status \"$workspace\")\n    echo \"Workspace: $workspace, Status: $status\"\n    \n    if [[ \"$status\" == \"errored\" ]]; then\n        echo \"❌ ALERT: Workspace $workspace has errors!\"\n        # Send alert to monitoring system\n        curl -X POST \\\n            -H \"Content-Type: application/json\" \\\n            -d \"{\\\"text\\\": \\\"Terraform workspace $workspace has errors\\\"}\" \\\n            \"$SLACK_WEBHOOK_URL\"\n    elif [[ \"$status\" == \"planned_and_finished\" ]]; then\n        echo \"✅ Workspace $workspace is healthy\"\n    fi\ndone\nEOF\n\nchmod +x scripts/monitor-tf-cloud.sh\n```\n\n## 12. Backup and Restore\n\n### State File Backup\n\n```bash\n# Comprehensive state backup script\ncat > scripts/backup-terraform-state.sh <<'EOF'\n#!/bin/bash\n\nBACKUP_DIR=\"/backup/terraform\"\nDATE=$(date +%Y%m%d_%H%M%S)\nENVIRONMENTS=(\"development\" \"staging\" \"production\")\n\nmkdir -p \"$BACKUP_DIR\"\n\nbackup_state() {\n    local environment=\"$1\"\n    local backup_path=\"$BACKUP_DIR/$environment\"\n    \n    echo \"Backing up $environment state...\"\n    mkdir -p \"$backup_path\"\n    \n    # Change to environment directory\n    cd \"environments/$environment\" || return 1\n    \n    # Pull current state\n    terraform state pull > \"$backup_path/terraform-state-$DATE.json\"\n    \n    # Backup configuration files\n    tar -czf \"$backup_path/terraform-config-$DATE.tar.gz\" \\\n        --exclude=\".terraform\" \\\n        --exclude=\"*.tfplan\" \\\n        .\n    \n    # Backup workspace info\n    terraform workspace show > \"$backup_path/current-workspace-$DATE.txt\"\n    terraform workspace list > \"$backup_path/all-workspaces-$DATE.txt\"\n    \n    # Backup provider versions\n    terraform version > \"$backup_path/terraform-version-$DATE.txt\"\n    \n    cd - > /dev/null\n    \n    echo \"✅ Backup completed for $environment\"\n}\n\n# Backup all environments\nfor env in \"${ENVIRONMENTS[@]}\"; do\n    if [[ -d \"environments/$env\" ]]; then\n        backup_state \"$env\"\n    else\n        echo \"⚠️  Environment directory not found: environments/$env\"\n    fi\ndone\n\n# Create consolidated backup\ncd \"$BACKUP_DIR\"\ntar -czf \"terraform-complete-backup-$DATE.tar.gz\" \\\n    --exclude=\"*.tar.gz\" \\\n    .\n\n# Upload to cloud storage\nif command -v aws &> /dev/null; then\n    aws s3 cp \"terraform-complete-backup-$DATE.tar.gz\" \\\n        s3://terraform-backups/\nfi\n\nif command -v az &> /dev/null; then\n    az storage blob upload \\\n        --file \"terraform-complete-backup-$DATE.tar.gz\" \\\n        --container-name terraform-backups \\\n        --name \"terraform-complete-backup-$DATE.tar.gz\"\nfi\n\nif command -v gsutil &> /dev/null; then\n    gsutil cp \"terraform-complete-backup-$DATE.tar.gz\" \\\n        gs://terraform-backups/\nfi\n\n# Cleanup old backups (keep last 30 days)\nfind \"$BACKUP_DIR\" -name \"terraform-complete-backup-*.tar.gz\" \\\n    -mtime +30 -delete\n\necho \"🎉 All backups completed successfully\"\nEOF\n\nchmod +x scripts/backup-terraform-state.sh\n```\n\n### Disaster Recovery Procedures\n\n```bash\n# Disaster recovery script\ncat > scripts/disaster-recovery.sh <<'EOF'\n#!/bin/bash\n\nBACKUP_FILE=\"$1\"\nTARGET_ENVIRONMENT=\"$2\"\n\nif [[ -z \"$BACKUP_FILE\" || -z \"$TARGET_ENVIRONMENT\" ]]; then\n    echo \"Usage: $0 <backup-file.tar.gz> <target-environment>\"\n    echo \"Example: $0 terraform-complete-backup-20240115_143000.tar.gz production\"\n    exit 1\nfi\n\n# Verify backup file exists\nif [[ ! -f \"$BACKUP_FILE\" ]]; then\n    echo \"❌ Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\n# Create recovery directory\nRECOVERY_DIR=\"/tmp/terraform-recovery-$(date +%s)\"\nmkdir -p \"$RECOVERY_DIR\"\n\n# Extract backup\necho \"📦 Extracting backup...\"\ntar -xzf \"$BACKUP_FILE\" -C \"$RECOVERY_DIR\"\n\n# Navigate to target environment\ncd \"environments/$TARGET_ENVIRONMENT\" || {\n    echo \"❌ Target environment directory not found: environments/$TARGET_ENVIRONMENT\"\n    exit 1\n}\n\n# Backup current state before recovery\necho \"💾 Backing up current state...\"\nterraform state pull > \"current-state-backup-$(date +%Y%m%d_%H%M%S).json\"\n\n# Import recovered state\nRECOVERED_STATE=\"$RECOVERY_DIR/$TARGET_ENVIRONMENT/terraform-state-*.json\"\nif [[ -f $RECOVERED_STATE ]]; then\n    echo \"🔄 Restoring state from backup...\"\n    terraform state push \"$RECOVERED_STATE\"\nelse\n    echo \"❌ No state file found in backup for environment: $TARGET_ENVIRONMENT\"\n    exit 1\nfi\n\n# Verify state consistency\necho \"🔍 Verifying state consistency...\"\nif terraform plan -detailed-exitcode; then\n    echo \"✅ State restored successfully - no drift detected\"\nelif [[ $? -eq 2 ]]; then\n    echo \"⚠️  State restored but drift detected - manual review required\"\n    terraform plan\nelse\n    echo \"❌ State restoration failed - check error messages above\"\n    exit 1\nfi\n\n# Cleanup\nrm -rf \"$RECOVERY_DIR\"\n\necho \"🎉 Disaster recovery completed for environment: $TARGET_ENVIRONMENT\"\necho \"💡 Please review the plan output and apply changes if necessary\"\nEOF\n\nchmod +x scripts/disaster-recovery.sh\n```\n\n### State Migration and Refactoring\n\n```bash\n# State migration script for refactoring\ncat > scripts/migrate-state.sh <<'EOF'\n#!/bin/bash\n\n# Function to safely move resources in state\nmove_resource() {\n    local old_address=\"$1\"\n    local new_address=\"$2\"\n    \n    echo \"Moving $old_address to $new_address\"\n    \n    # Check if source resource exists\n    if terraform state show \"$old_address\" &>/dev/null; then\n        terraform state mv \"$old_address\" \"$new_address\"\n        echo \"✅ Successfully moved $old_address to $new_address\"\n    else\n        echo \"⚠️  Resource not found: $old_address\"\n    fi\n}\n\n# Function to import existing resources\nimport_resource() {\n    local resource_address=\"$1\"\n    local resource_id=\"$2\"\n    \n    echo \"Importing $resource_id as $resource_address\"\n    \n    if terraform import \"$resource_address\" \"$resource_id\"; then\n        echo \"✅ Successfully imported $resource_id as $resource_address\"\n    else\n        echo \"❌ Failed to import $resource_id\"\n    fi\n}\n\n# Example migrations\necho \"🔄 Starting state migrations...\"\n\n# Move resources to modules\nmove_resource \"aws_instance.web\" \"module.web_servers.aws_instance.main[0]\"\nmove_resource \"aws_security_group.web\" \"module.web_servers.aws_security_group.main\"\n\n# Import existing resources\nimport_resource \"aws_s3_bucket.existing_bucket\" \"existing-bucket-name\"\n\n# Remove resources that are no longer managed\nterraform state rm aws_instance.deprecated\n\necho \"🎉 State migrations completed\"\necho \"💡 Run 'terraform plan' to verify changes\"\nEOF\n\nchmod +x scripts/migrate-state.sh\n```\n\n## 13. Troubleshooting\n\n### Common Issues and Solutions\n\n```bash\n# Terraform troubleshooting script\ncat > scripts/troubleshoot-terraform.sh <<'EOF'\n#!/bin/bash\n\necho \"🔧 Terraform Troubleshooting Tool\"\necho \"================================\"\n\n# Check Terraform installation\ncheck_installation() {\n    echo \"📋 Checking Terraform installation...\"\n    \n    if command -v terraform &> /dev/null; then\n        terraform version\n        echo \"✅ Terraform is installed\"\n    else\n        echo \"❌ Terraform is not installed or not in PATH\"\n        return 1\n    fi\n}\n\n# Check configuration syntax\ncheck_configuration() {\n    echo \"📋 Checking configuration syntax...\"\n    \n    if terraform fmt -check -diff; then\n        echo \"✅ Configuration is properly formatted\"\n    else\n        echo \"⚠️  Configuration formatting issues found\"\n        terraform fmt -diff\n    fi\n    \n    if terraform validate; then\n        echo \"✅ Configuration is valid\"\n    else\n        echo \"❌ Configuration validation failed\"\n        return 1\n    fi\n}\n\n# Check provider authentication\ncheck_providers() {\n    echo \"📋 Checking provider authentication...\"\n    \n    # AWS\n    if aws sts get-caller-identity &>/dev/null; then\n        echo \"✅ AWS credentials are valid\"\n    else\n        echo \"⚠️  AWS credentials may be invalid or not configured\"\n    fi\n    \n    # Azure\n    if az account show &>/dev/null; then\n        echo \"✅ Azure credentials are valid\"\n    else\n        echo \"⚠️  Azure credentials may be invalid or not configured\"\n    fi\n    \n    # GCP\n    if gcloud auth list --filter=status:ACTIVE --format=\"value(account)\" &>/dev/null; then\n        echo \"✅ GCP credentials are valid\"\n    else\n        echo \"⚠️  GCP credentials may be invalid or not configured\"\n    fi\n}\n\n# Check state file\ncheck_state() {\n    echo \"📋 Checking state file...\"\n    \n    if terraform state list &>/dev/null; then\n        resource_count=$(terraform state list | wc -l)\n        echo \"✅ State file is accessible with $resource_count resources\"\n    else\n        echo \"❌ Cannot access state file\"\n        return 1\n    fi\n}\n\n# Check for common issues\ncheck_common_issues() {\n    echo \"📋 Checking for common issues...\"\n    \n    # Check for lock file\n    if [[ -f \".terraform.lock.hcl\" ]]; then\n        echo \"✅ Lock file exists\"\n    else\n        echo \"⚠️  Lock file missing - run 'terraform init'\"\n    fi\n    \n    # Check for local state file in production\n    if [[ -f \"terraform.tfstate\" ]] && [[ $(terraform workspace show) == \"production\" ]]; then\n        echo \"⚠️  Local state file detected in production workspace\"\n        echo \"    Consider using remote state for production\"\n    fi\n    \n    # Check for hardcoded secrets\n    if grep -r \"password\\s*=\\s*\\\"\" . --include=\"*.tf\" --include=\"*.tfvars\" 2>/dev/null; then\n        echo \"⚠️  Potential hardcoded passwords found\"\n    fi\n    \n    # Check for large state file\n    if [[ -f \"terraform.tfstate\" ]]; then\n        state_size=$(stat -f%z \"terraform.tfstate\" 2>/dev/null || stat -c%s \"terraform.tfstate\" 2>/dev/null)\n        if [[ $state_size -gt 10485760 ]]; then  # 10MB\n            echo \"⚠️  Large state file detected ($(($state_size / 1024 / 1024))MB)\"\n            echo \"    Consider splitting into smaller configurations\"\n        fi\n    fi\n}\n\n# Debug mode information\ndebug_info() {\n    echo \"📋 Debug information...\"\n    \n    echo \"Working directory: $(pwd)\"\n    echo \"Terraform workspace: $(terraform workspace show)\"\n    echo \"Environment variables:\"\n    env | grep -E \"^(TF_|AWS_|ARM_|GOOGLE_)\" | sed 's/=.*/=***/' | sort\n}\n\n# Run all checks\nrun_all_checks() {\n    check_installation || return 1\n    check_configuration || return 1\n    check_providers\n    check_state || return 1\n    check_common_issues\n    debug_info\n}\n\n# Main execution\ncase \"${1:-all}\" in\n    \"installation\")\n        check_installation\n        ;;\n    \"config\")\n        check_configuration\n        ;;\n    \"providers\")\n        check_providers\n        ;;\n    \"state\")\n        check_state\n        ;;\n    \"common\")\n        check_common_issues\n        ;;\n    \"debug\")\n        debug_info\n        ;;\n    \"all\")\n        run_all_checks\n        ;;\n    *)\n        echo \"Usage: $0 [installation|config|providers|state|common|debug|all]\"\n        exit 1\n        ;;\nesac\nEOF\n\nchmod +x scripts/troubleshoot-terraform.sh\n```\n\n### Advanced Debugging\n\n```bash\n# Advanced debugging techniques\ncat > scripts/debug-terraform.sh <<'EOF'\n#!/bin/bash\n\n# Enable debug logging\nexport TF_LOG=DEBUG\nexport TF_LOG_PATH=\"terraform-debug-$(date +%Y%m%d_%H%M%S).log\"\n\n# Create debug session\ndebug_session() {\n    local operation=\"$1\"\n    shift\n    \n    echo \"🐛 Starting debug session for: $operation\"\n    echo \"Debug log: $TF_LOG_PATH\"\n    \n    # Capture detailed timing information\n    time terraform \"$operation\" \"$@\" 2>&1 | tee -a \"$TF_LOG_PATH\"\n    \n    local exit_code=${PIPESTATUS[0]}\n    \n    if [[ $exit_code -ne 0 ]]; then\n        echo \"❌ Operation failed with exit code: $exit_code\"\n        echo \"📄 Last 50 lines of debug log:\"\n        tail -50 \"$TF_LOG_PATH\"\n    else\n        echo \"✅ Operation completed successfully\"\n    fi\n    \n    return $exit_code\n}\n\n# Analyze state file for issues\nanalyze_state() {\n    echo \"🔍 Analyzing state file...\"\n    \n    # Check for orphaned resources\n    echo \"Checking for potential orphaned resources...\"\n    terraform state list | while read resource; do\n        if ! terraform plan -target=\"$resource\" -detailed-exitcode >/dev/null 2>&1; then\n            echo \"⚠️  Potential issue with resource: $resource\"\n        fi\n    done\n    \n    # Check for large resources in state\n    echo \"Checking for large resources...\"\n    terraform state pull | jq -r '.resources[] | select(.instances[0].attributes | length > 50) | .address' 2>/dev/null | head -10\n}\n\n# Provider debug information\ndebug_providers() {\n    echo \"🔍 Debugging provider issues...\"\n    \n    # Show provider configuration\n    terraform providers\n    \n    # Check provider cache\n    if [[ -d \"$HOME/.terraform.d/plugin-cache\" ]]; then\n        echo \"Provider cache contents:\"\n        ls -la \"$HOME/.terraform.d/plugin-cache\"\n    fi\n    \n    # Check for provider version conflicts\n    terraform version -json | jq '.provider_selections' 2>/dev/null\n}\n\n# Network and API debugging\ndebug_network() {\n    echo \"🌐 Debugging network connectivity...\"\n    \n    # Test connectivity to common endpoints\n    local endpoints=(\n        \"https://releases.hashicorp.com\"\n        \"https://registry.terraform.io\"\n        \"https://api.github.com\"\n        \"https://aws.amazon.com\"\n        \"https://management.azure.com\"\n        \"https://www.googleapis.com\"\n    )\n    \n    for endpoint in \"${endpoints[@]}\"; do\n        if curl -s --connect-timeout 5 \"$endpoint\" >/dev/null; then\n            echo \"✅ $endpoint - OK\"\n        else\n            echo \"❌ $endpoint - FAILED\"\n        fi\n    done\n}\n\n# Performance analysis\nanalyze_performance() {\n    echo \"📊 Analyzing Terraform performance...\"\n    \n    # Generate and analyze dependency graph\n    terraform graph > dependency-graph.dot\n    \n    # Count resources by type\n    echo \"Resource distribution:\"\n    terraform state list | cut -d. -f1 | sort | uniq -c | sort -nr | head -10\n    \n    # Estimate plan time based on resources\n    resource_count=$(terraform state list | wc -l)\n    estimated_time=$((resource_count * 2))  # Rough estimate: 2 seconds per resource\n    echo \"Estimated plan time: ${estimated_time} seconds for $resource_count resources\"\n}\n\n# Usage\ncase \"${1:-help}\" in\n    \"session\")\n        shift\n        debug_session \"$@\"\n        ;;\n    \"state\")\n        analyze_state\n        ;;\n    \"providers\")\n        debug_providers\n        ;;\n    \"network\")\n        debug_network\n        ;;\n    \"performance\")\n        analyze_performance\n        ;;\n    \"all\")\n        debug_providers\n        debug_network\n        analyze_state\n        analyze_performance\n        ;;\n    \"help\"|*)\n        echo \"Usage: $0 [session|state|providers|network|performance|all]\"\n        echo \"\"\n        echo \"  session <operation> [args]  - Debug specific Terraform operation\"\n        echo \"  state                       - Analyze state file for issues\"\n        echo \"  providers                   - Debug provider configuration\"\n        echo \"  network                     - Test network connectivity\"\n        echo \"  performance                 - Analyze performance characteristics\"\n        echo \"  all                         - Run all debug checks\"\n        ;;\nesac\nEOF\n\nchmod +x scripts/debug-terraform.sh\n```\n\n## 14. Maintenance\n\n### Update Procedures\n\n```bash\n# Terraform update script\ncat > scripts/update-terraform.sh <<'EOF'\n#!/bin/bash\n\nCURRENT_VERSION=$(terraform version -json | jq -r '.terraform_version')\necho \"Current Terraform version: $CURRENT_VERSION\"\n\n# Check for latest version\ncheck_latest_version() {\n    local latest_version\n    latest_version=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | jq -r '.tag_name' | sed 's/v//')\n    echo \"Latest Terraform version: $latest_version\"\n    \n    if [[ \"$CURRENT_VERSION\" != \"$latest_version\" ]]; then\n        echo \"⚠️  Update available: $CURRENT_VERSION → $latest_version\"\n        return 1\n    else\n        echo \"✅ Terraform is up to date\"\n        return 0\n    fi\n}\n\n# Update using package manager\nupdate_terraform() {\n    echo \"🔄 Updating Terraform...\"\n    \n    if command -v apt &>/dev/null; then\n        sudo apt update && sudo apt upgrade terraform\n    elif command -v yum &>/dev/null; then\n        sudo yum update terraform\n    elif command -v dnf &>/dev/null; then\n        sudo dnf update terraform\n    elif command -v pacman &>/dev/null; then\n        sudo pacman -Syu terraform\n    elif command -v zypper &>/dev/null; then\n        sudo zypper update terraform\n    elif command -v brew &>/dev/null; then\n        brew upgrade terraform\n    else\n        echo \"❌ No supported package manager found\"\n        echo \"💡 Please update manually from: https://releases.hashicorp.com/terraform/\"\n        return 1\n    fi\n}\n\n# Update providers\nupdate_providers() {\n    echo \"🔄 Updating providers...\"\n    terraform init -upgrade\n}\n\n# Verify update\nverify_update() {\n    echo \"🔍 Verifying update...\"\n    \n    terraform version\n    \n    # Test basic functionality\n    if terraform validate; then\n        echo \"✅ Update verification successful\"\n    else\n        echo \"❌ Update verification failed\"\n        return 1\n    fi\n}\n\n# Main update process\nmain() {\n    if check_latest_version; then\n        exit 0\n    fi\n    \n    echo \"Proceed with update? (y/N)\"\n    read -r response\n    \n    if [[ \"$response\" =~ ^[Yy]$ ]]; then\n        update_terraform || exit 1\n        update_providers || exit 1\n        verify_update || exit 1\n        echo \"🎉 Terraform update completed successfully\"\n    else\n        echo \"Update cancelled\"\n    fi\n}\n\nmain \"$@\"\nEOF\n\nchmod +x scripts/update-terraform.sh\n```\n\n### Maintenance Tasks\n\n```bash\n# Comprehensive maintenance script\ncat > scripts/terraform-maintenance.sh <<'EOF'\n#!/bin/bash\n\nMAINTENANCE_LOG=\"/var/log/terraform-maintenance-$(date +%Y%m%d_%H%M%S).log\"\n\nlog() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a \"$MAINTENANCE_LOG\"\n}\n\n# Cleanup old plan files\ncleanup_plans() {\n    log \"🧹 Cleaning up old plan files...\"\n    find . -name \"*.tfplan\" -mtime +7 -delete\n    find . -name \"*.tfplan.json\" -mtime +7 -delete\n    log \"✅ Plan file cleanup completed\"\n}\n\n# Cleanup provider cache\ncleanup_provider_cache() {\n    log \"🧹 Cleaning up provider cache...\"\n    if [[ -d \"$HOME/.terraform.d/plugin-cache\" ]]; then\n        # Remove providers older than 30 days\n        find \"$HOME/.terraform.d/plugin-cache\" -type f -mtime +30 -delete\n        \n        # Remove empty directories\n        find \"$HOME/.terraform.d/plugin-cache\" -type d -empty -delete\n        \n        cache_size=$(du -sh \"$HOME/.terraform.d/plugin-cache\" 2>/dev/null | cut -f1)\n        log \"✅ Provider cache cleanup completed - current size: $cache_size\"\n    fi\n}\n\n# Validate all configurations\nvalidate_configurations() {\n    log \"🔍 Validating all configurations...\"\n    \n    local validation_failed=false\n    \n    # Find all directories with Terraform files\n    find . -name \"*.tf\" -exec dirname {} \\; | sort -u | while read -r dir; do\n        log \"Validating: $dir\"\n        cd \"$dir\" || continue\n        \n        if terraform validate; then\n            log \"✅ $dir validation passed\"\n        else\n            log \"❌ $dir validation failed\"\n            validation_failed=true\n        fi\n        \n        cd - > /dev/null\n    done\n    \n    if [[ \"$validation_failed\" == \"true\" ]]; then\n        log \"⚠️  Some validations failed - please review\"\n    else\n        log \"✅ All validations passed\"\n    fi\n}\n\n# Check for deprecated features\ncheck_deprecated() {\n    log \"🔍 Checking for deprecated features...\"\n    \n    # Check for deprecated syntax\n    local deprecated_patterns=(\n        \"provider\\s+\\\"[^\\\"]+\\\"\\s+{\" # Old provider syntax\n        \"terraform\\s+{[^}]*version\\s*=\" # Old terraform version constraints\n        \"ignore_changes\\s*=\" # Old ignore_changes syntax\n    )\n    \n    for pattern in \"${deprecated_patterns[@]}\"; do\n        if grep -r \"$pattern\" . --include=\"*.tf\" 2>/dev/null; then\n            log \"⚠️  Deprecated pattern found: $pattern\"\n        fi\n    done\n    \n    log \"✅ Deprecation check completed\"\n}\n\n# Security audit\nsecurity_audit() {\n    log \"🔒 Performing security audit...\"\n    \n    # Check for potential security issues\n    local security_issues=()\n    \n    # Check for hardcoded secrets\n    if grep -r -i \"password\\s*=\\s*\\\"[^$]\" . --include=\"*.tf\" --include=\"*.tfvars\" 2>/dev/null; then\n        security_issues+=(\"Potential hardcoded passwords\")\n    fi\n    \n    # Check for public access\n    if grep -r \"0.0.0.0/0\" . --include=\"*.tf\" 2>/dev/null; then\n        security_issues+=(\"Public access (0.0.0.0/0) found\")\n    fi\n    \n    # Check for unencrypted resources\n    if grep -r \"encrypt.*=.*false\" . --include=\"*.tf\" 2>/dev/null; then\n        security_issues+=(\"Unencrypted resources found\")\n    fi\n    \n    if [[ ${#security_issues[@]} -gt 0 ]]; then\n        log \"⚠️  Security issues found:\"\n        for issue in \"${security_issues[@]}\"; do\n            log \"  - $issue\"\n        done\n    else\n        log \"✅ No obvious security issues found\"\n    fi\n}\n\n# State health check\nstate_health_check() {\n    log \"🏥 Performing state health check...\"\n    \n    # Check state file size\n    if [[ -f \"terraform.tfstate\" ]]; then\n        state_size=$(stat -f%z \"terraform.tfstate\" 2>/dev/null || stat -c%s \"terraform.tfstate\" 2>/dev/null)\n        state_size_mb=$((state_size / 1024 / 1024))\n        \n        if [[ $state_size_mb -gt 50 ]]; then\n            log \"⚠️  Large state file detected: ${state_size_mb}MB\"\n        else\n            log \"✅ State file size OK: ${state_size_mb}MB\"\n        fi\n    fi\n    \n    # Check for drift\n    if terraform plan -detailed-exitcode > /dev/null 2>&1; then\n        log \"✅ No infrastructure drift detected\"\n    else\n        exit_code=$?\n        if [[ $exit_code -eq 2 ]]; then\n            log \"⚠️  Infrastructure drift detected\"\n        else\n            log \"❌ Error checking for drift\"\n        fi\n    fi\n}\n\n# Generate maintenance report\ngenerate_report() {\n    log \"📊 Generating maintenance report...\"\n    \n    local report_file=\"/tmp/terraform-maintenance-report-$(date +%Y%m%d_%H%M%S).md\"\n    \n    cat > \"$report_file\" <<EOF\n# Terraform Maintenance Report\n\n**Date:** $(date)\n**Duration:** $((SECONDS / 60)) minutes\n\n## Summary\n\n- Configuration validation: $(grep \"validation\" \"$MAINTENANCE_LOG\" | grep -c \"passed\")\n- Security audit: Completed\n- State health check: Completed\n- Cleanup operations: Completed\n\n## Recommendations\n\n$(grep \"⚠️\" \"$MAINTENANCE_LOG\" | sed 's/.*⚠️  /- /')\n\n## Full Log\n\n\\`\\`\\`\n$(cat \"$MAINTENANCE_LOG\")\n\\`\\`\\`\nEOF\n    \n    log \"📄 Maintenance report generated: $report_file\"\n    \n    # Email report if configured\n    if [[ -n \"$MAINTENANCE_EMAIL\" ]]; then\n        mail -s \"Terraform Maintenance Report - $(date)\" \"$MAINTENANCE_EMAIL\" < \"$report_file\"\n        log \"📧 Report emailed to: $MAINTENANCE_EMAIL\"\n    fi\n}\n\n# Main maintenance routine\nmain() {\n    log \"🚀 Starting Terraform maintenance...\"\n    \n    cleanup_plans\n    cleanup_provider_cache\n    validate_configurations\n    check_deprecated\n    security_audit\n    state_health_check\n    generate_report\n    \n    log \"🎉 Terraform maintenance completed\"\n    log \"📊 Total runtime: $((SECONDS / 60)) minutes\"\n}\n\n# Run maintenance\nmain \"$@\"\nEOF\n\nchmod +x scripts/terraform-maintenance.sh\n\n# Schedule maintenance with cron\ncat > scripts/schedule-maintenance.sh <<'EOF'\n#!/bin/bash\n\n# Add to crontab for weekly maintenance\n(crontab -l 2>/dev/null; echo \"0 2 * * 0 /path/to/terraform-maintenance.sh\") | crontab -\n\necho \"✅ Weekly maintenance scheduled for Sundays at 2 AM\"\nEOF\n\nchmod +x scripts/schedule-maintenance.sh\n```\n\n## 15. Integration Examples\n\n### CI/CD Pipeline Integration\n\n```bash\n# GitHub Actions workflow\nmkdir -p .github/workflows\ncat > .github/workflows/terraform.yml <<EOF\nname: Terraform Multi-Cloud Deployment\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  TF_VERSION: 1.6.4\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment: [development, staging, production]\n        \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v3\n      with:\n        terraform_version: \\${{ env.TF_VERSION }}\n        cli_config_credentials_token: \\${{ secrets.TF_CLOUD_TOKEN }}\n    \n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v4\n      with:\n        aws-access-key-id: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-west-2\n    \n    - name: Terraform Format Check\n      run: terraform fmt -check -recursive\n    \n    - name: Terraform Initialize\n      run: terraform init\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Plan\n      run: terraform plan -var-file=\"\\${{ matrix.environment }}.tfvars\"\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Security Scan with Checkov\n      uses: bridgecrewio/checkov-action@master\n      with:\n        directory: .\n        framework: terraform\n        output_format: sarif\n        output_file_path: checkov.sarif\n    \n    - name: Upload Checkov results\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: checkov.sarif\n    \n    - name: Terraform Apply (Production)\n      if: github.ref == 'refs/heads/main' && matrix.environment == 'production'\n      run: terraform apply -auto-approve -var-file=\"production.tfvars\"\n      working-directory: environments/production\nEOF\n```\n\n### GitLab CI Integration\n\n```bash\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - validate\n  - plan\n  - apply\n  - destroy\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_VERSION: \"1.6.4\"\n  TF_IN_AUTOMATION: \"true\"\n\ncache:\n  key: \"\\${TF_ROOT}\"\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform fmt -check -recursive\n    - terraform validate\n    - |\n      for dir in environments/*/; do\n        cd \"\\$dir\"\n        terraform validate\n        cd -\n      done\n  rules:\n    - if: '\\$CI_MERGE_REQUEST_IID'\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\nplan:production:\n  stage: plan\n  script:\n    - cd environments/production\n    - terraform plan -var-file=\"production.tfvars\" -out=\"production.tfplan\"\n  artifacts:\n    paths:\n      - environments/production/production.tfplan\n    expire_in: 1 week\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\napply:production:\n  stage: apply\n  script:\n    - cd environments/production\n    - terraform apply -input=false \"production.tfplan\"\n  dependencies:\n    - plan:production\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n      when: manual\nEOF\n```\n\n### Jenkins Pipeline\n\n```groovy\n// Jenkinsfile\npipeline {\n    agent any\n    \n    environment {\n        TF_VERSION = '1.6.4'\n        AWS_DEFAULT_REGION = 'us-west-2'\n    }\n    \n    stages {\n        stage('Checkout') {\n            steps {\n                checkout scm\n            }\n        }\n        \n        stage('Setup') {\n            steps {\n                sh '''\n                    # Install Terraform if not present\n                    if ! command -v terraform &> /dev/null; then\n                        wget https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip\n                        unzip terraform_${TF_VERSION}_linux_amd64.zip\n                        chmod +x terraform\n                        sudo mv terraform /usr/local/bin/\n                    fi\n                    \n                    terraform version\n                '''\n            }\n        }\n        \n        stage('Validate') {\n            parallel {\n                stage('Format Check') {\n                    steps {\n                        sh 'terraform fmt -check -recursive'\n                    }\n                }\n                stage('Configuration Validation') {\n                    steps {\n                        sh '''\n                            for dir in environments/*/; do\n                                cd \"$dir\"\n                                terraform init\n                                terraform validate\n                                cd -\n                            done\n                        '''\n                    }\n                }\n                stage('Security Scan') {\n                    steps {\n                        sh '''\n                            # Install and run Checkov\n                            pip3 install checkov\n                            checkov --framework terraform --directory .\n                        '''\n                    }\n                }\n            }\n        }\n        \n        stage('Plan') {\n            steps {\n                script {\n                    def environments = ['development', 'staging', 'production']\n                    def planResults = [:]\n                    \n                    environments.each { env ->\n                        planResults[env] = {\n                            dir(\"environments/${env}\") {\n                                sh \"\"\"\n                                    terraform init\n                                    terraform plan -var-file=\"${env}.tfvars\" -out=\"${env}.tfplan\"\n                                \"\"\"\n                            }\n                        }\n                    }\n                    \n                    parallel planResults\n                }\n            }\n        }\n        \n        stage('Apply') {\n            when {\n                branch 'main'\n            }\n            steps {\n                script {\n                    input message: 'Apply Terraform changes?', ok: 'Apply'\n                    \n                    dir('environments/production') {\n                        sh 'terraform apply -input=false production.tfplan'\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: 'environments/**/*.tfplan', fingerprint: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: 'checkov-report',\n                reportFiles: 'index.html',\n                reportName: 'Checkov Security Report'\n            ])\n        }\n        failure {\n            emailext (\n                subject: \"Terraform Pipeline Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"The Terraform pipeline has failed. Please check the build logs for details.\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL}\"\n            )\n        }\n    }\n}\n```\n\n### Azure DevOps Pipeline\n\n```yaml\n# azure-pipelines.yml\ntrigger:\n  branches:\n    include:\n    - main\n    - develop\n  paths:\n    include:\n    - terraform/*\n    - environments/*\n\npool:\n  vmImage: 'ubuntu-latest'\n\nvariables:\n  TF_VERSION: '1.6.4'\n  TF_IN_AUTOMATION: 'true'\n\nstages:\n- stage: Validate\n  displayName: 'Validate Terraform'\n  jobs:\n  - job: ValidateJob\n    displayName: 'Validate Configuration'\n    steps:\n    - task: TerraformInstaller@0\n      displayName: 'Install Terraform'\n      inputs:\n        terraformVersion: $(TF_VERSION)\n    \n    - script: |\n        terraform fmt -check -recursive\n        if [ $? -ne 0 ]; then\n          echo \"##vso[task.logissue type=error]Terraform files are not formatted correctly\"\n          exit 1\n        fi\n      displayName: 'Check Terraform Format'\n    \n    - script: |\n        for dir in environments/*/; do\n          echo \"Validating $dir\"\n          cd \"$dir\"\n          terraform init -backend=false\n          terraform validate\n          cd -\n        done\n      displayName: 'Validate All Environments'\n    \n    - script: |\n        # Install and run security scanning\n        pip install checkov\n        checkov --framework terraform --directory . --output cli --output junitxml --output-file-path checkov-results.xml\n      displayName: 'Security Scan with Checkov'\n    \n    - task: PublishTestResults@2\n      condition: always()\n      inputs:\n        testResultsFormat: 'JUnit'\n        testResultsFiles: 'checkov-results.xml'\n        failTaskOnFailedTests: true\n\n- stage: Plan\n  displayName: 'Terraform Plan'\n  dependsOn: Validate\n  condition: succeeded()\n  jobs:\n  - job: PlanProduction\n    displayName: 'Plan Production Environment'\n    steps:\n    - task: TerraformInstaller@0\n      inputs:\n        terraformVersion: $(TF_VERSION)\n    \n    - task: AzureCLI@2\n      displayName: 'Configure Azure Backend'\n      inputs:\n        azureSubscription: 'Production-ServiceConnection'\n        scriptType: 'bash'\n        scriptLocation: 'inlineScript'\n        inlineScript: |\n          cd environments/production\n          terraform init \\\n            -backend-config=\"resource_group_name=$(BACKEND_RESOURCE_GROUP)\" \\\n            -backend-config=\"storage_account_name=$(BACKEND_STORAGE_ACCOUNT)\" \\\n            -backend-config=\"container_name=$(BACKEND_CONTAINER)\" \\\n            -backend-config=\"key=production.tfstate\"\n    \n    - task: AzureCLI@2\n      displayName: 'Terraform Plan'\n      inputs:\n        azureSubscription: 'Production-ServiceConnection'\n        scriptType: 'bash'\n        scriptLocation: 'inlineScript'\n        inlineScript: |\n          cd environments/production\n          terraform plan -var-file=\"production.tfvars\" -out=production.tfplan\n    \n    - task: PublishPipelineArtifact@1\n      inputs:\n        targetPath: 'environments/production/production.tfplan'\n        artifact: 'terraform-plan-production'\n\n- stage: Apply\n  displayName: 'Terraform Apply'\n  dependsOn: Plan\n  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))\n  jobs:\n  - deployment: ApplyProduction\n    displayName: 'Apply to Production'\n    environment: 'Production'\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - task: TerraformInstaller@0\n            inputs:\n              terraformVersion: $(TF_VERSION)\n          \n          - task: DownloadPipelineArtifact@2\n            inputs:\n              artifact: 'terraform-plan-production'\n              path: $(System.DefaultWorkingDirectory)/environments/production\n          \n          - task: AzureCLI@2\n            displayName: 'Terraform Apply'\n            inputs:\n              azureSubscription: 'Production-ServiceConnection'\n              scriptType: 'bash'\n              scriptLocation: 'inlineScript'\n              inlineScript: |\n                cd environments/production\n                terraform init \\\n                  -backend-config=\"resource_group_name=$(BACKEND_RESOURCE_GROUP)\" \\\n                  -backend-config=\"storage_account_name=$(BACKEND_STORAGE_ACCOUNT)\" \\\n                  -backend-config=\"container_name=$(BACKEND_CONTAINER)\" \\\n                  -backend-config=\"key=production.tfstate\"\n                terraform apply -input=false production.tfplan\n```\n\n### Advanced Atlantis Configuration\n\n```yaml\n# atlantis.yaml - GitOps for Terraform\nversion: 3\nautomerge: false\ndelete_source_branch_on_merge: true\n\nprojects:\n- name: production\n  dir: environments/production\n  workspace: production\n  terraform_version: v1.6.4\n  apply_requirements: [approved, mergeable]\n  plan_requirements: [mergeable]\n  workflow: production\n  \n- name: staging\n  dir: environments/staging  \n  workspace: staging\n  terraform_version: v1.6.4\n  apply_requirements: [mergeable]\n  workflow: staging\n\n- name: development\n  dir: environments/development\n  workspace: development\n  terraform_version: v1.6.4\n  workflow: development\n\nworkflows:\n  production:\n    plan:\n      steps:\n      - env:\n          name: TF_IN_AUTOMATION\n          value: \"true\"\n      - init\n      - plan:\n          extra_args: [\"-var-file=production.tfvars\"]\n      - run: |\n          # Security scanning\n          checkov --framework terraform --directory . --check CKV_AWS_79,CKV_AWS_8\n          \n          # Cost estimation\n          if command -v infracost &> /dev/null; then\n            infracost breakdown --path=.\n          fi\n    apply:\n      steps:\n      - env:\n          name: TF_IN_AUTOMATION  \n          value: \"true\"\n      - init\n      - apply:\n          extra_args: [\"-var-file=production.tfvars\"]\n      - run: |\n          # Post-apply notifications\n          curl -X POST -H 'Content-type: application/json' \\\n            --data '{\"text\":\"✅ Production infrastructure updated successfully\"}' \\\n            \"$SLACK_WEBHOOK_URL\"\n            \n  staging:\n    plan:\n      steps:\n      - init\n      - plan:\n          extra_args: [\"-var-file=staging.tfvars\"]\n    apply:\n      steps:\n      - init  \n      - apply:\n          extra_args: [\"-var-file=staging.tfvars\"]\n          \n  development:\n    plan:\n      steps:\n      - init\n      - plan:\n          extra_args: [\"-var-file=development.tfvars\"]\n    apply:\n      steps:\n      - init\n      - apply:\n          extra_args: [\"-var-file=development.tfvars\"]\n```\n\n### Kubernetes Operator Integration\n\n```yaml\n# terraform-operator.yaml - Deploy Terraform via Kubernetes\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: terraforms.infrastructure.company.com\nspec:\n  group: infrastructure.company.com\n  versions:\n  - name: v1\n    served: true\n    storage: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              source:\n                type: object\n                properties:\n                  git:\n                    type: object\n                    properties:\n                      url:\n                        type: string\n                      branch:\n                        type: string\n                      path:\n                        type: string\n              variables:\n                type: object\n                additionalProperties:\n                  type: string\n              workspace:\n                type: string\n              destroy:\n                type: boolean\n                default: false\n          status:\n            type: object\n            properties:\n              phase:\n                type: string\n              lastApplied:\n                type: string\n                format: date-time\n              outputs:\n                type: object\n                additionalProperties:\n                  type: string\n  scope: Namespaced\n  names:\n    plural: terraforms\n    singular: terraform\n    kind: Terraform\n    shortNames:\n    - tf\n\n---\n# Example Terraform resource managed by Kubernetes\napiVersion: infrastructure.company.com/v1\nkind: Terraform\nmetadata:\n  name: web-application-infrastructure\n  namespace: production\nspec:\n  source:\n    git:\n      url: \"https://github.com/company/infrastructure\"\n      branch: \"main\"\n      path: \"environments/production\"\n  workspace: \"production\"\n  variables:\n    project_name: \"web-application\"\n    environment: \"production\"\n    instance_type: \"m5.large\"\n    min_capacity: \"3\"\n    max_capacity: \"10\"\n  destroy: false\n```\n\n### Terraform with Vault Integration\n\n```bash\n# Vault integration for dynamic credentials\ncat > vault-integration.tf <<EOF\n# Vault provider for dynamic secrets\nterraform {\n  required_providers {\n    vault = {\n      source  = \"hashicorp/vault\"\n      version = \"~> 3.20\"\n    }\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n  }\n}\n\nprovider \"vault\" {\n  address = var.vault_address\n  # Authentication handled via VAULT_TOKEN env var or AWS auth\n}\n\n# Dynamic AWS credentials from Vault\ndata \"vault_aws_access_credentials\" \"aws_creds\" {\n  backend = \"aws\"\n  role    = \"terraform-${terraform.workspace}\"\n  type    = \"creds\"\n}\n\nprovider \"aws\" {\n  region     = var.aws_region\n  access_key = data.vault_aws_access_credentials.aws_creds.access_key\n  secret_key = data.vault_aws_access_credentials.aws_creds.secret_key\n  token      = data.vault_aws_access_credentials.aws_creds.security_token\n}\n\n# Dynamic database credentials\ndata \"vault_database_credentials\" \"db\" {\n  backend = \"database\"\n  role    = \"terraform-${terraform.workspace}-db\"\n}\n\n# RDS instance with dynamic credentials\nresource \"aws_db_instance\" \"main\" {\n  identifier = \"${var.project_name}-${terraform.workspace}\"\n  \n  engine         = \"postgresql\"\n  engine_version = \"15.4\"\n  instance_class = var.db_instance_class\n  \n  allocated_storage = 20\n  storage_encrypted = true\n  \n  db_name  = var.database_name\n  username = data.vault_database_credentials.db.username\n  password = data.vault_database_credentials.db.password\n  \n  skip_final_snapshot = false\n  final_snapshot_identifier = \"${var.project_name}-${terraform.workspace}-final\"\n  \n  tags = local.common_tags\n}\n\n# Store outputs back in Vault\nresource \"vault_kv_secret_v2\" \"terraform_outputs\" {\n  mount = \"terraform\"\n  name  = \"${terraform.workspace}/outputs\"\n  \n  data_json = jsonencode({\n    vpc_id           = aws_vpc.main.id\n    database_endpoint = aws_db_instance.main.endpoint\n    load_balancer_dns = aws_lb.main.dns_name\n    timestamp        = timestamp()\n  })\n}\nEOF\n\n# Vault configuration script\ncat > scripts/setup-vault-integration.sh <<'EOF'\n#!/bin/bash\n\nVAULT_ADDR=\"${VAULT_ADDR:-https://vault.company.com}\"\nVAULT_TOKEN=\"${VAULT_TOKEN}\"\n\n# Enable AWS secrets engine\nvault auth -method=aws\nvault secrets enable -path=aws aws\n\n# Configure AWS secrets engine\nvault write aws/config/root \\\n    access_key=\"$AWS_ACCESS_KEY_ID\" \\\n    secret_key=\"$AWS_SECRET_ACCESS_KEY\" \\\n    region=\"us-west-2\"\n\n# Create Terraform role for each environment\nfor env in development staging production; do\n    vault write aws/roles/terraform-$env \\\n        credential_type=\"assumed_role\" \\\n        role_arns=\"arn:aws:iam::ACCOUNT:role/TerraformRole-$env\" \\\n        default_sts_ttl=\"3600\" \\\n        max_sts_ttl=\"7200\"\ndone\n\n# Enable database secrets engine\nvault secrets enable database\n\n# Configure PostgreSQL database\nvault write database/config/production-db \\\n    plugin_name=\"postgresql-database-plugin\" \\\n    connection_url=\"postgresql://{{username}}:{{password}}@postgres.company.com:5432/terraform?sslmode=require\" \\\n    allowed_roles=\"terraform-production-db\" \\\n    username=\"vault-admin\" \\\n    password=\"vault-admin-password\"\n\n# Create database role\nvault write database/roles/terraform-production-db \\\n    db_name=\"production-db\" \\\n    creation_statements=\"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO \\\"{{name}}\\\";\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n\necho \"✅ Vault integration configured successfully\"\nEOF\n\nchmod +x scripts/setup-vault-integration.sh\n```\n\n## 16. Additional Resources\n\n- [Official Terraform Documentation](https://developer.hashicorp.com/terraform/docs)\n- [Terraform Registry](https://registry.terraform.io/)\n- [Terraform Best Practices](https://developer.hashicorp.com/terraform/cloud-docs/recommended-practices)\n- [Multi-Cloud Architecture Guide](https://developer.hashicorp.com/terraform/tutorials/aws-get-started)\n- [Security Best Practices](https://developer.hashicorp.com/terraform/language/values/sensitive)\n- [AWS Provider Documentation](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Provider Documentation](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [GCP Provider Documentation](https://registry.terraform.io/providers/hashicorp/google/latest/docs)\n- [Terraform Community Forum](https://discuss.hashicorp.com/c/terraform-core)\n- [HashiCorp Learn Terraform](https://learn.hashicorp.com/terraform)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h2 id=\"1-introduction\" class=\"mobile-header\">1. Introduction</h2>\n<p class=\"mobile-paragraph\">Terraform is a free and open-source Infrastructure as Code (IaC) tool developed by HashiCorp for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers. Originally created by Mitchell Hashimoto in 2014, Terraform uses declarative configuration files written in HashiCorp Configuration Language (HCL) to manage infrastructure resources with a declarative approach.</p>\n<h3 id=\"foss-context\" class=\"mobile-header\">FOSS Context</h3>\n<p class=\"mobile-paragraph\">As a pure open-source solution, Terraform serves as a powerful alternative to commercial IaC solutions like AWS CloudFormation (AWS-specific), Azure Resource Manager (Azure-specific), or proprietary enterprise tools like Pulumi Enterprise or VMware vRealize. Terraform provides enterprise-grade capabilities without licensing costs:</p>\n<li class=\"mobile-list-item\"><strong>Multi-cloud management</strong> across 3000+ providers</li>\n<li class=\"mobile-list-item\"><strong>State management</strong> with remote backends and locking</li>\n<li class=\"mobile-list-item\"><strong>Extensive provider ecosystem</strong> maintained by HashiCorp and community</li>\n<li class=\"mobile-list-item\"><strong>Team collaboration</strong> features through Terraform Cloud (freemium) or self-hosted alternatives</li>\n<li class=\"mobile-list-item\"><strong>Module system</strong> for reusable infrastructure components</li>\n<li class=\"mobile-list-item\"><strong>Import capabilities</strong> for existing infrastructure</li>\n<li class=\"mobile-list-item\"><strong>Plan and apply workflow</strong> with preview and approval processes</li>\n<h3 id=\"key-benefits\" class=\"mobile-header\">Key Benefits</h3>\n<li class=\"mobile-list-item\"><strong>Vendor neutrality</strong>: Works across all major cloud providers and on-premises systems</li>\n<li class=\"mobile-list-item\"><strong>Declarative syntax</strong>: Define desired state, Terraform handles the implementation</li>\n<li class=\"mobile-list-item\"><strong>Resource graph</strong>: Automatically determines resource dependencies and creation order</li>\n<li class=\"mobile-list-item\"><strong>State tracking</strong>: Maintains current infrastructure state for accurate change management</li>\n<li class=\"mobile-list-item\"><strong>Immutable infrastructure</strong>: Encourages infrastructure replacement rather than modification</li>\n<li class=\"mobile-list-item\"><strong>Community support</strong>: Large ecosystem with extensive documentation and community modules</li>\n<h2 id=\"2-prerequisites\" class=\"mobile-header\">2. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for large infrastructures)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 5GB minimum (more for state files and provider binaries)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for cloud provider APIs</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 12.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">HTTPS access to cloud provider APIs (port 443)</li>\n<li class=\"mobile-list-item\">Access to Terraform Registry (registry.terraform.io)</li>\n<li class=\"mobile-list-item\">Access to HashiCorp releases (releases.hashicorp.com)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Cloud provider CLI tools (aws-cli, azure-cli, gcloud)</li>\n<li class=\"mobile-list-item\">Git for configuration management</li>\n<li class=\"mobile-list-item\">Text editor or IDE</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required for installation</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform\n\n# Verify installation\nterraform version\n\n# Alternative: DNF for newer systems\nsudo dnf install -y yum-utils\nsudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\nsudo dnf install -y terraform</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho &quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install Terraform\nsudo apt update\nsudo apt install -y terraform\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from community repository\nsudo pacman -S terraform\n\n# Alternative: Install from AUR\nyay -S terraform\n\n# Install additional tools\nsudo pacman -S terraform-docs tflint\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from Alpine repositories\nsudo apk update\nsudo apk add terraform\n\n# Install additional tools\nsudo apk add bash git curl\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y terraform\n\n# SLES 15\nsudo SUSEConnect -p sle-module-development-tools/15.5/x86_64\nsudo zypper install -y terraform\n\n# Alternative: Add HashiCorp repository\nsudo zypper addrepo https://rpm.releases.hashicorp.com/SLES/hashicorp.repo\nsudo zypper refresh\nsudo zypper install terraform\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew tap hashicorp/tap\nbrew install hashicorp/tap/terraform\n\n# Alternative: Install specific version\nbrew install terraform@1.6\n\n# Verify installation\nterraform version\n\n# Using tfenv for version management\nbrew install tfenv\ntfenv install latest\ntfenv use latest</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install terraform\n\n# Using ports\ncd /usr/ports/sysutils/terraform\nmake install clean\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install terraform\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install terraform\n\n# Method 3: Manual installation\n# Download from https://releases.hashicorp.com/terraform/\n# Extract terraform.exe to C:\\terraform\n# Add C:\\terraform to PATH\n\n# Method 4: Using Winget\nwinget install HashiCorp.Terraform\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-initial-configuration\" class=\"mobile-header\">4. Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create terraform user</strong> (optional for dedicated service):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /opt/terraform -s /sbin/nologin -c &quot;Terraform Service&quot; terraform</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/terraform/</code> (custom) or <code class=\"mobile-inline-code\">/usr/local/bin/</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/terraform/</code> (custom) or <code class=\"mobile-inline-code\">/usr/local/bin/</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/terraform/</code> (custom) or <code class=\"mobile-inline-code\">/usr/bin/</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/terraform/</code> (custom) or <code class=\"mobile-inline-code\">/usr/bin/</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/terraform/</code> (custom) or <code class=\"mobile-inline-code\">/usr/local/bin/</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/terraform/</code> or <code class=\"mobile-inline-code\">/opt/homebrew/etc/terraform/</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/terraform/</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\terraform\\</code> or <code class=\"mobile-inline-code\">%APPDATA%\\terraform\\</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential initial configuration</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create workspace directory\nmkdir -p ~/terraform/projects\ncd ~/terraform/projects\n\n# Create first Terraform configuration\ncat &gt; main.tf &lt;&lt;EOF\nterraform {\n  required_version = &quot;&gt;= 1.6&quot;\n  required_providers {\n    local = {\n      source  = &quot;hashicorp/local&quot;\n      version = &quot;~&gt; 2.0&quot;\n    }\n  }\n}\n\nresource &quot;local_file&quot; &quot;hello_world&quot; {\n  content  = &quot;Hello, World from Terraform!&quot;\n  filename = &quot;hello.txt&quot;\n}\nEOF\n\n# Initialize Terraform\nterraform init\n\n# Validate configuration\nterraform validate\n\n# Plan deployment\nterraform plan\n\n# Apply configuration\nterraform apply</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Terraform version\nterraform version\n\n# Validate configuration\nterraform validate\n\n# Format configuration files\nterraform fmt\n\n# Initialize and test basic functionality\nterraform init\nterraform plan\nterraform apply\n\n# List state\nterraform state list\n\n# Show state details\nterraform show\n\n# Clean up test resources\nterraform destroy</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Configure proper authentication for cloud providers before deploying real infrastructure!</p>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-linux-systems\" class=\"mobile-header\">systemd (Linux Systems)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service for Terraform agent (if using)\nsudo tee /etc/systemd/system/terraform-agent.service &lt;&lt;EOF\n[Unit]\nDescription=Terraform Agent\nAfter=network.target\n\n[Service]\nType=simple\nUser=terraform\nWorkingDirectory=/opt/terraform\nExecStart=/usr/local/bin/terraform-agent\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable terraform-agent</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create OpenRC service script\nsudo tee /etc/init.d/terraform-agent &lt;&lt;EOF\n#!/sbin/openrc-run\n\nname=&quot;terraform-agent&quot;\ndescription=&quot;Terraform Agent&quot;\ncommand=&quot;/usr/bin/terraform-agent&quot;\ncommand_user=&quot;terraform&quot;\ncommand_background=true\npidfile=&quot;/var/run/terraform-agent.pid&quot;\n\ndepend() {\n    need net\n}\nEOF\n\nsudo chmod +x /etc/init.d/terraform-agent\nrc-update add terraform-agent default</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create rc.d script\nsudo tee /usr/local/etc/rc.d/terraform_agent &lt;&lt;EOF\n#!/bin/sh\n. /etc/rc.subr\n\nname=terraform_agent\nrcvar=terraform_agent_enable\ncommand=&quot;/usr/local/bin/terraform-agent&quot;\npidfile=&quot;/var/run/terraform_agent.pid&quot;\nstart_cmd=&quot;terraform_agent_start&quot;\n\nterraform_agent_start() {\n    daemon -p \\${pidfile} \\${command}\n}\n\nload_rc_config \\$name\nrun_rc_command &quot;\\$1&quot;\nEOF\n\nsudo chmod +x /usr/local/etc/rc.d/terraform_agent\necho &#039;terraform_agent_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create LaunchDaemon plist\nsudo tee /Library/LaunchDaemons/com.hashicorp.terraform.agent.plist &lt;&lt;EOF\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;\n&lt;plist version=&quot;1.0&quot;&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n    &lt;string&gt;com.hashicorp.terraform.agent&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;/usr/local/bin/terraform-agent&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;RunAtLoad&lt;/key&gt;\n    &lt;true/&gt;\n    &lt;key&gt;KeepAlive&lt;/key&gt;\n    &lt;true/&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\nEOF\n\nsudo launchctl load /Library/LaunchDaemons/com.hashicorp.terraform.agent.plist</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Install Terraform as Windows service using NSSM\nnssm install TerraformAgent &quot;C:\\terraform\\terraform-agent.exe&quot;\nnssm set TerraformAgent AppDirectory &quot;C:\\terraform&quot;\nnssm set TerraformAgent DisplayName &quot;Terraform Agent&quot;\nnssm set TerraformAgent Description &quot;HashiCorp Terraform Agent&quot;\nnssm start TerraformAgent\n\n# Alternative: Using sc command\nsc create TerraformAgent binPath=&quot;C:\\terraform\\terraform-agent.exe&quot; start=auto\nsc start TerraformAgent</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-advanced-configuration\" class=\"mobile-header\">6. Advanced Configuration</h2>\n<h3 id=\"multi-cloud-provider-setup\" class=\"mobile-header\">Multi-Cloud Provider Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive multi-cloud configuration\ncat &gt; providers.tf &lt;&lt;EOF\nterraform {\n  required_version = &quot;&gt;= 1.6&quot;\n  required_providers {\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n    azurerm = {\n      source  = &quot;hashicorp/azurerm&quot;\n      version = &quot;~&gt; 3.0&quot;\n    }\n    google = {\n      source  = &quot;hashicorp/google&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n    kubernetes = {\n      source  = &quot;hashicorp/kubernetes&quot;\n      version = &quot;~&gt; 2.0&quot;\n    }\n    helm = {\n      source  = &quot;hashicorp/helm&quot;\n      version = &quot;~&gt; 2.0&quot;\n    }\n  }\n  \n  # Remote state configuration\n  backend &quot;s3&quot; {\n    bucket = &quot;terraform-state-bucket&quot;\n    key    = &quot;infrastructure/terraform.tfstate&quot;\n    region = &quot;us-west-2&quot;\n    \n    # State locking with DynamoDB\n    dynamodb_table = &quot;terraform-state-lock&quot;\n    encrypt        = true\n  }\n}\n\n# AWS Provider\nprovider &quot;aws&quot; {\n  region = var.aws_region\n  \n  default_tags {\n    tags = {\n      Environment   = var.environment\n      ManagedBy     = &quot;terraform&quot;\n      Project       = var.project_name\n      Owner         = var.owner\n    }\n  }\n}\n\n# Azure Provider\nprovider &quot;azurerm&quot; {\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n    key_vault {\n      purge_soft_delete_on_destroy = true\n    }\n  }\n}\n\n# Google Cloud Provider\nprovider &quot;google&quot; {\n  project = var.gcp_project_id\n  region  = var.gcp_region\n  zone    = var.gcp_zone\n}\n\n# Kubernetes Provider\nprovider &quot;kubernetes&quot; {\n  config_path = &quot;~/.kube/config&quot;\n}\n\n# Helm Provider\nprovider &quot;helm&quot; {\n  kubernetes {\n    config_path = &quot;~/.kube/config&quot;\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"enterprise-features-configuration\" class=\"mobile-header\">Enterprise Features Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Terraform Cloud/Enterprise configuration\ncat &gt; cloud.tf &lt;&lt;EOF\nterraform {\n  cloud {\n    organization = &quot;your-organization&quot;\n    \n    workspaces {\n      name = &quot;production-infrastructure&quot;\n    }\n  }\n}\n\n# Remote execution configuration\nterraform {\n  cloud {\n    organization = &quot;your-organization&quot;\n    \n    workspaces {\n      tags = [&quot;production&quot;, &quot;web-app&quot;]\n    }\n  }\n  \n  required_providers {\n    tfe = {\n      source  = &quot;hashicorp/tfe&quot;\n      version = &quot;~&gt; 0.48&quot;\n    }\n  }\n}\n\n# Terraform Enterprise configuration\nprovider &quot;tfe&quot; {\n  hostname = &quot;terraform.company.com&quot;\n  token    = var.tfe_token\n}\n\n# Workspace configuration\nresource &quot;tfe_workspace&quot; &quot;production&quot; {\n  name         = &quot;production-infrastructure&quot;\n  organization = var.tfe_organization\n  \n  auto_apply = false\n  queue_all_runs = false\n  \n  terraform_version = &quot;1.6.4&quot;\n  \n  vcs_repo {\n    identifier     = &quot;company/infrastructure&quot;\n    branch         = &quot;main&quot;\n    oauth_token_id = var.vcs_oauth_token_id\n  }\n  \n  working_directory = &quot;environments/production&quot;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-state-management\" class=\"mobile-header\">Advanced State Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Encrypted remote state with multiple backends\ncat &gt; backend-s3.tf &lt;&lt;EOF\n# S3 backend with encryption and locking\nterraform {\n  backend &quot;s3&quot; {\n    bucket         = &quot;terraform-state-bucket&quot;\n    key            = &quot;infrastructure/terraform.tfstate&quot;\n    region         = &quot;us-west-2&quot;\n    encrypt        = true\n    kms_key_id     = &quot;arn:aws:kms:us-west-2:ACCOUNT:key/KEY-ID&quot;\n    dynamodb_table = &quot;terraform-state-lock&quot;\n    \n    # Additional security\n    skip_region_validation      = false\n    skip_credentials_validation = false\n    skip_metadata_api_check     = false\n  }\n}\n\n# State bucket with versioning and lifecycle\nresource &quot;aws_s3_bucket&quot; &quot;terraform_state&quot; {\n  bucket = &quot;terraform-state-bucket&quot;\n  \n  tags = {\n    Name        = &quot;Terraform State Bucket&quot;\n    Environment = var.environment\n  }\n}\n\nresource &quot;aws_s3_bucket_versioning&quot; &quot;terraform_state_versioning&quot; {\n  bucket = aws_s3_bucket.terraform_state.id\n  versioning_configuration {\n    status = &quot;Enabled&quot;\n  }\n}\n\nresource &quot;aws_s3_bucket_server_side_encryption_configuration&quot; &quot;terraform_state_encryption&quot; {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  rule {\n    apply_server_side_encryption_by_default {\n      kms_master_key_id = aws_kms_key.terraform_bucket_key.arn\n      sse_algorithm     = &quot;aws:kms&quot;\n    }\n  }\n}\n\nresource &quot;aws_s3_bucket_public_access_block&quot; &quot;terraform_state&quot; {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\n# KMS key for encryption\nresource &quot;aws_kms_key&quot; &quot;terraform_bucket_key&quot; {\n  description             = &quot;KMS key for Terraform state bucket encryption&quot;\n  deletion_window_in_days = 7\n\n  tags = {\n    Name        = &quot;Terraform State Bucket Key&quot;\n    Environment = var.environment\n  }\n}\n\n# DynamoDB table for state locking\nresource &quot;aws_dynamodb_table&quot; &quot;terraform_state_lock&quot; {\n  name           = &quot;terraform-state-lock&quot;\n  billing_mode   = &quot;PAY_PER_REQUEST&quot;\n  hash_key       = &quot;LockID&quot;\n\n  attribute {\n    name = &quot;LockID&quot;\n    type = &quot;S&quot;\n  }\n\n  server_side_encryption {\n    enabled = true\n  }\n\n  point_in_time_recovery {\n    enabled = true\n  }\n\n  tags = {\n    Name        = &quot;Terraform State Lock Table&quot;\n    Environment = var.environment\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-workspaces-and-environment-management\" class=\"mobile-header\">Terraform Workspaces and Environment Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enterprise workspace management\ncat &gt; workspace-management.tf &lt;&lt;EOF\n# Workspace-specific variables\nvariable &quot;workspace_configs&quot; {\n  description = &quot;Configuration per workspace&quot;\n  type = map(object({\n    instance_type    = string\n    min_size        = number\n    max_size        = number\n    environment_tag = string\n    backup_retention = number\n    monitoring_level = string\n  }))\n  default = {\n    development = {\n      instance_type    = &quot;t3.micro&quot;\n      min_size        = 1\n      max_size        = 3\n      environment_tag = &quot;dev&quot;\n      backup_retention = 7\n      monitoring_level = &quot;basic&quot;\n    }\n    staging = {\n      instance_type    = &quot;t3.small&quot;\n      min_size        = 2\n      max_size        = 5\n      environment_tag = &quot;staging&quot;\n      backup_retention = 14\n      monitoring_level = &quot;standard&quot;\n    }\n    production = {\n      instance_type    = &quot;m5.large&quot;\n      min_size        = 3\n      max_size        = 10\n      environment_tag = &quot;prod&quot;\n      backup_retention = 30\n      monitoring_level = &quot;comprehensive&quot;\n    }\n  }\n}\n\n# Current workspace configuration\nlocals {\n  workspace_config = var.workspace_configs[terraform.workspace]\n  \n  common_tags = {\n    Environment   = local.workspace_config.environment_tag\n    Workspace     = terraform.workspace\n    Project       = var.project_name\n    ManagedBy     = &quot;terraform&quot;\n    Owner         = var.owner\n    CostCenter    = var.cost_center\n    Compliance    = var.compliance_level\n  }\n}\n\n# Workspace-aware resource sizing\nresource &quot;aws_launch_template&quot; &quot;web_servers&quot; {\n  name_prefix   = &quot;${var.project_name}-${terraform.workspace}-&quot;\n  image_id      = data.aws_ami.ubuntu.id\n  instance_type = local.workspace_config.instance_type\n  \n  vpc_security_group_ids = [aws_security_group.web.id]\n  \n  user_data = base64encode(templatefile(&quot;${path.module}/user-data.sh&quot;, {\n    environment = terraform.workspace\n    log_level   = local.workspace_config.monitoring_level\n  }))\n  \n  tag_specifications {\n    resource_type = &quot;instance&quot;\n    tags          = local.common_tags\n  }\n  \n  lifecycle {\n    create_before_destroy = true\n  }\n}\n\n# Auto-scaling based on workspace\nresource &quot;aws_autoscaling_group&quot; &quot;web&quot; {\n  name                = &quot;${var.project_name}-${terraform.workspace}-asg&quot;\n  vpc_zone_identifier = var.private_subnet_ids\n  target_group_arns   = [aws_lb_target_group.web.arn]\n  health_check_type   = &quot;ELB&quot;\n  health_check_grace_period = 300\n\n  min_size         = local.workspace_config.min_size\n  max_size         = local.workspace_config.max_size\n  desired_capacity = local.workspace_config.min_size\n\n  launch_template {\n    id      = aws_launch_template.web_servers.id\n    version = &quot;$Latest&quot;\n  }\n  \n  dynamic &quot;tag&quot; {\n    for_each = local.common_tags\n    content {\n      key                 = tag.key\n      value               = tag.value\n      propagate_at_launch = true\n    }\n  }\n}\nEOF\n\n# Workspace management commands\ncat &gt; scripts/workspace-management.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# List all workspaces with their status\nlist_workspaces() {\n    echo &quot;📋 Terraform Workspaces:&quot;\n    terraform workspace list\n    echo &quot;&quot;\n    echo &quot;Current workspace: $(terraform workspace show)&quot;\n}\n\n# Create new workspace with initialization\ncreate_workspace() {\n    local workspace_name=&quot;$1&quot;\n    \n    if [[ -z &quot;$workspace_name&quot; ]]; then\n        echo &quot;Usage: create_workspace &lt;workspace-name&gt;&quot;\n        return 1\n    fi\n    \n    echo &quot;🚀 Creating workspace: $workspace_name&quot;\n    terraform workspace new &quot;$workspace_name&quot;\n    terraform workspace select &quot;$workspace_name&quot;\n    \n    # Initialize with workspace-specific variables\n    if [[ ! -f &quot;$workspace_name.tfvars&quot; ]]; then\n        echo &quot;Creating $workspace_name.tfvars template...&quot;\n        cat &gt; &quot;$workspace_name.tfvars&quot; &lt;&lt;VARS\n# Workspace-specific variables for $workspace_name\nproject_name = &quot;myproject-$workspace_name&quot;\nenvironment = &quot;$workspace_name&quot;\nowner = &quot;$(whoami)&quot;\ncost_center = &quot;engineering&quot;\ncompliance_level = &quot;standard&quot;\n\n# Network configuration\nvpc_cidr = &quot;10.0.0.0/16&quot;\navailability_zones = [&quot;us-west-2a&quot;, &quot;us-west-2b&quot;, &quot;us-west-2c&quot;]\n\n# Resource sizing (adjust per environment)\ninstance_type = &quot;t3.micro&quot;\nmin_capacity = 1\nmax_capacity = 3\nVARS\n        echo &quot;✅ Template created at $workspace_name.tfvars&quot;\n        echo &quot;💡 Please review and customize the variables before applying&quot;\n    fi\n}\n\n# Switch workspace with validation\nswitch_workspace() {\n    local workspace_name=&quot;$1&quot;\n    \n    if [[ -z &quot;$workspace_name&quot; ]]; then\n        echo &quot;Usage: switch_workspace &lt;workspace-name&gt;&quot;\n        return 1\n    fi\n    \n    if terraform workspace list | grep -q &quot;\\b$workspace_name\\b&quot;; then\n        terraform workspace select &quot;$workspace_name&quot;\n        echo &quot;✅ Switched to workspace: $workspace_name&quot;\n        \n        # Show current configuration\n        echo &quot;📄 Current configuration file: $workspace_name.tfvars&quot;\n        if [[ -f &quot;$workspace_name.tfvars&quot; ]]; then\n            echo &quot;✅ Variables file exists&quot;\n        else\n            echo &quot;⚠️  Variables file missing - creating template&quot;\n            create_workspace &quot;$workspace_name&quot;\n        fi\n    else\n        echo &quot;❌ Workspace &#039;$workspace_name&#039; not found&quot;\n        echo &quot;Available workspaces:&quot;\n        terraform workspace list\n    fi\n}\n\n# Delete workspace with safety checks\ndelete_workspace() {\n    local workspace_name=&quot;$1&quot;\n    \n    if [[ -z &quot;$workspace_name&quot; ]]; then\n        echo &quot;Usage: delete_workspace &lt;workspace-name&gt;&quot;\n        return 1\n    fi\n    \n    if [[ &quot;$workspace_name&quot; == &quot;default&quot; ]]; then\n        echo &quot;❌ Cannot delete the default workspace&quot;\n        return 1\n    fi\n    \n    echo &quot;⚠️  WARNING: This will delete workspace &#039;$workspace_name&#039; and all its resources!&quot;\n    echo &quot;Current resources in workspace:&quot;\n    \n    # Switch to workspace and show resources\n    terraform workspace select &quot;$workspace_name&quot;\n    terraform state list\n    \n    echo &quot;&quot;\n    read -p &quot;Are you sure you want to proceed? (yes/no): &quot; confirm\n    \n    if [[ &quot;$confirm&quot; == &quot;yes&quot; ]]; then\n        echo &quot;🗑️  Destroying resources in workspace: $workspace_name&quot;\n        terraform destroy -auto-approve -var-file=&quot;$workspace_name.tfvars&quot;\n        \n        echo &quot;🗑️  Deleting workspace: $workspace_name&quot;\n        terraform workspace select default\n        terraform workspace delete &quot;$workspace_name&quot;\n        \n        echo &quot;✅ Workspace &#039;$workspace_name&#039; deleted&quot;\n    else\n        echo &quot;❌ Operation cancelled&quot;\n    fi\n}\n\n# Main command dispatcher\ncase &quot;${1:-help}&quot; in\n    &quot;list&quot;)\n        list_workspaces\n        ;;\n    &quot;create&quot;)\n        create_workspace &quot;$2&quot;\n        ;;\n    &quot;switch&quot;)\n        switch_workspace &quot;$2&quot;\n        ;;\n    &quot;delete&quot;)\n        delete_workspace &quot;$2&quot;\n        ;;\n    &quot;help&quot;|*)\n        echo &quot;Terraform Workspace Management&quot;\n        echo &quot;Usage: $0 [list|create|switch|delete] [workspace-name]&quot;\n        echo &quot;&quot;\n        echo &quot;Commands:&quot;\n        echo &quot;  list                    - List all workspaces&quot;\n        echo &quot;  create &lt;name&gt;          - Create new workspace with template&quot;\n        echo &quot;  switch &lt;name&gt;          - Switch to existing workspace&quot;\n        echo &quot;  delete &lt;name&gt;          - Delete workspace and all resources&quot;\n        ;;\nesac\nEOF\n\nchmod +x scripts/workspace-management.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"remote-state-configuration-best-practices\" class=\"mobile-header\">Remote State Configuration Best Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enterprise remote state configuration\ncat &gt; remote-state-setup.tf &lt;&lt;EOF\n# Multi-environment state configuration\nterraform {\n  backend &quot;s3&quot; {\n    # Use workspace-aware state keys\n    key            = &quot;infrastructure/\\${terraform.workspace}/terraform.tfstate&quot;\n    bucket         = var.state_bucket_name\n    region         = var.aws_region\n    encrypt        = true\n    kms_key_id     = var.state_kms_key_arn\n    dynamodb_table = var.state_lock_table\n    \n    # Workspace isolation\n    workspace_key_prefix = &quot;workspaces&quot;\n  }\n}\n\n# State bucket with advanced features\nresource &quot;aws_s3_bucket&quot; &quot;terraform_state&quot; {\n  bucket        = var.state_bucket_name\n  force_destroy = false  # Prevent accidental deletion\n  \n  tags = {\n    Name            = &quot;Terraform State Bucket&quot;\n    Purpose         = &quot;Infrastructure State Storage&quot;\n    Environment     = &quot;global&quot;\n    BackupRequired  = &quot;true&quot;\n    ComplianceLevel = &quot;high&quot;\n  }\n}\n\n# Cross-region replication for disaster recovery\nresource &quot;aws_s3_bucket_replication_configuration&quot; &quot;terraform_state_replication&quot; {\n  role   = aws_iam_role.replication.arn\n  bucket = aws_s3_bucket.terraform_state.id\n\n  rule {\n    id     = &quot;terraform-state-replication&quot;\n    status = &quot;Enabled&quot;\n    \n    filter {\n      prefix = &quot;workspaces/&quot;\n    }\n\n    destination {\n      bucket        = aws_s3_bucket.terraform_state_replica.arn\n      storage_class = &quot;STANDARD_IA&quot;\n      \n      encryption_configuration {\n        replica_kms_key_id = aws_kms_key.terraform_state_replica.arn\n      }\n    }\n  }\n}\n\n# Lifecycle management for cost optimization\nresource &quot;aws_s3_bucket_lifecycle_configuration&quot; &quot;terraform_state_lifecycle&quot; {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  rule {\n    id     = &quot;state_file_lifecycle&quot;\n    status = &quot;Enabled&quot;\n\n    noncurrent_version_transition {\n      noncurrent_days = 30\n      storage_class   = &quot;STANDARD_IA&quot;\n    }\n\n    noncurrent_version_transition {\n      noncurrent_days = 90\n      storage_class   = &quot;GLACIER&quot;\n    }\n\n    noncurrent_version_expiration {\n      noncurrent_days = 365\n    }\n  }\n}\n\n# Advanced DynamoDB table for state locking with point-in-time recovery\nresource &quot;aws_dynamodb_table&quot; &quot;terraform_state_lock&quot; {\n  name           = var.state_lock_table\n  billing_mode   = &quot;PAY_PER_REQUEST&quot;\n  hash_key       = &quot;LockID&quot;\n  \n  attribute {\n    name = &quot;LockID&quot;\n    type = &quot;S&quot;\n  }\n\n  # Enable point-in-time recovery\n  point_in_time_recovery {\n    enabled = true\n  }\n\n  # Server-side encryption\n  server_side_encryption {\n    enabled     = true\n    kms_key_arn = aws_kms_key.terraform_state.arn\n  }\n\n  # Enable continuous backups\n  tags = {\n    Name           = &quot;Terraform State Lock&quot;\n    BackupRequired = &quot;true&quot;\n    Environment    = &quot;global&quot;\n  }\n}\n\n# CloudWatch alarms for state operations\nresource &quot;aws_cloudwatch_metric_alarm&quot; &quot;state_bucket_errors&quot; {\n  alarm_name          = &quot;terraform-state-bucket-errors&quot;\n  comparison_operator = &quot;GreaterThanThreshold&quot;\n  evaluation_periods  = &quot;2&quot;\n  metric_name         = &quot;4xxErrors&quot;\n  namespace           = &quot;AWS/S3&quot;\n  period              = &quot;300&quot;\n  statistic           = &quot;Sum&quot;\n  threshold           = &quot;5&quot;\n  alarm_description   = &quot;This metric monitors S3 bucket errors for Terraform state&quot;\n\n  dimensions = {\n    BucketName = aws_s3_bucket.terraform_state.bucket\n  }\n\n  alarm_actions = [aws_sns_topic.infrastructure_alerts.arn]\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"7-reverse-proxy-setup\" class=\"mobile-header\">7. Reverse Proxy Setup</h2>\n<p class=\"mobile-paragraph\">Terraform itself doesn't typically require reverse proxy setup, but when using Terraform Enterprise or Cloud, you might need to configure proxies for API access:</p>\n<h3 id=\"corporate-proxy-configuration\" class=\"mobile-header\">Corporate Proxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Terraform to work through corporate proxy\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1,.company.com\n\n# Add to ~/.bashrc or ~/.zshrc\ncat &gt;&gt; ~/.bashrc &lt;&lt;EOF\n# Terraform proxy settings\nexport HTTP_PROXY=http://proxy.company.com:8080\nexport HTTPS_PROXY=http://proxy.company.com:8080\nexport NO_PROXY=localhost,127.0.0.1,.company.com\nEOF\n\n# Configure Git for proxy (if needed for modules)\ngit config --global http.proxy http://proxy.company.com:8080\ngit config --global https.proxy http://proxy.company.com:8080</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-configuration-for-terraform-enterprise\" class=\"mobile-header\">nginx Configuration for Terraform Enterprise</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/terraform-enterprise\nupstream terraform_enterprise {\n    server 127.0.0.1:8800;\n    server 127.0.0.1:8801 backup;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name terraform.company.com;\n\n    ssl_certificate /etc/ssl/certs/terraform.company.com.crt;\n    ssl_certificate_key /etc/ssl/private/terraform.company.com.key;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000&quot; always;\n    add_header X-Frame-Options &quot;DENY&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n\n    location / {\n        proxy_pass http://terraform_enterprise;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support for real-time updates\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeouts for long-running operations\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 300s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"8-security-configuration\" class=\"mobile-header\">8. Security Configuration</h2>\n<h3 id=\"secure-credential-management\" class=\"mobile-header\">Secure Credential Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use environment variables for credentials\ncat &gt; .env.example &lt;&lt;EOF\n# AWS credentials\nAWS_ACCESS_KEY_ID=your_access_key\nAWS_SECRET_ACCESS_KEY=your_secret_key\nAWS_DEFAULT_REGION=us-west-2\n\n# Azure credentials\nARM_CLIENT_ID=your_client_id\nARM_CLIENT_SECRET=your_client_secret\nARM_SUBSCRIPTION_ID=your_subscription_id\nARM_TENANT_ID=your_tenant_id\n\n# GCP credentials\nGOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account-key.json\nGOOGLE_PROJECT=your_project_id\n\n# Terraform Cloud\nTF_CLOUD_TOKEN=your_terraform_cloud_token\nEOF\n\n# Use IAM roles for AWS (recommended)\ncat &gt; aws-iam-role.tf &lt;&lt;EOF\n# IAM role for Terraform execution\nresource &quot;aws_iam_role&quot; &quot;terraform_execution&quot; {\n  name = &quot;TerraformExecutionRole&quot;\n\n  assume_role_policy = jsonencode({\n    Version = &quot;2012-10-17&quot;\n    Statement = [\n      {\n        Action = &quot;sts:AssumeRole&quot;\n        Effect = &quot;Allow&quot;\n        Principal = {\n          Service = &quot;ec2.amazonaws.com&quot;\n        }\n      },\n    ]\n  })\n}\n\n# Attach managed policies with least privilege\nresource &quot;aws_iam_role_policy_attachment&quot; &quot;terraform_execution&quot; {\n  for_each = toset([\n    &quot;arn:aws:iam::aws:policy/PowerUserAccess&quot;\n  ])\n  \n  role       = aws_iam_role.terraform_execution.name\n  policy_arn = each.value\n}\n\n# Create instance profile\nresource &quot;aws_iam_instance_profile&quot; &quot;terraform_execution&quot; {\n  name = &quot;TerraformExecutionProfile&quot;\n  role = aws_iam_role.terraform_execution.name\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-scanning-and-compliance\" class=\"mobile-header\">Security Scanning and Compliance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Pre-commit hooks for security\ncat &gt; .pre-commit-config.yaml &lt;&lt;EOF\nrepos:\n- repo: https://github.com/antonbabenko/pre-commit-terraform\n  rev: v1.83.5\n  hooks:\n    - id: terraform_fmt\n    - id: terraform_validate\n    - id: terraform_docs\n    - id: terraform_tflint\n    - id: terraform_checkov\n    - id: terraform_trivy\n\n- repo: https://github.com/Yelp/detect-secrets\n  rev: v1.4.0\n  hooks:\n    - id: detect-secrets\n      args: [&#039;--baseline&#039;, &#039;.secrets.baseline&#039;]\nEOF\n\n# Checkov configuration for security scanning\ncat &gt; .checkov.yaml &lt;&lt;EOF\nframework:\n  - terraform\n  - secrets\n\ncheck:\n  - CKV_AWS_79  # Ensure Instance Metadata Service Version 1 is not enabled\n  - CKV_AWS_8   # Ensure Launch Configuration EBS encryption\n  - CKV_AZURE_1 # Ensure storage account encryption\n\nskip-check:\n  - CKV_AWS_23  # Skip S3 bucket public read check for specific use cases\n\noutput: cli\nquiet: false\ncompact: false\nEOF\n\n# TFLint configuration\ncat &gt; .tflint.hcl &lt;&lt;EOF\nplugin &quot;aws&quot; {\n    enabled = true\n    version = &quot;0.21.2&quot;\n    source  = &quot;github.com/terraform-linters/tflint-ruleset-aws&quot;\n}\n\nplugin &quot;azurerm&quot; {\n    enabled = true\n    version = &quot;0.21.0&quot;\n    source  = &quot;github.com/terraform-linters/tflint-ruleset-azurerm&quot;\n}\n\nrule &quot;terraform_unused_declarations&quot; {\n  enabled = true\n}\n\nrule &quot;terraform_naming_convention&quot; {\n  enabled = true\n  format  = &quot;snake_case&quot;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"policy-as-code-with-opa\" class=\"mobile-header\">Policy as Code with OPA</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># OPA (Open Policy Agent) security policies\ncat &gt; policy/security.rego &lt;&lt;EOF\npackage terraform.security\n\n# Deny instances without encryption\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == &quot;aws_instance&quot;\n    resource.change.after.root_block_device[_].encrypted == false\n    reason := &quot;AWS instances must have encrypted root volumes&quot;\n}\n\n# Deny public S3 buckets\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == &quot;aws_s3_bucket_public_access_block&quot;\n    resource.change.after.block_public_acls == false\n    reason := &quot;S3 buckets must block public access&quot;\n}\n\n# Require specific instance types in production\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == &quot;aws_instance&quot;\n    instance_type := resource.change.after.instance_type\n    not allowed_instance_type(instance_type)\n    workspace := input.terraform_version.workspace\n    workspace == &quot;production&quot;\n    reason := sprintf(&quot;Production instances must use approved instance types, got: %v&quot;, [instance_type])\n}\n\nallowed_instance_type(instance_type) {\n    allowed_types := [&quot;t3.micro&quot;, &quot;t3.small&quot;, &quot;t3.medium&quot;, &quot;m5.large&quot;, &quot;m5.xlarge&quot;]\n    instance_type in allowed_types\n}\nEOF\n\n# Policy validation script\ncat &gt; scripts/validate-policy.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Generate Terraform plan\nterraform plan -out=tfplan\nterraform show -json tfplan &gt; tfplan.json\n\n# Validate against policies\nconftest test tfplan.json --policy policy/\n\n# Cleanup\nrm tfplan tfplan.json\nEOF\n\nchmod +x scripts/validate-policy.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-database-setup\" class=\"mobile-header\">9. Database Setup</h2>\n<p class=\"mobile-paragraph\">Terraform doesn't require a traditional database, but it does use state files and can integrate with various storage backends:</p>\n<h3 id=\"state-storage-backends\" class=\"mobile-header\">State Storage Backends</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># PostgreSQL backend (for Terraform Enterprise)\ncat &gt; backend-postgres.tf &lt;&lt;EOF\nterraform {\n  backend &quot;pg&quot; {\n    conn_str = &quot;postgres://user:pass@localhost/terraform_backend?sslmode=require&quot;\n  }\n}\nEOF\n\n# Consul backend for distributed state\ncat &gt; backend-consul.tf &lt;&lt;EOF\nterraform {\n  backend &quot;consul&quot; {\n    address = &quot;consul.company.com:8500&quot;\n    scheme  = &quot;https&quot;\n    path    = &quot;terraform/infrastructure&quot;\n  }\n}\nEOF\n\n# etcd backend\ncat &gt; backend-etcd.tf &lt;&lt;EOF\nterraform {\n  backend &quot;etcdv3&quot; {\n    endpoints = [&quot;http://etcd1:2379&quot;, &quot;http://etcd2:2379&quot;, &quot;http://etcd3:2379&quot;]\n    lock      = true\n    prefix    = &quot;terraform-state/&quot;\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-infrastructure-management\" class=\"mobile-header\">Database Infrastructure Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Database deployment with Terraform\ncat &gt; database.tf &lt;&lt;EOF\n# RDS instance with Multi-AZ\nresource &quot;aws_db_instance&quot; &quot;main&quot; {\n  identifier = &quot;${var.project_name}-db&quot;\n  \n  engine         = &quot;postgresql&quot;\n  engine_version = &quot;15.4&quot;\n  instance_class = &quot;db.t3.micro&quot;\n  \n  allocated_storage     = 20\n  max_allocated_storage = 100\n  storage_type         = &quot;gp3&quot;\n  storage_encrypted    = true\n  kms_key_id          = aws_kms_key.rds.arn\n  \n  db_name  = var.database_name\n  username = var.database_username\n  password = var.database_password\n  port     = 5432\n  \n  multi_az               = true\n  publicly_accessible    = false\n  backup_retention_period = 7\n  backup_window          = &quot;03:00-04:00&quot;\n  maintenance_window     = &quot;sun:04:00-sun:05:00&quot;\n  \n  skip_final_snapshot = false\n  final_snapshot_identifier = &quot;${var.project_name}-db-final-snapshot&quot;\n  \n  vpc_security_group_ids = [aws_security_group.rds.id]\n  db_subnet_group_name   = aws_db_subnet_group.main.name\n  \n  tags = var.common_tags\n}\n\n# Database subnet group\nresource &quot;aws_db_subnet_group&quot; &quot;main&quot; {\n  name       = &quot;${var.project_name}-db-subnet-group&quot;\n  subnet_ids = var.private_subnet_ids\n\n  tags = merge(var.common_tags, {\n    Name = &quot;${var.project_name}-db-subnet-group&quot;\n  })\n}\n\n# KMS key for RDS encryption\nresource &quot;aws_kms_key&quot; &quot;rds&quot; {\n  description             = &quot;KMS key for RDS encryption&quot;\n  deletion_window_in_days = 7\n\n  tags = merge(var.common_tags, {\n    Name = &quot;${var.project_name}-rds-kms-key&quot;\n  })\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"10-performance-optimization\" class=\"mobile-header\">10. Performance Optimization</h2>\n<h3 id=\"terraform-performance-tuning\" class=\"mobile-header\">Terraform Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize Terraform execution\ncat &gt; terraform.tfvars &lt;&lt;EOF\n# Performance settings\nterraform_parallelism = 10\nterraform_refresh = true\nterraform_upgrade = false\nEOF\n\n# Performance optimization script\ncat &gt; scripts/optimize-terraform.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Increase parallelism for faster execution\nexport TF_CLI_ARGS_plan=&quot;-parallelism=10&quot;\nexport TF_CLI_ARGS_apply=&quot;-parallelism=10&quot;\n\n# Use faster JSON output for large states\nexport TF_CLI_ARGS_show=&quot;-json&quot;\n\n# Optimize provider caching\nexport TF_PLUGIN_CACHE_DIR=&quot;$HOME/.terraform.d/plugin-cache&quot;\nmkdir -p &quot;$TF_PLUGIN_CACHE_DIR&quot;\n\n# Performance monitoring\necho &quot;Starting Terraform operation at $(date)&quot;\ntime terraform &quot;$@&quot;\necho &quot;Completed Terraform operation at $(date)&quot;\nEOF\n\nchmod +x scripts/optimize-terraform.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"large-infrastructure-management\" class=\"mobile-header\">Large Infrastructure Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Workspace and module organization\ncat &gt; modules/infrastructure/main.tf &lt;&lt;EOF\n# Optimized module structure for large deployments\nterraform {\n  required_providers {\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n  }\n}\n\n# Use data sources efficiently\ndata &quot;aws_availability_zones&quot; &quot;available&quot; {\n  state = &quot;available&quot;\n  \n  # Cache this data to avoid repeated API calls\n  lifecycle {\n    postcondition {\n      condition     = length(self.names) &gt;= 2\n      error_message = &quot;At least 2 availability zones required.&quot;\n    }\n  }\n}\n\n# Optimize resource creation with for_each\nresource &quot;aws_subnet&quot; &quot;private&quot; {\n  for_each = toset(slice(data.aws_availability_zones.available.names, 0, var.subnet_count))\n  \n  vpc_id            = aws_vpc.main.id\n  cidr_block        = cidrsubnet(var.vpc_cidr, 8, index(data.aws_availability_zones.available.names, each.value) + 10)\n  availability_zone = each.value\n  \n  tags = merge(var.common_tags, {\n    Name = &quot;${var.name_prefix}-private-${each.value}&quot;\n    Type = &quot;private&quot;\n  })\n}\n\n# Use locals for complex computations\nlocals {\n  # Pre-compute values to avoid recalculation\n  availability_zones = slice(data.aws_availability_zones.available.names, 0, var.subnet_count)\n  \n  # Create maps for efficient lookups\n  subnet_map = {\n    for subnet in aws_subnet.private : \n    subnet.availability_zone =&gt; subnet.id\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"state-optimization\" class=\"mobile-header\">State Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># State file optimization script\ncat &gt; scripts/optimize-state.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Pull current state for backup\nterraform state pull &gt; state-backup-$(date +%Y%m%d_%H%M%S).json\n\n# Remove unused resources from state\nterraform state list | while read resource; do\n    if terraform plan -target=&quot;$resource&quot; | grep -q &quot;No changes&quot;; then\n        echo &quot;Checking if $resource can be safely removed...&quot;\n        # Add logic to safely remove unused resources\n    fi\ndone\n\n# Refresh state to sync with real infrastructure\nterraform refresh\n\necho &quot;State optimization completed&quot;\nEOF\n\nchmod +x scripts/optimize-state.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"11-monitoring\" class=\"mobile-header\">11. Monitoring</h2>\n<h3 id=\"terraform-operations-monitoring\" class=\"mobile-header\">Terraform Operations Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Terraform execution monitoring\ncat &gt; scripts/monitor-terraform.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nLOG_FILE=&quot;/var/log/terraform/operations.log&quot;\nMETRICS_FILE=&quot;/var/log/terraform/metrics.log&quot;\n\n# Ensure log directory exists\nmkdir -p &quot;$(dirname &quot;$LOG_FILE&quot;)&quot;\nmkdir -p &quot;$(dirname &quot;$METRICS_FILE&quot;)&quot;\n\n# Function to log operations\nlog_operation() {\n    local operation=&quot;$1&quot;\n    local status=&quot;$2&quot;\n    local duration=&quot;$3&quot;\n    local timestamp=$(date &#039;+%Y-%m-%d %H:%M:%S&#039;)\n    \n    echo &quot;[$timestamp] Operation: $operation, Status: $status, Duration: ${duration}s&quot; &gt;&gt; &quot;$LOG_FILE&quot;\n    echo &quot;terraform_operation_duration{operation=\\&quot;$operation\\&quot;,status=\\&quot;$status\\&quot;} $duration&quot; &gt;&gt; &quot;$METRICS_FILE&quot;\n}\n\n# Wrapper function for terraform commands\nterraform_monitored() {\n    local operation=&quot;$1&quot;\n    shift\n    local start_time=$(date +%s)\n    local exit_code=0\n    \n    echo &quot;Starting Terraform $operation at $(date)&quot;\n    \n    if terraform &quot;$operation&quot; &quot;$@&quot;; then\n        local end_time=$(date +%s)\n        local duration=$((end_time - start_time))\n        log_operation &quot;$operation&quot; &quot;success&quot; &quot;$duration&quot;\n        echo &quot;Terraform $operation completed successfully in ${duration}s&quot;\n    else\n        exit_code=$?\n        local end_time=$(date +%s)\n        local duration=$((end_time - start_time))\n        log_operation &quot;$operation&quot; &quot;failure&quot; &quot;$duration&quot;\n        echo &quot;Terraform $operation failed after ${duration}s&quot;\n        return $exit_code\n    fi\n}\n\n# Usage: terraform_monitored plan, terraform_monitored apply, etc.\nterraform_monitored &quot;$@&quot;\nEOF\n\nchmod +x scripts/monitor-terraform.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"infrastructure-monitoring-with-terraform\" class=\"mobile-header\">Infrastructure Monitoring with Terraform</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy monitoring stack with Terraform\ncat &gt; monitoring.tf &lt;&lt;EOF\n# CloudWatch alarms for infrastructure\nresource &quot;aws_cloudwatch_metric_alarm&quot; &quot;high_cpu&quot; {\n  for_each = toset(module.compute.instance_ids)\n  \n  alarm_name          = &quot;high-cpu-${each.key}&quot;\n  comparison_operator = &quot;GreaterThanThreshold&quot;\n  evaluation_periods  = &quot;2&quot;\n  metric_name        = &quot;CPUUtilization&quot;\n  namespace          = &quot;AWS/EC2&quot;\n  period             = &quot;300&quot;\n  statistic          = &quot;Average&quot;\n  threshold          = &quot;80&quot;\n  alarm_description  = &quot;This metric monitors EC2 CPU utilization&quot;\n\n  dimensions = {\n    InstanceId = each.value\n  }\n\n  alarm_actions = [aws_sns_topic.alerts.arn]\n  \n  tags = var.common_tags\n}\n\n# SNS topic for alerts\nresource &quot;aws_sns_topic&quot; &quot;alerts&quot; {\n  name = &quot;${var.project_name}-infrastructure-alerts&quot;\n  \n  tags = var.common_tags\n}\n\nresource &quot;aws_sns_topic_subscription&quot; &quot;email_alerts&quot; {\n  topic_arn = aws_sns_topic.alerts.arn\n  protocol  = &quot;email&quot;\n  endpoint  = var.alert_email\n}\n\n# Log group for Terraform operations\nresource &quot;aws_cloudwatch_log_group&quot; &quot;terraform_ops&quot; {\n  name              = &quot;/terraform/operations&quot;\n  retention_in_days = 30\n  \n  tags = var.common_tags\n}\n\n# Dashboard for infrastructure monitoring\nresource &quot;aws_cloudwatch_dashboard&quot; &quot;main&quot; {\n  dashboard_name = &quot;${var.project_name}-infrastructure&quot;\n\n  dashboard_body = jsonencode({\n    widgets = [\n      {\n        type   = &quot;metric&quot;\n        x      = 0\n        y      = 0\n        width  = 12\n        height = 6\n\n        properties = {\n          metrics = [\n            [&quot;AWS/EC2&quot;, &quot;CPUUtilization&quot;, &quot;InstanceId&quot;, module.compute.instance_ids[0]],\n          ]\n          view    = &quot;timeSeries&quot;\n          stacked = false\n          region  = var.aws_region\n          title   = &quot;EC2 Instance CPU&quot;\n          period  = 300\n        }\n      }\n    ]\n  })\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-cloud-monitoring\" class=\"mobile-header\">Terraform Cloud Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Terraform Cloud workspaces\ncat &gt; scripts/monitor-tf-cloud.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nTF_CLOUD_TOKEN=&quot;${TF_CLOUD_TOKEN}&quot;\nORGANIZATION=&quot;${TF_ORGANIZATION}&quot;\n\n# Function to get workspace status\nget_workspace_status() {\n    local workspace_name=&quot;$1&quot;\n    \n    curl -s \\\n        --header &quot;Authorization: Bearer $TF_CLOUD_TOKEN&quot; \\\n        --header &quot;Content-Type: application/vnd.api+json&quot; \\\n        &quot;https://app.terraform.io/api/v2/organizations/$ORGANIZATION/workspaces/$workspace_name/current-run&quot; \\\n        | jq -r &#039;.data.attributes.status&#039;\n}\n\n# Function to get workspace runs\nget_recent_runs() {\n    local workspace_id=&quot;$1&quot;\n    \n    curl -s \\\n        --header &quot;Authorization: Bearer $TF_CLOUD_TOKEN&quot; \\\n        --header &quot;Content-Type: application/vnd.api+json&quot; \\\n        &quot;https://app.terraform.io/api/v2/workspaces/$workspace_id/runs&quot; \\\n        | jq -r &#039;.data[].attributes | &quot;\\(.status) - \\(.created_at)&quot;&#039;\n}\n\n# Monitor critical workspaces\nWORKSPACES=(&quot;production-web&quot; &quot;production-database&quot; &quot;staging-environment&quot;)\n\nfor workspace in &quot;${WORKSPACES[@]}&quot;; do\n    status=$(get_workspace_status &quot;$workspace&quot;)\n    echo &quot;Workspace: $workspace, Status: $status&quot;\n    \n    if [[ &quot;$status&quot; == &quot;errored&quot; ]]; then\n        echo &quot;❌ ALERT: Workspace $workspace has errors!&quot;\n        # Send alert to monitoring system\n        curl -X POST \\\n            -H &quot;Content-Type: application/json&quot; \\\n            -d &quot;{\\&quot;text\\&quot;: \\&quot;Terraform workspace $workspace has errors\\&quot;}&quot; \\\n            &quot;$SLACK_WEBHOOK_URL&quot;\n    elif [[ &quot;$status&quot; == &quot;planned_and_finished&quot; ]]; then\n        echo &quot;✅ Workspace $workspace is healthy&quot;\n    fi\ndone\nEOF\n\nchmod +x scripts/monitor-tf-cloud.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"12-backup-and-restore\" class=\"mobile-header\">12. Backup and Restore</h2>\n<h3 id=\"state-file-backup\" class=\"mobile-header\">State File Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Comprehensive state backup script\ncat &gt; scripts/backup-terraform-state.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nBACKUP_DIR=&quot;/backup/terraform&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nENVIRONMENTS=(&quot;development&quot; &quot;staging&quot; &quot;production&quot;)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\nbackup_state() {\n    local environment=&quot;$1&quot;\n    local backup_path=&quot;$BACKUP_DIR/$environment&quot;\n    \n    echo &quot;Backing up $environment state...&quot;\n    mkdir -p &quot;$backup_path&quot;\n    \n    # Change to environment directory\n    cd &quot;environments/$environment&quot; || return 1\n    \n    # Pull current state\n    terraform state pull &gt; &quot;$backup_path/terraform-state-$DATE.json&quot;\n    \n    # Backup configuration files\n    tar -czf &quot;$backup_path/terraform-config-$DATE.tar.gz&quot; \\\n        --exclude=&quot;.terraform&quot; \\\n        --exclude=&quot;*.tfplan&quot; \\\n        .\n    \n    # Backup workspace info\n    terraform workspace show &gt; &quot;$backup_path/current-workspace-$DATE.txt&quot;\n    terraform workspace list &gt; &quot;$backup_path/all-workspaces-$DATE.txt&quot;\n    \n    # Backup provider versions\n    terraform version &gt; &quot;$backup_path/terraform-version-$DATE.txt&quot;\n    \n    cd - &gt; /dev/null\n    \n    echo &quot;✅ Backup completed for $environment&quot;\n}\n\n# Backup all environments\nfor env in &quot;${ENVIRONMENTS[@]}&quot;; do\n    if [[ -d &quot;environments/$env&quot; ]]; then\n        backup_state &quot;$env&quot;\n    else\n        echo &quot;⚠️  Environment directory not found: environments/$env&quot;\n    fi\ndone\n\n# Create consolidated backup\ncd &quot;$BACKUP_DIR&quot;\ntar -czf &quot;terraform-complete-backup-$DATE.tar.gz&quot; \\\n    --exclude=&quot;*.tar.gz&quot; \\\n    .\n\n# Upload to cloud storage\nif command -v aws &amp;&gt; /dev/null; then\n    aws s3 cp &quot;terraform-complete-backup-$DATE.tar.gz&quot; \\\n        s3://terraform-backups/\nfi\n\nif command -v az &amp;&gt; /dev/null; then\n    az storage blob upload \\\n        --file &quot;terraform-complete-backup-$DATE.tar.gz&quot; \\\n        --container-name terraform-backups \\\n        --name &quot;terraform-complete-backup-$DATE.tar.gz&quot;\nfi\n\nif command -v gsutil &amp;&gt; /dev/null; then\n    gsutil cp &quot;terraform-complete-backup-$DATE.tar.gz&quot; \\\n        gs://terraform-backups/\nfi\n\n# Cleanup old backups (keep last 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;terraform-complete-backup-*.tar.gz&quot; \\\n    -mtime +30 -delete\n\necho &quot;🎉 All backups completed successfully&quot;\nEOF\n\nchmod +x scripts/backup-terraform-state.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"disaster-recovery-procedures\" class=\"mobile-header\">Disaster Recovery Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Disaster recovery script\ncat &gt; scripts/disaster-recovery.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nBACKUP_FILE=&quot;$1&quot;\nTARGET_ENVIRONMENT=&quot;$2&quot;\n\nif [[ -z &quot;$BACKUP_FILE&quot; || -z &quot;$TARGET_ENVIRONMENT&quot; ]]; then\n    echo &quot;Usage: $0 &lt;backup-file.tar.gz&gt; &lt;target-environment&gt;&quot;\n    echo &quot;Example: $0 terraform-complete-backup-20240115_143000.tar.gz production&quot;\n    exit 1\nfi\n\n# Verify backup file exists\nif [[ ! -f &quot;$BACKUP_FILE&quot; ]]; then\n    echo &quot;❌ Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\n# Create recovery directory\nRECOVERY_DIR=&quot;/tmp/terraform-recovery-$(date +%s)&quot;\nmkdir -p &quot;$RECOVERY_DIR&quot;\n\n# Extract backup\necho &quot;📦 Extracting backup...&quot;\ntar -xzf &quot;$BACKUP_FILE&quot; -C &quot;$RECOVERY_DIR&quot;\n\n# Navigate to target environment\ncd &quot;environments/$TARGET_ENVIRONMENT&quot; || {\n    echo &quot;❌ Target environment directory not found: environments/$TARGET_ENVIRONMENT&quot;\n    exit 1\n}\n\n# Backup current state before recovery\necho &quot;💾 Backing up current state...&quot;\nterraform state pull &gt; &quot;current-state-backup-$(date +%Y%m%d_%H%M%S).json&quot;\n\n# Import recovered state\nRECOVERED_STATE=&quot;$RECOVERY_DIR/$TARGET_ENVIRONMENT/terraform-state-*.json&quot;\nif [[ -f $RECOVERED_STATE ]]; then\n    echo &quot;🔄 Restoring state from backup...&quot;\n    terraform state push &quot;$RECOVERED_STATE&quot;\nelse\n    echo &quot;❌ No state file found in backup for environment: $TARGET_ENVIRONMENT&quot;\n    exit 1\nfi\n\n# Verify state consistency\necho &quot;🔍 Verifying state consistency...&quot;\nif terraform plan -detailed-exitcode; then\n    echo &quot;✅ State restored successfully - no drift detected&quot;\nelif [[ $? -eq 2 ]]; then\n    echo &quot;⚠️  State restored but drift detected - manual review required&quot;\n    terraform plan\nelse\n    echo &quot;❌ State restoration failed - check error messages above&quot;\n    exit 1\nfi\n\n# Cleanup\nrm -rf &quot;$RECOVERY_DIR&quot;\n\necho &quot;🎉 Disaster recovery completed for environment: $TARGET_ENVIRONMENT&quot;\necho &quot;💡 Please review the plan output and apply changes if necessary&quot;\nEOF\n\nchmod +x scripts/disaster-recovery.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"state-migration-and-refactoring\" class=\"mobile-header\">State Migration and Refactoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># State migration script for refactoring\ncat &gt; scripts/migrate-state.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Function to safely move resources in state\nmove_resource() {\n    local old_address=&quot;$1&quot;\n    local new_address=&quot;$2&quot;\n    \n    echo &quot;Moving $old_address to $new_address&quot;\n    \n    # Check if source resource exists\n    if terraform state show &quot;$old_address&quot; &amp;&gt;/dev/null; then\n        terraform state mv &quot;$old_address&quot; &quot;$new_address&quot;\n        echo &quot;✅ Successfully moved $old_address to $new_address&quot;\n    else\n        echo &quot;⚠️  Resource not found: $old_address&quot;\n    fi\n}\n\n# Function to import existing resources\nimport_resource() {\n    local resource_address=&quot;$1&quot;\n    local resource_id=&quot;$2&quot;\n    \n    echo &quot;Importing $resource_id as $resource_address&quot;\n    \n    if terraform import &quot;$resource_address&quot; &quot;$resource_id&quot;; then\n        echo &quot;✅ Successfully imported $resource_id as $resource_address&quot;\n    else\n        echo &quot;❌ Failed to import $resource_id&quot;\n    fi\n}\n\n# Example migrations\necho &quot;🔄 Starting state migrations...&quot;\n\n# Move resources to modules\nmove_resource &quot;aws_instance.web&quot; &quot;module.web_servers.aws_instance.main[0]&quot;\nmove_resource &quot;aws_security_group.web&quot; &quot;module.web_servers.aws_security_group.main&quot;\n\n# Import existing resources\nimport_resource &quot;aws_s3_bucket.existing_bucket&quot; &quot;existing-bucket-name&quot;\n\n# Remove resources that are no longer managed\nterraform state rm aws_instance.deprecated\n\necho &quot;🎉 State migrations completed&quot;\necho &quot;💡 Run &#039;terraform plan&#039; to verify changes&quot;\nEOF\n\nchmod +x scripts/migrate-state.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"13-troubleshooting\" class=\"mobile-header\">13. Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Terraform troubleshooting script\ncat &gt; scripts/troubleshoot-terraform.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\necho &quot;🔧 Terraform Troubleshooting Tool&quot;\necho &quot;================================&quot;\n\n# Check Terraform installation\ncheck_installation() {\n    echo &quot;📋 Checking Terraform installation...&quot;\n    \n    if command -v terraform &amp;&gt; /dev/null; then\n        terraform version\n        echo &quot;✅ Terraform is installed&quot;\n    else\n        echo &quot;❌ Terraform is not installed or not in PATH&quot;\n        return 1\n    fi\n}\n\n# Check configuration syntax\ncheck_configuration() {\n    echo &quot;📋 Checking configuration syntax...&quot;\n    \n    if terraform fmt -check -diff; then\n        echo &quot;✅ Configuration is properly formatted&quot;\n    else\n        echo &quot;⚠️  Configuration formatting issues found&quot;\n        terraform fmt -diff\n    fi\n    \n    if terraform validate; then\n        echo &quot;✅ Configuration is valid&quot;\n    else\n        echo &quot;❌ Configuration validation failed&quot;\n        return 1\n    fi\n}\n\n# Check provider authentication\ncheck_providers() {\n    echo &quot;📋 Checking provider authentication...&quot;\n    \n    # AWS\n    if aws sts get-caller-identity &amp;&gt;/dev/null; then\n        echo &quot;✅ AWS credentials are valid&quot;\n    else\n        echo &quot;⚠️  AWS credentials may be invalid or not configured&quot;\n    fi\n    \n    # Azure\n    if az account show &amp;&gt;/dev/null; then\n        echo &quot;✅ Azure credentials are valid&quot;\n    else\n        echo &quot;⚠️  Azure credentials may be invalid or not configured&quot;\n    fi\n    \n    # GCP\n    if gcloud auth list --filter=status:ACTIVE --format=&quot;value(account)&quot; &amp;&gt;/dev/null; then\n        echo &quot;✅ GCP credentials are valid&quot;\n    else\n        echo &quot;⚠️  GCP credentials may be invalid or not configured&quot;\n    fi\n}\n\n# Check state file\ncheck_state() {\n    echo &quot;📋 Checking state file...&quot;\n    \n    if terraform state list &amp;&gt;/dev/null; then\n        resource_count=$(terraform state list | wc -l)\n        echo &quot;✅ State file is accessible with $resource_count resources&quot;\n    else\n        echo &quot;❌ Cannot access state file&quot;\n        return 1\n    fi\n}\n\n# Check for common issues\ncheck_common_issues() {\n    echo &quot;📋 Checking for common issues...&quot;\n    \n    # Check for lock file\n    if [[ -f &quot;.terraform.lock.hcl&quot; ]]; then\n        echo &quot;✅ Lock file exists&quot;\n    else\n        echo &quot;⚠️  Lock file missing - run &#039;terraform init&#039;&quot;\n    fi\n    \n    # Check for local state file in production\n    if [[ -f &quot;terraform.tfstate&quot; ]] &amp;&amp; [[ $(terraform workspace show) == &quot;production&quot; ]]; then\n        echo &quot;⚠️  Local state file detected in production workspace&quot;\n        echo &quot;    Consider using remote state for production&quot;\n    fi\n    \n    # Check for hardcoded secrets\n    if grep -r &quot;password\\s*=\\s*\\&quot;&quot; . --include=&quot;*.tf&quot; --include=&quot;*.tfvars&quot; 2&gt;/dev/null; then\n        echo &quot;⚠️  Potential hardcoded passwords found&quot;\n    fi\n    \n    # Check for large state file\n    if [[ -f &quot;terraform.tfstate&quot; ]]; then\n        state_size=$(stat -f%z &quot;terraform.tfstate&quot; 2&gt;/dev/null || stat -c%s &quot;terraform.tfstate&quot; 2&gt;/dev/null)\n        if [[ $state_size -gt 10485760 ]]; then  # 10MB\n            echo &quot;⚠️  Large state file detected ($(($state_size / 1024 / 1024))MB)&quot;\n            echo &quot;    Consider splitting into smaller configurations&quot;\n        fi\n    fi\n}\n\n# Debug mode information\ndebug_info() {\n    echo &quot;📋 Debug information...&quot;\n    \n    echo &quot;Working directory: $(pwd)&quot;\n    echo &quot;Terraform workspace: $(terraform workspace show)&quot;\n    echo &quot;Environment variables:&quot;\n    env | grep -E &quot;^(TF_|AWS_|ARM_|GOOGLE_)&quot; | sed &#039;s/=.*/=***/&#039; | sort\n}\n\n# Run all checks\nrun_all_checks() {\n    check_installation || return 1\n    check_configuration || return 1\n    check_providers\n    check_state || return 1\n    check_common_issues\n    debug_info\n}\n\n# Main execution\ncase &quot;${1:-all}&quot; in\n    &quot;installation&quot;)\n        check_installation\n        ;;\n    &quot;config&quot;)\n        check_configuration\n        ;;\n    &quot;providers&quot;)\n        check_providers\n        ;;\n    &quot;state&quot;)\n        check_state\n        ;;\n    &quot;common&quot;)\n        check_common_issues\n        ;;\n    &quot;debug&quot;)\n        debug_info\n        ;;\n    &quot;all&quot;)\n        run_all_checks\n        ;;\n    *)\n        echo &quot;Usage: $0 [installation|config|providers|state|common|debug|all]&quot;\n        exit 1\n        ;;\nesac\nEOF\n\nchmod +x scripts/troubleshoot-terraform.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Advanced debugging techniques\ncat &gt; scripts/debug-terraform.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Enable debug logging\nexport TF_LOG=DEBUG\nexport TF_LOG_PATH=&quot;terraform-debug-$(date +%Y%m%d_%H%M%S).log&quot;\n\n# Create debug session\ndebug_session() {\n    local operation=&quot;$1&quot;\n    shift\n    \n    echo &quot;🐛 Starting debug session for: $operation&quot;\n    echo &quot;Debug log: $TF_LOG_PATH&quot;\n    \n    # Capture detailed timing information\n    time terraform &quot;$operation&quot; &quot;$@&quot; 2&gt;&amp;1 | tee -a &quot;$TF_LOG_PATH&quot;\n    \n    local exit_code=${PIPESTATUS[0]}\n    \n    if [[ $exit_code -ne 0 ]]; then\n        echo &quot;❌ Operation failed with exit code: $exit_code&quot;\n        echo &quot;📄 Last 50 lines of debug log:&quot;\n        tail -50 &quot;$TF_LOG_PATH&quot;\n    else\n        echo &quot;✅ Operation completed successfully&quot;\n    fi\n    \n    return $exit_code\n}\n\n# Analyze state file for issues\nanalyze_state() {\n    echo &quot;🔍 Analyzing state file...&quot;\n    \n    # Check for orphaned resources\n    echo &quot;Checking for potential orphaned resources...&quot;\n    terraform state list | while read resource; do\n        if ! terraform plan -target=&quot;$resource&quot; -detailed-exitcode &gt;/dev/null 2&gt;&amp;1; then\n            echo &quot;⚠️  Potential issue with resource: $resource&quot;\n        fi\n    done\n    \n    # Check for large resources in state\n    echo &quot;Checking for large resources...&quot;\n    terraform state pull | jq -r &#039;.resources[] | select(.instances[0].attributes | length &gt; 50) | .address&#039; 2&gt;/dev/null | head -10\n}\n\n# Provider debug information\ndebug_providers() {\n    echo &quot;🔍 Debugging provider issues...&quot;\n    \n    # Show provider configuration\n    terraform providers\n    \n    # Check provider cache\n    if [[ -d &quot;$HOME/.terraform.d/plugin-cache&quot; ]]; then\n        echo &quot;Provider cache contents:&quot;\n        ls -la &quot;$HOME/.terraform.d/plugin-cache&quot;\n    fi\n    \n    # Check for provider version conflicts\n    terraform version -json | jq &#039;.provider_selections&#039; 2&gt;/dev/null\n}\n\n# Network and API debugging\ndebug_network() {\n    echo &quot;🌐 Debugging network connectivity...&quot;\n    \n    # Test connectivity to common endpoints\n    local endpoints=(\n        &quot;https://releases.hashicorp.com&quot;\n        &quot;https://registry.terraform.io&quot;\n        &quot;https://api.github.com&quot;\n        &quot;https://aws.amazon.com&quot;\n        &quot;https://management.azure.com&quot;\n        &quot;https://www.googleapis.com&quot;\n    )\n    \n    for endpoint in &quot;${endpoints[@]}&quot;; do\n        if curl -s --connect-timeout 5 &quot;$endpoint&quot; &gt;/dev/null; then\n            echo &quot;✅ $endpoint - OK&quot;\n        else\n            echo &quot;❌ $endpoint - FAILED&quot;\n        fi\n    done\n}\n\n# Performance analysis\nanalyze_performance() {\n    echo &quot;📊 Analyzing Terraform performance...&quot;\n    \n    # Generate and analyze dependency graph\n    terraform graph &gt; dependency-graph.dot\n    \n    # Count resources by type\n    echo &quot;Resource distribution:&quot;\n    terraform state list | cut -d. -f1 | sort | uniq -c | sort -nr | head -10\n    \n    # Estimate plan time based on resources\n    resource_count=$(terraform state list | wc -l)\n    estimated_time=$((resource_count * 2))  # Rough estimate: 2 seconds per resource\n    echo &quot;Estimated plan time: ${estimated_time} seconds for $resource_count resources&quot;\n}\n\n# Usage\ncase &quot;${1:-help}&quot; in\n    &quot;session&quot;)\n        shift\n        debug_session &quot;$@&quot;\n        ;;\n    &quot;state&quot;)\n        analyze_state\n        ;;\n    &quot;providers&quot;)\n        debug_providers\n        ;;\n    &quot;network&quot;)\n        debug_network\n        ;;\n    &quot;performance&quot;)\n        analyze_performance\n        ;;\n    &quot;all&quot;)\n        debug_providers\n        debug_network\n        analyze_state\n        analyze_performance\n        ;;\n    &quot;help&quot;|*)\n        echo &quot;Usage: $0 [session|state|providers|network|performance|all]&quot;\n        echo &quot;&quot;\n        echo &quot;  session &lt;operation&gt; [args]  - Debug specific Terraform operation&quot;\n        echo &quot;  state                       - Analyze state file for issues&quot;\n        echo &quot;  providers                   - Debug provider configuration&quot;\n        echo &quot;  network                     - Test network connectivity&quot;\n        echo &quot;  performance                 - Analyze performance characteristics&quot;\n        echo &quot;  all                         - Run all debug checks&quot;\n        ;;\nesac\nEOF\n\nchmod +x scripts/debug-terraform.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"14-maintenance\" class=\"mobile-header\">14. Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Terraform update script\ncat &gt; scripts/update-terraform.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nCURRENT_VERSION=$(terraform version -json | jq -r &#039;.terraform_version&#039;)\necho &quot;Current Terraform version: $CURRENT_VERSION&quot;\n\n# Check for latest version\ncheck_latest_version() {\n    local latest_version\n    latest_version=$(curl -s https://api.github.com/repos/hashicorp/terraform/releases/latest | jq -r &#039;.tag_name&#039; | sed &#039;s/v//&#039;)\n    echo &quot;Latest Terraform version: $latest_version&quot;\n    \n    if [[ &quot;$CURRENT_VERSION&quot; != &quot;$latest_version&quot; ]]; then\n        echo &quot;⚠️  Update available: $CURRENT_VERSION → $latest_version&quot;\n        return 1\n    else\n        echo &quot;✅ Terraform is up to date&quot;\n        return 0\n    fi\n}\n\n# Update using package manager\nupdate_terraform() {\n    echo &quot;🔄 Updating Terraform...&quot;\n    \n    if command -v apt &amp;&gt;/dev/null; then\n        sudo apt update &amp;&amp; sudo apt upgrade terraform\n    elif command -v yum &amp;&gt;/dev/null; then\n        sudo yum update terraform\n    elif command -v dnf &amp;&gt;/dev/null; then\n        sudo dnf update terraform\n    elif command -v pacman &amp;&gt;/dev/null; then\n        sudo pacman -Syu terraform\n    elif command -v zypper &amp;&gt;/dev/null; then\n        sudo zypper update terraform\n    elif command -v brew &amp;&gt;/dev/null; then\n        brew upgrade terraform\n    else\n        echo &quot;❌ No supported package manager found&quot;\n        echo &quot;💡 Please update manually from: https://releases.hashicorp.com/terraform/&quot;\n        return 1\n    fi\n}\n\n# Update providers\nupdate_providers() {\n    echo &quot;🔄 Updating providers...&quot;\n    terraform init -upgrade\n}\n\n# Verify update\nverify_update() {\n    echo &quot;🔍 Verifying update...&quot;\n    \n    terraform version\n    \n    # Test basic functionality\n    if terraform validate; then\n        echo &quot;✅ Update verification successful&quot;\n    else\n        echo &quot;❌ Update verification failed&quot;\n        return 1\n    fi\n}\n\n# Main update process\nmain() {\n    if check_latest_version; then\n        exit 0\n    fi\n    \n    echo &quot;Proceed with update? (y/N)&quot;\n    read -r response\n    \n    if [[ &quot;$response&quot; =~ ^[Yy]$ ]]; then\n        update_terraform || exit 1\n        update_providers || exit 1\n        verify_update || exit 1\n        echo &quot;🎉 Terraform update completed successfully&quot;\n    else\n        echo &quot;Update cancelled&quot;\n    fi\n}\n\nmain &quot;$@&quot;\nEOF\n\nchmod +x scripts/update-terraform.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Comprehensive maintenance script\ncat &gt; scripts/terraform-maintenance.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nMAINTENANCE_LOG=&quot;/var/log/terraform-maintenance-$(date +%Y%m%d_%H%M%S).log&quot;\n\nlog() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a &quot;$MAINTENANCE_LOG&quot;\n}\n\n# Cleanup old plan files\ncleanup_plans() {\n    log &quot;🧹 Cleaning up old plan files...&quot;\n    find . -name &quot;*.tfplan&quot; -mtime +7 -delete\n    find . -name &quot;*.tfplan.json&quot; -mtime +7 -delete\n    log &quot;✅ Plan file cleanup completed&quot;\n}\n\n# Cleanup provider cache\ncleanup_provider_cache() {\n    log &quot;🧹 Cleaning up provider cache...&quot;\n    if [[ -d &quot;$HOME/.terraform.d/plugin-cache&quot; ]]; then\n        # Remove providers older than 30 days\n        find &quot;$HOME/.terraform.d/plugin-cache&quot; -type f -mtime +30 -delete\n        \n        # Remove empty directories\n        find &quot;$HOME/.terraform.d/plugin-cache&quot; -type d -empty -delete\n        \n        cache_size=$(du -sh &quot;$HOME/.terraform.d/plugin-cache&quot; 2&gt;/dev/null | cut -f1)\n        log &quot;✅ Provider cache cleanup completed - current size: $cache_size&quot;\n    fi\n}\n\n# Validate all configurations\nvalidate_configurations() {\n    log &quot;🔍 Validating all configurations...&quot;\n    \n    local validation_failed=false\n    \n    # Find all directories with Terraform files\n    find . -name &quot;*.tf&quot; -exec dirname {} \\; | sort -u | while read -r dir; do\n        log &quot;Validating: $dir&quot;\n        cd &quot;$dir&quot; || continue\n        \n        if terraform validate; then\n            log &quot;✅ $dir validation passed&quot;\n        else\n            log &quot;❌ $dir validation failed&quot;\n            validation_failed=true\n        fi\n        \n        cd - &gt; /dev/null\n    done\n    \n    if [[ &quot;$validation_failed&quot; == &quot;true&quot; ]]; then\n        log &quot;⚠️  Some validations failed - please review&quot;\n    else\n        log &quot;✅ All validations passed&quot;\n    fi\n}\n\n# Check for deprecated features\ncheck_deprecated() {\n    log &quot;🔍 Checking for deprecated features...&quot;\n    \n    # Check for deprecated syntax\n    local deprecated_patterns=(\n        &quot;provider\\s+\\&quot;[^\\&quot;]+\\&quot;\\s+{&quot; # Old provider syntax\n        &quot;terraform\\s+{[^}]*version\\s*=&quot; # Old terraform version constraints\n        &quot;ignore_changes\\s*=&quot; # Old ignore_changes syntax\n    )\n    \n    for pattern in &quot;${deprecated_patterns[@]}&quot;; do\n        if grep -r &quot;$pattern&quot; . --include=&quot;*.tf&quot; 2&gt;/dev/null; then\n            log &quot;⚠️  Deprecated pattern found: $pattern&quot;\n        fi\n    done\n    \n    log &quot;✅ Deprecation check completed&quot;\n}\n\n# Security audit\nsecurity_audit() {\n    log &quot;🔒 Performing security audit...&quot;\n    \n    # Check for potential security issues\n    local security_issues=()\n    \n    # Check for hardcoded secrets\n    if grep -r -i &quot;password\\s*=\\s*\\&quot;[^$]&quot; . --include=&quot;*.tf&quot; --include=&quot;*.tfvars&quot; 2&gt;/dev/null; then\n        security_issues+=(&quot;Potential hardcoded passwords&quot;)\n    fi\n    \n    # Check for public access\n    if grep -r &quot;0.0.0.0/0&quot; . --include=&quot;*.tf&quot; 2&gt;/dev/null; then\n        security_issues+=(&quot;Public access (0.0.0.0/0) found&quot;)\n    fi\n    \n    # Check for unencrypted resources\n    if grep -r &quot;encrypt.*=.*false&quot; . --include=&quot;*.tf&quot; 2&gt;/dev/null; then\n        security_issues+=(&quot;Unencrypted resources found&quot;)\n    fi\n    \n    if [[ ${#security_issues[@]} -gt 0 ]]; then\n        log &quot;⚠️  Security issues found:&quot;\n        for issue in &quot;${security_issues[@]}&quot;; do\n            log &quot;  - $issue&quot;\n        done\n    else\n        log &quot;✅ No obvious security issues found&quot;\n    fi\n}\n\n# State health check\nstate_health_check() {\n    log &quot;🏥 Performing state health check...&quot;\n    \n    # Check state file size\n    if [[ -f &quot;terraform.tfstate&quot; ]]; then\n        state_size=$(stat -f%z &quot;terraform.tfstate&quot; 2&gt;/dev/null || stat -c%s &quot;terraform.tfstate&quot; 2&gt;/dev/null)\n        state_size_mb=$((state_size / 1024 / 1024))\n        \n        if [[ $state_size_mb -gt 50 ]]; then\n            log &quot;⚠️  Large state file detected: ${state_size_mb}MB&quot;\n        else\n            log &quot;✅ State file size OK: ${state_size_mb}MB&quot;\n        fi\n    fi\n    \n    # Check for drift\n    if terraform plan -detailed-exitcode &gt; /dev/null 2&gt;&amp;1; then\n        log &quot;✅ No infrastructure drift detected&quot;\n    else\n        exit_code=$?\n        if [[ $exit_code -eq 2 ]]; then\n            log &quot;⚠️  Infrastructure drift detected&quot;\n        else\n            log &quot;❌ Error checking for drift&quot;\n        fi\n    fi\n}\n\n# Generate maintenance report\ngenerate_report() {\n    log &quot;📊 Generating maintenance report...&quot;\n    \n    local report_file=&quot;/tmp/terraform-maintenance-report-$(date +%Y%m%d_%H%M%S).md&quot;\n    \n    cat &gt; &quot;$report_file&quot; &lt;&lt;EOF\n# Terraform Maintenance Report\n\n**Date:** $(date)\n**Duration:** $((SECONDS / 60)) minutes\n\n## Summary\n\n- Configuration validation: $(grep &quot;validation&quot; &quot;$MAINTENANCE_LOG&quot; | grep -c &quot;passed&quot;)\n- Security audit: Completed\n- State health check: Completed\n- Cleanup operations: Completed\n\n## Recommendations\n\n$(grep &quot;⚠️&quot; &quot;$MAINTENANCE_LOG&quot; | sed &#039;s/.*⚠️  /- /&#039;)\n\n## Full Log\n\n\\`\\`\\`\n$(cat &quot;$MAINTENANCE_LOG&quot;)\n\\`\\`\\`\nEOF\n    \n    log &quot;📄 Maintenance report generated: $report_file&quot;\n    \n    # Email report if configured\n    if [[ -n &quot;$MAINTENANCE_EMAIL&quot; ]]; then\n        mail -s &quot;Terraform Maintenance Report - $(date)&quot; &quot;$MAINTENANCE_EMAIL&quot; &lt; &quot;$report_file&quot;\n        log &quot;📧 Report emailed to: $MAINTENANCE_EMAIL&quot;\n    fi\n}\n\n# Main maintenance routine\nmain() {\n    log &quot;🚀 Starting Terraform maintenance...&quot;\n    \n    cleanup_plans\n    cleanup_provider_cache\n    validate_configurations\n    check_deprecated\n    security_audit\n    state_health_check\n    generate_report\n    \n    log &quot;🎉 Terraform maintenance completed&quot;\n    log &quot;📊 Total runtime: $((SECONDS / 60)) minutes&quot;\n}\n\n# Run maintenance\nmain &quot;$@&quot;\nEOF\n\nchmod +x scripts/terraform-maintenance.sh\n\n# Schedule maintenance with cron\ncat &gt; scripts/schedule-maintenance.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\n# Add to crontab for weekly maintenance\n(crontab -l 2&gt;/dev/null; echo &quot;0 2 * * 0 /path/to/terraform-maintenance.sh&quot;) | crontab -\n\necho &quot;✅ Weekly maintenance scheduled for Sundays at 2 AM&quot;\nEOF\n\nchmod +x scripts/schedule-maintenance.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"15-integration-examples\" class=\"mobile-header\">15. Integration Examples</h2>\n<h3 id=\"cicd-pipeline-integration\" class=\"mobile-header\">CI/CD Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># GitHub Actions workflow\nmkdir -p .github/workflows\ncat &gt; .github/workflows/terraform.yml &lt;&lt;EOF\nname: Terraform Multi-Cloud Deployment\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  TF_VERSION: 1.6.4\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment: [development, staging, production]\n        \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v3\n      with:\n        terraform_version: \\${{ env.TF_VERSION }}\n        cli_config_credentials_token: \\${{ secrets.TF_CLOUD_TOKEN }}\n    \n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v4\n      with:\n        aws-access-key-id: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-west-2\n    \n    - name: Terraform Format Check\n      run: terraform fmt -check -recursive\n    \n    - name: Terraform Initialize\n      run: terraform init\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Plan\n      run: terraform plan -var-file=&quot;\\${{ matrix.environment }}.tfvars&quot;\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Security Scan with Checkov\n      uses: bridgecrewio/checkov-action@master\n      with:\n        directory: .\n        framework: terraform\n        output_format: sarif\n        output_file_path: checkov.sarif\n    \n    - name: Upload Checkov results\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: checkov.sarif\n    \n    - name: Terraform Apply (Production)\n      if: github.ref == &#039;refs/heads/main&#039; &amp;&amp; matrix.environment == &#039;production&#039;\n      run: terraform apply -auto-approve -var-file=&quot;production.tfvars&quot;\n      working-directory: environments/production\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci-integration\" class=\"mobile-header\">GitLab CI Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - validate\n  - plan\n  - apply\n  - destroy\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_VERSION: &quot;1.6.4&quot;\n  TF_IN_AUTOMATION: &quot;true&quot;\n\ncache:\n  key: &quot;\\${TF_ROOT}&quot;\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform fmt -check -recursive\n    - terraform validate\n    - |\n      for dir in environments/*/; do\n        cd &quot;\\$dir&quot;\n        terraform validate\n        cd -\n      done\n  rules:\n    - if: &#039;\\$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\nplan:production:\n  stage: plan\n  script:\n    - cd environments/production\n    - terraform plan -var-file=&quot;production.tfvars&quot; -out=&quot;production.tfplan&quot;\n  artifacts:\n    paths:\n      - environments/production/production.tfplan\n    expire_in: 1 week\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\napply:production:\n  stage: apply\n  script:\n    - cd environments/production\n    - terraform apply -input=false &quot;production.tfplan&quot;\n  dependencies:\n    - plan:production\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n      when: manual\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"jenkins-pipeline\" class=\"mobile-header\">Jenkins Pipeline</h3>\n<div class=\"mobile-code-block\" data-language=\"groovy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">groovy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-groovy\">// Jenkinsfile\npipeline {\n    agent any\n    \n    environment {\n        TF_VERSION = &#039;1.6.4&#039;\n        AWS_DEFAULT_REGION = &#039;us-west-2&#039;\n    }\n    \n    stages {\n        stage(&#039;Checkout&#039;) {\n            steps {\n                checkout scm\n            }\n        }\n        \n        stage(&#039;Setup&#039;) {\n            steps {\n                sh &#039;&#039;&#039;\n                    # Install Terraform if not present\n                    if ! command -v terraform &amp;&gt; /dev/null; then\n                        wget https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip\n                        unzip terraform_${TF_VERSION}_linux_amd64.zip\n                        chmod +x terraform\n                        sudo mv terraform /usr/local/bin/\n                    fi\n                    \n                    terraform version\n                &#039;&#039;&#039;\n            }\n        }\n        \n        stage(&#039;Validate&#039;) {\n            parallel {\n                stage(&#039;Format Check&#039;) {\n                    steps {\n                        sh &#039;terraform fmt -check -recursive&#039;\n                    }\n                }\n                stage(&#039;Configuration Validation&#039;) {\n                    steps {\n                        sh &#039;&#039;&#039;\n                            for dir in environments/*/; do\n                                cd &quot;$dir&quot;\n                                terraform init\n                                terraform validate\n                                cd -\n                            done\n                        &#039;&#039;&#039;\n                    }\n                }\n                stage(&#039;Security Scan&#039;) {\n                    steps {\n                        sh &#039;&#039;&#039;\n                            # Install and run Checkov\n                            pip3 install checkov\n                            checkov --framework terraform --directory .\n                        &#039;&#039;&#039;\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Plan&#039;) {\n            steps {\n                script {\n                    def environments = [&#039;development&#039;, &#039;staging&#039;, &#039;production&#039;]\n                    def planResults = [:]\n                    \n                    environments.each { env -&gt;\n                        planResults[env] = {\n                            dir(&quot;environments/${env}&quot;) {\n                                sh &quot;&quot;&quot;\n                                    terraform init\n                                    terraform plan -var-file=&quot;${env}.tfvars&quot; -out=&quot;${env}.tfplan&quot;\n                                &quot;&quot;&quot;\n                            }\n                        }\n                    }\n                    \n                    parallel planResults\n                }\n            }\n        }\n        \n        stage(&#039;Apply&#039;) {\n            when {\n                branch &#039;main&#039;\n            }\n            steps {\n                script {\n                    input message: &#039;Apply Terraform changes?&#039;, ok: &#039;Apply&#039;\n                    \n                    dir(&#039;environments/production&#039;) {\n                        sh &#039;terraform apply -input=false production.tfplan&#039;\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: &#039;environments/**/*.tfplan&#039;, fingerprint: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: &#039;checkov-report&#039;,\n                reportFiles: &#039;index.html&#039;,\n                reportName: &#039;Checkov Security Report&#039;\n            ])\n        }\n        failure {\n            emailext (\n                subject: &quot;Terraform Pipeline Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;The Terraform pipeline has failed. Please check the build logs for details.&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL}&quot;\n            )\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"azure-devops-pipeline\" class=\"mobile-header\">Azure DevOps Pipeline</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># azure-pipelines.yml\ntrigger:\n  branches:\n    include:\n    - main\n    - develop\n  paths:\n    include:\n    - terraform/*\n    - environments/*\n\npool:\n  vmImage: &#039;ubuntu-latest&#039;\n\nvariables:\n  TF_VERSION: &#039;1.6.4&#039;\n  TF_IN_AUTOMATION: &#039;true&#039;\n\nstages:\n- stage: Validate\n  displayName: &#039;Validate Terraform&#039;\n  jobs:\n  - job: ValidateJob\n    displayName: &#039;Validate Configuration&#039;\n    steps:\n    - task: TerraformInstaller@0\n      displayName: &#039;Install Terraform&#039;\n      inputs:\n        terraformVersion: $(TF_VERSION)\n    \n    - script: |\n        terraform fmt -check -recursive\n        if [ $? -ne 0 ]; then\n          echo &quot;##vso[task.logissue type=error]Terraform files are not formatted correctly&quot;\n          exit 1\n        fi\n      displayName: &#039;Check Terraform Format&#039;\n    \n    - script: |\n        for dir in environments/*/; do\n          echo &quot;Validating $dir&quot;\n          cd &quot;$dir&quot;\n          terraform init -backend=false\n          terraform validate\n          cd -\n        done\n      displayName: &#039;Validate All Environments&#039;\n    \n    - script: |\n        # Install and run security scanning\n        pip install checkov\n        checkov --framework terraform --directory . --output cli --output junitxml --output-file-path checkov-results.xml\n      displayName: &#039;Security Scan with Checkov&#039;\n    \n    - task: PublishTestResults@2\n      condition: always()\n      inputs:\n        testResultsFormat: &#039;JUnit&#039;\n        testResultsFiles: &#039;checkov-results.xml&#039;\n        failTaskOnFailedTests: true\n\n- stage: Plan\n  displayName: &#039;Terraform Plan&#039;\n  dependsOn: Validate\n  condition: succeeded()\n  jobs:\n  - job: PlanProduction\n    displayName: &#039;Plan Production Environment&#039;\n    steps:\n    - task: TerraformInstaller@0\n      inputs:\n        terraformVersion: $(TF_VERSION)\n    \n    - task: AzureCLI@2\n      displayName: &#039;Configure Azure Backend&#039;\n      inputs:\n        azureSubscription: &#039;Production-ServiceConnection&#039;\n        scriptType: &#039;bash&#039;\n        scriptLocation: &#039;inlineScript&#039;\n        inlineScript: |\n          cd environments/production\n          terraform init \\\n            -backend-config=&quot;resource_group_name=$(BACKEND_RESOURCE_GROUP)&quot; \\\n            -backend-config=&quot;storage_account_name=$(BACKEND_STORAGE_ACCOUNT)&quot; \\\n            -backend-config=&quot;container_name=$(BACKEND_CONTAINER)&quot; \\\n            -backend-config=&quot;key=production.tfstate&quot;\n    \n    - task: AzureCLI@2\n      displayName: &#039;Terraform Plan&#039;\n      inputs:\n        azureSubscription: &#039;Production-ServiceConnection&#039;\n        scriptType: &#039;bash&#039;\n        scriptLocation: &#039;inlineScript&#039;\n        inlineScript: |\n          cd environments/production\n          terraform plan -var-file=&quot;production.tfvars&quot; -out=production.tfplan\n    \n    - task: PublishPipelineArtifact@1\n      inputs:\n        targetPath: &#039;environments/production/production.tfplan&#039;\n        artifact: &#039;terraform-plan-production&#039;\n\n- stage: Apply\n  displayName: &#039;Terraform Apply&#039;\n  dependsOn: Plan\n  condition: and(succeeded(), eq(variables[&#039;Build.SourceBranch&#039;], &#039;refs/heads/main&#039;))\n  jobs:\n  - deployment: ApplyProduction\n    displayName: &#039;Apply to Production&#039;\n    environment: &#039;Production&#039;\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - task: TerraformInstaller@0\n            inputs:\n              terraformVersion: $(TF_VERSION)\n          \n          - task: DownloadPipelineArtifact@2\n            inputs:\n              artifact: &#039;terraform-plan-production&#039;\n              path: $(System.DefaultWorkingDirectory)/environments/production\n          \n          - task: AzureCLI@2\n            displayName: &#039;Terraform Apply&#039;\n            inputs:\n              azureSubscription: &#039;Production-ServiceConnection&#039;\n              scriptType: &#039;bash&#039;\n              scriptLocation: &#039;inlineScript&#039;\n              inlineScript: |\n                cd environments/production\n                terraform init \\\n                  -backend-config=&quot;resource_group_name=$(BACKEND_RESOURCE_GROUP)&quot; \\\n                  -backend-config=&quot;storage_account_name=$(BACKEND_STORAGE_ACCOUNT)&quot; \\\n                  -backend-config=&quot;container_name=$(BACKEND_CONTAINER)&quot; \\\n                  -backend-config=&quot;key=production.tfstate&quot;\n                terraform apply -input=false production.tfplan</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-atlantis-configuration\" class=\"mobile-header\">Advanced Atlantis Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># atlantis.yaml - GitOps for Terraform\nversion: 3\nautomerge: false\ndelete_source_branch_on_merge: true\n\nprojects:\n- name: production\n  dir: environments/production\n  workspace: production\n  terraform_version: v1.6.4\n  apply_requirements: [approved, mergeable]\n  plan_requirements: [mergeable]\n  workflow: production\n  \n- name: staging\n  dir: environments/staging  \n  workspace: staging\n  terraform_version: v1.6.4\n  apply_requirements: [mergeable]\n  workflow: staging\n\n- name: development\n  dir: environments/development\n  workspace: development\n  terraform_version: v1.6.4\n  workflow: development\n\nworkflows:\n  production:\n    plan:\n      steps:\n      - env:\n          name: TF_IN_AUTOMATION\n          value: &quot;true&quot;\n      - init\n      - plan:\n          extra_args: [&quot;-var-file=production.tfvars&quot;]\n      - run: |\n          # Security scanning\n          checkov --framework terraform --directory . --check CKV_AWS_79,CKV_AWS_8\n          \n          # Cost estimation\n          if command -v infracost &amp;&gt; /dev/null; then\n            infracost breakdown --path=.\n          fi\n    apply:\n      steps:\n      - env:\n          name: TF_IN_AUTOMATION  \n          value: &quot;true&quot;\n      - init\n      - apply:\n          extra_args: [&quot;-var-file=production.tfvars&quot;]\n      - run: |\n          # Post-apply notifications\n          curl -X POST -H &#039;Content-type: application/json&#039; \\\n            --data &#039;{&quot;text&quot;:&quot;✅ Production infrastructure updated successfully&quot;}&#039; \\\n            &quot;$SLACK_WEBHOOK_URL&quot;\n            \n  staging:\n    plan:\n      steps:\n      - init\n      - plan:\n          extra_args: [&quot;-var-file=staging.tfvars&quot;]\n    apply:\n      steps:\n      - init  \n      - apply:\n          extra_args: [&quot;-var-file=staging.tfvars&quot;]\n          \n  development:\n    plan:\n      steps:\n      - init\n      - plan:\n          extra_args: [&quot;-var-file=development.tfvars&quot;]\n    apply:\n      steps:\n      - init\n      - apply:\n          extra_args: [&quot;-var-file=development.tfvars&quot;]</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-operator-integration\" class=\"mobile-header\">Kubernetes Operator Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># terraform-operator.yaml - Deploy Terraform via Kubernetes\napiVersion: apiextensions.k8s.io/v1\nkind: CustomResourceDefinition\nmetadata:\n  name: terraforms.infrastructure.company.com\nspec:\n  group: infrastructure.company.com\n  versions:\n  - name: v1\n    served: true\n    storage: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              source:\n                type: object\n                properties:\n                  git:\n                    type: object\n                    properties:\n                      url:\n                        type: string\n                      branch:\n                        type: string\n                      path:\n                        type: string\n              variables:\n                type: object\n                additionalProperties:\n                  type: string\n              workspace:\n                type: string\n              destroy:\n                type: boolean\n                default: false\n          status:\n            type: object\n            properties:\n              phase:\n                type: string\n              lastApplied:\n                type: string\n                format: date-time\n              outputs:\n                type: object\n                additionalProperties:\n                  type: string\n  scope: Namespaced\n  names:\n    plural: terraforms\n    singular: terraform\n    kind: Terraform\n    shortNames:\n    - tf\n\n---\n# Example Terraform resource managed by Kubernetes\napiVersion: infrastructure.company.com/v1\nkind: Terraform\nmetadata:\n  name: web-application-infrastructure\n  namespace: production\nspec:\n  source:\n    git:\n      url: &quot;https://github.com/company/infrastructure&quot;\n      branch: &quot;main&quot;\n      path: &quot;environments/production&quot;\n  workspace: &quot;production&quot;\n  variables:\n    project_name: &quot;web-application&quot;\n    environment: &quot;production&quot;\n    instance_type: &quot;m5.large&quot;\n    min_capacity: &quot;3&quot;\n    max_capacity: &quot;10&quot;\n  destroy: false</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-with-vault-integration\" class=\"mobile-header\">Terraform with Vault Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Vault integration for dynamic credentials\ncat &gt; vault-integration.tf &lt;&lt;EOF\n# Vault provider for dynamic secrets\nterraform {\n  required_providers {\n    vault = {\n      source  = &quot;hashicorp/vault&quot;\n      version = &quot;~&gt; 3.20&quot;\n    }\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n  }\n}\n\nprovider &quot;vault&quot; {\n  address = var.vault_address\n  # Authentication handled via VAULT_TOKEN env var or AWS auth\n}\n\n# Dynamic AWS credentials from Vault\ndata &quot;vault_aws_access_credentials&quot; &quot;aws_creds&quot; {\n  backend = &quot;aws&quot;\n  role    = &quot;terraform-${terraform.workspace}&quot;\n  type    = &quot;creds&quot;\n}\n\nprovider &quot;aws&quot; {\n  region     = var.aws_region\n  access_key = data.vault_aws_access_credentials.aws_creds.access_key\n  secret_key = data.vault_aws_access_credentials.aws_creds.secret_key\n  token      = data.vault_aws_access_credentials.aws_creds.security_token\n}\n\n# Dynamic database credentials\ndata &quot;vault_database_credentials&quot; &quot;db&quot; {\n  backend = &quot;database&quot;\n  role    = &quot;terraform-${terraform.workspace}-db&quot;\n}\n\n# RDS instance with dynamic credentials\nresource &quot;aws_db_instance&quot; &quot;main&quot; {\n  identifier = &quot;${var.project_name}-${terraform.workspace}&quot;\n  \n  engine         = &quot;postgresql&quot;\n  engine_version = &quot;15.4&quot;\n  instance_class = var.db_instance_class\n  \n  allocated_storage = 20\n  storage_encrypted = true\n  \n  db_name  = var.database_name\n  username = data.vault_database_credentials.db.username\n  password = data.vault_database_credentials.db.password\n  \n  skip_final_snapshot = false\n  final_snapshot_identifier = &quot;${var.project_name}-${terraform.workspace}-final&quot;\n  \n  tags = local.common_tags\n}\n\n# Store outputs back in Vault\nresource &quot;vault_kv_secret_v2&quot; &quot;terraform_outputs&quot; {\n  mount = &quot;terraform&quot;\n  name  = &quot;${terraform.workspace}/outputs&quot;\n  \n  data_json = jsonencode({\n    vpc_id           = aws_vpc.main.id\n    database_endpoint = aws_db_instance.main.endpoint\n    load_balancer_dns = aws_lb.main.dns_name\n    timestamp        = timestamp()\n  })\n}\nEOF\n\n# Vault configuration script\ncat &gt; scripts/setup-vault-integration.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nVAULT_ADDR=&quot;${VAULT_ADDR:-https://vault.company.com}&quot;\nVAULT_TOKEN=&quot;${VAULT_TOKEN}&quot;\n\n# Enable AWS secrets engine\nvault auth -method=aws\nvault secrets enable -path=aws aws\n\n# Configure AWS secrets engine\nvault write aws/config/root \\\n    access_key=&quot;$AWS_ACCESS_KEY_ID&quot; \\\n    secret_key=&quot;$AWS_SECRET_ACCESS_KEY&quot; \\\n    region=&quot;us-west-2&quot;\n\n# Create Terraform role for each environment\nfor env in development staging production; do\n    vault write aws/roles/terraform-$env \\\n        credential_type=&quot;assumed_role&quot; \\\n        role_arns=&quot;arn:aws:iam::ACCOUNT:role/TerraformRole-$env&quot; \\\n        default_sts_ttl=&quot;3600&quot; \\\n        max_sts_ttl=&quot;7200&quot;\ndone\n\n# Enable database secrets engine\nvault secrets enable database\n\n# Configure PostgreSQL database\nvault write database/config/production-db \\\n    plugin_name=&quot;postgresql-database-plugin&quot; \\\n    connection_url=&quot;postgresql://{{username}}:{{password}}@postgres.company.com:5432/terraform?sslmode=require&quot; \\\n    allowed_roles=&quot;terraform-production-db&quot; \\\n    username=&quot;vault-admin&quot; \\\n    password=&quot;vault-admin-password&quot;\n\n# Create database role\nvault write database/roles/terraform-production-db \\\n    db_name=&quot;production-db&quot; \\\n    creation_statements=&quot;CREATE ROLE \\&quot;{{name}}\\&quot; WITH LOGIN PASSWORD &#039;{{password}}&#039; VALID UNTIL &#039;{{expiration}}&#039;; GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO \\&quot;{{name}}\\&quot;;&quot; \\\n    default_ttl=&quot;1h&quot; \\\n    max_ttl=&quot;24h&quot;\n\necho &quot;✅ Vault integration configured successfully&quot;\nEOF\n\nchmod +x scripts/setup-vault-integration.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"16-additional-resources\" class=\"mobile-header\">16. Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Terraform Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Registry</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/recommended-practices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/tutorials/aws-get-started\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Multi-Cloud Architecture Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/language/values/sensitive\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">AWS Provider Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Azure Provider Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/google/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GCP Provider Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discuss.hashicorp.com/c/terraform-core\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://learn.hashicorp.com/terraform\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HashiCorp Learn Terraform</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"44 min","wordCount":8635,"tableOfContents":[{"level":2,"text":"1. Introduction","id":"1-introduction"},{"level":3,"text":"FOSS Context","id":"foss-context"},{"level":3,"text":"Key Benefits","id":"key-benefits"},{"level":2,"text":"2. Prerequisites","id":"2-prerequisites"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"4. Initial Configuration","id":"4-initial-configuration"},{"level":3,"text":"First-Run Setup","id":"first-run-setup"},{"level":3,"text":"Testing Initial Setup","id":"testing-initial-setup"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (Linux Systems)","id":"systemd-linux-systems"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"6. Advanced Configuration","id":"6-advanced-configuration"},{"level":3,"text":"Multi-Cloud Provider Setup","id":"multi-cloud-provider-setup"},{"level":3,"text":"Enterprise Features Configuration","id":"enterprise-features-configuration"},{"level":3,"text":"Advanced State Management","id":"advanced-state-management"},{"level":3,"text":"Terraform Workspaces and Environment Management","id":"terraform-workspaces-and-environment-management"},{"level":3,"text":"Remote State Configuration Best Practices","id":"remote-state-configuration-best-practices"},{"level":2,"text":"7. Reverse Proxy Setup","id":"7-reverse-proxy-setup"},{"level":3,"text":"Corporate Proxy Configuration","id":"corporate-proxy-configuration"},{"level":3,"text":"nginx Configuration for Terraform Enterprise","id":"nginx-configuration-for-terraform-enterprise"},{"level":2,"text":"8. Security Configuration","id":"8-security-configuration"},{"level":3,"text":"Secure Credential Management","id":"secure-credential-management"},{"level":3,"text":"Security Scanning and Compliance","id":"security-scanning-and-compliance"},{"level":3,"text":"Policy as Code with OPA","id":"policy-as-code-with-opa"},{"level":2,"text":"9. Database Setup","id":"9-database-setup"},{"level":3,"text":"State Storage Backends","id":"state-storage-backends"},{"level":3,"text":"Database Infrastructure Management","id":"database-infrastructure-management"},{"level":2,"text":"10. Performance Optimization","id":"10-performance-optimization"},{"level":3,"text":"Terraform Performance Tuning","id":"terraform-performance-tuning"},{"level":3,"text":"Large Infrastructure Management","id":"large-infrastructure-management"},{"level":3,"text":"State Optimization","id":"state-optimization"},{"level":2,"text":"11. Monitoring","id":"11-monitoring"},{"level":3,"text":"Terraform Operations Monitoring","id":"terraform-operations-monitoring"},{"level":3,"text":"Infrastructure Monitoring with Terraform","id":"infrastructure-monitoring-with-terraform"},{"level":3,"text":"Terraform Cloud Monitoring","id":"terraform-cloud-monitoring"},{"level":2,"text":"12. Backup and Restore","id":"12-backup-and-restore"},{"level":3,"text":"State File Backup","id":"state-file-backup"},{"level":3,"text":"Disaster Recovery Procedures","id":"disaster-recovery-procedures"},{"level":3,"text":"State Migration and Refactoring","id":"state-migration-and-refactoring"},{"level":2,"text":"13. Troubleshooting","id":"13-troubleshooting"},{"level":3,"text":"Common Issues and Solutions","id":"common-issues-and-solutions"},{"level":3,"text":"Advanced Debugging","id":"advanced-debugging"},{"level":2,"text":"14. Maintenance","id":"14-maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Maintenance Tasks","id":"maintenance-tasks"},{"level":2,"text":"15. Integration Examples","id":"15-integration-examples"},{"level":3,"text":"CI/CD Pipeline Integration","id":"cicd-pipeline-integration"},{"level":3,"text":"GitLab CI Integration","id":"gitlab-ci-integration"},{"level":3,"text":"Jenkins Pipeline","id":"jenkins-pipeline"},{"level":3,"text":"Azure DevOps Pipeline","id":"azure-devops-pipeline"},{"level":3,"text":"Advanced Atlantis Configuration","id":"advanced-atlantis-configuration"},{"level":3,"text":"Kubernetes Operator Integration","id":"kubernetes-operator-integration"},{"level":3,"text":"Terraform with Vault Integration","id":"terraform-with-vault-integration"},{"level":2,"text":"16. Additional Resources","id":"16-additional-resources"}],"lastBuilt":"2025-09-29T06:17:44.349Z","metadataVersion":"2.0"},"category":{"key":"infrastructure-as-code","name":"Infrastructure as code","description":"Infrastructure as code tools and applications","icon":"🏗️","color":"#44475a"},"relatedGuides":[]},"__N_SSG":true}