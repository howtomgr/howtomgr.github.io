{"pageProps":{"category":{"key":"infrastructure","name":"Infrastructure","description":"DevOps and infrastructure automation tools","icon":"🏗️","color":"#44475a","keywords":["ansible","terraform","gitlab","jenkins","consul","etcd"]},"guides":[{"name":".claude","displayName":".claude","slug":".claude","description":"Repo for .claude","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/.claude","updatedAt":"2025-09-08T03:05:59Z","createdAt":"2025-09-08T03:05:48Z","readmeRaw":"## 👋 Welcome to .claude 🚀  \n\n.claude README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-claude\" class=\"mobile-header\">👋 Welcome to .claude 🚀  </h2>\n<p class=\"mobile-paragraph\">.claude README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:35.466Z"},{"name":"adguard-home","displayName":"Adguard Home","slug":"adguard-home","description":"Repo for adguard-home","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adguard-home","updatedAt":"2025-09-08T03:04:18Z","createdAt":"2025-09-08T03:04:08Z","readmeRaw":"## 👋 Welcome to adguard-home 🚀  \n\nadguard-home README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adguard-home\" class=\"mobile-header\">👋 Welcome to adguard-home 🚀  </h2>\n<p class=\"mobile-paragraph\">adguard-home README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:36.477Z"},{"name":"adminer","displayName":"Adminer","slug":"adminer","description":"Repo for adminer","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adminer","updatedAt":"2025-09-08T03:04:32Z","createdAt":"2025-09-08T03:04:22Z","readmeRaw":"## 👋 Welcome to adminer 🚀  \n\nadminer README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adminer\" class=\"mobile-header\">👋 Welcome to adminer 🚀  </h2>\n<p class=\"mobile-paragraph\">adminer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:36.353Z"},{"name":"ansible","displayName":"Ansible","slug":"ansible","description":"Repo for ansible","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ansible","updatedAt":"2025-09-08T03:04:45Z","createdAt":"2025-09-08T03:04:35Z","readmeRaw":"# Ansible Installation Guide\n\nAgentless automation platform for configuration management, application deployment, and task automation across multiple systems.\n\n## Prerequisites\n\n- Linux control machine (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- SSH access to target hosts\n- Python 3.8+ on control machine\n- Python 2.7+ or 3.5+ on target hosts\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Ansible\nsudo apt install -y ansible\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible\n\n# For CentOS Stream/RHEL 8+\nsudo dnf install -y ansible\n```\n\n### Using pip (Latest Version)\n```bash\n# Install pip if not available\nsudo apt install -y python3-pip\n\n# Install Ansible via pip\npip3 install --user ansible\n\n# Add to PATH\necho 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc\nsource ~/.bashrc\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n```\n\n### Using Docker\n```bash\n# Create Ansible Docker container\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest \\\n  ansible-playbook playbook.yml\n\n# Create alias for convenience\necho 'alias ansible-docker=\"docker run --rm -it -v $(pwd):/ansible -v ~/.ssh:/root/.ssh:ro --workdir /ansible ansible/ansible:latest\"' >> ~/.bashrc\n```\n\n## Configuration\n\n### Inventory Setup\n```bash\n# Create project structure\nmkdir -p ~/ansible-project/{inventories,playbooks,roles,group_vars,host_vars}\ncd ~/ansible-project\n\n# Create inventory file\ncat > inventories/production/hosts.yml <<EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web1:\n          ansible_host: 192.168.1.10\n          ansible_user: ubuntu\n        web2:\n          ansible_host: 192.168.1.11\n          ansible_user: ubuntu\n    dbservers:\n      hosts:\n        db1:\n          ansible_host: 192.168.1.20\n          ansible_user: ubuntu\n        db2:\n          ansible_host: 192.168.1.21\n          ansible_user: ubuntu\n    loadbalancers:\n      hosts:\n        lb1:\n          ansible_host: 192.168.1.30\n          ansible_user: ubuntu\n\nwebservers:\n  vars:\n    http_port: 80\n    max_clients: 200\n\ndbservers:\n  vars:\n    mysql_port: 3306\n    mysql_root_password: \"{{ vault_mysql_root_password }}\"\nEOF\n\n# Create ansible configuration\ncat > ansible.cfg <<EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ubuntu\nprivate_key_file = ~/.ssh/id_rsa\nhost_key_checking = False\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=60s\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nEOF\n```\n\n### Ansible Vault for Secrets\n```bash\n# Create encrypted vault file\nansible-vault create group_vars/all/vault.yml\n# Enter vault password and add:\n# vault_mysql_root_password: your_secure_password\n# vault_api_key: your_api_key\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file\nansible-vault view group_vars/all/vault.yml\n\n# Create vault password file\necho \"your_vault_password\" > ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Update ansible.cfg\necho \"vault_password_file = ~/.ansible_vault_pass\" >> ansible.cfg\n```\n\n## Playbooks\n\n### Basic System Setup Playbook\n```bash\ncat > playbooks/system-setup.yml <<EOF\n---\n- name: System Setup and Hardening\n  hosts: all\n  become: yes\n  vars:\n    packages:\n      - curl\n      - wget\n      - vim\n      - htop\n      - fail2ban\n      - ufw\n      \n  tasks:\n    - name: Update package cache\n      apt:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family == \"Debian\"\n    \n    - name: Update package cache (RHEL/CentOS)\n      yum:\n        update_cache: yes\n      when: ansible_os_family == \"RedHat\"\n    \n    - name: Install essential packages\n      package:\n        name: \"{{ packages }}\"\n        state: present\n    \n    - name: Create admin user\n      user:\n        name: admin\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n    \n    - name: Configure SSH\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: \"{{ item.regexp }}\"\n        line: \"{{ item.line }}\"\n        backup: yes\n      loop:\n        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }\n        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }\n        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }\n      notify: restart ssh\n    \n    - name: Configure UFW firewall\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n    \n    - name: Allow SSH through firewall\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n  \n  handlers:\n    - name: restart ssh\n      service:\n        name: \"{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}\"\n        state: restarted\nEOF\n```\n\n### Web Server Deployment Playbook\n```bash\ncat > playbooks/nginx-deployment.yml <<EOF\n---\n- name: Deploy NGINX Web Server\n  hosts: webservers\n  become: yes\n  vars:\n    domain_name: example.com\n    \n  tasks:\n    - name: Install NGINX\n      package:\n        name: nginx\n        state: present\n    \n    - name: Create document root\n      file:\n        path: \"/var/www/{{ domain_name }}/html\"\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n    \n    - name: Deploy website content\n      template:\n        src: templates/index.html.j2\n        dest: \"/var/www/{{ domain_name }}/html/index.html\"\n        owner: www-data\n        group: www-data\n        mode: '0644'\n      notify: reload nginx\n    \n    - name: Configure NGINX virtual host\n      template:\n        src: templates/nginx-vhost.conf.j2\n        dest: \"/etc/nginx/sites-available/{{ domain_name }}.conf\"\n        backup: yes\n      notify: reload nginx\n    \n    - name: Enable NGINX site\n      file:\n        src: \"/etc/nginx/sites-available/{{ domain_name }}.conf\"\n        dest: \"/etc/nginx/sites-enabled/{{ domain_name }}.conf\"\n        state: link\n      notify: reload nginx\n    \n    - name: Ensure NGINX is running\n      service:\n        name: nginx\n        state: started\n        enabled: yes\n    \n    - name: Configure firewall for web traffic\n      ufw:\n        rule: allow\n        port: \"{{ item }}\"\n        proto: tcp\n      loop:\n        - 80\n        - 443\n  \n  handlers:\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF\n```\n\n### Multi-Environment Deployment\n```bash\ncat > playbooks/application-deployment.yml <<EOF\n---\n- name: Deploy Application Stack\n  hosts: all\n  become: yes\n  vars:\n    app_name: myapp\n    app_version: \"{{ lookup('env', 'APP_VERSION') | default('latest') }}\"\n    environment: \"{{ ansible_environment | default('production') }}\"\n    \n  tasks:\n    - name: Create application user\n      user:\n        name: \"{{ app_name }}\"\n        system: yes\n        shell: /bin/false\n        home: \"/opt/{{ app_name }}\"\n        create_home: yes\n    \n    - name: Deploy application\n      unarchive:\n        src: \"https://github.com/company/{{ app_name }}/releases/download/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/opt/{{ app_name }}\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        remote_src: yes\n      notify: restart application\n    \n    - name: Install systemd service\n      template:\n        src: templates/app.service.j2\n        dest: \"/etc/systemd/system/{{ app_name }}.service\"\n      notify:\n        - daemon reload\n        - restart application\n    \n    - name: Start and enable application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: started\n        enabled: yes\n        daemon_reload: yes\n  \n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n    \n    - name: restart application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: restarted\nEOF\n```\n\n## Roles Development\n\n```bash\n# Create role structure\nansible-galaxy init roles/nginx\n\n# roles/nginx/tasks/main.yml\ncat > roles/nginx/tasks/main.yml <<EOF\n---\n- name: Install NGINX\n  package:\n    name: nginx\n    state: present\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure NGINX\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n  notify: reload nginx\n\n- name: Create virtual hosts\n  template:\n    src: vhost.conf.j2\n    dest: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n  loop: \"{{ nginx_vhosts }}\"\n  when: nginx_vhosts is defined\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    dest: \"/etc/nginx/sites-enabled/{{ item.name }}.conf\"\n    state: link\n  loop: \"{{ nginx_vhosts }}\"\n  when: nginx_vhosts is defined\n  notify: reload nginx\nEOF\n\n# Use role in playbook\ncat > playbooks/webserver.yml <<EOF\n---\n- name: Configure Web Servers\n  hosts: webservers\n  become: yes\n  roles:\n    - nginx\n  vars:\n    nginx_vhosts:\n      - name: example.com\n        root: /var/www/example.com/html\n        index: index.html\nEOF\n```\n\n## Verification\n\n```bash\n# Check Ansible version\nansible --version\n\n# Test connectivity to all hosts\nansible all -m ping\n\n# Check facts gathering\nansible all -m setup\n\n# Test specific host\nansible web1 -m command -a \"uptime\"\n\n# Run playbook in check mode (dry run)\nansible-playbook playbooks/system-setup.yml --check\n\n# Run playbook with specific inventory\nansible-playbook -i inventories/staging/hosts.yml playbooks/system-setup.yml\n\n# Run specific tasks\nansible-playbook playbooks/system-setup.yml --tags \"firewall\"\n\n# Skip specific tasks\nansible-playbook playbooks/system-setup.yml --skip-tags \"packages\"\n\n# Run on specific hosts\nansible-playbook playbooks/system-setup.yml --limit webservers\n\n# Verbose output\nansible-playbook playbooks/system-setup.yml -vvv\n```\n\n## Performance and Optimization\n\n```bash\n# Parallel execution\nansible-playbook playbooks/system-setup.yml --forks 10\n\n# Pipelining for faster execution\necho \"pipelining = True\" >> ansible.cfg\n\n# Fact caching\necho \"gathering = smart\" >> ansible.cfg\necho \"fact_caching = jsonfile\" >> ansible.cfg\necho \"fact_caching_connection = ~/.ansible/facts_cache\" >> ansible.cfg\necho \"fact_caching_timeout = 86400\" >> ansible.cfg\n\n# Strategy plugins\nansible-playbook playbooks/system-setup.yml --strategy free\n\n# Async tasks for long-running operations\n- name: Long running task\n  command: /usr/bin/long_running_command\n  async: 300\n  poll: 5\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.ansible.com/)\n- [Ansible Galaxy](https://galaxy.ansible.com/)\n- [Best Practices](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html)\n- [Ansible Examples](https://github.com/ansible/ansible-examples)\n- [Community Collections](https://docs.ansible.com/ansible/latest/collections/index.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"ansible-installation-guide\" class=\"mobile-header\">Ansible Installation Guide</h1>\n<p class=\"mobile-paragraph\">Agentless automation platform for configuration management, application deployment, and task automation across multiple systems.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux control machine (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">SSH access to target hosts</li>\n<li class=\"mobile-list-item\">Python 3.8+ on control machine</li>\n<li class=\"mobile-list-item\">Python 2.7+ or 3.5+ on target hosts</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Ansible\nsudo apt install -y ansible\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible\n\n# For CentOS Stream/RHEL 8+\nsudo dnf install -y ansible</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-pip-latest-version\" class=\"mobile-header\">Using pip (Latest Version)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install pip if not available\nsudo apt install -y python3-pip\n\n# Install Ansible via pip\npip3 install --user ansible\n\n# Add to PATH\necho &#039;export PATH=$PATH:~/.local/bin&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Ansible Docker container\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest \\\n  ansible-playbook playbook.yml\n\n# Create alias for convenience\necho &#039;alias ansible-docker=&quot;docker run --rm -it -v $(pwd):/ansible -v ~/.ssh:/root/.ssh:ro --workdir /ansible ansible/ansible:latest&quot;&#039; &gt;&gt; ~/.bashrc</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"inventory-setup\" class=\"mobile-header\">Inventory Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create project structure\nmkdir -p ~/ansible-project/{inventories,playbooks,roles,group_vars,host_vars}\ncd ~/ansible-project\n\n# Create inventory file\ncat &gt; inventories/production/hosts.yml &lt;&lt;EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web1:\n          ansible_host: 192.168.1.10\n          ansible_user: ubuntu\n        web2:\n          ansible_host: 192.168.1.11\n          ansible_user: ubuntu\n    dbservers:\n      hosts:\n        db1:\n          ansible_host: 192.168.1.20\n          ansible_user: ubuntu\n        db2:\n          ansible_host: 192.168.1.21\n          ansible_user: ubuntu\n    loadbalancers:\n      hosts:\n        lb1:\n          ansible_host: 192.168.1.30\n          ansible_user: ubuntu\n\nwebservers:\n  vars:\n    http_port: 80\n    max_clients: 200\n\ndbservers:\n  vars:\n    mysql_port: 3306\n    mysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\nEOF\n\n# Create ansible configuration\ncat &gt; ansible.cfg &lt;&lt;EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ubuntu\nprivate_key_file = ~/.ssh/id_rsa\nhost_key_checking = False\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=60s\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-vault-for-secrets\" class=\"mobile-header\">Ansible Vault for Secrets</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create encrypted vault file\nansible-vault create group_vars/all/vault.yml\n# Enter vault password and add:\n# vault_mysql_root_password: your_secure_password\n# vault_api_key: your_api_key\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file\nansible-vault view group_vars/all/vault.yml\n\n# Create vault password file\necho &quot;your_vault_password&quot; &gt; ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Update ansible.cfg\necho &quot;vault_password_file = ~/.ansible_vault_pass&quot; &gt;&gt; ansible.cfg</code></pre>\n      </div>\n    </div>\n<h2 id=\"playbooks\" class=\"mobile-header\">Playbooks</h2>\n<h3 id=\"basic-system-setup-playbook\" class=\"mobile-header\">Basic System Setup Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/system-setup.yml &lt;&lt;EOF\n---\n- name: System Setup and Hardening\n  hosts: all\n  become: yes\n  vars:\n    packages:\n      - curl\n      - wget\n      - vim\n      - htop\n      - fail2ban\n      - ufw\n      \n  tasks:\n    - name: Update package cache\n      apt:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family == &quot;Debian&quot;\n    \n    - name: Update package cache (RHEL/CentOS)\n      yum:\n        update_cache: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n    \n    - name: Install essential packages\n      package:\n        name: &quot;{{ packages }}&quot;\n        state: present\n    \n    - name: Create admin user\n      user:\n        name: admin\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n    \n    - name: Configure SSH\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: &quot;{{ item.regexp }}&quot;\n        line: &quot;{{ item.line }}&quot;\n        backup: yes\n      loop:\n        - { regexp: &#039;^#?PermitRootLogin&#039;, line: &#039;PermitRootLogin no&#039; }\n        - { regexp: &#039;^#?PasswordAuthentication&#039;, line: &#039;PasswordAuthentication no&#039; }\n        - { regexp: &#039;^#?X11Forwarding&#039;, line: &#039;X11Forwarding no&#039; }\n      notify: restart ssh\n    \n    - name: Configure UFW firewall\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n    \n    - name: Allow SSH through firewall\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n  \n  handlers:\n    - name: restart ssh\n      service:\n        name: &quot;{{ &#039;ssh&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sshd&#039; }}&quot;\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"web-server-deployment-playbook\" class=\"mobile-header\">Web Server Deployment Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/nginx-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy NGINX Web Server\n  hosts: webservers\n  become: yes\n  vars:\n    domain_name: example.com\n    \n  tasks:\n    - name: Install NGINX\n      package:\n        name: nginx\n        state: present\n    \n    - name: Create document root\n      file:\n        path: &quot;/var/www/{{ domain_name }}/html&quot;\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: &#039;0755&#039;\n    \n    - name: Deploy website content\n      template:\n        src: templates/index.html.j2\n        dest: &quot;/var/www/{{ domain_name }}/html/index.html&quot;\n        owner: www-data\n        group: www-data\n        mode: &#039;0644&#039;\n      notify: reload nginx\n    \n    - name: Configure NGINX virtual host\n      template:\n        src: templates/nginx-vhost.conf.j2\n        dest: &quot;/etc/nginx/sites-available/{{ domain_name }}.conf&quot;\n        backup: yes\n      notify: reload nginx\n    \n    - name: Enable NGINX site\n      file:\n        src: &quot;/etc/nginx/sites-available/{{ domain_name }}.conf&quot;\n        dest: &quot;/etc/nginx/sites-enabled/{{ domain_name }}.conf&quot;\n        state: link\n      notify: reload nginx\n    \n    - name: Ensure NGINX is running\n      service:\n        name: nginx\n        state: started\n        enabled: yes\n    \n    - name: Configure firewall for web traffic\n      ufw:\n        rule: allow\n        port: &quot;{{ item }}&quot;\n        proto: tcp\n      loop:\n        - 80\n        - 443\n  \n  handlers:\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"multi-environment-deployment\" class=\"mobile-header\">Multi-Environment Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/application-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy Application Stack\n  hosts: all\n  become: yes\n  vars:\n    app_name: myapp\n    app_version: &quot;{{ lookup(&#039;env&#039;, &#039;APP_VERSION&#039;) | default(&#039;latest&#039;) }}&quot;\n    environment: &quot;{{ ansible_environment | default(&#039;production&#039;) }}&quot;\n    \n  tasks:\n    - name: Create application user\n      user:\n        name: &quot;{{ app_name }}&quot;\n        system: yes\n        shell: /bin/false\n        home: &quot;/opt/{{ app_name }}&quot;\n        create_home: yes\n    \n    - name: Deploy application\n      unarchive:\n        src: &quot;https://github.com/company/{{ app_name }}/releases/download/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/opt/{{ app_name }}&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        remote_src: yes\n      notify: restart application\n    \n    - name: Install systemd service\n      template:\n        src: templates/app.service.j2\n        dest: &quot;/etc/systemd/system/{{ app_name }}.service&quot;\n      notify:\n        - daemon reload\n        - restart application\n    \n    - name: Start and enable application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: started\n        enabled: yes\n        daemon_reload: yes\n  \n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n    \n    - name: restart application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"roles-development\" class=\"mobile-header\">Roles Development</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create role structure\nansible-galaxy init roles/nginx\n\n# roles/nginx/tasks/main.yml\ncat &gt; roles/nginx/tasks/main.yml &lt;&lt;EOF\n---\n- name: Install NGINX\n  package:\n    name: nginx\n    state: present\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure NGINX\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n  notify: reload nginx\n\n- name: Create virtual hosts\n  template:\n    src: vhost.conf.j2\n    dest: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n  loop: &quot;{{ nginx_vhosts }}&quot;\n  when: nginx_vhosts is defined\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    dest: &quot;/etc/nginx/sites-enabled/{{ item.name }}.conf&quot;\n    state: link\n  loop: &quot;{{ nginx_vhosts }}&quot;\n  when: nginx_vhosts is defined\n  notify: reload nginx\nEOF\n\n# Use role in playbook\ncat &gt; playbooks/webserver.yml &lt;&lt;EOF\n---\n- name: Configure Web Servers\n  hosts: webservers\n  become: yes\n  roles:\n    - nginx\n  vars:\n    nginx_vhosts:\n      - name: example.com\n        root: /var/www/example.com/html\n        index: index.html\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Ansible version\nansible --version\n\n# Test connectivity to all hosts\nansible all -m ping\n\n# Check facts gathering\nansible all -m setup\n\n# Test specific host\nansible web1 -m command -a &quot;uptime&quot;\n\n# Run playbook in check mode (dry run)\nansible-playbook playbooks/system-setup.yml --check\n\n# Run playbook with specific inventory\nansible-playbook -i inventories/staging/hosts.yml playbooks/system-setup.yml\n\n# Run specific tasks\nansible-playbook playbooks/system-setup.yml --tags &quot;firewall&quot;\n\n# Skip specific tasks\nansible-playbook playbooks/system-setup.yml --skip-tags &quot;packages&quot;\n\n# Run on specific hosts\nansible-playbook playbooks/system-setup.yml --limit webservers\n\n# Verbose output\nansible-playbook playbooks/system-setup.yml -vvv</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-and-optimization\" class=\"mobile-header\">Performance and Optimization</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Parallel execution\nansible-playbook playbooks/system-setup.yml --forks 10\n\n# Pipelining for faster execution\necho &quot;pipelining = True&quot; &gt;&gt; ansible.cfg\n\n# Fact caching\necho &quot;gathering = smart&quot; &gt;&gt; ansible.cfg\necho &quot;fact_caching = jsonfile&quot; &gt;&gt; ansible.cfg\necho &quot;fact_caching_connection = ~/.ansible/facts_cache&quot; &gt;&gt; ansible.cfg\necho &quot;fact_caching_timeout = 86400&quot; &gt;&gt; ansible.cfg\n\n# Strategy plugins\nansible-playbook playbooks/system-setup.yml --strategy free\n\n# Async tasks for long-running operations\n- name: Long running task\n  command: /usr/bin/long_running_command\n  async: 300\n  poll: 5</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://galaxy.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Galaxy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/ansible/ansible-examples\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Examples</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/collections/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Collections</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"7 min","wordCount":1212,"lastBuilt":"2025-09-14T01:15:36.221Z"},{"name":"certbot","displayName":"Certbot","slug":"certbot","description":"Repo for certbot","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/certbot","updatedAt":"2025-09-08T03:05:44Z","createdAt":"2025-09-08T03:05:34Z","readmeRaw":"## 👋 Welcome to certbot 🚀  \n\nDescription  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-certbot\" class=\"mobile-header\">👋 Welcome to certbot 🚀  </h2>\n<p class=\"mobile-paragraph\">Description  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":14,"lastBuilt":"2025-09-14T01:15:35.595Z"},{"name":"code-server","displayName":"Code Server","slug":"code-server","description":"Repo for code-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/code-server","updatedAt":"2025-09-08T03:06:11Z","createdAt":"2025-09-08T03:06:01Z","readmeRaw":"## 👋 Welcome to code-server 🚀  \n\ncode-server README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-code-server\" class=\"mobile-header\">👋 Welcome to code-server 🚀  </h2>\n<p class=\"mobile-paragraph\">code-server README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:35.344Z"},{"name":"discourse","displayName":"Discourse","slug":"discourse","description":"Repo for discourse","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/discourse","updatedAt":"2025-09-08T03:06:31Z","createdAt":"2025-09-08T03:06:20Z","readmeRaw":"## 👋 Welcome to discourse 🚀  \n\ndiscourse README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-discourse\" class=\"mobile-header\">👋 Welcome to discourse 🚀  </h2>\n<p class=\"mobile-paragraph\">discourse README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:35.086Z"},{"name":"drupal","displayName":"Drupal","slug":"drupal","description":"Repo for drupal","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/drupal","updatedAt":"2025-09-08T03:06:48Z","createdAt":"2025-09-08T03:06:38Z","readmeRaw":"## 👋 Welcome to drupal 🚀  \n\ndrupal README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-drupal\" class=\"mobile-header\">👋 Welcome to drupal 🚀  </h2>\n<p class=\"mobile-paragraph\">drupal README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:34.797Z"},{"name":"elasticsearch","displayName":"Elasticsearch","slug":"elasticsearch","description":"Repo for elasticsearch","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/elasticsearch","updatedAt":"2025-09-08T03:07:02Z","createdAt":"2025-09-08T03:06:51Z","readmeRaw":"## 👋 Welcome to elasticsearch 🚀  \n\nelasticsearch README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-elasticsearch\" class=\"mobile-header\">👋 Welcome to elasticsearch 🚀  </h2>\n<p class=\"mobile-paragraph\">elasticsearch README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:34.648Z"},{"name":"exchange","displayName":"Exchange","slug":"exchange","description":"Repo for exchange","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/exchange","updatedAt":"2025-09-08T03:07:21Z","createdAt":"2023-08-28T03:47:46Z","readmeRaw":"# Exchange 2016 on Server 2016\n\n```text\n\nInstall-WindowsFeature NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS, ADLDS, Server-Media-Foundation\n\nhttps://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe\nhttps://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe\n\nEnable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools,IIS-ManagementScriptingTools,IIS-IIS6ManagementCompatibility,IIS-LegacySnapIn,IIS-ManagementConsole,IIS-Metabase,IIS-WebServerManagementTools,IIS-WebServerRole\n\n```\n","readmeHtml":"<h1 id=\"exchange-2016-on-server-2016\" class=\"mobile-header\">Exchange 2016 on Server 2016</h1>\n<div class=\"mobile-code-block\" data-language=\"text\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">text</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-text\">\nInstall-WindowsFeature NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS, ADLDS, Server-Media-Foundation\n\nhttps://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe\nhttps://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe\n\nEnable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools,IIS-ManagementScriptingTools,IIS-IIS6ManagementCompatibility,IIS-LegacySnapIn,IIS-ManagementConsole,IIS-Metabase,IIS-WebServerManagementTools,IIS-WebServerRole\n</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T01:15:34.374Z"},{"name":"gitea","displayName":"Gitea","slug":"gitea","description":"Repo for gitea","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitea","updatedAt":"2025-09-08T03:07:55Z","createdAt":"2023-08-28T03:47:56Z","readmeRaw":"# Gitea Install\n\n```bash\necho \"\n###### Debian Main Repos\ndeb http://ftp.us.debian.org/debian/ stable main contrib non-free\ndeb http://ftp.us.debian.org/debian/ stable-updates main contrib non-free\ndeb http://security.debian.org/ stable/updates main contrib non-free\n\" > /etc/apt/sources.list\n\napt update && apt upgrade -y\napt install -y curl wget apt-transport-https psmisc net-tools postfix dirmngr neovim git-core build-essential nginx-full nfs-common htop open-vm-tools\ndpkg-reconfigure postfix\ndpkg-reconfigure dash\n\nmkdir -p /mnt/backups /var/www/html/.well-known /etc/letsencrypt\necho \"\n10.0.254.1:/mnt/Volume_1/backups         /mnt/backups                 nfs defaults,rw 0 0\n10.0.254.1:/var/www/html/.well-known     /var/www/html/.well-known    nfs defaults,rw 0 0\n10.0.254.1:/etc/letsencrypt              /etc/letsencrypt             nfs defaults,rw 0 0\n\" >> /etc/fstab\nmount -a\n\nuseradd --system --shell /bin/bash --comment 'Git Version Control' --create-home --home-dir /home/git git\n\nmkdir -p /var/lib/gitea/{custom,data,indexers,public,log}\nchown git:git /var/lib/gitea/{data,indexers,log}\nchmod 750 /var/lib/gitea/{data,indexers,log}\nmkdir /etc/gitea\nchown root:git /etc/gitea\nchmod 770 /etc/gitea\nchmod 750 /etc/gitea\nchmod 644 /etc/gitea/app.ini\n```\n","readmeHtml":"<h1 id=\"gitea-install\" class=\"mobile-header\">Gitea Install</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">echo &quot;\n###### Debian Main Repos\ndeb http://ftp.us.debian.org/debian/ stable main contrib non-free\ndeb http://ftp.us.debian.org/debian/ stable-updates main contrib non-free\ndeb http://security.debian.org/ stable/updates main contrib non-free\n&quot; &gt; /etc/apt/sources.list\n\napt update &amp;&amp; apt upgrade -y\napt install -y curl wget apt-transport-https psmisc net-tools postfix dirmngr neovim git-core build-essential nginx-full nfs-common htop open-vm-tools\ndpkg-reconfigure postfix\ndpkg-reconfigure dash\n\nmkdir -p /mnt/backups /var/www/html/.well-known /etc/letsencrypt\necho &quot;\n10.0.254.1:/mnt/Volume_1/backups         /mnt/backups                 nfs defaults,rw 0 0\n10.0.254.1:/var/www/html/.well-known     /var/www/html/.well-known    nfs defaults,rw 0 0\n10.0.254.1:/etc/letsencrypt              /etc/letsencrypt             nfs defaults,rw 0 0\n&quot; &gt;&gt; /etc/fstab\nmount -a\n\nuseradd --system --shell /bin/bash --comment &#039;Git Version Control&#039; --create-home --home-dir /home/git git\n\nmkdir -p /var/lib/gitea/{custom,data,indexers,public,log}\nchown git:git /var/lib/gitea/{data,indexers,log}\nchmod 750 /var/lib/gitea/{data,indexers,log}\nmkdir /etc/gitea\nchown root:git /etc/gitea\nchmod 770 /etc/gitea\nchmod 750 /etc/gitea\nchmod 644 /etc/gitea/app.ini</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":125,"lastBuilt":"2025-09-14T01:15:33.992Z"},{"name":"gitlab","displayName":"Gitlab","slug":"gitlab","description":"Repo for gitlab","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitlab","updatedAt":"2025-09-08T03:08:07Z","createdAt":"2025-09-08T03:07:56Z","readmeRaw":"# GitLab Installation Guide\n\nComplete DevOps platform with Git repository management, CI/CD pipelines, issue tracking, and container registry.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- 8GB RAM minimum, 16GB+ recommended for production\n- 4 CPU cores minimum\n- 20GB+ available disk space\n- Domain name for external access\n\n## Installation\n\n### Using Omnibus Package (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Install dependencies\nsudo apt update\nsudo apt install -y ca-certificates curl openssh-server postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab\nsudo apt install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Install dependencies\nsudo yum install -y curl policycoreutils-python-utils openssh-server postfix\n\n# Enable SSH and Postfix\nsudo systemctl enable --now sshd postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo yum install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure\n```\n\n### Using Docker Compose\n```bash\n# Create GitLab directory\nmkdir -p ~/gitlab/{config,logs,data}\ncd ~/gitlab\n\n# Set proper ownership\nsudo chown -R 998:998 config logs data\n\n# Create docker-compose.yml\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  gitlab:\n    image: gitlab/gitlab-ee:latest\n    restart: unless-stopped\n    hostname: gitlab.example.com\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url 'https://gitlab.example.com'\n        \n        # GitLab configuration\n        gitlab_rails['gitlab_shell_ssh_port'] = 2222\n        gitlab_rails['time_zone'] = 'America/New_York'\n        gitlab_rails['gitlab_email_enabled'] = true\n        gitlab_rails['gitlab_email_from'] = 'gitlab@example.com'\n        gitlab_rails['gitlab_email_display_name'] = 'GitLab'\n        \n        # Database configuration\n        postgresql['shared_preload_libraries'] = 'pg_stat_statements'\n        postgresql['track_activity_query_size'] = 1024\n        \n        # Redis configuration\n        redis['save'] = '900 1 300 10 60 10000'\n        \n        # Backup configuration\n        gitlab_rails['backup_keep_time'] = 604800  # 7 days\n        \n        # Container Registry\n        registry_external_url 'https://registry.example.com'\n        gitlab_rails['registry_enabled'] = true\n        \n        # Monitoring\n        prometheus_monitoring['enable'] = true\n        grafana['enable'] = true\n        \n        # NGINX\n        nginx['listen_port'] = 80\n        nginx['listen_https'] = false\n        nginx['redirect_http_to_https'] = false\n        \n        # Let's Encrypt (disable for reverse proxy setup)\n        letsencrypt['enable'] = false\n        \n    ports:\n      - '80:80'\n      - '443:443'\n      - '2222:22'\n    volumes:\n      - './config:/etc/gitlab'\n      - './logs:/var/log/gitlab'\n      - './data:/var/opt/gitlab'\n    shm_size: '256m'\n    networks:\n      - gitlab\n\nnetworks:\n  gitlab:\n    driver: bridge\nEOF\n\n# Start GitLab\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f gitlab\n```\n\n## Configuration\n\n### Basic Configuration (/etc/gitlab/gitlab.rb)\n```bash\n# Edit GitLab configuration\nsudo nano /etc/gitlab/gitlab.rb\n\n# Key settings:\nexternal_url 'https://gitlab.example.com'\n\n# Email configuration\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.example.com\"\ngitlab_rails['smtp_port'] = 587\ngitlab_rails['smtp_user_name'] = \"smtp_username\"\ngitlab_rails['smtp_password'] = \"smtp_password\"\ngitlab_rails['smtp_domain'] = \"example.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = false\n\ngitlab_rails['gitlab_email_from'] = 'gitlab@example.com'\ngitlab_rails['gitlab_email_display_name'] = 'GitLab'\n\n# Backup configuration\ngitlab_rails['backup_keep_time'] = 604800  # 7 days\ngitlab_rails['backup_upload_connection'] = {\n  'provider' => 'AWS',\n  'aws_access_key_id' => 'your_access_key',\n  'aws_secret_access_key' => 'your_secret_key',\n  'region' => 'us-east-1'\n}\ngitlab_rails['backup_upload_remote_directory'] = 'gitlab-backups'\n\n# Container Registry\nregistry_external_url 'https://registry.example.com'\ngitlab_rails['registry_enabled'] = true\n\n# CI/CD settings\ngitlab_ci['gitlab_ci_all_broken_builds'] = true\ngitlab_ci['gitlab_ci_add_pusher'] = true\n\n# Monitoring\nprometheus_monitoring['enable'] = true\ngrafana['enable'] = true\ngrafana['admin_password'] = 'grafana_admin_password'\n\n# Apply configuration\nsudo gitlab-ctl reconfigure\n```\n\n### NGINX Reverse Proxy (External)\n```bash\n# Create NGINX configuration for GitLab reverse proxy\nsudo tee /etc/nginx/sites-available/gitlab > /dev/null <<EOF\nupstream gitlab-workhorse {\n  server unix:/var/opt/gitlab/gitlab-workhorse/sockets/socket;\n}\n\nserver {\n  listen 80;\n  server_name gitlab.example.com;\n  return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name gitlab.example.com;\n\n  ssl_certificate /etc/ssl/certs/gitlab.crt;\n  ssl_certificate_key /etc/ssl/private/gitlab.key;\n\n  location / {\n    proxy_pass http://gitlab-workhorse;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n    proxy_set_header X-Forwarded-Ssl on;\n    \n    # GitLab specific headers\n    proxy_set_header X-Forwarded-Host \\$http_host;\n    proxy_set_header X-Forwarded-Server \\$host;\n    \n    # WebSocket support\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \\$http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    \n    # Timeout settings\n    proxy_connect_timeout 60s;\n    proxy_send_timeout 60s;\n    proxy_read_timeout 60s;\n  }\n}\n\n# Container Registry\nserver {\n  listen 443 ssl http2;\n  server_name registry.example.com;\n\n  ssl_certificate /etc/ssl/certs/registry.crt;\n  ssl_certificate_key /etc/ssl/private/registry.key;\n\n  # disable any limits to avoid HTTP 413 for large image uploads\n  client_max_body_size 0;\n\n  # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)\n  chunked_transfer_encoding on;\n\n  location /v2/ {\n    proxy_pass http://localhost:5000;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n  }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n## GitLab Runner Setup\n\n### Install GitLab Runner\n```bash\n# Add GitLab Runner repository\ncurl -L \"https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh\" | sudo bash\n\n# Install GitLab Runner\nsudo apt install -y gitlab-runner\n\n# Or manual installation\nsudo curl -L --output /usr/local/bin/gitlab-runner \"https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64\"\nsudo chmod +x /usr/local/bin/gitlab-runner\nsudo useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash\nsudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner\nsudo gitlab-runner start\n```\n\n### Register Runner\n```bash\n# Register runner (get token from GitLab Admin → Runners)\nsudo gitlab-runner register \\\n  --url \"https://gitlab.example.com/\" \\\n  --registration-token \"REGISTRATION_TOKEN\" \\\n  --description \"docker-runner\" \\\n  --tag-list \"docker,aws\" \\\n  --run-untagged=\"true\" \\\n  --locked=\"false\" \\\n  --access-level=\"not_protected\" \\\n  --executor \"docker\" \\\n  --docker-image alpine:latest \\\n  --docker-privileged \\\n  --docker-volumes \"/certs/client\"\n\n# Configure runner for Docker-in-Docker\nsudo tee -a /etc/gitlab-runner/config.toml > /dev/null <<EOF\n[[runners]]\n  [runners.docker]\n    privileged = true\n    volumes = [\"/cache\", \"/certs/client\"]\n    disable_cache = false\n    shm_size = 0\nEOF\n\nsudo systemctl restart gitlab-runner\n```\n\n## Performance Optimization\n\n### Database Tuning\n```bash\n# PostgreSQL optimization for GitLab\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# PostgreSQL settings\npostgresql['shared_buffers'] = \"1GB\"\npostgresql['effective_cache_size'] = \"4GB\"\npostgresql['checkpoint_completion_target'] = 0.9\npostgresql['wal_buffers'] = \"16MB\"\npostgresql['default_statistics_target'] = 100\npostgresql['random_page_cost'] = 1.1\npostgresql['effective_io_concurrency'] = 200\npostgresql['work_mem'] = \"4MB\"\npostgresql['min_wal_size'] = \"1GB\"\npostgresql['max_wal_size'] = \"4GB\"\npostgresql['max_worker_processes'] = 8\npostgresql['max_parallel_workers_per_gather'] = 4\npostgresql['max_parallel_workers'] = 8\npostgresql['max_parallel_maintenance_workers'] = 4\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Redis Configuration\n```bash\n# Redis optimization\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Redis settings\nredis['maxmemory'] = \"1gb\"\nredis['maxmemory_policy'] = \"allkeys-lru\"\nredis['save'] = [\"900 1\", \"300 10\", \"60 10000\"]\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### GitLab Web Server Tuning\n```bash\n# Unicorn/Puma optimization\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Puma settings (GitLab 13.0+)\npuma['worker_processes'] = 4\npuma['min_threads'] = 4\npuma['max_threads'] = 4\n\n# Sidekiq settings\nsidekiq['max_concurrency'] = 25\nsidekiq['min_concurrency'] = 10\n\n# Gitaly settings\ngitaly['ruby_max_rss'] = 300000000  # 300MB\ngitaly['concurrency'] = [\n  {\n    'rpc' => \"/gitaly.SmartHTTPService/PostReceivePack\",\n    'max_per_repo' => 3\n  },\n  {\n    'rpc' => \"/gitaly.SSHService/SSHUploadPack\",\n    'max_per_repo' => 3\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Backup and Restore\n\n### Automated Backup\n```bash\n# Configure automatic backups\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Backup settings\ngitlab_rails['backup_keep_time'] = 604800  # 7 days\ngitlab_rails['backup_path'] = \"/var/opt/gitlab/backups\"\n\n# S3 backup upload\ngitlab_rails['backup_upload_connection'] = {\n  'provider' => 'AWS',\n  'region' => 'us-east-1',\n  'aws_access_key_id' => 'your_access_key',\n  'aws_secret_access_key' => 'your_secret_key'\n}\ngitlab_rails['backup_upload_remote_directory'] = 'gitlab-backups'\ngitlab_rails['backup_multipart_chunk_size'] = 104857600  # 100MB\ngitlab_rails['backup_encryption'] = 'AES256'\nEOF\n\nsudo gitlab-ctl reconfigure\n\n# Create backup script\nsudo tee /usr/local/bin/gitlab-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\n# Create GitLab backup\ngitlab-backup create STRATEGY=copy\n\n# Backup configuration files\ntar -czf /var/opt/gitlab/backups/$(date +%s_%Y_%m_%d)_gitlab_config_backup.tar.gz -C / etc/gitlab/gitlab-secrets.json etc/gitlab/gitlab.rb\n\necho \"GitLab backup completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/gitlab-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Manual Backup and Restore\n```bash\n# Create backup manually\nsudo gitlab-backup create\n\n# List backups\nsudo gitlab-backup list\n\n# Restore from backup\nsudo gitlab-ctl stop unicorn\nsudo gitlab-ctl stop puma\nsudo gitlab-ctl stop sidekiq\nsudo gitlab-backup restore BACKUP=timestamp_of_backup\nsudo gitlab-ctl restart\nsudo gitlab-rake gitlab:check SANITIZE=true\n```\n\n## SSL/TLS Configuration\n\n### Let's Encrypt Integration\n```bash\n# Configure Let's Encrypt in GitLab\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Let's Encrypt configuration\nletsencrypt['enable'] = true\nletsencrypt['contact_emails'] = ['admin@example.com']\nletsencrypt['auto_renew'] = true\nletsencrypt['auto_renew_hour'] = 0\nletsencrypt['auto_renew_minute'] = 0\nletsencrypt['auto_renew_day_of_month'] = \"*/4\"\n\n# Redirect HTTP to HTTPS\nnginx['redirect_http_to_https'] = true\nnginx['ssl_protocols'] = \"TLSv1.2 TLSv1.3\"\nnginx['ssl_prefer_server_ciphers'] = \"off\"\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Manual SSL Configuration\n```bash\n# Configure custom SSL certificates\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# SSL configuration\nnginx['ssl_certificate'] = \"/etc/ssl/certs/gitlab.crt\"\nnginx['ssl_certificate_key'] = \"/etc/ssl/private/gitlab.key\"\nnginx['ssl_dhparam'] = \"/etc/ssl/certs/dhparam.pem\"\n\n# Registry SSL\nregistry_nginx['ssl_certificate'] = \"/etc/ssl/certs/registry.crt\"\nregistry_nginx['ssl_certificate_key'] = \"/etc/ssl/private/registry.key\"\nEOF\n\n# Generate dhparam\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\nsudo gitlab-ctl reconfigure\n```\n\n## CI/CD Configuration\n\n### Enable Container Registry\n```bash\n# Configure container registry\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Container Registry\nregistry_external_url 'https://registry.example.com'\ngitlab_rails['registry_enabled'] = true\nregistry['enable'] = true\nregistry['username'] = \"registry\"\nregistry['uid'] = 996\nregistry['gid'] = 996\nregistry['dir'] = \"/var/opt/gitlab/registry\"\nregistry['registry_http_addr'] = \"localhost:5000\"\nregistry['debug_addr'] = \"localhost:5001\"\nregistry['log_directory'] = \"/var/log/gitlab/registry\"\nregistry['log_level'] = \"info\"\nregistry['rootcertbundle'] = \"/opt/gitlab/embedded/ssl/certs/cacert.pem\"\nregistry['health_storagedriver_enabled'] = true\nregistry['middleware'] = {\n  'redirect' => [\n    {'disable' => false}\n  ]\n}\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### GitLab Pages Setup\n```bash\n# Enable GitLab Pages\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# GitLab Pages configuration\npages_external_url \"https://pages.example.com\"\ngitlab_pages['enable'] = true\ngitlab_pages['dir'] = \"/var/opt/gitlab/gitlab-pages\"\ngitlab_pages['log_directory'] = \"/var/log/gitlab/gitlab-pages\"\ngitlab_pages['artifacts_server'] = true\ngitlab_pages['artifacts_server_url'] = \"https://gitlab.example.com/api/v4\"\ngitlab_pages['access_control'] = false\ngitlab_pages['use_legacy_storage'] = false\ngitlab_pages['inplace_chroot'] = true\ngitlab_pages['propagate_correlation_id'] = false\ngitlab_pages['log_format'] = \"json\"\ngitlab_pages['log_verbose'] = false\ngitlab_pages['redirect_http'] = true\npages_nginx['enable'] = true\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Monitoring and Maintenance\n\n### GitLab Monitoring Stack\n```bash\n# Access built-in monitoring\n# Prometheus: https://gitlab.example.com/-/admin/monitoring\n# Grafana: https://gitlab.example.com/-/grafana\n\n# Configure external Prometheus\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Prometheus configuration\nprometheus['listen_address'] = 'localhost:9090'\nprometheus['scrape_configs'] = [\n  {\n    'job_name' => 'gitlab-workhorse',\n    'static_configs' => [\n      { 'targets' => ['localhost:9229'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-unicorn',\n    'static_configs' => [\n      { 'targets' => ['localhost:8080'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-sidekiq',\n    'static_configs' => [\n      { 'targets' => ['localhost:8082'] }\n    ]\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Maintenance Commands\n```bash\n# Check GitLab status\nsudo gitlab-rake gitlab:check\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Database maintenance\nsudo gitlab-rake db:migrate\nsudo gitlab-rake db:check\nsudo gitlab-rake gitlab:cleanup:sessions\nsudo gitlab-rake gitlab:cleanup:refs\n\n# Cache clearing\nsudo gitlab-rake cache:clear\nsudo gitlab-rake assets:clean\n\n# Check disk usage\nsudo du -sh /var/opt/gitlab/\nsudo gitlab-rake gitlab:artifacts:check\nsudo gitlab-rake gitlab:lfs:check\n\n# Update GitLab\nsudo apt update && sudo apt upgrade gitlab-ee  # Package installation\nsudo gitlab-ctl restart                        # Docker\n```\n\n## Verification\n\n```bash\n# Check GitLab status\nsudo gitlab-ctl status\nsudo gitlab-rake gitlab:check\n\n# Test web interface\ncurl -I https://gitlab.example.com\ncurl -I https://registry.example.com\n\n# Check service logs\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\nsudo gitlab-ctl tail postgresql\nsudo gitlab-ctl tail redis\n\n# Check runner status\nsudo gitlab-runner verify\nsudo gitlab-runner list\n\n# Test container registry\ndocker login registry.example.com\ndocker pull alpine\ndocker tag alpine registry.example.com/group/project:latest\ndocker push registry.example.com/group/project:latest\n\n# Check GitLab Runner\nsudo systemctl status gitlab-runner\ngitlab-runner list\n\n# Performance check\nsudo gitlab-rake gitlab:env:info\nsudo gitlab-rake gitlab:check\n```\n\n## Troubleshooting\n\n```bash\n# Check all GitLab services\nsudo gitlab-ctl status\n\n# Restart specific service\nsudo gitlab-ctl restart nginx\nsudo gitlab-ctl restart postgresql\n\n# Check configuration\nsudo gitlab-rake gitlab:check\nsudo gitlab-ctl show-config\n\n# Debug mode\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\n\n# Check disk space\ndf -h /var/opt/gitlab/\nsudo du -sh /var/opt/gitlab/git-data/\n\n# Memory usage\nfree -h\nsudo gitlab-ctl status\n\n# Database connection issues\nsudo gitlab-rake db:migrate:status\nsudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production\n\n# Reset root password\nsudo gitlab-rake \"gitlab:password:reset[root]\"\n\n# Check GitLab secrets\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Reconfigure if issues persist\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.gitlab.com/)\n- [GitLab Admin Docs](https://docs.gitlab.com/ee/administration/)\n- [GitLab Runner Documentation](https://docs.gitlab.com/runner/)\n- [Container Registry Guide](https://docs.gitlab.com/ee/administration/packages/container_registry.html)\n- [GitLab Community Forum](https://forum.gitlab.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"gitlab-installation-guide\" class=\"mobile-header\">GitLab Installation Guide</h1>\n<p class=\"mobile-paragraph\">Complete DevOps platform with Git repository management, CI/CD pipelines, issue tracking, and container registry.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">8GB RAM minimum, 16GB+ recommended for production</li>\n<li class=\"mobile-list-item\">4 CPU cores minimum</li>\n<li class=\"mobile-list-item\">20GB+ available disk space</li>\n<li class=\"mobile-list-item\">Domain name for external access</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-omnibus-package-recommended\" class=\"mobile-header\">Using Omnibus Package (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo apt update\nsudo apt install -y ca-certificates curl openssh-server postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab\nsudo apt install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo yum install -y curl policycoreutils-python-utils openssh-server postfix\n\n# Enable SSH and Postfix\nsudo systemctl enable --now sshd postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo yum install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker-compose\" class=\"mobile-header\">Using Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create GitLab directory\nmkdir -p ~/gitlab/{config,logs,data}\ncd ~/gitlab\n\n# Set proper ownership\nsudo chown -R 998:998 config logs data\n\n# Create docker-compose.yml\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  gitlab:\n    image: gitlab/gitlab-ee:latest\n    restart: unless-stopped\n    hostname: gitlab.example.com\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url &#039;https://gitlab.example.com&#039;\n        \n        # GitLab configuration\n        gitlab_rails[&#039;gitlab_shell_ssh_port&#039;] = 2222\n        gitlab_rails[&#039;time_zone&#039;] = &#039;America/New_York&#039;\n        gitlab_rails[&#039;gitlab_email_enabled&#039;] = true\n        gitlab_rails[&#039;gitlab_email_from&#039;] = &#039;gitlab@example.com&#039;\n        gitlab_rails[&#039;gitlab_email_display_name&#039;] = &#039;GitLab&#039;\n        \n        # Database configuration\n        postgresql[&#039;shared_preload_libraries&#039;] = &#039;pg_stat_statements&#039;\n        postgresql[&#039;track_activity_query_size&#039;] = 1024\n        \n        # Redis configuration\n        redis[&#039;save&#039;] = &#039;900 1 300 10 60 10000&#039;\n        \n        # Backup configuration\n        gitlab_rails[&#039;backup_keep_time&#039;] = 604800  # 7 days\n        \n        # Container Registry\n        registry_external_url &#039;https://registry.example.com&#039;\n        gitlab_rails[&#039;registry_enabled&#039;] = true\n        \n        # Monitoring\n        prometheus_monitoring[&#039;enable&#039;] = true\n        grafana[&#039;enable&#039;] = true\n        \n        # NGINX\n        nginx[&#039;listen_port&#039;] = 80\n        nginx[&#039;listen_https&#039;] = false\n        nginx[&#039;redirect_http_to_https&#039;] = false\n        \n        # Let&#039;s Encrypt (disable for reverse proxy setup)\n        letsencrypt[&#039;enable&#039;] = false\n        \n    ports:\n      - &#039;80:80&#039;\n      - &#039;443:443&#039;\n      - &#039;2222:22&#039;\n    volumes:\n      - &#039;./config:/etc/gitlab&#039;\n      - &#039;./logs:/var/log/gitlab&#039;\n      - &#039;./data:/var/opt/gitlab&#039;\n    shm_size: &#039;256m&#039;\n    networks:\n      - gitlab\n\nnetworks:\n  gitlab:\n    driver: bridge\nEOF\n\n# Start GitLab\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f gitlab</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration-etcgitlabgitlabrb\" class=\"mobile-header\">Basic Configuration (/etc/gitlab/gitlab.rb)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit GitLab configuration\nsudo nano /etc/gitlab/gitlab.rb\n\n# Key settings:\nexternal_url &#039;https://gitlab.example.com&#039;\n\n# Email configuration\ngitlab_rails[&#039;smtp_enable&#039;] = true\ngitlab_rails[&#039;smtp_address&#039;] = &quot;smtp.example.com&quot;\ngitlab_rails[&#039;smtp_port&#039;] = 587\ngitlab_rails[&#039;smtp_user_name&#039;] = &quot;smtp_username&quot;\ngitlab_rails[&#039;smtp_password&#039;] = &quot;smtp_password&quot;\ngitlab_rails[&#039;smtp_domain&#039;] = &quot;example.com&quot;\ngitlab_rails[&#039;smtp_authentication&#039;] = &quot;login&quot;\ngitlab_rails[&#039;smtp_enable_starttls_auto&#039;] = true\ngitlab_rails[&#039;smtp_tls&#039;] = false\n\ngitlab_rails[&#039;gitlab_email_from&#039;] = &#039;gitlab@example.com&#039;\ngitlab_rails[&#039;gitlab_email_display_name&#039;] = &#039;GitLab&#039;\n\n# Backup configuration\ngitlab_rails[&#039;backup_keep_time&#039;] = 604800  # 7 days\ngitlab_rails[&#039;backup_upload_connection&#039;] = {\n  &#039;provider&#039; =&gt; &#039;AWS&#039;,\n  &#039;aws_access_key_id&#039; =&gt; &#039;your_access_key&#039;,\n  &#039;aws_secret_access_key&#039; =&gt; &#039;your_secret_key&#039;,\n  &#039;region&#039; =&gt; &#039;us-east-1&#039;\n}\ngitlab_rails[&#039;backup_upload_remote_directory&#039;] = &#039;gitlab-backups&#039;\n\n# Container Registry\nregistry_external_url &#039;https://registry.example.com&#039;\ngitlab_rails[&#039;registry_enabled&#039;] = true\n\n# CI/CD settings\ngitlab_ci[&#039;gitlab_ci_all_broken_builds&#039;] = true\ngitlab_ci[&#039;gitlab_ci_add_pusher&#039;] = true\n\n# Monitoring\nprometheus_monitoring[&#039;enable&#039;] = true\ngrafana[&#039;enable&#039;] = true\ngrafana[&#039;admin_password&#039;] = &#039;grafana_admin_password&#039;\n\n# Apply configuration\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy-external\" class=\"mobile-header\">NGINX Reverse Proxy (External)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration for GitLab reverse proxy\nsudo tee /etc/nginx/sites-available/gitlab &gt; /dev/null &lt;&lt;EOF\nupstream gitlab-workhorse {\n  server unix:/var/opt/gitlab/gitlab-workhorse/sockets/socket;\n}\n\nserver {\n  listen 80;\n  server_name gitlab.example.com;\n  return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name gitlab.example.com;\n\n  ssl_certificate /etc/ssl/certs/gitlab.crt;\n  ssl_certificate_key /etc/ssl/private/gitlab.key;\n\n  location / {\n    proxy_pass http://gitlab-workhorse;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n    proxy_set_header X-Forwarded-Ssl on;\n    \n    # GitLab specific headers\n    proxy_set_header X-Forwarded-Host \\$http_host;\n    proxy_set_header X-Forwarded-Server \\$host;\n    \n    # WebSocket support\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \\$http_upgrade;\n    proxy_set_header Connection &quot;upgrade&quot;;\n    \n    # Timeout settings\n    proxy_connect_timeout 60s;\n    proxy_send_timeout 60s;\n    proxy_read_timeout 60s;\n  }\n}\n\n# Container Registry\nserver {\n  listen 443 ssl http2;\n  server_name registry.example.com;\n\n  ssl_certificate /etc/ssl/certs/registry.crt;\n  ssl_certificate_key /etc/ssl/private/registry.key;\n\n  # disable any limits to avoid HTTP 413 for large image uploads\n  client_max_body_size 0;\n\n  # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)\n  chunked_transfer_encoding on;\n\n  location /v2/ {\n    proxy_pass http://localhost:5000;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n  }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"gitlab-runner-setup\" class=\"mobile-header\">GitLab Runner Setup</h2>\n<h3 id=\"install-gitlab-runner\" class=\"mobile-header\">Install GitLab Runner</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add GitLab Runner repository\ncurl -L &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&quot; | sudo bash\n\n# Install GitLab Runner\nsudo apt install -y gitlab-runner\n\n# Or manual installation\nsudo curl -L --output /usr/local/bin/gitlab-runner &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64&quot;\nsudo chmod +x /usr/local/bin/gitlab-runner\nsudo useradd --comment &#039;GitLab Runner&#039; --create-home gitlab-runner --shell /bin/bash\nsudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner\nsudo gitlab-runner start</code></pre>\n      </div>\n    </div>\n<h3 id=\"register-runner\" class=\"mobile-header\">Register Runner</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Register runner (get token from GitLab Admin → Runners)\nsudo gitlab-runner register \\\n  --url &quot;https://gitlab.example.com/&quot; \\\n  --registration-token &quot;REGISTRATION_TOKEN&quot; \\\n  --description &quot;docker-runner&quot; \\\n  --tag-list &quot;docker,aws&quot; \\\n  --run-untagged=&quot;true&quot; \\\n  --locked=&quot;false&quot; \\\n  --access-level=&quot;not_protected&quot; \\\n  --executor &quot;docker&quot; \\\n  --docker-image alpine:latest \\\n  --docker-privileged \\\n  --docker-volumes &quot;/certs/client&quot;\n\n# Configure runner for Docker-in-Docker\nsudo tee -a /etc/gitlab-runner/config.toml &gt; /dev/null &lt;&lt;EOF\n[[runners]]\n  [runners.docker]\n    privileged = true\n    volumes = [&quot;/cache&quot;, &quot;/certs/client&quot;]\n    disable_cache = false\n    shm_size = 0\nEOF\n\nsudo systemctl restart gitlab-runner</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"database-tuning\" class=\"mobile-header\">Database Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># PostgreSQL optimization for GitLab\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# PostgreSQL settings\npostgresql[&#039;shared_buffers&#039;] = &quot;1GB&quot;\npostgresql[&#039;effective_cache_size&#039;] = &quot;4GB&quot;\npostgresql[&#039;checkpoint_completion_target&#039;] = 0.9\npostgresql[&#039;wal_buffers&#039;] = &quot;16MB&quot;\npostgresql[&#039;default_statistics_target&#039;] = 100\npostgresql[&#039;random_page_cost&#039;] = 1.1\npostgresql[&#039;effective_io_concurrency&#039;] = 200\npostgresql[&#039;work_mem&#039;] = &quot;4MB&quot;\npostgresql[&#039;min_wal_size&#039;] = &quot;1GB&quot;\npostgresql[&#039;max_wal_size&#039;] = &quot;4GB&quot;\npostgresql[&#039;max_worker_processes&#039;] = 8\npostgresql[&#039;max_parallel_workers_per_gather&#039;] = 4\npostgresql[&#039;max_parallel_workers&#039;] = 8\npostgresql[&#039;max_parallel_maintenance_workers&#039;] = 4\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-configuration\" class=\"mobile-header\">Redis Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Redis optimization\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Redis settings\nredis[&#039;maxmemory&#039;] = &quot;1gb&quot;\nredis[&#039;maxmemory_policy&#039;] = &quot;allkeys-lru&quot;\nredis[&#039;save&#039;] = [&quot;900 1&quot;, &quot;300 10&quot;, &quot;60 10000&quot;]\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-web-server-tuning\" class=\"mobile-header\">GitLab Web Server Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Unicorn/Puma optimization\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Puma settings (GitLab 13.0+)\npuma[&#039;worker_processes&#039;] = 4\npuma[&#039;min_threads&#039;] = 4\npuma[&#039;max_threads&#039;] = 4\n\n# Sidekiq settings\nsidekiq[&#039;max_concurrency&#039;] = 25\nsidekiq[&#039;min_concurrency&#039;] = 10\n\n# Gitaly settings\ngitaly[&#039;ruby_max_rss&#039;] = 300000000  # 300MB\ngitaly[&#039;concurrency&#039;] = [\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SmartHTTPService/PostReceivePack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  },\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SSHService/SSHUploadPack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"automated-backup\" class=\"mobile-header\">Automated Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure automatic backups\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Backup settings\ngitlab_rails[&#039;backup_keep_time&#039;] = 604800  # 7 days\ngitlab_rails[&#039;backup_path&#039;] = &quot;/var/opt/gitlab/backups&quot;\n\n# S3 backup upload\ngitlab_rails[&#039;backup_upload_connection&#039;] = {\n  &#039;provider&#039; =&gt; &#039;AWS&#039;,\n  &#039;region&#039; =&gt; &#039;us-east-1&#039;,\n  &#039;aws_access_key_id&#039; =&gt; &#039;your_access_key&#039;,\n  &#039;aws_secret_access_key&#039; =&gt; &#039;your_secret_key&#039;\n}\ngitlab_rails[&#039;backup_upload_remote_directory&#039;] = &#039;gitlab-backups&#039;\ngitlab_rails[&#039;backup_multipart_chunk_size&#039;] = 104857600  # 100MB\ngitlab_rails[&#039;backup_encryption&#039;] = &#039;AES256&#039;\nEOF\n\nsudo gitlab-ctl reconfigure\n\n# Create backup script\nsudo tee /usr/local/bin/gitlab-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n# Create GitLab backup\ngitlab-backup create STRATEGY=copy\n\n# Backup configuration files\ntar -czf /var/opt/gitlab/backups/$(date +%s_%Y_%m_%d)_gitlab_config_backup.tar.gz -C / etc/gitlab/gitlab-secrets.json etc/gitlab/gitlab.rb\n\necho &quot;GitLab backup completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/gitlab-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-backup-and-restore\" class=\"mobile-header\">Manual Backup and Restore</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup manually\nsudo gitlab-backup create\n\n# List backups\nsudo gitlab-backup list\n\n# Restore from backup\nsudo gitlab-ctl stop unicorn\nsudo gitlab-ctl stop puma\nsudo gitlab-ctl stop sidekiq\nsudo gitlab-backup restore BACKUP=timestamp_of_backup\nsudo gitlab-ctl restart\nsudo gitlab-rake gitlab:check SANITIZE=true</code></pre>\n      </div>\n    </div>\n<h2 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h2>\n<h3 id=\"lets-encrypt-integration\" class=\"mobile-header\">Let's Encrypt Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Let&#039;s Encrypt in GitLab\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Let&#039;s Encrypt configuration\nletsencrypt[&#039;enable&#039;] = true\nletsencrypt[&#039;contact_emails&#039;] = [&#039;admin@example.com&#039;]\nletsencrypt[&#039;auto_renew&#039;] = true\nletsencrypt[&#039;auto_renew_hour&#039;] = 0\nletsencrypt[&#039;auto_renew_minute&#039;] = 0\nletsencrypt[&#039;auto_renew_day_of_month&#039;] = &quot;*/4&quot;\n\n# Redirect HTTP to HTTPS\nnginx[&#039;redirect_http_to_https&#039;] = true\nnginx[&#039;ssl_protocols&#039;] = &quot;TLSv1.2 TLSv1.3&quot;\nnginx[&#039;ssl_prefer_server_ciphers&#039;] = &quot;off&quot;\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-ssl-configuration\" class=\"mobile-header\">Manual SSL Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure custom SSL certificates\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# SSL configuration\nnginx[&#039;ssl_certificate&#039;] = &quot;/etc/ssl/certs/gitlab.crt&quot;\nnginx[&#039;ssl_certificate_key&#039;] = &quot;/etc/ssl/private/gitlab.key&quot;\nnginx[&#039;ssl_dhparam&#039;] = &quot;/etc/ssl/certs/dhparam.pem&quot;\n\n# Registry SSL\nregistry_nginx[&#039;ssl_certificate&#039;] = &quot;/etc/ssl/certs/registry.crt&quot;\nregistry_nginx[&#039;ssl_certificate_key&#039;] = &quot;/etc/ssl/private/registry.key&quot;\nEOF\n\n# Generate dhparam\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-configuration\" class=\"mobile-header\">CI/CD Configuration</h2>\n<h3 id=\"enable-container-registry\" class=\"mobile-header\">Enable Container Registry</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure container registry\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Container Registry\nregistry_external_url &#039;https://registry.example.com&#039;\ngitlab_rails[&#039;registry_enabled&#039;] = true\nregistry[&#039;enable&#039;] = true\nregistry[&#039;username&#039;] = &quot;registry&quot;\nregistry[&#039;uid&#039;] = 996\nregistry[&#039;gid&#039;] = 996\nregistry[&#039;dir&#039;] = &quot;/var/opt/gitlab/registry&quot;\nregistry[&#039;registry_http_addr&#039;] = &quot;localhost:5000&quot;\nregistry[&#039;debug_addr&#039;] = &quot;localhost:5001&quot;\nregistry[&#039;log_directory&#039;] = &quot;/var/log/gitlab/registry&quot;\nregistry[&#039;log_level&#039;] = &quot;info&quot;\nregistry[&#039;rootcertbundle&#039;] = &quot;/opt/gitlab/embedded/ssl/certs/cacert.pem&quot;\nregistry[&#039;health_storagedriver_enabled&#039;] = true\nregistry[&#039;middleware&#039;] = {\n  &#039;redirect&#039; =&gt; [\n    {&#039;disable&#039; =&gt; false}\n  ]\n}\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-pages-setup\" class=\"mobile-header\">GitLab Pages Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable GitLab Pages\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# GitLab Pages configuration\npages_external_url &quot;https://pages.example.com&quot;\ngitlab_pages[&#039;enable&#039;] = true\ngitlab_pages[&#039;dir&#039;] = &quot;/var/opt/gitlab/gitlab-pages&quot;\ngitlab_pages[&#039;log_directory&#039;] = &quot;/var/log/gitlab/gitlab-pages&quot;\ngitlab_pages[&#039;artifacts_server&#039;] = true\ngitlab_pages[&#039;artifacts_server_url&#039;] = &quot;https://gitlab.example.com/api/v4&quot;\ngitlab_pages[&#039;access_control&#039;] = false\ngitlab_pages[&#039;use_legacy_storage&#039;] = false\ngitlab_pages[&#039;inplace_chroot&#039;] = true\ngitlab_pages[&#039;propagate_correlation_id&#039;] = false\ngitlab_pages[&#039;log_format&#039;] = &quot;json&quot;\ngitlab_pages[&#039;log_verbose&#039;] = false\ngitlab_pages[&#039;redirect_http&#039;] = true\npages_nginx[&#039;enable&#039;] = true\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-maintenance\" class=\"mobile-header\">Monitoring and Maintenance</h2>\n<h3 id=\"gitlab-monitoring-stack\" class=\"mobile-header\">GitLab Monitoring Stack</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Access built-in monitoring\n# Prometheus: https://gitlab.example.com/-/admin/monitoring\n# Grafana: https://gitlab.example.com/-/grafana\n\n# Configure external Prometheus\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Prometheus configuration\nprometheus[&#039;listen_address&#039;] = &#039;localhost:9090&#039;\nprometheus[&#039;scrape_configs&#039;] = [\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-workhorse&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:9229&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-unicorn&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8080&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-sidekiq&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8082&#039;] }\n    ]\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-commands\" class=\"mobile-header\">Maintenance Commands</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check GitLab status\nsudo gitlab-rake gitlab:check\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Database maintenance\nsudo gitlab-rake db:migrate\nsudo gitlab-rake db:check\nsudo gitlab-rake gitlab:cleanup:sessions\nsudo gitlab-rake gitlab:cleanup:refs\n\n# Cache clearing\nsudo gitlab-rake cache:clear\nsudo gitlab-rake assets:clean\n\n# Check disk usage\nsudo du -sh /var/opt/gitlab/\nsudo gitlab-rake gitlab:artifacts:check\nsudo gitlab-rake gitlab:lfs:check\n\n# Update GitLab\nsudo apt update &amp;&amp; sudo apt upgrade gitlab-ee  # Package installation\nsudo gitlab-ctl restart                        # Docker</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check GitLab status\nsudo gitlab-ctl status\nsudo gitlab-rake gitlab:check\n\n# Test web interface\ncurl -I https://gitlab.example.com\ncurl -I https://registry.example.com\n\n# Check service logs\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\nsudo gitlab-ctl tail postgresql\nsudo gitlab-ctl tail redis\n\n# Check runner status\nsudo gitlab-runner verify\nsudo gitlab-runner list\n\n# Test container registry\ndocker login registry.example.com\ndocker pull alpine\ndocker tag alpine registry.example.com/group/project:latest\ndocker push registry.example.com/group/project:latest\n\n# Check GitLab Runner\nsudo systemctl status gitlab-runner\ngitlab-runner list\n\n# Performance check\nsudo gitlab-rake gitlab:env:info\nsudo gitlab-rake gitlab:check</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check all GitLab services\nsudo gitlab-ctl status\n\n# Restart specific service\nsudo gitlab-ctl restart nginx\nsudo gitlab-ctl restart postgresql\n\n# Check configuration\nsudo gitlab-rake gitlab:check\nsudo gitlab-ctl show-config\n\n# Debug mode\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\n\n# Check disk space\ndf -h /var/opt/gitlab/\nsudo du -sh /var/opt/gitlab/git-data/\n\n# Memory usage\nfree -h\nsudo gitlab-ctl status\n\n# Database connection issues\nsudo gitlab-rake db:migrate:status\nsudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production\n\n# Reset root password\nsudo gitlab-rake &quot;gitlab:password:reset[root]&quot;\n\n# Check GitLab secrets\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Reconfigure if issues persist\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/administration/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Admin Docs</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/runner/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Runner Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/administration/packages/container_registry.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Container Registry Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forum.gitlab.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"9 min","wordCount":1745,"lastBuilt":"2025-09-14T01:15:33.860Z"},{"name":"home-assistant","displayName":"Home Assistant","slug":"home-assistant","description":"Repo for home-assistant","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/home-assistant","updatedAt":"2025-09-08T03:08:39Z","createdAt":"2023-08-28T03:48:06Z","readmeRaw":"# Home-Assistant on CentOS 7\n\n```bash\n# Optionally add user\n#adduser --system --shell=/bin/bash --home=/var/lib/homeassistant  homeassistant\n\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/rpm-packages.txt -O /tmp/hass-rpms.txt\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/requirements-el7.txt -O /tmp/hass-pips.txt\n\nyum install -y $(cat /tmp/hass-rpms.txt)\n\n#Optional switch to user and clone repo\n#su - homeassistant\n#git clone https://github.com/casjay-devices/home-assistant /var/lib/homeassistant/.homeassistant\n\ncd /var/lib/homeassistant && python3 -m venv . && source ./bin/activate\n\n/var/lib/homeassistant/bin/python3 -m pip install --upgrade pip\n/var/lib/homeassistant/bin/python3 -m pip install wheel\n/var/lib/homeassistant/bin/python3 -m pip install python-openzwave\n/var/lib/homeassistant/bin/python3 -m pip install homeassistant \n/var/lib/homeassistant/bin/python3 -m pip install -r /tmp/hass-pips.txt\nsystemctl daemon-reload && systemctl enable hass.service\n\necho 'SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"0658\", ATTRS{idProduct}==\"0200\", SYMLINK+=\"zwave\"' >> /etc/udev/rules.d/99-usb-serial.rules\necho 'SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"067b\", ATTRS{idProduct}==\"2303\", SYMLINK+=\"gps\"' >> /etc/udev/rules.d/99-usb-serial.rules\n\ndeactivate\n```\n","readmeHtml":"<h1 id=\"home-assistant-on-centos-7\" class=\"mobile-header\">Home-Assistant on CentOS 7</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optionally add user\n#adduser --system --shell=/bin/bash --home=/var/lib/homeassistant  homeassistant\n\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/rpm-packages.txt -O /tmp/hass-rpms.txt\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/requirements-el7.txt -O /tmp/hass-pips.txt\n\nyum install -y $(cat /tmp/hass-rpms.txt)\n\n#Optional switch to user and clone repo\n#su - homeassistant\n#git clone https://github.com/casjay-devices/home-assistant /var/lib/homeassistant/.homeassistant\n\ncd /var/lib/homeassistant &amp;&amp; python3 -m venv . &amp;&amp; source ./bin/activate\n\n/var/lib/homeassistant/bin/python3 -m pip install --upgrade pip\n/var/lib/homeassistant/bin/python3 -m pip install wheel\n/var/lib/homeassistant/bin/python3 -m pip install python-openzwave\n/var/lib/homeassistant/bin/python3 -m pip install homeassistant \n/var/lib/homeassistant/bin/python3 -m pip install -r /tmp/hass-pips.txt\nsystemctl daemon-reload &amp;&amp; systemctl enable hass.service\n\necho &#039;SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;0658&quot;, ATTRS{idProduct}==&quot;0200&quot;, SYMLINK+=&quot;zwave&quot;&#039; &gt;&gt; /etc/udev/rules.d/99-usb-serial.rules\necho &#039;SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;067b&quot;, ATTRS{idProduct}==&quot;2303&quot;, SYMLINK+=&quot;gps&quot;&#039; &gt;&gt; /etc/udev/rules.d/99-usb-serial.rules\n\ndeactivate</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":102,"lastBuilt":"2025-09-14T01:15:33.478Z"},{"name":"influxdb","displayName":"Influxdb","slug":"influxdb","description":"Repo for influxdb","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/influxdb","updatedAt":"2025-09-08T03:08:55Z","createdAt":"2025-09-08T03:08:45Z","readmeRaw":"## 👋 Welcome to influxdb 🚀  \n\ninfluxdb README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-influxdb\" class=\"mobile-header\">👋 Welcome to influxdb 🚀  </h2>\n<p class=\"mobile-paragraph\">influxdb README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:33.365Z"},{"name":"jenkins","displayName":"Jenkins","slug":"jenkins","description":"Repo for jenkins","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jenkins","updatedAt":"2025-09-08T03:09:13Z","createdAt":"2023-08-28T03:48:15Z","readmeRaw":"# Jenkins Installation Guide\n\nOpen-source automation server for building, testing, and deploying applications. Essential tool for CI/CD pipelines.\n\n## Prerequisites\n\n- RHEL/CentOS 7+ or compatible Linux distribution\n- Java 8 or higher\n- 2GB RAM minimum, 4GB recommended\n\n## Installation\n\n```bash\n# Add Jenkins repository\nwget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n\n# Install Java and Jenkins\nyum install -y java-1.8.0-openjdk jenkins\n\n# Enable and start Jenkins\nsystemctl enable --now jenkins\n```\n\n## Configuration\n\n```bash\n# Allow through firewall (if enabled)\nfirewall-cmd --permanent --add-port=8080/tcp\nfirewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n## Verification\n\n```bash\n# Check Jenkins is running\nsystemctl status jenkins\ncurl http://localhost:8080\n\n# View logs if needed\njournalctl -u jenkins -f\n```\n\n## Usage\n\n1. Open browser to `http://your-server-ip:8080`\n2. Enter initial admin password from above\n3. Install recommended plugins or select custom plugins\n4. Create first admin user\n5. Start creating jobs and pipelines\n\n## Additional Resources\n\n- [Official Documentation](https://www.jenkins.io/doc/)\n- [Jenkins GitHub](https://github.com/jenkinsci/jenkins)\n- [Plugin Index](https://plugins.jenkins.io/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"jenkins-installation-guide\" class=\"mobile-header\">Jenkins Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source automation server for building, testing, and deploying applications. Essential tool for CI/CD pipelines.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">RHEL/CentOS 7+ or compatible Linux distribution</li>\n<li class=\"mobile-list-item\">Java 8 or higher</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB recommended</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Jenkins repository\nwget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n\n# Install Java and Jenkins\nyum install -y java-1.8.0-openjdk jenkins\n\n# Enable and start Jenkins\nsystemctl enable --now jenkins</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Allow through firewall (if enabled)\nfirewall-cmd --permanent --add-port=8080/tcp\nfirewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Jenkins is running\nsystemctl status jenkins\ncurl http://localhost:8080\n\n# View logs if needed\njournalctl -u jenkins -f</code></pre>\n      </div>\n    </div>\n<h2 id=\"usage\" class=\"mobile-header\">Usage</h2>\n<p class=\"mobile-paragraph\">1. Open browser to <code class=\"mobile-inline-code\">http://your-server-ip:8080</code></p>\n<p class=\"mobile-paragraph\">2. Enter initial admin password from above</p>\n<p class=\"mobile-paragraph\">3. Install recommended plugins or select custom plugins</p>\n<p class=\"mobile-paragraph\">4. Create first admin user</p>\n<p class=\"mobile-paragraph\">5. Start creating jobs and pipelines</p>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/jenkinsci/jenkins\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins GitHub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://plugins.jenkins.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Plugin Index</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"1 min","wordCount":173,"lastBuilt":"2025-09-14T01:15:33.092Z"},{"name":"jupyter","displayName":"Jupyter","slug":"jupyter","description":"Repo for jupyter","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jupyter","updatedAt":"2025-09-08T03:09:39Z","createdAt":"2025-09-08T03:09:29Z","readmeRaw":"## 👋 Welcome to jupyter 🚀  \n\njupyter README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-jupyter\" class=\"mobile-header\">👋 Welcome to jupyter 🚀  </h2>\n<p class=\"mobile-paragraph\">jupyter README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:32.804Z"},{"name":"libvirt","displayName":"Libvirt","slug":"libvirt","description":"Repo for libvirt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/libvirt","updatedAt":"2025-09-08T03:10:30Z","createdAt":"2023-08-28T03:48:25Z","readmeRaw":"# libvirt setup\n\n## [Archlinux](./ArchLinux.md)  \n  \n","readmeHtml":"<h1 id=\"libvirt-setup\" class=\"mobile-header\">libvirt setup</h1>\n<h2 id=\"archlinuxarchlinuxmd\" class=\"mobile-header\">[Archlinux](./ArchLinux.md)  </h2>","readTime":"1 min","wordCount":6,"lastBuilt":"2025-09-14T01:15:32.281Z"},{"name":"mce","displayName":"Mce","slug":"mce","description":"Repo for mce","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mce","updatedAt":"2025-09-08T03:10:56Z","createdAt":"2023-08-28T03:48:56Z","readmeRaw":"# CouchPotato/HeadPhones/SickRage/Plex/Emby install\n\n## CentOS/RedHat/SL 7\n\n```bash\nyum groupinstall -y \"Development Tools\"\nyum -y install curl gcc gettext git libmediainfo libzen mediainfo p7zip par2cmdline python-configobj sqlite tar unzip wget unrar\n\nmkdir -p /mnt/media /mnt/torrents\necho \"\n10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\n10.0.254.1:/mnt/Volume_1/torrents        /mnt/torrents                nfs defaults,rw 0 0\n\" >> /etc/fstab\nmount -a\n```\n\n### CouchPotato\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/couchpotato.git /var/lib/couchpotato\ngit clone https://git.casjay.in/systems/couchpotato.git /tmp/couchpotato\n\nmkdir -p /var/lib/couchpotato && cd /var/lib/couchpotato\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/couchpotato/bin/activate\n/var/lib/couchpotato/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/couchpotato/bin/python -m pip install -r /tmp/couchpotato/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/couchpotato/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable couchpotato couchpotato-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/couchpotato/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### HeadPhones\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/headphones.git /var/lib/headphones\ngit clone https://git.casjay.in/systems/headphones.git /tmp/headphones\n\nmkdir -p /var/lib/headphones && cd /var/lib/headphones\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/headphones/bin/activate\n/var/lib/headphones/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/headphones/bin/python -m pip install -r /tmp/headphones/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/headphones/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable headphones headphones-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/headphones/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### SickRage\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/sickrage.git /var/lib/sickrage\ngit clone https://git.casjay.in/systems/sickrage.git /tmp/sickrage\n\nmkdir -p /var/lib/sickrage && cd /var/lib/sickrage\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/sickrage/bin/activate\n/var/lib/sickrage/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/sickrage/bin/python -m pip install -r /tmp/sickrage/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/sickrage/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable sickrage sickrage-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/sickrage/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### Plex\n\n```bash\nyum install ffmpeg\nyum install -y https://downloads.plex.tv/plex-media-server/1.14.0.5470-9d51fdfaa/plexmediaserver-1.14.0.5470-9d51fdfaa.x86_64.rpm \ngo to http://yourserverip:32400/ and configure it\n\nOptional stats for plex [Tautulli]\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\ngit clone https://git.casjay.in/mirrors/Plex-Tautulli.git /var/lib/tautulli\ngit clone https://git.casjay.in/mirrors/plex.git /tmp/plex\ncp -Rf /tmp/plex/{etc,root,var}* /\n```\n\n### Emby\n\n```bash\nyum install ffmpeg\nyum install -y https://github.com/MediaBrowser/Emby.Releases/releases/download/3.5.3.0/emby-server-rpm_3.5.3.0_x86_64.rpm\ngo to http://yourserverip:8096/ and configure it\n\n```\n\n### Airsonic\n\n```bash\nmkdir -p /var/airsonic\nyum install java-1.8.0-openjdk-headless -y\nwget https://github.com/airsonic/airsonic/raw/main/contrib/airsonic.service -O /etc/systemd/system/airsonic.service\nwget https://github.com/airsonic/airsonic/releases/download/v10.1.2/airsonic.war -O /var/airsonic/airsonic.war\nmkdir -p /mnt/media\necho \" 10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\" >> /etc/fstab\nmount -a\n\n```\n","readmeHtml":"<h1 id=\"couchpotatoheadphonessickrageplexemby-install\" class=\"mobile-header\">CouchPotato/HeadPhones/SickRage/Plex/Emby install</h1>\n<h2 id=\"centosredhatsl-7\" class=\"mobile-header\">CentOS/RedHat/SL 7</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum groupinstall -y &quot;Development Tools&quot;\nyum -y install curl gcc gettext git libmediainfo libzen mediainfo p7zip par2cmdline python-configobj sqlite tar unzip wget unrar\n\nmkdir -p /mnt/media /mnt/torrents\necho &quot;\n10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\n10.0.254.1:/mnt/Volume_1/torrents        /mnt/torrents                nfs defaults,rw 0 0\n&quot; &gt;&gt; /etc/fstab\nmount -a</code></pre>\n      </div>\n    </div>\n<h3 id=\"couchpotato\" class=\"mobile-header\">CouchPotato</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/couchpotato.git /var/lib/couchpotato\ngit clone https://git.casjay.in/systems/couchpotato.git /tmp/couchpotato\n\nmkdir -p /var/lib/couchpotato &amp;&amp; cd /var/lib/couchpotato\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/couchpotato/bin/activate\n/var/lib/couchpotato/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/couchpotato/bin/python -m pip install -r /tmp/couchpotato/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/couchpotato/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable couchpotato couchpotato-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/couchpotato/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"headphones\" class=\"mobile-header\">HeadPhones</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/headphones.git /var/lib/headphones\ngit clone https://git.casjay.in/systems/headphones.git /tmp/headphones\n\nmkdir -p /var/lib/headphones &amp;&amp; cd /var/lib/headphones\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/headphones/bin/activate\n/var/lib/headphones/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/headphones/bin/python -m pip install -r /tmp/headphones/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/headphones/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable headphones headphones-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/headphones/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"sickrage\" class=\"mobile-header\">SickRage</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/sickrage.git /var/lib/sickrage\ngit clone https://git.casjay.in/systems/sickrage.git /tmp/sickrage\n\nmkdir -p /var/lib/sickrage &amp;&amp; cd /var/lib/sickrage\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/sickrage/bin/activate\n/var/lib/sickrage/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/sickrage/bin/python -m pip install -r /tmp/sickrage/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/sickrage/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable sickrage sickrage-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/sickrage/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"plex\" class=\"mobile-header\">Plex</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install ffmpeg\nyum install -y https://downloads.plex.tv/plex-media-server/1.14.0.5470-9d51fdfaa/plexmediaserver-1.14.0.5470-9d51fdfaa.x86_64.rpm \ngo to http://yourserverip:32400/ and configure it\n\nOptional stats for plex [Tautulli]\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\ngit clone https://git.casjay.in/mirrors/Plex-Tautulli.git /var/lib/tautulli\ngit clone https://git.casjay.in/mirrors/plex.git /tmp/plex\ncp -Rf /tmp/plex/{etc,root,var}* /</code></pre>\n      </div>\n    </div>\n<h3 id=\"emby\" class=\"mobile-header\">Emby</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install ffmpeg\nyum install -y https://github.com/MediaBrowser/Emby.Releases/releases/download/3.5.3.0/emby-server-rpm_3.5.3.0_x86_64.rpm\ngo to http://yourserverip:8096/ and configure it\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"airsonic\" class=\"mobile-header\">Airsonic</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">mkdir -p /var/airsonic\nyum install java-1.8.0-openjdk-headless -y\nwget https://github.com/airsonic/airsonic/raw/main/contrib/airsonic.service -O /etc/systemd/system/airsonic.service\nwget https://github.com/airsonic/airsonic/releases/download/v10.1.2/airsonic.war -O /var/airsonic/airsonic.war\nmkdir -p /mnt/media\necho &quot; 10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0&quot; &gt;&gt; /etc/fstab\nmount -a\n</code></pre>\n      </div>\n    </div>","readTime":"3 min","wordCount":448,"lastBuilt":"2025-09-14T01:15:31.864Z"},{"name":"minecraft-server","displayName":"Minecraft Server","slug":"minecraft-server","description":"Repo for minecraft-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minecraft-server","updatedAt":"2025-09-08T03:11:10Z","createdAt":"2025-09-08T03:10:59Z","readmeRaw":"## 👋 Welcome to minecraft-server 🚀  \n\nminecraft-server README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-minecraft-server\" class=\"mobile-header\">👋 Welcome to minecraft-server 🚀  </h2>\n<p class=\"mobile-paragraph\">minecraft-server README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:31.688Z"},{"name":"minio","displayName":"Minio","slug":"minio","description":"Repo for minio","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minio","updatedAt":"2025-09-08T03:11:39Z","createdAt":"2025-09-08T03:11:29Z","readmeRaw":"## 👋 Welcome to minio 🚀  \n\nminio README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-minio\" class=\"mobile-header\">👋 Welcome to minio 🚀  </h2>\n<p class=\"mobile-paragraph\">minio README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:31.383Z"},{"name":"nexus","displayName":"Nexus","slug":"nexus","description":"Repo for nexus","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nexus","updatedAt":"2025-09-08T03:12:24Z","createdAt":"2025-09-08T03:12:14Z","readmeRaw":"## 👋 Welcome to nexus 🚀  \n\nnexus README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-nexus\" class=\"mobile-header\">👋 Welcome to nexus 🚀  </h2>\n<p class=\"mobile-paragraph\">nexus README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:30.837Z"},{"name":"nodejs","displayName":"Node.js","slug":"nodejs","description":"Repo for nodejs","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nodejs","updatedAt":"2025-09-08T03:12:42Z","createdAt":"2023-08-28T03:49:17Z","readmeRaw":"# Node.js Installation Guide\n\nJavaScript runtime built on Chrome's V8 JavaScript engine. Essential for running JavaScript applications on servers.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS/Fedora, or Arch)\n- curl or wget for downloading packages\n\n## Installation\n\n### Using NVM (Recommended)\n```bash\n# Install NVM\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\nsource ~/.bashrc\n\n# Install latest Node.js\nnvm install node\nnvm use node\n\n# Install LTS version\nnvm install --lts\nnvm use --lts\n\n# Install specific version\nnvm install v18.17.0\nnvm use v18.17.0\n```\n\n### System Package Installation\n\n#### Ubuntu/Debian\n```bash\n# Install build essentials\nsudo apt-get update\nsudo apt-get install -y build-essential\n\n# Add NodeSource repository\ncurl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n\n#### RHEL/CentOS/Fedora\n```bash\n# Install development tools\nsudo yum groupinstall 'Development Tools'\n\n# Add NodeSource repository  \ncurl -sL https://rpm.nodesource.com/setup_18.x | sudo bash -\nsudo yum install -y nodejs npm\n```\n\n#### Arch Linux\n```bash\n# Install from official repositories\nsudo pacman -S nodejs npm\n```\n\n## Configuration\n\n### NGINX Proxy Setup\n```bash\n# Create NGINX configuration\nsudo tee /etc/nginx/sites-available/nodejs-app > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name your-domain.com;\n    \n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \\$host;\n        proxy_cache_bypass \\$http_upgrade;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nodejs-app /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### SystemD Service\n```bash\n# Create systemd service for your app\nsudo tee /etc/systemd/system/myapp.service > /dev/null <<EOF\n[Unit]\nDescription=Node.js App\nAfter=network.target\n\n[Service]\nType=simple\nUser=www-data\nWorkingDirectory=/path/to/your/app\nExecStart=/usr/bin/node app.js\nRestart=on-failure\nRestartSec=10\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now myapp\n```\n\n## Verification\n\n```bash\n# Check Node.js version\nnode --version\nnpm --version\n\n# Test basic functionality\nnode -e \"console.log('Node.js is working!')\"\n\n# Check service status (if using systemd)\nsudo systemctl status myapp\n```\n\n## Usage\n\n1. Create your Node.js application\n2. Install dependencies with `npm install`\n3. Start development server with `npm start` or `node app.js`\n4. For production, use PM2 or systemd service\n5. Configure reverse proxy with NGINX\n\n## Additional Resources\n\n- [Official Documentation](https://nodejs.org/docs/)\n- [NPM Documentation](https://docs.npmjs.com/)\n- [NVM GitHub](https://github.com/nvm-sh/nvm)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"nodejs-installation-guide\" class=\"mobile-header\">Node.js Installation Guide</h1>\n<p class=\"mobile-paragraph\">JavaScript runtime built on Chrome's V8 JavaScript engine. Essential for running JavaScript applications on servers.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS/Fedora, or Arch)</li>\n<li class=\"mobile-list-item\">curl or wget for downloading packages</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-nvm-recommended\" class=\"mobile-header\">Using NVM (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NVM\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\nsource ~/.bashrc\n\n# Install latest Node.js\nnvm install node\nnvm use node\n\n# Install LTS version\nnvm install --lts\nnvm use --lts\n\n# Install specific version\nnvm install v18.17.0\nnvm use v18.17.0</code></pre>\n      </div>\n    </div>\n<h3 id=\"system-package-installation\" class=\"mobile-header\">System Package Installation</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install build essentials\nsudo apt-get update\nsudo apt-get install -y build-essential\n\n# Add NodeSource repository\ncurl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install development tools\nsudo yum groupinstall &#039;Development Tools&#039;\n\n# Add NodeSource repository  \ncurl -sL https://rpm.nodesource.com/setup_18.x | sudo bash -\nsudo yum install -y nodejs npm</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from official repositories\nsudo pacman -S nodejs npm</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"nginx-proxy-setup\" class=\"mobile-header\">NGINX Proxy Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration\nsudo tee /etc/nginx/sites-available/nodejs-app &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 80;\n    server_name your-domain.com;\n    \n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &#039;upgrade&#039;;\n        proxy_set_header Host \\$host;\n        proxy_cache_bypass \\$http_upgrade;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nodejs-app /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service\" class=\"mobile-header\">SystemD Service</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service for your app\nsudo tee /etc/systemd/system/myapp.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Node.js App\nAfter=network.target\n\n[Service]\nType=simple\nUser=www-data\nWorkingDirectory=/path/to/your/app\nExecStart=/usr/bin/node app.js\nRestart=on-failure\nRestartSec=10\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now myapp</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Node.js version\nnode --version\nnpm --version\n\n# Test basic functionality\nnode -e &quot;console.log(&#039;Node.js is working!&#039;)&quot;\n\n# Check service status (if using systemd)\nsudo systemctl status myapp</code></pre>\n      </div>\n    </div>\n<h2 id=\"usage\" class=\"mobile-header\">Usage</h2>\n<p class=\"mobile-paragraph\">1. Create your Node.js application</p>\n<p class=\"mobile-paragraph\">2. Install dependencies with <code class=\"mobile-inline-code\">npm install</code></p>\n<p class=\"mobile-paragraph\">3. Start development server with <code class=\"mobile-inline-code\">npm start</code> or <code class=\"mobile-inline-code\">node app.js</code></p>\n<p class=\"mobile-paragraph\">4. For production, use PM2 or systemd service</p>\n<p class=\"mobile-paragraph\">5. Configure reverse proxy with NGINX</p>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://nodejs.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.npmjs.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">NPM Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">NVM GitHub</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"2 min","wordCount":374,"lastBuilt":"2025-09-14T01:15:30.551Z"},{"name":"odoo","displayName":"Odoo","slug":"odoo","description":"Repo for odoo","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/odoo","updatedAt":"2025-09-08T03:12:54Z","createdAt":"2025-09-08T03:12:44Z","readmeRaw":"## 👋 Welcome to odoo 🚀  \n\nodoo README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-odoo\" class=\"mobile-header\">👋 Welcome to odoo 🚀  </h2>\n<p class=\"mobile-paragraph\">odoo README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:30.430Z"},{"name":"opnsense","displayName":"Opnsense","slug":"opnsense","description":"Repo for opnsense","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/opnsense","updatedAt":"2025-09-08T03:13:18Z","createdAt":"2025-09-08T03:13:08Z","readmeRaw":"## 👋 Welcome to opnsense 🚀  \n\nopnsense README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-opnsense\" class=\"mobile-header\">👋 Welcome to opnsense 🚀  </h2>\n<p class=\"mobile-paragraph\">opnsense README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:30.172Z"},{"name":"owncloud","displayName":"Owncloud","slug":"owncloud","description":"Repo for owncloud","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/owncloud","updatedAt":"2025-09-08T03:13:30Z","createdAt":"2025-09-08T03:13:20Z","readmeRaw":"## 👋 Welcome to owncloud 🚀  \n\nowncloud README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-owncloud\" class=\"mobile-header\">👋 Welcome to owncloud 🚀  </h2>\n<p class=\"mobile-paragraph\">owncloud README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:30.048Z"},{"name":"pfsense","displayName":"Pfsense","slug":"pfsense","description":"Repo for pfsense","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pfsense","updatedAt":"2025-09-08T03:13:43Z","createdAt":"2025-09-08T03:13:32Z","readmeRaw":"## 👋 Welcome to pfsense 🚀  \n\npfsense README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-pfsense\" class=\"mobile-header\">👋 Welcome to pfsense 🚀  </h2>\n<p class=\"mobile-paragraph\">pfsense README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:29.762Z"},{"name":"pgadmin","displayName":"Pgadmin","slug":"pgadmin","description":"Repo for pgadmin","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pgadmin","updatedAt":"2025-09-08T03:13:54Z","createdAt":"2025-09-08T03:13:44Z","readmeRaw":"## 👋 Welcome to pgadmin 🚀  \n\npgadmin README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-pgadmin\" class=\"mobile-header\">👋 Welcome to pgadmin 🚀  </h2>\n<p class=\"mobile-paragraph\">pgadmin README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:29.636Z"},{"name":"phpmyadmin","displayName":"Phpmyadmin","slug":"phpmyadmin","description":"Repo for phpmyadmin","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/phpmyadmin","updatedAt":"2025-09-08T03:14:06Z","createdAt":"2025-09-08T03:13:56Z","readmeRaw":"## 👋 Welcome to phpmyadmin 🚀  \n\nphpmyadmin README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-phpmyadmin\" class=\"mobile-header\">👋 Welcome to phpmyadmin 🚀  </h2>\n<p class=\"mobile-paragraph\">phpmyadmin README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:29.504Z"},{"name":"prosody","displayName":"Prosody","slug":"prosody","description":"Repo for prosody","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prosody","updatedAt":"2025-09-08T03:14:59Z","createdAt":"2023-08-28T03:49:26Z","readmeRaw":"#### Prosody IM Server\n\n```shell\nmkdir -p /var/lib/docker/storage/prosody && chmod -Rf 777 /var/lib/docker/storage/prosody\ndocker run -d \\\n   -p 82:80\n   -p 5222:5222 \\\n   -p 5269:5269 \\\n   -p 5281:5281\n   -p 5347:5347 \\\n   -e LOCAL=admin \\\n   -e DOMAIN=MYDOMAIN \\\n   -e PASSWORD=juliet4ever \\\n   -v /var/lib/docker/storage/prosody/log:/var/log/prosody \\\n   -v /var/lib/docker/storage/prosody/configuration:/etc/prosody \\\n   -v /var/lib/docker/storage/prosody/modules:/usr/lib/prosody-modules \\\n   prosody/prosody\n```\n","readmeHtml":"<p class=\"mobile-paragraph\">#### Prosody IM Server</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /var/lib/docker/storage/prosody &amp;&amp; chmod -Rf 777 /var/lib/docker/storage/prosody\ndocker run -d \\\n   -p 82:80\n   -p 5222:5222 \\\n   -p 5269:5269 \\\n   -p 5281:5281\n   -p 5347:5347 \\\n   -e LOCAL=admin \\\n   -e DOMAIN=MYDOMAIN \\\n   -e PASSWORD=juliet4ever \\\n   -v /var/lib/docker/storage/prosody/log:/var/log/prosody \\\n   -v /var/lib/docker/storage/prosody/configuration:/etc/prosody \\\n   -v /var/lib/docker/storage/prosody/modules:/usr/lib/prosody-modules \\\n   prosody/prosody</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T01:15:28.861Z"},{"name":"proxmox","displayName":"Proxmox","slug":"proxmox","description":"Repo for proxmox","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/proxmox","updatedAt":"2025-09-08T03:15:04Z","createdAt":"2023-08-28T03:49:36Z","readmeRaw":"# Install docker\n\n### ZFS\n\n```shell\nzfs create -o mountpoint=/var/lib/docker rpool/docker\nmkdir /etc/systemd/system/docker.service.d\ncurl -q -LSs https://github.com/casjay-base/howtos/raw/main/proxmox/storage-driver.conf >/etc/systemd/system/docker.service.d/storage-driver.conf\n```\n\n### Docker\n\n```shell\napt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\ncurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\napt-key fingerprint 0EBFCD88\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\"\napt-get update && apt-get install docker-ce -y\n```\n\n### Yacht\n\n```shell\nmkdir -p \"/root/.local/share/srv/docker/yacht/\"\nsudo docker run -d \\\n    --name=\"yacht\" \\\n    --hostname \"yacht\" \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=\"${TZ:-${TIMEZONE:-America/New_York}}\" \\\n    -v \"/root/.local/share/srv/docker/yacht/data\":/data \\\n    -v \"/root/.local/share/srv/docker/yacht/config\":/config \\\n    -p 8000:8000 \\\n    selfhostedpro/yacht 1>/dev/null\n```\n\n### Portainer\n\n```shell\nmkdir -p /root/.local/share/srv/docker/portainer/data\ndocker run -d -p 9000:9000 \\\n    --name portainer \\\n    -v /root/.local/share/srv/docker/portainer/data:/data \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    portainer/portainer-ce\n```\n\n### nginx\n\n```shell\nmkdir -p /root/.local/share/srv/docker/nginx-manager/files/{data,config,letsencrypt}\nsudo docker run -d \\\n    --name=\"nginx-manager\" \\\n    --hostname \"$HOSTNAME\" \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=\"America/New_York\" \\\n    -e DISABLE_IPV6=true \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/data\":/data \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/config\":/app/config \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/letsencrypt\":/etc/letsencrypt \\\n    -p 80:80 \\\n    -p 8888:81 \\\n    -p 443:443 \\\n    jc21/nginx-proxy-manager:2\n```\n","readmeHtml":"<h1 id=\"install-docker\" class=\"mobile-header\">Install docker</h1>\n<h3 id=\"zfs\" class=\"mobile-header\">ZFS</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">zfs create -o mountpoint=/var/lib/docker rpool/docker\nmkdir /etc/systemd/system/docker.service.d\ncurl -q -LSs https://github.com/casjay-base/howtos/raw/main/proxmox/storage-driver.conf &gt;/etc/systemd/system/docker.service.d/storage-driver.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker\" class=\"mobile-header\">Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\ncurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\napt-key fingerprint 0EBFCD88\nadd-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable&quot;\napt-get update &amp;&amp; apt-get install docker-ce -y</code></pre>\n      </div>\n    </div>\n<h3 id=\"yacht\" class=\"mobile-header\">Yacht</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p &quot;/root/.local/share/srv/docker/yacht/&quot;\nsudo docker run -d \\\n    --name=&quot;yacht&quot; \\\n    --hostname &quot;yacht&quot; \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=&quot;${TZ:-${TIMEZONE:-America/New_York}}&quot; \\\n    -v &quot;/root/.local/share/srv/docker/yacht/data&quot;:/data \\\n    -v &quot;/root/.local/share/srv/docker/yacht/config&quot;:/config \\\n    -p 8000:8000 \\\n    selfhostedpro/yacht 1&gt;/dev/null</code></pre>\n      </div>\n    </div>\n<h3 id=\"portainer\" class=\"mobile-header\">Portainer</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /root/.local/share/srv/docker/portainer/data\ndocker run -d -p 9000:9000 \\\n    --name portainer \\\n    -v /root/.local/share/srv/docker/portainer/data:/data \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    portainer/portainer-ce</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx\" class=\"mobile-header\">nginx</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /root/.local/share/srv/docker/nginx-manager/files/{data,config,letsencrypt}\nsudo docker run -d \\\n    --name=&quot;nginx-manager&quot; \\\n    --hostname &quot;$HOSTNAME&quot; \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=&quot;America/New_York&quot; \\\n    -e DISABLE_IPV6=true \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/data&quot;:/data \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/config&quot;:/app/config \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/letsencrypt&quot;:/etc/letsencrypt \\\n    -p 80:80 \\\n    -p 8888:81 \\\n    -p 443:443 \\\n    jc21/nginx-proxy-manager:2</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":160,"lastBuilt":"2025-09-14T01:15:28.745Z"},{"name":"rabbitmq","displayName":"Rabbitmq","slug":"rabbitmq","description":"Repo for rabbitmq","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/rabbitmq","updatedAt":"2025-09-08T03:15:23Z","createdAt":"2025-09-08T03:15:11Z","readmeRaw":"## 👋 Welcome to rabbitmq 🚀  \n\nrabbitmq README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-rabbitmq\" class=\"mobile-header\">👋 Welcome to rabbitmq 🚀  </h2>\n<p class=\"mobile-paragraph\">rabbitmq README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:28.594Z"},{"name":"raspbian","displayName":"Raspbian","slug":"raspbian","description":"Repo for raspbian","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/raspbian","updatedAt":"2025-09-08T03:15:35Z","createdAt":"2023-08-28T03:49:55Z","readmeRaw":"## My raspbian setup  \n  \nServers:  \n\n```shell\nsudo apt update && sudo apt dist-upgrade -yy -q && sudo reboot || echo \"Update has failed\"\nsudo apt install -yy git curl gnupg python3 vim-nox pass lynx net-tools ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c \"$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)\"\nbash -c \"$(curl -LsS -H \"Authorization: token ${GITHUB_ACCESS_TOKEN}\" ${MYPRIVATEDOTFILES_SERVER}/raw/main/install.sh)\"\n```\n\nDesktops:  \n\n```shell\nsudo apt update && sudo apt dist-upgrade -yy -q && sudo reboot || echo \"Update has failed\"\nsudo apt install -yy git curl gnupg python3 python3-pil libjpeg-dev vim-nox neomutt isync msmtp pass lynx notmuch abook urlview newsboat mplayer mpc mpd pianobar net-tools mpv ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c \"$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)\"\nbash -c \"$(curl -LsS -H \"Authorization: token ${GITHUB_ACCESS_TOKEN}\" ${MYPRIVATEDOTFILES_DESKTOP}/raw/main/install.sh)\"\n```\n  \n  \nResources:  \n<https://willemm.nl/track-aircraft-using-ads-b-groundstation-virtual-radar-server-vrs/>  \n","readmeHtml":"<h2 id=\"my-raspbian-setup\" class=\"mobile-header\">My raspbian setup  </h2>\n<p class=\"mobile-paragraph\">Servers:  </p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo apt update &amp;&amp; sudo apt dist-upgrade -yy -q &amp;&amp; sudo reboot || echo &quot;Update has failed&quot;\nsudo apt install -yy git curl gnupg python3 vim-nox pass lynx net-tools ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c &quot;$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)&quot;\nbash -c &quot;$(curl -LsS -H &quot;Authorization: token ${GITHUB_ACCESS_TOKEN}&quot; ${MYPRIVATEDOTFILES_SERVER}/raw/main/install.sh)&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Desktops:  </p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo apt update &amp;&amp; sudo apt dist-upgrade -yy -q &amp;&amp; sudo reboot || echo &quot;Update has failed&quot;\nsudo apt install -yy git curl gnupg python3 python3-pil libjpeg-dev vim-nox neomutt isync msmtp pass lynx notmuch abook urlview newsboat mplayer mpc mpd pianobar net-tools mpv ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c &quot;$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)&quot;\nbash -c &quot;$(curl -LsS -H &quot;Authorization: token ${GITHUB_ACCESS_TOKEN}&quot; ${MYPRIVATEDOTFILES_DESKTOP}/raw/main/install.sh)&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Resources:  </p>\n<p class=\"mobile-paragraph\"><https://willemm.nl/track-aircraft-using-ads-b-groundstation-virtual-radar-server-vrs/>  </p>","readTime":"1 min","wordCount":129,"lastBuilt":"2025-09-14T01:15:28.354Z"},{"name":"shinobi","displayName":"Shinobi","slug":"shinobi","description":"Repo for shinobi","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/shinobi","updatedAt":"2025-09-08T03:16:18Z","createdAt":"2023-08-28T03:50:05Z","readmeRaw":"# CentOS\n\n```bash\nsudo yum install -y ffmpeg gstreamer1-libav x264 x265 git curl gnupg2\nsudo yum install -y nodejs\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/centos.sh && INSTALL/centos.sh\n\n```\n\n# Debian\n\n```bash\nsudo apt update\nsudo apt install ffmpeg libav-tools x264 x265 git curl gnupg2\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt install nodejs -y\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/ubuntu.sh && INSTALL/ubuntu.sh\n```\n","readmeHtml":"<h1 id=\"centos\" class=\"mobile-header\">CentOS</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo yum install -y ffmpeg gstreamer1-libav x264 x265 git curl gnupg2\nsudo yum install -y nodejs\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/centos.sh &amp;&amp; INSTALL/centos.sh\n</code></pre>\n      </div>\n    </div>\n<h1 id=\"debian\" class=\"mobile-header\">Debian</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo apt update\nsudo apt install ffmpeg libav-tools x264 x265 git curl gnupg2\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt install nodejs -y\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/ubuntu.sh &amp;&amp; INSTALL/ubuntu.sh</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":81,"lastBuilt":"2025-09-14T01:15:27.834Z"},{"name":"sonarqube","displayName":"Sonarqube","slug":"sonarqube","description":"Repo for sonarqube","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/sonarqube","updatedAt":"2025-09-08T03:16:32Z","createdAt":"2025-09-08T03:16:21Z","readmeRaw":"## 👋 Welcome to sonarqube 🚀  \n\nsonarqube README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-sonarqube\" class=\"mobile-header\">👋 Welcome to sonarqube 🚀  </h2>\n<p class=\"mobile-paragraph\">sonarqube README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:27.718Z"},{"name":"strapi","displayName":"Strapi","slug":"strapi","description":"Repo for strapi","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/strapi","updatedAt":"2025-09-08T03:16:44Z","createdAt":"2025-09-08T03:16:33Z","readmeRaw":"## 👋 Welcome to strapi 🚀  \n\nstrapi README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-strapi\" class=\"mobile-header\">👋 Welcome to strapi 🚀  </h2>\n<p class=\"mobile-paragraph\">strapi README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:27.561Z"},{"name":"terraform","displayName":"Terraform","slug":"terraform","description":"Repo for terraform","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/terraform","updatedAt":"2025-09-08T03:17:01Z","createdAt":"2025-09-08T03:16:51Z","readmeRaw":"# Terraform Installation Guide\n\nInfrastructure as Code (IaC) tool for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Cloud provider account (AWS, Azure, GCP, etc.)\n- Basic understanding of infrastructure concepts\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y terraform\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform\n```\n\n### Manual Installation\n```bash\n# Download latest version\nTERRAFORM_VERSION=\"1.5.7\"\ncd /tmp\nwget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\nsudo chmod +x /usr/local/bin/terraform\n\n# Clean up\nrm terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n```\n\n### Using Docker\n```bash\n# Create alias for Docker-based Terraform\necho 'alias terraform=\"docker run --rm -it -v $(pwd):/workspace -w /workspace hashicorp/terraform:latest\"' >> ~/.bashrc\nsource ~/.bashrc\n\n# Or create wrapper script\nsudo tee /usr/local/bin/terraform > /dev/null <<'EOF'\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/workspace \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.config/gcloud:/root/.config/gcloud:ro \\\n  -w /workspace \\\n  hashicorp/terraform:latest \"$@\"\nEOF\nsudo chmod +x /usr/local/bin/terraform\n```\n\n## Configuration\n\n### AWS Provider Setup\n```bash\n# Install AWS CLI\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\n\n# Configure AWS credentials\naws configure\n# AWS Access Key ID: YOUR_ACCESS_KEY\n# AWS Secret Access Key: YOUR_SECRET_KEY  \n# Default region name: us-west-2\n# Default output format: json\n\n# Create basic Terraform configuration\nmkdir -p ~/terraform/aws-infrastructure\ncd ~/terraform/aws-infrastructure\n\n# Create main.tf\ncat > main.tf <<EOF\nterraform {\n  required_version = \">= 1.0\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n\n# Variables\nvariable \"aws_region\" {\n  description = \"AWS region\"\n  type        = string\n  default     = \"us-west-2\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  type        = string\n  default     = \"development\"\n}\n\n# VPC\nresource \"aws_vpc\" \"main\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name        = \"\\${var.environment}-vpc\"\n    Environment = var.environment\n  }\n}\n\n# Internet Gateway\nresource \"aws_internet_gateway\" \"main\" {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name        = \"\\${var.environment}-igw\"\n    Environment = var.environment\n  }\n}\n\n# Public Subnet\nresource \"aws_subnet\" \"public\" {\n  count                   = 2\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = \"10.0.\\${count.index + 1}.0/24\"\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name        = \"\\${var.environment}-public-subnet-\\${count.index + 1}\"\n    Environment = var.environment\n  }\n}\n\n# Data source for availability zones\ndata \"aws_availability_zones\" \"available\" {\n  state = \"available\"\n}\n\n# Route table\nresource \"aws_route_table\" \"public\" {\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    gateway_id = aws_internet_gateway.main.id\n  }\n\n  tags = {\n    Name        = \"\\${var.environment}-public-rt\"\n    Environment = var.environment\n  }\n}\n\n# Route table associations\nresource \"aws_route_table_association\" \"public\" {\n  count          = length(aws_subnet.public)\n  subnet_id      = aws_subnet.public[count.index].id\n  route_table_id = aws_route_table.public.id\n}\n\n# Security group\nresource \"aws_security_group\" \"web\" {\n  name_prefix = \"\\${var.environment}-web-\"\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name        = \"\\${var.environment}-web-sg\"\n    Environment = var.environment\n  }\n}\n\n# Outputs\noutput \"vpc_id\" {\n  value = aws_vpc.main.id\n}\n\noutput \"public_subnet_ids\" {\n  value = aws_subnet.public[*].id\n}\n\noutput \"security_group_id\" {\n  value = aws_security_group.web.id\n}\nEOF\n\n# Create terraform.tfvars\ncat > terraform.tfvars <<EOF\naws_region  = \"us-west-2\"\nenvironment = \"production\"\nEOF\n```\n\n### Azure Provider Setup\n```bash\n# Install Azure CLI\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Login to Azure\naz login\n\n# Create service principal for Terraform\naz ad sp create-for-rbac --name \"terraform\" --role=\"Contributor\" --scopes=\"/subscriptions/YOUR_SUBSCRIPTION_ID\"\n\n# Set environment variables\nexport ARM_CLIENT_ID=\"your-client-id\"\nexport ARM_CLIENT_SECRET=\"your-client-secret\"  \nexport ARM_SUBSCRIPTION_ID=\"your-subscription-id\"\nexport ARM_TENANT_ID=\"your-tenant-id\"\n\n# Create Azure Terraform configuration\nmkdir -p ~/terraform/azure-infrastructure\ncd ~/terraform/azure-infrastructure\n\ncat > main.tf <<EOF\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n# Resource Group\nresource \"azurerm_resource_group\" \"main\" {\n  name     = \"\\${var.environment}-rg\"\n  location = var.location\n  \n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Virtual Network\nresource \"azurerm_virtual_network\" \"main\" {\n  name                = \"\\${var.environment}-vnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Subnet\nresource \"azurerm_subnet\" \"internal\" {\n  name                 = \"internal\"\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = [\"10.0.2.0/24\"]\n}\n\nvariable \"location\" {\n  description = \"Azure region\"\n  default     = \"East US\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  default     = \"development\"\n}\nEOF\n```\n\n### Google Cloud Provider Setup\n```bash\n# Install Google Cloud SDK\necho \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\nsudo apt-get update && sudo apt-get install -y google-cloud-cli\n\n# Authenticate\ngcloud auth login\ngcloud config set project YOUR_PROJECT_ID\n\n# Create service account for Terraform\ngcloud iam service-accounts create terraform --display-name=\"Terraform Service Account\"\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID --member=\"serviceAccount:terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\" --role=\"roles/editor\"\ngcloud iam service-accounts keys create ~/gcp-terraform-key.json --iam-account=terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\n\n# Set environment variable\nexport GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/gcp-terraform-key.json\"\n```\n\n## Basic Usage\n\n### Initialize and Plan\n```bash\n# Initialize Terraform (run in project directory)\nterraform init\n\n# Format code\nterraform fmt\n\n# Validate configuration\nterraform validate\n\n# Plan changes\nterraform plan\n\n# Apply changes\nterraform apply\n\n# Show current state\nterraform show\n\n# List resources\nterraform state list\n\n# Destroy infrastructure\nterraform destroy\n```\n\n### State Management\n```bash\n# Configure remote state (S3 backend example)\ncat > backend.tf <<EOF\nterraform {\n  backend \"s3\" {\n    bucket = \"your-terraform-state-bucket\"\n    key    = \"infrastructure/terraform.tfstate\"\n    region = \"us-west-2\"\n    \n    # Optional: DynamoDB table for state locking\n    dynamodb_table = \"terraform-state-lock\"\n    encrypt        = true\n  }\n}\nEOF\n\n# Initialize backend\nterraform init -migrate-state\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Move state resources\nterraform state mv aws_instance.example aws_instance.web_server\n```\n\n### Workspace Management\n```bash\n# Create new workspace\nterraform workspace new production\nterraform workspace new staging\n\n# List workspaces\nterraform workspace list\n\n# Switch workspace\nterraform workspace select production\n\n# Show current workspace\nterraform workspace show\n```\n\n## Advanced Configuration\n\n### Modules\n```bash\n# Create reusable module structure\nmkdir -p modules/vpc/{variables.tf,main.tf,outputs.tf}\n\n# modules/vpc/variables.tf\ncat > modules/vpc/variables.tf <<EOF\nvariable \"vpc_cidr\" {\n  description = \"CIDR block for VPC\"\n  type        = string\n  default     = \"10.0.0.0/16\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  type        = string\n}\n\nvariable \"availability_zones\" {\n  description = \"List of availability zones\"\n  type        = list(string)\n  default     = [\"us-west-2a\", \"us-west-2b\"]\n}\nEOF\n\n# Use module in main configuration\ncat >> main.tf <<EOF\n\nmodule \"vpc\" {\n  source = \"./modules/vpc\"\n  \n  vpc_cidr           = \"10.0.0.0/16\"\n  environment        = var.environment\n  availability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]\n}\nEOF\n```\n\n### Variable Files and Environments\n```bash\n# Create environment-specific variable files\ncat > environments/production.tfvars <<EOF\nenvironment = \"production\"\ninstance_type = \"t3.large\"\nmin_size = 3\nmax_size = 10\nEOF\n\ncat > environments/staging.tfvars <<EOF\nenvironment = \"staging\"\ninstance_type = \"t3.small\"\nmin_size = 1\nmax_size = 3\nEOF\n\n# Apply with specific variables\nterraform apply -var-file=\"environments/production.tfvars\"\n```\n\n## Verification\n\n```bash\n# Check Terraform version\nterraform version\n\n# Validate configuration\nterraform validate\n\n# Check formatting\nterraform fmt -check\n\n# Plan with detailed output\nterraform plan -detailed-exitcode\n\n# Show current state\nterraform show\n\n# Check providers\nterraform providers\n\n# Verify remote state\nterraform state pull\n\n# Check for configuration drift\nterraform plan -refresh-only\n```\n\n## Best Practices\n\n### Project Structure\n```bash\n# Recommended directory structure\nmkdir -p terraform-project/{\nenvironments,\nmodules,\n.terraform,\nscripts\n}\n\n# Create .gitignore\ncat > .gitignore <<EOF\n# Terraform files\n*.tfstate\n*.tfstate.*\n.terraform/\n.terraform.lock.hcl\ncrash.log\noverride.tf\noverride.tf.json\n*_override.tf\n*_override.tf.json\n\n# Environment files\n*.tfvars\n.env\n\n# IDE files\n.vscode/\n.idea/\nEOF\n```\n\n### Security Practices\n```bash\n# Use environment variables for sensitive data\nexport TF_VAR_db_password=\"your-secure-password\"\nexport TF_VAR_api_key=\"your-api-key\"\n\n# In terraform configuration:\nvariable \"db_password\" {\n  description = \"Database password\"\n  type        = string\n  sensitive   = true\n}\n\n# Use data sources for existing resources\ndata \"aws_ami\" \"ubuntu\" {\n  most_recent = true\n  owners      = [\"099720109477\"] # Canonical\n\n  filter {\n    name   = \"name\"\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*\"]\n  }\n}\n\n# Tag everything consistently\nlocals {\n  common_tags = {\n    Environment = var.environment\n    Project     = \"infrastructure\"\n    ManagedBy   = \"terraform\"\n    Owner       = \"devops-team\"\n  }\n}\n\nresource \"aws_instance\" \"web\" {\n  # ... other configuration\n  tags = local.common_tags\n}\n```\n\n## Troubleshooting\n\n```bash\n# Debug with detailed logging\nexport TF_LOG=DEBUG\nexport TF_LOG_PATH=\"terraform.log\"\nterraform plan\n\n# Check provider configuration\nterraform providers schema -json\n\n# Inspect state file\nterraform state show aws_instance.web\n\n# Refresh state from real infrastructure\nterraform refresh\n\n# Force unlock state (if locked)\nterraform force-unlock LOCK_ID\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Check for unused variables\nterraform validate\n\n# Fix state inconsistencies\nterraform apply -refresh-only -auto-approve\n```\n\n## Integration with CI/CD\n\n### GitHub Actions\n```bash\n# Create .github/workflows/terraform.yml\nmkdir -p .github/workflows\ncat > .github/workflows/terraform.yml <<EOF\nname: Terraform\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v2\n      with:\n        terraform_version: 1.5.7\n    \n    - name: Terraform Format\n      run: terraform fmt -check\n    \n    - name: Terraform Init\n      run: terraform init\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n    \n    - name: Terraform Plan\n      run: terraform plan\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Apply\n      if: github.ref == 'refs/heads/main' && github.event_name == 'push'\n      run: terraform apply -auto-approve\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\nEOF\n```\n\n### GitLab CI\n```bash\n# Create .gitlab-ci.yml\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - validate\n  - plan\n  - apply\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_IN_AUTOMATION: \"true\"\n\ncache:\n  key: \"\\${TF_ROOT}\"\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform --version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform validate\n    - terraform fmt -check\n  rules:\n    - if: '\\$CI_MERGE_REQUEST_IID'\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\nplan:\n  stage: plan\n  script:\n    - terraform plan -out=\"planfile\"\n  artifacts:\n    paths:\n      - planfile\n  rules:\n    - if: '\\$CI_MERGE_REQUEST_IID'\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\napply:\n  stage: apply\n  script:\n    - terraform apply -input=false \"planfile\"\n  dependencies:\n    - plan\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n      when: manual\nEOF\n```\n\n## Common Patterns\n\n### Multi-Environment Setup\n```bash\n# Create environment-specific configurations\nmkdir -p environments/{dev,staging,prod}\n\n# environments/dev/main.tf\ncat > environments/dev/main.tf <<EOF\nmodule \"infrastructure\" {\n  source = \"../../modules/infrastructure\"\n  \n  environment     = \"development\"\n  instance_type   = \"t3.micro\"\n  min_size       = 1\n  max_size       = 2\n  db_instance_class = \"db.t3.micro\"\n}\nEOF\n\n# Apply for specific environment\ncd environments/dev\nterraform init\nterraform plan\nterraform apply\n```\n\n## Additional Resources\n\n- [Official Documentation](https://developer.hashicorp.com/terraform/docs)\n- [Terraform Registry](https://registry.terraform.io/)\n- [AWS Provider Documentation](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Best Practices Guide](https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html)\n- [Terraform Examples](https://github.com/hashicorp/terraform-provider-aws/tree/main/examples)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"terraform-installation-guide\" class=\"mobile-header\">Terraform Installation Guide</h1>\n<p class=\"mobile-paragraph\">Infrastructure as Code (IaC) tool for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Cloud provider account (AWS, Azure, GCP, etc.)</li>\n<li class=\"mobile-list-item\">Basic understanding of infrastructure concepts</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho &quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y terraform</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-installation\" class=\"mobile-header\">Manual Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest version\nTERRAFORM_VERSION=&quot;1.5.7&quot;\ncd /tmp\nwget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\nsudo chmod +x /usr/local/bin/terraform\n\n# Clean up\nrm terraform_${TERRAFORM_VERSION}_linux_amd64.zip</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create alias for Docker-based Terraform\necho &#039;alias terraform=&quot;docker run --rm -it -v $(pwd):/workspace -w /workspace hashicorp/terraform:latest&quot;&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Or create wrapper script\nsudo tee /usr/local/bin/terraform &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/workspace \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.config/gcloud:/root/.config/gcloud:ro \\\n  -w /workspace \\\n  hashicorp/terraform:latest &quot;$@&quot;\nEOF\nsudo chmod +x /usr/local/bin/terraform</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"aws-provider-setup\" class=\"mobile-header\">AWS Provider Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install AWS CLI\ncurl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot;\nunzip awscliv2.zip\nsudo ./aws/install\n\n# Configure AWS credentials\naws configure\n# AWS Access Key ID: YOUR_ACCESS_KEY\n# AWS Secret Access Key: YOUR_SECRET_KEY  \n# Default region name: us-west-2\n# Default output format: json\n\n# Create basic Terraform configuration\nmkdir -p ~/terraform/aws-infrastructure\ncd ~/terraform/aws-infrastructure\n\n# Create main.tf\ncat &gt; main.tf &lt;&lt;EOF\nterraform {\n  required_version = &quot;&gt;= 1.0&quot;\n  required_providers {\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n  }\n}\n\nprovider &quot;aws&quot; {\n  region = var.aws_region\n}\n\n# Variables\nvariable &quot;aws_region&quot; {\n  description = &quot;AWS region&quot;\n  type        = string\n  default     = &quot;us-west-2&quot;\n}\n\nvariable &quot;environment&quot; {\n  description = &quot;Environment name&quot;\n  type        = string\n  default     = &quot;development&quot;\n}\n\n# VPC\nresource &quot;aws_vpc&quot; &quot;main&quot; {\n  cidr_block           = &quot;10.0.0.0/16&quot;\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name        = &quot;\\${var.environment}-vpc&quot;\n    Environment = var.environment\n  }\n}\n\n# Internet Gateway\nresource &quot;aws_internet_gateway&quot; &quot;main&quot; {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name        = &quot;\\${var.environment}-igw&quot;\n    Environment = var.environment\n  }\n}\n\n# Public Subnet\nresource &quot;aws_subnet&quot; &quot;public&quot; {\n  count                   = 2\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = &quot;10.0.\\${count.index + 1}.0/24&quot;\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name        = &quot;\\${var.environment}-public-subnet-\\${count.index + 1}&quot;\n    Environment = var.environment\n  }\n}\n\n# Data source for availability zones\ndata &quot;aws_availability_zones&quot; &quot;available&quot; {\n  state = &quot;available&quot;\n}\n\n# Route table\nresource &quot;aws_route_table&quot; &quot;public&quot; {\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block = &quot;0.0.0.0/0&quot;\n    gateway_id = aws_internet_gateway.main.id\n  }\n\n  tags = {\n    Name        = &quot;\\${var.environment}-public-rt&quot;\n    Environment = var.environment\n  }\n}\n\n# Route table associations\nresource &quot;aws_route_table_association&quot; &quot;public&quot; {\n  count          = length(aws_subnet.public)\n  subnet_id      = aws_subnet.public[count.index].id\n  route_table_id = aws_route_table.public.id\n}\n\n# Security group\nresource &quot;aws_security_group&quot; &quot;web&quot; {\n  name_prefix = &quot;\\${var.environment}-web-&quot;\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  tags = {\n    Name        = &quot;\\${var.environment}-web-sg&quot;\n    Environment = var.environment\n  }\n}\n\n# Outputs\noutput &quot;vpc_id&quot; {\n  value = aws_vpc.main.id\n}\n\noutput &quot;public_subnet_ids&quot; {\n  value = aws_subnet.public[*].id\n}\n\noutput &quot;security_group_id&quot; {\n  value = aws_security_group.web.id\n}\nEOF\n\n# Create terraform.tfvars\ncat &gt; terraform.tfvars &lt;&lt;EOF\naws_region  = &quot;us-west-2&quot;\nenvironment = &quot;production&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"azure-provider-setup\" class=\"mobile-header\">Azure Provider Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Azure CLI\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Login to Azure\naz login\n\n# Create service principal for Terraform\naz ad sp create-for-rbac --name &quot;terraform&quot; --role=&quot;Contributor&quot; --scopes=&quot;/subscriptions/YOUR_SUBSCRIPTION_ID&quot;\n\n# Set environment variables\nexport ARM_CLIENT_ID=&quot;your-client-id&quot;\nexport ARM_CLIENT_SECRET=&quot;your-client-secret&quot;  \nexport ARM_SUBSCRIPTION_ID=&quot;your-subscription-id&quot;\nexport ARM_TENANT_ID=&quot;your-tenant-id&quot;\n\n# Create Azure Terraform configuration\nmkdir -p ~/terraform/azure-infrastructure\ncd ~/terraform/azure-infrastructure\n\ncat &gt; main.tf &lt;&lt;EOF\nterraform {\n  required_providers {\n    azurerm = {\n      source  = &quot;hashicorp/azurerm&quot;\n      version = &quot;~&gt; 3.0&quot;\n    }\n  }\n}\n\nprovider &quot;azurerm&quot; {\n  features {}\n}\n\n# Resource Group\nresource &quot;azurerm_resource_group&quot; &quot;main&quot; {\n  name     = &quot;\\${var.environment}-rg&quot;\n  location = var.location\n  \n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Virtual Network\nresource &quot;azurerm_virtual_network&quot; &quot;main&quot; {\n  name                = &quot;\\${var.environment}-vnet&quot;\n  address_space       = [&quot;10.0.0.0/16&quot;]\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Subnet\nresource &quot;azurerm_subnet&quot; &quot;internal&quot; {\n  name                 = &quot;internal&quot;\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = [&quot;10.0.2.0/24&quot;]\n}\n\nvariable &quot;location&quot; {\n  description = &quot;Azure region&quot;\n  default     = &quot;East US&quot;\n}\n\nvariable &quot;environment&quot; {\n  description = &quot;Environment name&quot;\n  default     = &quot;development&quot;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"google-cloud-provider-setup\" class=\"mobile-header\">Google Cloud Provider Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Google Cloud SDK\necho &quot;deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main&quot; | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\nsudo apt-get update &amp;&amp; sudo apt-get install -y google-cloud-cli\n\n# Authenticate\ngcloud auth login\ngcloud config set project YOUR_PROJECT_ID\n\n# Create service account for Terraform\ngcloud iam service-accounts create terraform --display-name=&quot;Terraform Service Account&quot;\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID --member=&quot;serviceAccount:terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com&quot; --role=&quot;roles/editor&quot;\ngcloud iam service-accounts keys create ~/gcp-terraform-key.json --iam-account=terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\n\n# Set environment variable\nexport GOOGLE_APPLICATION_CREDENTIALS=&quot;$HOME/gcp-terraform-key.json&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"basic-usage\" class=\"mobile-header\">Basic Usage</h2>\n<h3 id=\"initialize-and-plan\" class=\"mobile-header\">Initialize and Plan</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize Terraform (run in project directory)\nterraform init\n\n# Format code\nterraform fmt\n\n# Validate configuration\nterraform validate\n\n# Plan changes\nterraform plan\n\n# Apply changes\nterraform apply\n\n# Show current state\nterraform show\n\n# List resources\nterraform state list\n\n# Destroy infrastructure\nterraform destroy</code></pre>\n      </div>\n    </div>\n<h3 id=\"state-management\" class=\"mobile-header\">State Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure remote state (S3 backend example)\ncat &gt; backend.tf &lt;&lt;EOF\nterraform {\n  backend &quot;s3&quot; {\n    bucket = &quot;your-terraform-state-bucket&quot;\n    key    = &quot;infrastructure/terraform.tfstate&quot;\n    region = &quot;us-west-2&quot;\n    \n    # Optional: DynamoDB table for state locking\n    dynamodb_table = &quot;terraform-state-lock&quot;\n    encrypt        = true\n  }\n}\nEOF\n\n# Initialize backend\nterraform init -migrate-state\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Move state resources\nterraform state mv aws_instance.example aws_instance.web_server</code></pre>\n      </div>\n    </div>\n<h3 id=\"workspace-management\" class=\"mobile-header\">Workspace Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create new workspace\nterraform workspace new production\nterraform workspace new staging\n\n# List workspaces\nterraform workspace list\n\n# Switch workspace\nterraform workspace select production\n\n# Show current workspace\nterraform workspace show</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"modules\" class=\"mobile-header\">Modules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create reusable module structure\nmkdir -p modules/vpc/{variables.tf,main.tf,outputs.tf}\n\n# modules/vpc/variables.tf\ncat &gt; modules/vpc/variables.tf &lt;&lt;EOF\nvariable &quot;vpc_cidr&quot; {\n  description = &quot;CIDR block for VPC&quot;\n  type        = string\n  default     = &quot;10.0.0.0/16&quot;\n}\n\nvariable &quot;environment&quot; {\n  description = &quot;Environment name&quot;\n  type        = string\n}\n\nvariable &quot;availability_zones&quot; {\n  description = &quot;List of availability zones&quot;\n  type        = list(string)\n  default     = [&quot;us-west-2a&quot;, &quot;us-west-2b&quot;]\n}\nEOF\n\n# Use module in main configuration\ncat &gt;&gt; main.tf &lt;&lt;EOF\n\nmodule &quot;vpc&quot; {\n  source = &quot;./modules/vpc&quot;\n  \n  vpc_cidr           = &quot;10.0.0.0/16&quot;\n  environment        = var.environment\n  availability_zones = [&quot;us-west-2a&quot;, &quot;us-west-2b&quot;, &quot;us-west-2c&quot;]\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"variable-files-and-environments\" class=\"mobile-header\">Variable Files and Environments</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create environment-specific variable files\ncat &gt; environments/production.tfvars &lt;&lt;EOF\nenvironment = &quot;production&quot;\ninstance_type = &quot;t3.large&quot;\nmin_size = 3\nmax_size = 10\nEOF\n\ncat &gt; environments/staging.tfvars &lt;&lt;EOF\nenvironment = &quot;staging&quot;\ninstance_type = &quot;t3.small&quot;\nmin_size = 1\nmax_size = 3\nEOF\n\n# Apply with specific variables\nterraform apply -var-file=&quot;environments/production.tfvars&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Terraform version\nterraform version\n\n# Validate configuration\nterraform validate\n\n# Check formatting\nterraform fmt -check\n\n# Plan with detailed output\nterraform plan -detailed-exitcode\n\n# Show current state\nterraform show\n\n# Check providers\nterraform providers\n\n# Verify remote state\nterraform state pull\n\n# Check for configuration drift\nterraform plan -refresh-only</code></pre>\n      </div>\n    </div>\n<h2 id=\"best-practices\" class=\"mobile-header\">Best Practices</h2>\n<h3 id=\"project-structure\" class=\"mobile-header\">Project Structure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Recommended directory structure\nmkdir -p terraform-project/{\nenvironments,\nmodules,\n.terraform,\nscripts\n}\n\n# Create .gitignore\ncat &gt; .gitignore &lt;&lt;EOF\n# Terraform files\n*.tfstate\n*.tfstate.*\n.terraform/\n.terraform.lock.hcl\ncrash.log\noverride.tf\noverride.tf.json\n*_override.tf\n*_override.tf.json\n\n# Environment files\n*.tfvars\n.env\n\n# IDE files\n.vscode/\n.idea/\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-practices\" class=\"mobile-header\">Security Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use environment variables for sensitive data\nexport TF_VAR_db_password=&quot;your-secure-password&quot;\nexport TF_VAR_api_key=&quot;your-api-key&quot;\n\n# In terraform configuration:\nvariable &quot;db_password&quot; {\n  description = &quot;Database password&quot;\n  type        = string\n  sensitive   = true\n}\n\n# Use data sources for existing resources\ndata &quot;aws_ami&quot; &quot;ubuntu&quot; {\n  most_recent = true\n  owners      = [&quot;099720109477&quot;] # Canonical\n\n  filter {\n    name   = &quot;name&quot;\n    values = [&quot;ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*&quot;]\n  }\n}\n\n# Tag everything consistently\nlocals {\n  common_tags = {\n    Environment = var.environment\n    Project     = &quot;infrastructure&quot;\n    ManagedBy   = &quot;terraform&quot;\n    Owner       = &quot;devops-team&quot;\n  }\n}\n\nresource &quot;aws_instance&quot; &quot;web&quot; {\n  # ... other configuration\n  tags = local.common_tags\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug with detailed logging\nexport TF_LOG=DEBUG\nexport TF_LOG_PATH=&quot;terraform.log&quot;\nterraform plan\n\n# Check provider configuration\nterraform providers schema -json\n\n# Inspect state file\nterraform state show aws_instance.web\n\n# Refresh state from real infrastructure\nterraform refresh\n\n# Force unlock state (if locked)\nterraform force-unlock LOCK_ID\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Check for unused variables\nterraform validate\n\n# Fix state inconsistencies\nterraform apply -refresh-only -auto-approve</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-with-cicd\" class=\"mobile-header\">Integration with CI/CD</h2>\n<h3 id=\"github-actions\" class=\"mobile-header\">GitHub Actions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create .github/workflows/terraform.yml\nmkdir -p .github/workflows\ncat &gt; .github/workflows/terraform.yml &lt;&lt;EOF\nname: Terraform\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v2\n      with:\n        terraform_version: 1.5.7\n    \n    - name: Terraform Format\n      run: terraform fmt -check\n    \n    - name: Terraform Init\n      run: terraform init\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n    \n    - name: Terraform Plan\n      run: terraform plan\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Apply\n      if: github.ref == &#039;refs/heads/main&#039; &amp;&amp; github.event_name == &#039;push&#039;\n      run: terraform apply -auto-approve\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci\" class=\"mobile-header\">GitLab CI</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create .gitlab-ci.yml\ncat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - validate\n  - plan\n  - apply\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_IN_AUTOMATION: &quot;true&quot;\n\ncache:\n  key: &quot;\\${TF_ROOT}&quot;\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform --version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform validate\n    - terraform fmt -check\n  rules:\n    - if: &#039;\\$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\nplan:\n  stage: plan\n  script:\n    - terraform plan -out=&quot;planfile&quot;\n  artifacts:\n    paths:\n      - planfile\n  rules:\n    - if: &#039;\\$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\napply:\n  stage: apply\n  script:\n    - terraform apply -input=false &quot;planfile&quot;\n  dependencies:\n    - plan\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n      when: manual\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"common-patterns\" class=\"mobile-header\">Common Patterns</h2>\n<h3 id=\"multi-environment-setup\" class=\"mobile-header\">Multi-Environment Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create environment-specific configurations\nmkdir -p environments/{dev,staging,prod}\n\n# environments/dev/main.tf\ncat &gt; environments/dev/main.tf &lt;&lt;EOF\nmodule &quot;infrastructure&quot; {\n  source = &quot;../../modules/infrastructure&quot;\n  \n  environment     = &quot;development&quot;\n  instance_type   = &quot;t3.micro&quot;\n  min_size       = 1\n  max_size       = 2\n  db_instance_class = &quot;db.t3.micro&quot;\n}\nEOF\n\n# Apply for specific environment\ncd environments/dev\nterraform init\nterraform plan\nterraform apply</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Registry</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">AWS Provider Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/hashicorp/terraform-provider-aws/tree/main/examples\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Examples</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"9 min","wordCount":1776,"lastBuilt":"2025-09-14T01:15:27.378Z"},{"name":"transmission","displayName":"Transmission","slug":"transmission","description":"Repo for transmission","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/transmission","updatedAt":"2025-09-08T03:17:27Z","createdAt":"2025-09-08T03:17:17Z","readmeRaw":"## 👋 Welcome to transmission 🚀  \n\ntransmission README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-transmission\" class=\"mobile-header\">👋 Welcome to transmission 🚀  </h2>\n<p class=\"mobile-paragraph\">transmission README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:27.121Z"},{"name":"truenas-scale","displayName":"Truenas Scale","slug":"truenas-scale","description":"Repo for truenas-scale","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/truenas-scale","updatedAt":"2025-09-08T03:17:40Z","createdAt":"2025-09-08T03:17:30Z","readmeRaw":"## 👋 Welcome to truenas-scale 🚀  \n\ntruenas-scale README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-truenas-scale\" class=\"mobile-header\">👋 Welcome to truenas-scale 🚀  </h2>\n<p class=\"mobile-paragraph\">truenas-scale README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:27.006Z"},{"name":"unifi-controller","displayName":"Unifi Controller","slug":"unifi-controller","description":"Repo for unifi-controller","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/unifi-controller","updatedAt":"2025-09-08T03:17:53Z","createdAt":"2025-09-08T03:17:43Z","readmeRaw":"## 👋 Welcome to unifi-controller 🚀  \n\nunifi-controller README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-unifi-controller\" class=\"mobile-header\">👋 Welcome to unifi-controller 🚀  </h2>\n<p class=\"mobile-paragraph\">unifi-controller README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:26.889Z"},{"name":"vscode-server","displayName":"Vscode Server","slug":"vscode-server","description":"Repo for vscode-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/vscode-server","updatedAt":"2025-09-08T03:18:10Z","createdAt":"2023-08-28T03:50:15Z","readmeRaw":"### VS-Code docker\n\n```shell\nsudo mkdir -p /var/lib/docker/storage/vscode/config\n\nsudo docker run -d \\\n  --name=code-server \\\n  -e PUID=0 \\\n  -e PGID=0 \\\n  -e TZ=America/New_York \\\n  -e PASSWORD=password \\\n  -e SUDO_PASSWORD=password \\\n  -e PROXY_DOMAIN=code-server.casjay.in \\\n  -p 8443:8443 \\\n  -v /var/lib/docker/storage/vscode/config:/config \\\n  --restart always \\\n  linuxserver/code-server\n```\n","readmeHtml":"<h3 id=\"vs-code-docker\" class=\"mobile-header\">VS-Code docker</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo mkdir -p /var/lib/docker/storage/vscode/config\n\nsudo docker run -d \\\n  --name=code-server \\\n  -e PUID=0 \\\n  -e PGID=0 \\\n  -e TZ=America/New_York \\\n  -e PASSWORD=password \\\n  -e SUDO_PASSWORD=password \\\n  -e PROXY_DOMAIN=code-server.casjay.in \\\n  -p 8443:8443 \\\n  -v /var/lib/docker/storage/vscode/config:/config \\\n  --restart always \\\n  linuxserver/code-server</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":45,"lastBuilt":"2025-09-14T01:15:26.632Z"},{"name":"webvirt","displayName":"Webvirt","slug":"webvirt","description":"Repo for webvirt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/webvirt","updatedAt":"2025-09-08T03:18:15Z","createdAt":"2023-08-28T03:50:25Z","readmeRaw":"# CentOS 7 WebVirt\n\n```bash\nyum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx\nyum -y install gcc python-devel\n\npip install --upgrade pip\npip install numpy\n\ngit clone git://github.com/retspen/webvirtmgr.git /usr/share/webvirtmgr\ncd /usr/share/webvirtmgr\npip install -r requirements.txt\n\n./manage.py syncdb\n./manage.py collectstatic\n\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt.supervisord.ini -O  /etc/supervisord.d/webvirtmgr.ini\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt-nginx.conf -O /etc/nginx/conf.d/webvirt.conf\n```\n","readmeHtml":"<h1 id=\"centos-7-webvirt\" class=\"mobile-header\">CentOS 7 WebVirt</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx\nyum -y install gcc python-devel\n\npip install --upgrade pip\npip install numpy\n\ngit clone git://github.com/retspen/webvirtmgr.git /usr/share/webvirtmgr\ncd /usr/share/webvirtmgr\npip install -r requirements.txt\n\n./manage.py syncdb\n./manage.py collectstatic\n\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt.supervisord.ini -O  /etc/supervisord.d/webvirtmgr.ini\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt-nginx.conf -O /etc/nginx/conf.d/webvirt.conf</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T01:15:26.497Z"},{"name":"xen-orchestra","displayName":"Xen Orchestra","slug":"xen-orchestra","description":"Repo for xen-orchestra","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/xen-orchestra","updatedAt":"2025-09-08T03:18:43Z","createdAt":"2023-08-28T03:50:35Z","readmeRaw":"# xen-orchestra - CentOS\n\n```bash\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall 'Development Tools'\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## xen-orchestra - Debian\n\n```bash\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## xen-orchestra - Updating\n\n```bash\ncd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build\n```\n","readmeHtml":"<h1 id=\"xen-orchestra-centos\" class=\"mobile-header\">xen-orchestra - CentOS</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall &#039;Development Tools&#039;\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-debian\" class=\"mobile-header\">xen-orchestra - Debian</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-updating\" class=\"mobile-header\">xen-orchestra - Updating</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":152,"lastBuilt":"2025-09-14T01:15:26.112Z"},{"name":"yacht","displayName":"Yacht","slug":"yacht","description":"Repo for yacht","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/yacht","updatedAt":"2025-09-08T03:18:56Z","createdAt":"2025-09-08T03:18:45Z","readmeRaw":"## 👋 Welcome to yacht 🚀  \n\nyacht README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-yacht\" class=\"mobile-header\">👋 Welcome to yacht 🚀  </h2>\n<p class=\"mobile-paragraph\">yacht README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:25.985Z"},{"name":"zigbee2mqtt","displayName":"Zigbee2mqtt","slug":"zigbee2mqtt","description":"Repo for zigbee2mqtt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/zigbee2mqtt","updatedAt":"2025-09-08T03:19:22Z","createdAt":"2025-09-08T03:19:12Z","readmeRaw":"## 👋 Welcome to zigbee2mqtt 🚀  \n\nzigbee2mqtt README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-zigbee2mqtt\" class=\"mobile-header\">👋 Welcome to zigbee2mqtt 🚀  </h2>\n<p class=\"mobile-paragraph\">zigbee2mqtt README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:25.737Z"}]},"__N_SSG":true}