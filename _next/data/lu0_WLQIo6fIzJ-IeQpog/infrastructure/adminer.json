{"pageProps":{"guide":{"name":"adminer","displayName":"Adminer","slug":"adminer","description":"Repo for adminer","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adminer","updatedAt":"2025-09-08T03:04:32Z","createdAt":"2025-09-08T03:04:22Z","readmeRaw":"## 👋 Welcome to adminer 🚀  \n\nadminer README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adminer\" class=\"mobile-header\">👋 Welcome to adminer 🚀  </h2>\n<p class=\"mobile-paragraph\">adminer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:36.353Z"},"category":{"key":"infrastructure","name":"Infrastructure","description":"DevOps and infrastructure automation tools","icon":"🏗️","color":"#44475a","keywords":["ansible","terraform","gitlab","jenkins","consul","etcd"]},"relatedGuides":[{"name":".claude","displayName":".claude","slug":".claude","description":"Repo for .claude","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/.claude","updatedAt":"2025-09-08T03:05:59Z","createdAt":"2025-09-08T03:05:48Z","readmeRaw":"## 👋 Welcome to .claude 🚀  \n\n.claude README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-claude\" class=\"mobile-header\">👋 Welcome to .claude 🚀  </h2>\n<p class=\"mobile-paragraph\">.claude README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:35.466Z"},{"name":"adguard-home","displayName":"Adguard Home","slug":"adguard-home","description":"Repo for adguard-home","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adguard-home","updatedAt":"2025-09-08T03:04:18Z","createdAt":"2025-09-08T03:04:08Z","readmeRaw":"## 👋 Welcome to adguard-home 🚀  \n\nadguard-home README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adguard-home\" class=\"mobile-header\">👋 Welcome to adguard-home 🚀  </h2>\n<p class=\"mobile-paragraph\">adguard-home README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:36.477Z"},{"name":"ansible","displayName":"Ansible","slug":"ansible","description":"Repo for ansible","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ansible","updatedAt":"2025-09-08T03:04:45Z","createdAt":"2025-09-08T03:04:35Z","readmeRaw":"# Ansible Installation Guide\n\nAgentless automation platform for configuration management, application deployment, and task automation across multiple systems.\n\n## Prerequisites\n\n- Linux control machine (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- SSH access to target hosts\n- Python 3.8+ on control machine\n- Python 2.7+ or 3.5+ on target hosts\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Ansible\nsudo apt install -y ansible\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible\n\n# For CentOS Stream/RHEL 8+\nsudo dnf install -y ansible\n```\n\n### Using pip (Latest Version)\n```bash\n# Install pip if not available\nsudo apt install -y python3-pip\n\n# Install Ansible via pip\npip3 install --user ansible\n\n# Add to PATH\necho 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc\nsource ~/.bashrc\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n```\n\n### Using Docker\n```bash\n# Create Ansible Docker container\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest \\\n  ansible-playbook playbook.yml\n\n# Create alias for convenience\necho 'alias ansible-docker=\"docker run --rm -it -v $(pwd):/ansible -v ~/.ssh:/root/.ssh:ro --workdir /ansible ansible/ansible:latest\"' >> ~/.bashrc\n```\n\n## Configuration\n\n### Inventory Setup\n```bash\n# Create project structure\nmkdir -p ~/ansible-project/{inventories,playbooks,roles,group_vars,host_vars}\ncd ~/ansible-project\n\n# Create inventory file\ncat > inventories/production/hosts.yml <<EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web1:\n          ansible_host: 192.168.1.10\n          ansible_user: ubuntu\n        web2:\n          ansible_host: 192.168.1.11\n          ansible_user: ubuntu\n    dbservers:\n      hosts:\n        db1:\n          ansible_host: 192.168.1.20\n          ansible_user: ubuntu\n        db2:\n          ansible_host: 192.168.1.21\n          ansible_user: ubuntu\n    loadbalancers:\n      hosts:\n        lb1:\n          ansible_host: 192.168.1.30\n          ansible_user: ubuntu\n\nwebservers:\n  vars:\n    http_port: 80\n    max_clients: 200\n\ndbservers:\n  vars:\n    mysql_port: 3306\n    mysql_root_password: \"{{ vault_mysql_root_password }}\"\nEOF\n\n# Create ansible configuration\ncat > ansible.cfg <<EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ubuntu\nprivate_key_file = ~/.ssh/id_rsa\nhost_key_checking = False\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=60s\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nEOF\n```\n\n### Ansible Vault for Secrets\n```bash\n# Create encrypted vault file\nansible-vault create group_vars/all/vault.yml\n# Enter vault password and add:\n# vault_mysql_root_password: your_secure_password\n# vault_api_key: your_api_key\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file\nansible-vault view group_vars/all/vault.yml\n\n# Create vault password file\necho \"your_vault_password\" > ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Update ansible.cfg\necho \"vault_password_file = ~/.ansible_vault_pass\" >> ansible.cfg\n```\n\n## Playbooks\n\n### Basic System Setup Playbook\n```bash\ncat > playbooks/system-setup.yml <<EOF\n---\n- name: System Setup and Hardening\n  hosts: all\n  become: yes\n  vars:\n    packages:\n      - curl\n      - wget\n      - vim\n      - htop\n      - fail2ban\n      - ufw\n      \n  tasks:\n    - name: Update package cache\n      apt:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family == \"Debian\"\n    \n    - name: Update package cache (RHEL/CentOS)\n      yum:\n        update_cache: yes\n      when: ansible_os_family == \"RedHat\"\n    \n    - name: Install essential packages\n      package:\n        name: \"{{ packages }}\"\n        state: present\n    \n    - name: Create admin user\n      user:\n        name: admin\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n    \n    - name: Configure SSH\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: \"{{ item.regexp }}\"\n        line: \"{{ item.line }}\"\n        backup: yes\n      loop:\n        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }\n        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }\n        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }\n      notify: restart ssh\n    \n    - name: Configure UFW firewall\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n    \n    - name: Allow SSH through firewall\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n  \n  handlers:\n    - name: restart ssh\n      service:\n        name: \"{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}\"\n        state: restarted\nEOF\n```\n\n### Web Server Deployment Playbook\n```bash\ncat > playbooks/nginx-deployment.yml <<EOF\n---\n- name: Deploy NGINX Web Server\n  hosts: webservers\n  become: yes\n  vars:\n    domain_name: example.com\n    \n  tasks:\n    - name: Install NGINX\n      package:\n        name: nginx\n        state: present\n    \n    - name: Create document root\n      file:\n        path: \"/var/www/{{ domain_name }}/html\"\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n    \n    - name: Deploy website content\n      template:\n        src: templates/index.html.j2\n        dest: \"/var/www/{{ domain_name }}/html/index.html\"\n        owner: www-data\n        group: www-data\n        mode: '0644'\n      notify: reload nginx\n    \n    - name: Configure NGINX virtual host\n      template:\n        src: templates/nginx-vhost.conf.j2\n        dest: \"/etc/nginx/sites-available/{{ domain_name }}.conf\"\n        backup: yes\n      notify: reload nginx\n    \n    - name: Enable NGINX site\n      file:\n        src: \"/etc/nginx/sites-available/{{ domain_name }}.conf\"\n        dest: \"/etc/nginx/sites-enabled/{{ domain_name }}.conf\"\n        state: link\n      notify: reload nginx\n    \n    - name: Ensure NGINX is running\n      service:\n        name: nginx\n        state: started\n        enabled: yes\n    \n    - name: Configure firewall for web traffic\n      ufw:\n        rule: allow\n        port: \"{{ item }}\"\n        proto: tcp\n      loop:\n        - 80\n        - 443\n  \n  handlers:\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF\n```\n\n### Multi-Environment Deployment\n```bash\ncat > playbooks/application-deployment.yml <<EOF\n---\n- name: Deploy Application Stack\n  hosts: all\n  become: yes\n  vars:\n    app_name: myapp\n    app_version: \"{{ lookup('env', 'APP_VERSION') | default('latest') }}\"\n    environment: \"{{ ansible_environment | default('production') }}\"\n    \n  tasks:\n    - name: Create application user\n      user:\n        name: \"{{ app_name }}\"\n        system: yes\n        shell: /bin/false\n        home: \"/opt/{{ app_name }}\"\n        create_home: yes\n    \n    - name: Deploy application\n      unarchive:\n        src: \"https://github.com/company/{{ app_name }}/releases/download/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/opt/{{ app_name }}\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        remote_src: yes\n      notify: restart application\n    \n    - name: Install systemd service\n      template:\n        src: templates/app.service.j2\n        dest: \"/etc/systemd/system/{{ app_name }}.service\"\n      notify:\n        - daemon reload\n        - restart application\n    \n    - name: Start and enable application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: started\n        enabled: yes\n        daemon_reload: yes\n  \n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n    \n    - name: restart application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: restarted\nEOF\n```\n\n## Roles Development\n\n```bash\n# Create role structure\nansible-galaxy init roles/nginx\n\n# roles/nginx/tasks/main.yml\ncat > roles/nginx/tasks/main.yml <<EOF\n---\n- name: Install NGINX\n  package:\n    name: nginx\n    state: present\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure NGINX\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n  notify: reload nginx\n\n- name: Create virtual hosts\n  template:\n    src: vhost.conf.j2\n    dest: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n  loop: \"{{ nginx_vhosts }}\"\n  when: nginx_vhosts is defined\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    dest: \"/etc/nginx/sites-enabled/{{ item.name }}.conf\"\n    state: link\n  loop: \"{{ nginx_vhosts }}\"\n  when: nginx_vhosts is defined\n  notify: reload nginx\nEOF\n\n# Use role in playbook\ncat > playbooks/webserver.yml <<EOF\n---\n- name: Configure Web Servers\n  hosts: webservers\n  become: yes\n  roles:\n    - nginx\n  vars:\n    nginx_vhosts:\n      - name: example.com\n        root: /var/www/example.com/html\n        index: index.html\nEOF\n```\n\n## Verification\n\n```bash\n# Check Ansible version\nansible --version\n\n# Test connectivity to all hosts\nansible all -m ping\n\n# Check facts gathering\nansible all -m setup\n\n# Test specific host\nansible web1 -m command -a \"uptime\"\n\n# Run playbook in check mode (dry run)\nansible-playbook playbooks/system-setup.yml --check\n\n# Run playbook with specific inventory\nansible-playbook -i inventories/staging/hosts.yml playbooks/system-setup.yml\n\n# Run specific tasks\nansible-playbook playbooks/system-setup.yml --tags \"firewall\"\n\n# Skip specific tasks\nansible-playbook playbooks/system-setup.yml --skip-tags \"packages\"\n\n# Run on specific hosts\nansible-playbook playbooks/system-setup.yml --limit webservers\n\n# Verbose output\nansible-playbook playbooks/system-setup.yml -vvv\n```\n\n## Performance and Optimization\n\n```bash\n# Parallel execution\nansible-playbook playbooks/system-setup.yml --forks 10\n\n# Pipelining for faster execution\necho \"pipelining = True\" >> ansible.cfg\n\n# Fact caching\necho \"gathering = smart\" >> ansible.cfg\necho \"fact_caching = jsonfile\" >> ansible.cfg\necho \"fact_caching_connection = ~/.ansible/facts_cache\" >> ansible.cfg\necho \"fact_caching_timeout = 86400\" >> ansible.cfg\n\n# Strategy plugins\nansible-playbook playbooks/system-setup.yml --strategy free\n\n# Async tasks for long-running operations\n- name: Long running task\n  command: /usr/bin/long_running_command\n  async: 300\n  poll: 5\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.ansible.com/)\n- [Ansible Galaxy](https://galaxy.ansible.com/)\n- [Best Practices](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html)\n- [Ansible Examples](https://github.com/ansible/ansible-examples)\n- [Community Collections](https://docs.ansible.com/ansible/latest/collections/index.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"ansible-installation-guide\" class=\"mobile-header\">Ansible Installation Guide</h1>\n<p class=\"mobile-paragraph\">Agentless automation platform for configuration management, application deployment, and task automation across multiple systems.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux control machine (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">SSH access to target hosts</li>\n<li class=\"mobile-list-item\">Python 3.8+ on control machine</li>\n<li class=\"mobile-list-item\">Python 2.7+ or 3.5+ on target hosts</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Ansible\nsudo apt install -y ansible\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible\n\n# For CentOS Stream/RHEL 8+\nsudo dnf install -y ansible</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-pip-latest-version\" class=\"mobile-header\">Using pip (Latest Version)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install pip if not available\nsudo apt install -y python3-pip\n\n# Install Ansible via pip\npip3 install --user ansible\n\n# Add to PATH\necho &#039;export PATH=$PATH:~/.local/bin&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Ansible Docker container\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest \\\n  ansible-playbook playbook.yml\n\n# Create alias for convenience\necho &#039;alias ansible-docker=&quot;docker run --rm -it -v $(pwd):/ansible -v ~/.ssh:/root/.ssh:ro --workdir /ansible ansible/ansible:latest&quot;&#039; &gt;&gt; ~/.bashrc</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"inventory-setup\" class=\"mobile-header\">Inventory Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create project structure\nmkdir -p ~/ansible-project/{inventories,playbooks,roles,group_vars,host_vars}\ncd ~/ansible-project\n\n# Create inventory file\ncat &gt; inventories/production/hosts.yml &lt;&lt;EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web1:\n          ansible_host: 192.168.1.10\n          ansible_user: ubuntu\n        web2:\n          ansible_host: 192.168.1.11\n          ansible_user: ubuntu\n    dbservers:\n      hosts:\n        db1:\n          ansible_host: 192.168.1.20\n          ansible_user: ubuntu\n        db2:\n          ansible_host: 192.168.1.21\n          ansible_user: ubuntu\n    loadbalancers:\n      hosts:\n        lb1:\n          ansible_host: 192.168.1.30\n          ansible_user: ubuntu\n\nwebservers:\n  vars:\n    http_port: 80\n    max_clients: 200\n\ndbservers:\n  vars:\n    mysql_port: 3306\n    mysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\nEOF\n\n# Create ansible configuration\ncat &gt; ansible.cfg &lt;&lt;EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ubuntu\nprivate_key_file = ~/.ssh/id_rsa\nhost_key_checking = False\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=60s\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-vault-for-secrets\" class=\"mobile-header\">Ansible Vault for Secrets</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create encrypted vault file\nansible-vault create group_vars/all/vault.yml\n# Enter vault password and add:\n# vault_mysql_root_password: your_secure_password\n# vault_api_key: your_api_key\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file\nansible-vault view group_vars/all/vault.yml\n\n# Create vault password file\necho &quot;your_vault_password&quot; &gt; ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Update ansible.cfg\necho &quot;vault_password_file = ~/.ansible_vault_pass&quot; &gt;&gt; ansible.cfg</code></pre>\n      </div>\n    </div>\n<h2 id=\"playbooks\" class=\"mobile-header\">Playbooks</h2>\n<h3 id=\"basic-system-setup-playbook\" class=\"mobile-header\">Basic System Setup Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/system-setup.yml &lt;&lt;EOF\n---\n- name: System Setup and Hardening\n  hosts: all\n  become: yes\n  vars:\n    packages:\n      - curl\n      - wget\n      - vim\n      - htop\n      - fail2ban\n      - ufw\n      \n  tasks:\n    - name: Update package cache\n      apt:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family == &quot;Debian&quot;\n    \n    - name: Update package cache (RHEL/CentOS)\n      yum:\n        update_cache: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n    \n    - name: Install essential packages\n      package:\n        name: &quot;{{ packages }}&quot;\n        state: present\n    \n    - name: Create admin user\n      user:\n        name: admin\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n    \n    - name: Configure SSH\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: &quot;{{ item.regexp }}&quot;\n        line: &quot;{{ item.line }}&quot;\n        backup: yes\n      loop:\n        - { regexp: &#039;^#?PermitRootLogin&#039;, line: &#039;PermitRootLogin no&#039; }\n        - { regexp: &#039;^#?PasswordAuthentication&#039;, line: &#039;PasswordAuthentication no&#039; }\n        - { regexp: &#039;^#?X11Forwarding&#039;, line: &#039;X11Forwarding no&#039; }\n      notify: restart ssh\n    \n    - name: Configure UFW firewall\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n    \n    - name: Allow SSH through firewall\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n  \n  handlers:\n    - name: restart ssh\n      service:\n        name: &quot;{{ &#039;ssh&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sshd&#039; }}&quot;\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"web-server-deployment-playbook\" class=\"mobile-header\">Web Server Deployment Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/nginx-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy NGINX Web Server\n  hosts: webservers\n  become: yes\n  vars:\n    domain_name: example.com\n    \n  tasks:\n    - name: Install NGINX\n      package:\n        name: nginx\n        state: present\n    \n    - name: Create document root\n      file:\n        path: &quot;/var/www/{{ domain_name }}/html&quot;\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: &#039;0755&#039;\n    \n    - name: Deploy website content\n      template:\n        src: templates/index.html.j2\n        dest: &quot;/var/www/{{ domain_name }}/html/index.html&quot;\n        owner: www-data\n        group: www-data\n        mode: &#039;0644&#039;\n      notify: reload nginx\n    \n    - name: Configure NGINX virtual host\n      template:\n        src: templates/nginx-vhost.conf.j2\n        dest: &quot;/etc/nginx/sites-available/{{ domain_name }}.conf&quot;\n        backup: yes\n      notify: reload nginx\n    \n    - name: Enable NGINX site\n      file:\n        src: &quot;/etc/nginx/sites-available/{{ domain_name }}.conf&quot;\n        dest: &quot;/etc/nginx/sites-enabled/{{ domain_name }}.conf&quot;\n        state: link\n      notify: reload nginx\n    \n    - name: Ensure NGINX is running\n      service:\n        name: nginx\n        state: started\n        enabled: yes\n    \n    - name: Configure firewall for web traffic\n      ufw:\n        rule: allow\n        port: &quot;{{ item }}&quot;\n        proto: tcp\n      loop:\n        - 80\n        - 443\n  \n  handlers:\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"multi-environment-deployment\" class=\"mobile-header\">Multi-Environment Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/application-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy Application Stack\n  hosts: all\n  become: yes\n  vars:\n    app_name: myapp\n    app_version: &quot;{{ lookup(&#039;env&#039;, &#039;APP_VERSION&#039;) | default(&#039;latest&#039;) }}&quot;\n    environment: &quot;{{ ansible_environment | default(&#039;production&#039;) }}&quot;\n    \n  tasks:\n    - name: Create application user\n      user:\n        name: &quot;{{ app_name }}&quot;\n        system: yes\n        shell: /bin/false\n        home: &quot;/opt/{{ app_name }}&quot;\n        create_home: yes\n    \n    - name: Deploy application\n      unarchive:\n        src: &quot;https://github.com/company/{{ app_name }}/releases/download/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/opt/{{ app_name }}&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        remote_src: yes\n      notify: restart application\n    \n    - name: Install systemd service\n      template:\n        src: templates/app.service.j2\n        dest: &quot;/etc/systemd/system/{{ app_name }}.service&quot;\n      notify:\n        - daemon reload\n        - restart application\n    \n    - name: Start and enable application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: started\n        enabled: yes\n        daemon_reload: yes\n  \n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n    \n    - name: restart application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"roles-development\" class=\"mobile-header\">Roles Development</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create role structure\nansible-galaxy init roles/nginx\n\n# roles/nginx/tasks/main.yml\ncat &gt; roles/nginx/tasks/main.yml &lt;&lt;EOF\n---\n- name: Install NGINX\n  package:\n    name: nginx\n    state: present\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure NGINX\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n  notify: reload nginx\n\n- name: Create virtual hosts\n  template:\n    src: vhost.conf.j2\n    dest: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n  loop: &quot;{{ nginx_vhosts }}&quot;\n  when: nginx_vhosts is defined\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    dest: &quot;/etc/nginx/sites-enabled/{{ item.name }}.conf&quot;\n    state: link\n  loop: &quot;{{ nginx_vhosts }}&quot;\n  when: nginx_vhosts is defined\n  notify: reload nginx\nEOF\n\n# Use role in playbook\ncat &gt; playbooks/webserver.yml &lt;&lt;EOF\n---\n- name: Configure Web Servers\n  hosts: webservers\n  become: yes\n  roles:\n    - nginx\n  vars:\n    nginx_vhosts:\n      - name: example.com\n        root: /var/www/example.com/html\n        index: index.html\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Ansible version\nansible --version\n\n# Test connectivity to all hosts\nansible all -m ping\n\n# Check facts gathering\nansible all -m setup\n\n# Test specific host\nansible web1 -m command -a &quot;uptime&quot;\n\n# Run playbook in check mode (dry run)\nansible-playbook playbooks/system-setup.yml --check\n\n# Run playbook with specific inventory\nansible-playbook -i inventories/staging/hosts.yml playbooks/system-setup.yml\n\n# Run specific tasks\nansible-playbook playbooks/system-setup.yml --tags &quot;firewall&quot;\n\n# Skip specific tasks\nansible-playbook playbooks/system-setup.yml --skip-tags &quot;packages&quot;\n\n# Run on specific hosts\nansible-playbook playbooks/system-setup.yml --limit webservers\n\n# Verbose output\nansible-playbook playbooks/system-setup.yml -vvv</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-and-optimization\" class=\"mobile-header\">Performance and Optimization</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Parallel execution\nansible-playbook playbooks/system-setup.yml --forks 10\n\n# Pipelining for faster execution\necho &quot;pipelining = True&quot; &gt;&gt; ansible.cfg\n\n# Fact caching\necho &quot;gathering = smart&quot; &gt;&gt; ansible.cfg\necho &quot;fact_caching = jsonfile&quot; &gt;&gt; ansible.cfg\necho &quot;fact_caching_connection = ~/.ansible/facts_cache&quot; &gt;&gt; ansible.cfg\necho &quot;fact_caching_timeout = 86400&quot; &gt;&gt; ansible.cfg\n\n# Strategy plugins\nansible-playbook playbooks/system-setup.yml --strategy free\n\n# Async tasks for long-running operations\n- name: Long running task\n  command: /usr/bin/long_running_command\n  async: 300\n  poll: 5</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://galaxy.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Galaxy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/ansible/ansible-examples\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Examples</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/collections/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Collections</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"7 min","wordCount":1212,"lastBuilt":"2025-09-14T01:15:36.221Z"}]},"__N_SSG":true}