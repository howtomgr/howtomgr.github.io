{"pageProps":{"guide":{"name":"gitlab","displayName":"Gitlab","slug":"gitlab","description":"Repo for gitlab","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitlab","updatedAt":"2025-09-08T03:08:07Z","createdAt":"2025-09-08T03:07:56Z","readmeRaw":"# GitLab Installation Guide\n\nComplete DevOps platform with Git repository management, CI/CD pipelines, issue tracking, and container registry.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- 8GB RAM minimum, 16GB+ recommended for production\n- 4 CPU cores minimum\n- 20GB+ available disk space\n- Domain name for external access\n\n## Installation\n\n### Using Omnibus Package (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Install dependencies\nsudo apt update\nsudo apt install -y ca-certificates curl openssh-server postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab\nsudo apt install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Install dependencies\nsudo yum install -y curl policycoreutils-python-utils openssh-server postfix\n\n# Enable SSH and Postfix\nsudo systemctl enable --now sshd postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo yum install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure\n```\n\n### Using Docker Compose\n```bash\n# Create GitLab directory\nmkdir -p ~/gitlab/{config,logs,data}\ncd ~/gitlab\n\n# Set proper ownership\nsudo chown -R 998:998 config logs data\n\n# Create docker-compose.yml\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  gitlab:\n    image: gitlab/gitlab-ee:latest\n    restart: unless-stopped\n    hostname: gitlab.example.com\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url 'https://gitlab.example.com'\n        \n        # GitLab configuration\n        gitlab_rails['gitlab_shell_ssh_port'] = 2222\n        gitlab_rails['time_zone'] = 'America/New_York'\n        gitlab_rails['gitlab_email_enabled'] = true\n        gitlab_rails['gitlab_email_from'] = 'gitlab@example.com'\n        gitlab_rails['gitlab_email_display_name'] = 'GitLab'\n        \n        # Database configuration\n        postgresql['shared_preload_libraries'] = 'pg_stat_statements'\n        postgresql['track_activity_query_size'] = 1024\n        \n        # Redis configuration\n        redis['save'] = '900 1 300 10 60 10000'\n        \n        # Backup configuration\n        gitlab_rails['backup_keep_time'] = 604800  # 7 days\n        \n        # Container Registry\n        registry_external_url 'https://registry.example.com'\n        gitlab_rails['registry_enabled'] = true\n        \n        # Monitoring\n        prometheus_monitoring['enable'] = true\n        grafana['enable'] = true\n        \n        # NGINX\n        nginx['listen_port'] = 80\n        nginx['listen_https'] = false\n        nginx['redirect_http_to_https'] = false\n        \n        # Let's Encrypt (disable for reverse proxy setup)\n        letsencrypt['enable'] = false\n        \n    ports:\n      - '80:80'\n      - '443:443'\n      - '2222:22'\n    volumes:\n      - './config:/etc/gitlab'\n      - './logs:/var/log/gitlab'\n      - './data:/var/opt/gitlab'\n    shm_size: '256m'\n    networks:\n      - gitlab\n\nnetworks:\n  gitlab:\n    driver: bridge\nEOF\n\n# Start GitLab\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f gitlab\n```\n\n## Configuration\n\n### Basic Configuration (/etc/gitlab/gitlab.rb)\n```bash\n# Edit GitLab configuration\nsudo nano /etc/gitlab/gitlab.rb\n\n# Key settings:\nexternal_url 'https://gitlab.example.com'\n\n# Email configuration\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.example.com\"\ngitlab_rails['smtp_port'] = 587\ngitlab_rails['smtp_user_name'] = \"smtp_username\"\ngitlab_rails['smtp_password'] = \"smtp_password\"\ngitlab_rails['smtp_domain'] = \"example.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = false\n\ngitlab_rails['gitlab_email_from'] = 'gitlab@example.com'\ngitlab_rails['gitlab_email_display_name'] = 'GitLab'\n\n# Backup configuration\ngitlab_rails['backup_keep_time'] = 604800  # 7 days\ngitlab_rails['backup_upload_connection'] = {\n  'provider' => 'AWS',\n  'aws_access_key_id' => 'your_access_key',\n  'aws_secret_access_key' => 'your_secret_key',\n  'region' => 'us-east-1'\n}\ngitlab_rails['backup_upload_remote_directory'] = 'gitlab-backups'\n\n# Container Registry\nregistry_external_url 'https://registry.example.com'\ngitlab_rails['registry_enabled'] = true\n\n# CI/CD settings\ngitlab_ci['gitlab_ci_all_broken_builds'] = true\ngitlab_ci['gitlab_ci_add_pusher'] = true\n\n# Monitoring\nprometheus_monitoring['enable'] = true\ngrafana['enable'] = true\ngrafana['admin_password'] = 'grafana_admin_password'\n\n# Apply configuration\nsudo gitlab-ctl reconfigure\n```\n\n### NGINX Reverse Proxy (External)\n```bash\n# Create NGINX configuration for GitLab reverse proxy\nsudo tee /etc/nginx/sites-available/gitlab > /dev/null <<EOF\nupstream gitlab-workhorse {\n  server unix:/var/opt/gitlab/gitlab-workhorse/sockets/socket;\n}\n\nserver {\n  listen 80;\n  server_name gitlab.example.com;\n  return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name gitlab.example.com;\n\n  ssl_certificate /etc/ssl/certs/gitlab.crt;\n  ssl_certificate_key /etc/ssl/private/gitlab.key;\n\n  location / {\n    proxy_pass http://gitlab-workhorse;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n    proxy_set_header X-Forwarded-Ssl on;\n    \n    # GitLab specific headers\n    proxy_set_header X-Forwarded-Host \\$http_host;\n    proxy_set_header X-Forwarded-Server \\$host;\n    \n    # WebSocket support\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \\$http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    \n    # Timeout settings\n    proxy_connect_timeout 60s;\n    proxy_send_timeout 60s;\n    proxy_read_timeout 60s;\n  }\n}\n\n# Container Registry\nserver {\n  listen 443 ssl http2;\n  server_name registry.example.com;\n\n  ssl_certificate /etc/ssl/certs/registry.crt;\n  ssl_certificate_key /etc/ssl/private/registry.key;\n\n  # disable any limits to avoid HTTP 413 for large image uploads\n  client_max_body_size 0;\n\n  # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)\n  chunked_transfer_encoding on;\n\n  location /v2/ {\n    proxy_pass http://localhost:5000;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n  }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n## GitLab Runner Setup\n\n### Install GitLab Runner\n```bash\n# Add GitLab Runner repository\ncurl -L \"https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh\" | sudo bash\n\n# Install GitLab Runner\nsudo apt install -y gitlab-runner\n\n# Or manual installation\nsudo curl -L --output /usr/local/bin/gitlab-runner \"https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64\"\nsudo chmod +x /usr/local/bin/gitlab-runner\nsudo useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash\nsudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner\nsudo gitlab-runner start\n```\n\n### Register Runner\n```bash\n# Register runner (get token from GitLab Admin → Runners)\nsudo gitlab-runner register \\\n  --url \"https://gitlab.example.com/\" \\\n  --registration-token \"REGISTRATION_TOKEN\" \\\n  --description \"docker-runner\" \\\n  --tag-list \"docker,aws\" \\\n  --run-untagged=\"true\" \\\n  --locked=\"false\" \\\n  --access-level=\"not_protected\" \\\n  --executor \"docker\" \\\n  --docker-image alpine:latest \\\n  --docker-privileged \\\n  --docker-volumes \"/certs/client\"\n\n# Configure runner for Docker-in-Docker\nsudo tee -a /etc/gitlab-runner/config.toml > /dev/null <<EOF\n[[runners]]\n  [runners.docker]\n    privileged = true\n    volumes = [\"/cache\", \"/certs/client\"]\n    disable_cache = false\n    shm_size = 0\nEOF\n\nsudo systemctl restart gitlab-runner\n```\n\n## Performance Optimization\n\n### Database Tuning\n```bash\n# PostgreSQL optimization for GitLab\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# PostgreSQL settings\npostgresql['shared_buffers'] = \"1GB\"\npostgresql['effective_cache_size'] = \"4GB\"\npostgresql['checkpoint_completion_target'] = 0.9\npostgresql['wal_buffers'] = \"16MB\"\npostgresql['default_statistics_target'] = 100\npostgresql['random_page_cost'] = 1.1\npostgresql['effective_io_concurrency'] = 200\npostgresql['work_mem'] = \"4MB\"\npostgresql['min_wal_size'] = \"1GB\"\npostgresql['max_wal_size'] = \"4GB\"\npostgresql['max_worker_processes'] = 8\npostgresql['max_parallel_workers_per_gather'] = 4\npostgresql['max_parallel_workers'] = 8\npostgresql['max_parallel_maintenance_workers'] = 4\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Redis Configuration\n```bash\n# Redis optimization\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Redis settings\nredis['maxmemory'] = \"1gb\"\nredis['maxmemory_policy'] = \"allkeys-lru\"\nredis['save'] = [\"900 1\", \"300 10\", \"60 10000\"]\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### GitLab Web Server Tuning\n```bash\n# Unicorn/Puma optimization\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Puma settings (GitLab 13.0+)\npuma['worker_processes'] = 4\npuma['min_threads'] = 4\npuma['max_threads'] = 4\n\n# Sidekiq settings\nsidekiq['max_concurrency'] = 25\nsidekiq['min_concurrency'] = 10\n\n# Gitaly settings\ngitaly['ruby_max_rss'] = 300000000  # 300MB\ngitaly['concurrency'] = [\n  {\n    'rpc' => \"/gitaly.SmartHTTPService/PostReceivePack\",\n    'max_per_repo' => 3\n  },\n  {\n    'rpc' => \"/gitaly.SSHService/SSHUploadPack\",\n    'max_per_repo' => 3\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Backup and Restore\n\n### Automated Backup\n```bash\n# Configure automatic backups\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Backup settings\ngitlab_rails['backup_keep_time'] = 604800  # 7 days\ngitlab_rails['backup_path'] = \"/var/opt/gitlab/backups\"\n\n# S3 backup upload\ngitlab_rails['backup_upload_connection'] = {\n  'provider' => 'AWS',\n  'region' => 'us-east-1',\n  'aws_access_key_id' => 'your_access_key',\n  'aws_secret_access_key' => 'your_secret_key'\n}\ngitlab_rails['backup_upload_remote_directory'] = 'gitlab-backups'\ngitlab_rails['backup_multipart_chunk_size'] = 104857600  # 100MB\ngitlab_rails['backup_encryption'] = 'AES256'\nEOF\n\nsudo gitlab-ctl reconfigure\n\n# Create backup script\nsudo tee /usr/local/bin/gitlab-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\n# Create GitLab backup\ngitlab-backup create STRATEGY=copy\n\n# Backup configuration files\ntar -czf /var/opt/gitlab/backups/$(date +%s_%Y_%m_%d)_gitlab_config_backup.tar.gz -C / etc/gitlab/gitlab-secrets.json etc/gitlab/gitlab.rb\n\necho \"GitLab backup completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/gitlab-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Manual Backup and Restore\n```bash\n# Create backup manually\nsudo gitlab-backup create\n\n# List backups\nsudo gitlab-backup list\n\n# Restore from backup\nsudo gitlab-ctl stop unicorn\nsudo gitlab-ctl stop puma\nsudo gitlab-ctl stop sidekiq\nsudo gitlab-backup restore BACKUP=timestamp_of_backup\nsudo gitlab-ctl restart\nsudo gitlab-rake gitlab:check SANITIZE=true\n```\n\n## SSL/TLS Configuration\n\n### Let's Encrypt Integration\n```bash\n# Configure Let's Encrypt in GitLab\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Let's Encrypt configuration\nletsencrypt['enable'] = true\nletsencrypt['contact_emails'] = ['admin@example.com']\nletsencrypt['auto_renew'] = true\nletsencrypt['auto_renew_hour'] = 0\nletsencrypt['auto_renew_minute'] = 0\nletsencrypt['auto_renew_day_of_month'] = \"*/4\"\n\n# Redirect HTTP to HTTPS\nnginx['redirect_http_to_https'] = true\nnginx['ssl_protocols'] = \"TLSv1.2 TLSv1.3\"\nnginx['ssl_prefer_server_ciphers'] = \"off\"\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Manual SSL Configuration\n```bash\n# Configure custom SSL certificates\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# SSL configuration\nnginx['ssl_certificate'] = \"/etc/ssl/certs/gitlab.crt\"\nnginx['ssl_certificate_key'] = \"/etc/ssl/private/gitlab.key\"\nnginx['ssl_dhparam'] = \"/etc/ssl/certs/dhparam.pem\"\n\n# Registry SSL\nregistry_nginx['ssl_certificate'] = \"/etc/ssl/certs/registry.crt\"\nregistry_nginx['ssl_certificate_key'] = \"/etc/ssl/private/registry.key\"\nEOF\n\n# Generate dhparam\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\nsudo gitlab-ctl reconfigure\n```\n\n## CI/CD Configuration\n\n### Enable Container Registry\n```bash\n# Configure container registry\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Container Registry\nregistry_external_url 'https://registry.example.com'\ngitlab_rails['registry_enabled'] = true\nregistry['enable'] = true\nregistry['username'] = \"registry\"\nregistry['uid'] = 996\nregistry['gid'] = 996\nregistry['dir'] = \"/var/opt/gitlab/registry\"\nregistry['registry_http_addr'] = \"localhost:5000\"\nregistry['debug_addr'] = \"localhost:5001\"\nregistry['log_directory'] = \"/var/log/gitlab/registry\"\nregistry['log_level'] = \"info\"\nregistry['rootcertbundle'] = \"/opt/gitlab/embedded/ssl/certs/cacert.pem\"\nregistry['health_storagedriver_enabled'] = true\nregistry['middleware'] = {\n  'redirect' => [\n    {'disable' => false}\n  ]\n}\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### GitLab Pages Setup\n```bash\n# Enable GitLab Pages\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# GitLab Pages configuration\npages_external_url \"https://pages.example.com\"\ngitlab_pages['enable'] = true\ngitlab_pages['dir'] = \"/var/opt/gitlab/gitlab-pages\"\ngitlab_pages['log_directory'] = \"/var/log/gitlab/gitlab-pages\"\ngitlab_pages['artifacts_server'] = true\ngitlab_pages['artifacts_server_url'] = \"https://gitlab.example.com/api/v4\"\ngitlab_pages['access_control'] = false\ngitlab_pages['use_legacy_storage'] = false\ngitlab_pages['inplace_chroot'] = true\ngitlab_pages['propagate_correlation_id'] = false\ngitlab_pages['log_format'] = \"json\"\ngitlab_pages['log_verbose'] = false\ngitlab_pages['redirect_http'] = true\npages_nginx['enable'] = true\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Monitoring and Maintenance\n\n### GitLab Monitoring Stack\n```bash\n# Access built-in monitoring\n# Prometheus: https://gitlab.example.com/-/admin/monitoring\n# Grafana: https://gitlab.example.com/-/grafana\n\n# Configure external Prometheus\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Prometheus configuration\nprometheus['listen_address'] = 'localhost:9090'\nprometheus['scrape_configs'] = [\n  {\n    'job_name' => 'gitlab-workhorse',\n    'static_configs' => [\n      { 'targets' => ['localhost:9229'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-unicorn',\n    'static_configs' => [\n      { 'targets' => ['localhost:8080'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-sidekiq',\n    'static_configs' => [\n      { 'targets' => ['localhost:8082'] }\n    ]\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Maintenance Commands\n```bash\n# Check GitLab status\nsudo gitlab-rake gitlab:check\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Database maintenance\nsudo gitlab-rake db:migrate\nsudo gitlab-rake db:check\nsudo gitlab-rake gitlab:cleanup:sessions\nsudo gitlab-rake gitlab:cleanup:refs\n\n# Cache clearing\nsudo gitlab-rake cache:clear\nsudo gitlab-rake assets:clean\n\n# Check disk usage\nsudo du -sh /var/opt/gitlab/\nsudo gitlab-rake gitlab:artifacts:check\nsudo gitlab-rake gitlab:lfs:check\n\n# Update GitLab\nsudo apt update && sudo apt upgrade gitlab-ee  # Package installation\nsudo gitlab-ctl restart                        # Docker\n```\n\n## Verification\n\n```bash\n# Check GitLab status\nsudo gitlab-ctl status\nsudo gitlab-rake gitlab:check\n\n# Test web interface\ncurl -I https://gitlab.example.com\ncurl -I https://registry.example.com\n\n# Check service logs\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\nsudo gitlab-ctl tail postgresql\nsudo gitlab-ctl tail redis\n\n# Check runner status\nsudo gitlab-runner verify\nsudo gitlab-runner list\n\n# Test container registry\ndocker login registry.example.com\ndocker pull alpine\ndocker tag alpine registry.example.com/group/project:latest\ndocker push registry.example.com/group/project:latest\n\n# Check GitLab Runner\nsudo systemctl status gitlab-runner\ngitlab-runner list\n\n# Performance check\nsudo gitlab-rake gitlab:env:info\nsudo gitlab-rake gitlab:check\n```\n\n## Troubleshooting\n\n```bash\n# Check all GitLab services\nsudo gitlab-ctl status\n\n# Restart specific service\nsudo gitlab-ctl restart nginx\nsudo gitlab-ctl restart postgresql\n\n# Check configuration\nsudo gitlab-rake gitlab:check\nsudo gitlab-ctl show-config\n\n# Debug mode\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\n\n# Check disk space\ndf -h /var/opt/gitlab/\nsudo du -sh /var/opt/gitlab/git-data/\n\n# Memory usage\nfree -h\nsudo gitlab-ctl status\n\n# Database connection issues\nsudo gitlab-rake db:migrate:status\nsudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production\n\n# Reset root password\nsudo gitlab-rake \"gitlab:password:reset[root]\"\n\n# Check GitLab secrets\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Reconfigure if issues persist\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.gitlab.com/)\n- [GitLab Admin Docs](https://docs.gitlab.com/ee/administration/)\n- [GitLab Runner Documentation](https://docs.gitlab.com/runner/)\n- [Container Registry Guide](https://docs.gitlab.com/ee/administration/packages/container_registry.html)\n- [GitLab Community Forum](https://forum.gitlab.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"gitlab-installation-guide\" class=\"mobile-header\">GitLab Installation Guide</h1>\n<p class=\"mobile-paragraph\">Complete DevOps platform with Git repository management, CI/CD pipelines, issue tracking, and container registry.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">8GB RAM minimum, 16GB+ recommended for production</li>\n<li class=\"mobile-list-item\">4 CPU cores minimum</li>\n<li class=\"mobile-list-item\">20GB+ available disk space</li>\n<li class=\"mobile-list-item\">Domain name for external access</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-omnibus-package-recommended\" class=\"mobile-header\">Using Omnibus Package (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo apt update\nsudo apt install -y ca-certificates curl openssh-server postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab\nsudo apt install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo yum install -y curl policycoreutils-python-utils openssh-server postfix\n\n# Enable SSH and Postfix\nsudo systemctl enable --now sshd postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo yum install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker-compose\" class=\"mobile-header\">Using Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create GitLab directory\nmkdir -p ~/gitlab/{config,logs,data}\ncd ~/gitlab\n\n# Set proper ownership\nsudo chown -R 998:998 config logs data\n\n# Create docker-compose.yml\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  gitlab:\n    image: gitlab/gitlab-ee:latest\n    restart: unless-stopped\n    hostname: gitlab.example.com\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url &#039;https://gitlab.example.com&#039;\n        \n        # GitLab configuration\n        gitlab_rails[&#039;gitlab_shell_ssh_port&#039;] = 2222\n        gitlab_rails[&#039;time_zone&#039;] = &#039;America/New_York&#039;\n        gitlab_rails[&#039;gitlab_email_enabled&#039;] = true\n        gitlab_rails[&#039;gitlab_email_from&#039;] = &#039;gitlab@example.com&#039;\n        gitlab_rails[&#039;gitlab_email_display_name&#039;] = &#039;GitLab&#039;\n        \n        # Database configuration\n        postgresql[&#039;shared_preload_libraries&#039;] = &#039;pg_stat_statements&#039;\n        postgresql[&#039;track_activity_query_size&#039;] = 1024\n        \n        # Redis configuration\n        redis[&#039;save&#039;] = &#039;900 1 300 10 60 10000&#039;\n        \n        # Backup configuration\n        gitlab_rails[&#039;backup_keep_time&#039;] = 604800  # 7 days\n        \n        # Container Registry\n        registry_external_url &#039;https://registry.example.com&#039;\n        gitlab_rails[&#039;registry_enabled&#039;] = true\n        \n        # Monitoring\n        prometheus_monitoring[&#039;enable&#039;] = true\n        grafana[&#039;enable&#039;] = true\n        \n        # NGINX\n        nginx[&#039;listen_port&#039;] = 80\n        nginx[&#039;listen_https&#039;] = false\n        nginx[&#039;redirect_http_to_https&#039;] = false\n        \n        # Let&#039;s Encrypt (disable for reverse proxy setup)\n        letsencrypt[&#039;enable&#039;] = false\n        \n    ports:\n      - &#039;80:80&#039;\n      - &#039;443:443&#039;\n      - &#039;2222:22&#039;\n    volumes:\n      - &#039;./config:/etc/gitlab&#039;\n      - &#039;./logs:/var/log/gitlab&#039;\n      - &#039;./data:/var/opt/gitlab&#039;\n    shm_size: &#039;256m&#039;\n    networks:\n      - gitlab\n\nnetworks:\n  gitlab:\n    driver: bridge\nEOF\n\n# Start GitLab\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f gitlab</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration-etcgitlabgitlabrb\" class=\"mobile-header\">Basic Configuration (/etc/gitlab/gitlab.rb)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit GitLab configuration\nsudo nano /etc/gitlab/gitlab.rb\n\n# Key settings:\nexternal_url &#039;https://gitlab.example.com&#039;\n\n# Email configuration\ngitlab_rails[&#039;smtp_enable&#039;] = true\ngitlab_rails[&#039;smtp_address&#039;] = &quot;smtp.example.com&quot;\ngitlab_rails[&#039;smtp_port&#039;] = 587\ngitlab_rails[&#039;smtp_user_name&#039;] = &quot;smtp_username&quot;\ngitlab_rails[&#039;smtp_password&#039;] = &quot;smtp_password&quot;\ngitlab_rails[&#039;smtp_domain&#039;] = &quot;example.com&quot;\ngitlab_rails[&#039;smtp_authentication&#039;] = &quot;login&quot;\ngitlab_rails[&#039;smtp_enable_starttls_auto&#039;] = true\ngitlab_rails[&#039;smtp_tls&#039;] = false\n\ngitlab_rails[&#039;gitlab_email_from&#039;] = &#039;gitlab@example.com&#039;\ngitlab_rails[&#039;gitlab_email_display_name&#039;] = &#039;GitLab&#039;\n\n# Backup configuration\ngitlab_rails[&#039;backup_keep_time&#039;] = 604800  # 7 days\ngitlab_rails[&#039;backup_upload_connection&#039;] = {\n  &#039;provider&#039; =&gt; &#039;AWS&#039;,\n  &#039;aws_access_key_id&#039; =&gt; &#039;your_access_key&#039;,\n  &#039;aws_secret_access_key&#039; =&gt; &#039;your_secret_key&#039;,\n  &#039;region&#039; =&gt; &#039;us-east-1&#039;\n}\ngitlab_rails[&#039;backup_upload_remote_directory&#039;] = &#039;gitlab-backups&#039;\n\n# Container Registry\nregistry_external_url &#039;https://registry.example.com&#039;\ngitlab_rails[&#039;registry_enabled&#039;] = true\n\n# CI/CD settings\ngitlab_ci[&#039;gitlab_ci_all_broken_builds&#039;] = true\ngitlab_ci[&#039;gitlab_ci_add_pusher&#039;] = true\n\n# Monitoring\nprometheus_monitoring[&#039;enable&#039;] = true\ngrafana[&#039;enable&#039;] = true\ngrafana[&#039;admin_password&#039;] = &#039;grafana_admin_password&#039;\n\n# Apply configuration\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy-external\" class=\"mobile-header\">NGINX Reverse Proxy (External)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration for GitLab reverse proxy\nsudo tee /etc/nginx/sites-available/gitlab &gt; /dev/null &lt;&lt;EOF\nupstream gitlab-workhorse {\n  server unix:/var/opt/gitlab/gitlab-workhorse/sockets/socket;\n}\n\nserver {\n  listen 80;\n  server_name gitlab.example.com;\n  return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name gitlab.example.com;\n\n  ssl_certificate /etc/ssl/certs/gitlab.crt;\n  ssl_certificate_key /etc/ssl/private/gitlab.key;\n\n  location / {\n    proxy_pass http://gitlab-workhorse;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n    proxy_set_header X-Forwarded-Ssl on;\n    \n    # GitLab specific headers\n    proxy_set_header X-Forwarded-Host \\$http_host;\n    proxy_set_header X-Forwarded-Server \\$host;\n    \n    # WebSocket support\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \\$http_upgrade;\n    proxy_set_header Connection &quot;upgrade&quot;;\n    \n    # Timeout settings\n    proxy_connect_timeout 60s;\n    proxy_send_timeout 60s;\n    proxy_read_timeout 60s;\n  }\n}\n\n# Container Registry\nserver {\n  listen 443 ssl http2;\n  server_name registry.example.com;\n\n  ssl_certificate /etc/ssl/certs/registry.crt;\n  ssl_certificate_key /etc/ssl/private/registry.key;\n\n  # disable any limits to avoid HTTP 413 for large image uploads\n  client_max_body_size 0;\n\n  # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)\n  chunked_transfer_encoding on;\n\n  location /v2/ {\n    proxy_pass http://localhost:5000;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n  }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"gitlab-runner-setup\" class=\"mobile-header\">GitLab Runner Setup</h2>\n<h3 id=\"install-gitlab-runner\" class=\"mobile-header\">Install GitLab Runner</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add GitLab Runner repository\ncurl -L &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&quot; | sudo bash\n\n# Install GitLab Runner\nsudo apt install -y gitlab-runner\n\n# Or manual installation\nsudo curl -L --output /usr/local/bin/gitlab-runner &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64&quot;\nsudo chmod +x /usr/local/bin/gitlab-runner\nsudo useradd --comment &#039;GitLab Runner&#039; --create-home gitlab-runner --shell /bin/bash\nsudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner\nsudo gitlab-runner start</code></pre>\n      </div>\n    </div>\n<h3 id=\"register-runner\" class=\"mobile-header\">Register Runner</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Register runner (get token from GitLab Admin → Runners)\nsudo gitlab-runner register \\\n  --url &quot;https://gitlab.example.com/&quot; \\\n  --registration-token &quot;REGISTRATION_TOKEN&quot; \\\n  --description &quot;docker-runner&quot; \\\n  --tag-list &quot;docker,aws&quot; \\\n  --run-untagged=&quot;true&quot; \\\n  --locked=&quot;false&quot; \\\n  --access-level=&quot;not_protected&quot; \\\n  --executor &quot;docker&quot; \\\n  --docker-image alpine:latest \\\n  --docker-privileged \\\n  --docker-volumes &quot;/certs/client&quot;\n\n# Configure runner for Docker-in-Docker\nsudo tee -a /etc/gitlab-runner/config.toml &gt; /dev/null &lt;&lt;EOF\n[[runners]]\n  [runners.docker]\n    privileged = true\n    volumes = [&quot;/cache&quot;, &quot;/certs/client&quot;]\n    disable_cache = false\n    shm_size = 0\nEOF\n\nsudo systemctl restart gitlab-runner</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"database-tuning\" class=\"mobile-header\">Database Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># PostgreSQL optimization for GitLab\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# PostgreSQL settings\npostgresql[&#039;shared_buffers&#039;] = &quot;1GB&quot;\npostgresql[&#039;effective_cache_size&#039;] = &quot;4GB&quot;\npostgresql[&#039;checkpoint_completion_target&#039;] = 0.9\npostgresql[&#039;wal_buffers&#039;] = &quot;16MB&quot;\npostgresql[&#039;default_statistics_target&#039;] = 100\npostgresql[&#039;random_page_cost&#039;] = 1.1\npostgresql[&#039;effective_io_concurrency&#039;] = 200\npostgresql[&#039;work_mem&#039;] = &quot;4MB&quot;\npostgresql[&#039;min_wal_size&#039;] = &quot;1GB&quot;\npostgresql[&#039;max_wal_size&#039;] = &quot;4GB&quot;\npostgresql[&#039;max_worker_processes&#039;] = 8\npostgresql[&#039;max_parallel_workers_per_gather&#039;] = 4\npostgresql[&#039;max_parallel_workers&#039;] = 8\npostgresql[&#039;max_parallel_maintenance_workers&#039;] = 4\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-configuration\" class=\"mobile-header\">Redis Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Redis optimization\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Redis settings\nredis[&#039;maxmemory&#039;] = &quot;1gb&quot;\nredis[&#039;maxmemory_policy&#039;] = &quot;allkeys-lru&quot;\nredis[&#039;save&#039;] = [&quot;900 1&quot;, &quot;300 10&quot;, &quot;60 10000&quot;]\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-web-server-tuning\" class=\"mobile-header\">GitLab Web Server Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Unicorn/Puma optimization\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Puma settings (GitLab 13.0+)\npuma[&#039;worker_processes&#039;] = 4\npuma[&#039;min_threads&#039;] = 4\npuma[&#039;max_threads&#039;] = 4\n\n# Sidekiq settings\nsidekiq[&#039;max_concurrency&#039;] = 25\nsidekiq[&#039;min_concurrency&#039;] = 10\n\n# Gitaly settings\ngitaly[&#039;ruby_max_rss&#039;] = 300000000  # 300MB\ngitaly[&#039;concurrency&#039;] = [\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SmartHTTPService/PostReceivePack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  },\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SSHService/SSHUploadPack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"automated-backup\" class=\"mobile-header\">Automated Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure automatic backups\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Backup settings\ngitlab_rails[&#039;backup_keep_time&#039;] = 604800  # 7 days\ngitlab_rails[&#039;backup_path&#039;] = &quot;/var/opt/gitlab/backups&quot;\n\n# S3 backup upload\ngitlab_rails[&#039;backup_upload_connection&#039;] = {\n  &#039;provider&#039; =&gt; &#039;AWS&#039;,\n  &#039;region&#039; =&gt; &#039;us-east-1&#039;,\n  &#039;aws_access_key_id&#039; =&gt; &#039;your_access_key&#039;,\n  &#039;aws_secret_access_key&#039; =&gt; &#039;your_secret_key&#039;\n}\ngitlab_rails[&#039;backup_upload_remote_directory&#039;] = &#039;gitlab-backups&#039;\ngitlab_rails[&#039;backup_multipart_chunk_size&#039;] = 104857600  # 100MB\ngitlab_rails[&#039;backup_encryption&#039;] = &#039;AES256&#039;\nEOF\n\nsudo gitlab-ctl reconfigure\n\n# Create backup script\nsudo tee /usr/local/bin/gitlab-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n# Create GitLab backup\ngitlab-backup create STRATEGY=copy\n\n# Backup configuration files\ntar -czf /var/opt/gitlab/backups/$(date +%s_%Y_%m_%d)_gitlab_config_backup.tar.gz -C / etc/gitlab/gitlab-secrets.json etc/gitlab/gitlab.rb\n\necho &quot;GitLab backup completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/gitlab-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-backup-and-restore\" class=\"mobile-header\">Manual Backup and Restore</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup manually\nsudo gitlab-backup create\n\n# List backups\nsudo gitlab-backup list\n\n# Restore from backup\nsudo gitlab-ctl stop unicorn\nsudo gitlab-ctl stop puma\nsudo gitlab-ctl stop sidekiq\nsudo gitlab-backup restore BACKUP=timestamp_of_backup\nsudo gitlab-ctl restart\nsudo gitlab-rake gitlab:check SANITIZE=true</code></pre>\n      </div>\n    </div>\n<h2 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h2>\n<h3 id=\"lets-encrypt-integration\" class=\"mobile-header\">Let's Encrypt Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Let&#039;s Encrypt in GitLab\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Let&#039;s Encrypt configuration\nletsencrypt[&#039;enable&#039;] = true\nletsencrypt[&#039;contact_emails&#039;] = [&#039;admin@example.com&#039;]\nletsencrypt[&#039;auto_renew&#039;] = true\nletsencrypt[&#039;auto_renew_hour&#039;] = 0\nletsencrypt[&#039;auto_renew_minute&#039;] = 0\nletsencrypt[&#039;auto_renew_day_of_month&#039;] = &quot;*/4&quot;\n\n# Redirect HTTP to HTTPS\nnginx[&#039;redirect_http_to_https&#039;] = true\nnginx[&#039;ssl_protocols&#039;] = &quot;TLSv1.2 TLSv1.3&quot;\nnginx[&#039;ssl_prefer_server_ciphers&#039;] = &quot;off&quot;\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-ssl-configuration\" class=\"mobile-header\">Manual SSL Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure custom SSL certificates\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# SSL configuration\nnginx[&#039;ssl_certificate&#039;] = &quot;/etc/ssl/certs/gitlab.crt&quot;\nnginx[&#039;ssl_certificate_key&#039;] = &quot;/etc/ssl/private/gitlab.key&quot;\nnginx[&#039;ssl_dhparam&#039;] = &quot;/etc/ssl/certs/dhparam.pem&quot;\n\n# Registry SSL\nregistry_nginx[&#039;ssl_certificate&#039;] = &quot;/etc/ssl/certs/registry.crt&quot;\nregistry_nginx[&#039;ssl_certificate_key&#039;] = &quot;/etc/ssl/private/registry.key&quot;\nEOF\n\n# Generate dhparam\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-configuration\" class=\"mobile-header\">CI/CD Configuration</h2>\n<h3 id=\"enable-container-registry\" class=\"mobile-header\">Enable Container Registry</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure container registry\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Container Registry\nregistry_external_url &#039;https://registry.example.com&#039;\ngitlab_rails[&#039;registry_enabled&#039;] = true\nregistry[&#039;enable&#039;] = true\nregistry[&#039;username&#039;] = &quot;registry&quot;\nregistry[&#039;uid&#039;] = 996\nregistry[&#039;gid&#039;] = 996\nregistry[&#039;dir&#039;] = &quot;/var/opt/gitlab/registry&quot;\nregistry[&#039;registry_http_addr&#039;] = &quot;localhost:5000&quot;\nregistry[&#039;debug_addr&#039;] = &quot;localhost:5001&quot;\nregistry[&#039;log_directory&#039;] = &quot;/var/log/gitlab/registry&quot;\nregistry[&#039;log_level&#039;] = &quot;info&quot;\nregistry[&#039;rootcertbundle&#039;] = &quot;/opt/gitlab/embedded/ssl/certs/cacert.pem&quot;\nregistry[&#039;health_storagedriver_enabled&#039;] = true\nregistry[&#039;middleware&#039;] = {\n  &#039;redirect&#039; =&gt; [\n    {&#039;disable&#039; =&gt; false}\n  ]\n}\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-pages-setup\" class=\"mobile-header\">GitLab Pages Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable GitLab Pages\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# GitLab Pages configuration\npages_external_url &quot;https://pages.example.com&quot;\ngitlab_pages[&#039;enable&#039;] = true\ngitlab_pages[&#039;dir&#039;] = &quot;/var/opt/gitlab/gitlab-pages&quot;\ngitlab_pages[&#039;log_directory&#039;] = &quot;/var/log/gitlab/gitlab-pages&quot;\ngitlab_pages[&#039;artifacts_server&#039;] = true\ngitlab_pages[&#039;artifacts_server_url&#039;] = &quot;https://gitlab.example.com/api/v4&quot;\ngitlab_pages[&#039;access_control&#039;] = false\ngitlab_pages[&#039;use_legacy_storage&#039;] = false\ngitlab_pages[&#039;inplace_chroot&#039;] = true\ngitlab_pages[&#039;propagate_correlation_id&#039;] = false\ngitlab_pages[&#039;log_format&#039;] = &quot;json&quot;\ngitlab_pages[&#039;log_verbose&#039;] = false\ngitlab_pages[&#039;redirect_http&#039;] = true\npages_nginx[&#039;enable&#039;] = true\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-maintenance\" class=\"mobile-header\">Monitoring and Maintenance</h2>\n<h3 id=\"gitlab-monitoring-stack\" class=\"mobile-header\">GitLab Monitoring Stack</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Access built-in monitoring\n# Prometheus: https://gitlab.example.com/-/admin/monitoring\n# Grafana: https://gitlab.example.com/-/grafana\n\n# Configure external Prometheus\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Prometheus configuration\nprometheus[&#039;listen_address&#039;] = &#039;localhost:9090&#039;\nprometheus[&#039;scrape_configs&#039;] = [\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-workhorse&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:9229&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-unicorn&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8080&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-sidekiq&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8082&#039;] }\n    ]\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-commands\" class=\"mobile-header\">Maintenance Commands</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check GitLab status\nsudo gitlab-rake gitlab:check\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Database maintenance\nsudo gitlab-rake db:migrate\nsudo gitlab-rake db:check\nsudo gitlab-rake gitlab:cleanup:sessions\nsudo gitlab-rake gitlab:cleanup:refs\n\n# Cache clearing\nsudo gitlab-rake cache:clear\nsudo gitlab-rake assets:clean\n\n# Check disk usage\nsudo du -sh /var/opt/gitlab/\nsudo gitlab-rake gitlab:artifacts:check\nsudo gitlab-rake gitlab:lfs:check\n\n# Update GitLab\nsudo apt update &amp;&amp; sudo apt upgrade gitlab-ee  # Package installation\nsudo gitlab-ctl restart                        # Docker</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check GitLab status\nsudo gitlab-ctl status\nsudo gitlab-rake gitlab:check\n\n# Test web interface\ncurl -I https://gitlab.example.com\ncurl -I https://registry.example.com\n\n# Check service logs\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\nsudo gitlab-ctl tail postgresql\nsudo gitlab-ctl tail redis\n\n# Check runner status\nsudo gitlab-runner verify\nsudo gitlab-runner list\n\n# Test container registry\ndocker login registry.example.com\ndocker pull alpine\ndocker tag alpine registry.example.com/group/project:latest\ndocker push registry.example.com/group/project:latest\n\n# Check GitLab Runner\nsudo systemctl status gitlab-runner\ngitlab-runner list\n\n# Performance check\nsudo gitlab-rake gitlab:env:info\nsudo gitlab-rake gitlab:check</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check all GitLab services\nsudo gitlab-ctl status\n\n# Restart specific service\nsudo gitlab-ctl restart nginx\nsudo gitlab-ctl restart postgresql\n\n# Check configuration\nsudo gitlab-rake gitlab:check\nsudo gitlab-ctl show-config\n\n# Debug mode\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\n\n# Check disk space\ndf -h /var/opt/gitlab/\nsudo du -sh /var/opt/gitlab/git-data/\n\n# Memory usage\nfree -h\nsudo gitlab-ctl status\n\n# Database connection issues\nsudo gitlab-rake db:migrate:status\nsudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production\n\n# Reset root password\nsudo gitlab-rake &quot;gitlab:password:reset[root]&quot;\n\n# Check GitLab secrets\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Reconfigure if issues persist\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/administration/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Admin Docs</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/runner/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Runner Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/administration/packages/container_registry.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Container Registry Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forum.gitlab.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"9 min","wordCount":1745,"lastBuilt":"2025-09-14T01:15:33.860Z"},"category":{"key":"infrastructure","name":"Infrastructure","description":"DevOps and infrastructure automation tools","icon":"🏗️","color":"#44475a","keywords":["ansible","terraform","gitlab","jenkins","consul","etcd"]},"relatedGuides":[{"name":".claude","displayName":".claude","slug":".claude","description":"Repo for .claude","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/.claude","updatedAt":"2025-09-08T03:05:59Z","createdAt":"2025-09-08T03:05:48Z","readmeRaw":"## 👋 Welcome to .claude 🚀  \n\n.claude README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-claude\" class=\"mobile-header\">👋 Welcome to .claude 🚀  </h2>\n<p class=\"mobile-paragraph\">.claude README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:35.466Z"},{"name":"adguard-home","displayName":"Adguard Home","slug":"adguard-home","description":"Repo for adguard-home","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adguard-home","updatedAt":"2025-09-08T03:04:18Z","createdAt":"2025-09-08T03:04:08Z","readmeRaw":"## 👋 Welcome to adguard-home 🚀  \n\nadguard-home README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adguard-home\" class=\"mobile-header\">👋 Welcome to adguard-home 🚀  </h2>\n<p class=\"mobile-paragraph\">adguard-home README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:36.477Z"},{"name":"adminer","displayName":"Adminer","slug":"adminer","description":"Repo for adminer","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adminer","updatedAt":"2025-09-08T03:04:32Z","createdAt":"2025-09-08T03:04:22Z","readmeRaw":"## 👋 Welcome to adminer 🚀  \n\nadminer README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adminer\" class=\"mobile-header\">👋 Welcome to adminer 🚀  </h2>\n<p class=\"mobile-paragraph\">adminer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:36.353Z"}]},"__N_SSG":true}