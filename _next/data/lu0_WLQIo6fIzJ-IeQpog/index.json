{"pageProps":{"guides":[{"name":".claude","displayName":".claude","slug":".claude","description":"Repo for .claude","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/.claude","updatedAt":"2025-09-08T03:05:59Z","createdAt":"2025-09-08T03:05:48Z","readmeRaw":"## 👋 Welcome to .claude 🚀  \n\n.claude README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-claude\" class=\"mobile-header\">👋 Welcome to .claude 🚀  </h2>\n<p class=\"mobile-paragraph\">.claude README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:35.466Z"},{"name":"adguard-home","displayName":"Adguard Home","slug":"adguard-home","description":"Repo for adguard-home","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adguard-home","updatedAt":"2025-09-08T03:04:18Z","createdAt":"2025-09-08T03:04:08Z","readmeRaw":"## 👋 Welcome to adguard-home 🚀  \n\nadguard-home README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adguard-home\" class=\"mobile-header\">👋 Welcome to adguard-home 🚀  </h2>\n<p class=\"mobile-paragraph\">adguard-home README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:36.477Z"},{"name":"adminer","displayName":"Adminer","slug":"adminer","description":"Repo for adminer","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adminer","updatedAt":"2025-09-08T03:04:32Z","createdAt":"2025-09-08T03:04:22Z","readmeRaw":"## 👋 Welcome to adminer 🚀  \n\nadminer README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adminer\" class=\"mobile-header\">👋 Welcome to adminer 🚀  </h2>\n<p class=\"mobile-paragraph\">adminer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:36.353Z"},{"name":"ansible","displayName":"Ansible","slug":"ansible","description":"Repo for ansible","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ansible","updatedAt":"2025-09-08T03:04:45Z","createdAt":"2025-09-08T03:04:35Z","readmeRaw":"# Ansible Installation Guide\n\nAgentless automation platform for configuration management, application deployment, and task automation across multiple systems.\n\n## Prerequisites\n\n- Linux control machine (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- SSH access to target hosts\n- Python 3.8+ on control machine\n- Python 2.7+ or 3.5+ on target hosts\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Ansible\nsudo apt install -y ansible\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible\n\n# For CentOS Stream/RHEL 8+\nsudo dnf install -y ansible\n```\n\n### Using pip (Latest Version)\n```bash\n# Install pip if not available\nsudo apt install -y python3-pip\n\n# Install Ansible via pip\npip3 install --user ansible\n\n# Add to PATH\necho 'export PATH=$PATH:~/.local/bin' >> ~/.bashrc\nsource ~/.bashrc\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n```\n\n### Using Docker\n```bash\n# Create Ansible Docker container\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest \\\n  ansible-playbook playbook.yml\n\n# Create alias for convenience\necho 'alias ansible-docker=\"docker run --rm -it -v $(pwd):/ansible -v ~/.ssh:/root/.ssh:ro --workdir /ansible ansible/ansible:latest\"' >> ~/.bashrc\n```\n\n## Configuration\n\n### Inventory Setup\n```bash\n# Create project structure\nmkdir -p ~/ansible-project/{inventories,playbooks,roles,group_vars,host_vars}\ncd ~/ansible-project\n\n# Create inventory file\ncat > inventories/production/hosts.yml <<EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web1:\n          ansible_host: 192.168.1.10\n          ansible_user: ubuntu\n        web2:\n          ansible_host: 192.168.1.11\n          ansible_user: ubuntu\n    dbservers:\n      hosts:\n        db1:\n          ansible_host: 192.168.1.20\n          ansible_user: ubuntu\n        db2:\n          ansible_host: 192.168.1.21\n          ansible_user: ubuntu\n    loadbalancers:\n      hosts:\n        lb1:\n          ansible_host: 192.168.1.30\n          ansible_user: ubuntu\n\nwebservers:\n  vars:\n    http_port: 80\n    max_clients: 200\n\ndbservers:\n  vars:\n    mysql_port: 3306\n    mysql_root_password: \"{{ vault_mysql_root_password }}\"\nEOF\n\n# Create ansible configuration\ncat > ansible.cfg <<EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ubuntu\nprivate_key_file = ~/.ssh/id_rsa\nhost_key_checking = False\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=60s\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nEOF\n```\n\n### Ansible Vault for Secrets\n```bash\n# Create encrypted vault file\nansible-vault create group_vars/all/vault.yml\n# Enter vault password and add:\n# vault_mysql_root_password: your_secure_password\n# vault_api_key: your_api_key\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file\nansible-vault view group_vars/all/vault.yml\n\n# Create vault password file\necho \"your_vault_password\" > ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Update ansible.cfg\necho \"vault_password_file = ~/.ansible_vault_pass\" >> ansible.cfg\n```\n\n## Playbooks\n\n### Basic System Setup Playbook\n```bash\ncat > playbooks/system-setup.yml <<EOF\n---\n- name: System Setup and Hardening\n  hosts: all\n  become: yes\n  vars:\n    packages:\n      - curl\n      - wget\n      - vim\n      - htop\n      - fail2ban\n      - ufw\n      \n  tasks:\n    - name: Update package cache\n      apt:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family == \"Debian\"\n    \n    - name: Update package cache (RHEL/CentOS)\n      yum:\n        update_cache: yes\n      when: ansible_os_family == \"RedHat\"\n    \n    - name: Install essential packages\n      package:\n        name: \"{{ packages }}\"\n        state: present\n    \n    - name: Create admin user\n      user:\n        name: admin\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n    \n    - name: Configure SSH\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: \"{{ item.regexp }}\"\n        line: \"{{ item.line }}\"\n        backup: yes\n      loop:\n        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }\n        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }\n        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }\n      notify: restart ssh\n    \n    - name: Configure UFW firewall\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n    \n    - name: Allow SSH through firewall\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n  \n  handlers:\n    - name: restart ssh\n      service:\n        name: \"{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}\"\n        state: restarted\nEOF\n```\n\n### Web Server Deployment Playbook\n```bash\ncat > playbooks/nginx-deployment.yml <<EOF\n---\n- name: Deploy NGINX Web Server\n  hosts: webservers\n  become: yes\n  vars:\n    domain_name: example.com\n    \n  tasks:\n    - name: Install NGINX\n      package:\n        name: nginx\n        state: present\n    \n    - name: Create document root\n      file:\n        path: \"/var/www/{{ domain_name }}/html\"\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: '0755'\n    \n    - name: Deploy website content\n      template:\n        src: templates/index.html.j2\n        dest: \"/var/www/{{ domain_name }}/html/index.html\"\n        owner: www-data\n        group: www-data\n        mode: '0644'\n      notify: reload nginx\n    \n    - name: Configure NGINX virtual host\n      template:\n        src: templates/nginx-vhost.conf.j2\n        dest: \"/etc/nginx/sites-available/{{ domain_name }}.conf\"\n        backup: yes\n      notify: reload nginx\n    \n    - name: Enable NGINX site\n      file:\n        src: \"/etc/nginx/sites-available/{{ domain_name }}.conf\"\n        dest: \"/etc/nginx/sites-enabled/{{ domain_name }}.conf\"\n        state: link\n      notify: reload nginx\n    \n    - name: Ensure NGINX is running\n      service:\n        name: nginx\n        state: started\n        enabled: yes\n    \n    - name: Configure firewall for web traffic\n      ufw:\n        rule: allow\n        port: \"{{ item }}\"\n        proto: tcp\n      loop:\n        - 80\n        - 443\n  \n  handlers:\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF\n```\n\n### Multi-Environment Deployment\n```bash\ncat > playbooks/application-deployment.yml <<EOF\n---\n- name: Deploy Application Stack\n  hosts: all\n  become: yes\n  vars:\n    app_name: myapp\n    app_version: \"{{ lookup('env', 'APP_VERSION') | default('latest') }}\"\n    environment: \"{{ ansible_environment | default('production') }}\"\n    \n  tasks:\n    - name: Create application user\n      user:\n        name: \"{{ app_name }}\"\n        system: yes\n        shell: /bin/false\n        home: \"/opt/{{ app_name }}\"\n        create_home: yes\n    \n    - name: Deploy application\n      unarchive:\n        src: \"https://github.com/company/{{ app_name }}/releases/download/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/opt/{{ app_name }}\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        remote_src: yes\n      notify: restart application\n    \n    - name: Install systemd service\n      template:\n        src: templates/app.service.j2\n        dest: \"/etc/systemd/system/{{ app_name }}.service\"\n      notify:\n        - daemon reload\n        - restart application\n    \n    - name: Start and enable application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: started\n        enabled: yes\n        daemon_reload: yes\n  \n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n    \n    - name: restart application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: restarted\nEOF\n```\n\n## Roles Development\n\n```bash\n# Create role structure\nansible-galaxy init roles/nginx\n\n# roles/nginx/tasks/main.yml\ncat > roles/nginx/tasks/main.yml <<EOF\n---\n- name: Install NGINX\n  package:\n    name: nginx\n    state: present\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure NGINX\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n  notify: reload nginx\n\n- name: Create virtual hosts\n  template:\n    src: vhost.conf.j2\n    dest: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n  loop: \"{{ nginx_vhosts }}\"\n  when: nginx_vhosts is defined\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    dest: \"/etc/nginx/sites-enabled/{{ item.name }}.conf\"\n    state: link\n  loop: \"{{ nginx_vhosts }}\"\n  when: nginx_vhosts is defined\n  notify: reload nginx\nEOF\n\n# Use role in playbook\ncat > playbooks/webserver.yml <<EOF\n---\n- name: Configure Web Servers\n  hosts: webservers\n  become: yes\n  roles:\n    - nginx\n  vars:\n    nginx_vhosts:\n      - name: example.com\n        root: /var/www/example.com/html\n        index: index.html\nEOF\n```\n\n## Verification\n\n```bash\n# Check Ansible version\nansible --version\n\n# Test connectivity to all hosts\nansible all -m ping\n\n# Check facts gathering\nansible all -m setup\n\n# Test specific host\nansible web1 -m command -a \"uptime\"\n\n# Run playbook in check mode (dry run)\nansible-playbook playbooks/system-setup.yml --check\n\n# Run playbook with specific inventory\nansible-playbook -i inventories/staging/hosts.yml playbooks/system-setup.yml\n\n# Run specific tasks\nansible-playbook playbooks/system-setup.yml --tags \"firewall\"\n\n# Skip specific tasks\nansible-playbook playbooks/system-setup.yml --skip-tags \"packages\"\n\n# Run on specific hosts\nansible-playbook playbooks/system-setup.yml --limit webservers\n\n# Verbose output\nansible-playbook playbooks/system-setup.yml -vvv\n```\n\n## Performance and Optimization\n\n```bash\n# Parallel execution\nansible-playbook playbooks/system-setup.yml --forks 10\n\n# Pipelining for faster execution\necho \"pipelining = True\" >> ansible.cfg\n\n# Fact caching\necho \"gathering = smart\" >> ansible.cfg\necho \"fact_caching = jsonfile\" >> ansible.cfg\necho \"fact_caching_connection = ~/.ansible/facts_cache\" >> ansible.cfg\necho \"fact_caching_timeout = 86400\" >> ansible.cfg\n\n# Strategy plugins\nansible-playbook playbooks/system-setup.yml --strategy free\n\n# Async tasks for long-running operations\n- name: Long running task\n  command: /usr/bin/long_running_command\n  async: 300\n  poll: 5\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.ansible.com/)\n- [Ansible Galaxy](https://galaxy.ansible.com/)\n- [Best Practices](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html)\n- [Ansible Examples](https://github.com/ansible/ansible-examples)\n- [Community Collections](https://docs.ansible.com/ansible/latest/collections/index.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"ansible-installation-guide\" class=\"mobile-header\">Ansible Installation Guide</h1>\n<p class=\"mobile-paragraph\">Agentless automation platform for configuration management, application deployment, and task automation across multiple systems.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux control machine (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">SSH access to target hosts</li>\n<li class=\"mobile-list-item\">Python 3.8+ on control machine</li>\n<li class=\"mobile-list-item\">Python 2.7+ or 3.5+ on target hosts</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Ansible\nsudo apt install -y ansible\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible\n\n# For CentOS Stream/RHEL 8+\nsudo dnf install -y ansible</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-pip-latest-version\" class=\"mobile-header\">Using pip (Latest Version)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install pip if not available\nsudo apt install -y python3-pip\n\n# Install Ansible via pip\npip3 install --user ansible\n\n# Add to PATH\necho &#039;export PATH=$PATH:~/.local/bin&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Ansible Docker container\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest \\\n  ansible-playbook playbook.yml\n\n# Create alias for convenience\necho &#039;alias ansible-docker=&quot;docker run --rm -it -v $(pwd):/ansible -v ~/.ssh:/root/.ssh:ro --workdir /ansible ansible/ansible:latest&quot;&#039; &gt;&gt; ~/.bashrc</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"inventory-setup\" class=\"mobile-header\">Inventory Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create project structure\nmkdir -p ~/ansible-project/{inventories,playbooks,roles,group_vars,host_vars}\ncd ~/ansible-project\n\n# Create inventory file\ncat &gt; inventories/production/hosts.yml &lt;&lt;EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web1:\n          ansible_host: 192.168.1.10\n          ansible_user: ubuntu\n        web2:\n          ansible_host: 192.168.1.11\n          ansible_user: ubuntu\n    dbservers:\n      hosts:\n        db1:\n          ansible_host: 192.168.1.20\n          ansible_user: ubuntu\n        db2:\n          ansible_host: 192.168.1.21\n          ansible_user: ubuntu\n    loadbalancers:\n      hosts:\n        lb1:\n          ansible_host: 192.168.1.30\n          ansible_user: ubuntu\n\nwebservers:\n  vars:\n    http_port: 80\n    max_clients: 200\n\ndbservers:\n  vars:\n    mysql_port: 3306\n    mysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\nEOF\n\n# Create ansible configuration\ncat &gt; ansible.cfg &lt;&lt;EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ubuntu\nprivate_key_file = ~/.ssh/id_rsa\nhost_key_checking = False\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=60s\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-vault-for-secrets\" class=\"mobile-header\">Ansible Vault for Secrets</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create encrypted vault file\nansible-vault create group_vars/all/vault.yml\n# Enter vault password and add:\n# vault_mysql_root_password: your_secure_password\n# vault_api_key: your_api_key\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file\nansible-vault view group_vars/all/vault.yml\n\n# Create vault password file\necho &quot;your_vault_password&quot; &gt; ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Update ansible.cfg\necho &quot;vault_password_file = ~/.ansible_vault_pass&quot; &gt;&gt; ansible.cfg</code></pre>\n      </div>\n    </div>\n<h2 id=\"playbooks\" class=\"mobile-header\">Playbooks</h2>\n<h3 id=\"basic-system-setup-playbook\" class=\"mobile-header\">Basic System Setup Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/system-setup.yml &lt;&lt;EOF\n---\n- name: System Setup and Hardening\n  hosts: all\n  become: yes\n  vars:\n    packages:\n      - curl\n      - wget\n      - vim\n      - htop\n      - fail2ban\n      - ufw\n      \n  tasks:\n    - name: Update package cache\n      apt:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family == &quot;Debian&quot;\n    \n    - name: Update package cache (RHEL/CentOS)\n      yum:\n        update_cache: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n    \n    - name: Install essential packages\n      package:\n        name: &quot;{{ packages }}&quot;\n        state: present\n    \n    - name: Create admin user\n      user:\n        name: admin\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n    \n    - name: Configure SSH\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: &quot;{{ item.regexp }}&quot;\n        line: &quot;{{ item.line }}&quot;\n        backup: yes\n      loop:\n        - { regexp: &#039;^#?PermitRootLogin&#039;, line: &#039;PermitRootLogin no&#039; }\n        - { regexp: &#039;^#?PasswordAuthentication&#039;, line: &#039;PasswordAuthentication no&#039; }\n        - { regexp: &#039;^#?X11Forwarding&#039;, line: &#039;X11Forwarding no&#039; }\n      notify: restart ssh\n    \n    - name: Configure UFW firewall\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n    \n    - name: Allow SSH through firewall\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n  \n  handlers:\n    - name: restart ssh\n      service:\n        name: &quot;{{ &#039;ssh&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sshd&#039; }}&quot;\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"web-server-deployment-playbook\" class=\"mobile-header\">Web Server Deployment Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/nginx-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy NGINX Web Server\n  hosts: webservers\n  become: yes\n  vars:\n    domain_name: example.com\n    \n  tasks:\n    - name: Install NGINX\n      package:\n        name: nginx\n        state: present\n    \n    - name: Create document root\n      file:\n        path: &quot;/var/www/{{ domain_name }}/html&quot;\n        state: directory\n        owner: www-data\n        group: www-data\n        mode: &#039;0755&#039;\n    \n    - name: Deploy website content\n      template:\n        src: templates/index.html.j2\n        dest: &quot;/var/www/{{ domain_name }}/html/index.html&quot;\n        owner: www-data\n        group: www-data\n        mode: &#039;0644&#039;\n      notify: reload nginx\n    \n    - name: Configure NGINX virtual host\n      template:\n        src: templates/nginx-vhost.conf.j2\n        dest: &quot;/etc/nginx/sites-available/{{ domain_name }}.conf&quot;\n        backup: yes\n      notify: reload nginx\n    \n    - name: Enable NGINX site\n      file:\n        src: &quot;/etc/nginx/sites-available/{{ domain_name }}.conf&quot;\n        dest: &quot;/etc/nginx/sites-enabled/{{ domain_name }}.conf&quot;\n        state: link\n      notify: reload nginx\n    \n    - name: Ensure NGINX is running\n      service:\n        name: nginx\n        state: started\n        enabled: yes\n    \n    - name: Configure firewall for web traffic\n      ufw:\n        rule: allow\n        port: &quot;{{ item }}&quot;\n        proto: tcp\n      loop:\n        - 80\n        - 443\n  \n  handlers:\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"multi-environment-deployment\" class=\"mobile-header\">Multi-Environment Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/application-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy Application Stack\n  hosts: all\n  become: yes\n  vars:\n    app_name: myapp\n    app_version: &quot;{{ lookup(&#039;env&#039;, &#039;APP_VERSION&#039;) | default(&#039;latest&#039;) }}&quot;\n    environment: &quot;{{ ansible_environment | default(&#039;production&#039;) }}&quot;\n    \n  tasks:\n    - name: Create application user\n      user:\n        name: &quot;{{ app_name }}&quot;\n        system: yes\n        shell: /bin/false\n        home: &quot;/opt/{{ app_name }}&quot;\n        create_home: yes\n    \n    - name: Deploy application\n      unarchive:\n        src: &quot;https://github.com/company/{{ app_name }}/releases/download/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/opt/{{ app_name }}&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        remote_src: yes\n      notify: restart application\n    \n    - name: Install systemd service\n      template:\n        src: templates/app.service.j2\n        dest: &quot;/etc/systemd/system/{{ app_name }}.service&quot;\n      notify:\n        - daemon reload\n        - restart application\n    \n    - name: Start and enable application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: started\n        enabled: yes\n        daemon_reload: yes\n  \n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n    \n    - name: restart application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"roles-development\" class=\"mobile-header\">Roles Development</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create role structure\nansible-galaxy init roles/nginx\n\n# roles/nginx/tasks/main.yml\ncat &gt; roles/nginx/tasks/main.yml &lt;&lt;EOF\n---\n- name: Install NGINX\n  package:\n    name: nginx\n    state: present\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure NGINX\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n  notify: reload nginx\n\n- name: Create virtual hosts\n  template:\n    src: vhost.conf.j2\n    dest: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n  loop: &quot;{{ nginx_vhosts }}&quot;\n  when: nginx_vhosts is defined\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    dest: &quot;/etc/nginx/sites-enabled/{{ item.name }}.conf&quot;\n    state: link\n  loop: &quot;{{ nginx_vhosts }}&quot;\n  when: nginx_vhosts is defined\n  notify: reload nginx\nEOF\n\n# Use role in playbook\ncat &gt; playbooks/webserver.yml &lt;&lt;EOF\n---\n- name: Configure Web Servers\n  hosts: webservers\n  become: yes\n  roles:\n    - nginx\n  vars:\n    nginx_vhosts:\n      - name: example.com\n        root: /var/www/example.com/html\n        index: index.html\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Ansible version\nansible --version\n\n# Test connectivity to all hosts\nansible all -m ping\n\n# Check facts gathering\nansible all -m setup\n\n# Test specific host\nansible web1 -m command -a &quot;uptime&quot;\n\n# Run playbook in check mode (dry run)\nansible-playbook playbooks/system-setup.yml --check\n\n# Run playbook with specific inventory\nansible-playbook -i inventories/staging/hosts.yml playbooks/system-setup.yml\n\n# Run specific tasks\nansible-playbook playbooks/system-setup.yml --tags &quot;firewall&quot;\n\n# Skip specific tasks\nansible-playbook playbooks/system-setup.yml --skip-tags &quot;packages&quot;\n\n# Run on specific hosts\nansible-playbook playbooks/system-setup.yml --limit webservers\n\n# Verbose output\nansible-playbook playbooks/system-setup.yml -vvv</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-and-optimization\" class=\"mobile-header\">Performance and Optimization</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Parallel execution\nansible-playbook playbooks/system-setup.yml --forks 10\n\n# Pipelining for faster execution\necho &quot;pipelining = True&quot; &gt;&gt; ansible.cfg\n\n# Fact caching\necho &quot;gathering = smart&quot; &gt;&gt; ansible.cfg\necho &quot;fact_caching = jsonfile&quot; &gt;&gt; ansible.cfg\necho &quot;fact_caching_connection = ~/.ansible/facts_cache&quot; &gt;&gt; ansible.cfg\necho &quot;fact_caching_timeout = 86400&quot; &gt;&gt; ansible.cfg\n\n# Strategy plugins\nansible-playbook playbooks/system-setup.yml --strategy free\n\n# Async tasks for long-running operations\n- name: Long running task\n  command: /usr/bin/long_running_command\n  async: 300\n  poll: 5</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://galaxy.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Galaxy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/ansible/ansible-examples\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Examples</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/collections/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Collections</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"7 min","wordCount":1212,"lastBuilt":"2025-09-14T01:15:36.221Z"},{"name":"apache","displayName":"Apache","slug":"apache","description":"Repo for apache","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/apache","updatedAt":"2025-09-08T03:04:58Z","createdAt":"2025-09-08T03:04:47Z","readmeRaw":"# Apache HTTP Server Installation Guide\n\nWorld's most popular web server software serving over 40% of active websites. Reliable, secure, and highly configurable for hosting websites and web applications.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access  \n- 1GB RAM minimum, 2GB+ recommended for production\n- Network connectivity for package downloads\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Apache and essential modules\nsudo apt install -y apache2 apache2-utils\n\n# Enable essential modules\nsudo a2enmod rewrite ssl headers deflate expires security2\n\n# Start and enable Apache\nsudo systemctl enable --now apache2\n\n# Check status\nsudo systemctl status apache2\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install Apache (httpd)\nsudo yum install -y httpd httpd-tools mod_ssl\n\n# For newer versions with dnf\nsudo dnf install -y httpd httpd-tools mod_ssl\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Check status\nsudo systemctl status httpd\n```\n\n### Fedora\n```bash\n# Install Apache\nsudo dnf install -y httpd httpd-tools mod_ssl mod_security\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n```\n\n### Arch Linux\n```bash\n# Install Apache\nsudo pacman -Syu apache\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Edit configuration\nsudo nano /etc/httpd/conf/httpd.conf\n# Uncomment: ServerName www.example.com:80\n```\n\n### openSUSE/SUSE\n```bash\n# Install Apache\nsudo zypper install -y apache2 apache2-mod_ssl apache2-utils\n\n# Start and enable Apache\nsudo systemctl enable --now apache2\n\n# Configure firewall\nsudo SuSEfirewall2 open EXT TCP 80 443\n```\n\n### Alpine Linux\n```bash\n# Install Apache\nsudo apk update\nsudo apk add apache2 apache2-ssl apache2-utils\n\n# Create necessary directories\nsudo mkdir -p /var/www/html\nsudo mkdir -p /run/apache2\n\n# Start and enable Apache\nsudo rc-update add apache2 default\nsudo service apache2 start\n```\n\n### Docker Installation\n```bash\n# Official Apache Docker image\ndocker run -d \\\n  --name apache \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -v ~/apache/htdocs:/usr/local/apache2/htdocs/ \\\n  -v ~/apache/conf:/usr/local/apache2/conf/ \\\n  -v ~/apache/logs:/usr/local/apache2/logs/ \\\n  httpd:latest\n\n# With Docker Compose\ncat > docker-compose.yml <<EOF\nversion: '3.8'\nservices:\n  apache:\n    image: httpd:latest\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./htdocs:/usr/local/apache2/htdocs/\n      - ./conf/httpd.conf:/usr/local/apache2/conf/httpd.conf\n      - ./logs:/usr/local/apache2/logs/\n    networks:\n      - webserver\n\nnetworks:\n  webserver:\n    driver: bridge\nEOF\n\ndocker-compose up -d\n```\n\n### Source Compilation (Advanced)\n```bash\n# Install build dependencies\n# Ubuntu/Debian\nsudo apt install -y build-essential libapr1-dev libaprutil1-dev libpcre3-dev libssl-dev zlib1g-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y \"Development Tools\"\nsudo yum install -y apr-devel apr-util-devel pcre-devel openssl-devel zlib-devel\n\n# Download Apache source\ncd /tmp\nwget https://archive.apache.org/dist/httpd/httpd-2.4.57.tar.gz\ntar xzf httpd-2.4.57.tar.gz\ncd httpd-2.4.57\n\n# Configure with security and performance modules\n./configure \\\n  --prefix=/etc/apache2 \\\n  --exec-prefix=/usr \\\n  --bindir=/usr/bin \\\n  --sbindir=/usr/sbin \\\n  --sysconfdir=/etc/apache2 \\\n  --libexecdir=/usr/lib/apache2/modules \\\n  --localstatedir=/var \\\n  --datadir=/usr/share/apache2 \\\n  --includedir=/usr/include/apache2 \\\n  --infodir=/usr/share/info \\\n  --mandir=/usr/share/man \\\n  --with-program-name=apache2 \\\n  --enable-layout=Debian \\\n  --with-regex=pcre \\\n  --enable-mods-shared=reallyall \\\n  --enable-ssl \\\n  --enable-rewrite \\\n  --enable-headers \\\n  --enable-deflate \\\n  --enable-expires \\\n  --enable-security \\\n  --with-ssl=/usr \\\n  --with-ldap \\\n  --with-ldap-include=/usr/include \\\n  --with-ldap-lib=/usr/lib\n\n# Compile and install\nmake -j$(nproc)\nsudo make install\n\n# Create apache user\nsudo useradd -r -s /sbin/nologin apache\n\n# Create systemd service\nsudo tee /etc/systemd/system/apache2.service > /dev/null <<EOF\n[Unit]\nDescription=The Apache HTTP Server\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=notify\nExecStart=/usr/sbin/apache2 -DFOREGROUND\nExecReload=/usr/sbin/apache2ctl graceful\nExecStop=/bin/kill -WINTERM \\${MAINPID}\nKillSignal=SIGCONT\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now apache2\n```\n\n## Security Hardening (2024 Best Practices)\n\n### Hide Server Information\n```bash\n# Create security configuration\n# Ubuntu/Debian\nsudo tee /etc/apache2/conf-available/security-hardening.conf > /dev/null <<EOF\n# Hide Apache version and OS information\nServerTokens Prod\nServerSignature Off\n\n# Hide PHP version (if using PHP)\nHeader always unset X-Powered-By\nHeader unset X-Powered-By\n\n# Security headers (2024 recommendations)\nHeader always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\nHeader always set X-Frame-Options \"SAMEORIGIN\"\nHeader always set X-Content-Type-Options \"nosniff\"\nHeader always set X-XSS-Protection \"1; mode=block\"\nHeader always set Referrer-Policy \"strict-origin-when-cross-origin\"\nHeader always set Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'self'; form-action 'self'; base-uri 'self';\"\nHeader always set Permissions-Policy \"camera=(), microphone=(), geolocation=()\"\n\n# Remove sensitive headers\nHeader always unset Server\nHeader unset Server\n\n# Disable server status and info\n<Location \"/server-status\">\n    SetHandler server-status\n    Require local\n</Location>\n\n<Location \"/server-info\">\n    SetHandler server-info\n    Require local\n</Location>\n\n# Disable trace method\nTraceEnable off\n\n# Timeout configurations\nTimeout 60\nKeepAliveTimeout 15\n\n# Limit request size (adjust as needed)\nLimitRequestBody 10485760  # 10MB\n\n# Hide .htaccess files\n<FilesMatch \"^\\.ht\">\n    Require all denied\n</FilesMatch>\n\n# Hide backup and temporary files\n<FilesMatch \"\\.(bak|backup|swp|tmp|~)$\">\n    Require all denied\n</FilesMatch>\n\n# Disable directory browsing by default\nOptions -Indexes\n\n# Information disclosure protection\n<DirectoryMatch \"/\\.\">\n    Require all denied\n</DirectoryMatch>\n\n# Clickjacking protection\nHeader always append X-Frame-Options SAMEORIGIN\nEOF\n\n# Enable security configuration\nsudo a2enconf security-hardening\nsudo systemctl reload apache2\n\n# RHEL/CentOS (add to main configuration)\nsudo tee -a /etc/httpd/conf/httpd.conf > /dev/null <<EOF\n\n# Security hardening\nServerTokens Prod\nServerSignature Off\n\n# Load security headers module\nLoadModule headers_module modules/mod_headers.so\n\n# Security headers\nHeader always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\nHeader always set X-Frame-Options \"SAMEORIGIN\"\nHeader always set X-Content-Type-Options \"nosniff\"\nHeader always set X-XSS-Protection \"1; mode=block\"\nHeader always set Referrer-Policy \"strict-origin-when-cross-origin\"\n\n# Disable trace method\nTraceEnable off\n\n# Hide .htaccess files\n<FilesMatch \"^\\.ht\">\n    Require all denied\n</FilesMatch>\n\n# Disable directory browsing\nOptions -Indexes\nEOF\n\nsudo systemctl reload httpd\n```\n\n### ModSecurity WAF Installation\n```bash\n# Ubuntu/Debian\nsudo apt install -y libapache2-mod-security2\n\n# RHEL/CentOS\nsudo yum install -y mod_security mod_security_crs\n\n# Enable ModSecurity\nsudo a2enmod security2  # Ubuntu/Debian\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/apache2/modsecurity.d\ncd /etc/apache2/modsecurity.d\nsudo wget https://github.com/coreruleset/coreruleset/archive/refs/tags/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 crs\n\n# Configure ModSecurity\nsudo tee /etc/apache2/mods-available/security2.conf > /dev/null <<EOF\n<IfModule mod_security2.c>\n    SecRuleEngine On\n    SecRequestBodyAccess On\n    SecRequestBodyLimit 13107200\n    SecRequestBodyNoFilesLimit 131072\n    SecRequestBodyInMemoryLimit 131072\n    SecRequestBodyLimitAction Reject\n    SecRule REQUEST_HEADERS:Content-Type \"text/xml\" \\\n         \"id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML\"\n    SecRule REQUEST_HEADERS:Content-Type \"application/json\" \\\n         \"id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON\"\n    SecRule REQBODY_ERROR \"!@eq 0\" \\\n    \"id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'Error %{REQBODY_ERROR_MSG}',severity:2\"\n    SecRule MULTIPART_STRICT_ERROR \"!@eq 0\" \\\n    \"id:'200003',phase:2,t:none,log,deny,status:400, \\\n    msg:'Multipart request body failed strict validation: \\\n    PE %{REQBODY_PROCESSOR_ERROR}, \\\n    BQ %{MULTIPART_BOUNDARY_QUOTED}, \\\n    BW %{MULTIPART_BOUNDARY_WHITESPACE}, \\\n    DB %{MULTIPART_DATA_BEFORE}, \\\n    DA %{MULTIPART_DATA_AFTER}, \\\n    HF %{MULTIPART_HEADER_FOLDING}, \\\n    LF %{MULTIPART_LF_LINE}, \\\n    SM %{MULTIPART_MISSING_SEMICOLON}, \\\n    IQ %{MULTIPART_INVALID_QUOTING}, \\\n    IP %{MULTIPART_INVALID_PART}, \\\n    IH %{MULTIPART_INVALID_HEADER_FOLDING}, \\\n    FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'\"\n\n    SecRule MULTIPART_UNMATCHED_BOUNDARY \"!@eq 0\" \\\n    \"id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'\"\n\n    SecPcreMatchLimit 1000\n    SecPcreMatchLimitRecursion 1000\n\n    SecRule TX:/^MSC_/ \"!@streq 0\" \\\n            \"id:'200005',phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'\"\n\n    SecResponseBodyAccess Off\n    SecDebugLog /var/log/apache2/modsec_debug.log\n    SecDebugLogLevel 0\n    SecAuditEngine RelevantOnly\n    SecAuditLogRelevantStatus \"^(?:5|4(?!04))\"\n    SecAuditLogParts ABDEFHIJZ\n    SecAuditLogType Serial\n    SecAuditLog /var/log/apache2/modsec_audit.log\n    \n    # Include OWASP Core Rule Set\n    Include /etc/apache2/modsecurity.d/crs/crs-setup.conf.example\n    Include /etc/apache2/modsecurity.d/crs/rules/*.conf\n</IfModule>\nEOF\n\n# Create data directory\nsudo mkdir -p /var/cache/modsecurity\nsudo chown www-data:www-data /var/cache/modsecurity\n\nsudo systemctl reload apache2\n```\n\n### SSL/TLS Configuration (Modern 2024 Standards)\n```bash\n# Create modern SSL configuration\nsudo tee /etc/apache2/conf-available/ssl-modern.conf > /dev/null <<EOF\n# Modern SSL configuration (2024)\nSSLEngine on\n\n# Protocols - Only TLS 1.2 and 1.3\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n\n# Cipher suites for modern browsers (2024)\nSSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n\n# Prefer server ciphers for TLS 1.2, client ciphers for TLS 1.3\nSSLHonorCipherOrder off\n\n# HSTS (HTTP Strict Transport Security)\nHeader always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n\n# Session cache\nSSLSessionCache shmcb:/var/run/ssl_scache(512000)\nSSLSessionCacheTimeout 300\n\n# OCSP Stapling\nSSLUseStapling On\nSSLStaplingCache shmcb:/var/run/ocsp(128000)\nSSLStaplingResponderTimeout 5\nSSLStaplingReturnResponderErrors off\n\n# Modern security options\nSSLCompression off\nSSLSessionTickets off\n\n# Perfect Forward Secrecy\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem\nEOF\n\n# Generate strong DH parameters\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n# Enable SSL configuration\nsudo a2enconf ssl-modern\nsudo a2enmod ssl headers\nsudo systemctl reload apache2\n```\n\n### Secure Virtual Host Configuration\n```bash\n# Create production-ready virtual host\nsudo tee /etc/apache2/sites-available/secure-site.conf > /dev/null <<EOF\n# HTTP to HTTPS redirect\n<VirtualHost *:80>\n    ServerName example.com\n    ServerAlias www.example.com\n    \n    # Security headers for redirects\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    \n    # Redirect to HTTPS\n    Redirect permanent / https://example.com/\n</VirtualHost>\n\n# HTTPS Virtual Host\n<VirtualHost *:443>\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/html/example.com\n    \n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    # Security headers (2024 standards)\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n    Header always set X-Frame-Options \"SAMEORIGIN\"\n    Header always set X-Content-Type-Options \"nosniff\"\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"\n    Header always set Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'self'; form-action 'self'; base-uri 'self';\"\n    Header always set Permissions-Policy \"camera=(), microphone=(), geolocation=()\"\n    \n    # Remove server information\n    Header always unset Server\n    Header unset X-Powered-By\n    \n    <Directory /var/www/html/example.com>\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n        \n        # Additional security\n        <Files \".*\">\n            Require all denied\n        </Files>\n        \n        <Files \"*.php~\">\n            Require all denied\n        </Files>\n        \n        <Files \"*.inc\">\n            Require all denied\n        </Files>\n    </Directory>\n    \n    # PHP configuration (if using PHP)\n    <IfModule mod_php.c>\n        php_admin_flag allow_url_include Off\n        php_admin_flag allow_url_fopen Off\n        php_admin_flag file_uploads On\n        php_admin_value upload_max_filesize 64M\n        php_admin_value post_max_size 64M\n        php_admin_value memory_limit 256M\n        php_admin_value max_execution_time 300\n        php_admin_flag expose_php Off\n    </IfModule>\n    \n    # Compression\n    <IfModule mod_deflate.c>\n        SetOutputFilter DEFLATE\n        AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain application/javascript application/xml+rss application/xml application/x-javascript application/json\n        \n        # Don't compress images\n        SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png)$ no-gzip dont-vary\n        SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary\n    </IfModule>\n    \n    # Caching rules\n    <IfModule mod_expires.c>\n        ExpiresActive On\n        ExpiresByType image/jpg \"access plus 1 month\"\n        ExpiresByType image/jpeg \"access plus 1 month\"\n        ExpiresByType image/gif \"access plus 1 month\"\n        ExpiresByType image/png \"access plus 1 month\"\n        ExpiresByType image/webp \"access plus 1 month\"\n        ExpiresByType text/css \"access plus 1 month\"\n        ExpiresByType application/pdf \"access plus 1 month\"\n        ExpiresByType text/javascript \"access plus 1 month\"\n        ExpiresByType application/javascript \"access plus 1 month\"\n        ExpiresByType application/x-javascript \"access plus 1 month\"\n        ExpiresByType application/x-shockwave-flash \"access plus 1 month\"\n        ExpiresByType image/x-icon \"access plus 1 year\"\n        ExpiresDefault \"access plus 2 days\"\n    </IfModule>\n    \n    # Rate limiting (if mod_evasive is available)\n    <IfModule mod_evasive24.c>\n        DOSHashTableSize    1024\n        DOSPageCount        2\n        DOSSiteCount        50\n        DOSPageInterval     1\n        DOSSiteInterval     1\n        DOSBlockingPeriod   600\n        DOSLogDir           /var/log/apache2/\n        DOSEmailNotify      admin@example.com\n    </IfModule>\n    \n    # ModSecurity\n    <IfModule mod_security2.c>\n        SecRuleEngine On\n        SecDefaultAction \"log,auditlog,pass\"\n    </IfModule>\n    \n    ErrorLog \\${APACHE_LOG_DIR}/example.com_error.log\n    CustomLog \\${APACHE_LOG_DIR}/example.com_access.log combined\n    \n    # Log security events\n    CustomLog \\${APACHE_LOG_DIR}/example.com_security.log \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\"\" env=security\n</VirtualHost>\n\n# WWW redirect\n<VirtualHost *:443>\n    ServerName www.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    Redirect permanent / https://example.com/\n</VirtualHost>\nEOF\n\nsudo a2ensite secure-site.conf\nsudo a2enconf security-hardening\nsudo systemctl reload apache2\n```\n\n### Advanced Security Modules\n```bash\n# Install additional security modules\n# Ubuntu/Debian\nsudo apt install -y libapache2-mod-evasive libapache2-mod-security2\n\n# RHEL/CentOS\nsudo yum install -y mod_evasive mod_security\n\n# Enable modules\nsudo a2enmod evasive  # Ubuntu/Debian\nsudo a2enmod security2\n\n# Configure mod_evasive (DDoS protection)\nsudo tee /etc/apache2/mods-available/evasive.conf > /dev/null <<EOF\n<IfModule mod_evasive24.c>\n    DOSHashTableSize    1024\n    DOSPageCount        3\n    DOSSiteCount        50\n    DOSPageInterval     1\n    DOSSiteInterval     1\n    DOSBlockingPeriod   600\n    DOSLogDir           /var/log/apache2/\n    DOSEmailNotify      admin@example.com\n    DOSWhitelist        127.0.0.1\n    DOSWhitelist        192.168.1.*\n</IfModule>\nEOF\n\nsudo systemctl reload apache2\n```\n\n## SSL Certificate Setup (Cross-Platform)\n\n### Let's Encrypt Integration\n```bash\n# Install Certbot - Universal method\nsudo snap install core; sudo snap refresh core\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n\n# Alternative: Package manager installation\n# Ubuntu/Debian\nsudo apt install -y certbot python3-certbot-apache\n\n# RHEL/CentOS (enable EPEL first)\nsudo yum install -y epel-release\nsudo yum install -y certbot python3-certbot-apache\n\n# Fedora\nsudo dnf install -y certbot python3-certbot-apache\n\n# Arch Linux\nsudo pacman -S certbot certbot-apache\n\n# Obtain certificate\nsudo certbot --apache -d example.com -d www.example.com\n\n# Auto-renewal setup (universal)\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet && systemctl reload apache2\n\n# Test renewal\nsudo certbot renew --dry-run\n```\n\n### Manual SSL Configuration\n```bash\n# Generate self-signed certificate for testing\nsudo mkdir -p /etc/ssl/private\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/ssl/private/apache-selfsigned.key \\\n  -out /etc/ssl/certs/apache-selfsigned.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=example.com\"\n\n# Create SSL configuration snippet\nsudo tee /etc/apache2/conf-available/ssl-params.conf > /dev/null <<EOF\n# Modern SSL configuration\nSSLEngine on\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\nSSLCipherSuite ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384\nSSLHonorCipherOrder off\nSSLSessionTickets off\nSSLUseStapling on\nSSLStaplingCache shmcb:/var/run/ssl_stapling(32768)\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem\n\n# Security headers\nHeader always set Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\nHeader always set X-Content-Type-Options nosniff\nHeader always set X-Frame-Options SAMEORIGIN\nHeader always set X-XSS-Protection \"1; mode=block\"\nEOF\n\nsudo a2enconf ssl-params\n```\n\n## Firewall Configuration (All Platforms)\n\n### UFW (Ubuntu/Debian)\n```bash\nsudo ufw app list | grep Apache\nsudo ufw allow 'Apache Full'    # HTTP and HTTPS\nsudo ufw allow 'Apache'         # HTTP only  \nsudo ufw allow 'Apache Secure'  # HTTPS only\nsudo ufw enable\nsudo ufw status\n```\n\n### Firewalld (RHEL/CentOS/Fedora)\n```bash\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\nsudo firewall-cmd --list-services\n```\n\n### iptables (Universal)\n```bash\n# Allow HTTP and HTTPS\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\n\n# Save rules (varies by distribution)\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save\n\n# Arch Linux\nsudo iptables-save > /etc/iptables/iptables.rules\n\n# Alpine Linux\nsudo /etc/init.d/iptables save\n```\n\n### SELinux Configuration (RHEL/CentOS/Fedora)\n```bash\n# Check SELinux status\ngetenforce\n\n# Set SELinux booleans for Apache\nsudo setsebool -P httpd_can_network_connect 1\nsudo setsebool -P httpd_can_network_relay 1\nsudo setsebool -P httpd_use_nfs 1\nsudo setsebool -P httpd_graceful_shutdown 1\n\n# For custom content directories\nsudo semanage fcontext -a -t httpd_exec_t \"/var/www/html(/.*)?\"\nsudo restorecon -Rv /var/www/html/\n\n# For custom ports\nsudo semanage port -a -t http_port_t -p tcp 8080\n\n# Check denials\nsudo ausearch -m AVC,USER_AVC,SELINUX_ERR -ts recent\n```\n\n## Performance Optimization\n\n### Multi-Processing Module (MPM) Tuning\n```bash\n# Check current MPM\napache2ctl -M | grep mpm  # Ubuntu/Debian\nhttpd -M | grep mpm       # RHEL/CentOS\n\n# Configure Event MPM (most efficient)\nsudo tee /etc/apache2/mods-available/mpm_event.conf > /dev/null <<EOF\n<IfModule mpm_event_module>\n    StartServers             3\n    MinSpareThreads         75\n    MaxSpareThreads        250\n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    AsyncRequestWorkerFactor 2\n</IfModule>\nEOF\n\n# Enable Event MPM\nsudo a2dismod mpm_prefork\nsudo a2enmod mpm_event\nsudo systemctl restart apache2\n```\n\n### System-level Performance Tuning\n```bash\n# Increase system limits\nsudo tee -a /etc/security/limits.conf > /dev/null <<EOF\napache soft nofile 65535\napache hard nofile 65535\nwww-data soft nofile 65535\nwww-data hard nofile 65535\nEOF\n\n# Kernel optimization for web servers\nsudo tee -a /etc/sysctl.conf > /dev/null <<EOF\n# Apache/web server optimization\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\n\n# Memory management\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\nsudo sysctl -p\n```\n\n### Caching Configuration\n```bash\n# Enable caching modules\nsudo a2enmod cache cache_disk expires headers\n\n# Create cache configuration\nsudo tee /etc/apache2/conf-available/caching.conf > /dev/null <<EOF\n# Disk cache configuration\n<IfModule mod_cache_disk.c>\n    CacheRoot /var/cache/apache2/mod_cache_disk\n    CacheDirLevels 2\n    CacheDirLength 1\n    CacheEnable disk /\n    CacheIgnoreHeaders Set-Cookie\n    CacheDefaultExpire 3600\n    CacheMaxExpire 86400\n    CacheLastModifiedFactor 0.1\n</IfModule>\n\n# Browser caching\n<IfModule mod_expires.c>\n    ExpiresActive On\n    \n    # Cache static assets\n    ExpiresByType image/jpg \"access plus 1 year\"\n    ExpiresByType image/jpeg \"access plus 1 year\"\n    ExpiresByType image/gif \"access plus 1 year\"\n    ExpiresByType image/png \"access plus 1 year\"\n    ExpiresByType image/webp \"access plus 1 year\"\n    ExpiresByType text/css \"access plus 1 month\"\n    ExpiresByType application/pdf \"access plus 1 month\"\n    ExpiresByType text/javascript \"access plus 1 month\"\n    ExpiresByType application/javascript \"access plus 1 month\"\n    ExpiresByType application/x-javascript \"access plus 1 month\"\n    ExpiresByType application/x-shockwave-flash \"access plus 1 month\"\n    ExpiresByType image/x-icon \"access plus 1 year\"\n    ExpiresByType text/html \"access plus 300 seconds\"\n    \n    # Default expiration\n    ExpiresDefault \"access plus 1 day\"\n</IfModule>\n\n# Compression\n<IfModule mod_deflate.c>\n    # Enable compression for text files\n    <Location />\n        SetOutputFilter DEFLATE\n        \n        # Don't compress images or binaries\n        SetEnvIfNoCase Request_URI \\\n            \\.(?:gif|jpe?g|png|webp)$ no-gzip dont-vary\n        SetEnvIfNoCase Request_URI \\\n            \\.(?:exe|t?gz|zip|bz2|sit|rar|pdf)$ no-gzip dont-vary\n            \n        # Include file types to compress\n        AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript\n        AddOutputFilterByType DEFLATE application/javascript application/json application/xml application/xhtml+xml application/rss+xml\n    </Location>\n</IfModule>\nEOF\n\n# Create cache directory\nsudo mkdir -p /var/cache/apache2/mod_cache_disk\nsudo chown -R www-data:www-data /var/cache/apache2  # Ubuntu/Debian\nsudo chown -R apache:apache /var/cache/apache2      # RHEL/CentOS\n\nsudo a2enconf caching\nsudo systemctl reload apache2\n```\n\n## Cross-Platform Verification\n\n### Service Management (All Distributions)\n```bash\n# Check which init system is in use\nif command -v systemctl &> /dev/null; then\n    echo \"Using systemd\"\n    \n    # SystemD commands\n    sudo systemctl status apache2    # Ubuntu/Debian\n    sudo systemctl status httpd      # RHEL/CentOS\n    sudo systemctl restart apache2\n    sudo systemctl reload apache2\n    \nelif command -v service &> /dev/null; then\n    echo \"Using SysV init\"\n    \n    # Traditional service commands\n    sudo service apache2 status\n    sudo service apache2 restart\n    sudo service apache2 reload\n    \nelif command -v rc-service &> /dev/null; then\n    echo \"Using OpenRC (Alpine)\"\n    \n    # OpenRC commands\n    sudo rc-service apache2 status\n    sudo rc-service apache2 restart\nfi\n```\n\n### Configuration Testing\n```bash\n# Test configuration syntax (distribution-aware)\nif [ -f /etc/apache2/apache2.conf ]; then\n    # Ubuntu/Debian\n    sudo apache2ctl configtest\n    sudo apache2ctl -S  # Show virtual hosts\n    sudo apache2ctl -M  # Show loaded modules\nelif [ -f /etc/httpd/conf/httpd.conf ]; then\n    # RHEL/CentOS\n    sudo httpd -t\n    sudo httpd -S\n    sudo httpd -M\nfi\n\n# Show version and build info\napache2ctl -v  # Ubuntu/Debian\nhttpd -v       # RHEL/CentOS\n\n# Show all configuration\napache2ctl -T  # Ubuntu/Debian\nhttpd -T       # RHEL/CentOS\n```\n\n### Log Analysis and Monitoring\n```bash\n# Monitor Apache logs (cross-platform)\n# Ubuntu/Debian paths\nsudo tail -f /var/log/apache2/access.log\nsudo tail -f /var/log/apache2/error.log\n\n# RHEL/CentOS paths  \nsudo tail -f /var/log/httpd/access_log\nsudo tail -f /var/log/httpd/error_log\n\n# Real-time connection monitoring\nwatch \"netstat -an | grep :80 | grep ESTABLISHED | wc -l\"\n\n# Monitor process performance\nhtop -p $(pgrep apache2 || pgrep httpd | head -5 | tr '\\n' ',' | sed 's/,$//')\n\n# Check virtual host access\nsudo grep \"GET\\|POST\" /var/log/apache2/access.log | tail -20  # Ubuntu/Debian\nsudo grep \"GET\\|POST\" /var/log/httpd/access_log | tail -20    # RHEL/CentOS\n```\n\n## Cross-Platform Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check which user Apache runs as\nps aux | grep -E \"(apache2|httpd)\" | grep -v grep\n\n# Permission issues (distribution-aware)\n# Ubuntu/Debian\nsudo chown -R www-data:www-data /var/www/html\nsudo chmod -R 755 /var/www/html\n\n# RHEL/CentOS\nsudo chown -R apache:apache /var/www/html\nsudo chmod -R 755 /var/www/html\n\n# Check configuration file locations\nif [ -d /etc/apache2 ]; then\n    echo \"Configuration directory: /etc/apache2\"\n    echo \"Main config: /etc/apache2/apache2.conf\"\n    echo \"Sites: /etc/apache2/sites-available/\"\nelif [ -d /etc/httpd ]; then\n    echo \"Configuration directory: /etc/httpd\"\n    echo \"Main config: /etc/httpd/conf/httpd.conf\"\n    echo \"Virtual hosts: /etc/httpd/conf.d/\"\nfi\n\n# Port binding issues\nsudo lsof -i :80\nsudo netstat -tulpn | grep :80\n\n# SELinux troubleshooting (RHEL/CentOS)\nif command -v getenforce &> /dev/null; then\n    echo \"SELinux status: $(getenforce)\"\n    sudo ausearch -m AVC,USER_AVC -ts recent\n    sudo grep \"denied\" /var/log/audit/audit.log | tail -5\nfi\n\n# Check Apache error logs for issues\n# Ubuntu/Debian\nsudo tail -20 /var/log/apache2/error.log\n\n# RHEL/CentOS\nsudo tail -20 /var/log/httpd/error_log\n\n# Test specific virtual host\ncurl -H \"Host: example.com\" http://localhost/\n\n# Check loaded modules\napache2ctl -M | grep -E \"(rewrite|ssl|headers)\"  # Ubuntu/Debian\nhttpd -M | grep -E \"(rewrite|ssl|headers)\"        # RHEL/CentOS\n\n# Memory usage analysis\nps aux --sort=-%mem | grep -E \"(apache2|httpd)\" | head -10\n```\n\n### Debug Mode and Advanced Troubleshooting\n```bash\n# Enable debug logging\n# Ubuntu/Debian\nsudo nano /etc/apache2/apache2.conf\n# Add: LogLevel debug\n\n# RHEL/CentOS\nsudo nano /etc/httpd/conf/httpd.conf\n# Add: LogLevel debug\n\n# Test configuration with specific user\nsudo -u www-data apache2ctl configtest  # Ubuntu/Debian\nsudo -u apache httpd -t                  # RHEL/CentOS\n\n# Check virtual host configuration\napache2ctl -S  # Ubuntu/Debian\nhttpd -S       # RHEL/CentOS\n\n# Trace requests (careful in production)\n# Add to virtual host:\nLogLevel debug\nCustomLog /var/log/apache2/trace.log \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\" %D\"\n\n# Monitor real-time\nsudo tail -f /var/log/apache2/trace.log\n```\n\n## Additional Security Tools Integration\n\n### Fail2Ban Configuration\n```bash\n# Install Fail2Ban\nsudo apt install -y fail2ban  # Ubuntu/Debian\nsudo yum install -y fail2ban  # RHEL/CentOS\n\n# Create Apache-specific jails\nsudo tee /etc/fail2ban/jail.d/apache.conf > /dev/null <<EOF\n[apache-auth]\nenabled = true\nport = http,https\nfilter = apache-auth\nlogpath = /var/log/apache2/error.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/error_log  # RHEL/CentOS\nmaxretry = 6\nfindtime = 600\nbantime = 3600\n\n[apache-badbots]\nenabled = true\nport = http,https\nfilter = apache-badbots  \nlogpath = /var/log/apache2/access.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/access_log  # RHEL/CentOS\nmaxretry = 2\nbantime = 86400\n\n[apache-noscript]\nenabled = true\nport = http,https\nfilter = apache-noscript\nlogpath = /var/log/apache2/access.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/access_log  # RHEL/CentOS\nmaxretry = 6\nbantime = 86400\n\n[apache-overflows]\nenabled = true\nport = http,https\nfilter = apache-overflows\nlogpath = /var/log/apache2/error.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/error_log  # RHEL/CentOS\nmaxretry = 2\nbantime = 86400\nEOF\n\nsudo systemctl enable --now fail2ban\n```\n\n### Log Analysis and Monitoring\n```bash\n# Install GoAccess for real-time log analysis\n# Ubuntu/Debian\nsudo apt install -y goaccess\n\n# RHEL/CentOS\nsudo yum install -y goaccess\n\n# Analyze logs in real-time\n# Ubuntu/Debian\nsudo goaccess /var/log/apache2/access.log -c\n\n# RHEL/CentOS\nsudo goaccess /var/log/httpd/access_log -c\n\n# Generate HTML report\nsudo goaccess /var/log/apache2/access.log -o /var/www/html/stats.html --log-format=COMBINED --real-time-html\n```\n\n## Backup and Maintenance\n\n### Automated Backup Script\n```bash\nsudo tee /usr/local/bin/apache-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/apache\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{config,logs,sites}\n\n# Detect distribution and set paths\nif [ -d /etc/apache2 ]; then\n    # Ubuntu/Debian\n    CONFIG_DIR=\"/etc/apache2\"\n    LOG_DIR=\"/var/log/apache2\"\n    SERVICE_NAME=\"apache2\"\nelif [ -d /etc/httpd ]; then\n    # RHEL/CentOS\n    CONFIG_DIR=\"/etc/httpd\"\n    LOG_DIR=\"/var/log/httpd\"  \n    SERVICE_NAME=\"httpd\"\nfi\n\n# Backup configuration\ntar -czf ${BACKUP_DIR}/config/apache-config-${DATE}.tar.gz -C / ${CONFIG_DIR#/}\n\n# Backup website files\ntar -czf ${BACKUP_DIR}/sites/apache-sites-${DATE}.tar.gz -C /var/www .\n\n# Backup recent logs (last 7 days)\nfind ${LOG_DIR} -name \"*.log\" -mtime -7 -exec tar -czf ${BACKUP_DIR}/logs/apache-logs-${DATE}.tar.gz {} +\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"apache-*\" -type f -mtime +7 -delete\n\necho \"Apache backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/apache-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/apache-backup.sh\" | sudo tee -a /etc/crontab\n```\n\nThis updated Apache guide now includes:\n- ✅ **Complete cross-platform support** (Ubuntu, Debian, RHEL, CentOS, Rocky, Fedora, Arch, openSUSE, Alpine)\n- ✅ **2024 security best practices** (modern SSL/TLS, security headers, ModSecurity WAF)\n- ✅ **Performance optimization** (MPM tuning, system optimization, caching)  \n- ✅ **Advanced configurations** (virtual hosts, SSL certificates, compression)\n- ✅ **Comprehensive troubleshooting** (SELinux, cross-platform debugging)\n- ✅ **Security tools integration** (Fail2Ban, log analysis, monitoring)\n\nShould I continue updating the other guides with this same comprehensive approach?","readmeHtml":"<h1 id=\"apache-http-server-installation-guide\" class=\"mobile-header\">Apache HTTP Server Installation Guide</h1>\n<p class=\"mobile-paragraph\">World's most popular web server software serving over 40% of active websites. Reliable, secure, and highly configurable for hosting websites and web applications.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access  </li>\n<li class=\"mobile-list-item\">1GB RAM minimum, 2GB+ recommended for production</li>\n<li class=\"mobile-list-item\">Network connectivity for package downloads</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Apache and essential modules\nsudo apt install -y apache2 apache2-utils\n\n# Enable essential modules\nsudo a2enmod rewrite ssl headers deflate expires security2\n\n# Start and enable Apache\nsudo systemctl enable --now apache2\n\n# Check status\nsudo systemctl status apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache (httpd)\nsudo yum install -y httpd httpd-tools mod_ssl\n\n# For newer versions with dnf\nsudo dnf install -y httpd httpd-tools mod_ssl\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Check status\nsudo systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\nsudo dnf install -y httpd httpd-tools mod_ssl mod_security\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\nsudo pacman -Syu apache\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Edit configuration\nsudo nano /etc/httpd/conf/httpd.conf\n# Uncomment: ServerName www.example.com:80</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesuse\" class=\"mobile-header\">openSUSE/SUSE</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\nsudo zypper install -y apache2 apache2-mod_ssl apache2-utils\n\n# Start and enable Apache\nsudo systemctl enable --now apache2\n\n# Configure firewall\nsudo SuSEfirewall2 open EXT TCP 80 443</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\nsudo apk update\nsudo apk add apache2 apache2-ssl apache2-utils\n\n# Create necessary directories\nsudo mkdir -p /var/www/html\nsudo mkdir -p /run/apache2\n\n# Start and enable Apache\nsudo rc-update add apache2 default\nsudo service apache2 start</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Official Apache Docker image\ndocker run -d \\\n  --name apache \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -v ~/apache/htdocs:/usr/local/apache2/htdocs/ \\\n  -v ~/apache/conf:/usr/local/apache2/conf/ \\\n  -v ~/apache/logs:/usr/local/apache2/logs/ \\\n  httpd:latest\n\n# With Docker Compose\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\nservices:\n  apache:\n    image: httpd:latest\n    restart: unless-stopped\n    ports:\n      - &quot;80:80&quot;\n      - &quot;443:443&quot;\n    volumes:\n      - ./htdocs:/usr/local/apache2/htdocs/\n      - ./conf/httpd.conf:/usr/local/apache2/conf/httpd.conf\n      - ./logs:/usr/local/apache2/logs/\n    networks:\n      - webserver\n\nnetworks:\n  webserver:\n    driver: bridge\nEOF\n\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h3 id=\"source-compilation-advanced\" class=\"mobile-header\">Source Compilation (Advanced)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install build dependencies\n# Ubuntu/Debian\nsudo apt install -y build-essential libapr1-dev libaprutil1-dev libpcre3-dev libssl-dev zlib1g-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y &quot;Development Tools&quot;\nsudo yum install -y apr-devel apr-util-devel pcre-devel openssl-devel zlib-devel\n\n# Download Apache source\ncd /tmp\nwget https://archive.apache.org/dist/httpd/httpd-2.4.57.tar.gz\ntar xzf httpd-2.4.57.tar.gz\ncd httpd-2.4.57\n\n# Configure with security and performance modules\n./configure \\\n  --prefix=/etc/apache2 \\\n  --exec-prefix=/usr \\\n  --bindir=/usr/bin \\\n  --sbindir=/usr/sbin \\\n  --sysconfdir=/etc/apache2 \\\n  --libexecdir=/usr/lib/apache2/modules \\\n  --localstatedir=/var \\\n  --datadir=/usr/share/apache2 \\\n  --includedir=/usr/include/apache2 \\\n  --infodir=/usr/share/info \\\n  --mandir=/usr/share/man \\\n  --with-program-name=apache2 \\\n  --enable-layout=Debian \\\n  --with-regex=pcre \\\n  --enable-mods-shared=reallyall \\\n  --enable-ssl \\\n  --enable-rewrite \\\n  --enable-headers \\\n  --enable-deflate \\\n  --enable-expires \\\n  --enable-security \\\n  --with-ssl=/usr \\\n  --with-ldap \\\n  --with-ldap-include=/usr/include \\\n  --with-ldap-lib=/usr/lib\n\n# Compile and install\nmake -j$(nproc)\nsudo make install\n\n# Create apache user\nsudo useradd -r -s /sbin/nologin apache\n\n# Create systemd service\nsudo tee /etc/systemd/system/apache2.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=The Apache HTTP Server\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=notify\nExecStart=/usr/sbin/apache2 -DFOREGROUND\nExecReload=/usr/sbin/apache2ctl graceful\nExecStop=/bin/kill -WINTERM \\${MAINPID}\nKillSignal=SIGCONT\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now apache2</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening-2024-best-practices\" class=\"mobile-header\">Security Hardening (2024 Best Practices)</h2>\n<h3 id=\"hide-server-information\" class=\"mobile-header\">Hide Server Information</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security configuration\n# Ubuntu/Debian\nsudo tee /etc/apache2/conf-available/security-hardening.conf &gt; /dev/null &lt;&lt;EOF\n# Hide Apache version and OS information\nServerTokens Prod\nServerSignature Off\n\n# Hide PHP version (if using PHP)\nHeader always unset X-Powered-By\nHeader unset X-Powered-By\n\n# Security headers (2024 recommendations)\nHeader always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\nHeader always set X-Frame-Options &quot;SAMEORIGIN&quot;\nHeader always set X-Content-Type-Options &quot;nosniff&quot;\nHeader always set X-XSS-Protection &quot;1; mode=block&quot;\nHeader always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\nHeader always set Content-Security-Policy &quot;default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;; img-src &#039;self&#039; data: https:; font-src &#039;self&#039; data:; connect-src &#039;self&#039;; media-src &#039;self&#039;; object-src &#039;none&#039;; child-src &#039;self&#039;; form-action &#039;self&#039;; base-uri &#039;self&#039;;&quot;\nHeader always set Permissions-Policy &quot;camera=(), microphone=(), geolocation=()&quot;\n\n# Remove sensitive headers\nHeader always unset Server\nHeader unset Server\n\n# Disable server status and info\n&lt;Location &quot;/server-status&quot;&gt;\n    SetHandler server-status\n    Require local\n&lt;/Location&gt;\n\n&lt;Location &quot;/server-info&quot;&gt;\n    SetHandler server-info\n    Require local\n&lt;/Location&gt;\n\n# Disable trace method\nTraceEnable off\n\n# Timeout configurations\nTimeout 60\nKeepAliveTimeout 15\n\n# Limit request size (adjust as needed)\nLimitRequestBody 10485760  # 10MB\n\n# Hide .htaccess files\n&lt;FilesMatch &quot;^\\.ht&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n# Hide backup and temporary files\n&lt;FilesMatch &quot;\\.(bak|backup|swp|tmp|~)$&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n# Disable directory browsing by default\nOptions -Indexes\n\n# Information disclosure protection\n&lt;DirectoryMatch &quot;/\\.&quot;&gt;\n    Require all denied\n&lt;/DirectoryMatch&gt;\n\n# Clickjacking protection\nHeader always append X-Frame-Options SAMEORIGIN\nEOF\n\n# Enable security configuration\nsudo a2enconf security-hardening\nsudo systemctl reload apache2\n\n# RHEL/CentOS (add to main configuration)\nsudo tee -a /etc/httpd/conf/httpd.conf &gt; /dev/null &lt;&lt;EOF\n\n# Security hardening\nServerTokens Prod\nServerSignature Off\n\n# Load security headers module\nLoadModule headers_module modules/mod_headers.so\n\n# Security headers\nHeader always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\nHeader always set X-Frame-Options &quot;SAMEORIGIN&quot;\nHeader always set X-Content-Type-Options &quot;nosniff&quot;\nHeader always set X-XSS-Protection &quot;1; mode=block&quot;\nHeader always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n\n# Disable trace method\nTraceEnable off\n\n# Hide .htaccess files\n&lt;FilesMatch &quot;^\\.ht&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n# Disable directory browsing\nOptions -Indexes\nEOF\n\nsudo systemctl reload httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"modsecurity-waf-installation\" class=\"mobile-header\">ModSecurity WAF Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt install -y libapache2-mod-security2\n\n# RHEL/CentOS\nsudo yum install -y mod_security mod_security_crs\n\n# Enable ModSecurity\nsudo a2enmod security2  # Ubuntu/Debian\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/apache2/modsecurity.d\ncd /etc/apache2/modsecurity.d\nsudo wget https://github.com/coreruleset/coreruleset/archive/refs/tags/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 crs\n\n# Configure ModSecurity\nsudo tee /etc/apache2/mods-available/security2.conf &gt; /dev/null &lt;&lt;EOF\n&lt;IfModule mod_security2.c&gt;\n    SecRuleEngine On\n    SecRequestBodyAccess On\n    SecRequestBodyLimit 13107200\n    SecRequestBodyNoFilesLimit 131072\n    SecRequestBodyInMemoryLimit 131072\n    SecRequestBodyLimitAction Reject\n    SecRule REQUEST_HEADERS:Content-Type &quot;text/xml&quot; \\\n         &quot;id:&#039;200000&#039;,phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML&quot;\n    SecRule REQUEST_HEADERS:Content-Type &quot;application/json&quot; \\\n         &quot;id:&#039;200001&#039;,phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON&quot;\n    SecRule REQBODY_ERROR &quot;!@eq 0&quot; \\\n    &quot;id:&#039;200002&#039;, phase:2,t:none,log,deny,status:400,msg:&#039;Failed to parse request body.&#039;,logdata:&#039;Error %{REQBODY_ERROR_MSG}&#039;,severity:2&quot;\n    SecRule MULTIPART_STRICT_ERROR &quot;!@eq 0&quot; \\\n    &quot;id:&#039;200003&#039;,phase:2,t:none,log,deny,status:400, \\\n    msg:&#039;Multipart request body failed strict validation: \\\n    PE %{REQBODY_PROCESSOR_ERROR}, \\\n    BQ %{MULTIPART_BOUNDARY_QUOTED}, \\\n    BW %{MULTIPART_BOUNDARY_WHITESPACE}, \\\n    DB %{MULTIPART_DATA_BEFORE}, \\\n    DA %{MULTIPART_DATA_AFTER}, \\\n    HF %{MULTIPART_HEADER_FOLDING}, \\\n    LF %{MULTIPART_LF_LINE}, \\\n    SM %{MULTIPART_MISSING_SEMICOLON}, \\\n    IQ %{MULTIPART_INVALID_QUOTING}, \\\n    IP %{MULTIPART_INVALID_PART}, \\\n    IH %{MULTIPART_INVALID_HEADER_FOLDING}, \\\n    FL %{MULTIPART_FILE_LIMIT_EXCEEDED}&#039;&quot;\n\n    SecRule MULTIPART_UNMATCHED_BOUNDARY &quot;!@eq 0&quot; \\\n    &quot;id:&#039;200004&#039;,phase:2,t:none,log,deny,msg:&#039;Multipart parser detected a possible unmatched boundary.&#039;&quot;\n\n    SecPcreMatchLimit 1000\n    SecPcreMatchLimitRecursion 1000\n\n    SecRule TX:/^MSC_/ &quot;!@streq 0&quot; \\\n            &quot;id:&#039;200005&#039;,phase:2,t:none,deny,msg:&#039;ModSecurity internal error flagged: %{MATCHED_VAR_NAME}&#039;&quot;\n\n    SecResponseBodyAccess Off\n    SecDebugLog /var/log/apache2/modsec_debug.log\n    SecDebugLogLevel 0\n    SecAuditEngine RelevantOnly\n    SecAuditLogRelevantStatus &quot;^(?:5|4(?!04))&quot;\n    SecAuditLogParts ABDEFHIJZ\n    SecAuditLogType Serial\n    SecAuditLog /var/log/apache2/modsec_audit.log\n    \n    # Include OWASP Core Rule Set\n    Include /etc/apache2/modsecurity.d/crs/crs-setup.conf.example\n    Include /etc/apache2/modsecurity.d/crs/rules/*.conf\n&lt;/IfModule&gt;\nEOF\n\n# Create data directory\nsudo mkdir -p /var/cache/modsecurity\nsudo chown www-data:www-data /var/cache/modsecurity\n\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration-modern-2024-standards\" class=\"mobile-header\">SSL/TLS Configuration (Modern 2024 Standards)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create modern SSL configuration\nsudo tee /etc/apache2/conf-available/ssl-modern.conf &gt; /dev/null &lt;&lt;EOF\n# Modern SSL configuration (2024)\nSSLEngine on\n\n# Protocols - Only TLS 1.2 and 1.3\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n\n# Cipher suites for modern browsers (2024)\nSSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n\n# Prefer server ciphers for TLS 1.2, client ciphers for TLS 1.3\nSSLHonorCipherOrder off\n\n# HSTS (HTTP Strict Transport Security)\nHeader always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\n\n# Session cache\nSSLSessionCache shmcb:/var/run/ssl_scache(512000)\nSSLSessionCacheTimeout 300\n\n# OCSP Stapling\nSSLUseStapling On\nSSLStaplingCache shmcb:/var/run/ocsp(128000)\nSSLStaplingResponderTimeout 5\nSSLStaplingReturnResponderErrors off\n\n# Modern security options\nSSLCompression off\nSSLSessionTickets off\n\n# Perfect Forward Secrecy\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem\nEOF\n\n# Generate strong DH parameters\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n# Enable SSL configuration\nsudo a2enconf ssl-modern\nsudo a2enmod ssl headers\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"secure-virtual-host-configuration\" class=\"mobile-header\">Secure Virtual Host Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production-ready virtual host\nsudo tee /etc/apache2/sites-available/secure-site.conf &gt; /dev/null &lt;&lt;EOF\n# HTTP to HTTPS redirect\n&lt;VirtualHost *:80&gt;\n    ServerName example.com\n    ServerAlias www.example.com\n    \n    # Security headers for redirects\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    \n    # Redirect to HTTPS\n    Redirect permanent / https://example.com/\n&lt;/VirtualHost&gt;\n\n# HTTPS Virtual Host\n&lt;VirtualHost *:443&gt;\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/html/example.com\n    \n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    # Security headers (2024 standards)\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\n    Header always set X-Frame-Options &quot;SAMEORIGIN&quot;\n    Header always set X-Content-Type-Options &quot;nosniff&quot;\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n    Header always set Content-Security-Policy &quot;default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;; img-src &#039;self&#039; data: https:; font-src &#039;self&#039; data:; connect-src &#039;self&#039;; media-src &#039;self&#039;; object-src &#039;none&#039;; child-src &#039;self&#039;; form-action &#039;self&#039;; base-uri &#039;self&#039;;&quot;\n    Header always set Permissions-Policy &quot;camera=(), microphone=(), geolocation=()&quot;\n    \n    # Remove server information\n    Header always unset Server\n    Header unset X-Powered-By\n    \n    &lt;Directory /var/www/html/example.com&gt;\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n        \n        # Additional security\n        &lt;Files &quot;.*&quot;&gt;\n            Require all denied\n        &lt;/Files&gt;\n        \n        &lt;Files &quot;*.php~&quot;&gt;\n            Require all denied\n        &lt;/Files&gt;\n        \n        &lt;Files &quot;*.inc&quot;&gt;\n            Require all denied\n        &lt;/Files&gt;\n    &lt;/Directory&gt;\n    \n    # PHP configuration (if using PHP)\n    &lt;IfModule mod_php.c&gt;\n        php_admin_flag allow_url_include Off\n        php_admin_flag allow_url_fopen Off\n        php_admin_flag file_uploads On\n        php_admin_value upload_max_filesize 64M\n        php_admin_value post_max_size 64M\n        php_admin_value memory_limit 256M\n        php_admin_value max_execution_time 300\n        php_admin_flag expose_php Off\n    &lt;/IfModule&gt;\n    \n    # Compression\n    &lt;IfModule mod_deflate.c&gt;\n        SetOutputFilter DEFLATE\n        AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain application/javascript application/xml+rss application/xml application/x-javascript application/json\n        \n        # Don&#039;t compress images\n        SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png)$ no-gzip dont-vary\n        SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary\n    &lt;/IfModule&gt;\n    \n    # Caching rules\n    &lt;IfModule mod_expires.c&gt;\n        ExpiresActive On\n        ExpiresByType image/jpg &quot;access plus 1 month&quot;\n        ExpiresByType image/jpeg &quot;access plus 1 month&quot;\n        ExpiresByType image/gif &quot;access plus 1 month&quot;\n        ExpiresByType image/png &quot;access plus 1 month&quot;\n        ExpiresByType image/webp &quot;access plus 1 month&quot;\n        ExpiresByType text/css &quot;access plus 1 month&quot;\n        ExpiresByType application/pdf &quot;access plus 1 month&quot;\n        ExpiresByType text/javascript &quot;access plus 1 month&quot;\n        ExpiresByType application/javascript &quot;access plus 1 month&quot;\n        ExpiresByType application/x-javascript &quot;access plus 1 month&quot;\n        ExpiresByType application/x-shockwave-flash &quot;access plus 1 month&quot;\n        ExpiresByType image/x-icon &quot;access plus 1 year&quot;\n        ExpiresDefault &quot;access plus 2 days&quot;\n    &lt;/IfModule&gt;\n    \n    # Rate limiting (if mod_evasive is available)\n    &lt;IfModule mod_evasive24.c&gt;\n        DOSHashTableSize    1024\n        DOSPageCount        2\n        DOSSiteCount        50\n        DOSPageInterval     1\n        DOSSiteInterval     1\n        DOSBlockingPeriod   600\n        DOSLogDir           /var/log/apache2/\n        DOSEmailNotify      admin@example.com\n    &lt;/IfModule&gt;\n    \n    # ModSecurity\n    &lt;IfModule mod_security2.c&gt;\n        SecRuleEngine On\n        SecDefaultAction &quot;log,auditlog,pass&quot;\n    &lt;/IfModule&gt;\n    \n    ErrorLog \\${APACHE_LOG_DIR}/example.com_error.log\n    CustomLog \\${APACHE_LOG_DIR}/example.com_access.log combined\n    \n    # Log security events\n    CustomLog \\${APACHE_LOG_DIR}/example.com_security.log &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b \\&quot;%{Referer}i\\&quot; \\&quot;%{User-agent}i\\&quot;&quot; env=security\n&lt;/VirtualHost&gt;\n\n# WWW redirect\n&lt;VirtualHost *:443&gt;\n    ServerName www.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    Redirect permanent / https://example.com/\n&lt;/VirtualHost&gt;\nEOF\n\nsudo a2ensite secure-site.conf\nsudo a2enconf security-hardening\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-modules\" class=\"mobile-header\">Advanced Security Modules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install additional security modules\n# Ubuntu/Debian\nsudo apt install -y libapache2-mod-evasive libapache2-mod-security2\n\n# RHEL/CentOS\nsudo yum install -y mod_evasive mod_security\n\n# Enable modules\nsudo a2enmod evasive  # Ubuntu/Debian\nsudo a2enmod security2\n\n# Configure mod_evasive (DDoS protection)\nsudo tee /etc/apache2/mods-available/evasive.conf &gt; /dev/null &lt;&lt;EOF\n&lt;IfModule mod_evasive24.c&gt;\n    DOSHashTableSize    1024\n    DOSPageCount        3\n    DOSSiteCount        50\n    DOSPageInterval     1\n    DOSSiteInterval     1\n    DOSBlockingPeriod   600\n    DOSLogDir           /var/log/apache2/\n    DOSEmailNotify      admin@example.com\n    DOSWhitelist        127.0.0.1\n    DOSWhitelist        192.168.1.*\n&lt;/IfModule&gt;\nEOF\n\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h2 id=\"ssl-certificate-setup-cross-platform\" class=\"mobile-header\">SSL Certificate Setup (Cross-Platform)</h2>\n<h3 id=\"lets-encrypt-integration\" class=\"mobile-header\">Let's Encrypt Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot - Universal method\nsudo snap install core; sudo snap refresh core\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n\n# Alternative: Package manager installation\n# Ubuntu/Debian\nsudo apt install -y certbot python3-certbot-apache\n\n# RHEL/CentOS (enable EPEL first)\nsudo yum install -y epel-release\nsudo yum install -y certbot python3-certbot-apache\n\n# Fedora\nsudo dnf install -y certbot python3-certbot-apache\n\n# Arch Linux\nsudo pacman -S certbot certbot-apache\n\n# Obtain certificate\nsudo certbot --apache -d example.com -d www.example.com\n\n# Auto-renewal setup (universal)\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet &amp;&amp; systemctl reload apache2\n\n# Test renewal\nsudo certbot renew --dry-run</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-ssl-configuration\" class=\"mobile-header\">Manual SSL Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate for testing\nsudo mkdir -p /etc/ssl/private\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/ssl/private/apache-selfsigned.key \\\n  -out /etc/ssl/certs/apache-selfsigned.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=example.com&quot;\n\n# Create SSL configuration snippet\nsudo tee /etc/apache2/conf-available/ssl-params.conf &gt; /dev/null &lt;&lt;EOF\n# Modern SSL configuration\nSSLEngine on\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\nSSLCipherSuite ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384\nSSLHonorCipherOrder off\nSSLSessionTickets off\nSSLUseStapling on\nSSLStaplingCache shmcb:/var/run/ssl_stapling(32768)\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem\n\n# Security headers\nHeader always set Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;\nHeader always set X-Content-Type-Options nosniff\nHeader always set X-Frame-Options SAMEORIGIN\nHeader always set X-XSS-Protection &quot;1; mode=block&quot;\nEOF\n\nsudo a2enconf ssl-params</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration-all-platforms\" class=\"mobile-header\">Firewall Configuration (All Platforms)</h2>\n<h3 id=\"ufw-ubuntudebian\" class=\"mobile-header\">UFW (Ubuntu/Debian)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo ufw app list | grep Apache\nsudo ufw allow &#039;Apache Full&#039;    # HTTP and HTTPS\nsudo ufw allow &#039;Apache&#039;         # HTTP only  \nsudo ufw allow &#039;Apache Secure&#039;  # HTTPS only\nsudo ufw enable\nsudo ufw status</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewalld-rhelcentosfedora\" class=\"mobile-header\">Firewalld (RHEL/CentOS/Fedora)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\nsudo firewall-cmd --list-services</code></pre>\n      </div>\n    </div>\n<h3 id=\"iptables-universal\" class=\"mobile-header\">iptables (Universal)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Allow HTTP and HTTPS\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\n\n# Save rules (varies by distribution)\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save\n\n# Arch Linux\nsudo iptables-save &gt; /etc/iptables/iptables.rules\n\n# Alpine Linux\nsudo /etc/init.d/iptables save</code></pre>\n      </div>\n    </div>\n<h3 id=\"selinux-configuration-rhelcentosfedora\" class=\"mobile-header\">SELinux Configuration (RHEL/CentOS/Fedora)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check SELinux status\ngetenforce\n\n# Set SELinux booleans for Apache\nsudo setsebool -P httpd_can_network_connect 1\nsudo setsebool -P httpd_can_network_relay 1\nsudo setsebool -P httpd_use_nfs 1\nsudo setsebool -P httpd_graceful_shutdown 1\n\n# For custom content directories\nsudo semanage fcontext -a -t httpd_exec_t &quot;/var/www/html(/.*)?&quot;\nsudo restorecon -Rv /var/www/html/\n\n# For custom ports\nsudo semanage port -a -t http_port_t -p tcp 8080\n\n# Check denials\nsudo ausearch -m AVC,USER_AVC,SELINUX_ERR -ts recent</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"multi-processing-module-mpm-tuning\" class=\"mobile-header\">Multi-Processing Module (MPM) Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check current MPM\napache2ctl -M | grep mpm  # Ubuntu/Debian\nhttpd -M | grep mpm       # RHEL/CentOS\n\n# Configure Event MPM (most efficient)\nsudo tee /etc/apache2/mods-available/mpm_event.conf &gt; /dev/null &lt;&lt;EOF\n&lt;IfModule mpm_event_module&gt;\n    StartServers             3\n    MinSpareThreads         75\n    MaxSpareThreads        250\n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    AsyncRequestWorkerFactor 2\n&lt;/IfModule&gt;\nEOF\n\n# Enable Event MPM\nsudo a2dismod mpm_prefork\nsudo a2enmod mpm_event\nsudo systemctl restart apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"system-level-performance-tuning\" class=\"mobile-header\">System-level Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase system limits\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;EOF\napache soft nofile 65535\napache hard nofile 65535\nwww-data soft nofile 65535\nwww-data hard nofile 65535\nEOF\n\n# Kernel optimization for web servers\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;EOF\n# Apache/web server optimization\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\n\n# Memory management\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"caching-configuration\" class=\"mobile-header\">Caching Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable caching modules\nsudo a2enmod cache cache_disk expires headers\n\n# Create cache configuration\nsudo tee /etc/apache2/conf-available/caching.conf &gt; /dev/null &lt;&lt;EOF\n# Disk cache configuration\n&lt;IfModule mod_cache_disk.c&gt;\n    CacheRoot /var/cache/apache2/mod_cache_disk\n    CacheDirLevels 2\n    CacheDirLength 1\n    CacheEnable disk /\n    CacheIgnoreHeaders Set-Cookie\n    CacheDefaultExpire 3600\n    CacheMaxExpire 86400\n    CacheLastModifiedFactor 0.1\n&lt;/IfModule&gt;\n\n# Browser caching\n&lt;IfModule mod_expires.c&gt;\n    ExpiresActive On\n    \n    # Cache static assets\n    ExpiresByType image/jpg &quot;access plus 1 year&quot;\n    ExpiresByType image/jpeg &quot;access plus 1 year&quot;\n    ExpiresByType image/gif &quot;access plus 1 year&quot;\n    ExpiresByType image/png &quot;access plus 1 year&quot;\n    ExpiresByType image/webp &quot;access plus 1 year&quot;\n    ExpiresByType text/css &quot;access plus 1 month&quot;\n    ExpiresByType application/pdf &quot;access plus 1 month&quot;\n    ExpiresByType text/javascript &quot;access plus 1 month&quot;\n    ExpiresByType application/javascript &quot;access plus 1 month&quot;\n    ExpiresByType application/x-javascript &quot;access plus 1 month&quot;\n    ExpiresByType application/x-shockwave-flash &quot;access plus 1 month&quot;\n    ExpiresByType image/x-icon &quot;access plus 1 year&quot;\n    ExpiresByType text/html &quot;access plus 300 seconds&quot;\n    \n    # Default expiration\n    ExpiresDefault &quot;access plus 1 day&quot;\n&lt;/IfModule&gt;\n\n# Compression\n&lt;IfModule mod_deflate.c&gt;\n    # Enable compression for text files\n    &lt;Location /&gt;\n        SetOutputFilter DEFLATE\n        \n        # Don&#039;t compress images or binaries\n        SetEnvIfNoCase Request_URI \\\n            \\.(?:gif|jpe?g|png|webp)$ no-gzip dont-vary\n        SetEnvIfNoCase Request_URI \\\n            \\.(?:exe|t?gz|zip|bz2|sit|rar|pdf)$ no-gzip dont-vary\n            \n        # Include file types to compress\n        AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript\n        AddOutputFilterByType DEFLATE application/javascript application/json application/xml application/xhtml+xml application/rss+xml\n    &lt;/Location&gt;\n&lt;/IfModule&gt;\nEOF\n\n# Create cache directory\nsudo mkdir -p /var/cache/apache2/mod_cache_disk\nsudo chown -R www-data:www-data /var/cache/apache2  # Ubuntu/Debian\nsudo chown -R apache:apache /var/cache/apache2      # RHEL/CentOS\n\nsudo a2enconf caching\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h2 id=\"cross-platform-verification\" class=\"mobile-header\">Cross-Platform Verification</h2>\n<h3 id=\"service-management-all-distributions\" class=\"mobile-header\">Service Management (All Distributions)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check which init system is in use\nif command -v systemctl &amp;&gt; /dev/null; then\n    echo &quot;Using systemd&quot;\n    \n    # SystemD commands\n    sudo systemctl status apache2    # Ubuntu/Debian\n    sudo systemctl status httpd      # RHEL/CentOS\n    sudo systemctl restart apache2\n    sudo systemctl reload apache2\n    \nelif command -v service &amp;&gt; /dev/null; then\n    echo &quot;Using SysV init&quot;\n    \n    # Traditional service commands\n    sudo service apache2 status\n    sudo service apache2 restart\n    sudo service apache2 reload\n    \nelif command -v rc-service &amp;&gt; /dev/null; then\n    echo &quot;Using OpenRC (Alpine)&quot;\n    \n    # OpenRC commands\n    sudo rc-service apache2 status\n    sudo rc-service apache2 restart\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"configuration-testing\" class=\"mobile-header\">Configuration Testing</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test configuration syntax (distribution-aware)\nif [ -f /etc/apache2/apache2.conf ]; then\n    # Ubuntu/Debian\n    sudo apache2ctl configtest\n    sudo apache2ctl -S  # Show virtual hosts\n    sudo apache2ctl -M  # Show loaded modules\nelif [ -f /etc/httpd/conf/httpd.conf ]; then\n    # RHEL/CentOS\n    sudo httpd -t\n    sudo httpd -S\n    sudo httpd -M\nfi\n\n# Show version and build info\napache2ctl -v  # Ubuntu/Debian\nhttpd -v       # RHEL/CentOS\n\n# Show all configuration\napache2ctl -T  # Ubuntu/Debian\nhttpd -T       # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-analysis-and-monitoring\" class=\"mobile-header\">Log Analysis and Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Apache logs (cross-platform)\n# Ubuntu/Debian paths\nsudo tail -f /var/log/apache2/access.log\nsudo tail -f /var/log/apache2/error.log\n\n# RHEL/CentOS paths  \nsudo tail -f /var/log/httpd/access_log\nsudo tail -f /var/log/httpd/error_log\n\n# Real-time connection monitoring\nwatch &quot;netstat -an | grep :80 | grep ESTABLISHED | wc -l&quot;\n\n# Monitor process performance\nhtop -p $(pgrep apache2 || pgrep httpd | head -5 | tr &#039;\\n&#039; &#039;,&#039; | sed &#039;s/,$//&#039;)\n\n# Check virtual host access\nsudo grep &quot;GET\\|POST&quot; /var/log/apache2/access.log | tail -20  # Ubuntu/Debian\nsudo grep &quot;GET\\|POST&quot; /var/log/httpd/access_log | tail -20    # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h2 id=\"cross-platform-troubleshooting\" class=\"mobile-header\">Cross-Platform Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check which user Apache runs as\nps aux | grep -E &quot;(apache2|httpd)&quot; | grep -v grep\n\n# Permission issues (distribution-aware)\n# Ubuntu/Debian\nsudo chown -R www-data:www-data /var/www/html\nsudo chmod -R 755 /var/www/html\n\n# RHEL/CentOS\nsudo chown -R apache:apache /var/www/html\nsudo chmod -R 755 /var/www/html\n\n# Check configuration file locations\nif [ -d /etc/apache2 ]; then\n    echo &quot;Configuration directory: /etc/apache2&quot;\n    echo &quot;Main config: /etc/apache2/apache2.conf&quot;\n    echo &quot;Sites: /etc/apache2/sites-available/&quot;\nelif [ -d /etc/httpd ]; then\n    echo &quot;Configuration directory: /etc/httpd&quot;\n    echo &quot;Main config: /etc/httpd/conf/httpd.conf&quot;\n    echo &quot;Virtual hosts: /etc/httpd/conf.d/&quot;\nfi\n\n# Port binding issues\nsudo lsof -i :80\nsudo netstat -tulpn | grep :80\n\n# SELinux troubleshooting (RHEL/CentOS)\nif command -v getenforce &amp;&gt; /dev/null; then\n    echo &quot;SELinux status: $(getenforce)&quot;\n    sudo ausearch -m AVC,USER_AVC -ts recent\n    sudo grep &quot;denied&quot; /var/log/audit/audit.log | tail -5\nfi\n\n# Check Apache error logs for issues\n# Ubuntu/Debian\nsudo tail -20 /var/log/apache2/error.log\n\n# RHEL/CentOS\nsudo tail -20 /var/log/httpd/error_log\n\n# Test specific virtual host\ncurl -H &quot;Host: example.com&quot; http://localhost/\n\n# Check loaded modules\napache2ctl -M | grep -E &quot;(rewrite|ssl|headers)&quot;  # Ubuntu/Debian\nhttpd -M | grep -E &quot;(rewrite|ssl|headers)&quot;        # RHEL/CentOS\n\n# Memory usage analysis\nps aux --sort=-%mem | grep -E &quot;(apache2|httpd)&quot; | head -10</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode-and-advanced-troubleshooting\" class=\"mobile-header\">Debug Mode and Advanced Troubleshooting</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\n# Ubuntu/Debian\nsudo nano /etc/apache2/apache2.conf\n# Add: LogLevel debug\n\n# RHEL/CentOS\nsudo nano /etc/httpd/conf/httpd.conf\n# Add: LogLevel debug\n\n# Test configuration with specific user\nsudo -u www-data apache2ctl configtest  # Ubuntu/Debian\nsudo -u apache httpd -t                  # RHEL/CentOS\n\n# Check virtual host configuration\napache2ctl -S  # Ubuntu/Debian\nhttpd -S       # RHEL/CentOS\n\n# Trace requests (careful in production)\n# Add to virtual host:\nLogLevel debug\nCustomLog /var/log/apache2/trace.log &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b \\&quot;%{Referer}i\\&quot; \\&quot;%{User-agent}i\\&quot; %D&quot;\n\n# Monitor real-time\nsudo tail -f /var/log/apache2/trace.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-security-tools-integration\" class=\"mobile-header\">Additional Security Tools Integration</h2>\n<h3 id=\"fail2ban-configuration\" class=\"mobile-header\">Fail2Ban Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Fail2Ban\nsudo apt install -y fail2ban  # Ubuntu/Debian\nsudo yum install -y fail2ban  # RHEL/CentOS\n\n# Create Apache-specific jails\nsudo tee /etc/fail2ban/jail.d/apache.conf &gt; /dev/null &lt;&lt;EOF\n[apache-auth]\nenabled = true\nport = http,https\nfilter = apache-auth\nlogpath = /var/log/apache2/error.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/error_log  # RHEL/CentOS\nmaxretry = 6\nfindtime = 600\nbantime = 3600\n\n[apache-badbots]\nenabled = true\nport = http,https\nfilter = apache-badbots  \nlogpath = /var/log/apache2/access.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/access_log  # RHEL/CentOS\nmaxretry = 2\nbantime = 86400\n\n[apache-noscript]\nenabled = true\nport = http,https\nfilter = apache-noscript\nlogpath = /var/log/apache2/access.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/access_log  # RHEL/CentOS\nmaxretry = 6\nbantime = 86400\n\n[apache-overflows]\nenabled = true\nport = http,https\nfilter = apache-overflows\nlogpath = /var/log/apache2/error.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/error_log  # RHEL/CentOS\nmaxretry = 2\nbantime = 86400\nEOF\n\nsudo systemctl enable --now fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-analysis-and-monitoring\" class=\"mobile-header\">Log Analysis and Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install GoAccess for real-time log analysis\n# Ubuntu/Debian\nsudo apt install -y goaccess\n\n# RHEL/CentOS\nsudo yum install -y goaccess\n\n# Analyze logs in real-time\n# Ubuntu/Debian\nsudo goaccess /var/log/apache2/access.log -c\n\n# RHEL/CentOS\nsudo goaccess /var/log/httpd/access_log -c\n\n# Generate HTML report\nsudo goaccess /var/log/apache2/access.log -o /var/www/html/stats.html --log-format=COMBINED --real-time-html</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-maintenance\" class=\"mobile-header\">Backup and Maintenance</h2>\n<h3 id=\"automated-backup-script\" class=\"mobile-header\">Automated Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/apache-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/apache&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{config,logs,sites}\n\n# Detect distribution and set paths\nif [ -d /etc/apache2 ]; then\n    # Ubuntu/Debian\n    CONFIG_DIR=&quot;/etc/apache2&quot;\n    LOG_DIR=&quot;/var/log/apache2&quot;\n    SERVICE_NAME=&quot;apache2&quot;\nelif [ -d /etc/httpd ]; then\n    # RHEL/CentOS\n    CONFIG_DIR=&quot;/etc/httpd&quot;\n    LOG_DIR=&quot;/var/log/httpd&quot;  \n    SERVICE_NAME=&quot;httpd&quot;\nfi\n\n# Backup configuration\ntar -czf ${BACKUP_DIR}/config/apache-config-${DATE}.tar.gz -C / ${CONFIG_DIR#/}\n\n# Backup website files\ntar -czf ${BACKUP_DIR}/sites/apache-sites-${DATE}.tar.gz -C /var/www .\n\n# Backup recent logs (last 7 days)\nfind ${LOG_DIR} -name &quot;*.log&quot; -mtime -7 -exec tar -czf ${BACKUP_DIR}/logs/apache-logs-${DATE}.tar.gz {} +\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;apache-*&quot; -type f -mtime +7 -delete\n\necho &quot;Apache backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/apache-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/apache-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">This updated Apache guide now includes:</p>\n<li class=\"mobile-list-item\">✅ <strong>Complete cross-platform support</strong> (Ubuntu, Debian, RHEL, CentOS, Rocky, Fedora, Arch, openSUSE, Alpine)</li>\n<li class=\"mobile-list-item\">✅ <strong>2024 security best practices</strong> (modern SSL/TLS, security headers, ModSecurity WAF)</li>\n<li class=\"mobile-list-item\">✅ <strong>Performance optimization</strong> (MPM tuning, system optimization, caching)  </li>\n<li class=\"mobile-list-item\">✅ <strong>Advanced configurations</strong> (virtual hosts, SSL certificates, compression)</li>\n<li class=\"mobile-list-item\">✅ <strong>Comprehensive troubleshooting</strong> (SELinux, cross-platform debugging)</li>\n<li class=\"mobile-list-item\">✅ <strong>Security tools integration</strong> (Fail2Ban, log analysis, monitoring)</li>\n<p class=\"mobile-paragraph\">Should I continue updating the other guides with this same comprehensive approach?</p>","readTime":"18 min","wordCount":3528,"lastBuilt":"2025-09-14T01:15:36.008Z"},{"name":"apache-kafka","displayName":"Apache Kafka","slug":"apache-kafka","description":"Repo for apache-kafka","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/apache-kafka","updatedAt":"2025-09-08T03:05:12Z","createdAt":"2025-09-08T03:05:01Z","readmeRaw":"## 👋 Welcome to apache-kafka 🚀  \n\napache-kafka README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-apache-kafka\" class=\"mobile-header\">👋 Welcome to apache-kafka 🚀  </h2>\n<p class=\"mobile-paragraph\">apache-kafka README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:35.871Z"},{"name":"caddy","displayName":"Caddy","slug":"caddy","description":"Repo for caddy","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/caddy","updatedAt":"2025-09-08T03:05:30Z","createdAt":"2025-09-08T03:05:19Z","readmeRaw":"## 👋 Welcome to caddy 🚀  \n\ncaddy README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-caddy\" class=\"mobile-header\">👋 Welcome to caddy 🚀  </h2>\n<p class=\"mobile-paragraph\">caddy README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:35.724Z"},{"name":"certbot","displayName":"Certbot","slug":"certbot","description":"Repo for certbot","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/certbot","updatedAt":"2025-09-08T03:05:44Z","createdAt":"2025-09-08T03:05:34Z","readmeRaw":"## 👋 Welcome to certbot 🚀  \n\nDescription  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-certbot\" class=\"mobile-header\">👋 Welcome to certbot 🚀  </h2>\n<p class=\"mobile-paragraph\">Description  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":14,"lastBuilt":"2025-09-14T01:15:35.595Z"},{"name":"code-server","displayName":"Code Server","slug":"code-server","description":"Repo for code-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/code-server","updatedAt":"2025-09-08T03:06:11Z","createdAt":"2025-09-08T03:06:01Z","readmeRaw":"## 👋 Welcome to code-server 🚀  \n\ncode-server README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-code-server\" class=\"mobile-header\">👋 Welcome to code-server 🚀  </h2>\n<p class=\"mobile-paragraph\">code-server README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:35.344Z"},{"name":"databases","displayName":"Databases","slug":"databases","description":"Repo for databases","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/databases","updatedAt":"2025-09-08T03:06:16Z","createdAt":"2023-08-28T03:47:28Z","readmeRaw":"# Database Installation Guide\n\nInstallation instructions for popular database systems including MySQL/MariaDB, PostgreSQL, MongoDB, and more.\n\n## Prerequisites\n\n- RHEL/CentOS 7+ or compatible Linux distribution\n- Root or sudo access\n- Sufficient disk space for database storage\n\n## MariaDB/MySQL\n\n### Installation\n```bash\n# Add MariaDB repository\necho '[mariadb]\nname = MariaDB\nbaseurl = https://mirror.its.dal.ca/mariadb/yum/10.6/centos$releasever-$basearch\nmodule_hotfixes=1\ngpgkey=https://mirror.its.dal.ca/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck=1' | sudo tee /etc/yum.repos.d/MariaDB.repo\n\n# Install MariaDB\nsudo yum install -y mariadb-server mariadb\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n```\n\n## PostgreSQL\n\n### Installation\n```bash\n# Install PostgreSQL repository\nsudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install PostgreSQL\nsudo yum install -y postgresql13-server postgresql13\nsudo /usr/pgsql-13/bin/postgresql-13-setup initdb\nsudo systemctl enable --now postgresql-13\n\n# Configure authentication\nsudo -u postgres psql\npostgres=# CREATE USER myuser WITH PASSWORD 'mypassword';\npostgres=# CREATE DATABASE mydb OWNER myuser;\npostgres=# \\q\n```\n\n## MongoDB\n\n### Installation\n```bash\n# Add MongoDB repository\necho '[mongodb-org-5.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc' | sudo tee /etc/yum.repos.d/mongodb-org-5.0.repo\n\n# Install MongoDB\nsudo yum install -y mongodb-org\nsudo systemctl enable --now mongod\n```\n\n## Microsoft SQL Server\n\n### Installation\n```bash\n# Add Microsoft repository\necho '[packages-microsoft-com-mssql-server-2019]\nname=packages-microsoft-com-mssql-server-2019\nbaseurl=https://packages.microsoft.com/rhel/$releasever/mssql-server-2019/\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc' | sudo tee /etc/yum.repos.d/mssql-server.repo\n\n# Install SQL Server\nsudo yum install -y mssql-server\nsudo /opt/mssql/bin/mssql-conf setup\nsudo systemctl enable --now mssql-server\n```\n\n## CouchDB\n\n### Installation\n```bash\n# Add CouchDB repository\necho '[bintray--apache-couchdb-rpm]\nname=bintray--apache-couchdb-rpm\nbaseurl=http://apache.bintray.com/couchdb-rpm/el$releasever/$basearch/\ngpgcheck=0\nrepo_gpgcheck=0\nenabled=1' | sudo tee /etc/yum.repos.d/apache-couchdb.repo\n\n# Install CouchDB\nsudo yum install -y couchdb\nsudo systemctl enable --now couchdb\n```\n\n## Configuration\n\n### Firewall Setup\n```bash\n# MariaDB/MySQL\nsudo firewall-cmd --permanent --add-service=mysql\n# PostgreSQL\nsudo firewall-cmd --permanent --add-port=5432/tcp\n# MongoDB\nsudo firewall-cmd --permanent --add-port=27017/tcp\n# SQL Server\nsudo firewall-cmd --permanent --add-port=1433/tcp\n# CouchDB\nsudo firewall-cmd --permanent --add-port=5984/tcp\n\nsudo firewall-cmd --reload\n```\n\n## Verification\n\n```bash\n# MariaDB/MySQL\nmysql -u root -p -e \"SELECT VERSION();\"\n\n# PostgreSQL\nsudo -u postgres psql -c \"SELECT version();\"\n\n# MongoDB\nmongosh --eval \"db.version()\"\n\n# SQL Server\nsqlcmd -S localhost -U SA -P 'YourPassword' -Q 'SELECT @@VERSION'\n\n# CouchDB\ncurl http://localhost:5984/\n```\n\n## Usage\n\nEach database system has different management approaches:\n\n1. **MariaDB/MySQL**: Use `mysql` command-line client or phpMyAdmin\n2. **PostgreSQL**: Use `psql` command-line client or pgAdmin\n3. **MongoDB**: Use `mongosh` shell or MongoDB Compass\n4. **SQL Server**: Use `sqlcmd` or SQL Server Management Studio\n5. **CouchDB**: Use web interface at http://localhost:5984/_utils\n\n## Additional Resources\n\n- [MariaDB Documentation](https://mariadb.com/docs/)\n- [PostgreSQL Documentation](https://www.postgresql.org/docs/)\n- [MongoDB Documentation](https://docs.mongodb.com/)\n- [SQL Server on Linux](https://docs.microsoft.com/en-us/sql/linux/)\n- [CouchDB Documentation](https://docs.couchdb.org/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"database-installation-guide\" class=\"mobile-header\">Database Installation Guide</h1>\n<p class=\"mobile-paragraph\">Installation instructions for popular database systems including MySQL/MariaDB, PostgreSQL, MongoDB, and more.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">RHEL/CentOS 7+ or compatible Linux distribution</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">Sufficient disk space for database storage</li>\n<h2 id=\"mariadbmysql\" class=\"mobile-header\">MariaDB/MySQL</h2>\n<h3 id=\"installation\" class=\"mobile-header\">Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add MariaDB repository\necho &#039;[mariadb]\nname = MariaDB\nbaseurl = https://mirror.its.dal.ca/mariadb/yum/10.6/centos$releasever-$basearch\nmodule_hotfixes=1\ngpgkey=https://mirror.its.dal.ca/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck=1&#039; | sudo tee /etc/yum.repos.d/MariaDB.repo\n\n# Install MariaDB\nsudo yum install -y mariadb-server mariadb\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation</code></pre>\n      </div>\n    </div>\n<h2 id=\"postgresql\" class=\"mobile-header\">PostgreSQL</h2>\n<h3 id=\"installation\" class=\"mobile-header\">Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL repository\nsudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install PostgreSQL\nsudo yum install -y postgresql13-server postgresql13\nsudo /usr/pgsql-13/bin/postgresql-13-setup initdb\nsudo systemctl enable --now postgresql-13\n\n# Configure authentication\nsudo -u postgres psql\npostgres=# CREATE USER myuser WITH PASSWORD &#039;mypassword&#039;;\npostgres=# CREATE DATABASE mydb OWNER myuser;\npostgres=# \\q</code></pre>\n      </div>\n    </div>\n<h2 id=\"mongodb\" class=\"mobile-header\">MongoDB</h2>\n<h3 id=\"installation\" class=\"mobile-header\">Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add MongoDB repository\necho &#039;[mongodb-org-5.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/5.0/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc&#039; | sudo tee /etc/yum.repos.d/mongodb-org-5.0.repo\n\n# Install MongoDB\nsudo yum install -y mongodb-org\nsudo systemctl enable --now mongod</code></pre>\n      </div>\n    </div>\n<h2 id=\"microsoft-sql-server\" class=\"mobile-header\">Microsoft SQL Server</h2>\n<h3 id=\"installation\" class=\"mobile-header\">Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Microsoft repository\necho &#039;[packages-microsoft-com-mssql-server-2019]\nname=packages-microsoft-com-mssql-server-2019\nbaseurl=https://packages.microsoft.com/rhel/$releasever/mssql-server-2019/\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc&#039; | sudo tee /etc/yum.repos.d/mssql-server.repo\n\n# Install SQL Server\nsudo yum install -y mssql-server\nsudo /opt/mssql/bin/mssql-conf setup\nsudo systemctl enable --now mssql-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"couchdb\" class=\"mobile-header\">CouchDB</h2>\n<h3 id=\"installation\" class=\"mobile-header\">Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add CouchDB repository\necho &#039;[bintray--apache-couchdb-rpm]\nname=bintray--apache-couchdb-rpm\nbaseurl=http://apache.bintray.com/couchdb-rpm/el$releasever/$basearch/\ngpgcheck=0\nrepo_gpgcheck=0\nenabled=1&#039; | sudo tee /etc/yum.repos.d/apache-couchdb.repo\n\n# Install CouchDB\nsudo yum install -y couchdb\nsudo systemctl enable --now couchdb</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"firewall-setup\" class=\"mobile-header\">Firewall Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MariaDB/MySQL\nsudo firewall-cmd --permanent --add-service=mysql\n# PostgreSQL\nsudo firewall-cmd --permanent --add-port=5432/tcp\n# MongoDB\nsudo firewall-cmd --permanent --add-port=27017/tcp\n# SQL Server\nsudo firewall-cmd --permanent --add-port=1433/tcp\n# CouchDB\nsudo firewall-cmd --permanent --add-port=5984/tcp\n\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MariaDB/MySQL\nmysql -u root -p -e &quot;SELECT VERSION();&quot;\n\n# PostgreSQL\nsudo -u postgres psql -c &quot;SELECT version();&quot;\n\n# MongoDB\nmongosh --eval &quot;db.version()&quot;\n\n# SQL Server\nsqlcmd -S localhost -U SA -P &#039;YourPassword&#039; -Q &#039;SELECT @@VERSION&#039;\n\n# CouchDB\ncurl http://localhost:5984/</code></pre>\n      </div>\n    </div>\n<h2 id=\"usage\" class=\"mobile-header\">Usage</h2>\n<p class=\"mobile-paragraph\">Each database system has different management approaches:</p>\n<p class=\"mobile-paragraph\">1. <strong>MariaDB/MySQL</strong>: Use <code class=\"mobile-inline-code\">mysql</code> command-line client or phpMyAdmin</p>\n<p class=\"mobile-paragraph\">2. <strong>PostgreSQL</strong>: Use <code class=\"mobile-inline-code\">psql</code> command-line client or pgAdmin</p>\n<p class=\"mobile-paragraph\">3. <strong>MongoDB</strong>: Use <code class=\"mobile-inline-code\">mongosh</code> shell or MongoDB Compass</p>\n<p class=\"mobile-paragraph\">4. <strong>SQL Server</strong>: Use <code class=\"mobile-inline-code\">sqlcmd</code> or SQL Server Management Studio</p>\n<p class=\"mobile-paragraph\">5. <strong>CouchDB</strong>: Use web interface at http://localhost:5984/_utils</p>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.postgresql.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">PostgreSQL Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.microsoft.com/en-us/sql/linux/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">SQL Server on Linux</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.couchdb.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">CouchDB Documentation</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"3 min","wordCount":409,"lastBuilt":"2025-09-14T01:15:35.213Z"},{"name":"discourse","displayName":"Discourse","slug":"discourse","description":"Repo for discourse","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/discourse","updatedAt":"2025-09-08T03:06:31Z","createdAt":"2025-09-08T03:06:20Z","readmeRaw":"## 👋 Welcome to discourse 🚀  \n\ndiscourse README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-discourse\" class=\"mobile-header\">👋 Welcome to discourse 🚀  </h2>\n<p class=\"mobile-paragraph\">discourse README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:35.086Z"},{"name":"docker","displayName":"Docker","slug":"docker","description":"Repo for docker","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/docker","updatedAt":"2025-09-08T03:06:36Z","createdAt":"2023-08-28T03:47:37Z","readmeRaw":"# Docker Installation Guide\n\nContainerization platform for developing, shipping, and running applications in isolated environments.\n\n## Prerequisites\n\n- Linux system with kernel 3.10+\n- 64-bit architecture\n- Root or sudo access\n\n## Installation\n\n### Quick Installation Script\n```bash\n# Install Docker using official script\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Add current user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Enable Docker service\nsudo systemctl enable --now docker\n```\n\n### Manual Installation (RHEL/CentOS)\n```bash\n# Install prerequisites\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker\nsudo yum install -y docker-ce docker-ce-cli containerd.io\n\n# Start Docker\nsudo systemctl enable --now docker\n```\n\n## Configuration\n\n### Docker Compose Installation\n```bash\n# Download Docker Compose\nsudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n# Make executable\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Create symlink (optional)\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n```\n\n### Docker Machine (Optional)\n```bash\n# Download Docker Machine\nbase=https://github.com/docker/machine/releases/download/v0.16.2\ncurl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine\nsudo mv /tmp/docker-machine /usr/local/bin/docker-machine\nsudo chmod +x /usr/local/bin/docker-machine\n\n# Install bash completion\nbase=https://raw.githubusercontent.com/docker/machine/v0.16.2\nfor i in docker-machine-prompt.bash docker-machine-wrapper.bash docker-machine.bash; do\n  sudo wget \"$base/contrib/completion/bash/${i}\" -P /etc/bash_completion.d\ndone\n```\n\n## Portainer Installation (Optional)\n```bash\n# Create volume and run Portainer\ndocker volume create portainer_data\ndocker run -d -p 8000:8000 -p 9443:9443 \\\n    --name portainer --restart=always \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v portainer_data:/data \\\n    portainer/portainer-ce:latest\n```\n\n## Verification\n\n```bash\n# Check Docker version\ndocker --version\ndocker-compose --version\n\n# Test Docker installation\ndocker run hello-world\n\n# Check Docker service status\nsudo systemctl status docker\n\n# List Docker images and containers\ndocker images\ndocker ps -a\n```\n\n## Usage\n\nBasic Docker commands:\n\n1. **Pull an image**: `docker pull nginx`\n2. **Run a container**: `docker run -d -p 80:80 nginx`\n3. **List containers**: `docker ps`\n4. **Stop container**: `docker stop container_id`\n5. **Remove container**: `docker rm container_id`\n\n## Additional Resources\n\n- [Official Documentation](https://docs.docker.com/)\n- [Docker Hub](https://hub.docker.com/)\n- [Docker Compose Documentation](https://docs.docker.com/compose/)\n- [Portainer Documentation](https://documentation.portainer.io/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"docker-installation-guide\" class=\"mobile-header\">Docker Installation Guide</h1>\n<p class=\"mobile-paragraph\">Containerization platform for developing, shipping, and running applications in isolated environments.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system with kernel 3.10+</li>\n<li class=\"mobile-list-item\">64-bit architecture</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"quick-installation-script\" class=\"mobile-header\">Quick Installation Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker using official script\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Add current user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Enable Docker service\nsudo systemctl enable --now docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-installation-rhelcentos\" class=\"mobile-header\">Manual Installation (RHEL/CentOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install prerequisites\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker\nsudo yum install -y docker-ce docker-ce-cli containerd.io\n\n# Start Docker\nsudo systemctl enable --now docker</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"docker-compose-installation\" class=\"mobile-header\">Docker Compose Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Docker Compose\nsudo curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n\n# Make executable\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Create symlink (optional)\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-machine-optional\" class=\"mobile-header\">Docker Machine (Optional)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Docker Machine\nbase=https://github.com/docker/machine/releases/download/v0.16.2\ncurl -L $base/docker-machine-$(uname -s)-$(uname -m) &gt;/tmp/docker-machine\nsudo mv /tmp/docker-machine /usr/local/bin/docker-machine\nsudo chmod +x /usr/local/bin/docker-machine\n\n# Install bash completion\nbase=https://raw.githubusercontent.com/docker/machine/v0.16.2\nfor i in docker-machine-prompt.bash docker-machine-wrapper.bash docker-machine.bash; do\n  sudo wget &quot;$base/contrib/completion/bash/${i}&quot; -P /etc/bash_completion.d\ndone</code></pre>\n      </div>\n    </div>\n<h2 id=\"portainer-installation-optional\" class=\"mobile-header\">Portainer Installation (Optional)</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create volume and run Portainer\ndocker volume create portainer_data\ndocker run -d -p 8000:8000 -p 9443:9443 \\\n    --name portainer --restart=always \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v portainer_data:/data \\\n    portainer/portainer-ce:latest</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Docker version\ndocker --version\ndocker-compose --version\n\n# Test Docker installation\ndocker run hello-world\n\n# Check Docker service status\nsudo systemctl status docker\n\n# List Docker images and containers\ndocker images\ndocker ps -a</code></pre>\n      </div>\n    </div>\n<h2 id=\"usage\" class=\"mobile-header\">Usage</h2>\n<p class=\"mobile-paragraph\">Basic Docker commands:</p>\n<p class=\"mobile-paragraph\">1. <strong>Pull an image</strong>: <code class=\"mobile-inline-code\">docker pull nginx</code></p>\n<p class=\"mobile-paragraph\">2. <strong>Run a container</strong>: <code class=\"mobile-inline-code\">docker run -d -p 80:80 nginx</code></p>\n<p class=\"mobile-paragraph\">3. <strong>List containers</strong>: <code class=\"mobile-inline-code\">docker ps</code></p>\n<p class=\"mobile-paragraph\">4. <strong>Stop container</strong>: <code class=\"mobile-inline-code\">docker stop container_id</code></p>\n<p class=\"mobile-paragraph\">5. <strong>Remove container</strong>: <code class=\"mobile-inline-code\">docker rm container_id</code></p>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Hub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Compose Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://documentation.portainer.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Portainer Documentation</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"2 min","wordCount":336,"lastBuilt":"2025-09-14T01:15:34.937Z"},{"name":"drupal","displayName":"Drupal","slug":"drupal","description":"Repo for drupal","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/drupal","updatedAt":"2025-09-08T03:06:48Z","createdAt":"2025-09-08T03:06:38Z","readmeRaw":"## 👋 Welcome to drupal 🚀  \n\ndrupal README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-drupal\" class=\"mobile-header\">👋 Welcome to drupal 🚀  </h2>\n<p class=\"mobile-paragraph\">drupal README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:34.797Z"},{"name":"elasticsearch","displayName":"Elasticsearch","slug":"elasticsearch","description":"Repo for elasticsearch","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/elasticsearch","updatedAt":"2025-09-08T03:07:02Z","createdAt":"2025-09-08T03:06:51Z","readmeRaw":"## 👋 Welcome to elasticsearch 🚀  \n\nelasticsearch README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-elasticsearch\" class=\"mobile-header\">👋 Welcome to elasticsearch 🚀  </h2>\n<p class=\"mobile-paragraph\">elasticsearch README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:34.648Z"},{"name":"element","displayName":"Element","slug":"element","description":"Repo for element","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/element","updatedAt":"2025-09-08T03:07:16Z","createdAt":"2025-09-08T03:07:06Z","readmeRaw":"## 👋 Welcome to element 🚀  \n\nelement README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-element\" class=\"mobile-header\">👋 Welcome to element 🚀  </h2>\n<p class=\"mobile-paragraph\">element README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:34.499Z"},{"name":"exchange","displayName":"Exchange","slug":"exchange","description":"Repo for exchange","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/exchange","updatedAt":"2025-09-08T03:07:21Z","createdAt":"2023-08-28T03:47:46Z","readmeRaw":"# Exchange 2016 on Server 2016\n\n```text\n\nInstall-WindowsFeature NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS, ADLDS, Server-Media-Foundation\n\nhttps://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe\nhttps://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe\n\nEnable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools,IIS-ManagementScriptingTools,IIS-IIS6ManagementCompatibility,IIS-LegacySnapIn,IIS-ManagementConsole,IIS-Metabase,IIS-WebServerManagementTools,IIS-WebServerRole\n\n```\n","readmeHtml":"<h1 id=\"exchange-2016-on-server-2016\" class=\"mobile-header\">Exchange 2016 on Server 2016</h1>\n<div class=\"mobile-code-block\" data-language=\"text\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">text</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-text\">\nInstall-WindowsFeature NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS, ADLDS, Server-Media-Foundation\n\nhttps://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe\nhttps://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe\n\nEnable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools,IIS-ManagementScriptingTools,IIS-IIS6ManagementCompatibility,IIS-LegacySnapIn,IIS-ManagementConsole,IIS-Metabase,IIS-WebServerManagementTools,IIS-WebServerRole\n</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T01:15:34.374Z"},{"name":"fail2ban","displayName":"Fail2ban","slug":"fail2ban","description":"Repo for fail2ban","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/fail2ban","updatedAt":"2025-09-08T03:07:35Z","createdAt":"2025-09-08T03:07:24Z","readmeRaw":"## 👋 Welcome to fail2ban 🚀  \n\nfail2ban README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-fail2ban\" class=\"mobile-header\">👋 Welcome to fail2ban 🚀  </h2>\n<p class=\"mobile-paragraph\">fail2ban README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:34.243Z"},{"name":"ghost","displayName":"Ghost","slug":"ghost","description":"Repo for ghost","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ghost","updatedAt":"2025-09-08T03:07:48Z","createdAt":"2025-09-08T03:07:38Z","readmeRaw":"## 👋 Welcome to ghost 🚀  \n\nghost README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-ghost\" class=\"mobile-header\">👋 Welcome to ghost 🚀  </h2>\n<p class=\"mobile-paragraph\">ghost README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:34.118Z"},{"name":"gitea","displayName":"Gitea","slug":"gitea","description":"Repo for gitea","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitea","updatedAt":"2025-09-08T03:07:55Z","createdAt":"2023-08-28T03:47:56Z","readmeRaw":"# Gitea Install\n\n```bash\necho \"\n###### Debian Main Repos\ndeb http://ftp.us.debian.org/debian/ stable main contrib non-free\ndeb http://ftp.us.debian.org/debian/ stable-updates main contrib non-free\ndeb http://security.debian.org/ stable/updates main contrib non-free\n\" > /etc/apt/sources.list\n\napt update && apt upgrade -y\napt install -y curl wget apt-transport-https psmisc net-tools postfix dirmngr neovim git-core build-essential nginx-full nfs-common htop open-vm-tools\ndpkg-reconfigure postfix\ndpkg-reconfigure dash\n\nmkdir -p /mnt/backups /var/www/html/.well-known /etc/letsencrypt\necho \"\n10.0.254.1:/mnt/Volume_1/backups         /mnt/backups                 nfs defaults,rw 0 0\n10.0.254.1:/var/www/html/.well-known     /var/www/html/.well-known    nfs defaults,rw 0 0\n10.0.254.1:/etc/letsencrypt              /etc/letsencrypt             nfs defaults,rw 0 0\n\" >> /etc/fstab\nmount -a\n\nuseradd --system --shell /bin/bash --comment 'Git Version Control' --create-home --home-dir /home/git git\n\nmkdir -p /var/lib/gitea/{custom,data,indexers,public,log}\nchown git:git /var/lib/gitea/{data,indexers,log}\nchmod 750 /var/lib/gitea/{data,indexers,log}\nmkdir /etc/gitea\nchown root:git /etc/gitea\nchmod 770 /etc/gitea\nchmod 750 /etc/gitea\nchmod 644 /etc/gitea/app.ini\n```\n","readmeHtml":"<h1 id=\"gitea-install\" class=\"mobile-header\">Gitea Install</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">echo &quot;\n###### Debian Main Repos\ndeb http://ftp.us.debian.org/debian/ stable main contrib non-free\ndeb http://ftp.us.debian.org/debian/ stable-updates main contrib non-free\ndeb http://security.debian.org/ stable/updates main contrib non-free\n&quot; &gt; /etc/apt/sources.list\n\napt update &amp;&amp; apt upgrade -y\napt install -y curl wget apt-transport-https psmisc net-tools postfix dirmngr neovim git-core build-essential nginx-full nfs-common htop open-vm-tools\ndpkg-reconfigure postfix\ndpkg-reconfigure dash\n\nmkdir -p /mnt/backups /var/www/html/.well-known /etc/letsencrypt\necho &quot;\n10.0.254.1:/mnt/Volume_1/backups         /mnt/backups                 nfs defaults,rw 0 0\n10.0.254.1:/var/www/html/.well-known     /var/www/html/.well-known    nfs defaults,rw 0 0\n10.0.254.1:/etc/letsencrypt              /etc/letsencrypt             nfs defaults,rw 0 0\n&quot; &gt;&gt; /etc/fstab\nmount -a\n\nuseradd --system --shell /bin/bash --comment &#039;Git Version Control&#039; --create-home --home-dir /home/git git\n\nmkdir -p /var/lib/gitea/{custom,data,indexers,public,log}\nchown git:git /var/lib/gitea/{data,indexers,log}\nchmod 750 /var/lib/gitea/{data,indexers,log}\nmkdir /etc/gitea\nchown root:git /etc/gitea\nchmod 770 /etc/gitea\nchmod 750 /etc/gitea\nchmod 644 /etc/gitea/app.ini</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":125,"lastBuilt":"2025-09-14T01:15:33.992Z"},{"name":"gitlab","displayName":"Gitlab","slug":"gitlab","description":"Repo for gitlab","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitlab","updatedAt":"2025-09-08T03:08:07Z","createdAt":"2025-09-08T03:07:56Z","readmeRaw":"# GitLab Installation Guide\n\nComplete DevOps platform with Git repository management, CI/CD pipelines, issue tracking, and container registry.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- 8GB RAM minimum, 16GB+ recommended for production\n- 4 CPU cores minimum\n- 20GB+ available disk space\n- Domain name for external access\n\n## Installation\n\n### Using Omnibus Package (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Install dependencies\nsudo apt update\nsudo apt install -y ca-certificates curl openssh-server postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab\nsudo apt install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Install dependencies\nsudo yum install -y curl policycoreutils-python-utils openssh-server postfix\n\n# Enable SSH and Postfix\nsudo systemctl enable --now sshd postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo yum install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure\n```\n\n### Using Docker Compose\n```bash\n# Create GitLab directory\nmkdir -p ~/gitlab/{config,logs,data}\ncd ~/gitlab\n\n# Set proper ownership\nsudo chown -R 998:998 config logs data\n\n# Create docker-compose.yml\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  gitlab:\n    image: gitlab/gitlab-ee:latest\n    restart: unless-stopped\n    hostname: gitlab.example.com\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url 'https://gitlab.example.com'\n        \n        # GitLab configuration\n        gitlab_rails['gitlab_shell_ssh_port'] = 2222\n        gitlab_rails['time_zone'] = 'America/New_York'\n        gitlab_rails['gitlab_email_enabled'] = true\n        gitlab_rails['gitlab_email_from'] = 'gitlab@example.com'\n        gitlab_rails['gitlab_email_display_name'] = 'GitLab'\n        \n        # Database configuration\n        postgresql['shared_preload_libraries'] = 'pg_stat_statements'\n        postgresql['track_activity_query_size'] = 1024\n        \n        # Redis configuration\n        redis['save'] = '900 1 300 10 60 10000'\n        \n        # Backup configuration\n        gitlab_rails['backup_keep_time'] = 604800  # 7 days\n        \n        # Container Registry\n        registry_external_url 'https://registry.example.com'\n        gitlab_rails['registry_enabled'] = true\n        \n        # Monitoring\n        prometheus_monitoring['enable'] = true\n        grafana['enable'] = true\n        \n        # NGINX\n        nginx['listen_port'] = 80\n        nginx['listen_https'] = false\n        nginx['redirect_http_to_https'] = false\n        \n        # Let's Encrypt (disable for reverse proxy setup)\n        letsencrypt['enable'] = false\n        \n    ports:\n      - '80:80'\n      - '443:443'\n      - '2222:22'\n    volumes:\n      - './config:/etc/gitlab'\n      - './logs:/var/log/gitlab'\n      - './data:/var/opt/gitlab'\n    shm_size: '256m'\n    networks:\n      - gitlab\n\nnetworks:\n  gitlab:\n    driver: bridge\nEOF\n\n# Start GitLab\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f gitlab\n```\n\n## Configuration\n\n### Basic Configuration (/etc/gitlab/gitlab.rb)\n```bash\n# Edit GitLab configuration\nsudo nano /etc/gitlab/gitlab.rb\n\n# Key settings:\nexternal_url 'https://gitlab.example.com'\n\n# Email configuration\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.example.com\"\ngitlab_rails['smtp_port'] = 587\ngitlab_rails['smtp_user_name'] = \"smtp_username\"\ngitlab_rails['smtp_password'] = \"smtp_password\"\ngitlab_rails['smtp_domain'] = \"example.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = false\n\ngitlab_rails['gitlab_email_from'] = 'gitlab@example.com'\ngitlab_rails['gitlab_email_display_name'] = 'GitLab'\n\n# Backup configuration\ngitlab_rails['backup_keep_time'] = 604800  # 7 days\ngitlab_rails['backup_upload_connection'] = {\n  'provider' => 'AWS',\n  'aws_access_key_id' => 'your_access_key',\n  'aws_secret_access_key' => 'your_secret_key',\n  'region' => 'us-east-1'\n}\ngitlab_rails['backup_upload_remote_directory'] = 'gitlab-backups'\n\n# Container Registry\nregistry_external_url 'https://registry.example.com'\ngitlab_rails['registry_enabled'] = true\n\n# CI/CD settings\ngitlab_ci['gitlab_ci_all_broken_builds'] = true\ngitlab_ci['gitlab_ci_add_pusher'] = true\n\n# Monitoring\nprometheus_monitoring['enable'] = true\ngrafana['enable'] = true\ngrafana['admin_password'] = 'grafana_admin_password'\n\n# Apply configuration\nsudo gitlab-ctl reconfigure\n```\n\n### NGINX Reverse Proxy (External)\n```bash\n# Create NGINX configuration for GitLab reverse proxy\nsudo tee /etc/nginx/sites-available/gitlab > /dev/null <<EOF\nupstream gitlab-workhorse {\n  server unix:/var/opt/gitlab/gitlab-workhorse/sockets/socket;\n}\n\nserver {\n  listen 80;\n  server_name gitlab.example.com;\n  return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name gitlab.example.com;\n\n  ssl_certificate /etc/ssl/certs/gitlab.crt;\n  ssl_certificate_key /etc/ssl/private/gitlab.key;\n\n  location / {\n    proxy_pass http://gitlab-workhorse;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n    proxy_set_header X-Forwarded-Ssl on;\n    \n    # GitLab specific headers\n    proxy_set_header X-Forwarded-Host \\$http_host;\n    proxy_set_header X-Forwarded-Server \\$host;\n    \n    # WebSocket support\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \\$http_upgrade;\n    proxy_set_header Connection \"upgrade\";\n    \n    # Timeout settings\n    proxy_connect_timeout 60s;\n    proxy_send_timeout 60s;\n    proxy_read_timeout 60s;\n  }\n}\n\n# Container Registry\nserver {\n  listen 443 ssl http2;\n  server_name registry.example.com;\n\n  ssl_certificate /etc/ssl/certs/registry.crt;\n  ssl_certificate_key /etc/ssl/private/registry.key;\n\n  # disable any limits to avoid HTTP 413 for large image uploads\n  client_max_body_size 0;\n\n  # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)\n  chunked_transfer_encoding on;\n\n  location /v2/ {\n    proxy_pass http://localhost:5000;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n  }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n## GitLab Runner Setup\n\n### Install GitLab Runner\n```bash\n# Add GitLab Runner repository\ncurl -L \"https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh\" | sudo bash\n\n# Install GitLab Runner\nsudo apt install -y gitlab-runner\n\n# Or manual installation\nsudo curl -L --output /usr/local/bin/gitlab-runner \"https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64\"\nsudo chmod +x /usr/local/bin/gitlab-runner\nsudo useradd --comment 'GitLab Runner' --create-home gitlab-runner --shell /bin/bash\nsudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner\nsudo gitlab-runner start\n```\n\n### Register Runner\n```bash\n# Register runner (get token from GitLab Admin → Runners)\nsudo gitlab-runner register \\\n  --url \"https://gitlab.example.com/\" \\\n  --registration-token \"REGISTRATION_TOKEN\" \\\n  --description \"docker-runner\" \\\n  --tag-list \"docker,aws\" \\\n  --run-untagged=\"true\" \\\n  --locked=\"false\" \\\n  --access-level=\"not_protected\" \\\n  --executor \"docker\" \\\n  --docker-image alpine:latest \\\n  --docker-privileged \\\n  --docker-volumes \"/certs/client\"\n\n# Configure runner for Docker-in-Docker\nsudo tee -a /etc/gitlab-runner/config.toml > /dev/null <<EOF\n[[runners]]\n  [runners.docker]\n    privileged = true\n    volumes = [\"/cache\", \"/certs/client\"]\n    disable_cache = false\n    shm_size = 0\nEOF\n\nsudo systemctl restart gitlab-runner\n```\n\n## Performance Optimization\n\n### Database Tuning\n```bash\n# PostgreSQL optimization for GitLab\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# PostgreSQL settings\npostgresql['shared_buffers'] = \"1GB\"\npostgresql['effective_cache_size'] = \"4GB\"\npostgresql['checkpoint_completion_target'] = 0.9\npostgresql['wal_buffers'] = \"16MB\"\npostgresql['default_statistics_target'] = 100\npostgresql['random_page_cost'] = 1.1\npostgresql['effective_io_concurrency'] = 200\npostgresql['work_mem'] = \"4MB\"\npostgresql['min_wal_size'] = \"1GB\"\npostgresql['max_wal_size'] = \"4GB\"\npostgresql['max_worker_processes'] = 8\npostgresql['max_parallel_workers_per_gather'] = 4\npostgresql['max_parallel_workers'] = 8\npostgresql['max_parallel_maintenance_workers'] = 4\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Redis Configuration\n```bash\n# Redis optimization\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Redis settings\nredis['maxmemory'] = \"1gb\"\nredis['maxmemory_policy'] = \"allkeys-lru\"\nredis['save'] = [\"900 1\", \"300 10\", \"60 10000\"]\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### GitLab Web Server Tuning\n```bash\n# Unicorn/Puma optimization\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Puma settings (GitLab 13.0+)\npuma['worker_processes'] = 4\npuma['min_threads'] = 4\npuma['max_threads'] = 4\n\n# Sidekiq settings\nsidekiq['max_concurrency'] = 25\nsidekiq['min_concurrency'] = 10\n\n# Gitaly settings\ngitaly['ruby_max_rss'] = 300000000  # 300MB\ngitaly['concurrency'] = [\n  {\n    'rpc' => \"/gitaly.SmartHTTPService/PostReceivePack\",\n    'max_per_repo' => 3\n  },\n  {\n    'rpc' => \"/gitaly.SSHService/SSHUploadPack\",\n    'max_per_repo' => 3\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Backup and Restore\n\n### Automated Backup\n```bash\n# Configure automatic backups\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Backup settings\ngitlab_rails['backup_keep_time'] = 604800  # 7 days\ngitlab_rails['backup_path'] = \"/var/opt/gitlab/backups\"\n\n# S3 backup upload\ngitlab_rails['backup_upload_connection'] = {\n  'provider' => 'AWS',\n  'region' => 'us-east-1',\n  'aws_access_key_id' => 'your_access_key',\n  'aws_secret_access_key' => 'your_secret_key'\n}\ngitlab_rails['backup_upload_remote_directory'] = 'gitlab-backups'\ngitlab_rails['backup_multipart_chunk_size'] = 104857600  # 100MB\ngitlab_rails['backup_encryption'] = 'AES256'\nEOF\n\nsudo gitlab-ctl reconfigure\n\n# Create backup script\nsudo tee /usr/local/bin/gitlab-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\n# Create GitLab backup\ngitlab-backup create STRATEGY=copy\n\n# Backup configuration files\ntar -czf /var/opt/gitlab/backups/$(date +%s_%Y_%m_%d)_gitlab_config_backup.tar.gz -C / etc/gitlab/gitlab-secrets.json etc/gitlab/gitlab.rb\n\necho \"GitLab backup completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/gitlab-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Manual Backup and Restore\n```bash\n# Create backup manually\nsudo gitlab-backup create\n\n# List backups\nsudo gitlab-backup list\n\n# Restore from backup\nsudo gitlab-ctl stop unicorn\nsudo gitlab-ctl stop puma\nsudo gitlab-ctl stop sidekiq\nsudo gitlab-backup restore BACKUP=timestamp_of_backup\nsudo gitlab-ctl restart\nsudo gitlab-rake gitlab:check SANITIZE=true\n```\n\n## SSL/TLS Configuration\n\n### Let's Encrypt Integration\n```bash\n# Configure Let's Encrypt in GitLab\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Let's Encrypt configuration\nletsencrypt['enable'] = true\nletsencrypt['contact_emails'] = ['admin@example.com']\nletsencrypt['auto_renew'] = true\nletsencrypt['auto_renew_hour'] = 0\nletsencrypt['auto_renew_minute'] = 0\nletsencrypt['auto_renew_day_of_month'] = \"*/4\"\n\n# Redirect HTTP to HTTPS\nnginx['redirect_http_to_https'] = true\nnginx['ssl_protocols'] = \"TLSv1.2 TLSv1.3\"\nnginx['ssl_prefer_server_ciphers'] = \"off\"\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Manual SSL Configuration\n```bash\n# Configure custom SSL certificates\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# SSL configuration\nnginx['ssl_certificate'] = \"/etc/ssl/certs/gitlab.crt\"\nnginx['ssl_certificate_key'] = \"/etc/ssl/private/gitlab.key\"\nnginx['ssl_dhparam'] = \"/etc/ssl/certs/dhparam.pem\"\n\n# Registry SSL\nregistry_nginx['ssl_certificate'] = \"/etc/ssl/certs/registry.crt\"\nregistry_nginx['ssl_certificate_key'] = \"/etc/ssl/private/registry.key\"\nEOF\n\n# Generate dhparam\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\nsudo gitlab-ctl reconfigure\n```\n\n## CI/CD Configuration\n\n### Enable Container Registry\n```bash\n# Configure container registry\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Container Registry\nregistry_external_url 'https://registry.example.com'\ngitlab_rails['registry_enabled'] = true\nregistry['enable'] = true\nregistry['username'] = \"registry\"\nregistry['uid'] = 996\nregistry['gid'] = 996\nregistry['dir'] = \"/var/opt/gitlab/registry\"\nregistry['registry_http_addr'] = \"localhost:5000\"\nregistry['debug_addr'] = \"localhost:5001\"\nregistry['log_directory'] = \"/var/log/gitlab/registry\"\nregistry['log_level'] = \"info\"\nregistry['rootcertbundle'] = \"/opt/gitlab/embedded/ssl/certs/cacert.pem\"\nregistry['health_storagedriver_enabled'] = true\nregistry['middleware'] = {\n  'redirect' => [\n    {'disable' => false}\n  ]\n}\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### GitLab Pages Setup\n```bash\n# Enable GitLab Pages\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# GitLab Pages configuration\npages_external_url \"https://pages.example.com\"\ngitlab_pages['enable'] = true\ngitlab_pages['dir'] = \"/var/opt/gitlab/gitlab-pages\"\ngitlab_pages['log_directory'] = \"/var/log/gitlab/gitlab-pages\"\ngitlab_pages['artifacts_server'] = true\ngitlab_pages['artifacts_server_url'] = \"https://gitlab.example.com/api/v4\"\ngitlab_pages['access_control'] = false\ngitlab_pages['use_legacy_storage'] = false\ngitlab_pages['inplace_chroot'] = true\ngitlab_pages['propagate_correlation_id'] = false\ngitlab_pages['log_format'] = \"json\"\ngitlab_pages['log_verbose'] = false\ngitlab_pages['redirect_http'] = true\npages_nginx['enable'] = true\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Monitoring and Maintenance\n\n### GitLab Monitoring Stack\n```bash\n# Access built-in monitoring\n# Prometheus: https://gitlab.example.com/-/admin/monitoring\n# Grafana: https://gitlab.example.com/-/grafana\n\n# Configure external Prometheus\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Prometheus configuration\nprometheus['listen_address'] = 'localhost:9090'\nprometheus['scrape_configs'] = [\n  {\n    'job_name' => 'gitlab-workhorse',\n    'static_configs' => [\n      { 'targets' => ['localhost:9229'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-unicorn',\n    'static_configs' => [\n      { 'targets' => ['localhost:8080'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-sidekiq',\n    'static_configs' => [\n      { 'targets' => ['localhost:8082'] }\n    ]\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Maintenance Commands\n```bash\n# Check GitLab status\nsudo gitlab-rake gitlab:check\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Database maintenance\nsudo gitlab-rake db:migrate\nsudo gitlab-rake db:check\nsudo gitlab-rake gitlab:cleanup:sessions\nsudo gitlab-rake gitlab:cleanup:refs\n\n# Cache clearing\nsudo gitlab-rake cache:clear\nsudo gitlab-rake assets:clean\n\n# Check disk usage\nsudo du -sh /var/opt/gitlab/\nsudo gitlab-rake gitlab:artifacts:check\nsudo gitlab-rake gitlab:lfs:check\n\n# Update GitLab\nsudo apt update && sudo apt upgrade gitlab-ee  # Package installation\nsudo gitlab-ctl restart                        # Docker\n```\n\n## Verification\n\n```bash\n# Check GitLab status\nsudo gitlab-ctl status\nsudo gitlab-rake gitlab:check\n\n# Test web interface\ncurl -I https://gitlab.example.com\ncurl -I https://registry.example.com\n\n# Check service logs\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\nsudo gitlab-ctl tail postgresql\nsudo gitlab-ctl tail redis\n\n# Check runner status\nsudo gitlab-runner verify\nsudo gitlab-runner list\n\n# Test container registry\ndocker login registry.example.com\ndocker pull alpine\ndocker tag alpine registry.example.com/group/project:latest\ndocker push registry.example.com/group/project:latest\n\n# Check GitLab Runner\nsudo systemctl status gitlab-runner\ngitlab-runner list\n\n# Performance check\nsudo gitlab-rake gitlab:env:info\nsudo gitlab-rake gitlab:check\n```\n\n## Troubleshooting\n\n```bash\n# Check all GitLab services\nsudo gitlab-ctl status\n\n# Restart specific service\nsudo gitlab-ctl restart nginx\nsudo gitlab-ctl restart postgresql\n\n# Check configuration\nsudo gitlab-rake gitlab:check\nsudo gitlab-ctl show-config\n\n# Debug mode\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\n\n# Check disk space\ndf -h /var/opt/gitlab/\nsudo du -sh /var/opt/gitlab/git-data/\n\n# Memory usage\nfree -h\nsudo gitlab-ctl status\n\n# Database connection issues\nsudo gitlab-rake db:migrate:status\nsudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production\n\n# Reset root password\nsudo gitlab-rake \"gitlab:password:reset[root]\"\n\n# Check GitLab secrets\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Reconfigure if issues persist\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.gitlab.com/)\n- [GitLab Admin Docs](https://docs.gitlab.com/ee/administration/)\n- [GitLab Runner Documentation](https://docs.gitlab.com/runner/)\n- [Container Registry Guide](https://docs.gitlab.com/ee/administration/packages/container_registry.html)\n- [GitLab Community Forum](https://forum.gitlab.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"gitlab-installation-guide\" class=\"mobile-header\">GitLab Installation Guide</h1>\n<p class=\"mobile-paragraph\">Complete DevOps platform with Git repository management, CI/CD pipelines, issue tracking, and container registry.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">8GB RAM minimum, 16GB+ recommended for production</li>\n<li class=\"mobile-list-item\">4 CPU cores minimum</li>\n<li class=\"mobile-list-item\">20GB+ available disk space</li>\n<li class=\"mobile-list-item\">Domain name for external access</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-omnibus-package-recommended\" class=\"mobile-header\">Using Omnibus Package (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo apt update\nsudo apt install -y ca-certificates curl openssh-server postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab\nsudo apt install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo yum install -y curl policycoreutils-python-utils openssh-server postfix\n\n# Enable SSH and Postfix\nsudo systemctl enable --now sshd postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo yum install -y gitlab-ee\n\n# Configure and start GitLab\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker-compose\" class=\"mobile-header\">Using Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create GitLab directory\nmkdir -p ~/gitlab/{config,logs,data}\ncd ~/gitlab\n\n# Set proper ownership\nsudo chown -R 998:998 config logs data\n\n# Create docker-compose.yml\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  gitlab:\n    image: gitlab/gitlab-ee:latest\n    restart: unless-stopped\n    hostname: gitlab.example.com\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url &#039;https://gitlab.example.com&#039;\n        \n        # GitLab configuration\n        gitlab_rails[&#039;gitlab_shell_ssh_port&#039;] = 2222\n        gitlab_rails[&#039;time_zone&#039;] = &#039;America/New_York&#039;\n        gitlab_rails[&#039;gitlab_email_enabled&#039;] = true\n        gitlab_rails[&#039;gitlab_email_from&#039;] = &#039;gitlab@example.com&#039;\n        gitlab_rails[&#039;gitlab_email_display_name&#039;] = &#039;GitLab&#039;\n        \n        # Database configuration\n        postgresql[&#039;shared_preload_libraries&#039;] = &#039;pg_stat_statements&#039;\n        postgresql[&#039;track_activity_query_size&#039;] = 1024\n        \n        # Redis configuration\n        redis[&#039;save&#039;] = &#039;900 1 300 10 60 10000&#039;\n        \n        # Backup configuration\n        gitlab_rails[&#039;backup_keep_time&#039;] = 604800  # 7 days\n        \n        # Container Registry\n        registry_external_url &#039;https://registry.example.com&#039;\n        gitlab_rails[&#039;registry_enabled&#039;] = true\n        \n        # Monitoring\n        prometheus_monitoring[&#039;enable&#039;] = true\n        grafana[&#039;enable&#039;] = true\n        \n        # NGINX\n        nginx[&#039;listen_port&#039;] = 80\n        nginx[&#039;listen_https&#039;] = false\n        nginx[&#039;redirect_http_to_https&#039;] = false\n        \n        # Let&#039;s Encrypt (disable for reverse proxy setup)\n        letsencrypt[&#039;enable&#039;] = false\n        \n    ports:\n      - &#039;80:80&#039;\n      - &#039;443:443&#039;\n      - &#039;2222:22&#039;\n    volumes:\n      - &#039;./config:/etc/gitlab&#039;\n      - &#039;./logs:/var/log/gitlab&#039;\n      - &#039;./data:/var/opt/gitlab&#039;\n    shm_size: &#039;256m&#039;\n    networks:\n      - gitlab\n\nnetworks:\n  gitlab:\n    driver: bridge\nEOF\n\n# Start GitLab\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f gitlab</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration-etcgitlabgitlabrb\" class=\"mobile-header\">Basic Configuration (/etc/gitlab/gitlab.rb)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit GitLab configuration\nsudo nano /etc/gitlab/gitlab.rb\n\n# Key settings:\nexternal_url &#039;https://gitlab.example.com&#039;\n\n# Email configuration\ngitlab_rails[&#039;smtp_enable&#039;] = true\ngitlab_rails[&#039;smtp_address&#039;] = &quot;smtp.example.com&quot;\ngitlab_rails[&#039;smtp_port&#039;] = 587\ngitlab_rails[&#039;smtp_user_name&#039;] = &quot;smtp_username&quot;\ngitlab_rails[&#039;smtp_password&#039;] = &quot;smtp_password&quot;\ngitlab_rails[&#039;smtp_domain&#039;] = &quot;example.com&quot;\ngitlab_rails[&#039;smtp_authentication&#039;] = &quot;login&quot;\ngitlab_rails[&#039;smtp_enable_starttls_auto&#039;] = true\ngitlab_rails[&#039;smtp_tls&#039;] = false\n\ngitlab_rails[&#039;gitlab_email_from&#039;] = &#039;gitlab@example.com&#039;\ngitlab_rails[&#039;gitlab_email_display_name&#039;] = &#039;GitLab&#039;\n\n# Backup configuration\ngitlab_rails[&#039;backup_keep_time&#039;] = 604800  # 7 days\ngitlab_rails[&#039;backup_upload_connection&#039;] = {\n  &#039;provider&#039; =&gt; &#039;AWS&#039;,\n  &#039;aws_access_key_id&#039; =&gt; &#039;your_access_key&#039;,\n  &#039;aws_secret_access_key&#039; =&gt; &#039;your_secret_key&#039;,\n  &#039;region&#039; =&gt; &#039;us-east-1&#039;\n}\ngitlab_rails[&#039;backup_upload_remote_directory&#039;] = &#039;gitlab-backups&#039;\n\n# Container Registry\nregistry_external_url &#039;https://registry.example.com&#039;\ngitlab_rails[&#039;registry_enabled&#039;] = true\n\n# CI/CD settings\ngitlab_ci[&#039;gitlab_ci_all_broken_builds&#039;] = true\ngitlab_ci[&#039;gitlab_ci_add_pusher&#039;] = true\n\n# Monitoring\nprometheus_monitoring[&#039;enable&#039;] = true\ngrafana[&#039;enable&#039;] = true\ngrafana[&#039;admin_password&#039;] = &#039;grafana_admin_password&#039;\n\n# Apply configuration\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy-external\" class=\"mobile-header\">NGINX Reverse Proxy (External)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration for GitLab reverse proxy\nsudo tee /etc/nginx/sites-available/gitlab &gt; /dev/null &lt;&lt;EOF\nupstream gitlab-workhorse {\n  server unix:/var/opt/gitlab/gitlab-workhorse/sockets/socket;\n}\n\nserver {\n  listen 80;\n  server_name gitlab.example.com;\n  return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n  listen 443 ssl http2;\n  server_name gitlab.example.com;\n\n  ssl_certificate /etc/ssl/certs/gitlab.crt;\n  ssl_certificate_key /etc/ssl/private/gitlab.key;\n\n  location / {\n    proxy_pass http://gitlab-workhorse;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n    proxy_set_header X-Forwarded-Ssl on;\n    \n    # GitLab specific headers\n    proxy_set_header X-Forwarded-Host \\$http_host;\n    proxy_set_header X-Forwarded-Server \\$host;\n    \n    # WebSocket support\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade \\$http_upgrade;\n    proxy_set_header Connection &quot;upgrade&quot;;\n    \n    # Timeout settings\n    proxy_connect_timeout 60s;\n    proxy_send_timeout 60s;\n    proxy_read_timeout 60s;\n  }\n}\n\n# Container Registry\nserver {\n  listen 443 ssl http2;\n  server_name registry.example.com;\n\n  ssl_certificate /etc/ssl/certs/registry.crt;\n  ssl_certificate_key /etc/ssl/private/registry.key;\n\n  # disable any limits to avoid HTTP 413 for large image uploads\n  client_max_body_size 0;\n\n  # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)\n  chunked_transfer_encoding on;\n\n  location /v2/ {\n    proxy_pass http://localhost:5000;\n    proxy_set_header Host \\$http_host;\n    proxy_set_header X-Real-IP \\$remote_addr;\n    proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto \\$scheme;\n  }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/gitlab /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"gitlab-runner-setup\" class=\"mobile-header\">GitLab Runner Setup</h2>\n<h3 id=\"install-gitlab-runner\" class=\"mobile-header\">Install GitLab Runner</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add GitLab Runner repository\ncurl -L &quot;https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.deb.sh&quot; | sudo bash\n\n# Install GitLab Runner\nsudo apt install -y gitlab-runner\n\n# Or manual installation\nsudo curl -L --output /usr/local/bin/gitlab-runner &quot;https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-linux-amd64&quot;\nsudo chmod +x /usr/local/bin/gitlab-runner\nsudo useradd --comment &#039;GitLab Runner&#039; --create-home gitlab-runner --shell /bin/bash\nsudo gitlab-runner install --user=gitlab-runner --working-directory=/home/gitlab-runner\nsudo gitlab-runner start</code></pre>\n      </div>\n    </div>\n<h3 id=\"register-runner\" class=\"mobile-header\">Register Runner</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Register runner (get token from GitLab Admin → Runners)\nsudo gitlab-runner register \\\n  --url &quot;https://gitlab.example.com/&quot; \\\n  --registration-token &quot;REGISTRATION_TOKEN&quot; \\\n  --description &quot;docker-runner&quot; \\\n  --tag-list &quot;docker,aws&quot; \\\n  --run-untagged=&quot;true&quot; \\\n  --locked=&quot;false&quot; \\\n  --access-level=&quot;not_protected&quot; \\\n  --executor &quot;docker&quot; \\\n  --docker-image alpine:latest \\\n  --docker-privileged \\\n  --docker-volumes &quot;/certs/client&quot;\n\n# Configure runner for Docker-in-Docker\nsudo tee -a /etc/gitlab-runner/config.toml &gt; /dev/null &lt;&lt;EOF\n[[runners]]\n  [runners.docker]\n    privileged = true\n    volumes = [&quot;/cache&quot;, &quot;/certs/client&quot;]\n    disable_cache = false\n    shm_size = 0\nEOF\n\nsudo systemctl restart gitlab-runner</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"database-tuning\" class=\"mobile-header\">Database Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># PostgreSQL optimization for GitLab\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# PostgreSQL settings\npostgresql[&#039;shared_buffers&#039;] = &quot;1GB&quot;\npostgresql[&#039;effective_cache_size&#039;] = &quot;4GB&quot;\npostgresql[&#039;checkpoint_completion_target&#039;] = 0.9\npostgresql[&#039;wal_buffers&#039;] = &quot;16MB&quot;\npostgresql[&#039;default_statistics_target&#039;] = 100\npostgresql[&#039;random_page_cost&#039;] = 1.1\npostgresql[&#039;effective_io_concurrency&#039;] = 200\npostgresql[&#039;work_mem&#039;] = &quot;4MB&quot;\npostgresql[&#039;min_wal_size&#039;] = &quot;1GB&quot;\npostgresql[&#039;max_wal_size&#039;] = &quot;4GB&quot;\npostgresql[&#039;max_worker_processes&#039;] = 8\npostgresql[&#039;max_parallel_workers_per_gather&#039;] = 4\npostgresql[&#039;max_parallel_workers&#039;] = 8\npostgresql[&#039;max_parallel_maintenance_workers&#039;] = 4\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-configuration\" class=\"mobile-header\">Redis Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Redis optimization\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Redis settings\nredis[&#039;maxmemory&#039;] = &quot;1gb&quot;\nredis[&#039;maxmemory_policy&#039;] = &quot;allkeys-lru&quot;\nredis[&#039;save&#039;] = [&quot;900 1&quot;, &quot;300 10&quot;, &quot;60 10000&quot;]\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-web-server-tuning\" class=\"mobile-header\">GitLab Web Server Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Unicorn/Puma optimization\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Puma settings (GitLab 13.0+)\npuma[&#039;worker_processes&#039;] = 4\npuma[&#039;min_threads&#039;] = 4\npuma[&#039;max_threads&#039;] = 4\n\n# Sidekiq settings\nsidekiq[&#039;max_concurrency&#039;] = 25\nsidekiq[&#039;min_concurrency&#039;] = 10\n\n# Gitaly settings\ngitaly[&#039;ruby_max_rss&#039;] = 300000000  # 300MB\ngitaly[&#039;concurrency&#039;] = [\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SmartHTTPService/PostReceivePack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  },\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SSHService/SSHUploadPack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"automated-backup\" class=\"mobile-header\">Automated Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure automatic backups\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Backup settings\ngitlab_rails[&#039;backup_keep_time&#039;] = 604800  # 7 days\ngitlab_rails[&#039;backup_path&#039;] = &quot;/var/opt/gitlab/backups&quot;\n\n# S3 backup upload\ngitlab_rails[&#039;backup_upload_connection&#039;] = {\n  &#039;provider&#039; =&gt; &#039;AWS&#039;,\n  &#039;region&#039; =&gt; &#039;us-east-1&#039;,\n  &#039;aws_access_key_id&#039; =&gt; &#039;your_access_key&#039;,\n  &#039;aws_secret_access_key&#039; =&gt; &#039;your_secret_key&#039;\n}\ngitlab_rails[&#039;backup_upload_remote_directory&#039;] = &#039;gitlab-backups&#039;\ngitlab_rails[&#039;backup_multipart_chunk_size&#039;] = 104857600  # 100MB\ngitlab_rails[&#039;backup_encryption&#039;] = &#039;AES256&#039;\nEOF\n\nsudo gitlab-ctl reconfigure\n\n# Create backup script\nsudo tee /usr/local/bin/gitlab-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n# Create GitLab backup\ngitlab-backup create STRATEGY=copy\n\n# Backup configuration files\ntar -czf /var/opt/gitlab/backups/$(date +%s_%Y_%m_%d)_gitlab_config_backup.tar.gz -C / etc/gitlab/gitlab-secrets.json etc/gitlab/gitlab.rb\n\necho &quot;GitLab backup completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/gitlab-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-backup-and-restore\" class=\"mobile-header\">Manual Backup and Restore</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup manually\nsudo gitlab-backup create\n\n# List backups\nsudo gitlab-backup list\n\n# Restore from backup\nsudo gitlab-ctl stop unicorn\nsudo gitlab-ctl stop puma\nsudo gitlab-ctl stop sidekiq\nsudo gitlab-backup restore BACKUP=timestamp_of_backup\nsudo gitlab-ctl restart\nsudo gitlab-rake gitlab:check SANITIZE=true</code></pre>\n      </div>\n    </div>\n<h2 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h2>\n<h3 id=\"lets-encrypt-integration\" class=\"mobile-header\">Let's Encrypt Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Let&#039;s Encrypt in GitLab\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Let&#039;s Encrypt configuration\nletsencrypt[&#039;enable&#039;] = true\nletsencrypt[&#039;contact_emails&#039;] = [&#039;admin@example.com&#039;]\nletsencrypt[&#039;auto_renew&#039;] = true\nletsencrypt[&#039;auto_renew_hour&#039;] = 0\nletsencrypt[&#039;auto_renew_minute&#039;] = 0\nletsencrypt[&#039;auto_renew_day_of_month&#039;] = &quot;*/4&quot;\n\n# Redirect HTTP to HTTPS\nnginx[&#039;redirect_http_to_https&#039;] = true\nnginx[&#039;ssl_protocols&#039;] = &quot;TLSv1.2 TLSv1.3&quot;\nnginx[&#039;ssl_prefer_server_ciphers&#039;] = &quot;off&quot;\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-ssl-configuration\" class=\"mobile-header\">Manual SSL Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure custom SSL certificates\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# SSL configuration\nnginx[&#039;ssl_certificate&#039;] = &quot;/etc/ssl/certs/gitlab.crt&quot;\nnginx[&#039;ssl_certificate_key&#039;] = &quot;/etc/ssl/private/gitlab.key&quot;\nnginx[&#039;ssl_dhparam&#039;] = &quot;/etc/ssl/certs/dhparam.pem&quot;\n\n# Registry SSL\nregistry_nginx[&#039;ssl_certificate&#039;] = &quot;/etc/ssl/certs/registry.crt&quot;\nregistry_nginx[&#039;ssl_certificate_key&#039;] = &quot;/etc/ssl/private/registry.key&quot;\nEOF\n\n# Generate dhparam\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-configuration\" class=\"mobile-header\">CI/CD Configuration</h2>\n<h3 id=\"enable-container-registry\" class=\"mobile-header\">Enable Container Registry</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure container registry\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Container Registry\nregistry_external_url &#039;https://registry.example.com&#039;\ngitlab_rails[&#039;registry_enabled&#039;] = true\nregistry[&#039;enable&#039;] = true\nregistry[&#039;username&#039;] = &quot;registry&quot;\nregistry[&#039;uid&#039;] = 996\nregistry[&#039;gid&#039;] = 996\nregistry[&#039;dir&#039;] = &quot;/var/opt/gitlab/registry&quot;\nregistry[&#039;registry_http_addr&#039;] = &quot;localhost:5000&quot;\nregistry[&#039;debug_addr&#039;] = &quot;localhost:5001&quot;\nregistry[&#039;log_directory&#039;] = &quot;/var/log/gitlab/registry&quot;\nregistry[&#039;log_level&#039;] = &quot;info&quot;\nregistry[&#039;rootcertbundle&#039;] = &quot;/opt/gitlab/embedded/ssl/certs/cacert.pem&quot;\nregistry[&#039;health_storagedriver_enabled&#039;] = true\nregistry[&#039;middleware&#039;] = {\n  &#039;redirect&#039; =&gt; [\n    {&#039;disable&#039; =&gt; false}\n  ]\n}\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-pages-setup\" class=\"mobile-header\">GitLab Pages Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable GitLab Pages\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# GitLab Pages configuration\npages_external_url &quot;https://pages.example.com&quot;\ngitlab_pages[&#039;enable&#039;] = true\ngitlab_pages[&#039;dir&#039;] = &quot;/var/opt/gitlab/gitlab-pages&quot;\ngitlab_pages[&#039;log_directory&#039;] = &quot;/var/log/gitlab/gitlab-pages&quot;\ngitlab_pages[&#039;artifacts_server&#039;] = true\ngitlab_pages[&#039;artifacts_server_url&#039;] = &quot;https://gitlab.example.com/api/v4&quot;\ngitlab_pages[&#039;access_control&#039;] = false\ngitlab_pages[&#039;use_legacy_storage&#039;] = false\ngitlab_pages[&#039;inplace_chroot&#039;] = true\ngitlab_pages[&#039;propagate_correlation_id&#039;] = false\ngitlab_pages[&#039;log_format&#039;] = &quot;json&quot;\ngitlab_pages[&#039;log_verbose&#039;] = false\ngitlab_pages[&#039;redirect_http&#039;] = true\npages_nginx[&#039;enable&#039;] = true\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-maintenance\" class=\"mobile-header\">Monitoring and Maintenance</h2>\n<h3 id=\"gitlab-monitoring-stack\" class=\"mobile-header\">GitLab Monitoring Stack</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Access built-in monitoring\n# Prometheus: https://gitlab.example.com/-/admin/monitoring\n# Grafana: https://gitlab.example.com/-/grafana\n\n# Configure external Prometheus\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Prometheus configuration\nprometheus[&#039;listen_address&#039;] = &#039;localhost:9090&#039;\nprometheus[&#039;scrape_configs&#039;] = [\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-workhorse&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:9229&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-unicorn&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8080&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-sidekiq&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8082&#039;] }\n    ]\n  }\n]\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-commands\" class=\"mobile-header\">Maintenance Commands</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check GitLab status\nsudo gitlab-rake gitlab:check\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Database maintenance\nsudo gitlab-rake db:migrate\nsudo gitlab-rake db:check\nsudo gitlab-rake gitlab:cleanup:sessions\nsudo gitlab-rake gitlab:cleanup:refs\n\n# Cache clearing\nsudo gitlab-rake cache:clear\nsudo gitlab-rake assets:clean\n\n# Check disk usage\nsudo du -sh /var/opt/gitlab/\nsudo gitlab-rake gitlab:artifacts:check\nsudo gitlab-rake gitlab:lfs:check\n\n# Update GitLab\nsudo apt update &amp;&amp; sudo apt upgrade gitlab-ee  # Package installation\nsudo gitlab-ctl restart                        # Docker</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check GitLab status\nsudo gitlab-ctl status\nsudo gitlab-rake gitlab:check\n\n# Test web interface\ncurl -I https://gitlab.example.com\ncurl -I https://registry.example.com\n\n# Check service logs\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\nsudo gitlab-ctl tail postgresql\nsudo gitlab-ctl tail redis\n\n# Check runner status\nsudo gitlab-runner verify\nsudo gitlab-runner list\n\n# Test container registry\ndocker login registry.example.com\ndocker pull alpine\ndocker tag alpine registry.example.com/group/project:latest\ndocker push registry.example.com/group/project:latest\n\n# Check GitLab Runner\nsudo systemctl status gitlab-runner\ngitlab-runner list\n\n# Performance check\nsudo gitlab-rake gitlab:env:info\nsudo gitlab-rake gitlab:check</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check all GitLab services\nsudo gitlab-ctl status\n\n# Restart specific service\nsudo gitlab-ctl restart nginx\nsudo gitlab-ctl restart postgresql\n\n# Check configuration\nsudo gitlab-rake gitlab:check\nsudo gitlab-ctl show-config\n\n# Debug mode\nsudo gitlab-ctl tail\nsudo gitlab-ctl tail nginx\n\n# Check disk space\ndf -h /var/opt/gitlab/\nsudo du -sh /var/opt/gitlab/git-data/\n\n# Memory usage\nfree -h\nsudo gitlab-ctl status\n\n# Database connection issues\nsudo gitlab-rake db:migrate:status\nsudo -u git -H bundle exec rake gitlab:setup RAILS_ENV=production\n\n# Reset root password\nsudo gitlab-rake &quot;gitlab:password:reset[root]&quot;\n\n# Check GitLab secrets\nsudo gitlab-rake gitlab:doctor:secrets\n\n# Reconfigure if issues persist\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/administration/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Admin Docs</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/runner/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Runner Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/administration/packages/container_registry.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Container Registry Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forum.gitlab.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"9 min","wordCount":1745,"lastBuilt":"2025-09-14T01:15:33.860Z"},{"name":"grafana","displayName":"Grafana","slug":"grafana","description":"Repo for grafana","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/grafana","updatedAt":"2025-09-08T03:08:21Z","createdAt":"2025-09-08T03:08:10Z","readmeRaw":"# Grafana Installation Guide\n\nOpen-source observability platform for monitoring and visualization. Creates dashboards and alerts from multiple data sources.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Root or sudo access\n- 2GB RAM minimum, 4GB recommended\n- Data source (Prometheus, InfluxDB, etc.) - optional for initial setup\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Add Grafana GPG key\nwget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\n\n# Add Grafana repository\necho \"deb https://packages.grafana.com/oss/deb stable main\" | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Update and install\nsudo apt update\nsudo apt install -y grafana\n\n# Enable and start Grafana\nsudo systemctl enable --now grafana-server\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Add Grafana repository\nsudo tee /etc/yum.repos.d/grafana.repo > /dev/null <<EOF\n[grafana]\nname=grafana\nbaseurl=https://packages.grafana.com/oss/rpm\nrepo_gpgcheck=1\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.grafana.com/gpg.key\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nEOF\n\n# Install Grafana\nsudo yum install -y grafana\n\n# Enable and start Grafana\nsudo systemctl enable --now grafana-server\n```\n\n### Using Docker\n```bash\n# Create directories for persistent data\nmkdir -p ~/grafana/{data,provisioning/{datasources,dashboards}}\n\n# Set proper permissions\nsudo chown -R 472:472 ~/grafana/data\n\n# Run Grafana container\ndocker run -d \\\n  --name grafana \\\n  --restart unless-stopped \\\n  -p 3000:3000 \\\n  -v ~/grafana/data:/var/lib/grafana \\\n  -v ~/grafana/provisioning:/etc/grafana/provisioning \\\n  -e \"GF_SECURITY_ADMIN_PASSWORD=admin123\" \\\n  grafana/grafana:latest\n```\n\n### Using Docker Compose\n```bash\n# Create docker-compose.yml\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  grafana:\n    image: grafana/grafana:latest\n    container_name: grafana\n    restart: unless-stopped\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - grafana-data:/var/lib/grafana\n      - ./grafana/provisioning:/etc/grafana/provisioning\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin123\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_SERVER_ROOT_URL=https://grafana.example.com\n    networks:\n      - monitoring\n\nnetworks:\n  monitoring:\n    driver: bridge\n\nvolumes:\n  grafana-data:\nEOF\n\n# Start services\ndocker-compose up -d\n```\n\n## Configuration\n\n### Basic Configuration\n```bash\n# Edit main configuration file\nsudo nano /etc/grafana/grafana.ini\n\n# Key settings to configure:\n[server]\nprotocol = http\nhttp_port = 3000\ndomain = grafana.example.com\nroot_url = https://grafana.example.com\n\n[database]\ntype = sqlite3\npath = grafana.db\n\n# For MySQL\ntype = mysql\nhost = 127.0.0.1:3306\nname = grafana\nuser = grafana\npassword = password\n\n# For PostgreSQL\ntype = postgres\nhost = 127.0.0.1:5432\nname = grafana\nuser = grafana\npassword = password\nssl_mode = disable\n\n[security]\nadmin_user = admin\nadmin_password = admin123\nsecret_key = SW2YcwTIb9zpOOhoPsMm\n\n[users]\nallow_sign_up = false\nallow_org_create = false\nauto_assign_org = true\nauto_assign_org_role = Viewer\n\n[auth.anonymous]\nenabled = false\n\n[smtp]\nenabled = true\nhost = localhost:587\nuser = \npassword = \nfrom_address = admin@grafana.localhost\nfrom_name = Grafana\n\n# Restart Grafana after configuration changes\nsudo systemctl restart grafana-server\n```\n\n### NGINX Reverse Proxy\n```bash\n# Create NGINX configuration for Grafana\nsudo tee /etc/nginx/sites-available/grafana > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name grafana.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name grafana.example.com;\n\n    ssl_certificate /etc/ssl/certs/grafana.crt;\n    ssl_certificate_key /etc/ssl/private/grafana.key;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        \n        # WebSocket support\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/grafana /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n### Data Sources Configuration\n\n#### Prometheus Data Source\n```bash\n# Create datasource provisioning file\nsudo mkdir -p /etc/grafana/provisioning/datasources\nsudo tee /etc/grafana/provisioning/datasources/prometheus.yml > /dev/null <<EOF\napiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    url: http://localhost:9090\n    access: proxy\n    isDefault: true\n    editable: true\n    \n  - name: InfluxDB\n    type: influxdb\n    url: http://localhost:8086\n    database: telegraf\n    user: grafana\n    password: grafana_password\n    \n  - name: MySQL\n    type: mysql\n    url: localhost:3306\n    database: grafana\n    user: grafana\n    password: grafana_password\nEOF\n\nsudo chown -R grafana:grafana /etc/grafana/provisioning\nsudo systemctl restart grafana-server\n```\n\n#### Dashboard Provisioning\n```bash\n# Create dashboard provisioning\nsudo mkdir -p /etc/grafana/provisioning/dashboards\nsudo tee /etc/grafana/provisioning/dashboards/default.yml > /dev/null <<EOF\napiVersion: 1\n\nproviders:\n  - name: 'default'\n    orgId: 1\n    folder: ''\n    type: file\n    disableDeletion: false\n    editable: true\n    updateIntervalSeconds: 10\n    allowUiUpdates: true\n    options:\n      path: /var/lib/grafana/dashboards\nEOF\n\n# Download popular dashboards\nsudo mkdir -p /var/lib/grafana/dashboards\nsudo chown grafana:grafana /var/lib/grafana/dashboards\n\n# Node Exporter dashboard\nsudo wget https://raw.githubusercontent.com/prometheus/node_exporter/master/examples/grafana/node-exporter-full.json -O /var/lib/grafana/dashboards/node-exporter.json\n\n# Docker dashboard\nsudo wget https://grafana.com/api/dashboards/893/revisions/1/download -O /var/lib/grafana/dashboards/docker.json\n\nsudo chown -R grafana:grafana /var/lib/grafana/dashboards\nsudo systemctl restart grafana-server\n```\n\n## Plugin Management\n\n```bash\n# Install plugins\nsudo grafana-cli plugins install grafana-clock-panel\nsudo grafana-cli plugins install grafana-simple-json-datasource\nsudo grafana-cli plugins install grafana-worldmap-panel\nsudo grafana-cli plugins install grafana-piechart-panel\n\n# List installed plugins\nsudo grafana-cli plugins list-remote\nsudo grafana-cli plugins ls\n\n# Update plugins\nsudo grafana-cli plugins update-all\n\n# Remove plugin\nsudo grafana-cli plugins remove grafana-clock-panel\n\n# Restart Grafana after plugin changes\nsudo systemctl restart grafana-server\n```\n\n## Firewall Configuration\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 3000/tcp\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n```\n\n## Verification\n\n```bash\n# Check Grafana status\nsudo systemctl status grafana-server\n\n# Check logs\nsudo journalctl -u grafana-server -f\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check listening port\nsudo netstat -tulpn | grep 3000\n\n# Test login\ncurl -X POST \\\n  http://localhost:3000/api/auth/keys \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"name\":\"test\",\"role\":\"Admin\"}'\n\n# Check data sources via API\ncurl -u admin:admin123 http://localhost:3000/api/datasources\n\n# Check dashboard API\ncurl -u admin:admin123 http://localhost:3000/api/search\n\n# Check Grafana version\ngrafana-server --version\n```\n\n## Backup and Restore\n\n```bash\n# Create backup script\nsudo tee /usr/local/bin/grafana-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/grafana\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Stop Grafana\nsystemctl stop grafana-server\n\n# Backup Grafana database and configuration\ntar -czf ${BACKUP_DIR}/grafana-backup-${DATE}.tar.gz \\\n  /var/lib/grafana/ \\\n  /etc/grafana/ \\\n  /etc/systemd/system/grafana-server.service\n\n# Start Grafana\nsystemctl start grafana-server\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"grafana-backup-*.tar.gz\" -type f -mtime +7 -delete\n\necho \"Backup completed: grafana-backup-${DATE}.tar.gz\"\nEOF\n\nsudo chmod +x /usr/local/bin/grafana-backup.sh\n\n# Schedule daily backup\necho \"0 3 * * * root /usr/local/bin/grafana-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## High Availability Setup\n\n### MySQL Backend\n```bash\n# Configure Grafana for MySQL backend\nsudo tee -a /etc/grafana/grafana.ini > /dev/null <<EOF\n\n[database]\ntype = mysql\nhost = mysql-cluster.example.com:3306\nname = grafana\nuser = grafana\npassword = secure_password\nssl_mode = false\n\n[session]\nprovider = mysql\nprovider_config = grafana:secure_password@tcp(mysql-cluster.example.com:3306)/grafana\n\n[remote_cache]\ntype = redis\nconnstr = addr=redis-cluster.example.com:6379,pool_size=100,db=0\nEOF\n```\n\n### Load Balancer Configuration\n```bash\n# HAProxy configuration for Grafana cluster\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\nfrontend grafana_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/grafana.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend grafana_servers\n\nbackend grafana_servers\n    balance roundrobin\n    option httpchk GET /api/health\n    http-check expect status 200\n    server grafana1 192.168.1.40:3000 check\n    server grafana2 192.168.1.41:3000 check\n    server grafana3 192.168.1.42:3000 check\nEOF\n\nsudo systemctl restart haproxy\n```\n\n## Troubleshooting\n\n```bash\n# Check Grafana service status\nsudo systemctl status grafana-server\n\n# View Grafana logs\nsudo tail -f /var/log/grafana/grafana.log\n\n# Check configuration file syntax\nsudo grafana-server --config /etc/grafana/grafana.ini --help\n\n# Test database connection\nsudo -u grafana grafana-cli admin reset-admin-password newpassword\n\n# Check plugin status\nsudo grafana-cli plugins ls\n\n# Debug data source connections\ncurl -u admin:password http://localhost:3000/api/datasources/proxy/1/api/v1/query?query=up\n\n# Check disk space (common issue)\ndf -h /var/lib/grafana\n\n# Reset admin password\nsudo grafana-cli admin reset-admin-password admin123\n\n# Check configuration\nsudo grafana-server --config /etc/grafana/grafana.ini --homepath /usr/share/grafana --help\n```\n\n## Additional Resources\n\n- [Official Documentation](https://grafana.com/docs/grafana/latest/)\n- [Dashboard Gallery](https://grafana.com/grafana/dashboards/)\n- [Plugin Catalog](https://grafana.com/grafana/plugins/)\n- [Community Forum](https://community.grafana.com/)\n- [Grafana Labs Blog](https://grafana.com/blog/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"grafana-installation-guide\" class=\"mobile-header\">Grafana Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source observability platform for monitoring and visualization. Creates dashboards and alerts from multiple data sources.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB recommended</li>\n<li class=\"mobile-list-item\">Data source (Prometheus, InfluxDB, etc.) - optional for initial setup</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Grafana GPG key\nwget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\n\n# Add Grafana repository\necho &quot;deb https://packages.grafana.com/oss/deb stable main&quot; | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Update and install\nsudo apt update\nsudo apt install -y grafana\n\n# Enable and start Grafana\nsudo systemctl enable --now grafana-server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Grafana repository\nsudo tee /etc/yum.repos.d/grafana.repo &gt; /dev/null &lt;&lt;EOF\n[grafana]\nname=grafana\nbaseurl=https://packages.grafana.com/oss/rpm\nrepo_gpgcheck=1\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.grafana.com/gpg.key\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nEOF\n\n# Install Grafana\nsudo yum install -y grafana\n\n# Enable and start Grafana\nsudo systemctl enable --now grafana-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create directories for persistent data\nmkdir -p ~/grafana/{data,provisioning/{datasources,dashboards}}\n\n# Set proper permissions\nsudo chown -R 472:472 ~/grafana/data\n\n# Run Grafana container\ndocker run -d \\\n  --name grafana \\\n  --restart unless-stopped \\\n  -p 3000:3000 \\\n  -v ~/grafana/data:/var/lib/grafana \\\n  -v ~/grafana/provisioning:/etc/grafana/provisioning \\\n  -e &quot;GF_SECURITY_ADMIN_PASSWORD=admin123&quot; \\\n  grafana/grafana:latest</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker-compose\" class=\"mobile-header\">Using Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create docker-compose.yml\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  grafana:\n    image: grafana/grafana:latest\n    container_name: grafana\n    restart: unless-stopped\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - grafana-data:/var/lib/grafana\n      - ./grafana/provisioning:/etc/grafana/provisioning\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin123\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_SERVER_ROOT_URL=https://grafana.example.com\n    networks:\n      - monitoring\n\nnetworks:\n  monitoring:\n    driver: bridge\n\nvolumes:\n  grafana-data:\nEOF\n\n# Start services\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit main configuration file\nsudo nano /etc/grafana/grafana.ini\n\n# Key settings to configure:\n[server]\nprotocol = http\nhttp_port = 3000\ndomain = grafana.example.com\nroot_url = https://grafana.example.com\n\n[database]\ntype = sqlite3\npath = grafana.db\n\n# For MySQL\ntype = mysql\nhost = 127.0.0.1:3306\nname = grafana\nuser = grafana\npassword = password\n\n# For PostgreSQL\ntype = postgres\nhost = 127.0.0.1:5432\nname = grafana\nuser = grafana\npassword = password\nssl_mode = disable\n\n[security]\nadmin_user = admin\nadmin_password = admin123\nsecret_key = SW2YcwTIb9zpOOhoPsMm\n\n[users]\nallow_sign_up = false\nallow_org_create = false\nauto_assign_org = true\nauto_assign_org_role = Viewer\n\n[auth.anonymous]\nenabled = false\n\n[smtp]\nenabled = true\nhost = localhost:587\nuser = \npassword = \nfrom_address = admin@grafana.localhost\nfrom_name = Grafana\n\n# Restart Grafana after configuration changes\nsudo systemctl restart grafana-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy\" class=\"mobile-header\">NGINX Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration for Grafana\nsudo tee /etc/nginx/sites-available/grafana &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 80;\n    server_name grafana.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name grafana.example.com;\n\n    ssl_certificate /etc/ssl/certs/grafana.crt;\n    ssl_certificate_key /etc/ssl/private/grafana.key;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        \n        # WebSocket support\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/grafana /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"data-sources-configuration\" class=\"mobile-header\">Data Sources Configuration</h3>\n<p class=\"mobile-paragraph\">#### Prometheus Data Source</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create datasource provisioning file\nsudo mkdir -p /etc/grafana/provisioning/datasources\nsudo tee /etc/grafana/provisioning/datasources/prometheus.yml &gt; /dev/null &lt;&lt;EOF\napiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    url: http://localhost:9090\n    access: proxy\n    isDefault: true\n    editable: true\n    \n  - name: InfluxDB\n    type: influxdb\n    url: http://localhost:8086\n    database: telegraf\n    user: grafana\n    password: grafana_password\n    \n  - name: MySQL\n    type: mysql\n    url: localhost:3306\n    database: grafana\n    user: grafana\n    password: grafana_password\nEOF\n\nsudo chown -R grafana:grafana /etc/grafana/provisioning\nsudo systemctl restart grafana-server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Dashboard Provisioning</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dashboard provisioning\nsudo mkdir -p /etc/grafana/provisioning/dashboards\nsudo tee /etc/grafana/provisioning/dashboards/default.yml &gt; /dev/null &lt;&lt;EOF\napiVersion: 1\n\nproviders:\n  - name: &#039;default&#039;\n    orgId: 1\n    folder: &#039;&#039;\n    type: file\n    disableDeletion: false\n    editable: true\n    updateIntervalSeconds: 10\n    allowUiUpdates: true\n    options:\n      path: /var/lib/grafana/dashboards\nEOF\n\n# Download popular dashboards\nsudo mkdir -p /var/lib/grafana/dashboards\nsudo chown grafana:grafana /var/lib/grafana/dashboards\n\n# Node Exporter dashboard\nsudo wget https://raw.githubusercontent.com/prometheus/node_exporter/master/examples/grafana/node-exporter-full.json -O /var/lib/grafana/dashboards/node-exporter.json\n\n# Docker dashboard\nsudo wget https://grafana.com/api/dashboards/893/revisions/1/download -O /var/lib/grafana/dashboards/docker.json\n\nsudo chown -R grafana:grafana /var/lib/grafana/dashboards\nsudo systemctl restart grafana-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"plugin-management\" class=\"mobile-header\">Plugin Management</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install plugins\nsudo grafana-cli plugins install grafana-clock-panel\nsudo grafana-cli plugins install grafana-simple-json-datasource\nsudo grafana-cli plugins install grafana-worldmap-panel\nsudo grafana-cli plugins install grafana-piechart-panel\n\n# List installed plugins\nsudo grafana-cli plugins list-remote\nsudo grafana-cli plugins ls\n\n# Update plugins\nsudo grafana-cli plugins update-all\n\n# Remove plugin\nsudo grafana-cli plugins remove grafana-clock-panel\n\n# Restart Grafana after plugin changes\nsudo systemctl restart grafana-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 3000/tcp\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Grafana status\nsudo systemctl status grafana-server\n\n# Check logs\nsudo journalctl -u grafana-server -f\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check listening port\nsudo netstat -tulpn | grep 3000\n\n# Test login\ncurl -X POST \\\n  http://localhost:3000/api/auth/keys \\\n  -H &#039;Content-Type: application/json&#039; \\\n  -d &#039;{&quot;name&quot;:&quot;test&quot;,&quot;role&quot;:&quot;Admin&quot;}&#039;\n\n# Check data sources via API\ncurl -u admin:admin123 http://localhost:3000/api/datasources\n\n# Check dashboard API\ncurl -u admin:admin123 http://localhost:3000/api/search\n\n# Check Grafana version\ngrafana-server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/grafana-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/grafana&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Stop Grafana\nsystemctl stop grafana-server\n\n# Backup Grafana database and configuration\ntar -czf ${BACKUP_DIR}/grafana-backup-${DATE}.tar.gz \\\n  /var/lib/grafana/ \\\n  /etc/grafana/ \\\n  /etc/systemd/system/grafana-server.service\n\n# Start Grafana\nsystemctl start grafana-server\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;grafana-backup-*.tar.gz&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: grafana-backup-${DATE}.tar.gz&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/grafana-backup.sh\n\n# Schedule daily backup\necho &quot;0 3 * * * root /usr/local/bin/grafana-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h2>\n<h3 id=\"mysql-backend\" class=\"mobile-header\">MySQL Backend</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Grafana for MySQL backend\nsudo tee -a /etc/grafana/grafana.ini &gt; /dev/null &lt;&lt;EOF\n\n[database]\ntype = mysql\nhost = mysql-cluster.example.com:3306\nname = grafana\nuser = grafana\npassword = secure_password\nssl_mode = false\n\n[session]\nprovider = mysql\nprovider_config = grafana:secure_password@tcp(mysql-cluster.example.com:3306)/grafana\n\n[remote_cache]\ntype = redis\nconnstr = addr=redis-cluster.example.com:6379,pool_size=100,db=0\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"load-balancer-configuration\" class=\"mobile-header\">Load Balancer Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># HAProxy configuration for Grafana cluster\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\nfrontend grafana_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/grafana.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend grafana_servers\n\nbackend grafana_servers\n    balance roundrobin\n    option httpchk GET /api/health\n    http-check expect status 200\n    server grafana1 192.168.1.40:3000 check\n    server grafana2 192.168.1.41:3000 check\n    server grafana3 192.168.1.42:3000 check\nEOF\n\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Grafana service status\nsudo systemctl status grafana-server\n\n# View Grafana logs\nsudo tail -f /var/log/grafana/grafana.log\n\n# Check configuration file syntax\nsudo grafana-server --config /etc/grafana/grafana.ini --help\n\n# Test database connection\nsudo -u grafana grafana-cli admin reset-admin-password newpassword\n\n# Check plugin status\nsudo grafana-cli plugins ls\n\n# Debug data source connections\ncurl -u admin:password http://localhost:3000/api/datasources/proxy/1/api/v1/query?query=up\n\n# Check disk space (common issue)\ndf -h /var/lib/grafana\n\n# Reset admin password\nsudo grafana-cli admin reset-admin-password admin123\n\n# Check configuration\nsudo grafana-server --config /etc/grafana/grafana.ini --homepath /usr/share/grafana --help</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/docs/grafana/latest/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/grafana/dashboards/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Dashboard Gallery</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/grafana/plugins/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Plugin Catalog</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://community.grafana.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/blog/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Grafana Labs Blog</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"6 min","wordCount":1128,"lastBuilt":"2025-09-14T01:15:33.735Z"},{"name":"haproxy","displayName":"Haproxy","slug":"haproxy","description":"Repo for haproxy","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/haproxy","updatedAt":"2025-09-08T03:08:33Z","createdAt":"2025-09-08T03:08:23Z","readmeRaw":"# HAProxy Installation Guide\n\nHigh-performance TCP/HTTP load balancer and reverse proxy. Essential for distributing traffic across multiple backend servers.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Root or sudo access\n- Multiple backend servers to load balance (optional for testing)\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install HAProxy\nsudo apt install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n```\n\n### RHEL/CentOS/Rocky Linux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install HAProxy\nsudo yum install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n```\n\n### From Source (Latest Version)\n```bash\n# Install build dependencies\nsudo apt install -y build-essential libssl-dev zlib1g-dev libpcre3-dev\n\n# Download and compile HAProxy\ncd /tmp\nwget https://www.haproxy.org/download/2.8/src/haproxy-2.8.0.tar.gz\ntar xzf haproxy-2.8.0.tar.gz\ncd haproxy-2.8.0\n\n# Compile with SSL support\nmake TARGET=linux-glibc USE_OPENSSL=1 USE_ZLIB=1 USE_PCRE=1\nsudo make install\n\n# Create systemd service\nsudo tee /etc/systemd/system/haproxy.service > /dev/null <<EOF\n[Unit]\nDescription=HAProxy Load Balancer\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid\nExecReload=/bin/kill -USR2 \\$MAINPID\nKillMode=mixed\nRestart=always\nType=notify\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy\n```\n\n## Configuration\n\n### Basic Load Balancer Configuration\n```bash\n# Backup original configuration\nsudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup\n\n# Create basic load balancer configuration\nsudo tee /etc/haproxy/haproxy.cfg > /dev/null <<EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\n# Frontend configuration\nfrontend web_frontend\n    bind *:80\n    option httpclose\n    option forwardfor\n    default_backend web_servers\n\n# Backend configuration\nbackend web_servers\n    balance roundrobin\n    option httpchk GET /health\n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check backup\n\n# Statistics page\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if TRUE\nEOF\n\n# Test configuration\nsudo haproxy -c -f /etc/haproxy/haproxy.cfg\n\n# Restart HAProxy\nsudo systemctl restart haproxy\n```\n\n### SSL Termination Configuration\n```bash\n# Create SSL certificate (self-signed for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/haproxy/server.key \\\n    -out /etc/haproxy/server.crt \\\n    -subj \"/C=US/ST=State/L=City/O=Organization/CN=example.com\"\n\n# Combine certificate and key\nsudo cat /etc/haproxy/server.crt /etc/haproxy/server.key | sudo tee /etc/haproxy/server.pem\n\n# Update HAProxy configuration for SSL\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\n# HTTPS Frontend\nfrontend https_frontend\n    bind *:443 ssl crt /etc/haproxy/server.pem\n    redirect scheme https unless { ssl_fc }\n    default_backend web_servers\n\n# HTTP to HTTPS redirect\nfrontend http_frontend\n    bind *:80\n    redirect scheme https code 301\nEOF\n\nsudo systemctl restart haproxy\n```\n\n### Advanced Load Balancing Configuration\n```bash\n# Advanced configuration with multiple backends\nsudo tee /etc/haproxy/haproxy.cfg > /dev/null <<EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n    \n    # SSL configuration\n    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n    ssl-default-bind-options no-sslv3\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor\n    option http-server-close\n    timeout connect 5s\n    timeout client 1m\n    timeout server 1m\n    timeout http-keep-alive 10s\n    timeout check 10s\n    maxconn 3000\n\n# Frontend for web traffic\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/certs/\n    \n    # ACLs for routing\n    acl is_api path_beg /api/\n    acl is_admin path_beg /admin/\n    acl is_static path_beg /static/ /css/ /js/ /images/\n    \n    # Routing rules\n    use_backend api_servers if is_api\n    use_backend admin_servers if is_admin\n    use_backend static_servers if is_static\n    default_backend web_servers\n\n# Web servers backend\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health\n    http-check expect status 200\n    server web1 192.168.1.10:8080 check weight 100\n    server web2 192.168.1.11:8080 check weight 100\n    server web3 192.168.1.12:8080 check weight 50 backup\n\n# API servers backend\nbackend api_servers\n    balance roundrobin\n    option httpchk GET /api/health\n    http-check expect string \"OK\"\n    server api1 192.168.1.20:3000 check\n    server api2 192.168.1.21:3000 check\n\n# Admin backend (restricted)\nbackend admin_servers\n    balance source\n    option httpchk GET /admin/health\n    server admin1 192.168.1.30:9000 check\n\n# Static content backend\nbackend static_servers\n    balance roundrobin\n    option httpchk GET /static/health.txt\n    server static1 192.168.1.40:8080 check\n    server static2 192.168.1.41:8080 check\n\n# Stats interface\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /\n    stats refresh 30s\n    stats admin if TRUE\n    stats auth admin:secure_password\nEOF\n```\n\n### Database Load Balancing (TCP Mode)\n```bash\n# MySQL/PostgreSQL load balancing\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\n# MySQL Frontend\nlisten mysql_frontend\n    bind *:3306\n    mode tcp\n    option mysql-check user haproxy_check\n    balance leastconn\n    server mysql1 192.168.1.50:3306 check\n    server mysql2 192.168.1.51:3306 check backup\n\n# PostgreSQL Frontend  \nlisten postgresql_frontend\n    bind *:5432\n    mode tcp\n    option pgsql-check user haproxy_check\n    balance roundrobin\n    server postgres1 192.168.1.60:5432 check\n    server postgres2 192.168.1.61:5432 check\nEOF\n```\n\n## Firewall Configuration\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw allow 8404/tcp  # Stats interface\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --permanent --add-port=8404/tcp\nsudo firewall-cmd --reload\n```\n\n## Verification\n\n```bash\n# Check HAProxy status\nsudo systemctl status haproxy\n\n# Test configuration syntax\nsudo haproxy -c -f /etc/haproxy/haproxy.cfg\n\n# Check listening ports\nsudo netstat -tulpn | grep haproxy\n\n# Test load balancing\nfor i in {1..10}; do curl -s http://localhost/ | grep server; done\n\n# View statistics\ncurl http://localhost:8404/stats\n\n# Check backend server health\necho \"show stat\" | sudo socat stdio /run/haproxy/admin.sock\n\n# View real-time logs\nsudo journalctl -u haproxy -f\n```\n\n## Monitoring and Management\n\n```bash\n# HAProxy runtime commands via socket\necho \"help\" | sudo socat stdio /run/haproxy/admin.sock\n\n# Disable/Enable server\necho \"disable server web_servers/web1\" | sudo socat stdio /run/haproxy/admin.sock\necho \"enable server web_servers/web1\" | sudo socat stdio /run/haproxy/admin.sock\n\n# Check server weights\necho \"get weight web_servers/web1\" | sudo socat stdio /run/haproxy/admin.sock\n\n# Set server weight\necho \"set weight web_servers/web1 50\" | sudo socat stdio /run/haproxy/admin.sock\n\n# Show current sessions\necho \"show sess\" | sudo socat stdio /run/haproxy/admin.sock\n```\n\n## Performance Tuning\n\n```bash\n# System-level optimizations\necho \"net.ipv4.ip_local_port_range = 1024 65535\" | sudo tee -a /etc/sysctl.conf\necho \"net.core.somaxconn = 65535\" | sudo tee -a /etc/sysctl.conf\necho \"net.core.netdev_max_backlog = 30000\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# HAProxy performance configuration\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\nglobal\n    # Performance tuning\n    maxconn 40000\n    nbproc 1\n    nbthread 4\n    cpu-map auto:1/1-4 0-3\n    \ndefaults\n    # Connection limits\n    maxconn 8000\n    \n    # Timeouts\n    timeout connect 3s\n    timeout client 25s\n    timeout server 25s\n    timeout tunnel 3600s\n    timeout http-keep-alive 1s\n    timeout http-request 15s\n    timeout queue 30s\n    timeout tarpit 60s\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/plain text/css text/javascript application/javascript\nEOF\n```\n\n## Health Checks\n\n```bash\n# HTTP health check examples\nbackend web_servers\n    option httpchk GET /health\n    http-check expect status 200\n    http-check expect string \"OK\"\n    \n    # Advanced health check\n    option httpchk GET /health HTTP/1.1\\r\\nHost:\\ example.com\n    http-check expect rstatus ^2[0-9][0-9]\n    \n    server web1 192.168.1.10:8080 check inter 2000 rise 2 fall 3\n    server web2 192.168.1.11:8080 check inter 2000 rise 2 fall 3\n\n# TCP health check\nbackend database_servers\n    mode tcp\n    option tcp-check\n    tcp-check connect\n    tcp-check send-binary 0a  # MySQL ping\n    tcp-check expect binary 0a\n    \n    server db1 192.168.1.20:3306 check\n    server db2 192.168.1.21:3306 check\n```\n\n## Troubleshooting\n\n```bash\n# Check HAProxy process\nps aux | grep haproxy\n\n# Verify configuration file\nsudo haproxy -c -V -f /etc/haproxy/haproxy.cfg\n\n# Check socket permissions\nls -la /run/haproxy/admin.sock\n\n# Test backend connectivity\nfor server in 192.168.1.10 192.168.1.11; do\n    nc -zv $server 8080\ndone\n\n# Monitor connections\nss -tuln | grep :80\n\n# Debug mode (don't run in production)\nsudo haproxy -f /etc/haproxy/haproxy.cfg -d\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.haproxy.org/)\n- [HAProxy Configuration Manual](https://cbonte.github.io/haproxy-dconv/)\n- [Best Practices Guide](https://www.haproxy.com/documentation/hapee/latest/configuration/best-practices/)\n- [Performance Tuning](https://www.haproxy.com/blog/haproxy-performance-tuning/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"haproxy-installation-guide\" class=\"mobile-header\">HAProxy Installation Guide</h1>\n<p class=\"mobile-paragraph\">High-performance TCP/HTTP load balancer and reverse proxy. Essential for distributing traffic across multiple backend servers.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">Multiple backend servers to load balance (optional for testing)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install HAProxy\nsudo apt install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install HAProxy\nsudo yum install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"from-source-latest-version\" class=\"mobile-header\">From Source (Latest Version)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install build dependencies\nsudo apt install -y build-essential libssl-dev zlib1g-dev libpcre3-dev\n\n# Download and compile HAProxy\ncd /tmp\nwget https://www.haproxy.org/download/2.8/src/haproxy-2.8.0.tar.gz\ntar xzf haproxy-2.8.0.tar.gz\ncd haproxy-2.8.0\n\n# Compile with SSL support\nmake TARGET=linux-glibc USE_OPENSSL=1 USE_ZLIB=1 USE_PCRE=1\nsudo make install\n\n# Create systemd service\nsudo tee /etc/systemd/system/haproxy.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=HAProxy Load Balancer\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid\nExecReload=/bin/kill -USR2 \\$MAINPID\nKillMode=mixed\nRestart=always\nType=notify\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-load-balancer-configuration\" class=\"mobile-header\">Basic Load Balancer Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup original configuration\nsudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup\n\n# Create basic load balancer configuration\nsudo tee /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\n# Frontend configuration\nfrontend web_frontend\n    bind *:80\n    option httpclose\n    option forwardfor\n    default_backend web_servers\n\n# Backend configuration\nbackend web_servers\n    balance roundrobin\n    option httpchk GET /health\n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check backup\n\n# Statistics page\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if TRUE\nEOF\n\n# Test configuration\nsudo haproxy -c -f /etc/haproxy/haproxy.cfg\n\n# Restart HAProxy\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssl-termination-configuration\" class=\"mobile-header\">SSL Termination Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create SSL certificate (self-signed for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/haproxy/server.key \\\n    -out /etc/haproxy/server.crt \\\n    -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=example.com&quot;\n\n# Combine certificate and key\nsudo cat /etc/haproxy/server.crt /etc/haproxy/server.key | sudo tee /etc/haproxy/server.pem\n\n# Update HAProxy configuration for SSL\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\n# HTTPS Frontend\nfrontend https_frontend\n    bind *:443 ssl crt /etc/haproxy/server.pem\n    redirect scheme https unless { ssl_fc }\n    default_backend web_servers\n\n# HTTP to HTTPS redirect\nfrontend http_frontend\n    bind *:80\n    redirect scheme https code 301\nEOF\n\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-load-balancing-configuration\" class=\"mobile-header\">Advanced Load Balancing Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Advanced configuration with multiple backends\nsudo tee /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n    \n    # SSL configuration\n    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n    ssl-default-bind-options no-sslv3\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor\n    option http-server-close\n    timeout connect 5s\n    timeout client 1m\n    timeout server 1m\n    timeout http-keep-alive 10s\n    timeout check 10s\n    maxconn 3000\n\n# Frontend for web traffic\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/certs/\n    \n    # ACLs for routing\n    acl is_api path_beg /api/\n    acl is_admin path_beg /admin/\n    acl is_static path_beg /static/ /css/ /js/ /images/\n    \n    # Routing rules\n    use_backend api_servers if is_api\n    use_backend admin_servers if is_admin\n    use_backend static_servers if is_static\n    default_backend web_servers\n\n# Web servers backend\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health\n    http-check expect status 200\n    server web1 192.168.1.10:8080 check weight 100\n    server web2 192.168.1.11:8080 check weight 100\n    server web3 192.168.1.12:8080 check weight 50 backup\n\n# API servers backend\nbackend api_servers\n    balance roundrobin\n    option httpchk GET /api/health\n    http-check expect string &quot;OK&quot;\n    server api1 192.168.1.20:3000 check\n    server api2 192.168.1.21:3000 check\n\n# Admin backend (restricted)\nbackend admin_servers\n    balance source\n    option httpchk GET /admin/health\n    server admin1 192.168.1.30:9000 check\n\n# Static content backend\nbackend static_servers\n    balance roundrobin\n    option httpchk GET /static/health.txt\n    server static1 192.168.1.40:8080 check\n    server static2 192.168.1.41:8080 check\n\n# Stats interface\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /\n    stats refresh 30s\n    stats admin if TRUE\n    stats auth admin:secure_password\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-load-balancing-tcp-mode\" class=\"mobile-header\">Database Load Balancing (TCP Mode)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/PostgreSQL load balancing\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\n# MySQL Frontend\nlisten mysql_frontend\n    bind *:3306\n    mode tcp\n    option mysql-check user haproxy_check\n    balance leastconn\n    server mysql1 192.168.1.50:3306 check\n    server mysql2 192.168.1.51:3306 check backup\n\n# PostgreSQL Frontend  \nlisten postgresql_frontend\n    bind *:5432\n    mode tcp\n    option pgsql-check user haproxy_check\n    balance roundrobin\n    server postgres1 192.168.1.60:5432 check\n    server postgres2 192.168.1.61:5432 check\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw allow 8404/tcp  # Stats interface\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --permanent --add-port=8404/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check HAProxy status\nsudo systemctl status haproxy\n\n# Test configuration syntax\nsudo haproxy -c -f /etc/haproxy/haproxy.cfg\n\n# Check listening ports\nsudo netstat -tulpn | grep haproxy\n\n# Test load balancing\nfor i in {1..10}; do curl -s http://localhost/ | grep server; done\n\n# View statistics\ncurl http://localhost:8404/stats\n\n# Check backend server health\necho &quot;show stat&quot; | sudo socat stdio /run/haproxy/admin.sock\n\n# View real-time logs\nsudo journalctl -u haproxy -f</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-management\" class=\"mobile-header\">Monitoring and Management</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># HAProxy runtime commands via socket\necho &quot;help&quot; | sudo socat stdio /run/haproxy/admin.sock\n\n# Disable/Enable server\necho &quot;disable server web_servers/web1&quot; | sudo socat stdio /run/haproxy/admin.sock\necho &quot;enable server web_servers/web1&quot; | sudo socat stdio /run/haproxy/admin.sock\n\n# Check server weights\necho &quot;get weight web_servers/web1&quot; | sudo socat stdio /run/haproxy/admin.sock\n\n# Set server weight\necho &quot;set weight web_servers/web1 50&quot; | sudo socat stdio /run/haproxy/admin.sock\n\n# Show current sessions\necho &quot;show sess&quot; | sudo socat stdio /run/haproxy/admin.sock</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-tuning\" class=\"mobile-header\">Performance Tuning</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># System-level optimizations\necho &quot;net.ipv4.ip_local_port_range = 1024 65535&quot; | sudo tee -a /etc/sysctl.conf\necho &quot;net.core.somaxconn = 65535&quot; | sudo tee -a /etc/sysctl.conf\necho &quot;net.core.netdev_max_backlog = 30000&quot; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# HAProxy performance configuration\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\nglobal\n    # Performance tuning\n    maxconn 40000\n    nbproc 1\n    nbthread 4\n    cpu-map auto:1/1-4 0-3\n    \ndefaults\n    # Connection limits\n    maxconn 8000\n    \n    # Timeouts\n    timeout connect 3s\n    timeout client 25s\n    timeout server 25s\n    timeout tunnel 3600s\n    timeout http-keep-alive 1s\n    timeout http-request 15s\n    timeout queue 30s\n    timeout tarpit 60s\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/plain text/css text/javascript application/javascript\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"health-checks\" class=\"mobile-header\">Health Checks</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># HTTP health check examples\nbackend web_servers\n    option httpchk GET /health\n    http-check expect status 200\n    http-check expect string &quot;OK&quot;\n    \n    # Advanced health check\n    option httpchk GET /health HTTP/1.1\\r\\nHost:\\ example.com\n    http-check expect rstatus ^2[0-9][0-9]\n    \n    server web1 192.168.1.10:8080 check inter 2000 rise 2 fall 3\n    server web2 192.168.1.11:8080 check inter 2000 rise 2 fall 3\n\n# TCP health check\nbackend database_servers\n    mode tcp\n    option tcp-check\n    tcp-check connect\n    tcp-check send-binary 0a  # MySQL ping\n    tcp-check expect binary 0a\n    \n    server db1 192.168.1.20:3306 check\n    server db2 192.168.1.21:3306 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check HAProxy process\nps aux | grep haproxy\n\n# Verify configuration file\nsudo haproxy -c -V -f /etc/haproxy/haproxy.cfg\n\n# Check socket permissions\nls -la /run/haproxy/admin.sock\n\n# Test backend connectivity\nfor server in 192.168.1.10 192.168.1.11; do\n    nc -zv $server 8080\ndone\n\n# Monitor connections\nss -tuln | grep :80\n\n# Debug mode (don&#039;t run in production)\nsudo haproxy -f /etc/haproxy/haproxy.cfg -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.haproxy.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://cbonte.github.io/haproxy-dconv/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HAProxy Configuration Manual</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.haproxy.com/documentation/hapee/latest/configuration/best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.haproxy.com/blog/haproxy-performance-tuning/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"7 min","wordCount":1247,"lastBuilt":"2025-09-14T01:15:33.603Z"},{"name":"home-assistant","displayName":"Home Assistant","slug":"home-assistant","description":"Repo for home-assistant","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/home-assistant","updatedAt":"2025-09-08T03:08:39Z","createdAt":"2023-08-28T03:48:06Z","readmeRaw":"# Home-Assistant on CentOS 7\n\n```bash\n# Optionally add user\n#adduser --system --shell=/bin/bash --home=/var/lib/homeassistant  homeassistant\n\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/rpm-packages.txt -O /tmp/hass-rpms.txt\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/requirements-el7.txt -O /tmp/hass-pips.txt\n\nyum install -y $(cat /tmp/hass-rpms.txt)\n\n#Optional switch to user and clone repo\n#su - homeassistant\n#git clone https://github.com/casjay-devices/home-assistant /var/lib/homeassistant/.homeassistant\n\ncd /var/lib/homeassistant && python3 -m venv . && source ./bin/activate\n\n/var/lib/homeassistant/bin/python3 -m pip install --upgrade pip\n/var/lib/homeassistant/bin/python3 -m pip install wheel\n/var/lib/homeassistant/bin/python3 -m pip install python-openzwave\n/var/lib/homeassistant/bin/python3 -m pip install homeassistant \n/var/lib/homeassistant/bin/python3 -m pip install -r /tmp/hass-pips.txt\nsystemctl daemon-reload && systemctl enable hass.service\n\necho 'SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"0658\", ATTRS{idProduct}==\"0200\", SYMLINK+=\"zwave\"' >> /etc/udev/rules.d/99-usb-serial.rules\necho 'SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"067b\", ATTRS{idProduct}==\"2303\", SYMLINK+=\"gps\"' >> /etc/udev/rules.d/99-usb-serial.rules\n\ndeactivate\n```\n","readmeHtml":"<h1 id=\"home-assistant-on-centos-7\" class=\"mobile-header\">Home-Assistant on CentOS 7</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optionally add user\n#adduser --system --shell=/bin/bash --home=/var/lib/homeassistant  homeassistant\n\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/rpm-packages.txt -O /tmp/hass-rpms.txt\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/requirements-el7.txt -O /tmp/hass-pips.txt\n\nyum install -y $(cat /tmp/hass-rpms.txt)\n\n#Optional switch to user and clone repo\n#su - homeassistant\n#git clone https://github.com/casjay-devices/home-assistant /var/lib/homeassistant/.homeassistant\n\ncd /var/lib/homeassistant &amp;&amp; python3 -m venv . &amp;&amp; source ./bin/activate\n\n/var/lib/homeassistant/bin/python3 -m pip install --upgrade pip\n/var/lib/homeassistant/bin/python3 -m pip install wheel\n/var/lib/homeassistant/bin/python3 -m pip install python-openzwave\n/var/lib/homeassistant/bin/python3 -m pip install homeassistant \n/var/lib/homeassistant/bin/python3 -m pip install -r /tmp/hass-pips.txt\nsystemctl daemon-reload &amp;&amp; systemctl enable hass.service\n\necho &#039;SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;0658&quot;, ATTRS{idProduct}==&quot;0200&quot;, SYMLINK+=&quot;zwave&quot;&#039; &gt;&gt; /etc/udev/rules.d/99-usb-serial.rules\necho &#039;SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;067b&quot;, ATTRS{idProduct}==&quot;2303&quot;, SYMLINK+=&quot;gps&quot;&#039; &gt;&gt; /etc/udev/rules.d/99-usb-serial.rules\n\ndeactivate</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":102,"lastBuilt":"2025-09-14T01:15:33.478Z"},{"name":"influxdb","displayName":"Influxdb","slug":"influxdb","description":"Repo for influxdb","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/influxdb","updatedAt":"2025-09-08T03:08:55Z","createdAt":"2025-09-08T03:08:45Z","readmeRaw":"## 👋 Welcome to influxdb 🚀  \n\ninfluxdb README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-influxdb\" class=\"mobile-header\">👋 Welcome to influxdb 🚀  </h2>\n<p class=\"mobile-paragraph\">influxdb README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:33.365Z"},{"name":"jellyfin","displayName":"Jellyfin","slug":"jellyfin","description":"Repo for jellyfin","category":"media","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jellyfin","updatedAt":"2025-09-08T03:09:08Z","createdAt":"2025-09-08T03:08:57Z","readmeRaw":"## 👋 Welcome to jellyfin 🚀  \n\njellyfin README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-jellyfin\" class=\"mobile-header\">👋 Welcome to jellyfin 🚀  </h2>\n<p class=\"mobile-paragraph\">jellyfin README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:33.219Z"},{"name":"jenkins","displayName":"Jenkins","slug":"jenkins","description":"Repo for jenkins","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jenkins","updatedAt":"2025-09-08T03:09:13Z","createdAt":"2023-08-28T03:48:15Z","readmeRaw":"# Jenkins Installation Guide\n\nOpen-source automation server for building, testing, and deploying applications. Essential tool for CI/CD pipelines.\n\n## Prerequisites\n\n- RHEL/CentOS 7+ or compatible Linux distribution\n- Java 8 or higher\n- 2GB RAM minimum, 4GB recommended\n\n## Installation\n\n```bash\n# Add Jenkins repository\nwget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n\n# Install Java and Jenkins\nyum install -y java-1.8.0-openjdk jenkins\n\n# Enable and start Jenkins\nsystemctl enable --now jenkins\n```\n\n## Configuration\n\n```bash\n# Allow through firewall (if enabled)\nfirewall-cmd --permanent --add-port=8080/tcp\nfirewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n## Verification\n\n```bash\n# Check Jenkins is running\nsystemctl status jenkins\ncurl http://localhost:8080\n\n# View logs if needed\njournalctl -u jenkins -f\n```\n\n## Usage\n\n1. Open browser to `http://your-server-ip:8080`\n2. Enter initial admin password from above\n3. Install recommended plugins or select custom plugins\n4. Create first admin user\n5. Start creating jobs and pipelines\n\n## Additional Resources\n\n- [Official Documentation](https://www.jenkins.io/doc/)\n- [Jenkins GitHub](https://github.com/jenkinsci/jenkins)\n- [Plugin Index](https://plugins.jenkins.io/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"jenkins-installation-guide\" class=\"mobile-header\">Jenkins Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source automation server for building, testing, and deploying applications. Essential tool for CI/CD pipelines.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">RHEL/CentOS 7+ or compatible Linux distribution</li>\n<li class=\"mobile-list-item\">Java 8 or higher</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB recommended</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Jenkins repository\nwget -O /etc/yum.repos.d/jenkins.repo http://pkg.jenkins-ci.org/redhat/jenkins.repo\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n\n# Install Java and Jenkins\nyum install -y java-1.8.0-openjdk jenkins\n\n# Enable and start Jenkins\nsystemctl enable --now jenkins</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Allow through firewall (if enabled)\nfirewall-cmd --permanent --add-port=8080/tcp\nfirewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Jenkins is running\nsystemctl status jenkins\ncurl http://localhost:8080\n\n# View logs if needed\njournalctl -u jenkins -f</code></pre>\n      </div>\n    </div>\n<h2 id=\"usage\" class=\"mobile-header\">Usage</h2>\n<p class=\"mobile-paragraph\">1. Open browser to <code class=\"mobile-inline-code\">http://your-server-ip:8080</code></p>\n<p class=\"mobile-paragraph\">2. Enter initial admin password from above</p>\n<p class=\"mobile-paragraph\">3. Install recommended plugins or select custom plugins</p>\n<p class=\"mobile-paragraph\">4. Create first admin user</p>\n<p class=\"mobile-paragraph\">5. Start creating jobs and pipelines</p>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/jenkinsci/jenkins\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins GitHub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://plugins.jenkins.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Plugin Index</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"1 min","wordCount":173,"lastBuilt":"2025-09-14T01:15:33.092Z"},{"name":"jitsi","displayName":"Jitsi","slug":"jitsi","description":"Repo for jitsi","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jitsi","updatedAt":"2025-09-08T03:09:26Z","createdAt":"2025-09-08T03:09:16Z","readmeRaw":"## 👋 Welcome to jitsi 🚀  \n\njitsi README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-jitsi\" class=\"mobile-header\">👋 Welcome to jitsi 🚀  </h2>\n<p class=\"mobile-paragraph\">jitsi README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:32.924Z"},{"name":"jupyter","displayName":"Jupyter","slug":"jupyter","description":"Repo for jupyter","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jupyter","updatedAt":"2025-09-08T03:09:39Z","createdAt":"2025-09-08T03:09:29Z","readmeRaw":"## 👋 Welcome to jupyter 🚀  \n\njupyter README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-jupyter\" class=\"mobile-header\">👋 Welcome to jupyter 🚀  </h2>\n<p class=\"mobile-paragraph\">jupyter README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:32.804Z"},{"name":"k3s","displayName":"K3s","slug":"k3s","description":"Repo for k3s","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/k3s","updatedAt":"2025-09-08T03:09:53Z","createdAt":"2025-09-08T03:09:43Z","readmeRaw":"## 👋 Welcome to k3s 🚀  \n\nk3s README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-k3s\" class=\"mobile-header\">👋 Welcome to k3s 🚀  </h2>\n<p class=\"mobile-paragraph\">k3s README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:32.659Z"},{"name":"keycloak","displayName":"Keycloak","slug":"keycloak","description":"Repo for keycloak","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/keycloak","updatedAt":"2025-09-08T03:10:05Z","createdAt":"2025-09-08T03:09:55Z","readmeRaw":"## 👋 Welcome to keycloak 🚀  \n\nkeycloak README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-keycloak\" class=\"mobile-header\">👋 Welcome to keycloak 🚀  </h2>\n<p class=\"mobile-paragraph\">keycloak README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:32.541Z"},{"name":"kubernetes","displayName":"Kubernetes","slug":"kubernetes","description":"Repo for kubernetes","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/kubernetes","updatedAt":"2025-09-08T03:10:22Z","createdAt":"2025-09-08T03:10:10Z","readmeRaw":"# Kubernetes Installation Guide\n\nContainer orchestration platform for automating deployment, scaling, and management of containerized applications.\n\n## Prerequisites\n\n- Linux system with 2GB+ RAM per node\n- 2 CPUs minimum per node  \n- Network connectivity between nodes\n- Container runtime (Docker/containerd)\n- Disabled swap on all nodes\n\n## Installation Methods\n\n### kubeadm (Recommended)\n\n#### Master Node Setup\n```bash\n# Disable swap\nsudo swapoff -a\nsudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n\n# Install container runtime (containerd)\nsudo apt-get update\nsudo apt-get install -y ca-certificates curl gnupg lsb-release\n\n# Add Docker's official GPG key\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n# Add Docker repository\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install containerd\nsudo apt-get update\nsudo apt-get install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n\n# Install kubeadm, kubelet, kubectl\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl\n\ncurl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg\n\necho \"deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\nsudo apt-mark hold kubelet kubeadm kubectl\n\n# Configure system settings\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\nsudo sysctl --system\n\n# Initialize cluster\nsudo kubeadm init --pod-network-cidr=10.244.0.0/16\n\n# Configure kubectl for current user\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# Install CNI plugin (Flannel)\nkubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml\n```\n\n#### Worker Node Setup\n```bash\n# Follow the same steps as master node up to kubeadm init\n# Then join the cluster using the token from master node\n\n# Get join command from master node\nkubeadm token create --print-join-command\n\n# On worker nodes, run the join command (example):\nsudo kubeadm join 192.168.1.100:6443 --token abc123.def456ghi789 --discovery-token-ca-cert-hash sha256:1234567890abcdef...\n```\n\n### k3s (Lightweight Alternative)\n```bash\n# Install k3s on master node\ncurl -sfL https://get.k3s.io | sh -\n\n# Get node token\nsudo cat /var/lib/rancher/k3s/server/node-token\n\n# Install on worker nodes\ncurl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\nsudo chown $(id -u):$(id -g) ~/.kube/config\nexport KUBECONFIG=~/.kube/config\n```\n\n### Minikube (Development)\n```bash\n# Install minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Start minikube cluster\nminikube start --driver=docker --cpus=2 --memory=4g\n\n# Enable addons\nminikube addons enable dashboard\nminikube addons enable ingress\nminikube addons enable metrics-server\n\n# Get cluster info\nkubectl cluster-info\n```\n\n## Configuration\n\n### Cluster Administration\n```bash\n# Check cluster status\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods --all-namespaces\n\n# View cluster configuration\nkubectl config view\nkubectl config get-contexts\n\n# Create namespace\nkubectl create namespace production\n\n# Set default namespace\nkubectl config set-context --current --namespace=production\n\n# Apply resource quotas\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-quota\n  namespace: production\nspec:\n  hard:\n    requests.cpu: \"4\"\n    requests.memory: 8Gi\n    limits.cpu: \"8\"\n    limits.memory: 16Gi\n    persistentvolumeclaims: \"10\"\nEOF\n```\n\n### Network Policies\n```bash\n# Create network policy for isolation\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-all\n  namespace: production\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-same-namespace\n  namespace: production\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: production\n  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          name: production\nEOF\n```\n\n### RBAC Configuration\n```bash\n# Create service account\nkubectl create serviceaccount developer-sa -n production\n\n# Create role\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: production\n  name: developer-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\", \"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\nEOF\n\n# Create role binding\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: developer-binding\n  namespace: production\nsubjects:\n- kind: ServiceAccount\n  name: developer-sa\n  namespace: production\nroleRef:\n  kind: Role\n  name: developer-role\n  apiGroup: rbac.authorization.k8s.io\nEOF\n```\n\n## Application Deployment\n\n### Basic Application Deployment\n```bash\n# Create deployment\ncat <<EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: production\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.20\n        ports:\n        - containerPort: 80\n        resources:\n          requests:\n            cpu: 100m\n            memory: 128Mi\n          limits:\n            cpu: 200m\n            memory: 256Mi\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: production\nspec:\n  selector:\n    app: nginx\n  ports:\n  - port: 80\n    targetPort: 80\n  type: ClusterIP\nEOF\n```\n\n### Ingress Configuration\n```bash\n# Install NGINX Ingress Controller\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml\n\n# Create ingress resource\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nginx-ingress\n  namespace: production\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - example.com\n    secretName: example-com-tls\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nginx-service\n            port:\n              number: 80\nEOF\n```\n\n### Persistent Storage\n```bash\n# Create storage class\ncat <<EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: fast-ssd\nprovisioner: kubernetes.io/gce-pd\nparameters:\n  type: pd-ssd\n  zones: us-central1-a,us-central1-b\nallowVolumeExpansion: true\nvolumeBindingMode: WaitForFirstConsumer\nEOF\n\n# Create persistent volume claim\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: app-data\n  namespace: production\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: fast-ssd\n  resources:\n    requests:\n      storage: 10Gi\nEOF\n\n# Use in deployment\ncat <<EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-with-storage\n  namespace: production\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:latest\n        volumeMounts:\n        - name: data-volume\n          mountPath: /data\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: app-data\nEOF\n```\n\n## Monitoring and Logging\n\n### Install Metrics Server\n```bash\n# Install metrics server\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\n# For development clusters, may need to add --kubelet-insecure-tls\nkubectl patch deployment metrics-server -n kube-system --type='json' -p='[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/args/-\", \"value\": \"--kubelet-insecure-tls\"}]'\n```\n\n### Install Kubernetes Dashboard\n```bash\n# Install dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n# Create service account for dashboard\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\nEOF\n\n# Get token for dashboard access\nkubectl -n kubernetes-dashboard create token admin-user\n\n# Access dashboard\nkubectl proxy\n# Then visit: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\n```\n\n## Backup and Disaster Recovery\n\n### etcd Backup\n```bash\n# Install etcdctl\nETCD_VER=v3.5.9\ncurl -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzf etcd-${ETCD_VER}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VER}-linux-amd64/etcdctl /usr/local/bin/\n\n# Create backup script\nsudo tee /usr/local/bin/etcd-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/etcd\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create etcd snapshot\netcdctl snapshot save ${BACKUP_DIR}/etcd-backup-${DATE}.db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Verify snapshot\netcdctl snapshot status ${BACKUP_DIR}/etcd-backup-${DATE}.db -w table\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"etcd-backup-*.db\" -type f -mtime +7 -delete\n\necho \"Backup completed: etcd-backup-${DATE}.db\"\nEOF\n\nsudo chmod +x /usr/local/bin/etcd-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/etcd-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Verification\n\n```bash\n# Check cluster health\nkubectl get nodes -o wide\nkubectl get pods --all-namespaces\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Check system pods\nkubectl get pods -n kube-system\n\n# Check cluster info\nkubectl cluster-info dump\n\n# Test DNS resolution\nkubectl run test-dns --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default\n\n# Test pod-to-pod communication\nkubectl run test-pod1 --image=nginx --port=80\nkubectl expose pod test-pod1 --port=80\nkubectl run test-pod2 --image=busybox --rm -it --restart=Never -- wget -qO- test-pod1\n\n# Check resource usage\nkubectl describe node\nkubectl describe pod <pod-name>\n\n# View logs\nkubectl logs -n kube-system -l component=kube-apiserver\nkubectl logs -n kube-system -l component=etcd\n```\n\n## Troubleshooting\n\n```bash\n# Check node status\nkubectl describe node <node-name>\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Debug pods\nkubectl describe pod <pod-name>\nkubectl logs <pod-name> -c <container-name>\nkubectl exec -it <pod-name> -- /bin/bash\n\n# Check cluster components\nsudo journalctl -u kubelet -f\nsudo journalctl -u containerd -f\n\n# Debug networking\nkubectl run debug-pod --image=nicolaka/netshoot --rm -it --restart=Never\n\n# Check certificates\nkubeadm certs check-expiration\nopenssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout\n\n# Reset cluster (if needed)\nsudo kubeadm reset\nsudo rm -rf /etc/cni/net.d\nsudo rm -rf $HOME/.kube/config\n```\n\n## Additional Resources\n\n- [Official Documentation](https://kubernetes.io/docs/)\n- [kubectl Reference](https://kubernetes.io/docs/reference/kubectl/)\n- [Kubernetes Best Practices](https://kubernetes.io/docs/concepts/configuration/overview/)\n- [Troubleshooting Guide](https://kubernetes.io/docs/tasks/debug-application-cluster/)\n- [Security Best Practices](https://kubernetes.io/docs/concepts/security/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"kubernetes-installation-guide\" class=\"mobile-header\">Kubernetes Installation Guide</h1>\n<p class=\"mobile-paragraph\">Container orchestration platform for automating deployment, scaling, and management of containerized applications.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system with 2GB+ RAM per node</li>\n<li class=\"mobile-list-item\">2 CPUs minimum per node  </li>\n<li class=\"mobile-list-item\">Network connectivity between nodes</li>\n<li class=\"mobile-list-item\">Container runtime (Docker/containerd)</li>\n<li class=\"mobile-list-item\">Disabled swap on all nodes</li>\n<h2 id=\"installation-methods\" class=\"mobile-header\">Installation Methods</h2>\n<h3 id=\"kubeadm-recommended\" class=\"mobile-header\">kubeadm (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Master Node Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Disable swap\nsudo swapoff -a\nsudo sed -i &#039;/ swap / s/^\\(.*\\)$/#\\1/g&#039; /etc/fstab\n\n# Install container runtime (containerd)\nsudo apt-get update\nsudo apt-get install -y ca-certificates curl gnupg lsb-release\n\n# Add Docker&#039;s official GPG key\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n# Add Docker repository\necho &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Install containerd\nsudo apt-get update\nsudo apt-get install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n\n# Install kubeadm, kubelet, kubectl\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl\n\ncurl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg\n\necho &quot;deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main&quot; | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\nsudo apt-mark hold kubelet kubeadm kubectl\n\n# Configure system settings\ncat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\ncat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\nsudo sysctl --system\n\n# Initialize cluster\nsudo kubeadm init --pod-network-cidr=10.244.0.0/16\n\n# Configure kubectl for current user\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# Install CNI plugin (Flannel)\nkubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Worker Node Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Follow the same steps as master node up to kubeadm init\n# Then join the cluster using the token from master node\n\n# Get join command from master node\nkubeadm token create --print-join-command\n\n# On worker nodes, run the join command (example):\nsudo kubeadm join 192.168.1.100:6443 --token abc123.def456ghi789 --discovery-token-ca-cert-hash sha256:1234567890abcdef...</code></pre>\n      </div>\n    </div>\n<h3 id=\"k3s-lightweight-alternative\" class=\"mobile-header\">k3s (Lightweight Alternative)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install k3s on master node\ncurl -sfL https://get.k3s.io | sh -\n\n# Get node token\nsudo cat /var/lib/rancher/k3s/server/node-token\n\n# Install on worker nodes\ncurl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\nsudo chown $(id -u):$(id -g) ~/.kube/config\nexport KUBECONFIG=~/.kube/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"minikube-development\" class=\"mobile-header\">Minikube (Development)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Start minikube cluster\nminikube start --driver=docker --cpus=2 --memory=4g\n\n# Enable addons\nminikube addons enable dashboard\nminikube addons enable ingress\nminikube addons enable metrics-server\n\n# Get cluster info\nkubectl cluster-info</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"cluster-administration\" class=\"mobile-header\">Cluster Administration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check cluster status\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods --all-namespaces\n\n# View cluster configuration\nkubectl config view\nkubectl config get-contexts\n\n# Create namespace\nkubectl create namespace production\n\n# Set default namespace\nkubectl config set-context --current --namespace=production\n\n# Apply resource quotas\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-quota\n  namespace: production\nspec:\n  hard:\n    requests.cpu: &quot;4&quot;\n    requests.memory: 8Gi\n    limits.cpu: &quot;8&quot;\n    limits.memory: 16Gi\n    persistentvolumeclaims: &quot;10&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-policies\" class=\"mobile-header\">Network Policies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create network policy for isolation\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-all\n  namespace: production\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-same-namespace\n  namespace: production\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: production\n  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          name: production\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"rbac-configuration\" class=\"mobile-header\">RBAC Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create service account\nkubectl create serviceaccount developer-sa -n production\n\n# Create role\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: production\n  name: developer-role\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods&quot;, &quot;services&quot;, &quot;configmaps&quot;, &quot;secrets&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]\n- apiGroups: [&quot;apps&quot;]\n  resources: [&quot;deployments&quot;, &quot;replicasets&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]\nEOF\n\n# Create role binding\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: developer-binding\n  namespace: production\nsubjects:\n- kind: ServiceAccount\n  name: developer-sa\n  namespace: production\nroleRef:\n  kind: Role\n  name: developer-role\n  apiGroup: rbac.authorization.k8s.io\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"application-deployment\" class=\"mobile-header\">Application Deployment</h2>\n<h3 id=\"basic-application-deployment\" class=\"mobile-header\">Basic Application Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create deployment\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: production\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.20\n        ports:\n        - containerPort: 80\n        resources:\n          requests:\n            cpu: 100m\n            memory: 128Mi\n          limits:\n            cpu: 200m\n            memory: 256Mi\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: production\nspec:\n  selector:\n    app: nginx\n  ports:\n  - port: 80\n    targetPort: 80\n  type: ClusterIP\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ingress-configuration\" class=\"mobile-header\">Ingress Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX Ingress Controller\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml\n\n# Create ingress resource\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nginx-ingress\n  namespace: production\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: &quot;true&quot;\n    cert-manager.io/cluster-issuer: &quot;letsencrypt-prod&quot;\nspec:\n  tls:\n  - hosts:\n    - example.com\n    secretName: example-com-tls\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nginx-service\n            port:\n              number: 80\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"persistent-storage\" class=\"mobile-header\">Persistent Storage</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create storage class\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: fast-ssd\nprovisioner: kubernetes.io/gce-pd\nparameters:\n  type: pd-ssd\n  zones: us-central1-a,us-central1-b\nallowVolumeExpansion: true\nvolumeBindingMode: WaitForFirstConsumer\nEOF\n\n# Create persistent volume claim\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: app-data\n  namespace: production\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: fast-ssd\n  resources:\n    requests:\n      storage: 10Gi\nEOF\n\n# Use in deployment\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-with-storage\n  namespace: production\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:latest\n        volumeMounts:\n        - name: data-volume\n          mountPath: /data\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: app-data\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-logging\" class=\"mobile-header\">Monitoring and Logging</h2>\n<h3 id=\"install-metrics-server\" class=\"mobile-header\">Install Metrics Server</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install metrics server\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\n# For development clusters, may need to add --kubelet-insecure-tls\nkubectl patch deployment metrics-server -n kube-system --type=&#039;json&#039; -p=&#039;[{&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/args/-&quot;, &quot;value&quot;: &quot;--kubelet-insecure-tls&quot;}]&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"install-kubernetes-dashboard\" class=\"mobile-header\">Install Kubernetes Dashboard</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n# Create service account for dashboard\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\nEOF\n\n# Get token for dashboard access\nkubectl -n kubernetes-dashboard create token admin-user\n\n# Access dashboard\nkubectl proxy\n# Then visit: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"etcd-backup\" class=\"mobile-header\">etcd Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install etcdctl\nETCD_VER=v3.5.9\ncurl -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzf etcd-${ETCD_VER}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VER}-linux-amd64/etcdctl /usr/local/bin/\n\n# Create backup script\nsudo tee /usr/local/bin/etcd-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/etcd&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create etcd snapshot\netcdctl snapshot save ${BACKUP_DIR}/etcd-backup-${DATE}.db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Verify snapshot\netcdctl snapshot status ${BACKUP_DIR}/etcd-backup-${DATE}.db -w table\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;etcd-backup-*.db&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: etcd-backup-${DATE}.db&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/etcd-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/etcd-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check cluster health\nkubectl get nodes -o wide\nkubectl get pods --all-namespaces\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Check system pods\nkubectl get pods -n kube-system\n\n# Check cluster info\nkubectl cluster-info dump\n\n# Test DNS resolution\nkubectl run test-dns --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default\n\n# Test pod-to-pod communication\nkubectl run test-pod1 --image=nginx --port=80\nkubectl expose pod test-pod1 --port=80\nkubectl run test-pod2 --image=busybox --rm -it --restart=Never -- wget -qO- test-pod1\n\n# Check resource usage\nkubectl describe node\nkubectl describe pod &lt;pod-name&gt;\n\n# View logs\nkubectl logs -n kube-system -l component=kube-apiserver\nkubectl logs -n kube-system -l component=etcd</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check node status\nkubectl describe node &lt;node-name&gt;\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Debug pods\nkubectl describe pod &lt;pod-name&gt;\nkubectl logs &lt;pod-name&gt; -c &lt;container-name&gt;\nkubectl exec -it &lt;pod-name&gt; -- /bin/bash\n\n# Check cluster components\nsudo journalctl -u kubelet -f\nsudo journalctl -u containerd -f\n\n# Debug networking\nkubectl run debug-pod --image=nicolaka/netshoot --rm -it --restart=Never\n\n# Check certificates\nkubeadm certs check-expiration\nopenssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout\n\n# Reset cluster (if needed)\nsudo kubeadm reset\nsudo rm -rf /etc/cni/net.d\nsudo rm -rf $HOME/.kube/config</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/reference/kubectl/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">kubectl Reference</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/concepts/configuration/overview/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Kubernetes Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/tasks/debug-application-cluster/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/concepts/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"8 min","wordCount":1445,"lastBuilt":"2025-09-14T01:15:32.422Z"},{"name":"libvirt","displayName":"Libvirt","slug":"libvirt","description":"Repo for libvirt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/libvirt","updatedAt":"2025-09-08T03:10:30Z","createdAt":"2023-08-28T03:48:25Z","readmeRaw":"# libvirt setup\n\n## [Archlinux](./ArchLinux.md)  \n  \n","readmeHtml":"<h1 id=\"libvirt-setup\" class=\"mobile-header\">libvirt setup</h1>\n<h2 id=\"archlinuxarchlinuxmd\" class=\"mobile-header\">[Archlinux](./ArchLinux.md)  </h2>","readTime":"1 min","wordCount":6,"lastBuilt":"2025-09-14T01:15:32.281Z"},{"name":"mastodon","displayName":"Mastodon","slug":"mastodon","description":"Repo for mastodon","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mastodon","updatedAt":"2025-09-08T03:10:44Z","createdAt":"2023-08-28T03:48:35Z","readmeRaw":"## Mastodon Install guide\n\n```shell\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | bash -  \nwget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo  \nrpm -Uvh https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm  \n  \nwget https://github.com/CasjaysDev/packages/raw/main/rhel/mastodon.txt -O /tmp/mastodon.txt  \nyum install -y $(cat /tmp/mastodon.txt)  \n  \n/usr/pgsql-9.6/bin/postgresql96-setup initdb  \n  \nsystemctl start postgresql-9.6 redis  \nsystemctl enable postgresql-9.6 redis  \n  \nvim /var/lib/pgsql/9.6/data/pg_hba.conf  \n  \n# TYPE  DATABASE        USER            ADDRESS                 METHOD  \n  \n# \"local\" is for Unix domain socket connections only  \nlocal   all             all                                     trust  \n# IPv4 local connections:  \nhost    all             all             127.0.0.1/32            md5  \n# IPv6 local connections:  \nhost    all             all             ::1/128                 md5  \n  \nadduser mastodon  \nsu - mastodon  \ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB  \ncurl -sSL https://get.rvm.io | bash -s stable  \nsource /home/mastodon/.rvm/scripts/rvm  \nrvm install 2.5.1  \n  \ngem install bundler  \ncd ~  \ngit clone https://github.com/tootsuite/mastodon.git app  \ncd ~/app  \ngit checkout $(git describe --tags `git rev-list --tags --max-count=1`)  \nbundle config build.pg --with-pg-config=/usr/pgsql-9.6/bin/pg_config  \nbundle install --deployment --without development test  \nexit  \n  \npasswd postgres  \nsu - postgres -c psql  \nCREATE USER mastodon CREATEDB;  \nALTER USER mastodon WITH ENCRYPTED password 'YOURSECUREPASSWORD' CREATEDB;  \n\\q  \n  \nsu - mastodon  \ncd ~/app  \nRAILS_ENV=production bundle exec rake mastodon:setup  \n  \nsu -  \ngit clone https://github.com/casjay-base/howtos /tmp/howtos\ncp -Rfv /tmp/howtos/mastodon/{etc,usr}* /  \n  \nsystemctl daemon-reload  \nsystemctl enable mastodon-web mastodon-queue mastodon-api  \nsystemctl start mastodon-web mastodon-queue mastodon-api  \nsystemctl status mastodon-web mastodon-queue mastodon-api  \n```  \n","readmeHtml":"<h2 id=\"mastodon-install-guide\" class=\"mobile-header\">Mastodon Install guide</h2>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -  \nwget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo  \nrpm -Uvh https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm  \n  \nwget https://github.com/CasjaysDev/packages/raw/main/rhel/mastodon.txt -O /tmp/mastodon.txt  \nyum install -y $(cat /tmp/mastodon.txt)  \n  \n/usr/pgsql-9.6/bin/postgresql96-setup initdb  \n  \nsystemctl start postgresql-9.6 redis  \nsystemctl enable postgresql-9.6 redis  \n  \nvim /var/lib/pgsql/9.6/data/pg_hba.conf  \n  \n# TYPE  DATABASE        USER            ADDRESS                 METHOD  \n  \n# &quot;local&quot; is for Unix domain socket connections only  \nlocal   all             all                                     trust  \n# IPv4 local connections:  \nhost    all             all             127.0.0.1/32            md5  \n# IPv6 local connections:  \nhost    all             all             ::1/128                 md5  \n  \nadduser mastodon  \nsu - mastodon  \ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB  \ncurl -sSL https://get.rvm.io | bash -s stable  \nsource /home/mastodon/.rvm/scripts/rvm  \nrvm install 2.5.1  \n  \ngem install bundler  \ncd ~  \ngit clone https://github.com/tootsuite/mastodon.git app  \ncd ~/app  \ngit checkout $(git describe --tags `git rev-list --tags --max-count=1`)  \nbundle config build.pg --with-pg-config=/usr/pgsql-9.6/bin/pg_config  \nbundle install --deployment --without development test  \nexit  \n  \npasswd postgres  \nsu - postgres -c psql  \nCREATE USER mastodon CREATEDB;  \nALTER USER mastodon WITH ENCRYPTED password &#039;YOURSECUREPASSWORD&#039; CREATEDB;  \n\\q  \n  \nsu - mastodon  \ncd ~/app  \nRAILS_ENV=production bundle exec rake mastodon:setup  \n  \nsu -  \ngit clone https://github.com/casjay-base/howtos /tmp/howtos\ncp -Rfv /tmp/howtos/mastodon/{etc,usr}* /  \n  \nsystemctl daemon-reload  \nsystemctl enable mastodon-web mastodon-queue mastodon-api  \nsystemctl start mastodon-web mastodon-queue mastodon-api  \nsystemctl status mastodon-web mastodon-queue mastodon-api  </code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":190,"lastBuilt":"2025-09-14T01:15:32.096Z"},{"name":"mattermost","displayName":"Mattermost","slug":"mattermost","description":"Repo for mattermost","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mattermost","updatedAt":"2025-09-08T03:10:50Z","createdAt":"2023-08-28T03:48:46Z","readmeRaw":"# Mattermost Installation Guide\n\nSelf-hosted team communication platform with features like team messaging, file sharing, and integrations. An open-source alternative to Slack.\n\n## Prerequisites\n\n- 64-bit Linux system (RHEL 7, CentOS 7, Oracle Linux 7, or Scientific Linux 7)\n- Database server (MySQL 5.7+ or PostgreSQL 9.4+)\n- NGINX proxy server (recommended for production)\n- 4GB RAM minimum, 8GB recommended\n\n## Quick Installation\n\n```bash\n# Download latest Mattermost server\nwget https://releases.mattermost.com/X.X.X/mattermost-X.X.X-linux-amd64.tar.gz\ntar -xvzf mattermost-*.tar.gz\nsudo mv mattermost /opt\n\n# Create storage directory\nsudo mkdir /opt/mattermost/data\n\n# Create system user\nsudo useradd --system --user-group mattermost\nsudo chown -R mattermost:mattermost /opt/mattermost\nsudo chmod -R g+w /opt/mattermost\n```\n\n## Database Setup\n\n### PostgreSQL (Recommended)\n```bash\n# Install PostgreSQL\nsudo yum install postgresql94-server postgresql94-contrib\nsudo /usr/pgsql-9.4/bin/postgresql94-setup initdb\nsudo systemctl enable --now postgresql-9.4\n\n# Create database and user\nsudo -u postgres psql\npostgres=# CREATE DATABASE mattermost;\npostgres=# CREATE USER mmuser WITH PASSWORD 'secure_password';\npostgres=# GRANT ALL PRIVILEGES ON DATABASE mattermost to mmuser;\npostgres=# \\q\n```\n\n### MySQL Alternative\n```bash\n# Install MySQL\nwget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm\nsudo yum localinstall mysql57-community-release-el7-9.noarch.rpm\nsudo yum install mysql-community-server\nsudo systemctl enable --now mysqld\n\n# Configure database\nmysql -u root -p\nmysql> CREATE DATABASE mattermost;\nmysql> CREATE USER 'mmuser'@'%' IDENTIFIED BY 'secure_password';\nmysql> GRANT ALL PRIVILEGES ON mattermost.* TO 'mmuser'@'%';\n```\n\n## Configuration\n\n```bash\n# Configure database connection in /opt/mattermost/config/config.json\n# For PostgreSQL:\n\"DriverName\": \"postgres\",\n\"DataSource\": \"postgres://mmuser:secure_password@localhost:5432/mattermost?sslmode=disable\"\n\n# For MySQL:\n\"DriverName\": \"mysql\",\n\"DataSource\": \"mmuser:secure_password@tcp(localhost:3306)/mattermost?charset=utf8mb4,utf8\"\n```\n\n## System Service Setup\n\n```bash\n# Create systemd service\nsudo tee /etc/systemd/system/mattermost.service > /dev/null <<EOF\n[Unit]\nDescription=Mattermost\nAfter=network.target postgresql-9.4.service\n\n[Service]\nType=notify\nWorkingDirectory=/opt/mattermost\nUser=mattermost\nExecStart=/opt/mattermost/bin/mattermost\nPIDFile=/var/spool/mattermost/pid/master.pid\nTimeoutStartSec=3600\nLimitNOFILE=49152\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now mattermost\n```\n\n## NGINX Proxy Setup (Production)\n\n```bash\n# Install NGINX\nsudo yum install nginx\nsudo systemctl enable --now nginx\n\n# Configure proxy\nsudo tee /etc/nginx/conf.d/mattermost.conf > /dev/null <<'EOF'\nupstream backend {\n   server 127.0.0.1:8065;\n   keepalive 32;\n}\n\nserver {\n   listen 80;\n   server_name your-domain.com;\n   \n   location / {\n       proxy_pass http://backend;\n       proxy_set_header Host $http_host;\n       proxy_set_header X-Real-IP $remote_addr;\n       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n       proxy_set_header X-Forwarded-Proto $scheme;\n   }\n   \n   location ~ /api/v[0-9]+/(users/)?websocket$ {\n       proxy_pass http://backend;\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection \"upgrade\";\n   }\n}\nEOF\n\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n## Verification\n\n```bash\n# Test Mattermost is running\ncurl http://localhost:8065\nsudo systemctl status mattermost\n\n# Check logs if needed\nsudo journalctl -u mattermost -f\n```\n\n## Usage\n\n1. Open browser to `http://your-server-ip:8065` (or your domain if using NGINX)\n2. Create your admin account (first user becomes system admin)\n3. Configure team settings and invite users\n4. Set up integrations and customize as needed\n\n## Additional Resources\n\n- [Official Documentation](https://docs.mattermost.com/)\n- [Mattermost GitHub](https://github.com/mattermost/mattermost-server)\n- [Troubleshooting Guide](https://docs.mattermost.com/install/troubleshooting.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"mattermost-installation-guide\" class=\"mobile-header\">Mattermost Installation Guide</h1>\n<p class=\"mobile-paragraph\">Self-hosted team communication platform with features like team messaging, file sharing, and integrations. An open-source alternative to Slack.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">64-bit Linux system (RHEL 7, CentOS 7, Oracle Linux 7, or Scientific Linux 7)</li>\n<li class=\"mobile-list-item\">Database server (MySQL 5.7+ or PostgreSQL 9.4+)</li>\n<li class=\"mobile-list-item\">NGINX proxy server (recommended for production)</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB recommended</li>\n<h2 id=\"quick-installation\" class=\"mobile-header\">Quick Installation</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest Mattermost server\nwget https://releases.mattermost.com/X.X.X/mattermost-X.X.X-linux-amd64.tar.gz\ntar -xvzf mattermost-*.tar.gz\nsudo mv mattermost /opt\n\n# Create storage directory\nsudo mkdir /opt/mattermost/data\n\n# Create system user\nsudo useradd --system --user-group mattermost\nsudo chown -R mattermost:mattermost /opt/mattermost\nsudo chmod -R g+w /opt/mattermost</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-recommended\" class=\"mobile-header\">PostgreSQL (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL\nsudo yum install postgresql94-server postgresql94-contrib\nsudo /usr/pgsql-9.4/bin/postgresql94-setup initdb\nsudo systemctl enable --now postgresql-9.4\n\n# Create database and user\nsudo -u postgres psql\npostgres=# CREATE DATABASE mattermost;\npostgres=# CREATE USER mmuser WITH PASSWORD &#039;secure_password&#039;;\npostgres=# GRANT ALL PRIVILEGES ON DATABASE mattermost to mmuser;\npostgres=# \\q</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-alternative\" class=\"mobile-header\">MySQL Alternative</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MySQL\nwget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm\nsudo yum localinstall mysql57-community-release-el7-9.noarch.rpm\nsudo yum install mysql-community-server\nsudo systemctl enable --now mysqld\n\n# Configure database\nmysql -u root -p\nmysql&gt; CREATE DATABASE mattermost;\nmysql&gt; CREATE USER &#039;mmuser&#039;@&#039;%&#039; IDENTIFIED BY &#039;secure_password&#039;;\nmysql&gt; GRANT ALL PRIVILEGES ON mattermost.* TO &#039;mmuser&#039;@&#039;%&#039;;</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure database connection in /opt/mattermost/config/config.json\n# For PostgreSQL:\n&quot;DriverName&quot;: &quot;postgres&quot;,\n&quot;DataSource&quot;: &quot;postgres://mmuser:secure_password@localhost:5432/mattermost?sslmode=disable&quot;\n\n# For MySQL:\n&quot;DriverName&quot;: &quot;mysql&quot;,\n&quot;DataSource&quot;: &quot;mmuser:secure_password@tcp(localhost:3306)/mattermost?charset=utf8mb4,utf8&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"system-service-setup\" class=\"mobile-header\">System Service Setup</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service\nsudo tee /etc/systemd/system/mattermost.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Mattermost\nAfter=network.target postgresql-9.4.service\n\n[Service]\nType=notify\nWorkingDirectory=/opt/mattermost\nUser=mattermost\nExecStart=/opt/mattermost/bin/mattermost\nPIDFile=/var/spool/mattermost/pid/master.pid\nTimeoutStartSec=3600\nLimitNOFILE=49152\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now mattermost</code></pre>\n      </div>\n    </div>\n<h2 id=\"nginx-proxy-setup-production\" class=\"mobile-header\">NGINX Proxy Setup (Production)</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX\nsudo yum install nginx\nsudo systemctl enable --now nginx\n\n# Configure proxy\nsudo tee /etc/nginx/conf.d/mattermost.conf &gt; /dev/null &lt;&lt;&#039;EOF&#039;\nupstream backend {\n   server 127.0.0.1:8065;\n   keepalive 32;\n}\n\nserver {\n   listen 80;\n   server_name your-domain.com;\n   \n   location / {\n       proxy_pass http://backend;\n       proxy_set_header Host $http_host;\n       proxy_set_header X-Real-IP $remote_addr;\n       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n       proxy_set_header X-Forwarded-Proto $scheme;\n   }\n   \n   location ~ /api/v[0-9]+/(users/)?websocket$ {\n       proxy_pass http://backend;\n       proxy_set_header Upgrade $http_upgrade;\n       proxy_set_header Connection &quot;upgrade&quot;;\n   }\n}\nEOF\n\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test Mattermost is running\ncurl http://localhost:8065\nsudo systemctl status mattermost\n\n# Check logs if needed\nsudo journalctl -u mattermost -f</code></pre>\n      </div>\n    </div>\n<h2 id=\"usage\" class=\"mobile-header\">Usage</h2>\n<p class=\"mobile-paragraph\">1. Open browser to <code class=\"mobile-inline-code\">http://your-server-ip:8065</code> (or your domain if using NGINX)</p>\n<p class=\"mobile-paragraph\">2. Create your admin account (first user becomes system admin)</p>\n<p class=\"mobile-paragraph\">3. Configure team settings and invite users</p>\n<p class=\"mobile-paragraph\">4. Set up integrations and customize as needed</p>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mattermost.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/mattermost/mattermost-server\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Mattermost GitHub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mattermost.com/install/troubleshooting.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"3 min","wordCount":445,"lastBuilt":"2025-09-14T01:15:31.987Z"},{"name":"mce","displayName":"Mce","slug":"mce","description":"Repo for mce","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mce","updatedAt":"2025-09-08T03:10:56Z","createdAt":"2023-08-28T03:48:56Z","readmeRaw":"# CouchPotato/HeadPhones/SickRage/Plex/Emby install\n\n## CentOS/RedHat/SL 7\n\n```bash\nyum groupinstall -y \"Development Tools\"\nyum -y install curl gcc gettext git libmediainfo libzen mediainfo p7zip par2cmdline python-configobj sqlite tar unzip wget unrar\n\nmkdir -p /mnt/media /mnt/torrents\necho \"\n10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\n10.0.254.1:/mnt/Volume_1/torrents        /mnt/torrents                nfs defaults,rw 0 0\n\" >> /etc/fstab\nmount -a\n```\n\n### CouchPotato\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/couchpotato.git /var/lib/couchpotato\ngit clone https://git.casjay.in/systems/couchpotato.git /tmp/couchpotato\n\nmkdir -p /var/lib/couchpotato && cd /var/lib/couchpotato\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/couchpotato/bin/activate\n/var/lib/couchpotato/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/couchpotato/bin/python -m pip install -r /tmp/couchpotato/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/couchpotato/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable couchpotato couchpotato-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/couchpotato/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### HeadPhones\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/headphones.git /var/lib/headphones\ngit clone https://git.casjay.in/systems/headphones.git /tmp/headphones\n\nmkdir -p /var/lib/headphones && cd /var/lib/headphones\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/headphones/bin/activate\n/var/lib/headphones/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/headphones/bin/python -m pip install -r /tmp/headphones/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/headphones/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable headphones headphones-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/headphones/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### SickRage\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/sickrage.git /var/lib/sickrage\ngit clone https://git.casjay.in/systems/sickrage.git /tmp/sickrage\n\nmkdir -p /var/lib/sickrage && cd /var/lib/sickrage\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/sickrage/bin/activate\n/var/lib/sickrage/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/sickrage/bin/python -m pip install -r /tmp/sickrage/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/sickrage/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable sickrage sickrage-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/sickrage/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### Plex\n\n```bash\nyum install ffmpeg\nyum install -y https://downloads.plex.tv/plex-media-server/1.14.0.5470-9d51fdfaa/plexmediaserver-1.14.0.5470-9d51fdfaa.x86_64.rpm \ngo to http://yourserverip:32400/ and configure it\n\nOptional stats for plex [Tautulli]\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\ngit clone https://git.casjay.in/mirrors/Plex-Tautulli.git /var/lib/tautulli\ngit clone https://git.casjay.in/mirrors/plex.git /tmp/plex\ncp -Rf /tmp/plex/{etc,root,var}* /\n```\n\n### Emby\n\n```bash\nyum install ffmpeg\nyum install -y https://github.com/MediaBrowser/Emby.Releases/releases/download/3.5.3.0/emby-server-rpm_3.5.3.0_x86_64.rpm\ngo to http://yourserverip:8096/ and configure it\n\n```\n\n### Airsonic\n\n```bash\nmkdir -p /var/airsonic\nyum install java-1.8.0-openjdk-headless -y\nwget https://github.com/airsonic/airsonic/raw/main/contrib/airsonic.service -O /etc/systemd/system/airsonic.service\nwget https://github.com/airsonic/airsonic/releases/download/v10.1.2/airsonic.war -O /var/airsonic/airsonic.war\nmkdir -p /mnt/media\necho \" 10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\" >> /etc/fstab\nmount -a\n\n```\n","readmeHtml":"<h1 id=\"couchpotatoheadphonessickrageplexemby-install\" class=\"mobile-header\">CouchPotato/HeadPhones/SickRage/Plex/Emby install</h1>\n<h2 id=\"centosredhatsl-7\" class=\"mobile-header\">CentOS/RedHat/SL 7</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum groupinstall -y &quot;Development Tools&quot;\nyum -y install curl gcc gettext git libmediainfo libzen mediainfo p7zip par2cmdline python-configobj sqlite tar unzip wget unrar\n\nmkdir -p /mnt/media /mnt/torrents\necho &quot;\n10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\n10.0.254.1:/mnt/Volume_1/torrents        /mnt/torrents                nfs defaults,rw 0 0\n&quot; &gt;&gt; /etc/fstab\nmount -a</code></pre>\n      </div>\n    </div>\n<h3 id=\"couchpotato\" class=\"mobile-header\">CouchPotato</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/couchpotato.git /var/lib/couchpotato\ngit clone https://git.casjay.in/systems/couchpotato.git /tmp/couchpotato\n\nmkdir -p /var/lib/couchpotato &amp;&amp; cd /var/lib/couchpotato\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/couchpotato/bin/activate\n/var/lib/couchpotato/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/couchpotato/bin/python -m pip install -r /tmp/couchpotato/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/couchpotato/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable couchpotato couchpotato-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/couchpotato/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"headphones\" class=\"mobile-header\">HeadPhones</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/headphones.git /var/lib/headphones\ngit clone https://git.casjay.in/systems/headphones.git /tmp/headphones\n\nmkdir -p /var/lib/headphones &amp;&amp; cd /var/lib/headphones\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/headphones/bin/activate\n/var/lib/headphones/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/headphones/bin/python -m pip install -r /tmp/headphones/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/headphones/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable headphones headphones-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/headphones/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"sickrage\" class=\"mobile-header\">SickRage</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/sickrage.git /var/lib/sickrage\ngit clone https://git.casjay.in/systems/sickrage.git /tmp/sickrage\n\nmkdir -p /var/lib/sickrage &amp;&amp; cd /var/lib/sickrage\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/sickrage/bin/activate\n/var/lib/sickrage/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/sickrage/bin/python -m pip install -r /tmp/sickrage/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/sickrage/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable sickrage sickrage-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/sickrage/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"plex\" class=\"mobile-header\">Plex</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install ffmpeg\nyum install -y https://downloads.plex.tv/plex-media-server/1.14.0.5470-9d51fdfaa/plexmediaserver-1.14.0.5470-9d51fdfaa.x86_64.rpm \ngo to http://yourserverip:32400/ and configure it\n\nOptional stats for plex [Tautulli]\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\ngit clone https://git.casjay.in/mirrors/Plex-Tautulli.git /var/lib/tautulli\ngit clone https://git.casjay.in/mirrors/plex.git /tmp/plex\ncp -Rf /tmp/plex/{etc,root,var}* /</code></pre>\n      </div>\n    </div>\n<h3 id=\"emby\" class=\"mobile-header\">Emby</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install ffmpeg\nyum install -y https://github.com/MediaBrowser/Emby.Releases/releases/download/3.5.3.0/emby-server-rpm_3.5.3.0_x86_64.rpm\ngo to http://yourserverip:8096/ and configure it\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"airsonic\" class=\"mobile-header\">Airsonic</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">mkdir -p /var/airsonic\nyum install java-1.8.0-openjdk-headless -y\nwget https://github.com/airsonic/airsonic/raw/main/contrib/airsonic.service -O /etc/systemd/system/airsonic.service\nwget https://github.com/airsonic/airsonic/releases/download/v10.1.2/airsonic.war -O /var/airsonic/airsonic.war\nmkdir -p /mnt/media\necho &quot; 10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0&quot; &gt;&gt; /etc/fstab\nmount -a\n</code></pre>\n      </div>\n    </div>","readTime":"3 min","wordCount":448,"lastBuilt":"2025-09-14T01:15:31.864Z"},{"name":"minecraft-server","displayName":"Minecraft Server","slug":"minecraft-server","description":"Repo for minecraft-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minecraft-server","updatedAt":"2025-09-08T03:11:10Z","createdAt":"2025-09-08T03:10:59Z","readmeRaw":"## 👋 Welcome to minecraft-server 🚀  \n\nminecraft-server README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-minecraft-server\" class=\"mobile-header\">👋 Welcome to minecraft-server 🚀  </h2>\n<p class=\"mobile-paragraph\">minecraft-server README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:31.688Z"},{"name":"minikube","displayName":"Minikube","slug":"minikube","description":"Repo for minikube","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minikube","updatedAt":"2025-09-08T03:11:25Z","createdAt":"2025-09-08T03:11:15Z","readmeRaw":"## 👋 Welcome to minikube 🚀  \n\nminikube README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-minikube\" class=\"mobile-header\">👋 Welcome to minikube 🚀  </h2>\n<p class=\"mobile-paragraph\">minikube README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:31.539Z"},{"name":"minio","displayName":"Minio","slug":"minio","description":"Repo for minio","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minio","updatedAt":"2025-09-08T03:11:39Z","createdAt":"2025-09-08T03:11:29Z","readmeRaw":"## 👋 Welcome to minio 🚀  \n\nminio README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-minio\" class=\"mobile-header\">👋 Welcome to minio 🚀  </h2>\n<p class=\"mobile-paragraph\">minio README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:31.383Z"},{"name":"mongodb","displayName":"MongoDB","slug":"mongodb","description":"Repo for mongodb","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mongodb","updatedAt":"2025-09-08T03:11:46Z","createdAt":"2023-08-28T03:49:06Z","readmeRaw":"## MongoDB install  \n  \n```shell\nsudo curl -LSs https://rpm-devel.sourceforge.io/ZREPO/RHEL/rhel/casjay.repo /etc/yum.repos.d/casjay.repo\nsudo yum install -y mongodb-org\nsudo systemctl enable --now mongod\n```\n\n#### Secure it\n\n```shell\nsudo vim /etc/mongodb.conf\n```\n\n##### add this to the config\n\n```text\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n```\n\n##### Restart MongoDB service\n\n```shell\nsudo systemctl restart mongod\n```\n  \n---\n\n#### docker install  \n\n```shell\nmkdir -p /var/lib/docker/storage/mongodb && chmod -Rf 777 /var/lib/docker/storage/mongodb\n\ndocker run -d \\\n--name mongodb \\\n--restart=always \\\n-p 127.0.0.1:27017:27017 \\\n-v /var/lib/docker/storage/mongodb:/data/db  \\\n-e MONGO_INITDB_ROOT_USERNAME=mongoadmin \\\n-e MONGO_INITDB_ROOT_PASSWORD=secret \\\nmongo\n```\n  \n#### More on security\n\n<https://scalegrid.io/blog/10-tips-to-improve-your-mongodb-security/>\n","readmeHtml":"<h2 id=\"mongodb-install\" class=\"mobile-header\">MongoDB install  </h2>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo curl -LSs https://rpm-devel.sourceforge.io/ZREPO/RHEL/rhel/casjay.repo /etc/yum.repos.d/casjay.repo\nsudo yum install -y mongodb-org\nsudo systemctl enable --now mongod</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Secure it</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo vim /etc/mongodb.conf</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">##### add this to the config</p>\n<div class=\"mobile-code-block\" data-language=\"text\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">text</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-text\">net:\n  port: 27017\n  bindIp: 127.0.0.1</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">##### Restart MongoDB service</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo systemctl restart mongod</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\">#### docker install  </p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /var/lib/docker/storage/mongodb &amp;&amp; chmod -Rf 777 /var/lib/docker/storage/mongodb\n\ndocker run -d \\\n--name mongodb \\\n--restart=always \\\n-p 127.0.0.1:27017:27017 \\\n-v /var/lib/docker/storage/mongodb:/data/db  \\\n-e MONGO_INITDB_ROOT_USERNAME=mongoadmin \\\n-e MONGO_INITDB_ROOT_PASSWORD=secret \\\nmongo</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### More on security</p>\n<p class=\"mobile-paragraph\"><https://scalegrid.io/blog/10-tips-to-improve-your-mongodb-security/></p>","readTime":"1 min","wordCount":93,"lastBuilt":"2025-09-14T01:15:31.244Z"},{"name":"nagios","displayName":"Nagios","slug":"nagios","description":"Repo for nagios","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nagios","updatedAt":"2025-09-08T03:12:01Z","createdAt":"2025-09-08T03:11:50Z","readmeRaw":"## 👋 Welcome to nagios 🚀  \n\nnagios README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-nagios\" class=\"mobile-header\">👋 Welcome to nagios 🚀  </h2>\n<p class=\"mobile-paragraph\">nagios README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:31.099Z"},{"name":"nextcloud","displayName":"Nextcloud","slug":"nextcloud","description":"Repo for nextcloud","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nextcloud","updatedAt":"2025-09-08T03:12:12Z","createdAt":"2025-09-08T03:12:02Z","readmeRaw":"# Nextcloud Installation Guide\n\nSelf-hosted file sync and share platform with collaboration features, calendar, contacts, and extensive app ecosystem.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Web server (Apache or NGINX)\n- PHP 8.0+ with required extensions\n- Database (MySQL/MariaDB, PostgreSQL, or SQLite)\n- 2GB RAM minimum, 4GB+ recommended\n\n## Installation\n\n### LAMP Stack Setup (Apache + MySQL + PHP)\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# Enable services\nsudo systemctl enable --now apache2 mariadb  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb    # RHEL/CentOS\n```\n\n### Database Setup\n```bash\n# Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create Nextcloud database\nsudo mysql -u root -p <<EOF\nCREATE DATABASE nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE USER 'nextclouduser'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON nextcloud.* TO 'nextclouduser'@'localhost';\nFLUSH PRIVILEGES;\nEXIT\nEOF\n```\n\n### Nextcloud Download and Setup\n```bash\n# Download Nextcloud\ncd /tmp\nwget https://download.nextcloud.com/server/releases/latest.tar.bz2\ntar -xjf latest.tar.bz2\n\n# Move to web directory\nsudo cp -R nextcloud /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/nextcloud  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/nextcloud      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/nextcloud/ -type f -print0 | xargs -0 chmod 0640\nsudo find /var/www/html/nextcloud/ -type d -print0 | xargs -0 chmod 0750\nsudo chmod 750 /var/www/html/nextcloud\nsudo chmod -R 770 /var/www/html/nextcloud/data\nsudo chmod -R 770 /var/www/html/nextcloud/apps\nsudo chmod -R 770 /var/www/html/nextcloud/config\n```\n\n### Using Docker Compose\n```bash\n# Create docker-compose.yml\nmkdir -p ~/nextcloud && cd ~/nextcloud\n\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  nextcloud:\n    image: nextcloud:latest\n    restart: unless-stopped\n    ports:\n      - \"8080:80\"\n    volumes:\n      - nextcloud_data:/var/www/html\n      - ./config:/var/www/html/config\n      - ./custom_apps:/var/www/html/custom_apps\n      - ./data:/var/www/html/data\n    environment:\n      - MYSQL_HOST=db\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=secure_password\n      - NEXTCLOUD_ADMIN_USER=admin\n      - NEXTCLOUD_ADMIN_PASSWORD=admin_password\n      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.example.com\n    depends_on:\n      - db\n      - redis\n    networks:\n      - nextcloud\n\n  db:\n    image: mariadb:10.6\n    restart: unless-stopped\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=root_password\n      - MYSQL_PASSWORD=secure_password\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n    networks:\n      - nextcloud\n\n  redis:\n    image: redis:alpine\n    restart: unless-stopped\n    networks:\n      - nextcloud\n\nvolumes:\n  nextcloud_data:\n  db_data:\n\nnetworks:\n  nextcloud:\n    driver: bridge\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f nextcloud\n```\n\n## Configuration\n\n### Apache Virtual Host\n```bash\n# Create Apache virtual host\nsudo tee /etc/apache2/sites-available/nextcloud.conf > /dev/null <<EOF\n<VirtualHost *:80>\n    ServerName nextcloud.example.com\n    DocumentRoot /var/www/html/nextcloud\n\n    <Directory /var/www/html/nextcloud/>\n        Require all granted\n        AllowOverride All\n        Options FollowSymLinks MultiViews\n        \n        <IfModule mod_dav.c>\n            Dav off\n        </IfModule>\n    </Directory>\n\n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=15552000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options \"SAMEORIGIN\"\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Referrer-Policy \"no-referrer\"\n    Header always set Feature-Policy \"camera 'none'; microphone 'none'\"\n\n    ErrorLog \\${APACHE_LOG_DIR}/nextcloud_error.log\n    CustomLog \\${APACHE_LOG_DIR}/nextcloud_access.log combined\n</VirtualHost>\nEOF\n\n# Enable required modules\nsudo a2enmod rewrite headers env dir mime ssl\nsudo a2ensite nextcloud.conf\nsudo systemctl restart apache2\n```\n\n### NGINX Configuration\n```bash\n# Create NGINX server block\nsudo tee /etc/nginx/sites-available/nextcloud > /dev/null <<EOF\nupstream php-handler {\n    server unix:/var/run/php/php8.0-fpm.sock;\n}\n\nserver {\n    listen 80;\n    server_name nextcloud.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nextcloud.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/ssl/certs/nextcloud.crt;\n    ssl_certificate_key /etc/ssl/private/nextcloud.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload\" always;\n    add_header Referrer-Policy \"no-referrer\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-Download-Options \"noopen\" always;\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Permitted-Cross-Domain-Policies \"none\" always;\n    add_header X-Robots-Tag \"none\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n\n    # Remove X-Powered-By\n    fastcgi_hide_header X-Powered-By;\n\n    # Path to the root of your installation\n    root /var/www/html/nextcloud;\n    index index.php index.html /index.php\\$request_uri;\n\n    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients\n    location = / {\n        if ( \\$http_user_agent ~ ^DavClnt ) {\n            return 302 /remote.php/webdav/\\$is_args\\$args;\n        }\n    }\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # Make a regex exception for `/.well-known` so that clients can still\n    # access it despite the existence of the regex rule\n    location ^~ /.well-known {\n        location = /.well-known/carddav { return 301 /remote.php/dav/; }\n        location = /.well-known/caldav  { return 301 /remote.php/dav/; }\n        location /.well-known/acme-challenge    { try_files \\$uri \\$uri/ =404; }\n        location /.well-known/pki-validation    { try_files \\$uri \\$uri/ =404; }\n        return 301 /index.php\\$request_uri;\n    }\n\n    # Rules borrowed from `.htaccess` to hide certain paths.\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:\\$|/)  { return 404; }\n    location ~ ^/(?:\\\\.|autotest|occ|issue|indie|db_|console)                { return 404; }\n\n    # Ensure this block, which passes PHP files to the PHP process, is above the blocks\n    # which handle static assets (as seen below). If this block is not declared first,\n    # then Nginx will encounter an infinite rewriting loop when it prepends\n    # `/index.php` to the URI, resulting in a HTTP 500 error response.\n    location ~ \\\\.php(?:\\$|/) {\n        # Required for legacy support\n        rewrite ^/(?!index|remote|public|cron|core\\\\/ajax\\\\/update|status|ocs\\\\/v[12]|updater\\\\/.+|oc[ms]-provider\\\\/.+|.+\\\\/richdocumentscode\\\\/proxy) /index.php\\$request_uri;\n\n        fastcgi_split_path_info ^(.+?\\\\.php)(/.*)\\$;\n        set \\$path_info \\$fastcgi_path_info;\n\n        try_files \\$fastcgi_script_name =404;\n\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        fastcgi_param PATH_INFO \\$path_info;\n        fastcgi_param HTTPS on;\n\n        fastcgi_param modHeadersAvailable true;\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off;\n    }\n\n    location ~ \\\\.(?:css|js|svg|gif|png|jpg|ico)\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 6M;\n        access_log off;\n    }\n\n    location ~ \\\\.woff2?\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 7d;\n        access_log off;\n    }\n\n    # Rule borrowed from `.htaccess`\n    location /remote {\n        return 301 /remote.php\\$request_uri;\n    }\n\n    location / {\n        try_files \\$uri \\$uri/ /index.php\\$request_uri;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nextcloud /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### PHP Configuration\n```bash\n# Optimize PHP for Nextcloud\nsudo nano /etc/php/8.0/apache2/php.ini  # Apache\nsudo nano /etc/php/8.0/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\nupload_max_filesize = 16G\npost_max_size = 16G\nmax_execution_time = 3600\nmax_input_time = 3600\nmax_input_vars = 3000\ndate.timezone = \"America/New_York\"\n\n# OPcache settings\nopcache.enable = 1\nopcache.interned_strings_buffer = 16\nopcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\n\n# APCu for local cache\napc.enable_cli = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php8.0-fpm  # NGINX\n```\n\n### Command Line Installation\n```bash\n# Install via command line\ncd /var/www/html/nextcloud\nsudo -u www-data php occ maintenance:install \\\n  --database=\"mysql\" \\\n  --database-name=\"nextcloud\" \\\n  --database-user=\"nextclouduser\" \\\n  --database-pass=\"secure_password\" \\\n  --admin-user=\"admin\" \\\n  --admin-pass=\"admin_password\" \\\n  --data-dir=\"/var/www/html/nextcloud/data\"\n\n# Configure trusted domains\nsudo -u www-data php occ config:system:set trusted_domains 0 --value=nextcloud.example.com\nsudo -u www-data php occ config:system:set trusted_domains 1 --value=192.168.1.100\n\n# Configure caching\nsudo -u www-data php occ config:system:set memcache.local --value=\"\\\\OC\\\\Memcache\\\\APCu\"\nsudo -u www-data php occ config:system:set memcache.distributed --value=\"\\\\OC\\\\Memcache\\\\Redis\"\nsudo -u www-data php occ config:system:set redis host --value=\"localhost\"\nsudo -u www-data php occ config:system:set redis port --value=6379\n```\n\n## Performance Optimization\n\n### Redis Caching Setup\n```bash\n# Install Redis\nsudo apt install -y redis-server  # Ubuntu/Debian\nsudo yum install -y redis          # RHEL/CentOS\n\nsudo systemctl enable --now redis\n\n# Configure Redis for Nextcloud\nsudo tee -a /etc/redis/redis.conf > /dev/null <<EOF\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\nEOF\n\nsudo systemctl restart redis\n\n# Install Redis PHP extension\nsudo apt install -y php-redis  # Ubuntu/Debian\nsudo yum install -y php-redis   # RHEL/CentOS\n\n# Configure Nextcloud to use Redis\nsudo -u www-data php occ config:system:set memcache.local --value=\"\\\\OC\\\\Memcache\\\\APCu\"\nsudo -u www-data php occ config:system:set memcache.distributed --value=\"\\\\OC\\\\Memcache\\\\Redis\"\nsudo -u www-data php occ config:system:set redis host --value=\"localhost\"\nsudo -u www-data php occ config:system:set redis port --value=6379\n```\n\n### Database Optimization\n```bash\n# MySQL/MariaDB optimization for Nextcloud\nsudo tee -a /etc/mysql/mysql.conf.d/nextcloud.cnf > /dev/null <<EOF\n[mysqld]\ninnodb_buffer_pool_size = 1G\ninnodb_io_capacity = 4000\ninnodb_log_file_size = 128M\ninnodb_log_buffer_size = 32M\ninnodb_flush_log_at_trx_commit = 1\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\n\nquery_cache_type = 1\nquery_cache_limit = 2M\nquery_cache_size = 64M\n\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\njoin_buffer_size = 262144\nsort_buffer_size = 262144\n\nmax_connections = 100\nmax_connect_errors = 10\nconnect_timeout = 5\nwait_timeout = 600\nmax_allowed_packet = 64M\n\nthread_cache_size = 128\nquery_cache_size = 64M\n\n[mysql.server]\ndefault-table-type = innodb\nEOF\n\nsudo systemctl restart mysql\n\n# Add indexes for better performance\nmysql -u nextclouduser -p nextcloud <<EOF\nALTER TABLE oc_jobs ADD INDEX jobs_class_index (class);\nALTER TABLE oc_filecache ADD INDEX fs_mtime (mtime);\nEOF\n```\n\n### Background Jobs\n```bash\n# Configure cron for background jobs\nsudo crontab -u www-data -e\n# Add: */5 * * * * php /var/www/html/nextcloud/occ system:cron\n\n# Or configure via occ command\nsudo -u www-data php occ background:cron\n\n# Check background job status\nsudo -u www-data php occ status\nsudo -u www-data php occ background:job:list\n```\n\n## Security Hardening\n\n### File Permissions and Security\n```bash\n# Secure file permissions script\nsudo tee /usr/local/bin/nextcloud-permissions.sh > /dev/null <<'EOF'\n#!/bin/bash\nncpath='/var/www/html/nextcloud'\nhtuser='www-data'\nhtgroup='www-data'\nrootuser='root'\n\nprintf \"Creating possible missing Directories\\n\"\nmkdir -p $ncpath/data\nmkdir -p $ncpath/assets\nmkdir -p $ncpath/updater\n\nprintf \"chmod Files and Directories\\n\"\nfind ${ncpath}/ -type f -print0 | xargs -0 chmod 0640\nfind ${ncpath}/ -type d -print0 | xargs -0 chmod 0750\n\nprintf \"chown Directories\\n\"\nchown -R ${rootuser}:${htgroup} ${ncpath}/\nchown -R ${htuser}:${htgroup} ${ncpath}/apps/\nchown -R ${htuser}:${htgroup} ${ncpath}/assets/\nchown -R ${htuser}:${htgroup} ${ncpath}/config/\nchown -R ${htuser}:${htgroup} ${ncpath}/data/\nchown -R ${htuser}:${htgroup} ${ncpath}/themes/\nchown -R ${htuser}:${htgroup} ${ncpath}/updater/\n\nchmod +x ${ncpath}/occ\n\nprintf \"chmod/chown .htaccess\\n\"\nif [ -f ${ncpath}/.htaccess ]; then\n    chmod 0644 ${ncpath}/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/.htaccess\nfi\n\nif [ -f ${ncpath}/data/.htaccess ]; then\n    chmod 0644 ${ncpath}/data/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/data/.htaccess\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-permissions.sh\nsudo /usr/local/bin/nextcloud-permissions.sh\n```\n\n### SSL/TLS Configuration\n```bash\n# Install Let's Encrypt certificate\nsudo apt install -y certbot python3-certbot-apache  # Apache\nsudo apt install -y certbot python3-certbot-nginx   # NGINX\n\n# Obtain certificate\nsudo certbot --apache -d nextcloud.example.com  # Apache\nsudo certbot --nginx -d nextcloud.example.com   # NGINX\n\n# Configure HTTPS redirect in Nextcloud\nsudo -u www-data php occ config:system:set overwrite.cli.url --value=\"https://nextcloud.example.com\"\nsudo -u www-data php occ config:system:set overwriteprotocol --value=\"https\"\n```\n\n### Security Scan and Hardening\n```bash\n# Run Nextcloud security scan\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:reset admin\n\n# Configure rate limiting\nsudo -u www-data php occ config:app:set brute_force_protection delay_increment --value=10\nsudo -u www-data php occ config:app:set brute_force_protection fail_tolerance --value=3\n\n# Enable two-factor authentication\nsudo -u www-data php occ app:enable twofactor_totp\nsudo -u www-data php occ app:enable twofactor_u2f\n\n# Configure file access control\nsudo -u www-data php occ config:system:set default_file_access --value=\"restrict\"\n```\n\n## App Management\n\n### Essential Apps Installation\n```bash\n# Install popular apps via occ\nsudo -u www-data php occ app:install calendar\nsudo -u www-data php occ app:install contacts\nsudo -u www-data php occ app:install mail\nsudo -u www-data php occ app:install notes\nsudo -u www-data php occ app:install tasks\nsudo -u www-data php occ app:install deck\nsudo -u www-data php occ app:install polls\nsudo -u www-data php occ app:install richdocuments  # OnlyOffice integration\n\n# Enable apps\nsudo -u www-data php occ app:enable calendar\nsudo -u www-data php occ app:enable contacts\nsudo -u www-data php occ app:enable mail\n\n# List available apps\nsudo -u www-data php occ app:list\n\n# Update apps\nsudo -u www-data php occ app:update --all\n```\n\n### OnlyOffice Integration\n```bash\n# Install OnlyOffice Document Server\ndocker run -d --name onlyoffice \\\n  -p 8080:80 \\\n  -v onlyoffice_data:/var/www/onlyoffice/Data \\\n  -v onlyoffice_log:/var/log/onlyoffice \\\n  -v onlyoffice_fonts:/usr/share/fonts/truetype/custom \\\n  -v onlyoffice_forgotten:/var/lib/onlyoffice/documentserver/App_Data/cache/files/forgotten \\\n  onlyoffice/documentserver\n\n# Configure Nextcloud to use OnlyOffice\nsudo -u www-data php occ config:app:set richdocuments wopi_url --value=\"http://localhost:8080\"\n```\n\n## Backup and Maintenance\n\n### Backup Script\n```bash\nsudo tee /usr/local/bin/nextcloud-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/nextcloud\"\nNC_DIR=\"/var/www/html/nextcloud\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Enable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --on\n\n# Backup files (exclude data directory for space)\ntar --exclude=\"${NC_DIR}/data\" -czf ${BACKUP_DIR}/files/nextcloud-files-${DATE}.tar.gz -C /var/www/html nextcloud\n\n# Backup database\nmysqldump -u nextclouduser -p'secure_password' nextcloud > ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\n\n# Backup data directory separately (if needed)\n# tar -czf ${BACKUP_DIR}/files/nextcloud-data-${DATE}.tar.gz -C ${NC_DIR} data\n\n# Disable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --off\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"nextcloud-*\" -type f -mtime +7 -delete\n\necho \"Backup completed: nextcloud-${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/nextcloud-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Update and Maintenance\n```bash\n# Create update script\nsudo tee /usr/local/bin/nextcloud-update.sh > /dev/null <<'EOF'\n#!/bin/bash\nNC_DIR=\"/var/www/html/nextcloud\"\n\n# Check for updates\nsudo -u www-data php ${NC_DIR}/occ update:check\n\n# Run updater\nsudo -u www-data php ${NC_DIR}/updater/updater.phar\n\n# Update apps\nsudo -u www-data php ${NC_DIR}/occ app:update --all\n\n# Run database upgrades\nsudo -u www-data php ${NC_DIR}/occ upgrade\n\n# Scan files\nsudo -u www-data php ${NC_DIR}/occ files:scan --all\n\n# Clean up\nsudo -u www-data php ${NC_DIR}/occ files:cleanup\nsudo -u www-data php ${NC_DIR}/occ trashbin:cleanup --all-users\n\necho \"Nextcloud update completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-update.sh\n```\n\n## Verification\n\n```bash\n# Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Test Nextcloud installation\ncurl -I http://localhost/nextcloud\ncurl -I https://nextcloud.example.com\n\n# Check Nextcloud status via occ\ncd /var/www/html/nextcloud\nsudo -u www-data php occ status\nsudo -u www-data php occ check\n\n# Check background jobs\nsudo -u www-data php occ background:job:list\n\n# Check database connectivity\nsudo -u www-data php occ db:check\n\n# Check security status\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:attempts\n\n# Test file operations\nsudo -u www-data php occ files:scan admin\nsudo -u www-data php occ files:scan --all\n\n# Check logs\nsudo tail -f /var/www/html/nextcloud/data/nextcloud.log\nsudo tail -f /var/log/apache2/nextcloud_error.log\n```\n\n## Troubleshooting\n\n```bash\n# Enable debug mode\nsudo -u www-data php occ config:system:set debug --value=true --type=boolean\nsudo -u www-data php occ config:system:set loglevel --value=0\n\n# Check system requirements\nsudo -u www-data php occ check\n\n# Repair installation\nsudo -u www-data php occ maintenance:repair\n\n# Clear cache\nsudo -u www-data php occ files:cleanup\n\n# Fix file permissions\nsudo /usr/local/bin/nextcloud-permissions.sh\n\n# Database repair\nsudo -u www-data php occ db:check-and-repair\n\n# Update file cache\nsudo -u www-data php occ files:scan --all\n\n# Check configuration\nsudo -u www-data php occ config:list system\n\n# Reset user password\nsudo -u www-data php occ user:resetpassword admin\n\n# Check disk usage\ndu -sh /var/www/html/nextcloud/data/\ndf -h /var/www/html/nextcloud/\n\n# Memory usage check\nsudo -u www-data php occ status --output=json\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.nextcloud.com/)\n- [Admin Manual](https://docs.nextcloud.com/server/latest/admin_manual/)\n- [Security Hardening Guide](https://docs.nextcloud.com/server/latest/admin_manual/installation/harden_server.html)\n- [Performance Tuning](https://docs.nextcloud.com/server/latest/admin_manual/installation/server_tuning.html)\n- [Community Forum](https://help.nextcloud.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"nextcloud-installation-guide\" class=\"mobile-header\">Nextcloud Installation Guide</h1>\n<p class=\"mobile-paragraph\">Self-hosted file sync and share platform with collaboration features, calendar, contacts, and extensive app ecosystem.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Web server (Apache or NGINX)</li>\n<li class=\"mobile-list-item\">PHP 8.0+ with required extensions</li>\n<li class=\"mobile-list-item\">Database (MySQL/MariaDB, PostgreSQL, or SQLite)</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"lamp-stack-setup-apache-mysql-php\" class=\"mobile-header\">LAMP Stack Setup (Apache + MySQL + PHP)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# Enable services\nsudo systemctl enable --now apache2 mariadb  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb    # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-setup\" class=\"mobile-header\">Database Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create Nextcloud database\nsudo mysql -u root -p &lt;&lt;EOF\nCREATE DATABASE nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE USER &#039;nextclouduser&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON nextcloud.* TO &#039;nextclouduser&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEXIT\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"nextcloud-download-and-setup\" class=\"mobile-header\">Nextcloud Download and Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Nextcloud\ncd /tmp\nwget https://download.nextcloud.com/server/releases/latest.tar.bz2\ntar -xjf latest.tar.bz2\n\n# Move to web directory\nsudo cp -R nextcloud /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/nextcloud  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/nextcloud      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/nextcloud/ -type f -print0 | xargs -0 chmod 0640\nsudo find /var/www/html/nextcloud/ -type d -print0 | xargs -0 chmod 0750\nsudo chmod 750 /var/www/html/nextcloud\nsudo chmod -R 770 /var/www/html/nextcloud/data\nsudo chmod -R 770 /var/www/html/nextcloud/apps\nsudo chmod -R 770 /var/www/html/nextcloud/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker-compose\" class=\"mobile-header\">Using Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create docker-compose.yml\nmkdir -p ~/nextcloud &amp;&amp; cd ~/nextcloud\n\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  nextcloud:\n    image: nextcloud:latest\n    restart: unless-stopped\n    ports:\n      - &quot;8080:80&quot;\n    volumes:\n      - nextcloud_data:/var/www/html\n      - ./config:/var/www/html/config\n      - ./custom_apps:/var/www/html/custom_apps\n      - ./data:/var/www/html/data\n    environment:\n      - MYSQL_HOST=db\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=secure_password\n      - NEXTCLOUD_ADMIN_USER=admin\n      - NEXTCLOUD_ADMIN_PASSWORD=admin_password\n      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.example.com\n    depends_on:\n      - db\n      - redis\n    networks:\n      - nextcloud\n\n  db:\n    image: mariadb:10.6\n    restart: unless-stopped\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=root_password\n      - MYSQL_PASSWORD=secure_password\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n    networks:\n      - nextcloud\n\n  redis:\n    image: redis:alpine\n    restart: unless-stopped\n    networks:\n      - nextcloud\n\nvolumes:\n  nextcloud_data:\n  db_data:\n\nnetworks:\n  nextcloud:\n    driver: bridge\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f nextcloud</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"apache-virtual-host\" class=\"mobile-header\">Apache Virtual Host</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Apache virtual host\nsudo tee /etc/apache2/sites-available/nextcloud.conf &gt; /dev/null &lt;&lt;EOF\n&lt;VirtualHost *:80&gt;\n    ServerName nextcloud.example.com\n    DocumentRoot /var/www/html/nextcloud\n\n    &lt;Directory /var/www/html/nextcloud/&gt;\n        Require all granted\n        AllowOverride All\n        Options FollowSymLinks MultiViews\n        \n        &lt;IfModule mod_dav.c&gt;\n            Dav off\n        &lt;/IfModule&gt;\n    &lt;/Directory&gt;\n\n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=15552000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options &quot;SAMEORIGIN&quot;\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Referrer-Policy &quot;no-referrer&quot;\n    Header always set Feature-Policy &quot;camera &#039;none&#039;; microphone &#039;none&#039;&quot;\n\n    ErrorLog \\${APACHE_LOG_DIR}/nextcloud_error.log\n    CustomLog \\${APACHE_LOG_DIR}/nextcloud_access.log combined\n&lt;/VirtualHost&gt;\nEOF\n\n# Enable required modules\nsudo a2enmod rewrite headers env dir mime ssl\nsudo a2ensite nextcloud.conf\nsudo systemctl restart apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">NGINX Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX server block\nsudo tee /etc/nginx/sites-available/nextcloud &gt; /dev/null &lt;&lt;EOF\nupstream php-handler {\n    server unix:/var/run/php/php8.0-fpm.sock;\n}\n\nserver {\n    listen 80;\n    server_name nextcloud.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nextcloud.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/ssl/certs/nextcloud.crt;\n    ssl_certificate_key /etc/ssl/private/nextcloud.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload&quot; always;\n    add_header Referrer-Policy &quot;no-referrer&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header X-Download-Options &quot;noopen&quot; always;\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-Permitted-Cross-Domain-Policies &quot;none&quot; always;\n    add_header X-Robots-Tag &quot;none&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n\n    # Remove X-Powered-By\n    fastcgi_hide_header X-Powered-By;\n\n    # Path to the root of your installation\n    root /var/www/html/nextcloud;\n    index index.php index.html /index.php\\$request_uri;\n\n    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients\n    location = / {\n        if ( \\$http_user_agent ~ ^DavClnt ) {\n            return 302 /remote.php/webdav/\\$is_args\\$args;\n        }\n    }\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # Make a regex exception for `/.well-known` so that clients can still\n    # access it despite the existence of the regex rule\n    location ^~ /.well-known {\n        location = /.well-known/carddav { return 301 /remote.php/dav/; }\n        location = /.well-known/caldav  { return 301 /remote.php/dav/; }\n        location /.well-known/acme-challenge    { try_files \\$uri \\$uri/ =404; }\n        location /.well-known/pki-validation    { try_files \\$uri \\$uri/ =404; }\n        return 301 /index.php\\$request_uri;\n    }\n\n    # Rules borrowed from `.htaccess` to hide certain paths.\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:\\$|/)  { return 404; }\n    location ~ ^/(?:\\\\.|autotest|occ|issue|indie|db_|console)                { return 404; }\n\n    # Ensure this block, which passes PHP files to the PHP process, is above the blocks\n    # which handle static assets (as seen below). If this block is not declared first,\n    # then Nginx will encounter an infinite rewriting loop when it prepends\n    # `/index.php` to the URI, resulting in a HTTP 500 error response.\n    location ~ \\\\.php(?:\\$|/) {\n        # Required for legacy support\n        rewrite ^/(?!index|remote|public|cron|core\\\\/ajax\\\\/update|status|ocs\\\\/v[12]|updater\\\\/.+|oc[ms]-provider\\\\/.+|.+\\\\/richdocumentscode\\\\/proxy) /index.php\\$request_uri;\n\n        fastcgi_split_path_info ^(.+?\\\\.php)(/.*)\\$;\n        set \\$path_info \\$fastcgi_path_info;\n\n        try_files \\$fastcgi_script_name =404;\n\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        fastcgi_param PATH_INFO \\$path_info;\n        fastcgi_param HTTPS on;\n\n        fastcgi_param modHeadersAvailable true;\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off;\n    }\n\n    location ~ \\\\.(?:css|js|svg|gif|png|jpg|ico)\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 6M;\n        access_log off;\n    }\n\n    location ~ \\\\.woff2?\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 7d;\n        access_log off;\n    }\n\n    # Rule borrowed from `.htaccess`\n    location /remote {\n        return 301 /remote.php\\$request_uri;\n    }\n\n    location / {\n        try_files \\$uri \\$uri/ /index.php\\$request_uri;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nextcloud /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"php-configuration\" class=\"mobile-header\">PHP Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize PHP for Nextcloud\nsudo nano /etc/php/8.0/apache2/php.ini  # Apache\nsudo nano /etc/php/8.0/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\nupload_max_filesize = 16G\npost_max_size = 16G\nmax_execution_time = 3600\nmax_input_time = 3600\nmax_input_vars = 3000\ndate.timezone = &quot;America/New_York&quot;\n\n# OPcache settings\nopcache.enable = 1\nopcache.interned_strings_buffer = 16\nopcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\n\n# APCu for local cache\napc.enable_cli = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php8.0-fpm  # NGINX</code></pre>\n      </div>\n    </div>\n<h3 id=\"command-line-installation\" class=\"mobile-header\">Command Line Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install via command line\ncd /var/www/html/nextcloud\nsudo -u www-data php occ maintenance:install \\\n  --database=&quot;mysql&quot; \\\n  --database-name=&quot;nextcloud&quot; \\\n  --database-user=&quot;nextclouduser&quot; \\\n  --database-pass=&quot;secure_password&quot; \\\n  --admin-user=&quot;admin&quot; \\\n  --admin-pass=&quot;admin_password&quot; \\\n  --data-dir=&quot;/var/www/html/nextcloud/data&quot;\n\n# Configure trusted domains\nsudo -u www-data php occ config:system:set trusted_domains 0 --value=nextcloud.example.com\nsudo -u www-data php occ config:system:set trusted_domains 1 --value=192.168.1.100\n\n# Configure caching\nsudo -u www-data php occ config:system:set memcache.local --value=&quot;\\\\OC\\\\Memcache\\\\APCu&quot;\nsudo -u www-data php occ config:system:set memcache.distributed --value=&quot;\\\\OC\\\\Memcache\\\\Redis&quot;\nsudo -u www-data php occ config:system:set redis host --value=&quot;localhost&quot;\nsudo -u www-data php occ config:system:set redis port --value=6379</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"redis-caching-setup\" class=\"mobile-header\">Redis Caching Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis\nsudo apt install -y redis-server  # Ubuntu/Debian\nsudo yum install -y redis          # RHEL/CentOS\n\nsudo systemctl enable --now redis\n\n# Configure Redis for Nextcloud\nsudo tee -a /etc/redis/redis.conf &gt; /dev/null &lt;&lt;EOF\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\nEOF\n\nsudo systemctl restart redis\n\n# Install Redis PHP extension\nsudo apt install -y php-redis  # Ubuntu/Debian\nsudo yum install -y php-redis   # RHEL/CentOS\n\n# Configure Nextcloud to use Redis\nsudo -u www-data php occ config:system:set memcache.local --value=&quot;\\\\OC\\\\Memcache\\\\APCu&quot;\nsudo -u www-data php occ config:system:set memcache.distributed --value=&quot;\\\\OC\\\\Memcache\\\\Redis&quot;\nsudo -u www-data php occ config:system:set redis host --value=&quot;localhost&quot;\nsudo -u www-data php occ config:system:set redis port --value=6379</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/MariaDB optimization for Nextcloud\nsudo tee -a /etc/mysql/mysql.conf.d/nextcloud.cnf &gt; /dev/null &lt;&lt;EOF\n[mysqld]\ninnodb_buffer_pool_size = 1G\ninnodb_io_capacity = 4000\ninnodb_log_file_size = 128M\ninnodb_log_buffer_size = 32M\ninnodb_flush_log_at_trx_commit = 1\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\n\nquery_cache_type = 1\nquery_cache_limit = 2M\nquery_cache_size = 64M\n\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\njoin_buffer_size = 262144\nsort_buffer_size = 262144\n\nmax_connections = 100\nmax_connect_errors = 10\nconnect_timeout = 5\nwait_timeout = 600\nmax_allowed_packet = 64M\n\nthread_cache_size = 128\nquery_cache_size = 64M\n\n[mysql.server]\ndefault-table-type = innodb\nEOF\n\nsudo systemctl restart mysql\n\n# Add indexes for better performance\nmysql -u nextclouduser -p nextcloud &lt;&lt;EOF\nALTER TABLE oc_jobs ADD INDEX jobs_class_index (class);\nALTER TABLE oc_filecache ADD INDEX fs_mtime (mtime);\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"background-jobs\" class=\"mobile-header\">Background Jobs</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure cron for background jobs\nsudo crontab -u www-data -e\n# Add: */5 * * * * php /var/www/html/nextcloud/occ system:cron\n\n# Or configure via occ command\nsudo -u www-data php occ background:cron\n\n# Check background job status\nsudo -u www-data php occ status\nsudo -u www-data php occ background:job:list</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"file-permissions-and-security\" class=\"mobile-header\">File Permissions and Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure file permissions script\nsudo tee /usr/local/bin/nextcloud-permissions.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nncpath=&#039;/var/www/html/nextcloud&#039;\nhtuser=&#039;www-data&#039;\nhtgroup=&#039;www-data&#039;\nrootuser=&#039;root&#039;\n\nprintf &quot;Creating possible missing Directories\\n&quot;\nmkdir -p $ncpath/data\nmkdir -p $ncpath/assets\nmkdir -p $ncpath/updater\n\nprintf &quot;chmod Files and Directories\\n&quot;\nfind ${ncpath}/ -type f -print0 | xargs -0 chmod 0640\nfind ${ncpath}/ -type d -print0 | xargs -0 chmod 0750\n\nprintf &quot;chown Directories\\n&quot;\nchown -R ${rootuser}:${htgroup} ${ncpath}/\nchown -R ${htuser}:${htgroup} ${ncpath}/apps/\nchown -R ${htuser}:${htgroup} ${ncpath}/assets/\nchown -R ${htuser}:${htgroup} ${ncpath}/config/\nchown -R ${htuser}:${htgroup} ${ncpath}/data/\nchown -R ${htuser}:${htgroup} ${ncpath}/themes/\nchown -R ${htuser}:${htgroup} ${ncpath}/updater/\n\nchmod +x ${ncpath}/occ\n\nprintf &quot;chmod/chown .htaccess\\n&quot;\nif [ -f ${ncpath}/.htaccess ]; then\n    chmod 0644 ${ncpath}/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/.htaccess\nfi\n\nif [ -f ${ncpath}/data/.htaccess ]; then\n    chmod 0644 ${ncpath}/data/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/data/.htaccess\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-permissions.sh\nsudo /usr/local/bin/nextcloud-permissions.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Let&#039;s Encrypt certificate\nsudo apt install -y certbot python3-certbot-apache  # Apache\nsudo apt install -y certbot python3-certbot-nginx   # NGINX\n\n# Obtain certificate\nsudo certbot --apache -d nextcloud.example.com  # Apache\nsudo certbot --nginx -d nextcloud.example.com   # NGINX\n\n# Configure HTTPS redirect in Nextcloud\nsudo -u www-data php occ config:system:set overwrite.cli.url --value=&quot;https://nextcloud.example.com&quot;\nsudo -u www-data php occ config:system:set overwriteprotocol --value=&quot;https&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-scan-and-hardening\" class=\"mobile-header\">Security Scan and Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run Nextcloud security scan\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:reset admin\n\n# Configure rate limiting\nsudo -u www-data php occ config:app:set brute_force_protection delay_increment --value=10\nsudo -u www-data php occ config:app:set brute_force_protection fail_tolerance --value=3\n\n# Enable two-factor authentication\nsudo -u www-data php occ app:enable twofactor_totp\nsudo -u www-data php occ app:enable twofactor_u2f\n\n# Configure file access control\nsudo -u www-data php occ config:system:set default_file_access --value=&quot;restrict&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"app-management\" class=\"mobile-header\">App Management</h2>\n<h3 id=\"essential-apps-installation\" class=\"mobile-header\">Essential Apps Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install popular apps via occ\nsudo -u www-data php occ app:install calendar\nsudo -u www-data php occ app:install contacts\nsudo -u www-data php occ app:install mail\nsudo -u www-data php occ app:install notes\nsudo -u www-data php occ app:install tasks\nsudo -u www-data php occ app:install deck\nsudo -u www-data php occ app:install polls\nsudo -u www-data php occ app:install richdocuments  # OnlyOffice integration\n\n# Enable apps\nsudo -u www-data php occ app:enable calendar\nsudo -u www-data php occ app:enable contacts\nsudo -u www-data php occ app:enable mail\n\n# List available apps\nsudo -u www-data php occ app:list\n\n# Update apps\nsudo -u www-data php occ app:update --all</code></pre>\n      </div>\n    </div>\n<h3 id=\"onlyoffice-integration\" class=\"mobile-header\">OnlyOffice Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install OnlyOffice Document Server\ndocker run -d --name onlyoffice \\\n  -p 8080:80 \\\n  -v onlyoffice_data:/var/www/onlyoffice/Data \\\n  -v onlyoffice_log:/var/log/onlyoffice \\\n  -v onlyoffice_fonts:/usr/share/fonts/truetype/custom \\\n  -v onlyoffice_forgotten:/var/lib/onlyoffice/documentserver/App_Data/cache/files/forgotten \\\n  onlyoffice/documentserver\n\n# Configure Nextcloud to use OnlyOffice\nsudo -u www-data php occ config:app:set richdocuments wopi_url --value=&quot;http://localhost:8080&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-maintenance\" class=\"mobile-header\">Backup and Maintenance</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/nextcloud-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/nextcloud&quot;\nNC_DIR=&quot;/var/www/html/nextcloud&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Enable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --on\n\n# Backup files (exclude data directory for space)\ntar --exclude=&quot;${NC_DIR}/data&quot; -czf ${BACKUP_DIR}/files/nextcloud-files-${DATE}.tar.gz -C /var/www/html nextcloud\n\n# Backup database\nmysqldump -u nextclouduser -p&#039;secure_password&#039; nextcloud &gt; ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\n\n# Backup data directory separately (if needed)\n# tar -czf ${BACKUP_DIR}/files/nextcloud-data-${DATE}.tar.gz -C ${NC_DIR} data\n\n# Disable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --off\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;nextcloud-*&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: nextcloud-${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/nextcloud-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"update-and-maintenance\" class=\"mobile-header\">Update and Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create update script\nsudo tee /usr/local/bin/nextcloud-update.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nNC_DIR=&quot;/var/www/html/nextcloud&quot;\n\n# Check for updates\nsudo -u www-data php ${NC_DIR}/occ update:check\n\n# Run updater\nsudo -u www-data php ${NC_DIR}/updater/updater.phar\n\n# Update apps\nsudo -u www-data php ${NC_DIR}/occ app:update --all\n\n# Run database upgrades\nsudo -u www-data php ${NC_DIR}/occ upgrade\n\n# Scan files\nsudo -u www-data php ${NC_DIR}/occ files:scan --all\n\n# Clean up\nsudo -u www-data php ${NC_DIR}/occ files:cleanup\nsudo -u www-data php ${NC_DIR}/occ trashbin:cleanup --all-users\n\necho &quot;Nextcloud update completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-update.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Test Nextcloud installation\ncurl -I http://localhost/nextcloud\ncurl -I https://nextcloud.example.com\n\n# Check Nextcloud status via occ\ncd /var/www/html/nextcloud\nsudo -u www-data php occ status\nsudo -u www-data php occ check\n\n# Check background jobs\nsudo -u www-data php occ background:job:list\n\n# Check database connectivity\nsudo -u www-data php occ db:check\n\n# Check security status\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:attempts\n\n# Test file operations\nsudo -u www-data php occ files:scan admin\nsudo -u www-data php occ files:scan --all\n\n# Check logs\nsudo tail -f /var/www/html/nextcloud/data/nextcloud.log\nsudo tail -f /var/log/apache2/nextcloud_error.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug mode\nsudo -u www-data php occ config:system:set debug --value=true --type=boolean\nsudo -u www-data php occ config:system:set loglevel --value=0\n\n# Check system requirements\nsudo -u www-data php occ check\n\n# Repair installation\nsudo -u www-data php occ maintenance:repair\n\n# Clear cache\nsudo -u www-data php occ files:cleanup\n\n# Fix file permissions\nsudo /usr/local/bin/nextcloud-permissions.sh\n\n# Database repair\nsudo -u www-data php occ db:check-and-repair\n\n# Update file cache\nsudo -u www-data php occ files:scan --all\n\n# Check configuration\nsudo -u www-data php occ config:list system\n\n# Reset user password\nsudo -u www-data php occ user:resetpassword admin\n\n# Check disk usage\ndu -sh /var/www/html/nextcloud/data/\ndf -h /var/www/html/nextcloud/\n\n# Memory usage check\nsudo -u www-data php occ status --output=json</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Admin Manual</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/installation/harden_server.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Hardening Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/installation/server_tuning.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://help.nextcloud.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"12 min","wordCount":2269,"lastBuilt":"2025-09-14T01:15:30.977Z"},{"name":"nexus","displayName":"Nexus","slug":"nexus","description":"Repo for nexus","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nexus","updatedAt":"2025-09-08T03:12:24Z","createdAt":"2025-09-08T03:12:14Z","readmeRaw":"## 👋 Welcome to nexus 🚀  \n\nnexus README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-nexus\" class=\"mobile-header\">👋 Welcome to nexus 🚀  </h2>\n<p class=\"mobile-paragraph\">nexus README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:30.837Z"},{"name":"nginx","displayName":"NGINX","slug":"nginx","description":"Repo for nginx","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nginx","updatedAt":"2025-09-08T03:12:37Z","createdAt":"2025-09-08T03:12:26Z","readmeRaw":"# NGINX Installation Guide\n\nHigh-performance web server, reverse proxy, and load balancer. Essential infrastructure component for modern web applications serving millions of websites worldwide.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 1GB RAM minimum, 2GB+ recommended for production\n- Network connectivity for package downloads\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Method 1: Distribution packages (stable, older version)\nsudo apt update\nsudo apt install -y nginx\n\n# Method 2: Official NGINX repository (latest stable)\nsudo apt install -y curl gnupg2 ca-certificates lsb-release debian-archive-keyring\n\n# Import NGINX signing key\ncurl -fsSL https://nginx.org/keys/nginx_signing.key | sudo gpg --dearmor -o /usr/share/keyrings/nginx-archive-keyring.gpg\n\n# Add NGINX repository\necho \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/ubuntu $(lsb_release -cs) nginx\" | sudo tee /etc/apt/sources.list.d/nginx.list\n\n# Set repository pinning\necho -e \"Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\" | sudo tee /etc/apt/preferences.d/99nginx\n\nsudo apt update\nsudo apt install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Method 1: EPEL packages\nsudo yum install -y epel-release\nsudo yum install -y nginx\n\n# Method 2: Official NGINX repository (recommended)\nsudo tee /etc/yum.repos.d/nginx.repo > /dev/null <<EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\nsudo yum install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx\n```\n\n### Fedora\n```bash\n# Install from official Fedora repositories\nsudo dnf install -y nginx\n\n# Or from NGINX official repository\nsudo dnf install -y dnf-utils\nsudo tee /etc/yum.repos.d/nginx.repo > /dev/null <<EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/fedora/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\nsudo dnf install -y nginx\nsudo systemctl enable --now nginx\n```\n\n### Arch Linux\n```bash\n# Install from official repositories\nsudo pacman -Syu nginx\n\n# Or install nginx-mainline for latest version\nsudo pacman -S nginx-mainline\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx\n```\n\n### openSUSE/SUSE\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx\n```\n\n### Alpine Linux\n```bash\n# Install NGINX\nsudo apk update\nsudo apk add nginx\n\n# Create directories\nsudo mkdir -p /run/nginx\n\n# Enable and start NGINX\nsudo rc-update add nginx default\nsudo service nginx start\n```\n\n### Docker Installation\n```bash\n# Official NGINX Docker image\ndocker run -d \\\n  --name nginx \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -v ~/nginx/conf:/etc/nginx/conf.d \\\n  -v ~/nginx/html:/usr/share/nginx/html \\\n  -v ~/nginx/certs:/etc/nginx/certs \\\n  nginx:latest\n\n# With Docker Compose\ncat > docker-compose.yml <<EOF\nversion: '3.8'\nservices:\n  nginx:\n    image: nginx:latest\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./conf:/etc/nginx/conf.d\n      - ./html:/usr/share/nginx/html\n      - ./certs:/etc/nginx/certs\n      - ./logs:/var/log/nginx\n    networks:\n      - webserver\n\nnetworks:\n  webserver:\n    driver: bridge\nEOF\n\ndocker-compose up -d\n```\n\n### Source Compilation (Advanced)\n```bash\n# Install build dependencies\n# Ubuntu/Debian\nsudo apt install -y build-essential libpcre3-dev libssl-dev zlib1g-dev libgd-dev libxml2-dev uuid-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y \"Development Tools\"\nsudo yum install -y pcre-devel openssl-devel zlib-devel gd-devel libxml2-devel libuuid-devel\n\n# Download NGINX source\ncd /tmp\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\ntar xzf nginx-1.24.0.tar.gz\ncd nginx-1.24.0\n\n# Configure with modules\n./configure \\\n  --prefix=/etc/nginx \\\n  --sbin-path=/usr/sbin/nginx \\\n  --modules-path=/usr/lib/nginx/modules \\\n  --conf-path=/etc/nginx/nginx.conf \\\n  --error-log-path=/var/log/nginx/error.log \\\n  --http-log-path=/var/log/nginx/access.log \\\n  --pid-path=/var/run/nginx.pid \\\n  --lock-path=/var/run/nginx.lock \\\n  --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n  --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n  --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n  --with-perl_modules_path=/usr/lib/perl5/vendor_perl \\\n  --user=nginx \\\n  --group=nginx \\\n  --with-compat \\\n  --with-file-aio \\\n  --with-threads \\\n  --with-http_addition_module \\\n  --with-http_auth_request_module \\\n  --with-http_dav_module \\\n  --with-http_flv_module \\\n  --with-http_gunzip_module \\\n  --with-http_gzip_static_module \\\n  --with-http_mp4_module \\\n  --with-http_random_index_module \\\n  --with-http_realip_module \\\n  --with-http_secure_link_module \\\n  --with-http_slice_module \\\n  --with-http_ssl_module \\\n  --with-http_stub_status_module \\\n  --with-http_sub_module \\\n  --with-http_v2_module \\\n  --with-stream \\\n  --with-stream_realip_module \\\n  --with-stream_ssl_module \\\n  --with-stream_ssl_preread_module\n\n# Compile and install\nmake -j$(nproc)\nsudo make install\n\n# Create nginx user\nsudo useradd -r -d /var/cache/nginx -s /sbin/nologin nginx\n\n# Create systemd service\nsudo tee /etc/systemd/system/nginx.service > /dev/null <<EOF\n[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/var/run/nginx.pid\nExecStartPre=/usr/sbin/nginx -t\nExecStart=/usr/sbin/nginx\nExecReload=/bin/kill -s HUP \\$MAINPID\nKillSignal=SIGQUIT\nTimeoutStopSec=5\nKillMode=mixed\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nginx\n```\n\n## Configuration\n\n### Optimized Main Configuration (/etc/nginx/nginx.conf)\n```bash\n# Create production-ready nginx.conf\nsudo tee /etc/nginx/nginx.conf > /dev/null <<EOF\n# Run as a unique, less privileged user for security reasons.\nuser nginx;\n\n# Sets the worker threads to the number of CPU cores available in the system for best performance.\nworker_processes auto;\n\n# Maximum number of open files per worker process.\nworker_rlimit_nofile 65535;\n\nerror_log /var/log/nginx/error.log crit;\npid /var/run/nginx.pid;\n\nevents {\n    # The maximum number of simultaneous connections that can be opened by a worker process.\n    worker_connections 1024;\n    \n    # Tells the worker to accept multiple connections at a time\n    multi_accept on;\n    \n    # Preferred connection method for newer linux versions\n    use epoll;\n}\n\nhttp {\n    # Hide nginx version information\n    server_tokens off;\n    \n    # Define the MIME types for files.\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    \n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n\n    # Speed up file transfers by using sendfile() to copy directly between descriptors\n    sendfile on;\n    \n    # Tell Nginx not to send out partial frames; this increases throughput\n    tcp_nopush on;\n    \n    # Tell Nginx to enable the Nagle buffering algorithm for TCP packets\n    tcp_nodelay on;\n    \n    # Compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_min_length 1000;\n    gzip_types\n        application/atom+xml\n        application/javascript\n        application/json\n        application/ld+json\n        application/manifest+json\n        application/rss+xml\n        application/vnd.geo+json\n        application/vnd.ms-fontobject\n        application/x-font-ttf\n        application/x-web-app-manifest+json\n        application/xhtml+xml\n        application/xml\n        font/opentype\n        image/bmp\n        image/svg+xml\n        image/x-icon\n        text/cache-manifest\n        text/css\n        text/plain\n        text/vcard\n        text/vnd.rim.location.xloc\n        text/vtt\n        text/x-component\n        text/x-cross-domain-policy;\n    \n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_req_zone \\$binary_remote_addr zone=api:10m rate=1r/s;\n    limit_conn_zone \\$binary_remote_addr zone=conn_limit_per_ip:10m;\n    \n    # Timeouts\n    client_body_timeout 12;\n    client_header_timeout 12;\n    keepalive_timeout 15;\n    send_timeout 10;\n    \n    # Size Limits & Buffer Overflows\n    client_body_buffer_size 1k;\n    client_header_buffer_size 1k;\n    client_max_body_size 1m;\n    large_client_header_buffers 4 4k;\n    \n    # Log format\n    log_format main '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                    '\\$status \\$body_bytes_sent \"\\$http_referer\" '\n                    '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n                    \n    access_log /var/log/nginx/access.log main;\n    \n    # SSL Configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    \n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 5s;\n\n    # Include additional configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n```\n\n### Advanced Virtual Host with Security\n```bash\n# Create production-ready virtual host\nsudo tee /etc/nginx/sites-available/secure-site.conf > /dev/null <<EOF\n# Rate limiting\nlimit_req_zone \\$binary_remote_addr zone=\\${server_name}_ratelimit:10m rate=10r/s;\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n    \n    # Security headers even for redirects\n    add_header X-Frame-Options \"DENY\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    \n    # Redirect all HTTP traffic to HTTPS\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com www.example.com;\n    root /var/www/html/example.com;\n    index index.html index.htm index.php;\n\n    # SSL Configuration (2024 Best Practices)\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\n    \n    # Modern SSL configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    \n    # SSL session caching\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets off;\n    \n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    \n    # Security headers (2024 recommendations)\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n    add_header X-Frame-Options \"DENY\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'self'; form-action 'self'; base-uri 'self';\" always;\n    add_header Permissions-Policy \"camera=(), microphone=(), geolocation=()\" always;\n    \n    # Remove server signature\n    server_tokens off;\n    more_clear_headers Server;\n    \n    # Rate limiting\n    limit_req zone=\\${server_name}_ratelimit burst=20 nodelay;\n    limit_conn conn_limit_per_ip 20;\n    \n    # Main location block\n    location / {\n        try_files \\$uri \\$uri/ =404;\n        \n        # Security for static files\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot)\\$ {\n            expires 1y;\n            add_header Cache-Control \"public, immutable\";\n            access_log off;\n            \n            # Security headers for static files\n            add_header X-Content-Type-Options \"nosniff\" always;\n            add_header X-Frame-Options \"DENY\" always;\n        }\n    }\n    \n    # PHP processing (if needed)\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n        \n        # Security for PHP\n        fastcgi_hide_header X-Powered-By;\n        add_header X-Frame-Options \"DENY\" always;\n        add_header X-Content-Type-Options \"nosniff\" always;\n    }\n    \n    # Deny access to sensitive files\n    location ~ /\\. {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n    \n    location ~ ~\\$ {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n    \n    # Block common exploits\n    location ~* /(wp-admin|wp-login|xmlrpc\\.php) {\n        deny all;\n        return 404;\n    }\n    \n    # Monitoring endpoint\n    location /nginx_status {\n        stub_status on;\n        allow 127.0.0.1;\n        allow ::1;\n        deny all;\n        access_log off;\n    }\n    \n    # Health check endpoint\n    location /health {\n        access_log off;\n        return 200 \"healthy\\n\";\n        add_header Content-Type text/plain;\n    }\n    \n    # Block bots\n    location ~ /(wp-|wordpress|wp_) {\n        deny all;\n        return 404;\n    }\n    \n    error_page 404 /404.html;\n    error_page 500 502 503 504 /50x.html;\n    \n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n\n# Additional server block for www redirect\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name www.example.com;\n    \n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    \n    return 301 https://example.com\\$request_uri;\n}\nEOF\n```\n\n## Advanced Security Hardening\n\n### Generate Strong DH Parameters\n```bash\n# Generate 4096-bit DH parameters (takes time but more secure)\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096\n\n# Or 2048-bit for faster generation (still secure)\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n```\n\n### ModSecurity WAF Installation\n```bash\n# Ubuntu/Debian\nsudo apt install -y libmodsecurity3 libmodsecurity3-dev\n\n# Download and compile ModSecurity-nginx connector\ncd /tmp\ngit clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\ntar xzf nginx-1.24.0.tar.gz\n\n# Compile nginx with ModSecurity\ncd nginx-1.24.0\n./configure --add-dynamic-module=../ModSecurity-nginx\nmake modules\n\n# Copy module\nsudo cp objs/ngx_http_modsecurity_module.so /usr/lib/nginx/modules/\n\n# Enable ModSecurity\necho \"load_module modules/ngx_http_modsecurity_module.so;\" | sudo tee -a /etc/nginx/nginx.conf\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/nginx/modsec\ncd /etc/nginx/modsec\nsudo wget https://github.com/coreruleset/coreruleset/archive/refs/tags/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 /etc/nginx/modsec/crs\n\n# Create ModSecurity configuration\nsudo tee /etc/nginx/modsec/modsecurity.conf > /dev/null <<EOF\nInclude /etc/nginx/modsec/crs/crs-setup.conf.example\nInclude /etc/nginx/modsec/crs/rules/*.conf\n\nSecRuleEngine On\nSecRequestBodyAccess On\nSecResponseBodyAccess On\nSecTmpDir /tmp/\nSecDataDir /etc/nginx/modsec/data/\nEOF\n\n# Enable in virtual host\nmodsecurity on;\nmodsecurity_rules_file /etc/nginx/modsec/modsecurity.conf;\n```\n\n### Fail2Ban Integration\n```bash\n# Install Fail2Ban\nsudo apt install -y fail2ban  # Ubuntu/Debian\nsudo yum install -y fail2ban  # RHEL/CentOS\n\n# Create NGINX filter for Fail2Ban\nsudo tee /etc/fail2ban/filter.d/nginx-req-limit.conf > /dev/null <<EOF\n[Definition]\nfailregex = limiting requests, excess: .* by zone .*, client: <HOST>\nignoreregex =\nEOF\n\n# Create jail configuration\nsudo tee /etc/fail2ban/jail.d/nginx.conf > /dev/null <<EOF\n[nginx-req-limit]\nenabled = true\nfilter = nginx-req-limit\naction = iptables-multiport[name=ReqLimit, port=\"http,https\", protocol=tcp]\nlogpath = /var/log/nginx/error.log\nfindtime = 600\nbantime = 7200\nmaxretry = 10\n\n[nginx-noscript]\nenabled = true\nport = http,https\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 6\n\n[nginx-badbots]\nenabled = true\nport = http,https\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n[nginx-noproxy]\nenabled = true\nport = http,https\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nEOF\n\nsudo systemctl enable --now fail2ban\n```\n\n## SSL/TLS with Let's Encrypt (All Platforms)\n\n### Automatic SSL Setup\n```bash\n# Install Certbot - Universal method\nsudo snap install core; sudo snap refresh core\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n\n# Alternative: Package manager installation\n# Ubuntu/Debian\nsudo apt install -y certbot python3-certbot-nginx\n\n# RHEL/CentOS (enable EPEL first)\nsudo yum install -y certbot python3-certbot-nginx\n\n# Fedora\nsudo dnf install -y certbot python3-certbot-nginx\n\n# Arch Linux\nsudo pacman -S certbot certbot-nginx\n\n# Obtain certificate\nsudo certbot --nginx -d example.com -d www.example.com\n\n# Auto-renewal setup (works on all distros)\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet && systemctl reload nginx\n\n# Test auto-renewal\nsudo certbot renew --dry-run\n```\n\n### Manual SSL Configuration (Self-signed for testing)\n```bash\n# Generate self-signed certificate\nsudo mkdir -p /etc/ssl/private\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/ssl/private/nginx-selfsigned.key \\\n  -out /etc/ssl/certs/nginx-selfsigned.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=example.com\"\n\n# Create strong DH group\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n# Create SSL configuration snippet\nsudo tee /etc/nginx/snippets/self-signed.conf > /dev/null <<EOF\nssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;\nssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;\nEOF\n\nsudo tee /etc/nginx/snippets/ssl-params.conf > /dev/null <<EOF\nssl_protocols TLSv1.2 TLSv1.3;\nssl_prefer_server_ciphers on;\nssl_dhparam /etc/ssl/certs/dhparam.pem;\nssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\nssl_ecdh_curve secp384r1;\nssl_session_timeout 10m;\nssl_session_cache shared:SSL:10m;\nssl_session_tickets off;\nssl_stapling on;\nssl_stapling_verify on;\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\nadd_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\";\nadd_header X-Frame-Options DENY;\nadd_header X-Content-Type-Options nosniff;\nadd_header X-XSS-Protection \"1; mode=block\";\nEOF\n```\n\n## Firewall Configuration (All Platforms)\n\n### UFW (Ubuntu/Debian)\n```bash\nsudo ufw app list\nsudo ufw allow 'Nginx Full'  # Allows both HTTP and HTTPS\nsudo ufw allow 'Nginx HTTP'  # HTTP only\nsudo ufw allow 'Nginx HTTPS' # HTTPS only\nsudo ufw enable\nsudo ufw status\n```\n\n### Firewalld (RHEL/CentOS/Fedora)\n```bash\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\nsudo firewall-cmd --list-all\n```\n\n### iptables (Universal)\n```bash\n# Allow HTTP and HTTPS\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\n\n# Save rules (method varies by distro)\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save\n\n# Arch Linux\nsudo iptables-save > /etc/iptables/iptables.rules\n```\n\n### SELinux Configuration (RHEL/CentOS/Fedora)\n```bash\n# Check SELinux status\ngetenforce\n\n# Set SELinux booleans for NGINX\nsudo setsebool -P httpd_can_network_connect 1\nsudo setsebool -P httpd_can_network_relay 1\nsudo setsebool -P httpd_execmem 1\n\n# Create SELinux policy for custom ports\nsudo semanage port -a -t http_port_t -p tcp 8080\n\n# Check SELinux denials\nsudo ausearch -m AVC,USER_AVC,SELINUX_ERR,USER_SELINUX_ERR -ts recent\n```\n\n## Performance Optimization (Production)\n\n### System-level Optimizations\n```bash\n# Increase system limits for NGINX\nsudo tee -a /etc/security/limits.conf > /dev/null <<EOF\nnginx soft nofile 65535\nnginx hard nofile 65535\nEOF\n\n# Kernel parameters for high-traffic sites\nsudo tee -a /etc/sysctl.conf > /dev/null <<EOF\n# Network tuning for NGINX\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_max_tw_buckets = 400000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 15000 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 16777216\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 65536 16777216\nnet.ipv4.tcp_wmem = 4096 65536 16777216\nfs.file-max = 100000\nEOF\n\nsudo sysctl -p\n```\n\n### Worker Process Optimization\n```bash\n# Calculate optimal worker configuration\necho \"CPU cores: $(nproc)\"\necho \"Recommended worker_processes: auto (or $(nproc))\"\necho \"Recommended worker_connections: 1024-4096\"\n\n# Update main configuration\nsudo tee /etc/nginx/conf.d/performance.conf > /dev/null <<EOF\n# Worker optimization\nworker_processes auto;\nworker_rlimit_nofile 65535;\nworker_cpu_affinity auto;\n\nevents {\n    worker_connections 4096;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Connection optimization\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 30;\n    keepalive_requests 100;\n    reset_timedout_connection on;\n    \n    # Buffer optimization\n    client_body_buffer_size 128k;\n    client_max_body_size 10m;\n    client_header_buffer_size 1k;\n    large_client_header_buffers 4 4k;\n    output_buffers 1 32k;\n    postpone_output 1460;\n    \n    # Timeouts\n    client_header_timeout 3m;\n    client_body_timeout 3m;\n    send_timeout 3m;\n    \n    # Gzip optimization\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1000;\n    gzip_comp_level 6;\n    gzip_proxied any;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n}\nEOF\n```\n\n### Caching Configuration\n```bash\n# Create caching configuration\nsudo tee /etc/nginx/conf.d/caching.conf > /dev/null <<EOF\n# Proxy cache configuration\nproxy_cache_path /var/cache/nginx/proxy levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;\n\n# FastCGI cache configuration\nfastcgi_cache_path /var/cache/nginx/fastcgi levels=1:2 keys_zone=fastcgi_cache:10m max_size=10g inactive=60m use_temp_path=off;\n\n# Create cache directories\nsudo mkdir -p /var/cache/nginx/{proxy,fastcgi}\nsudo chown -R nginx:nginx /var/cache/nginx\nsudo chmod -R 755 /var/cache/nginx\n\n# Browser caching\nmap \\$sent_http_content_type \\$expires {\n    default                    off;\n    text/html                  epoch;\n    text/css                   max;\n    application/javascript     max;\n    ~image/                    1y;\n    ~font/                     1y;\n    application/pdf            1y;\n}\n\nexpires \\$expires;\nEOF\n```\n\n## Cross-Platform Verification Commands\n\n### Service Management (All Distributions)\n```bash\n# SystemD (Most modern distros)\nsudo systemctl status nginx\nsudo systemctl start nginx\nsudo systemctl stop nginx\nsudo systemctl restart nginx\nsudo systemctl reload nginx\n\n# Check if systemd is available\nif command -v systemctl &> /dev/null; then\n    echo \"Using systemd\"\n    sudo systemctl enable --now nginx\nelse\n    echo \"Using traditional init\"\n    # For older systems or Alpine\n    sudo service nginx start\n    sudo chkconfig nginx on  # RHEL/CentOS 6\n    sudo rc-update add nginx default  # Alpine\nfi\n```\n\n### Configuration Testing (Universal)\n```bash\n# Test configuration syntax\nsudo nginx -t\n\n# Test specific configuration file\nsudo nginx -t -c /etc/nginx/nginx.conf\n\n# Check configuration details\nsudo nginx -T\n\n# Show version and build info\nnginx -v\nnginx -V\n\n# Show loaded modules\nnginx -V 2>&1 | grep -o with-[a-z_]*\n```\n\n### Log Management (Cross-Platform)\n```bash\n# Log rotation configuration (works on all distros)\nsudo tee /etc/logrotate.d/nginx > /dev/null <<EOF\n/var/log/nginx/*.log {\n    daily\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 644 nginx nginx\n    postrotate\n        if [ -f /var/run/nginx.pid ]; then\n            kill -USR1 \\`cat /var/run/nginx.pid\\`\n        fi\n    endscript\n}\nEOF\n\n# Manual log rotation test\nsudo logrotate -d /etc/logrotate.d/nginx\nsudo logrotate -f /etc/logrotate.d/nginx\n```\n\n### Performance Monitoring (Universal)\n```bash\n# Monitor NGINX processes\nps aux | grep nginx\nhtop -p $(pgrep nginx | tr '\\n' ',' | sed 's/,$//')\n\n# Check connection statistics\nsudo netstat -tulpn | grep nginx\nsudo ss -tulpn | grep nginx\n\n# Monitor real-time connections\nwhile true; do echo \"$(date): $(sudo netstat -an | grep :80 | wc -l) connections\"; sleep 5; done\n\n# Check worker process CPU usage\ntop -p $(pgrep nginx | head -1)\n\n# Monitor access patterns\nsudo tail -f /var/log/nginx/access.log | cut -d' ' -f1 | sort | uniq -c | sort -nr\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Permission denied errors (SELinux/AppArmor)\n# RHEL/CentOS with SELinux\nsudo setsebool -P httpd_can_network_connect 1\nsudo chcon -Rt httpd_exec_t /usr/sbin/nginx\n\n# Ubuntu with AppArmor\nsudo aa-complain /usr/sbin/nginx\n\n# File permission issues\nsudo chown -R nginx:nginx /var/www/html  # RHEL/CentOS\nsudo chown -R www-data:www-data /var/www/html  # Ubuntu/Debian\n\n# Check file contexts (SELinux)\nls -laZ /var/www/html/\nsudo restorecon -Rv /var/www/html/\n\n# Port binding issues\nsudo lsof -i :80\nsudo netstat -tulpn | grep :80\n\n# Configuration syntax errors\nsudo nginx -t\nsudo journalctl -u nginx -f\n\n# Memory issues\nfree -h\nsudo systemctl status nginx\nps aux --sort=-%mem | grep nginx\n\n# Check for core dumps\nfind /var/crash -name \"nginx*\" 2>/dev/null\nfind /var/lib/systemd/coredump -name \"*nginx*\" 2>/dev/null\n```\n\n### Debug Mode and Logging\n```bash\n# Enable debug logging\nsudo nano /etc/nginx/nginx.conf\n# Change: error_log /var/log/nginx/error.log debug;\n\n# Test in foreground (debugging)\nsudo nginx -g 'daemon off;'\n\n# Check which user nginx is running as\nps aux | grep nginx\n\n# Verify listening addresses\nsudo nginx -T | grep listen\n\n# Check loaded modules\nnginx -V 2>&1 | tr ' ' '\\n' | grep module\n\n# Test configuration with different user\nsudo -u nginx nginx -t\n```\n\nThis updated nginx guide now includes:\n- ✅ **Cross-platform support** (Ubuntu, Debian, RHEL, CentOS, Rocky, Fedora, Arch, openSUSE, Alpine)\n- ✅ **Complete security hardening** (2024 best practices, ModSecurity WAF, Fail2Ban)\n- ✅ **Performance optimization** (system tuning, caching, worker optimization)\n- ✅ **SSL/TLS configuration** (Let's Encrypt, self-signed, modern ciphers)\n- ✅ **Comprehensive troubleshooting** (SELinux, AppArmor, cross-platform debugging)\n\nShould I continue updating the other guides with this same level of comprehensive cross-platform coverage?","readmeHtml":"<h1 id=\"nginx-installation-guide\" class=\"mobile-header\">NGINX Installation Guide</h1>\n<p class=\"mobile-paragraph\">High-performance web server, reverse proxy, and load balancer. Essential infrastructure component for modern web applications serving millions of websites worldwide.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">1GB RAM minimum, 2GB+ recommended for production</li>\n<li class=\"mobile-list-item\">Network connectivity for package downloads</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Method 1: Distribution packages (stable, older version)\nsudo apt update\nsudo apt install -y nginx\n\n# Method 2: Official NGINX repository (latest stable)\nsudo apt install -y curl gnupg2 ca-certificates lsb-release debian-archive-keyring\n\n# Import NGINX signing key\ncurl -fsSL https://nginx.org/keys/nginx_signing.key | sudo gpg --dearmor -o /usr/share/keyrings/nginx-archive-keyring.gpg\n\n# Add NGINX repository\necho &quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/ubuntu $(lsb_release -cs) nginx&quot; | sudo tee /etc/apt/sources.list.d/nginx.list\n\n# Set repository pinning\necho -e &quot;Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n&quot; | sudo tee /etc/apt/preferences.d/99nginx\n\nsudo apt update\nsudo apt install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Method 1: EPEL packages\nsudo yum install -y epel-release\nsudo yum install -y nginx\n\n# Method 2: Official NGINX repository (recommended)\nsudo tee /etc/yum.repos.d/nginx.repo &gt; /dev/null &lt;&lt;EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\nsudo yum install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from official Fedora repositories\nsudo dnf install -y nginx\n\n# Or from NGINX official repository\nsudo dnf install -y dnf-utils\nsudo tee /etc/yum.repos.d/nginx.repo &gt; /dev/null &lt;&lt;EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/fedora/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\nsudo dnf install -y nginx\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from official repositories\nsudo pacman -Syu nginx\n\n# Or install nginx-mainline for latest version\nsudo pacman -S nginx-mainline\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesuse\" class=\"mobile-header\">openSUSE/SUSE</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX\nsudo apk update\nsudo apk add nginx\n\n# Create directories\nsudo mkdir -p /run/nginx\n\n# Enable and start NGINX\nsudo rc-update add nginx default\nsudo service nginx start</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Official NGINX Docker image\ndocker run -d \\\n  --name nginx \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -v ~/nginx/conf:/etc/nginx/conf.d \\\n  -v ~/nginx/html:/usr/share/nginx/html \\\n  -v ~/nginx/certs:/etc/nginx/certs \\\n  nginx:latest\n\n# With Docker Compose\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\nservices:\n  nginx:\n    image: nginx:latest\n    restart: unless-stopped\n    ports:\n      - &quot;80:80&quot;\n      - &quot;443:443&quot;\n    volumes:\n      - ./conf:/etc/nginx/conf.d\n      - ./html:/usr/share/nginx/html\n      - ./certs:/etc/nginx/certs\n      - ./logs:/var/log/nginx\n    networks:\n      - webserver\n\nnetworks:\n  webserver:\n    driver: bridge\nEOF\n\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h3 id=\"source-compilation-advanced\" class=\"mobile-header\">Source Compilation (Advanced)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install build dependencies\n# Ubuntu/Debian\nsudo apt install -y build-essential libpcre3-dev libssl-dev zlib1g-dev libgd-dev libxml2-dev uuid-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y &quot;Development Tools&quot;\nsudo yum install -y pcre-devel openssl-devel zlib-devel gd-devel libxml2-devel libuuid-devel\n\n# Download NGINX source\ncd /tmp\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\ntar xzf nginx-1.24.0.tar.gz\ncd nginx-1.24.0\n\n# Configure with modules\n./configure \\\n  --prefix=/etc/nginx \\\n  --sbin-path=/usr/sbin/nginx \\\n  --modules-path=/usr/lib/nginx/modules \\\n  --conf-path=/etc/nginx/nginx.conf \\\n  --error-log-path=/var/log/nginx/error.log \\\n  --http-log-path=/var/log/nginx/access.log \\\n  --pid-path=/var/run/nginx.pid \\\n  --lock-path=/var/run/nginx.lock \\\n  --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n  --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n  --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n  --with-perl_modules_path=/usr/lib/perl5/vendor_perl \\\n  --user=nginx \\\n  --group=nginx \\\n  --with-compat \\\n  --with-file-aio \\\n  --with-threads \\\n  --with-http_addition_module \\\n  --with-http_auth_request_module \\\n  --with-http_dav_module \\\n  --with-http_flv_module \\\n  --with-http_gunzip_module \\\n  --with-http_gzip_static_module \\\n  --with-http_mp4_module \\\n  --with-http_random_index_module \\\n  --with-http_realip_module \\\n  --with-http_secure_link_module \\\n  --with-http_slice_module \\\n  --with-http_ssl_module \\\n  --with-http_stub_status_module \\\n  --with-http_sub_module \\\n  --with-http_v2_module \\\n  --with-stream \\\n  --with-stream_realip_module \\\n  --with-stream_ssl_module \\\n  --with-stream_ssl_preread_module\n\n# Compile and install\nmake -j$(nproc)\nsudo make install\n\n# Create nginx user\nsudo useradd -r -d /var/cache/nginx -s /sbin/nologin nginx\n\n# Create systemd service\nsudo tee /etc/systemd/system/nginx.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/var/run/nginx.pid\nExecStartPre=/usr/sbin/nginx -t\nExecStart=/usr/sbin/nginx\nExecReload=/bin/kill -s HUP \\$MAINPID\nKillSignal=SIGQUIT\nTimeoutStopSec=5\nKillMode=mixed\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"optimized-main-configuration-etcnginxnginxconf\" class=\"mobile-header\">Optimized Main Configuration (/etc/nginx/nginx.conf)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production-ready nginx.conf\nsudo tee /etc/nginx/nginx.conf &gt; /dev/null &lt;&lt;EOF\n# Run as a unique, less privileged user for security reasons.\nuser nginx;\n\n# Sets the worker threads to the number of CPU cores available in the system for best performance.\nworker_processes auto;\n\n# Maximum number of open files per worker process.\nworker_rlimit_nofile 65535;\n\nerror_log /var/log/nginx/error.log crit;\npid /var/run/nginx.pid;\n\nevents {\n    # The maximum number of simultaneous connections that can be opened by a worker process.\n    worker_connections 1024;\n    \n    # Tells the worker to accept multiple connections at a time\n    multi_accept on;\n    \n    # Preferred connection method for newer linux versions\n    use epoll;\n}\n\nhttp {\n    # Hide nginx version information\n    server_tokens off;\n    \n    # Define the MIME types for files.\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    \n    # Security headers\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot; always;\n    add_header Content-Security-Policy &quot;default-src &#039;self&#039; http: https: data: blob: &#039;unsafe-inline&#039;&quot; always;\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n\n    # Speed up file transfers by using sendfile() to copy directly between descriptors\n    sendfile on;\n    \n    # Tell Nginx not to send out partial frames; this increases throughput\n    tcp_nopush on;\n    \n    # Tell Nginx to enable the Nagle buffering algorithm for TCP packets\n    tcp_nodelay on;\n    \n    # Compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_min_length 1000;\n    gzip_types\n        application/atom+xml\n        application/javascript\n        application/json\n        application/ld+json\n        application/manifest+json\n        application/rss+xml\n        application/vnd.geo+json\n        application/vnd.ms-fontobject\n        application/x-font-ttf\n        application/x-web-app-manifest+json\n        application/xhtml+xml\n        application/xml\n        font/opentype\n        image/bmp\n        image/svg+xml\n        image/x-icon\n        text/cache-manifest\n        text/css\n        text/plain\n        text/vcard\n        text/vnd.rim.location.xloc\n        text/vtt\n        text/x-component\n        text/x-cross-domain-policy;\n    \n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_req_zone \\$binary_remote_addr zone=api:10m rate=1r/s;\n    limit_conn_zone \\$binary_remote_addr zone=conn_limit_per_ip:10m;\n    \n    # Timeouts\n    client_body_timeout 12;\n    client_header_timeout 12;\n    keepalive_timeout 15;\n    send_timeout 10;\n    \n    # Size Limits &amp; Buffer Overflows\n    client_body_buffer_size 1k;\n    client_header_buffer_size 1k;\n    client_max_body_size 1m;\n    large_client_header_buffers 4 4k;\n    \n    # Log format\n    log_format main &#039;\\$remote_addr - \\$remote_user [\\$time_local] &quot;\\$request&quot; &#039;\n                    &#039;\\$status \\$body_bytes_sent &quot;\\$http_referer&quot; &#039;\n                    &#039;&quot;\\$http_user_agent&quot; &quot;\\$http_x_forwarded_for&quot;&#039;;\n                    \n    access_log /var/log/nginx/access.log main;\n    \n    # SSL Configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    \n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 5s;\n\n    # Include additional configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-virtual-host-with-security\" class=\"mobile-header\">Advanced Virtual Host with Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production-ready virtual host\nsudo tee /etc/nginx/sites-available/secure-site.conf &gt; /dev/null &lt;&lt;EOF\n# Rate limiting\nlimit_req_zone \\$binary_remote_addr zone=\\${server_name}_ratelimit:10m rate=10r/s;\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n    \n    # Security headers even for redirects\n    add_header X-Frame-Options &quot;DENY&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    \n    # Redirect all HTTP traffic to HTTPS\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com www.example.com;\n    root /var/www/html/example.com;\n    index index.html index.htm index.php;\n\n    # SSL Configuration (2024 Best Practices)\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\n    \n    # Modern SSL configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    \n    # SSL session caching\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets off;\n    \n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    \n    # Security headers (2024 recommendations)\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot; always;\n    add_header X-Frame-Options &quot;DENY&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n    add_header Content-Security-Policy &quot;default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039; &#039;unsafe-eval&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;; img-src &#039;self&#039; data: https:; font-src &#039;self&#039; data:; connect-src &#039;self&#039;; media-src &#039;self&#039;; object-src &#039;none&#039;; child-src &#039;self&#039;; form-action &#039;self&#039;; base-uri &#039;self&#039;;&quot; always;\n    add_header Permissions-Policy &quot;camera=(), microphone=(), geolocation=()&quot; always;\n    \n    # Remove server signature\n    server_tokens off;\n    more_clear_headers Server;\n    \n    # Rate limiting\n    limit_req zone=\\${server_name}_ratelimit burst=20 nodelay;\n    limit_conn conn_limit_per_ip 20;\n    \n    # Main location block\n    location / {\n        try_files \\$uri \\$uri/ =404;\n        \n        # Security for static files\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot)\\$ {\n            expires 1y;\n            add_header Cache-Control &quot;public, immutable&quot;;\n            access_log off;\n            \n            # Security headers for static files\n            add_header X-Content-Type-Options &quot;nosniff&quot; always;\n            add_header X-Frame-Options &quot;DENY&quot; always;\n        }\n    }\n    \n    # PHP processing (if needed)\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n        \n        # Security for PHP\n        fastcgi_hide_header X-Powered-By;\n        add_header X-Frame-Options &quot;DENY&quot; always;\n        add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    }\n    \n    # Deny access to sensitive files\n    location ~ /\\. {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n    \n    location ~ ~\\$ {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n    \n    # Block common exploits\n    location ~* /(wp-admin|wp-login|xmlrpc\\.php) {\n        deny all;\n        return 404;\n    }\n    \n    # Monitoring endpoint\n    location /nginx_status {\n        stub_status on;\n        allow 127.0.0.1;\n        allow ::1;\n        deny all;\n        access_log off;\n    }\n    \n    # Health check endpoint\n    location /health {\n        access_log off;\n        return 200 &quot;healthy\\n&quot;;\n        add_header Content-Type text/plain;\n    }\n    \n    # Block bots\n    location ~ /(wp-|wordpress|wp_) {\n        deny all;\n        return 404;\n    }\n    \n    error_page 404 /404.html;\n    error_page 500 502 503 504 /50x.html;\n    \n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n\n# Additional server block for www redirect\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name www.example.com;\n    \n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    \n    return 301 https://example.com\\$request_uri;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-security-hardening\" class=\"mobile-header\">Advanced Security Hardening</h2>\n<h3 id=\"generate-strong-dh-parameters\" class=\"mobile-header\">Generate Strong DH Parameters</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate 4096-bit DH parameters (takes time but more secure)\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096\n\n# Or 2048-bit for faster generation (still secure)\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</code></pre>\n      </div>\n    </div>\n<h3 id=\"modsecurity-waf-installation\" class=\"mobile-header\">ModSecurity WAF Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt install -y libmodsecurity3 libmodsecurity3-dev\n\n# Download and compile ModSecurity-nginx connector\ncd /tmp\ngit clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\ntar xzf nginx-1.24.0.tar.gz\n\n# Compile nginx with ModSecurity\ncd nginx-1.24.0\n./configure --add-dynamic-module=../ModSecurity-nginx\nmake modules\n\n# Copy module\nsudo cp objs/ngx_http_modsecurity_module.so /usr/lib/nginx/modules/\n\n# Enable ModSecurity\necho &quot;load_module modules/ngx_http_modsecurity_module.so;&quot; | sudo tee -a /etc/nginx/nginx.conf\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/nginx/modsec\ncd /etc/nginx/modsec\nsudo wget https://github.com/coreruleset/coreruleset/archive/refs/tags/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 /etc/nginx/modsec/crs\n\n# Create ModSecurity configuration\nsudo tee /etc/nginx/modsec/modsecurity.conf &gt; /dev/null &lt;&lt;EOF\nInclude /etc/nginx/modsec/crs/crs-setup.conf.example\nInclude /etc/nginx/modsec/crs/rules/*.conf\n\nSecRuleEngine On\nSecRequestBodyAccess On\nSecResponseBodyAccess On\nSecTmpDir /tmp/\nSecDataDir /etc/nginx/modsec/data/\nEOF\n\n# Enable in virtual host\nmodsecurity on;\nmodsecurity_rules_file /etc/nginx/modsec/modsecurity.conf;</code></pre>\n      </div>\n    </div>\n<h3 id=\"fail2ban-integration\" class=\"mobile-header\">Fail2Ban Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Fail2Ban\nsudo apt install -y fail2ban  # Ubuntu/Debian\nsudo yum install -y fail2ban  # RHEL/CentOS\n\n# Create NGINX filter for Fail2Ban\nsudo tee /etc/fail2ban/filter.d/nginx-req-limit.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = limiting requests, excess: .* by zone .*, client: &lt;HOST&gt;\nignoreregex =\nEOF\n\n# Create jail configuration\nsudo tee /etc/fail2ban/jail.d/nginx.conf &gt; /dev/null &lt;&lt;EOF\n[nginx-req-limit]\nenabled = true\nfilter = nginx-req-limit\naction = iptables-multiport[name=ReqLimit, port=&quot;http,https&quot;, protocol=tcp]\nlogpath = /var/log/nginx/error.log\nfindtime = 600\nbantime = 7200\nmaxretry = 10\n\n[nginx-noscript]\nenabled = true\nport = http,https\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 6\n\n[nginx-badbots]\nenabled = true\nport = http,https\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n[nginx-noproxy]\nenabled = true\nport = http,https\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nEOF\n\nsudo systemctl enable --now fail2ban</code></pre>\n      </div>\n    </div>\n<h2 id=\"ssltls-with-lets-encrypt-all-platforms\" class=\"mobile-header\">SSL/TLS with Let's Encrypt (All Platforms)</h2>\n<h3 id=\"automatic-ssl-setup\" class=\"mobile-header\">Automatic SSL Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot - Universal method\nsudo snap install core; sudo snap refresh core\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n\n# Alternative: Package manager installation\n# Ubuntu/Debian\nsudo apt install -y certbot python3-certbot-nginx\n\n# RHEL/CentOS (enable EPEL first)\nsudo yum install -y certbot python3-certbot-nginx\n\n# Fedora\nsudo dnf install -y certbot python3-certbot-nginx\n\n# Arch Linux\nsudo pacman -S certbot certbot-nginx\n\n# Obtain certificate\nsudo certbot --nginx -d example.com -d www.example.com\n\n# Auto-renewal setup (works on all distros)\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet &amp;&amp; systemctl reload nginx\n\n# Test auto-renewal\nsudo certbot renew --dry-run</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-ssl-configuration-self-signed-for-testing\" class=\"mobile-header\">Manual SSL Configuration (Self-signed for testing)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate\nsudo mkdir -p /etc/ssl/private\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/ssl/private/nginx-selfsigned.key \\\n  -out /etc/ssl/certs/nginx-selfsigned.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=example.com&quot;\n\n# Create strong DH group\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n# Create SSL configuration snippet\nsudo tee /etc/nginx/snippets/self-signed.conf &gt; /dev/null &lt;&lt;EOF\nssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;\nssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;\nEOF\n\nsudo tee /etc/nginx/snippets/ssl-params.conf &gt; /dev/null &lt;&lt;EOF\nssl_protocols TLSv1.2 TLSv1.3;\nssl_prefer_server_ciphers on;\nssl_dhparam /etc/ssl/certs/dhparam.pem;\nssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\nssl_ecdh_curve secp384r1;\nssl_session_timeout 10m;\nssl_session_cache shared:SSL:10m;\nssl_session_tickets off;\nssl_stapling on;\nssl_stapling_verify on;\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\nadd_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;;\nadd_header X-Frame-Options DENY;\nadd_header X-Content-Type-Options nosniff;\nadd_header X-XSS-Protection &quot;1; mode=block&quot;;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration-all-platforms\" class=\"mobile-header\">Firewall Configuration (All Platforms)</h2>\n<h3 id=\"ufw-ubuntudebian\" class=\"mobile-header\">UFW (Ubuntu/Debian)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo ufw app list\nsudo ufw allow &#039;Nginx Full&#039;  # Allows both HTTP and HTTPS\nsudo ufw allow &#039;Nginx HTTP&#039;  # HTTP only\nsudo ufw allow &#039;Nginx HTTPS&#039; # HTTPS only\nsudo ufw enable\nsudo ufw status</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewalld-rhelcentosfedora\" class=\"mobile-header\">Firewalld (RHEL/CentOS/Fedora)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<h3 id=\"iptables-universal\" class=\"mobile-header\">iptables (Universal)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Allow HTTP and HTTPS\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\n\n# Save rules (method varies by distro)\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save\n\n# Arch Linux\nsudo iptables-save &gt; /etc/iptables/iptables.rules</code></pre>\n      </div>\n    </div>\n<h3 id=\"selinux-configuration-rhelcentosfedora\" class=\"mobile-header\">SELinux Configuration (RHEL/CentOS/Fedora)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check SELinux status\ngetenforce\n\n# Set SELinux booleans for NGINX\nsudo setsebool -P httpd_can_network_connect 1\nsudo setsebool -P httpd_can_network_relay 1\nsudo setsebool -P httpd_execmem 1\n\n# Create SELinux policy for custom ports\nsudo semanage port -a -t http_port_t -p tcp 8080\n\n# Check SELinux denials\nsudo ausearch -m AVC,USER_AVC,SELINUX_ERR,USER_SELINUX_ERR -ts recent</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization-production\" class=\"mobile-header\">Performance Optimization (Production)</h2>\n<h3 id=\"system-level-optimizations\" class=\"mobile-header\">System-level Optimizations</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase system limits for NGINX\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;EOF\nnginx soft nofile 65535\nnginx hard nofile 65535\nEOF\n\n# Kernel parameters for high-traffic sites\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;EOF\n# Network tuning for NGINX\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_max_tw_buckets = 400000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 15000 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 16777216\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 65536 16777216\nnet.ipv4.tcp_wmem = 4096 65536 16777216\nfs.file-max = 100000\nEOF\n\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"worker-process-optimization\" class=\"mobile-header\">Worker Process Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Calculate optimal worker configuration\necho &quot;CPU cores: $(nproc)&quot;\necho &quot;Recommended worker_processes: auto (or $(nproc))&quot;\necho &quot;Recommended worker_connections: 1024-4096&quot;\n\n# Update main configuration\nsudo tee /etc/nginx/conf.d/performance.conf &gt; /dev/null &lt;&lt;EOF\n# Worker optimization\nworker_processes auto;\nworker_rlimit_nofile 65535;\nworker_cpu_affinity auto;\n\nevents {\n    worker_connections 4096;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Connection optimization\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 30;\n    keepalive_requests 100;\n    reset_timedout_connection on;\n    \n    # Buffer optimization\n    client_body_buffer_size 128k;\n    client_max_body_size 10m;\n    client_header_buffer_size 1k;\n    large_client_header_buffers 4 4k;\n    output_buffers 1 32k;\n    postpone_output 1460;\n    \n    # Timeouts\n    client_header_timeout 3m;\n    client_body_timeout 3m;\n    send_timeout 3m;\n    \n    # Gzip optimization\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1000;\n    gzip_comp_level 6;\n    gzip_proxied any;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"caching-configuration\" class=\"mobile-header\">Caching Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create caching configuration\nsudo tee /etc/nginx/conf.d/caching.conf &gt; /dev/null &lt;&lt;EOF\n# Proxy cache configuration\nproxy_cache_path /var/cache/nginx/proxy levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;\n\n# FastCGI cache configuration\nfastcgi_cache_path /var/cache/nginx/fastcgi levels=1:2 keys_zone=fastcgi_cache:10m max_size=10g inactive=60m use_temp_path=off;\n\n# Create cache directories\nsudo mkdir -p /var/cache/nginx/{proxy,fastcgi}\nsudo chown -R nginx:nginx /var/cache/nginx\nsudo chmod -R 755 /var/cache/nginx\n\n# Browser caching\nmap \\$sent_http_content_type \\$expires {\n    default                    off;\n    text/html                  epoch;\n    text/css                   max;\n    application/javascript     max;\n    ~image/                    1y;\n    ~font/                     1y;\n    application/pdf            1y;\n}\n\nexpires \\$expires;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"cross-platform-verification-commands\" class=\"mobile-header\">Cross-Platform Verification Commands</h2>\n<h3 id=\"service-management-all-distributions\" class=\"mobile-header\">Service Management (All Distributions)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># SystemD (Most modern distros)\nsudo systemctl status nginx\nsudo systemctl start nginx\nsudo systemctl stop nginx\nsudo systemctl restart nginx\nsudo systemctl reload nginx\n\n# Check if systemd is available\nif command -v systemctl &amp;&gt; /dev/null; then\n    echo &quot;Using systemd&quot;\n    sudo systemctl enable --now nginx\nelse\n    echo &quot;Using traditional init&quot;\n    # For older systems or Alpine\n    sudo service nginx start\n    sudo chkconfig nginx on  # RHEL/CentOS 6\n    sudo rc-update add nginx default  # Alpine\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"configuration-testing-universal\" class=\"mobile-header\">Configuration Testing (Universal)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test configuration syntax\nsudo nginx -t\n\n# Test specific configuration file\nsudo nginx -t -c /etc/nginx/nginx.conf\n\n# Check configuration details\nsudo nginx -T\n\n# Show version and build info\nnginx -v\nnginx -V\n\n# Show loaded modules\nnginx -V 2&gt;&amp;1 | grep -o with-[a-z_]*</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-management-cross-platform\" class=\"mobile-header\">Log Management (Cross-Platform)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation configuration (works on all distros)\nsudo tee /etc/logrotate.d/nginx &gt; /dev/null &lt;&lt;EOF\n/var/log/nginx/*.log {\n    daily\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 644 nginx nginx\n    postrotate\n        if [ -f /var/run/nginx.pid ]; then\n            kill -USR1 \\`cat /var/run/nginx.pid\\`\n        fi\n    endscript\n}\nEOF\n\n# Manual log rotation test\nsudo logrotate -d /etc/logrotate.d/nginx\nsudo logrotate -f /etc/logrotate.d/nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-monitoring-universal\" class=\"mobile-header\">Performance Monitoring (Universal)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor NGINX processes\nps aux | grep nginx\nhtop -p $(pgrep nginx | tr &#039;\\n&#039; &#039;,&#039; | sed &#039;s/,$//&#039;)\n\n# Check connection statistics\nsudo netstat -tulpn | grep nginx\nsudo ss -tulpn | grep nginx\n\n# Monitor real-time connections\nwhile true; do echo &quot;$(date): $(sudo netstat -an | grep :80 | wc -l) connections&quot;; sleep 5; done\n\n# Check worker process CPU usage\ntop -p $(pgrep nginx | head -1)\n\n# Monitor access patterns\nsudo tail -f /var/log/nginx/access.log | cut -d&#039; &#039; -f1 | sort | uniq -c | sort -nr</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Permission denied errors (SELinux/AppArmor)\n# RHEL/CentOS with SELinux\nsudo setsebool -P httpd_can_network_connect 1\nsudo chcon -Rt httpd_exec_t /usr/sbin/nginx\n\n# Ubuntu with AppArmor\nsudo aa-complain /usr/sbin/nginx\n\n# File permission issues\nsudo chown -R nginx:nginx /var/www/html  # RHEL/CentOS\nsudo chown -R www-data:www-data /var/www/html  # Ubuntu/Debian\n\n# Check file contexts (SELinux)\nls -laZ /var/www/html/\nsudo restorecon -Rv /var/www/html/\n\n# Port binding issues\nsudo lsof -i :80\nsudo netstat -tulpn | grep :80\n\n# Configuration syntax errors\nsudo nginx -t\nsudo journalctl -u nginx -f\n\n# Memory issues\nfree -h\nsudo systemctl status nginx\nps aux --sort=-%mem | grep nginx\n\n# Check for core dumps\nfind /var/crash -name &quot;nginx*&quot; 2&gt;/dev/null\nfind /var/lib/systemd/coredump -name &quot;*nginx*&quot; 2&gt;/dev/null</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode-and-logging\" class=\"mobile-header\">Debug Mode and Logging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nsudo nano /etc/nginx/nginx.conf\n# Change: error_log /var/log/nginx/error.log debug;\n\n# Test in foreground (debugging)\nsudo nginx -g &#039;daemon off;&#039;\n\n# Check which user nginx is running as\nps aux | grep nginx\n\n# Verify listening addresses\nsudo nginx -T | grep listen\n\n# Check loaded modules\nnginx -V 2&gt;&amp;1 | tr &#039; &#039; &#039;\\n&#039; | grep module\n\n# Test configuration with different user\nsudo -u nginx nginx -t</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">This updated nginx guide now includes:</p>\n<li class=\"mobile-list-item\">✅ <strong>Cross-platform support</strong> (Ubuntu, Debian, RHEL, CentOS, Rocky, Fedora, Arch, openSUSE, Alpine)</li>\n<li class=\"mobile-list-item\">✅ <strong>Complete security hardening</strong> (2024 best practices, ModSecurity WAF, Fail2Ban)</li>\n<li class=\"mobile-list-item\">✅ <strong>Performance optimization</strong> (system tuning, caching, worker optimization)</li>\n<li class=\"mobile-list-item\">✅ <strong>SSL/TLS configuration</strong> (Let's Encrypt, self-signed, modern ciphers)</li>\n<li class=\"mobile-list-item\">✅ <strong>Comprehensive troubleshooting</strong> (SELinux, AppArmor, cross-platform debugging)</li>\n<p class=\"mobile-paragraph\">Should I continue updating the other guides with this same level of comprehensive cross-platform coverage?</p>","readTime":"15 min","wordCount":2979,"lastBuilt":"2025-09-14T01:15:30.681Z"},{"name":"nodejs","displayName":"Node.js","slug":"nodejs","description":"Repo for nodejs","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nodejs","updatedAt":"2025-09-08T03:12:42Z","createdAt":"2023-08-28T03:49:17Z","readmeRaw":"# Node.js Installation Guide\n\nJavaScript runtime built on Chrome's V8 JavaScript engine. Essential for running JavaScript applications on servers.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS/Fedora, or Arch)\n- curl or wget for downloading packages\n\n## Installation\n\n### Using NVM (Recommended)\n```bash\n# Install NVM\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\nsource ~/.bashrc\n\n# Install latest Node.js\nnvm install node\nnvm use node\n\n# Install LTS version\nnvm install --lts\nnvm use --lts\n\n# Install specific version\nnvm install v18.17.0\nnvm use v18.17.0\n```\n\n### System Package Installation\n\n#### Ubuntu/Debian\n```bash\n# Install build essentials\nsudo apt-get update\nsudo apt-get install -y build-essential\n\n# Add NodeSource repository\ncurl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n\n#### RHEL/CentOS/Fedora\n```bash\n# Install development tools\nsudo yum groupinstall 'Development Tools'\n\n# Add NodeSource repository  \ncurl -sL https://rpm.nodesource.com/setup_18.x | sudo bash -\nsudo yum install -y nodejs npm\n```\n\n#### Arch Linux\n```bash\n# Install from official repositories\nsudo pacman -S nodejs npm\n```\n\n## Configuration\n\n### NGINX Proxy Setup\n```bash\n# Create NGINX configuration\nsudo tee /etc/nginx/sites-available/nodejs-app > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name your-domain.com;\n    \n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \\$host;\n        proxy_cache_bypass \\$http_upgrade;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nodejs-app /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### SystemD Service\n```bash\n# Create systemd service for your app\nsudo tee /etc/systemd/system/myapp.service > /dev/null <<EOF\n[Unit]\nDescription=Node.js App\nAfter=network.target\n\n[Service]\nType=simple\nUser=www-data\nWorkingDirectory=/path/to/your/app\nExecStart=/usr/bin/node app.js\nRestart=on-failure\nRestartSec=10\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now myapp\n```\n\n## Verification\n\n```bash\n# Check Node.js version\nnode --version\nnpm --version\n\n# Test basic functionality\nnode -e \"console.log('Node.js is working!')\"\n\n# Check service status (if using systemd)\nsudo systemctl status myapp\n```\n\n## Usage\n\n1. Create your Node.js application\n2. Install dependencies with `npm install`\n3. Start development server with `npm start` or `node app.js`\n4. For production, use PM2 or systemd service\n5. Configure reverse proxy with NGINX\n\n## Additional Resources\n\n- [Official Documentation](https://nodejs.org/docs/)\n- [NPM Documentation](https://docs.npmjs.com/)\n- [NVM GitHub](https://github.com/nvm-sh/nvm)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"nodejs-installation-guide\" class=\"mobile-header\">Node.js Installation Guide</h1>\n<p class=\"mobile-paragraph\">JavaScript runtime built on Chrome's V8 JavaScript engine. Essential for running JavaScript applications on servers.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS/Fedora, or Arch)</li>\n<li class=\"mobile-list-item\">curl or wget for downloading packages</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-nvm-recommended\" class=\"mobile-header\">Using NVM (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NVM\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\nsource ~/.bashrc\n\n# Install latest Node.js\nnvm install node\nnvm use node\n\n# Install LTS version\nnvm install --lts\nnvm use --lts\n\n# Install specific version\nnvm install v18.17.0\nnvm use v18.17.0</code></pre>\n      </div>\n    </div>\n<h3 id=\"system-package-installation\" class=\"mobile-header\">System Package Installation</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install build essentials\nsudo apt-get update\nsudo apt-get install -y build-essential\n\n# Add NodeSource repository\ncurl -sL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install development tools\nsudo yum groupinstall &#039;Development Tools&#039;\n\n# Add NodeSource repository  \ncurl -sL https://rpm.nodesource.com/setup_18.x | sudo bash -\nsudo yum install -y nodejs npm</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from official repositories\nsudo pacman -S nodejs npm</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"nginx-proxy-setup\" class=\"mobile-header\">NGINX Proxy Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration\nsudo tee /etc/nginx/sites-available/nodejs-app &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 80;\n    server_name your-domain.com;\n    \n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &#039;upgrade&#039;;\n        proxy_set_header Host \\$host;\n        proxy_cache_bypass \\$http_upgrade;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nodejs-app /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service\" class=\"mobile-header\">SystemD Service</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service for your app\nsudo tee /etc/systemd/system/myapp.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Node.js App\nAfter=network.target\n\n[Service]\nType=simple\nUser=www-data\nWorkingDirectory=/path/to/your/app\nExecStart=/usr/bin/node app.js\nRestart=on-failure\nRestartSec=10\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now myapp</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Node.js version\nnode --version\nnpm --version\n\n# Test basic functionality\nnode -e &quot;console.log(&#039;Node.js is working!&#039;)&quot;\n\n# Check service status (if using systemd)\nsudo systemctl status myapp</code></pre>\n      </div>\n    </div>\n<h2 id=\"usage\" class=\"mobile-header\">Usage</h2>\n<p class=\"mobile-paragraph\">1. Create your Node.js application</p>\n<p class=\"mobile-paragraph\">2. Install dependencies with <code class=\"mobile-inline-code\">npm install</code></p>\n<p class=\"mobile-paragraph\">3. Start development server with <code class=\"mobile-inline-code\">npm start</code> or <code class=\"mobile-inline-code\">node app.js</code></p>\n<p class=\"mobile-paragraph\">4. For production, use PM2 or systemd service</p>\n<p class=\"mobile-paragraph\">5. Configure reverse proxy with NGINX</p>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://nodejs.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.npmjs.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">NPM Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">NVM GitHub</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"2 min","wordCount":374,"lastBuilt":"2025-09-14T01:15:30.551Z"},{"name":"odoo","displayName":"Odoo","slug":"odoo","description":"Repo for odoo","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/odoo","updatedAt":"2025-09-08T03:12:54Z","createdAt":"2025-09-08T03:12:44Z","readmeRaw":"## 👋 Welcome to odoo 🚀  \n\nodoo README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-odoo\" class=\"mobile-header\">👋 Welcome to odoo 🚀  </h2>\n<p class=\"mobile-paragraph\">odoo README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:30.430Z"},{"name":"openvpn","displayName":"Openvpn","slug":"openvpn","description":"Repo for openvpn","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/openvpn","updatedAt":"2025-09-08T03:13:07Z","createdAt":"2025-09-08T03:12:57Z","readmeRaw":"## 👋 Welcome to openvpn 🚀  \n\nopenvpn README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-openvpn\" class=\"mobile-header\">👋 Welcome to openvpn 🚀  </h2>\n<p class=\"mobile-paragraph\">openvpn README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:30.301Z"},{"name":"opnsense","displayName":"Opnsense","slug":"opnsense","description":"Repo for opnsense","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/opnsense","updatedAt":"2025-09-08T03:13:18Z","createdAt":"2025-09-08T03:13:08Z","readmeRaw":"## 👋 Welcome to opnsense 🚀  \n\nopnsense README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-opnsense\" class=\"mobile-header\">👋 Welcome to opnsense 🚀  </h2>\n<p class=\"mobile-paragraph\">opnsense README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:30.172Z"},{"name":"owncloud","displayName":"Owncloud","slug":"owncloud","description":"Repo for owncloud","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/owncloud","updatedAt":"2025-09-08T03:13:30Z","createdAt":"2025-09-08T03:13:20Z","readmeRaw":"## 👋 Welcome to owncloud 🚀  \n\nowncloud README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-owncloud\" class=\"mobile-header\">👋 Welcome to owncloud 🚀  </h2>\n<p class=\"mobile-paragraph\">owncloud README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:30.048Z"},{"name":"pfsense","displayName":"Pfsense","slug":"pfsense","description":"Repo for pfsense","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pfsense","updatedAt":"2025-09-08T03:13:43Z","createdAt":"2025-09-08T03:13:32Z","readmeRaw":"## 👋 Welcome to pfsense 🚀  \n\npfsense README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-pfsense\" class=\"mobile-header\">👋 Welcome to pfsense 🚀  </h2>\n<p class=\"mobile-paragraph\">pfsense README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:29.762Z"},{"name":"pgadmin","displayName":"Pgadmin","slug":"pgadmin","description":"Repo for pgadmin","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pgadmin","updatedAt":"2025-09-08T03:13:54Z","createdAt":"2025-09-08T03:13:44Z","readmeRaw":"## 👋 Welcome to pgadmin 🚀  \n\npgadmin README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-pgadmin\" class=\"mobile-header\">👋 Welcome to pgadmin 🚀  </h2>\n<p class=\"mobile-paragraph\">pgadmin README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:29.636Z"},{"name":"phpmyadmin","displayName":"Phpmyadmin","slug":"phpmyadmin","description":"Repo for phpmyadmin","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/phpmyadmin","updatedAt":"2025-09-08T03:14:06Z","createdAt":"2025-09-08T03:13:56Z","readmeRaw":"## 👋 Welcome to phpmyadmin 🚀  \n\nphpmyadmin README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-phpmyadmin\" class=\"mobile-header\">👋 Welcome to phpmyadmin 🚀  </h2>\n<p class=\"mobile-paragraph\">phpmyadmin README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:29.504Z"},{"name":"pihole","displayName":"Pi-hole","slug":"pihole","description":"Repo for pihole","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pihole","updatedAt":"2025-09-08T03:14:18Z","createdAt":"2025-09-08T03:14:08Z","readmeRaw":"## 👋 Welcome to pihole 🚀  \n\npihole README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-pihole\" class=\"mobile-header\">👋 Welcome to pihole 🚀  </h2>\n<p class=\"mobile-paragraph\">pihole README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:29.372Z"},{"name":"plex","displayName":"Plex","slug":"plex","description":"Repo for plex","category":"media","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/plex","updatedAt":"2025-09-08T03:14:30Z","createdAt":"2025-09-08T03:14:20Z","readmeRaw":"## 👋 Welcome to plex 🚀  \n\nplex README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-plex\" class=\"mobile-header\">👋 Welcome to plex 🚀  </h2>\n<p class=\"mobile-paragraph\">plex README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:29.226Z"},{"name":"portainer","displayName":"Portainer","slug":"portainer","description":"Repo for portainer","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/portainer","updatedAt":"2025-09-08T03:14:42Z","createdAt":"2025-09-08T03:14:32Z","readmeRaw":"## 👋 Welcome to portainer 🚀  \n\nportainer README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-portainer\" class=\"mobile-header\">👋 Welcome to portainer 🚀  </h2>\n<p class=\"mobile-paragraph\">portainer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:29.120Z"},{"name":"prometheus","displayName":"Prometheus","slug":"prometheus","description":"Repo for prometheus","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prometheus","updatedAt":"2025-09-08T03:14:53Z","createdAt":"2025-09-08T03:14:43Z","readmeRaw":"# Prometheus Installation Guide\n\nOpen-source monitoring and alerting toolkit. Collects and stores metrics as time series data for monitoring system performance.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Root or sudo access\n- 4GB RAM minimum, 8GB recommended for production\n- Persistent storage for time series data\n\n## Installation\n\n### Using Pre-compiled Binaries\n```bash\n# Create prometheus user\nsudo useradd --no-create-home --shell /bin/false prometheus\n\n# Create directories\nsudo mkdir -p /etc/prometheus /var/lib/prometheus\nsudo chown prometheus:prometheus /etc/prometheus /var/lib/prometheus\n\n# Download and install Prometheus\ncd /tmp\nwget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz\ntar xzf prometheus-2.45.0.linux-amd64.tar.gz\ncd prometheus-2.45.0.linux-amd64\n\n# Copy binaries\nsudo cp prometheus promtool /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/prometheus /usr/local/bin/promtool\n\n# Copy configuration files\nsudo cp -r consoles console_libraries /etc/prometheus/\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles /etc/prometheus/console_libraries\n```\n\n### Using Package Manager (Ubuntu/Debian)\n```bash\n# Add Prometheus APT repository\nwget -qO - https://packages.grafana.com/gpg.key | sudo apt-key add -\necho \"deb https://packages.grafana.com/oss/deb stable main\" | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Install Prometheus\nsudo apt update\nsudo apt install -y prometheus\n\n# Start and enable Prometheus\nsudo systemctl enable --now prometheus\n```\n\n### Using Docker\n```bash\n# Create directories for persistent data\nmkdir -p ~/prometheus/data ~/prometheus/config\n\n# Create basic configuration\ncat > ~/prometheus/config/prometheus.yml <<EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  - job_name: 'node'\n    static_configs:\n      - targets: ['localhost:9100']\nEOF\n\n# Run Prometheus container\ndocker run -d \\\n  --name prometheus \\\n  -p 9090:9090 \\\n  -v ~/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml \\\n  -v ~/prometheus/data:/prometheus \\\n  prom/prometheus:latest \\\n  --config.file=/etc/prometheus/prometheus.yml \\\n  --storage.tsdb.path=/prometheus \\\n  --web.console.libraries=/etc/prometheus/console_libraries \\\n  --web.console.templates=/etc/prometheus/consoles \\\n  --storage.tsdb.retention.time=200h \\\n  --web.enable-lifecycle\n```\n\n## Configuration\n\n### Basic Configuration\n```bash\n# Create main configuration file\nsudo tee /etc/prometheus/prometheus.yml > /dev/null <<EOF\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  - \"/etc/prometheus/rules/*.yml\"\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  - job_name: 'node-exporter'\n    static_configs:\n      - targets: \n        - 'localhost:9100'\n        - '192.168.1.10:9100'\n        - '192.168.1.11:9100'\n\n  - job_name: 'blackbox'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://google.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  - job_name: 'nginx-exporter'\n    static_configs:\n      - targets: ['localhost:9113']\n\n  - job_name: 'mysql-exporter'\n    static_configs:\n      - targets: ['localhost:9104']\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml\n```\n\n### Create SystemD Service\n```bash\nsudo tee /etc/systemd/system/prometheus.service > /dev/null <<EOF\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=200h \\\n    --web.enable-lifecycle\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now prometheus\n```\n\n### Install Node Exporter\n```bash\n# Download Node Exporter\ncd /tmp\nwget https://github.com/prometheus/node_exporter/releases/download/v1.6.0/node_exporter-1.6.0.linux-amd64.tar.gz\ntar xzf node_exporter-1.6.0.linux-amd64.tar.gz\n\n# Install Node Exporter\nsudo cp node_exporter-1.6.0.linux-amd64/node_exporter /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/node_exporter\n\n# Create systemd service for Node Exporter\nsudo tee /etc/systemd/system/node_exporter.service > /dev/null <<EOF\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/node_exporter \\\n    --collector.systemd \\\n    --collector.processes \\\n    --collector.interrupts\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now node_exporter\n```\n\n## Alerting Rules\n\n```bash\n# Create rules directory\nsudo mkdir -p /etc/prometheus/rules\nsudo chown prometheus:prometheus /etc/prometheus/rules\n\n# Create basic alerting rules\nsudo tee /etc/prometheus/rules/basic.yml > /dev/null <<EOF\ngroups:\n- name: basic.rules\n  rules:\n  - alert: InstanceDown\n    expr: up == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Instance {{ \\$labels.instance }} down\"\n      description: \"{{ \\$labels.instance }} of job {{ \\$labels.job }} has been down for more than 1 minute.\"\n\n  - alert: HighCpuLoad\n    expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High CPU load (instance {{ \\$labels.instance }})\"\n      description: \"CPU load is > 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}\"\n\n  - alert: HighMemoryLoad\n    expr: (sum(node_memory_MemTotal_bytes) - sum(node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) ) / sum(node_memory_MemTotal_bytes) * 100 > 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High memory load (instance {{ \\$labels.instance }})\"\n      description: \"Memory load is > 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}\"\n\n  - alert: HighDiskLoad\n    expr: 100 - ((node_filesystem_avail_bytes{mountpoint=\"/\",fstype!=\"rootfs\"} * 100) / node_filesystem_size_bytes{mountpoint=\"/\",fstype!=\"rootfs\"}) > 85\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High disk load (instance {{ \\$labels.instance }})\"\n      description: \"Disk load is > 85%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}\"\n\n  - alert: ServiceDown\n    expr: node_systemd_unit_state{state=\"active\"} == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Service {{ \\$labels.name }} down on {{ \\$labels.instance }}\"\n      description: \"Service {{ \\$labels.name }} is down on {{ \\$labels.instance }}\"\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/rules/basic.yml\n```\n\n## Service Discovery\n\n### File-based Service Discovery\n```bash\n# Create service discovery directory\nsudo mkdir -p /etc/prometheus/targets\nsudo chown prometheus:prometheus /etc/prometheus/targets\n\n# Create target files\nsudo tee /etc/prometheus/targets/web-servers.json > /dev/null <<EOF\n[\n  {\n    \"targets\": [\"192.168.1.10:9100\", \"192.168.1.11:9100\"],\n    \"labels\": {\n      \"job\": \"web-servers\",\n      \"environment\": \"production\",\n      \"team\": \"infrastructure\"\n    }\n  },\n  {\n    \"targets\": [\"192.168.1.20:9100\", \"192.168.1.21:9100\"],\n    \"labels\": {\n      \"job\": \"database-servers\",\n      \"environment\": \"production\",\n      \"team\": \"database\"\n    }\n  }\n]\nEOF\n\n# Update prometheus.yml to use file discovery\nsudo tee -a /etc/prometheus/prometheus.yml > /dev/null <<EOF\n\n  - job_name: 'file-discovery'\n    file_sd_configs:\n      - files:\n        - '/etc/prometheus/targets/*.json'\n        refresh_interval: 1m\nEOF\n```\n\n## Firewall Configuration\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 9090/tcp  # Prometheus web UI\nsudo ufw allow 9100/tcp  # Node Exporter\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --permanent --add-port=9100/tcp\nsudo firewall-cmd --reload\n```\n\n## Verification\n\n```bash\n# Check Prometheus status\nsudo systemctl status prometheus\n\n# Check Node Exporter status\nsudo systemctl status node_exporter\n\n# Test Prometheus configuration\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Test alerting rules\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Check if services are listening\nsudo netstat -tulpn | grep -E ':(9090|9100)'\n\n# Test web interface\ncurl http://localhost:9090/metrics\ncurl http://localhost:9100/metrics\n\n# Query Prometheus API\ncurl -G http://localhost:9090/api/v1/query --data-urlencode 'query=up'\n\n# View targets status\ncurl http://localhost:9090/api/v1/targets\n```\n\n## Common Exporters Installation\n\n### NGINX Exporter\n```bash\n# Download and install nginx-exporter\ncd /tmp\nwget https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v0.10.0/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\ntar xzf nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\nsudo cp nginx-prometheus-exporter /usr/local/bin/\n\n# Configure NGINX stub status\necho 'server {\n    listen 127.0.0.1:8080;\n    location /stub_status {\n        stub_status on;\n        allow 127.0.0.1;\n        deny all;\n    }\n}' | sudo tee /etc/nginx/sites-available/stub_status\n\nsudo ln -s /etc/nginx/sites-available/stub_status /etc/nginx/sites-enabled/\nsudo systemctl reload nginx\n\n# Create systemd service\nsudo tee /etc/systemd/system/nginx-exporter.service > /dev/null <<EOF\n[Unit]\nDescription=NGINX Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/nginx-prometheus-exporter -nginx.scrape-uri=http://127.0.0.1:8080/stub_status\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nginx-exporter\n```\n\n### MySQL Exporter\n```bash\n# Create MySQL user for monitoring\nmysql -u root -p <<EOF\nCREATE USER 'exporter'@'localhost' IDENTIFIED BY 'XXXXXXXX' WITH MAX_USER_CONNECTIONS 3;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Download and install mysqld-exporter\ncd /tmp\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-0.14.0.linux-amd64.tar.gz\nsudo cp mysqld_exporter-0.14.0.linux-amd64/mysqld_exporter /usr/local/bin/\n\n# Create configuration file\nsudo tee /etc/prometheus/.my.cnf > /dev/null <<EOF\n[client]\nuser=exporter\npassword=XXXXXXXX\nhost=localhost\nport=3306\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/.my.cnf\nsudo chmod 600 /etc/prometheus/.my.cnf\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysql-exporter.service > /dev/null <<EOF\n[Unit]\nDescription=MySQL Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nEnvironment=DATA_SOURCE_NAME=exporter:XXXXXXXX@(localhost:3306)/\nExecStart=/usr/local/bin/mysqld_exporter --config.my-cnf=/etc/prometheus/.my.cnf\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now mysql-exporter\n```\n\n## Performance Tuning\n\n```bash\n# Update Prometheus configuration for performance\nsudo tee -a /etc/prometheus/prometheus.yml > /dev/null <<EOF\n\nglobal:\n  scrape_interval:     30s\n  evaluation_interval: 30s\n  external_labels:\n    cluster: 'production'\n    replica: 'prometheus-01'\n\n# Performance settings for systemd service\nsudo tee /etc/systemd/system/prometheus.service.d/performance.conf > /dev/null <<EOF\n[Service]\nExecStart=\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=30d \\\n    --storage.tsdb.retention.size=50GB \\\n    --storage.tsdb.wal-compression \\\n    --web.enable-lifecycle \\\n    --web.enable-admin-api\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart prometheus\n```\n\n## Backup and Restore\n\n```bash\n# Create backup script\nsudo tee /usr/local/bin/prometheus-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/prometheus\"\nPROMETHEUS_DATA=\"/var/lib/prometheus\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Stop Prometheus\nsystemctl stop prometheus\n\n# Create backup\ntar -czf ${BACKUP_DIR}/prometheus_backup_${DATE}.tar.gz -C ${PROMETHEUS_DATA} .\n\n# Start Prometheus\nsystemctl start prometheus\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"prometheus_backup_*.tar.gz\" -type f -mtime +7 -delete\n\necho \"Backup completed: prometheus_backup_${DATE}.tar.gz\"\nEOF\n\nsudo chmod +x /usr/local/bin/prometheus-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/prometheus-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting\n\n```bash\n# Check Prometheus logs\nsudo journalctl -u prometheus -f\n\n# Check Node Exporter logs\nsudo journalctl -u node_exporter -f\n\n# Verify configuration syntax\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Check rule syntax\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Test specific target connectivity\ncurl -m 5 http://192.168.1.10:9100/metrics\n\n# Check disk space usage\ndu -sh /var/lib/prometheus/\n\n# View current configuration\ncurl http://localhost:9090/api/v1/status/config\n\n# Reload configuration without restart\ncurl -X POST http://localhost:9090/-/reload\n```\n\n## Additional Resources\n\n- [Official Documentation](https://prometheus.io/docs/)\n- [Prometheus Configuration](https://prometheus.io/docs/prometheus/latest/configuration/configuration/)\n- [Alerting Rules](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/)\n- [Best Practices](https://prometheus.io/docs/practices/rules/)\n- [Exporters and Integrations](https://prometheus.io/docs/instrumenting/exporters/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"prometheus-installation-guide\" class=\"mobile-header\">Prometheus Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source monitoring and alerting toolkit. Collects and stores metrics as time series data for monitoring system performance.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB recommended for production</li>\n<li class=\"mobile-list-item\">Persistent storage for time series data</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-pre-compiled-binaries\" class=\"mobile-header\">Using Pre-compiled Binaries</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create prometheus user\nsudo useradd --no-create-home --shell /bin/false prometheus\n\n# Create directories\nsudo mkdir -p /etc/prometheus /var/lib/prometheus\nsudo chown prometheus:prometheus /etc/prometheus /var/lib/prometheus\n\n# Download and install Prometheus\ncd /tmp\nwget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz\ntar xzf prometheus-2.45.0.linux-amd64.tar.gz\ncd prometheus-2.45.0.linux-amd64\n\n# Copy binaries\nsudo cp prometheus promtool /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/prometheus /usr/local/bin/promtool\n\n# Copy configuration files\nsudo cp -r consoles console_libraries /etc/prometheus/\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles /etc/prometheus/console_libraries</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-package-manager-ubuntudebian\" class=\"mobile-header\">Using Package Manager (Ubuntu/Debian)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Prometheus APT repository\nwget -qO - https://packages.grafana.com/gpg.key | sudo apt-key add -\necho &quot;deb https://packages.grafana.com/oss/deb stable main&quot; | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Install Prometheus\nsudo apt update\nsudo apt install -y prometheus\n\n# Start and enable Prometheus\nsudo systemctl enable --now prometheus</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create directories for persistent data\nmkdir -p ~/prometheus/data ~/prometheus/config\n\n# Create basic configuration\ncat &gt; ~/prometheus/config/prometheus.yml &lt;&lt;EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  # - &quot;first_rules.yml&quot;\n  # - &quot;second_rules.yml&quot;\n\nscrape_configs:\n  - job_name: &#039;prometheus&#039;\n    static_configs:\n      - targets: [&#039;localhost:9090&#039;]\n\n  - job_name: &#039;node&#039;\n    static_configs:\n      - targets: [&#039;localhost:9100&#039;]\nEOF\n\n# Run Prometheus container\ndocker run -d \\\n  --name prometheus \\\n  -p 9090:9090 \\\n  -v ~/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml \\\n  -v ~/prometheus/data:/prometheus \\\n  prom/prometheus:latest \\\n  --config.file=/etc/prometheus/prometheus.yml \\\n  --storage.tsdb.path=/prometheus \\\n  --web.console.libraries=/etc/prometheus/console_libraries \\\n  --web.console.templates=/etc/prometheus/consoles \\\n  --storage.tsdb.retention.time=200h \\\n  --web.enable-lifecycle</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create main configuration file\nsudo tee /etc/prometheus/prometheus.yml &gt; /dev/null &lt;&lt;EOF\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  - &quot;/etc/prometheus/rules/*.yml&quot;\n\nscrape_configs:\n  - job_name: &#039;prometheus&#039;\n    static_configs:\n      - targets: [&#039;localhost:9090&#039;]\n\n  - job_name: &#039;node-exporter&#039;\n    static_configs:\n      - targets: \n        - &#039;localhost:9100&#039;\n        - &#039;192.168.1.10:9100&#039;\n        - &#039;192.168.1.11:9100&#039;\n\n  - job_name: &#039;blackbox&#039;\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://google.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  - job_name: &#039;nginx-exporter&#039;\n    static_configs:\n      - targets: [&#039;localhost:9113&#039;]\n\n  - job_name: &#039;mysql-exporter&#039;\n    static_configs:\n      - targets: [&#039;localhost:9104&#039;]\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"create-systemd-service\" class=\"mobile-header\">Create SystemD Service</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/systemd/system/prometheus.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=200h \\\n    --web.enable-lifecycle\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now prometheus</code></pre>\n      </div>\n    </div>\n<h3 id=\"install-node-exporter\" class=\"mobile-header\">Install Node Exporter</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Node Exporter\ncd /tmp\nwget https://github.com/prometheus/node_exporter/releases/download/v1.6.0/node_exporter-1.6.0.linux-amd64.tar.gz\ntar xzf node_exporter-1.6.0.linux-amd64.tar.gz\n\n# Install Node Exporter\nsudo cp node_exporter-1.6.0.linux-amd64/node_exporter /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/node_exporter\n\n# Create systemd service for Node Exporter\nsudo tee /etc/systemd/system/node_exporter.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/node_exporter \\\n    --collector.systemd \\\n    --collector.processes \\\n    --collector.interrupts\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now node_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"alerting-rules\" class=\"mobile-header\">Alerting Rules</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create rules directory\nsudo mkdir -p /etc/prometheus/rules\nsudo chown prometheus:prometheus /etc/prometheus/rules\n\n# Create basic alerting rules\nsudo tee /etc/prometheus/rules/basic.yml &gt; /dev/null &lt;&lt;EOF\ngroups:\n- name: basic.rules\n  rules:\n  - alert: InstanceDown\n    expr: up == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: &quot;Instance {{ \\$labels.instance }} down&quot;\n      description: &quot;{{ \\$labels.instance }} of job {{ \\$labels.job }} has been down for more than 1 minute.&quot;\n\n  - alert: HighCpuLoad\n    expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=&quot;idle&quot;}[5m])) * 100) &gt; 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: &quot;High CPU load (instance {{ \\$labels.instance }})&quot;\n      description: &quot;CPU load is &gt; 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}&quot;\n\n  - alert: HighMemoryLoad\n    expr: (sum(node_memory_MemTotal_bytes) - sum(node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) ) / sum(node_memory_MemTotal_bytes) * 100 &gt; 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: &quot;High memory load (instance {{ \\$labels.instance }})&quot;\n      description: &quot;Memory load is &gt; 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}&quot;\n\n  - alert: HighDiskLoad\n    expr: 100 - ((node_filesystem_avail_bytes{mountpoint=&quot;/&quot;,fstype!=&quot;rootfs&quot;} * 100) / node_filesystem_size_bytes{mountpoint=&quot;/&quot;,fstype!=&quot;rootfs&quot;}) &gt; 85\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: &quot;High disk load (instance {{ \\$labels.instance }})&quot;\n      description: &quot;Disk load is &gt; 85%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}&quot;\n\n  - alert: ServiceDown\n    expr: node_systemd_unit_state{state=&quot;active&quot;} == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: &quot;Service {{ \\$labels.name }} down on {{ \\$labels.instance }}&quot;\n      description: &quot;Service {{ \\$labels.name }} is down on {{ \\$labels.instance }}&quot;\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/rules/basic.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-discovery\" class=\"mobile-header\">Service Discovery</h2>\n<h3 id=\"file-based-service-discovery\" class=\"mobile-header\">File-based Service Discovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create service discovery directory\nsudo mkdir -p /etc/prometheus/targets\nsudo chown prometheus:prometheus /etc/prometheus/targets\n\n# Create target files\nsudo tee /etc/prometheus/targets/web-servers.json &gt; /dev/null &lt;&lt;EOF\n[\n  {\n    &quot;targets&quot;: [&quot;192.168.1.10:9100&quot;, &quot;192.168.1.11:9100&quot;],\n    &quot;labels&quot;: {\n      &quot;job&quot;: &quot;web-servers&quot;,\n      &quot;environment&quot;: &quot;production&quot;,\n      &quot;team&quot;: &quot;infrastructure&quot;\n    }\n  },\n  {\n    &quot;targets&quot;: [&quot;192.168.1.20:9100&quot;, &quot;192.168.1.21:9100&quot;],\n    &quot;labels&quot;: {\n      &quot;job&quot;: &quot;database-servers&quot;,\n      &quot;environment&quot;: &quot;production&quot;,\n      &quot;team&quot;: &quot;database&quot;\n    }\n  }\n]\nEOF\n\n# Update prometheus.yml to use file discovery\nsudo tee -a /etc/prometheus/prometheus.yml &gt; /dev/null &lt;&lt;EOF\n\n  - job_name: &#039;file-discovery&#039;\n    file_sd_configs:\n      - files:\n        - &#039;/etc/prometheus/targets/*.json&#039;\n        refresh_interval: 1m\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 9090/tcp  # Prometheus web UI\nsudo ufw allow 9100/tcp  # Node Exporter\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --permanent --add-port=9100/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Prometheus status\nsudo systemctl status prometheus\n\n# Check Node Exporter status\nsudo systemctl status node_exporter\n\n# Test Prometheus configuration\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Test alerting rules\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Check if services are listening\nsudo netstat -tulpn | grep -E &#039;:(9090|9100)&#039;\n\n# Test web interface\ncurl http://localhost:9090/metrics\ncurl http://localhost:9100/metrics\n\n# Query Prometheus API\ncurl -G http://localhost:9090/api/v1/query --data-urlencode &#039;query=up&#039;\n\n# View targets status\ncurl http://localhost:9090/api/v1/targets</code></pre>\n      </div>\n    </div>\n<h2 id=\"common-exporters-installation\" class=\"mobile-header\">Common Exporters Installation</h2>\n<h3 id=\"nginx-exporter\" class=\"mobile-header\">NGINX Exporter</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download and install nginx-exporter\ncd /tmp\nwget https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v0.10.0/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\ntar xzf nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\nsudo cp nginx-prometheus-exporter /usr/local/bin/\n\n# Configure NGINX stub status\necho &#039;server {\n    listen 127.0.0.1:8080;\n    location /stub_status {\n        stub_status on;\n        allow 127.0.0.1;\n        deny all;\n    }\n}&#039; | sudo tee /etc/nginx/sites-available/stub_status\n\nsudo ln -s /etc/nginx/sites-available/stub_status /etc/nginx/sites-enabled/\nsudo systemctl reload nginx\n\n# Create systemd service\nsudo tee /etc/systemd/system/nginx-exporter.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=NGINX Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/nginx-prometheus-exporter -nginx.scrape-uri=http://127.0.0.1:8080/stub_status\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nginx-exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-exporter\" class=\"mobile-header\">MySQL Exporter</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create MySQL user for monitoring\nmysql -u root -p &lt;&lt;EOF\nCREATE USER &#039;exporter&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;XXXXXXXX&#039; WITH MAX_USER_CONNECTIONS 3;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#039;exporter&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Download and install mysqld-exporter\ncd /tmp\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-0.14.0.linux-amd64.tar.gz\nsudo cp mysqld_exporter-0.14.0.linux-amd64/mysqld_exporter /usr/local/bin/\n\n# Create configuration file\nsudo tee /etc/prometheus/.my.cnf &gt; /dev/null &lt;&lt;EOF\n[client]\nuser=exporter\npassword=XXXXXXXX\nhost=localhost\nport=3306\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/.my.cnf\nsudo chmod 600 /etc/prometheus/.my.cnf\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysql-exporter.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=MySQL Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nEnvironment=DATA_SOURCE_NAME=exporter:XXXXXXXX@(localhost:3306)/\nExecStart=/usr/local/bin/mysqld_exporter --config.my-cnf=/etc/prometheus/.my.cnf\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now mysql-exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-tuning\" class=\"mobile-header\">Performance Tuning</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update Prometheus configuration for performance\nsudo tee -a /etc/prometheus/prometheus.yml &gt; /dev/null &lt;&lt;EOF\n\nglobal:\n  scrape_interval:     30s\n  evaluation_interval: 30s\n  external_labels:\n    cluster: &#039;production&#039;\n    replica: &#039;prometheus-01&#039;\n\n# Performance settings for systemd service\nsudo tee /etc/systemd/system/prometheus.service.d/performance.conf &gt; /dev/null &lt;&lt;EOF\n[Service]\nExecStart=\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=30d \\\n    --storage.tsdb.retention.size=50GB \\\n    --storage.tsdb.wal-compression \\\n    --web.enable-lifecycle \\\n    --web.enable-admin-api\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart prometheus</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/prometheus-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/prometheus&quot;\nPROMETHEUS_DATA=&quot;/var/lib/prometheus&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Stop Prometheus\nsystemctl stop prometheus\n\n# Create backup\ntar -czf ${BACKUP_DIR}/prometheus_backup_${DATE}.tar.gz -C ${PROMETHEUS_DATA} .\n\n# Start Prometheus\nsystemctl start prometheus\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;prometheus_backup_*.tar.gz&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: prometheus_backup_${DATE}.tar.gz&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/prometheus-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/prometheus-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Prometheus logs\nsudo journalctl -u prometheus -f\n\n# Check Node Exporter logs\nsudo journalctl -u node_exporter -f\n\n# Verify configuration syntax\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Check rule syntax\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Test specific target connectivity\ncurl -m 5 http://192.168.1.10:9100/metrics\n\n# Check disk space usage\ndu -sh /var/lib/prometheus/\n\n# View current configuration\ncurl http://localhost:9090/api/v1/status/config\n\n# Reload configuration without restart\ncurl -X POST http://localhost:9090/-/reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/prometheus/latest/configuration/configuration/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prometheus Configuration</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Alerting Rules</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/practices/rules/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/instrumenting/exporters/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Exporters and Integrations</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"7 min","wordCount":1385,"lastBuilt":"2025-09-14T01:15:29.015Z"},{"name":"prosody","displayName":"Prosody","slug":"prosody","description":"Repo for prosody","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prosody","updatedAt":"2025-09-08T03:14:59Z","createdAt":"2023-08-28T03:49:26Z","readmeRaw":"#### Prosody IM Server\n\n```shell\nmkdir -p /var/lib/docker/storage/prosody && chmod -Rf 777 /var/lib/docker/storage/prosody\ndocker run -d \\\n   -p 82:80\n   -p 5222:5222 \\\n   -p 5269:5269 \\\n   -p 5281:5281\n   -p 5347:5347 \\\n   -e LOCAL=admin \\\n   -e DOMAIN=MYDOMAIN \\\n   -e PASSWORD=juliet4ever \\\n   -v /var/lib/docker/storage/prosody/log:/var/log/prosody \\\n   -v /var/lib/docker/storage/prosody/configuration:/etc/prosody \\\n   -v /var/lib/docker/storage/prosody/modules:/usr/lib/prosody-modules \\\n   prosody/prosody\n```\n","readmeHtml":"<p class=\"mobile-paragraph\">#### Prosody IM Server</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /var/lib/docker/storage/prosody &amp;&amp; chmod -Rf 777 /var/lib/docker/storage/prosody\ndocker run -d \\\n   -p 82:80\n   -p 5222:5222 \\\n   -p 5269:5269 \\\n   -p 5281:5281\n   -p 5347:5347 \\\n   -e LOCAL=admin \\\n   -e DOMAIN=MYDOMAIN \\\n   -e PASSWORD=juliet4ever \\\n   -v /var/lib/docker/storage/prosody/log:/var/log/prosody \\\n   -v /var/lib/docker/storage/prosody/configuration:/etc/prosody \\\n   -v /var/lib/docker/storage/prosody/modules:/usr/lib/prosody-modules \\\n   prosody/prosody</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T01:15:28.861Z"},{"name":"proxmox","displayName":"Proxmox","slug":"proxmox","description":"Repo for proxmox","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/proxmox","updatedAt":"2025-09-08T03:15:04Z","createdAt":"2023-08-28T03:49:36Z","readmeRaw":"# Install docker\n\n### ZFS\n\n```shell\nzfs create -o mountpoint=/var/lib/docker rpool/docker\nmkdir /etc/systemd/system/docker.service.d\ncurl -q -LSs https://github.com/casjay-base/howtos/raw/main/proxmox/storage-driver.conf >/etc/systemd/system/docker.service.d/storage-driver.conf\n```\n\n### Docker\n\n```shell\napt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\ncurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\napt-key fingerprint 0EBFCD88\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\"\napt-get update && apt-get install docker-ce -y\n```\n\n### Yacht\n\n```shell\nmkdir -p \"/root/.local/share/srv/docker/yacht/\"\nsudo docker run -d \\\n    --name=\"yacht\" \\\n    --hostname \"yacht\" \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=\"${TZ:-${TIMEZONE:-America/New_York}}\" \\\n    -v \"/root/.local/share/srv/docker/yacht/data\":/data \\\n    -v \"/root/.local/share/srv/docker/yacht/config\":/config \\\n    -p 8000:8000 \\\n    selfhostedpro/yacht 1>/dev/null\n```\n\n### Portainer\n\n```shell\nmkdir -p /root/.local/share/srv/docker/portainer/data\ndocker run -d -p 9000:9000 \\\n    --name portainer \\\n    -v /root/.local/share/srv/docker/portainer/data:/data \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    portainer/portainer-ce\n```\n\n### nginx\n\n```shell\nmkdir -p /root/.local/share/srv/docker/nginx-manager/files/{data,config,letsencrypt}\nsudo docker run -d \\\n    --name=\"nginx-manager\" \\\n    --hostname \"$HOSTNAME\" \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=\"America/New_York\" \\\n    -e DISABLE_IPV6=true \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/data\":/data \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/config\":/app/config \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/letsencrypt\":/etc/letsencrypt \\\n    -p 80:80 \\\n    -p 8888:81 \\\n    -p 443:443 \\\n    jc21/nginx-proxy-manager:2\n```\n","readmeHtml":"<h1 id=\"install-docker\" class=\"mobile-header\">Install docker</h1>\n<h3 id=\"zfs\" class=\"mobile-header\">ZFS</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">zfs create -o mountpoint=/var/lib/docker rpool/docker\nmkdir /etc/systemd/system/docker.service.d\ncurl -q -LSs https://github.com/casjay-base/howtos/raw/main/proxmox/storage-driver.conf &gt;/etc/systemd/system/docker.service.d/storage-driver.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker\" class=\"mobile-header\">Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\ncurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\napt-key fingerprint 0EBFCD88\nadd-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable&quot;\napt-get update &amp;&amp; apt-get install docker-ce -y</code></pre>\n      </div>\n    </div>\n<h3 id=\"yacht\" class=\"mobile-header\">Yacht</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p &quot;/root/.local/share/srv/docker/yacht/&quot;\nsudo docker run -d \\\n    --name=&quot;yacht&quot; \\\n    --hostname &quot;yacht&quot; \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=&quot;${TZ:-${TIMEZONE:-America/New_York}}&quot; \\\n    -v &quot;/root/.local/share/srv/docker/yacht/data&quot;:/data \\\n    -v &quot;/root/.local/share/srv/docker/yacht/config&quot;:/config \\\n    -p 8000:8000 \\\n    selfhostedpro/yacht 1&gt;/dev/null</code></pre>\n      </div>\n    </div>\n<h3 id=\"portainer\" class=\"mobile-header\">Portainer</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /root/.local/share/srv/docker/portainer/data\ndocker run -d -p 9000:9000 \\\n    --name portainer \\\n    -v /root/.local/share/srv/docker/portainer/data:/data \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    portainer/portainer-ce</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx\" class=\"mobile-header\">nginx</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /root/.local/share/srv/docker/nginx-manager/files/{data,config,letsencrypt}\nsudo docker run -d \\\n    --name=&quot;nginx-manager&quot; \\\n    --hostname &quot;$HOSTNAME&quot; \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=&quot;America/New_York&quot; \\\n    -e DISABLE_IPV6=true \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/data&quot;:/data \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/config&quot;:/app/config \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/letsencrypt&quot;:/etc/letsencrypt \\\n    -p 80:80 \\\n    -p 8888:81 \\\n    -p 443:443 \\\n    jc21/nginx-proxy-manager:2</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":160,"lastBuilt":"2025-09-14T01:15:28.745Z"},{"name":"rabbitmq","displayName":"Rabbitmq","slug":"rabbitmq","description":"Repo for rabbitmq","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/rabbitmq","updatedAt":"2025-09-08T03:15:23Z","createdAt":"2025-09-08T03:15:11Z","readmeRaw":"## 👋 Welcome to rabbitmq 🚀  \n\nrabbitmq README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-rabbitmq\" class=\"mobile-header\">👋 Welcome to rabbitmq 🚀  </h2>\n<p class=\"mobile-paragraph\">rabbitmq README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:28.594Z"},{"name":"rancher","displayName":"Rancher","slug":"rancher","description":"Repo for rancher","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/rancher","updatedAt":"2025-09-08T03:15:28Z","createdAt":"2023-08-28T03:49:46Z","readmeRaw":"### Docker, Rancher, and Kubernetes  \n  \nDocker\n\n```shell\nsudo groupadd docker; sudo usermod -aG docker $USER; newgrp docker \ncurl -fsSL https://github.com/docker/docker-install/raw/main/install.sh | sudo sh\nsudo systemctl enable --now docker\n```\n  \nRancher  \n\n```shell\nsudo docker run -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:latest\n```\n  \nKubernetes\n\n```shell\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nsudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n```\n\nMiniKube\n\n```shell\n curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\n sudo install minikube-linux-amd64 /usr/local/bin/minikube\n minikube start\n```\n\nClean up\n\n```shell\nrm kubectl\nrm minikube\n```\n  \nSources:  \n<https://www.youtube.com/watch?oILc0ywDVTk>  \n<https://rancher.com/docs/rancher/v2.x/en/installation/requirements/installing-docker/>  \n<https://rancher.com/docs/rancher/v2.x/en/installation/other-installation-methods/single-node-docker/>  \n","readmeHtml":"<h3 id=\"docker-rancher-and-kubernetes\" class=\"mobile-header\">Docker, Rancher, and Kubernetes  </h3>\n<p class=\"mobile-paragraph\">Docker</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo groupadd docker; sudo usermod -aG docker $USER; newgrp docker \ncurl -fsSL https://github.com/docker/docker-install/raw/main/install.sh | sudo sh\nsudo systemctl enable --now docker</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Rancher  </p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo docker run -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:latest</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Kubernetes</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;\nsudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">MiniKube</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\"> curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\n sudo install minikube-linux-amd64 /usr/local/bin/minikube\n minikube start</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Clean up</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">rm kubectl\nrm minikube</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Sources:  </p>\n<p class=\"mobile-paragraph\"><https://www.youtube.com/watch?oILc0ywDVTk>  </p>\n<p class=\"mobile-paragraph\"><https://rancher.com/docs/rancher/v2.x/en/installation/requirements/installing-docker/>  </p>\n<p class=\"mobile-paragraph\"><https://rancher.com/docs/rancher/v2.x/en/installation/other-installation-methods/single-node-docker/>  </p>","readTime":"1 min","wordCount":86,"lastBuilt":"2025-09-14T01:15:28.493Z"},{"name":"raspbian","displayName":"Raspbian","slug":"raspbian","description":"Repo for raspbian","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/raspbian","updatedAt":"2025-09-08T03:15:35Z","createdAt":"2023-08-28T03:49:55Z","readmeRaw":"## My raspbian setup  \n  \nServers:  \n\n```shell\nsudo apt update && sudo apt dist-upgrade -yy -q && sudo reboot || echo \"Update has failed\"\nsudo apt install -yy git curl gnupg python3 vim-nox pass lynx net-tools ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c \"$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)\"\nbash -c \"$(curl -LsS -H \"Authorization: token ${GITHUB_ACCESS_TOKEN}\" ${MYPRIVATEDOTFILES_SERVER}/raw/main/install.sh)\"\n```\n\nDesktops:  \n\n```shell\nsudo apt update && sudo apt dist-upgrade -yy -q && sudo reboot || echo \"Update has failed\"\nsudo apt install -yy git curl gnupg python3 python3-pil libjpeg-dev vim-nox neomutt isync msmtp pass lynx notmuch abook urlview newsboat mplayer mpc mpd pianobar net-tools mpv ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c \"$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)\"\nbash -c \"$(curl -LsS -H \"Authorization: token ${GITHUB_ACCESS_TOKEN}\" ${MYPRIVATEDOTFILES_DESKTOP}/raw/main/install.sh)\"\n```\n  \n  \nResources:  \n<https://willemm.nl/track-aircraft-using-ads-b-groundstation-virtual-radar-server-vrs/>  \n","readmeHtml":"<h2 id=\"my-raspbian-setup\" class=\"mobile-header\">My raspbian setup  </h2>\n<p class=\"mobile-paragraph\">Servers:  </p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo apt update &amp;&amp; sudo apt dist-upgrade -yy -q &amp;&amp; sudo reboot || echo &quot;Update has failed&quot;\nsudo apt install -yy git curl gnupg python3 vim-nox pass lynx net-tools ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c &quot;$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)&quot;\nbash -c &quot;$(curl -LsS -H &quot;Authorization: token ${GITHUB_ACCESS_TOKEN}&quot; ${MYPRIVATEDOTFILES_SERVER}/raw/main/install.sh)&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Desktops:  </p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo apt update &amp;&amp; sudo apt dist-upgrade -yy -q &amp;&amp; sudo reboot || echo &quot;Update has failed&quot;\nsudo apt install -yy git curl gnupg python3 python3-pil libjpeg-dev vim-nox neomutt isync msmtp pass lynx notmuch abook urlview newsboat mplayer mpc mpd pianobar net-tools mpv ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c &quot;$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)&quot;\nbash -c &quot;$(curl -LsS -H &quot;Authorization: token ${GITHUB_ACCESS_TOKEN}&quot; ${MYPRIVATEDOTFILES_DESKTOP}/raw/main/install.sh)&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Resources:  </p>\n<p class=\"mobile-paragraph\"><https://willemm.nl/track-aircraft-using-ads-b-groundstation-virtual-radar-server-vrs/>  </p>","readTime":"1 min","wordCount":129,"lastBuilt":"2025-09-14T01:15:28.354Z"},{"name":"redis","displayName":"Redis","slug":"redis","description":"Repo for redis","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/redis","updatedAt":"2025-09-08T03:15:49Z","createdAt":"2025-09-08T03:15:38Z","readmeRaw":"## 👋 Welcome to redis 🚀  \n\nredis README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-redis\" class=\"mobile-header\">👋 Welcome to redis 🚀  </h2>\n<p class=\"mobile-paragraph\">redis README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:28.226Z"},{"name":"redis-server","displayName":"Redis Server","slug":"redis-server","description":"Repo for redis-server","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/redis-server","updatedAt":"2025-09-08T03:16:02Z","createdAt":"2025-09-08T03:15:51Z","readmeRaw":"## 👋 Welcome to redis-server 🚀  \n\nredis-server README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-redis-server\" class=\"mobile-header\">👋 Welcome to redis-server 🚀  </h2>\n<p class=\"mobile-paragraph\">redis-server README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:28.112Z"},{"name":"rocketchat","displayName":"Rocketchat","slug":"rocketchat","description":"Repo for rocketchat","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/rocketchat","updatedAt":"2025-09-08T03:16:13Z","createdAt":"2025-09-08T03:16:03Z","readmeRaw":"# Rocket.Chat Installation Guide\n\nOpen-source team communication platform with features like real-time messaging, video calls, file sharing, and extensive integrations.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- 4GB RAM minimum, 8GB recommended\n- MongoDB 4.4+ or 5.0+\n- Node.js 14.x\n- Domain name (for SSL setup)\n\n## Installation\n\n### Using Docker Compose (Recommended)\n```bash\n# Create project directory\nmkdir -p ~/rocketchat && cd ~/rocketchat\n\n# Create docker-compose.yml\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  rocketchat:\n    image: registry.rocket.chat/rocketchat/rocket.chat:latest\n    restart: unless-stopped\n    environment:\n      MONGO_URL: \"mongodb://mongo:27017/rocketchat?replicaSet=rs0\"\n      MONGO_OPLOG_URL: \"mongodb://mongo:27017/local?replicaSet=rs0\"\n      ROOT_URL: \"https://chat.example.com\"\n      PORT: 3000\n      DEPLOY_METHOD: docker\n      REG_TOKEN: \\${REG_TOKEN}\n    depends_on:\n      - mongo\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./uploads:/app/uploads\n    networks:\n      - rocketchat\n\n  mongo:\n    image: docker.io/bitnami/mongodb:5.0\n    restart: unless-stopped\n    environment:\n      MONGODB_REPLICA_SET_MODE: primary\n      MONGODB_REPLICA_SET_NAME: rs0\n      MONGODB_PORT_NUMBER: 27017\n      MONGODB_INITIAL_PRIMARY_HOST: mongo\n      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: 27017\n      MONGODB_ADVERTISED_HOSTNAME: mongo\n      MONGODB_ENABLE_JOURNAL: true\n      ALLOW_EMPTY_PASSWORD: yes\n    volumes:\n      - mongodb_data:/bitnami/mongodb\n    networks:\n      - rocketchat\n\n  mongo-express:\n    image: mongo-express\n    restart: unless-stopped\n    environment:\n      ME_CONFIG_MONGODB_URL: \"mongodb://mongo:27017/\"\n      ME_CONFIG_BASICAUTH_USERNAME: admin\n      ME_CONFIG_BASICAUTH_PASSWORD: pass\n    ports:\n      - \"8081:8081\"\n    depends_on:\n      - mongo\n    networks:\n      - rocketchat\n\nnetworks:\n  rocketchat:\n    driver: bridge\n\nvolumes:\n  mongodb_data:\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f rocketchat\n```\n\n### Manual Installation (Ubuntu/Debian)\n\n#### MongoDB Setup\n```bash\n# Install MongoDB\nwget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -\necho \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list\n\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Configure MongoDB as replica set\nsudo systemctl enable --now mongod\n\n# Initialize replica set\nmongo --eval \"rs.initiate({_id: 'rs0', members: [{_id: 0, host: 'localhost:27017'}]})\"\n\n# Create Rocket.Chat database user\nmongo rocketchat --eval \"db.createUser({user: 'rocketchat', pwd: 'secure_password', roles: [{role: 'readWrite', db: 'rocketchat'}]})\"\n```\n\n#### Node.js and Rocket.Chat Setup\n```bash\n# Install Node.js 14.x\ncurl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Create rocketchat user\nsudo useradd -m -s /bin/bash rocketchat\n\n# Download and install Rocket.Chat\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\n\n# Install dependencies\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\n\n# Set environment variables\nsudo tee /etc/systemd/system/rocketchat.service > /dev/null <<EOF\n[Unit]\nDescription=The Rocket.Chat server\nAfter=network.target remote-fs.target nss-lookup.target nginx.service mongod.service\nWants=network.target\n\n[Service]\nExecStart=/usr/local/bin/node /opt/Rocket.Chat/main.js\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=rocketchat\nUser=rocketchat\nGroup=rocketchat\nEnvironment=MONGO_URL=mongodb://rocketchat:secure_password@localhost:27017/rocketchat?authSource=rocketchat&replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://rocketchat:secure_password@localhost:27017/local?authSource=admin&replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now rocketchat\n```\n\n### Snap Installation (Easiest)\n```bash\n# Install Rocket.Chat via snap\nsudo snap install rocketchat-server\n\n# Configure\nsudo snap set rocketchat-server mongodb-url=\"mongodb://localhost:27017/parties\"\nsudo snap set rocketchat-server root-url=\"https://chat.example.com\"\nsudo snap set rocketchat-server port=3000\n\n# Start service\nsudo systemctl enable --now snap.rocketchat-server.rocketchat-server\n```\n\n## Configuration\n\n### NGINX Reverse Proxy\n```bash\n# Create NGINX configuration\nsudo tee /etc/nginx/sites-available/rocketchat > /dev/null <<EOF\n# Upstreams\nupstream backend {\n    server 127.0.0.1:3000;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    server_name chat.example.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/letsencrypt/live/chat.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/chat.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Content-Type-Options \"nosniff\";\n    add_header Referrer-Policy \"no-referrer-when-downgrade\";\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n\n    # Proxy settings\n    location / {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_redirect off;\n    }\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name chat.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/rocketchat /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### SSL Certificate Setup\n```bash\n# Install Certbot\nsudo apt install -y certbot python3-certbot-nginx\n\n# Obtain SSL certificate\nsudo certbot --nginx -d chat.example.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet && systemctl reload nginx\n```\n\n### Database Optimization\n```bash\n# MongoDB tuning for Rocket.Chat\nsudo tee -a /etc/mongod.conf > /dev/null <<EOF\n\n# Performance tuning\nstorage:\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 2\n\n# Replica set configuration\nreplication:\n  replSetName: rs0\n\n# Security\nsecurity:\n  authorization: enabled\n\n# Networking\nnet:\n  bindIp: 127.0.0.1\n  port: 27017\nEOF\n\nsudo systemctl restart mongod\n\n# Create indexes for better performance\nmongo rocketchat --eval \"\ndb.users.createIndex({'username': 1}, {background: true});\ndb.users.createIndex({'emails.address': 1}, {background: true});\ndb.rocketchat_room.createIndex({'name': 1}, {background: true});\ndb.rocketchat_message.createIndex({'rid': 1, 'ts': 1}, {background: true});\n\"\n```\n\n## Administration\n\n### User Management via API\n```bash\n# Get auth token (login as admin first)\ncurl -H \"Content-type:application/json\" \\\n     http://localhost:3000/api/v1/login \\\n     -d '{\"user\":\"admin\", \"password\":\"admin_password\"}'\n\n# Create user via API\ncurl -H \"Content-type:application/json\" \\\n     -H \"X-Auth-Token: AUTH_TOKEN\" \\\n     -H \"X-User-Id: USER_ID\" \\\n     http://localhost:3000/api/v1/users.create \\\n     -d '{\"name\":\"New User\", \"email\":\"user@example.com\", \"password\":\"user_password\", \"username\":\"newuser\"}'\n\n# Create channel\ncurl -H \"Content-type:application/json\" \\\n     -H \"X-Auth-Token: AUTH_TOKEN\" \\\n     -H \"X-User-Id: USER_ID\" \\\n     http://localhost:3000/api/v1/channels.create \\\n     -d '{\"name\":\"general\"}'\n```\n\n### Backup and Restore\n```bash\n# Create backup script\nsudo tee /usr/local/bin/rocketchat-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/rocketchat\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,uploads}\n\n# Backup MongoDB database\nmongodump --host localhost:27017 --db rocketchat --out ${BACKUP_DIR}/database/mongodb-${DATE}\ntar -czf ${BACKUP_DIR}/database/rocketchat-db-${DATE}.tar.gz -C ${BACKUP_DIR}/database mongodb-${DATE}\nrm -rf ${BACKUP_DIR}/database/mongodb-${DATE}\n\n# Backup uploads directory\ntar -czf ${BACKUP_DIR}/uploads/rocketchat-uploads-${DATE}.tar.gz -C /opt/Rocket.Chat uploads\n\n# Docker backup (if using Docker)\nif command -v docker &> /dev/null; then\n    docker-compose exec mongo mongodump --archive=/tmp/rocketchat-backup.archive --db=rocketchat\n    docker cp rocketchat_mongo_1:/tmp/rocketchat-backup.archive ${BACKUP_DIR}/database/rocketchat-docker-${DATE}.archive\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"rocketchat-*\" -type f -mtime +7 -delete\n\necho \"Backup completed: rocketchat-${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/rocketchat-backup.sh\n```\n\n### Performance Optimization\n```bash\n# Configure Node.js for production\nsudo tee -a /etc/systemd/system/rocketchat.service > /dev/null <<EOF\nEnvironment=NODE_ENV=production\nEnvironment=MONGO_URL=mongodb://localhost:27017/rocketchat?replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://localhost:27017/local?replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\nEnvironment=Accounts_AvatarResize=true\nEnvironment=INSTANCE_IP=127.0.0.1\nEOF\n\n# Restart service\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat\n```\n\n## Integrations\n\n### LDAP/Active Directory Integration\n```bash\n# Configure LDAP via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service > /dev/null <<EOF\nEnvironment=LDAP_ENABLE=true\nEnvironment=LDAP_HOST=ldap.example.com\nEnvironment=LDAP_PORT=389\nEnvironment=LDAP_ENCRYPTION=false\nEnvironment=LDAP_AUTHENTICATION=true\nEnvironment=LDAP_AUTHENTICATION_UserDN=cn=admin,dc=example,dc=com\nEnvironment=LDAP_AUTHENTICATION_Password=ldap_password\nEnvironment=LDAP_USER_SEARCH_FILTER=(objectclass=person)\nEnvironment=LDAP_USER_SEARCH_SCOPE=sub\nEnvironment=LDAP_USER_SEARCH_FIELD=sAMAccountName\nEnvironment=LDAP_SEARCH_PAGE_SIZE=250\nEnvironment=LDAP_SEARCH_SIZE_LIMIT=1000\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat\n```\n\n### Webhook Integrations\n```bash\n# Create incoming webhook\ncurl -H \"Content-type:application/json\" \\\n     -H \"X-Auth-Token: AUTH_TOKEN\" \\\n     -H \"X-User-Id: USER_ID\" \\\n     http://localhost:3000/api/v1/integrations.create \\\n     -d '{\n       \"type\": \"webhook-incoming\",\n       \"name\": \"webhook-name\",\n       \"enabled\": true,\n       \"username\": \"webhook\",\n       \"channel\": \"#general\"\n     }'\n\n# Test webhook\ncurl -X POST \\\n     -H \"Content-type:application/json\" \\\n     https://chat.example.com/hooks/WEBHOOK_TOKEN \\\n     -d '{\"text\":\"Hello from external system!\"}'\n```\n\n### Email Configuration\n```bash\n# Configure SMTP settings via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service > /dev/null <<EOF\nEnvironment=MAIL_URL=smtps://smtp.gmail.com:465\nEnvironment=MAIL_FROM=noreply@example.com\nEnvironment=SMTP_Username=your-email@gmail.com\nEnvironment=SMTP_Password=your-app-password\nEnvironment=SMTP_Host=smtp.gmail.com\nEnvironment=SMTP_Port=587\nEnvironment=SMTP_IgnoreTLS=false\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat\n```\n\n## Security Configuration\n\n### Firewall Setup\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 3000/tcp   # Rocket.Chat\nsudo ufw allow 27017/tcp  # MongoDB (restrict to localhost in production)\nsudo ufw allow 'Nginx Full'\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n```\n\n### Security Hardening\n```bash\n# MongoDB security\nsudo tee -a /etc/mongod.conf > /dev/null <<EOF\n\n# Enable authentication\nsecurity:\n  authorization: enabled\n\n# Bind to localhost only\nnet:\n  bindIp: 127.0.0.1\nEOF\n\n# Create MongoDB admin user\nmongo admin --eval \"\ndb.createUser({\n  user: 'admin',\n  pwd: 'secure_password',\n  roles: [{role: 'userAdminAnyDatabase', db: 'admin'}]\n});\n\ndb.createUser({\n  user: 'rocketchat',\n  pwd: 'rocketchat_password',\n  roles: [{role: 'readWrite', db: 'rocketchat'}]\n});\n\"\n\nsudo systemctl restart mongod\n\n# Update Rocket.Chat MongoDB URL with authentication\nsudo sed -i 's|MONGO_URL=.*|MONGO_URL=mongodb://rocketchat:rocketchat_password@localhost:27017/rocketchat?authSource=rocketchat&replicaSet=rs0|' /etc/systemd/system/rocketchat.service\n```\n\n## High Availability Setup\n\n### Load Balancer Configuration\n```bash\n# HAProxy configuration for Rocket.Chat cluster\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\n# Rocket.Chat frontend\nfrontend rocketchat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/chat.example.com.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rocketchat_servers\n\n# Rocket.Chat backend\nbackend rocketchat_servers\n    balance roundrobin\n    option httpchk GET /api/info\n    http-check expect status 200\n    \n    # WebSocket support\n    timeout tunnel 3600s\n    \n    server chat1 192.168.1.10:3000 check\n    server chat2 192.168.1.11:3000 check\n    server chat3 192.168.1.12:3000 check\nEOF\n\nsudo systemctl restart haproxy\n```\n\n### MongoDB Replica Set (Multi-node)\n```bash\n# On each MongoDB node, configure replica set\nsudo tee -a /etc/mongod.conf > /dev/null <<EOF\nreplication:\n  replSetName: rs0\n  \nnet:\n  bindIp: 0.0.0.0  # Allow connections from other nodes\nEOF\n\nsudo systemctl restart mongod\n\n# Initialize replica set (run on primary node only)\nmongo --eval \"\nrs.initiate({\n  _id: 'rs0',\n  members: [\n    {_id: 0, host: 'mongo1.example.com:27017', priority: 2},\n    {_id: 1, host: 'mongo2.example.com:27017', priority: 1},\n    {_id: 2, host: 'mongo3.example.com:27017', priority: 1, arbiterOnly: true}\n  ]\n});\n\"\n\n# Update Rocket.Chat MongoDB URL for replica set\nEnvironment=MONGO_URL=mongodb://mongo1.example.com:27017,mongo2.example.com:27017,mongo3.example.com:27017/rocketchat?replicaSet=rs0\n```\n\n## Verification\n\n```bash\n# Check service status\nsudo systemctl status rocketchat\nsudo systemctl status mongod\n\n# Docker verification\ndocker-compose ps\ndocker-compose logs rocketchat\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check MongoDB connection\nmongo --eval \"db.runCommand('ping')\"\n\n# Test API endpoint\ncurl http://localhost:3000/api/info\n\n# Check logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f  # For Docker installation\n\n# Check memory usage\nps aux | grep -E \"(rocket|mongo)\"\ndocker stats  # For Docker installation\n\n# Test webhooks\ncurl -X POST https://chat.example.com/hooks/YOUR_WEBHOOK_TOKEN \\\n     -H \"Content-type:application/json\" \\\n     -d '{\"text\":\"Test message from API\"}'\n```\n\n## Maintenance and Updates\n\n### Update Rocket.Chat\n```bash\n# Manual installation update\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo systemctl stop rocketchat\nsudo mv Rocket.Chat Rocket.Chat.backup\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\nsudo systemctl start rocketchat\n\n# Docker update\ncd ~/rocketchat\ndocker-compose pull\ndocker-compose up -d\n\n# Snap update\nsudo snap refresh rocketchat-server\n```\n\n### Database Maintenance\n```bash\n# MongoDB maintenance commands\nmongo rocketchat --eval \"db.stats()\"\nmongo rocketchat --eval \"db.runCommand({compact: 'rocketchat_message'})\"\n\n# Clean up old messages (optional)\nmongo rocketchat --eval \"\nvar cutoff = new Date();\ncutoff.setDate(cutoff.getDate() - 90);  // Keep 90 days\ndb.rocketchat_message.deleteMany({'ts': {\\$lt: cutoff}});\n\"\n\n# Repair database if needed\nmongod --repair --dbpath /var/lib/mongodb\n```\n\n## Troubleshooting\n\n```bash\n# Check Rocket.Chat logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f rocketchat  # Docker\n\n# Check MongoDB logs\nsudo journalctl -u mongod -f\ndocker-compose logs -f mongo  # Docker\n\n# Test MongoDB replica set status\nmongo --eval \"rs.status()\"\n\n# Check Node.js processes\nps aux | grep node\n\n# Test database connectivity\nmongo rocketchat --eval \"db.runCommand('ping')\"\n\n# Check disk space\ndf -h /opt/Rocket.Chat\ndf -h /var/lib/mongodb\n\n# Memory usage analysis\nfree -h\ntop -p $(pgrep -d',' node)\n\n# Network connectivity test\ntelnet localhost 3000\ntelnet localhost 27017\n\n# Check environment variables\nsudo systemctl show rocketchat --property=Environment\n\n# Reset admin password (emergency)\nmongo rocketchat --eval \"\ndb.users.update(\n  {username: 'admin'},\n  {\\$set: {'services.password.bcrypt': '\\$2a\\$10\\$n9CM8OgInDlwpvjLKLPML.eizXIzLlRtgCh3GRLafOdR9ldAUh/KG'}}  // password: admin\n);\n\"\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.rocket.chat/)\n- [Administrator Guide](https://docs.rocket.chat/setup-and-configure/environment-configuration)\n- [API Documentation](https://developer.rocket.chat/reference/api)\n- [Community Forum](https://forums.rocket.chat/)\n- [GitHub Repository](https://github.com/RocketChat/Rocket.Chat)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"rocketchat-installation-guide\" class=\"mobile-header\">Rocket.Chat Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source team communication platform with features like real-time messaging, video calls, file sharing, and extensive integrations.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB recommended</li>\n<li class=\"mobile-list-item\">MongoDB 4.4+ or 5.0+</li>\n<li class=\"mobile-list-item\">Node.js 14.x</li>\n<li class=\"mobile-list-item\">Domain name (for SSL setup)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-docker-compose-recommended\" class=\"mobile-header\">Using Docker Compose (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create project directory\nmkdir -p ~/rocketchat &amp;&amp; cd ~/rocketchat\n\n# Create docker-compose.yml\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  rocketchat:\n    image: registry.rocket.chat/rocketchat/rocket.chat:latest\n    restart: unless-stopped\n    environment:\n      MONGO_URL: &quot;mongodb://mongo:27017/rocketchat?replicaSet=rs0&quot;\n      MONGO_OPLOG_URL: &quot;mongodb://mongo:27017/local?replicaSet=rs0&quot;\n      ROOT_URL: &quot;https://chat.example.com&quot;\n      PORT: 3000\n      DEPLOY_METHOD: docker\n      REG_TOKEN: \\${REG_TOKEN}\n    depends_on:\n      - mongo\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - ./uploads:/app/uploads\n    networks:\n      - rocketchat\n\n  mongo:\n    image: docker.io/bitnami/mongodb:5.0\n    restart: unless-stopped\n    environment:\n      MONGODB_REPLICA_SET_MODE: primary\n      MONGODB_REPLICA_SET_NAME: rs0\n      MONGODB_PORT_NUMBER: 27017\n      MONGODB_INITIAL_PRIMARY_HOST: mongo\n      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: 27017\n      MONGODB_ADVERTISED_HOSTNAME: mongo\n      MONGODB_ENABLE_JOURNAL: true\n      ALLOW_EMPTY_PASSWORD: yes\n    volumes:\n      - mongodb_data:/bitnami/mongodb\n    networks:\n      - rocketchat\n\n  mongo-express:\n    image: mongo-express\n    restart: unless-stopped\n    environment:\n      ME_CONFIG_MONGODB_URL: &quot;mongodb://mongo:27017/&quot;\n      ME_CONFIG_BASICAUTH_USERNAME: admin\n      ME_CONFIG_BASICAUTH_PASSWORD: pass\n    ports:\n      - &quot;8081:8081&quot;\n    depends_on:\n      - mongo\n    networks:\n      - rocketchat\n\nnetworks:\n  rocketchat:\n    driver: bridge\n\nvolumes:\n  mongodb_data:\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f rocketchat</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-installation-ubuntudebian\" class=\"mobile-header\">Manual Installation (Ubuntu/Debian)</h3>\n<p class=\"mobile-paragraph\">#### MongoDB Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MongoDB\nwget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -\necho &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list\n\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Configure MongoDB as replica set\nsudo systemctl enable --now mongod\n\n# Initialize replica set\nmongo --eval &quot;rs.initiate({_id: &#039;rs0&#039;, members: [{_id: 0, host: &#039;localhost:27017&#039;}]})&quot;\n\n# Create Rocket.Chat database user\nmongo rocketchat --eval &quot;db.createUser({user: &#039;rocketchat&#039;, pwd: &#039;secure_password&#039;, roles: [{role: &#039;readWrite&#039;, db: &#039;rocketchat&#039;}]})&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Node.js and Rocket.Chat Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js 14.x\ncurl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Create rocketchat user\nsudo useradd -m -s /bin/bash rocketchat\n\n# Download and install Rocket.Chat\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\n\n# Install dependencies\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\n\n# Set environment variables\nsudo tee /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=The Rocket.Chat server\nAfter=network.target remote-fs.target nss-lookup.target nginx.service mongod.service\nWants=network.target\n\n[Service]\nExecStart=/usr/local/bin/node /opt/Rocket.Chat/main.js\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=rocketchat\nUser=rocketchat\nGroup=rocketchat\nEnvironment=MONGO_URL=mongodb://rocketchat:secure_password@localhost:27017/rocketchat?authSource=rocketchat&amp;replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://rocketchat:secure_password@localhost:27017/local?authSource=admin&amp;replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now rocketchat</code></pre>\n      </div>\n    </div>\n<h3 id=\"snap-installation-easiest\" class=\"mobile-header\">Snap Installation (Easiest)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Rocket.Chat via snap\nsudo snap install rocketchat-server\n\n# Configure\nsudo snap set rocketchat-server mongodb-url=&quot;mongodb://localhost:27017/parties&quot;\nsudo snap set rocketchat-server root-url=&quot;https://chat.example.com&quot;\nsudo snap set rocketchat-server port=3000\n\n# Start service\nsudo systemctl enable --now snap.rocketchat-server.rocketchat-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"nginx-reverse-proxy\" class=\"mobile-header\">NGINX Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration\nsudo tee /etc/nginx/sites-available/rocketchat &gt; /dev/null &lt;&lt;EOF\n# Upstreams\nupstream backend {\n    server 127.0.0.1:3000;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    server_name chat.example.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/letsencrypt/live/chat.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/chat.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n    add_header X-Content-Type-Options &quot;nosniff&quot;;\n    add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot;;\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n\n    # Proxy settings\n    location / {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_redirect off;\n    }\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name chat.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/rocketchat /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssl-certificate-setup\" class=\"mobile-header\">SSL Certificate Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot\nsudo apt install -y certbot python3-certbot-nginx\n\n# Obtain SSL certificate\nsudo certbot --nginx -d chat.example.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet &amp;&amp; systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB tuning for Rocket.Chat\nsudo tee -a /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\n\n# Performance tuning\nstorage:\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 2\n\n# Replica set configuration\nreplication:\n  replSetName: rs0\n\n# Security\nsecurity:\n  authorization: enabled\n\n# Networking\nnet:\n  bindIp: 127.0.0.1\n  port: 27017\nEOF\n\nsudo systemctl restart mongod\n\n# Create indexes for better performance\nmongo rocketchat --eval &quot;\ndb.users.createIndex({&#039;username&#039;: 1}, {background: true});\ndb.users.createIndex({&#039;emails.address&#039;: 1}, {background: true});\ndb.rocketchat_room.createIndex({&#039;name&#039;: 1}, {background: true});\ndb.rocketchat_message.createIndex({&#039;rid&#039;: 1, &#039;ts&#039;: 1}, {background: true});\n&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"administration\" class=\"mobile-header\">Administration</h2>\n<h3 id=\"user-management-via-api\" class=\"mobile-header\">User Management via API</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Get auth token (login as admin first)\ncurl -H &quot;Content-type:application/json&quot; \\\n     http://localhost:3000/api/v1/login \\\n     -d &#039;{&quot;user&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;admin_password&quot;}&#039;\n\n# Create user via API\ncurl -H &quot;Content-type:application/json&quot; \\\n     -H &quot;X-Auth-Token: AUTH_TOKEN&quot; \\\n     -H &quot;X-User-Id: USER_ID&quot; \\\n     http://localhost:3000/api/v1/users.create \\\n     -d &#039;{&quot;name&quot;:&quot;New User&quot;, &quot;email&quot;:&quot;user@example.com&quot;, &quot;password&quot;:&quot;user_password&quot;, &quot;username&quot;:&quot;newuser&quot;}&#039;\n\n# Create channel\ncurl -H &quot;Content-type:application/json&quot; \\\n     -H &quot;X-Auth-Token: AUTH_TOKEN&quot; \\\n     -H &quot;X-User-Id: USER_ID&quot; \\\n     http://localhost:3000/api/v1/channels.create \\\n     -d &#039;{&quot;name&quot;:&quot;general&quot;}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/rocketchat-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/rocketchat&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,uploads}\n\n# Backup MongoDB database\nmongodump --host localhost:27017 --db rocketchat --out ${BACKUP_DIR}/database/mongodb-${DATE}\ntar -czf ${BACKUP_DIR}/database/rocketchat-db-${DATE}.tar.gz -C ${BACKUP_DIR}/database mongodb-${DATE}\nrm -rf ${BACKUP_DIR}/database/mongodb-${DATE}\n\n# Backup uploads directory\ntar -czf ${BACKUP_DIR}/uploads/rocketchat-uploads-${DATE}.tar.gz -C /opt/Rocket.Chat uploads\n\n# Docker backup (if using Docker)\nif command -v docker &amp;&gt; /dev/null; then\n    docker-compose exec mongo mongodump --archive=/tmp/rocketchat-backup.archive --db=rocketchat\n    docker cp rocketchat_mongo_1:/tmp/rocketchat-backup.archive ${BACKUP_DIR}/database/rocketchat-docker-${DATE}.archive\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;rocketchat-*&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: rocketchat-${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/rocketchat-backup.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Node.js for production\nsudo tee -a /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\nEnvironment=NODE_ENV=production\nEnvironment=MONGO_URL=mongodb://localhost:27017/rocketchat?replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://localhost:27017/local?replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\nEnvironment=Accounts_AvatarResize=true\nEnvironment=INSTANCE_IP=127.0.0.1\nEOF\n\n# Restart service\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat</code></pre>\n      </div>\n    </div>\n<h2 id=\"integrations\" class=\"mobile-header\">Integrations</h2>\n<h3 id=\"ldapactive-directory-integration\" class=\"mobile-header\">LDAP/Active Directory Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure LDAP via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\nEnvironment=LDAP_ENABLE=true\nEnvironment=LDAP_HOST=ldap.example.com\nEnvironment=LDAP_PORT=389\nEnvironment=LDAP_ENCRYPTION=false\nEnvironment=LDAP_AUTHENTICATION=true\nEnvironment=LDAP_AUTHENTICATION_UserDN=cn=admin,dc=example,dc=com\nEnvironment=LDAP_AUTHENTICATION_Password=ldap_password\nEnvironment=LDAP_USER_SEARCH_FILTER=(objectclass=person)\nEnvironment=LDAP_USER_SEARCH_SCOPE=sub\nEnvironment=LDAP_USER_SEARCH_FIELD=sAMAccountName\nEnvironment=LDAP_SEARCH_PAGE_SIZE=250\nEnvironment=LDAP_SEARCH_SIZE_LIMIT=1000\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat</code></pre>\n      </div>\n    </div>\n<h3 id=\"webhook-integrations\" class=\"mobile-header\">Webhook Integrations</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create incoming webhook\ncurl -H &quot;Content-type:application/json&quot; \\\n     -H &quot;X-Auth-Token: AUTH_TOKEN&quot; \\\n     -H &quot;X-User-Id: USER_ID&quot; \\\n     http://localhost:3000/api/v1/integrations.create \\\n     -d &#039;{\n       &quot;type&quot;: &quot;webhook-incoming&quot;,\n       &quot;name&quot;: &quot;webhook-name&quot;,\n       &quot;enabled&quot;: true,\n       &quot;username&quot;: &quot;webhook&quot;,\n       &quot;channel&quot;: &quot;#general&quot;\n     }&#039;\n\n# Test webhook\ncurl -X POST \\\n     -H &quot;Content-type:application/json&quot; \\\n     https://chat.example.com/hooks/WEBHOOK_TOKEN \\\n     -d &#039;{&quot;text&quot;:&quot;Hello from external system!&quot;}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"email-configuration\" class=\"mobile-header\">Email Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure SMTP settings via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\nEnvironment=MAIL_URL=smtps://smtp.gmail.com:465\nEnvironment=MAIL_FROM=noreply@example.com\nEnvironment=SMTP_Username=your-email@gmail.com\nEnvironment=SMTP_Password=your-app-password\nEnvironment=SMTP_Host=smtp.gmail.com\nEnvironment=SMTP_Port=587\nEnvironment=SMTP_IgnoreTLS=false\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"firewall-setup\" class=\"mobile-header\">Firewall Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 3000/tcp   # Rocket.Chat\nsudo ufw allow 27017/tcp  # MongoDB (restrict to localhost in production)\nsudo ufw allow &#039;Nginx Full&#039;\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB security\nsudo tee -a /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\n\n# Enable authentication\nsecurity:\n  authorization: enabled\n\n# Bind to localhost only\nnet:\n  bindIp: 127.0.0.1\nEOF\n\n# Create MongoDB admin user\nmongo admin --eval &quot;\ndb.createUser({\n  user: &#039;admin&#039;,\n  pwd: &#039;secure_password&#039;,\n  roles: [{role: &#039;userAdminAnyDatabase&#039;, db: &#039;admin&#039;}]\n});\n\ndb.createUser({\n  user: &#039;rocketchat&#039;,\n  pwd: &#039;rocketchat_password&#039;,\n  roles: [{role: &#039;readWrite&#039;, db: &#039;rocketchat&#039;}]\n});\n&quot;\n\nsudo systemctl restart mongod\n\n# Update Rocket.Chat MongoDB URL with authentication\nsudo sed -i &#039;s|MONGO_URL=.*|MONGO_URL=mongodb://rocketchat:rocketchat_password@localhost:27017/rocketchat?authSource=rocketchat&amp;replicaSet=rs0|&#039; /etc/systemd/system/rocketchat.service</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h2>\n<h3 id=\"load-balancer-configuration\" class=\"mobile-header\">Load Balancer Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># HAProxy configuration for Rocket.Chat cluster\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\n# Rocket.Chat frontend\nfrontend rocketchat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/chat.example.com.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rocketchat_servers\n\n# Rocket.Chat backend\nbackend rocketchat_servers\n    balance roundrobin\n    option httpchk GET /api/info\n    http-check expect status 200\n    \n    # WebSocket support\n    timeout tunnel 3600s\n    \n    server chat1 192.168.1.10:3000 check\n    server chat2 192.168.1.11:3000 check\n    server chat3 192.168.1.12:3000 check\nEOF\n\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-replica-set-multi-node\" class=\"mobile-header\">MongoDB Replica Set (Multi-node)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># On each MongoDB node, configure replica set\nsudo tee -a /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\nreplication:\n  replSetName: rs0\n  \nnet:\n  bindIp: 0.0.0.0  # Allow connections from other nodes\nEOF\n\nsudo systemctl restart mongod\n\n# Initialize replica set (run on primary node only)\nmongo --eval &quot;\nrs.initiate({\n  _id: &#039;rs0&#039;,\n  members: [\n    {_id: 0, host: &#039;mongo1.example.com:27017&#039;, priority: 2},\n    {_id: 1, host: &#039;mongo2.example.com:27017&#039;, priority: 1},\n    {_id: 2, host: &#039;mongo3.example.com:27017&#039;, priority: 1, arbiterOnly: true}\n  ]\n});\n&quot;\n\n# Update Rocket.Chat MongoDB URL for replica set\nEnvironment=MONGO_URL=mongodb://mongo1.example.com:27017,mongo2.example.com:27017,mongo3.example.com:27017/rocketchat?replicaSet=rs0</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status rocketchat\nsudo systemctl status mongod\n\n# Docker verification\ndocker-compose ps\ndocker-compose logs rocketchat\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check MongoDB connection\nmongo --eval &quot;db.runCommand(&#039;ping&#039;)&quot;\n\n# Test API endpoint\ncurl http://localhost:3000/api/info\n\n# Check logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f  # For Docker installation\n\n# Check memory usage\nps aux | grep -E &quot;(rocket|mongo)&quot;\ndocker stats  # For Docker installation\n\n# Test webhooks\ncurl -X POST https://chat.example.com/hooks/YOUR_WEBHOOK_TOKEN \\\n     -H &quot;Content-type:application/json&quot; \\\n     -d &#039;{&quot;text&quot;:&quot;Test message from API&quot;}&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance-and-updates\" class=\"mobile-header\">Maintenance and Updates</h2>\n<h3 id=\"update-rocketchat\" class=\"mobile-header\">Update Rocket.Chat</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Manual installation update\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo systemctl stop rocketchat\nsudo mv Rocket.Chat Rocket.Chat.backup\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\nsudo systemctl start rocketchat\n\n# Docker update\ncd ~/rocketchat\ndocker-compose pull\ndocker-compose up -d\n\n# Snap update\nsudo snap refresh rocketchat-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-maintenance\" class=\"mobile-header\">Database Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB maintenance commands\nmongo rocketchat --eval &quot;db.stats()&quot;\nmongo rocketchat --eval &quot;db.runCommand({compact: &#039;rocketchat_message&#039;})&quot;\n\n# Clean up old messages (optional)\nmongo rocketchat --eval &quot;\nvar cutoff = new Date();\ncutoff.setDate(cutoff.getDate() - 90);  // Keep 90 days\ndb.rocketchat_message.deleteMany({&#039;ts&#039;: {\\$lt: cutoff}});\n&quot;\n\n# Repair database if needed\nmongod --repair --dbpath /var/lib/mongodb</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Rocket.Chat logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f rocketchat  # Docker\n\n# Check MongoDB logs\nsudo journalctl -u mongod -f\ndocker-compose logs -f mongo  # Docker\n\n# Test MongoDB replica set status\nmongo --eval &quot;rs.status()&quot;\n\n# Check Node.js processes\nps aux | grep node\n\n# Test database connectivity\nmongo rocketchat --eval &quot;db.runCommand(&#039;ping&#039;)&quot;\n\n# Check disk space\ndf -h /opt/Rocket.Chat\ndf -h /var/lib/mongodb\n\n# Memory usage analysis\nfree -h\ntop -p $(pgrep -d&#039;,&#039; node)\n\n# Network connectivity test\ntelnet localhost 3000\ntelnet localhost 27017\n\n# Check environment variables\nsudo systemctl show rocketchat --property=Environment\n\n# Reset admin password (emergency)\nmongo rocketchat --eval &quot;\ndb.users.update(\n  {username: &#039;admin&#039;},\n  {\\$set: {&#039;services.password.bcrypt&#039;: &#039;\\$2a\\$10\\$n9CM8OgInDlwpvjLKLPML.eizXIzLlRtgCh3GRLafOdR9ldAUh/KG&#039;}}  // password: admin\n);\n&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.rocket.chat/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.rocket.chat/setup-and-configure/environment-configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Administrator Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.rocket.chat/reference/api\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">API Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forums.rocket.chat/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/RocketChat/Rocket.Chat\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"9 min","wordCount":1673,"lastBuilt":"2025-09-14T01:15:27.946Z"},{"name":"shinobi","displayName":"Shinobi","slug":"shinobi","description":"Repo for shinobi","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/shinobi","updatedAt":"2025-09-08T03:16:18Z","createdAt":"2023-08-28T03:50:05Z","readmeRaw":"# CentOS\n\n```bash\nsudo yum install -y ffmpeg gstreamer1-libav x264 x265 git curl gnupg2\nsudo yum install -y nodejs\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/centos.sh && INSTALL/centos.sh\n\n```\n\n# Debian\n\n```bash\nsudo apt update\nsudo apt install ffmpeg libav-tools x264 x265 git curl gnupg2\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt install nodejs -y\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/ubuntu.sh && INSTALL/ubuntu.sh\n```\n","readmeHtml":"<h1 id=\"centos\" class=\"mobile-header\">CentOS</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo yum install -y ffmpeg gstreamer1-libav x264 x265 git curl gnupg2\nsudo yum install -y nodejs\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/centos.sh &amp;&amp; INSTALL/centos.sh\n</code></pre>\n      </div>\n    </div>\n<h1 id=\"debian\" class=\"mobile-header\">Debian</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo apt update\nsudo apt install ffmpeg libav-tools x264 x265 git curl gnupg2\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt install nodejs -y\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/ubuntu.sh &amp;&amp; INSTALL/ubuntu.sh</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":81,"lastBuilt":"2025-09-14T01:15:27.834Z"},{"name":"sonarqube","displayName":"Sonarqube","slug":"sonarqube","description":"Repo for sonarqube","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/sonarqube","updatedAt":"2025-09-08T03:16:32Z","createdAt":"2025-09-08T03:16:21Z","readmeRaw":"## 👋 Welcome to sonarqube 🚀  \n\nsonarqube README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-sonarqube\" class=\"mobile-header\">👋 Welcome to sonarqube 🚀  </h2>\n<p class=\"mobile-paragraph\">sonarqube README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:27.718Z"},{"name":"strapi","displayName":"Strapi","slug":"strapi","description":"Repo for strapi","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/strapi","updatedAt":"2025-09-08T03:16:44Z","createdAt":"2025-09-08T03:16:33Z","readmeRaw":"## 👋 Welcome to strapi 🚀  \n\nstrapi README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-strapi\" class=\"mobile-header\">👋 Welcome to strapi 🚀  </h2>\n<p class=\"mobile-paragraph\">strapi README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:27.561Z"},{"name":"terraform","displayName":"Terraform","slug":"terraform","description":"Repo for terraform","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/terraform","updatedAt":"2025-09-08T03:17:01Z","createdAt":"2025-09-08T03:16:51Z","readmeRaw":"# Terraform Installation Guide\n\nInfrastructure as Code (IaC) tool for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Cloud provider account (AWS, Azure, GCP, etc.)\n- Basic understanding of infrastructure concepts\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y terraform\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform\n```\n\n### Manual Installation\n```bash\n# Download latest version\nTERRAFORM_VERSION=\"1.5.7\"\ncd /tmp\nwget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\nsudo chmod +x /usr/local/bin/terraform\n\n# Clean up\nrm terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n```\n\n### Using Docker\n```bash\n# Create alias for Docker-based Terraform\necho 'alias terraform=\"docker run --rm -it -v $(pwd):/workspace -w /workspace hashicorp/terraform:latest\"' >> ~/.bashrc\nsource ~/.bashrc\n\n# Or create wrapper script\nsudo tee /usr/local/bin/terraform > /dev/null <<'EOF'\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/workspace \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.config/gcloud:/root/.config/gcloud:ro \\\n  -w /workspace \\\n  hashicorp/terraform:latest \"$@\"\nEOF\nsudo chmod +x /usr/local/bin/terraform\n```\n\n## Configuration\n\n### AWS Provider Setup\n```bash\n# Install AWS CLI\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\n\n# Configure AWS credentials\naws configure\n# AWS Access Key ID: YOUR_ACCESS_KEY\n# AWS Secret Access Key: YOUR_SECRET_KEY  \n# Default region name: us-west-2\n# Default output format: json\n\n# Create basic Terraform configuration\nmkdir -p ~/terraform/aws-infrastructure\ncd ~/terraform/aws-infrastructure\n\n# Create main.tf\ncat > main.tf <<EOF\nterraform {\n  required_version = \">= 1.0\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n\n# Variables\nvariable \"aws_region\" {\n  description = \"AWS region\"\n  type        = string\n  default     = \"us-west-2\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  type        = string\n  default     = \"development\"\n}\n\n# VPC\nresource \"aws_vpc\" \"main\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name        = \"\\${var.environment}-vpc\"\n    Environment = var.environment\n  }\n}\n\n# Internet Gateway\nresource \"aws_internet_gateway\" \"main\" {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name        = \"\\${var.environment}-igw\"\n    Environment = var.environment\n  }\n}\n\n# Public Subnet\nresource \"aws_subnet\" \"public\" {\n  count                   = 2\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = \"10.0.\\${count.index + 1}.0/24\"\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name        = \"\\${var.environment}-public-subnet-\\${count.index + 1}\"\n    Environment = var.environment\n  }\n}\n\n# Data source for availability zones\ndata \"aws_availability_zones\" \"available\" {\n  state = \"available\"\n}\n\n# Route table\nresource \"aws_route_table\" \"public\" {\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    gateway_id = aws_internet_gateway.main.id\n  }\n\n  tags = {\n    Name        = \"\\${var.environment}-public-rt\"\n    Environment = var.environment\n  }\n}\n\n# Route table associations\nresource \"aws_route_table_association\" \"public\" {\n  count          = length(aws_subnet.public)\n  subnet_id      = aws_subnet.public[count.index].id\n  route_table_id = aws_route_table.public.id\n}\n\n# Security group\nresource \"aws_security_group\" \"web\" {\n  name_prefix = \"\\${var.environment}-web-\"\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name        = \"\\${var.environment}-web-sg\"\n    Environment = var.environment\n  }\n}\n\n# Outputs\noutput \"vpc_id\" {\n  value = aws_vpc.main.id\n}\n\noutput \"public_subnet_ids\" {\n  value = aws_subnet.public[*].id\n}\n\noutput \"security_group_id\" {\n  value = aws_security_group.web.id\n}\nEOF\n\n# Create terraform.tfvars\ncat > terraform.tfvars <<EOF\naws_region  = \"us-west-2\"\nenvironment = \"production\"\nEOF\n```\n\n### Azure Provider Setup\n```bash\n# Install Azure CLI\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Login to Azure\naz login\n\n# Create service principal for Terraform\naz ad sp create-for-rbac --name \"terraform\" --role=\"Contributor\" --scopes=\"/subscriptions/YOUR_SUBSCRIPTION_ID\"\n\n# Set environment variables\nexport ARM_CLIENT_ID=\"your-client-id\"\nexport ARM_CLIENT_SECRET=\"your-client-secret\"  \nexport ARM_SUBSCRIPTION_ID=\"your-subscription-id\"\nexport ARM_TENANT_ID=\"your-tenant-id\"\n\n# Create Azure Terraform configuration\nmkdir -p ~/terraform/azure-infrastructure\ncd ~/terraform/azure-infrastructure\n\ncat > main.tf <<EOF\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n# Resource Group\nresource \"azurerm_resource_group\" \"main\" {\n  name     = \"\\${var.environment}-rg\"\n  location = var.location\n  \n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Virtual Network\nresource \"azurerm_virtual_network\" \"main\" {\n  name                = \"\\${var.environment}-vnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Subnet\nresource \"azurerm_subnet\" \"internal\" {\n  name                 = \"internal\"\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = [\"10.0.2.0/24\"]\n}\n\nvariable \"location\" {\n  description = \"Azure region\"\n  default     = \"East US\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  default     = \"development\"\n}\nEOF\n```\n\n### Google Cloud Provider Setup\n```bash\n# Install Google Cloud SDK\necho \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\nsudo apt-get update && sudo apt-get install -y google-cloud-cli\n\n# Authenticate\ngcloud auth login\ngcloud config set project YOUR_PROJECT_ID\n\n# Create service account for Terraform\ngcloud iam service-accounts create terraform --display-name=\"Terraform Service Account\"\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID --member=\"serviceAccount:terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\" --role=\"roles/editor\"\ngcloud iam service-accounts keys create ~/gcp-terraform-key.json --iam-account=terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\n\n# Set environment variable\nexport GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/gcp-terraform-key.json\"\n```\n\n## Basic Usage\n\n### Initialize and Plan\n```bash\n# Initialize Terraform (run in project directory)\nterraform init\n\n# Format code\nterraform fmt\n\n# Validate configuration\nterraform validate\n\n# Plan changes\nterraform plan\n\n# Apply changes\nterraform apply\n\n# Show current state\nterraform show\n\n# List resources\nterraform state list\n\n# Destroy infrastructure\nterraform destroy\n```\n\n### State Management\n```bash\n# Configure remote state (S3 backend example)\ncat > backend.tf <<EOF\nterraform {\n  backend \"s3\" {\n    bucket = \"your-terraform-state-bucket\"\n    key    = \"infrastructure/terraform.tfstate\"\n    region = \"us-west-2\"\n    \n    # Optional: DynamoDB table for state locking\n    dynamodb_table = \"terraform-state-lock\"\n    encrypt        = true\n  }\n}\nEOF\n\n# Initialize backend\nterraform init -migrate-state\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Move state resources\nterraform state mv aws_instance.example aws_instance.web_server\n```\n\n### Workspace Management\n```bash\n# Create new workspace\nterraform workspace new production\nterraform workspace new staging\n\n# List workspaces\nterraform workspace list\n\n# Switch workspace\nterraform workspace select production\n\n# Show current workspace\nterraform workspace show\n```\n\n## Advanced Configuration\n\n### Modules\n```bash\n# Create reusable module structure\nmkdir -p modules/vpc/{variables.tf,main.tf,outputs.tf}\n\n# modules/vpc/variables.tf\ncat > modules/vpc/variables.tf <<EOF\nvariable \"vpc_cidr\" {\n  description = \"CIDR block for VPC\"\n  type        = string\n  default     = \"10.0.0.0/16\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  type        = string\n}\n\nvariable \"availability_zones\" {\n  description = \"List of availability zones\"\n  type        = list(string)\n  default     = [\"us-west-2a\", \"us-west-2b\"]\n}\nEOF\n\n# Use module in main configuration\ncat >> main.tf <<EOF\n\nmodule \"vpc\" {\n  source = \"./modules/vpc\"\n  \n  vpc_cidr           = \"10.0.0.0/16\"\n  environment        = var.environment\n  availability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]\n}\nEOF\n```\n\n### Variable Files and Environments\n```bash\n# Create environment-specific variable files\ncat > environments/production.tfvars <<EOF\nenvironment = \"production\"\ninstance_type = \"t3.large\"\nmin_size = 3\nmax_size = 10\nEOF\n\ncat > environments/staging.tfvars <<EOF\nenvironment = \"staging\"\ninstance_type = \"t3.small\"\nmin_size = 1\nmax_size = 3\nEOF\n\n# Apply with specific variables\nterraform apply -var-file=\"environments/production.tfvars\"\n```\n\n## Verification\n\n```bash\n# Check Terraform version\nterraform version\n\n# Validate configuration\nterraform validate\n\n# Check formatting\nterraform fmt -check\n\n# Plan with detailed output\nterraform plan -detailed-exitcode\n\n# Show current state\nterraform show\n\n# Check providers\nterraform providers\n\n# Verify remote state\nterraform state pull\n\n# Check for configuration drift\nterraform plan -refresh-only\n```\n\n## Best Practices\n\n### Project Structure\n```bash\n# Recommended directory structure\nmkdir -p terraform-project/{\nenvironments,\nmodules,\n.terraform,\nscripts\n}\n\n# Create .gitignore\ncat > .gitignore <<EOF\n# Terraform files\n*.tfstate\n*.tfstate.*\n.terraform/\n.terraform.lock.hcl\ncrash.log\noverride.tf\noverride.tf.json\n*_override.tf\n*_override.tf.json\n\n# Environment files\n*.tfvars\n.env\n\n# IDE files\n.vscode/\n.idea/\nEOF\n```\n\n### Security Practices\n```bash\n# Use environment variables for sensitive data\nexport TF_VAR_db_password=\"your-secure-password\"\nexport TF_VAR_api_key=\"your-api-key\"\n\n# In terraform configuration:\nvariable \"db_password\" {\n  description = \"Database password\"\n  type        = string\n  sensitive   = true\n}\n\n# Use data sources for existing resources\ndata \"aws_ami\" \"ubuntu\" {\n  most_recent = true\n  owners      = [\"099720109477\"] # Canonical\n\n  filter {\n    name   = \"name\"\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*\"]\n  }\n}\n\n# Tag everything consistently\nlocals {\n  common_tags = {\n    Environment = var.environment\n    Project     = \"infrastructure\"\n    ManagedBy   = \"terraform\"\n    Owner       = \"devops-team\"\n  }\n}\n\nresource \"aws_instance\" \"web\" {\n  # ... other configuration\n  tags = local.common_tags\n}\n```\n\n## Troubleshooting\n\n```bash\n# Debug with detailed logging\nexport TF_LOG=DEBUG\nexport TF_LOG_PATH=\"terraform.log\"\nterraform plan\n\n# Check provider configuration\nterraform providers schema -json\n\n# Inspect state file\nterraform state show aws_instance.web\n\n# Refresh state from real infrastructure\nterraform refresh\n\n# Force unlock state (if locked)\nterraform force-unlock LOCK_ID\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Check for unused variables\nterraform validate\n\n# Fix state inconsistencies\nterraform apply -refresh-only -auto-approve\n```\n\n## Integration with CI/CD\n\n### GitHub Actions\n```bash\n# Create .github/workflows/terraform.yml\nmkdir -p .github/workflows\ncat > .github/workflows/terraform.yml <<EOF\nname: Terraform\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v2\n      with:\n        terraform_version: 1.5.7\n    \n    - name: Terraform Format\n      run: terraform fmt -check\n    \n    - name: Terraform Init\n      run: terraform init\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n    \n    - name: Terraform Plan\n      run: terraform plan\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Apply\n      if: github.ref == 'refs/heads/main' && github.event_name == 'push'\n      run: terraform apply -auto-approve\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\nEOF\n```\n\n### GitLab CI\n```bash\n# Create .gitlab-ci.yml\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - validate\n  - plan\n  - apply\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_IN_AUTOMATION: \"true\"\n\ncache:\n  key: \"\\${TF_ROOT}\"\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform --version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform validate\n    - terraform fmt -check\n  rules:\n    - if: '\\$CI_MERGE_REQUEST_IID'\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\nplan:\n  stage: plan\n  script:\n    - terraform plan -out=\"planfile\"\n  artifacts:\n    paths:\n      - planfile\n  rules:\n    - if: '\\$CI_MERGE_REQUEST_IID'\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\napply:\n  stage: apply\n  script:\n    - terraform apply -input=false \"planfile\"\n  dependencies:\n    - plan\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n      when: manual\nEOF\n```\n\n## Common Patterns\n\n### Multi-Environment Setup\n```bash\n# Create environment-specific configurations\nmkdir -p environments/{dev,staging,prod}\n\n# environments/dev/main.tf\ncat > environments/dev/main.tf <<EOF\nmodule \"infrastructure\" {\n  source = \"../../modules/infrastructure\"\n  \n  environment     = \"development\"\n  instance_type   = \"t3.micro\"\n  min_size       = 1\n  max_size       = 2\n  db_instance_class = \"db.t3.micro\"\n}\nEOF\n\n# Apply for specific environment\ncd environments/dev\nterraform init\nterraform plan\nterraform apply\n```\n\n## Additional Resources\n\n- [Official Documentation](https://developer.hashicorp.com/terraform/docs)\n- [Terraform Registry](https://registry.terraform.io/)\n- [AWS Provider Documentation](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Best Practices Guide](https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html)\n- [Terraform Examples](https://github.com/hashicorp/terraform-provider-aws/tree/main/examples)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"terraform-installation-guide\" class=\"mobile-header\">Terraform Installation Guide</h1>\n<p class=\"mobile-paragraph\">Infrastructure as Code (IaC) tool for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Cloud provider account (AWS, Azure, GCP, etc.)</li>\n<li class=\"mobile-list-item\">Basic understanding of infrastructure concepts</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho &quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y terraform</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-installation\" class=\"mobile-header\">Manual Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest version\nTERRAFORM_VERSION=&quot;1.5.7&quot;\ncd /tmp\nwget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\nsudo chmod +x /usr/local/bin/terraform\n\n# Clean up\nrm terraform_${TERRAFORM_VERSION}_linux_amd64.zip</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create alias for Docker-based Terraform\necho &#039;alias terraform=&quot;docker run --rm -it -v $(pwd):/workspace -w /workspace hashicorp/terraform:latest&quot;&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Or create wrapper script\nsudo tee /usr/local/bin/terraform &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/workspace \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.config/gcloud:/root/.config/gcloud:ro \\\n  -w /workspace \\\n  hashicorp/terraform:latest &quot;$@&quot;\nEOF\nsudo chmod +x /usr/local/bin/terraform</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"aws-provider-setup\" class=\"mobile-header\">AWS Provider Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install AWS CLI\ncurl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot;\nunzip awscliv2.zip\nsudo ./aws/install\n\n# Configure AWS credentials\naws configure\n# AWS Access Key ID: YOUR_ACCESS_KEY\n# AWS Secret Access Key: YOUR_SECRET_KEY  \n# Default region name: us-west-2\n# Default output format: json\n\n# Create basic Terraform configuration\nmkdir -p ~/terraform/aws-infrastructure\ncd ~/terraform/aws-infrastructure\n\n# Create main.tf\ncat &gt; main.tf &lt;&lt;EOF\nterraform {\n  required_version = &quot;&gt;= 1.0&quot;\n  required_providers {\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n  }\n}\n\nprovider &quot;aws&quot; {\n  region = var.aws_region\n}\n\n# Variables\nvariable &quot;aws_region&quot; {\n  description = &quot;AWS region&quot;\n  type        = string\n  default     = &quot;us-west-2&quot;\n}\n\nvariable &quot;environment&quot; {\n  description = &quot;Environment name&quot;\n  type        = string\n  default     = &quot;development&quot;\n}\n\n# VPC\nresource &quot;aws_vpc&quot; &quot;main&quot; {\n  cidr_block           = &quot;10.0.0.0/16&quot;\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name        = &quot;\\${var.environment}-vpc&quot;\n    Environment = var.environment\n  }\n}\n\n# Internet Gateway\nresource &quot;aws_internet_gateway&quot; &quot;main&quot; {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name        = &quot;\\${var.environment}-igw&quot;\n    Environment = var.environment\n  }\n}\n\n# Public Subnet\nresource &quot;aws_subnet&quot; &quot;public&quot; {\n  count                   = 2\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = &quot;10.0.\\${count.index + 1}.0/24&quot;\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name        = &quot;\\${var.environment}-public-subnet-\\${count.index + 1}&quot;\n    Environment = var.environment\n  }\n}\n\n# Data source for availability zones\ndata &quot;aws_availability_zones&quot; &quot;available&quot; {\n  state = &quot;available&quot;\n}\n\n# Route table\nresource &quot;aws_route_table&quot; &quot;public&quot; {\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block = &quot;0.0.0.0/0&quot;\n    gateway_id = aws_internet_gateway.main.id\n  }\n\n  tags = {\n    Name        = &quot;\\${var.environment}-public-rt&quot;\n    Environment = var.environment\n  }\n}\n\n# Route table associations\nresource &quot;aws_route_table_association&quot; &quot;public&quot; {\n  count          = length(aws_subnet.public)\n  subnet_id      = aws_subnet.public[count.index].id\n  route_table_id = aws_route_table.public.id\n}\n\n# Security group\nresource &quot;aws_security_group&quot; &quot;web&quot; {\n  name_prefix = &quot;\\${var.environment}-web-&quot;\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  tags = {\n    Name        = &quot;\\${var.environment}-web-sg&quot;\n    Environment = var.environment\n  }\n}\n\n# Outputs\noutput &quot;vpc_id&quot; {\n  value = aws_vpc.main.id\n}\n\noutput &quot;public_subnet_ids&quot; {\n  value = aws_subnet.public[*].id\n}\n\noutput &quot;security_group_id&quot; {\n  value = aws_security_group.web.id\n}\nEOF\n\n# Create terraform.tfvars\ncat &gt; terraform.tfvars &lt;&lt;EOF\naws_region  = &quot;us-west-2&quot;\nenvironment = &quot;production&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"azure-provider-setup\" class=\"mobile-header\">Azure Provider Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Azure CLI\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Login to Azure\naz login\n\n# Create service principal for Terraform\naz ad sp create-for-rbac --name &quot;terraform&quot; --role=&quot;Contributor&quot; --scopes=&quot;/subscriptions/YOUR_SUBSCRIPTION_ID&quot;\n\n# Set environment variables\nexport ARM_CLIENT_ID=&quot;your-client-id&quot;\nexport ARM_CLIENT_SECRET=&quot;your-client-secret&quot;  \nexport ARM_SUBSCRIPTION_ID=&quot;your-subscription-id&quot;\nexport ARM_TENANT_ID=&quot;your-tenant-id&quot;\n\n# Create Azure Terraform configuration\nmkdir -p ~/terraform/azure-infrastructure\ncd ~/terraform/azure-infrastructure\n\ncat &gt; main.tf &lt;&lt;EOF\nterraform {\n  required_providers {\n    azurerm = {\n      source  = &quot;hashicorp/azurerm&quot;\n      version = &quot;~&gt; 3.0&quot;\n    }\n  }\n}\n\nprovider &quot;azurerm&quot; {\n  features {}\n}\n\n# Resource Group\nresource &quot;azurerm_resource_group&quot; &quot;main&quot; {\n  name     = &quot;\\${var.environment}-rg&quot;\n  location = var.location\n  \n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Virtual Network\nresource &quot;azurerm_virtual_network&quot; &quot;main&quot; {\n  name                = &quot;\\${var.environment}-vnet&quot;\n  address_space       = [&quot;10.0.0.0/16&quot;]\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Subnet\nresource &quot;azurerm_subnet&quot; &quot;internal&quot; {\n  name                 = &quot;internal&quot;\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = [&quot;10.0.2.0/24&quot;]\n}\n\nvariable &quot;location&quot; {\n  description = &quot;Azure region&quot;\n  default     = &quot;East US&quot;\n}\n\nvariable &quot;environment&quot; {\n  description = &quot;Environment name&quot;\n  default     = &quot;development&quot;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"google-cloud-provider-setup\" class=\"mobile-header\">Google Cloud Provider Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Google Cloud SDK\necho &quot;deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main&quot; | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\nsudo apt-get update &amp;&amp; sudo apt-get install -y google-cloud-cli\n\n# Authenticate\ngcloud auth login\ngcloud config set project YOUR_PROJECT_ID\n\n# Create service account for Terraform\ngcloud iam service-accounts create terraform --display-name=&quot;Terraform Service Account&quot;\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID --member=&quot;serviceAccount:terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com&quot; --role=&quot;roles/editor&quot;\ngcloud iam service-accounts keys create ~/gcp-terraform-key.json --iam-account=terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\n\n# Set environment variable\nexport GOOGLE_APPLICATION_CREDENTIALS=&quot;$HOME/gcp-terraform-key.json&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"basic-usage\" class=\"mobile-header\">Basic Usage</h2>\n<h3 id=\"initialize-and-plan\" class=\"mobile-header\">Initialize and Plan</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize Terraform (run in project directory)\nterraform init\n\n# Format code\nterraform fmt\n\n# Validate configuration\nterraform validate\n\n# Plan changes\nterraform plan\n\n# Apply changes\nterraform apply\n\n# Show current state\nterraform show\n\n# List resources\nterraform state list\n\n# Destroy infrastructure\nterraform destroy</code></pre>\n      </div>\n    </div>\n<h3 id=\"state-management\" class=\"mobile-header\">State Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure remote state (S3 backend example)\ncat &gt; backend.tf &lt;&lt;EOF\nterraform {\n  backend &quot;s3&quot; {\n    bucket = &quot;your-terraform-state-bucket&quot;\n    key    = &quot;infrastructure/terraform.tfstate&quot;\n    region = &quot;us-west-2&quot;\n    \n    # Optional: DynamoDB table for state locking\n    dynamodb_table = &quot;terraform-state-lock&quot;\n    encrypt        = true\n  }\n}\nEOF\n\n# Initialize backend\nterraform init -migrate-state\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Move state resources\nterraform state mv aws_instance.example aws_instance.web_server</code></pre>\n      </div>\n    </div>\n<h3 id=\"workspace-management\" class=\"mobile-header\">Workspace Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create new workspace\nterraform workspace new production\nterraform workspace new staging\n\n# List workspaces\nterraform workspace list\n\n# Switch workspace\nterraform workspace select production\n\n# Show current workspace\nterraform workspace show</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"modules\" class=\"mobile-header\">Modules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create reusable module structure\nmkdir -p modules/vpc/{variables.tf,main.tf,outputs.tf}\n\n# modules/vpc/variables.tf\ncat &gt; modules/vpc/variables.tf &lt;&lt;EOF\nvariable &quot;vpc_cidr&quot; {\n  description = &quot;CIDR block for VPC&quot;\n  type        = string\n  default     = &quot;10.0.0.0/16&quot;\n}\n\nvariable &quot;environment&quot; {\n  description = &quot;Environment name&quot;\n  type        = string\n}\n\nvariable &quot;availability_zones&quot; {\n  description = &quot;List of availability zones&quot;\n  type        = list(string)\n  default     = [&quot;us-west-2a&quot;, &quot;us-west-2b&quot;]\n}\nEOF\n\n# Use module in main configuration\ncat &gt;&gt; main.tf &lt;&lt;EOF\n\nmodule &quot;vpc&quot; {\n  source = &quot;./modules/vpc&quot;\n  \n  vpc_cidr           = &quot;10.0.0.0/16&quot;\n  environment        = var.environment\n  availability_zones = [&quot;us-west-2a&quot;, &quot;us-west-2b&quot;, &quot;us-west-2c&quot;]\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"variable-files-and-environments\" class=\"mobile-header\">Variable Files and Environments</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create environment-specific variable files\ncat &gt; environments/production.tfvars &lt;&lt;EOF\nenvironment = &quot;production&quot;\ninstance_type = &quot;t3.large&quot;\nmin_size = 3\nmax_size = 10\nEOF\n\ncat &gt; environments/staging.tfvars &lt;&lt;EOF\nenvironment = &quot;staging&quot;\ninstance_type = &quot;t3.small&quot;\nmin_size = 1\nmax_size = 3\nEOF\n\n# Apply with specific variables\nterraform apply -var-file=&quot;environments/production.tfvars&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Terraform version\nterraform version\n\n# Validate configuration\nterraform validate\n\n# Check formatting\nterraform fmt -check\n\n# Plan with detailed output\nterraform plan -detailed-exitcode\n\n# Show current state\nterraform show\n\n# Check providers\nterraform providers\n\n# Verify remote state\nterraform state pull\n\n# Check for configuration drift\nterraform plan -refresh-only</code></pre>\n      </div>\n    </div>\n<h2 id=\"best-practices\" class=\"mobile-header\">Best Practices</h2>\n<h3 id=\"project-structure\" class=\"mobile-header\">Project Structure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Recommended directory structure\nmkdir -p terraform-project/{\nenvironments,\nmodules,\n.terraform,\nscripts\n}\n\n# Create .gitignore\ncat &gt; .gitignore &lt;&lt;EOF\n# Terraform files\n*.tfstate\n*.tfstate.*\n.terraform/\n.terraform.lock.hcl\ncrash.log\noverride.tf\noverride.tf.json\n*_override.tf\n*_override.tf.json\n\n# Environment files\n*.tfvars\n.env\n\n# IDE files\n.vscode/\n.idea/\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-practices\" class=\"mobile-header\">Security Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use environment variables for sensitive data\nexport TF_VAR_db_password=&quot;your-secure-password&quot;\nexport TF_VAR_api_key=&quot;your-api-key&quot;\n\n# In terraform configuration:\nvariable &quot;db_password&quot; {\n  description = &quot;Database password&quot;\n  type        = string\n  sensitive   = true\n}\n\n# Use data sources for existing resources\ndata &quot;aws_ami&quot; &quot;ubuntu&quot; {\n  most_recent = true\n  owners      = [&quot;099720109477&quot;] # Canonical\n\n  filter {\n    name   = &quot;name&quot;\n    values = [&quot;ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*&quot;]\n  }\n}\n\n# Tag everything consistently\nlocals {\n  common_tags = {\n    Environment = var.environment\n    Project     = &quot;infrastructure&quot;\n    ManagedBy   = &quot;terraform&quot;\n    Owner       = &quot;devops-team&quot;\n  }\n}\n\nresource &quot;aws_instance&quot; &quot;web&quot; {\n  # ... other configuration\n  tags = local.common_tags\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug with detailed logging\nexport TF_LOG=DEBUG\nexport TF_LOG_PATH=&quot;terraform.log&quot;\nterraform plan\n\n# Check provider configuration\nterraform providers schema -json\n\n# Inspect state file\nterraform state show aws_instance.web\n\n# Refresh state from real infrastructure\nterraform refresh\n\n# Force unlock state (if locked)\nterraform force-unlock LOCK_ID\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Check for unused variables\nterraform validate\n\n# Fix state inconsistencies\nterraform apply -refresh-only -auto-approve</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-with-cicd\" class=\"mobile-header\">Integration with CI/CD</h2>\n<h3 id=\"github-actions\" class=\"mobile-header\">GitHub Actions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create .github/workflows/terraform.yml\nmkdir -p .github/workflows\ncat &gt; .github/workflows/terraform.yml &lt;&lt;EOF\nname: Terraform\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v2\n      with:\n        terraform_version: 1.5.7\n    \n    - name: Terraform Format\n      run: terraform fmt -check\n    \n    - name: Terraform Init\n      run: terraform init\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n    \n    - name: Terraform Plan\n      run: terraform plan\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Apply\n      if: github.ref == &#039;refs/heads/main&#039; &amp;&amp; github.event_name == &#039;push&#039;\n      run: terraform apply -auto-approve\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci\" class=\"mobile-header\">GitLab CI</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create .gitlab-ci.yml\ncat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - validate\n  - plan\n  - apply\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_IN_AUTOMATION: &quot;true&quot;\n\ncache:\n  key: &quot;\\${TF_ROOT}&quot;\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform --version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform validate\n    - terraform fmt -check\n  rules:\n    - if: &#039;\\$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\nplan:\n  stage: plan\n  script:\n    - terraform plan -out=&quot;planfile&quot;\n  artifacts:\n    paths:\n      - planfile\n  rules:\n    - if: &#039;\\$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\napply:\n  stage: apply\n  script:\n    - terraform apply -input=false &quot;planfile&quot;\n  dependencies:\n    - plan\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n      when: manual\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"common-patterns\" class=\"mobile-header\">Common Patterns</h2>\n<h3 id=\"multi-environment-setup\" class=\"mobile-header\">Multi-Environment Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create environment-specific configurations\nmkdir -p environments/{dev,staging,prod}\n\n# environments/dev/main.tf\ncat &gt; environments/dev/main.tf &lt;&lt;EOF\nmodule &quot;infrastructure&quot; {\n  source = &quot;../../modules/infrastructure&quot;\n  \n  environment     = &quot;development&quot;\n  instance_type   = &quot;t3.micro&quot;\n  min_size       = 1\n  max_size       = 2\n  db_instance_class = &quot;db.t3.micro&quot;\n}\nEOF\n\n# Apply for specific environment\ncd environments/dev\nterraform init\nterraform plan\nterraform apply</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Registry</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">AWS Provider Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/hashicorp/terraform-provider-aws/tree/main/examples\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Examples</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"9 min","wordCount":1776,"lastBuilt":"2025-09-14T01:15:27.378Z"},{"name":"traefik","displayName":"Traefik","slug":"traefik","description":"Repo for traefik","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/traefik","updatedAt":"2025-09-08T03:17:15Z","createdAt":"2025-09-08T03:17:04Z","readmeRaw":"## 👋 Welcome to traefik 🚀  \n\ntraefik README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-traefik\" class=\"mobile-header\">👋 Welcome to traefik 🚀  </h2>\n<p class=\"mobile-paragraph\">traefik README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:27.234Z"},{"name":"transmission","displayName":"Transmission","slug":"transmission","description":"Repo for transmission","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/transmission","updatedAt":"2025-09-08T03:17:27Z","createdAt":"2025-09-08T03:17:17Z","readmeRaw":"## 👋 Welcome to transmission 🚀  \n\ntransmission README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-transmission\" class=\"mobile-header\">👋 Welcome to transmission 🚀  </h2>\n<p class=\"mobile-paragraph\">transmission README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:27.121Z"},{"name":"truenas-scale","displayName":"Truenas Scale","slug":"truenas-scale","description":"Repo for truenas-scale","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/truenas-scale","updatedAt":"2025-09-08T03:17:40Z","createdAt":"2025-09-08T03:17:30Z","readmeRaw":"## 👋 Welcome to truenas-scale 🚀  \n\ntruenas-scale README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-truenas-scale\" class=\"mobile-header\">👋 Welcome to truenas-scale 🚀  </h2>\n<p class=\"mobile-paragraph\">truenas-scale README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:27.006Z"},{"name":"unifi-controller","displayName":"Unifi Controller","slug":"unifi-controller","description":"Repo for unifi-controller","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/unifi-controller","updatedAt":"2025-09-08T03:17:53Z","createdAt":"2025-09-08T03:17:43Z","readmeRaw":"## 👋 Welcome to unifi-controller 🚀  \n\nunifi-controller README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-unifi-controller\" class=\"mobile-header\">👋 Welcome to unifi-controller 🚀  </h2>\n<p class=\"mobile-paragraph\">unifi-controller README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:26.889Z"},{"name":"vault","displayName":"Vault","slug":"vault","description":"Repo for vault","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/vault","updatedAt":"2025-09-08T03:18:05Z","createdAt":"2025-09-08T03:17:55Z","readmeRaw":"# HashiCorp Vault Installation Guide\n\nSecrets management platform for securely storing and accessing API keys, passwords, certificates, and other sensitive data.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Root or sudo access\n- 2GB RAM minimum, 4GB recommended\n- Persistent storage for Vault data\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y vault\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Vault\nsudo yum install -y vault\n```\n\n### Manual Binary Installation\n```bash\n# Download latest Vault\nVAULT_VERSION=\"1.14.1\"\ncd /tmp\nwget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip vault_${VAULT_VERSION}_linux_amd64.zip\nsudo mv vault /usr/local/bin/\nsudo chmod +x /usr/local/bin/vault\n\n# Create vault user\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\n```\n\n### Using Docker\n```bash\n# Create directories for persistent data\nmkdir -p ~/vault/{data,config,logs}\n\n# Create basic configuration\ncat > ~/vault/config/vault.hcl <<EOF\nui = true\ndisable_mlock = true\n\nstorage \"file\" {\n  path = \"/vault/data\"\n}\n\nlistener \"tcp\" {\n  address     = \"0.0.0.0:8200\"\n  tls_disable = true\n}\n\napi_addr = \"http://0.0.0.0:8200\"\ncluster_addr = \"https://0.0.0.0:8201\"\nEOF\n\n# Run Vault container\ndocker run -d \\\n  --name vault \\\n  --restart unless-stopped \\\n  -p 8200:8200 \\\n  -v ~/vault/data:/vault/data \\\n  -v ~/vault/config:/vault/config \\\n  -v ~/vault/logs:/vault/logs \\\n  --cap-add=IPC_LOCK \\\n  vault:latest server -config=/vault/config/vault.hcl\n```\n\n## Configuration\n\n### Basic Configuration File\n```bash\n# Create Vault configuration directory\nsudo mkdir -p /etc/vault.d\nsudo chown -R vault:vault /etc/vault.d\n\n# Create main configuration\nsudo tee /etc/vault.d/vault.hcl > /dev/null <<EOF\n# Full configuration options: https://www.vaultproject.io/docs/configuration\n\nui = true\ndisable_mlock = true\n\n# Storage backend\nstorage \"file\" {\n  path = \"/opt/vault/data\"\n}\n\n# HTTPS listener\nlistener \"tcp\" {\n  address       = \"0.0.0.0:8200\"\n  tls_cert_file = \"/opt/vault/tls/tls.crt\"\n  tls_key_file  = \"/opt/vault/tls/tls.key\"\n}\n\n# HTTP listener (disable in production)\nlistener \"tcp\" {\n  address     = \"127.0.0.1:8201\"\n  tls_disable = true\n}\n\n# Enterprise license (if applicable)\n# license_path = \"/etc/vault.d/vault.hclic\"\n\n# API address\napi_addr = \"https://127.0.0.1:8200\"\n\n# Cluster address  \ncluster_addr = \"https://127.0.0.1:8201\"\n\n# Logging\nlog_level = \"INFO\"\nlog_file  = \"/var/log/vault/vault.log\"\nEOF\n\n# Create data directory\nsudo mkdir -p /opt/vault/{data,tls}\nsudo chown -R vault:vault /opt/vault\n\n# Create log directory\nsudo mkdir -p /var/log/vault\nsudo chown vault:vault /var/log/vault\n```\n\n### SSL/TLS Certificate Setup\n```bash\n# Generate self-signed certificate for development\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout /opt/vault/tls/tls.key \\\n  -out /opt/vault/tls/tls.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=vault.example.com\"\n\nsudo chown vault:vault /opt/vault/tls/*\nsudo chmod 600 /opt/vault/tls/tls.key\nsudo chmod 644 /opt/vault/tls/tls.crt\n\n# For production, use Let's Encrypt\nsudo apt install -y certbot\nsudo certbot certonly --standalone -d vault.example.com\nsudo cp /etc/letsencrypt/live/vault.example.com/fullchain.pem /opt/vault/tls/tls.crt\nsudo cp /etc/letsencrypt/live/vault.example.com/privkey.pem /opt/vault/tls/tls.key\nsudo chown vault:vault /opt/vault/tls/*\n```\n\n### SystemD Service\n```bash\n# Create systemd service\nsudo tee /etc/systemd/system/vault.service > /dev/null <<EOF\n[Unit]\nDescription=\"HashiCorp Vault - A tool for managing secrets\"\nDocumentation=https://www.vaultproject.io/docs/\nRequires=network-online.target\nAfter=network-online.target\nConditionFileNotEmpty=/etc/vault.d/vault.hcl\nStartLimitIntervalSec=60\nStartLimitBurst=3\n\n[Service]\nType=notify\nUser=vault\nGroup=vault\nProtectSystem=full\nProtectHome=read-only\nPrivateTmp=yes\nPrivateDevices=yes\nSecureBits=keep-caps\nAmbientCapabilities=CAP_IPC_LOCK\nCapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK\nNoNewPrivileges=yes\nExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl\nExecReload=/bin/kill --signal HUP $MAINPID\nKillMode=process\nRestart=on-failure\nRestartSec=5\nTimeoutStopSec=30\nStartLimitInterval=60\nStartLimitBurst=3\nLimitNOFILE=65536\nLimitMEMLOCK=infinity\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start Vault\nsudo systemctl daemon-reload\nsudo systemctl enable --now vault\n```\n\n## Initial Setup and Unsealing\n\n```bash\n# Initialize Vault (one-time setup)\nexport VAULT_ADDR='http://127.0.0.1:8200'\nvault operator init\n\n# Save the unseal keys and root token securely!\n# Example output:\n# Unseal Key 1: key1...\n# Unseal Key 2: key2...\n# Unseal Key 3: key3...\n# Initial Root Token: hvs.token...\n\n# Unseal Vault (required after every restart)\nvault operator unseal KEY1\nvault operator unseal KEY2  \nvault operator unseal KEY3\n\n# Login with root token\nvault auth ROOT_TOKEN\n\n# Check status\nvault status\n```\n\n## Basic Usage\n\n### Authentication Methods\n```bash\n# Enable userpass authentication\nvault auth enable userpass\n\n# Create user\nvault write auth/userpass/users/admin password=secure_password policies=admin\n\n# Enable GitHub authentication\nvault auth enable github\nvault write auth/github/config organization=your-org\n\n# Login with different methods\nvault auth -method=userpass username=admin\nvault auth -method=github token=github_token\n```\n\n### Secrets Management\n```bash\n# Enable KV secrets engine\nvault secrets enable -version=2 kv\n\n# Store secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=secure_password \\\n  api_key=abc123\n\n# Read secrets\nvault kv get secret/myapp/config\nvault kv get -field=password secret/myapp/config\n\n# Update secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=new_password \\\n  api_key=def456\n\n# Delete secrets\nvault kv delete secret/myapp/config\n\n# List secrets\nvault kv list secret/\n```\n\n### Policies\n```bash\n# Create policy file\ncat > admin-policy.hcl <<EOF\n# Admin policy\npath \"*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\nEOF\n\n# Apply policy\nvault policy write admin admin-policy.hcl\n\n# Create read-only policy\ncat > readonly-policy.hcl <<EOF\n# Read-only access to secrets\npath \"secret/data/*\" {\n  capabilities = [\"read\", \"list\"]\n}\nEOF\n\nvault policy write readonly readonly-policy.hcl\n\n# List policies\nvault policy list\nvault policy read admin\n```\n\n### Database Secrets Engine\n```bash\n# Enable database secrets engine\nvault secrets enable database\n\n# Configure MySQL connection\nvault write database/config/mysql \\\n  plugin_name=mysql-database-plugin \\\n  connection_url=\"{{username}}:{{password}}@tcp(mysql.example.com:3306)/\" \\\n  allowed_roles=\"mysql-role\" \\\n  username=\"vault\" \\\n  password=\"vault-password\"\n\n# Create role for dynamic credentials\nvault write database/roles/mysql-role \\\n  db_name=mysql \\\n  creation_statements=\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';GRANT SELECT ON *.* TO '{{name}}'@'%';\" \\\n  default_ttl=\"1h\" \\\n  max_ttl=\"24h\"\n\n# Generate dynamic credentials\nvault read database/creds/mysql-role\n```\n\n## High Availability Setup\n\n### Consul Backend\n```bash\n# Install Consul\nsudo apt install -y consul\n\n# Configure Vault with Consul backend\nsudo tee /etc/vault.d/vault-ha.hcl > /dev/null <<EOF\nui = true\ndisable_mlock = true\n\nstorage \"consul\" {\n  address = \"127.0.0.1:8500\"\n  path    = \"vault/\"\n}\n\nlistener \"tcp\" {\n  address     = \"0.0.0.0:8200\"\n  tls_cert_file = \"/opt/vault/tls/tls.crt\"\n  tls_key_file  = \"/opt/vault/tls/tls.key\"\n}\n\napi_addr = \"https://vault-1.example.com:8200\"\ncluster_addr = \"https://vault-1.example.com:8201\"\nEOF\n```\n\n## Backup and Recovery\n\n```bash\n# Create backup script\nsudo tee /usr/local/bin/vault-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/vault\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create snapshot (Enterprise feature)\n# vault operator raft snapshot save ${BACKUP_DIR}/vault-snapshot-${DATE}.snap\n\n# For OSS version, backup storage backend data\nif [ -d \"/opt/vault/data\" ]; then\n    tar -czf ${BACKUP_DIR}/vault-data-${DATE}.tar.gz -C /opt/vault data\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"vault-*-*.tar.gz\" -type f -mtime +7 -delete\n\necho \"Backup completed: vault-data-${DATE}.tar.gz\"\nEOF\n\nsudo chmod +x /usr/local/bin/vault-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/vault-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Firewall Configuration\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 8200/tcp   # Vault API\nsudo ufw allow 8201/tcp   # Vault cluster communication\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=8200/tcp\nsudo firewall-cmd --permanent --add-port=8201/tcp\nsudo firewall-cmd --reload\n```\n\n## Verification\n\n```bash\n# Check Vault status\nvault status\n\n# Check systemd service\nsudo systemctl status vault\n\n# Test API connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health | jq\n\n# Check authentication methods\nvault auth list\n\n# Check secrets engines\nvault secrets list\n\n# Check policies\nvault policy list\n\n# Check audit devices\nvault audit list\n\n# View server logs\nsudo journalctl -u vault -f\n\n# Check seal status\nvault operator key-status\n```\n\n## Security Best Practices\n\n```bash\n# Enable audit logging\nvault audit enable file file_path=/var/log/vault/audit.log\n\n# Create separate policies for different roles\ncat > developer-policy.hcl <<EOF\n# Developers can read/write to dev secrets\npath \"secret/data/dev/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\n\n# Read-only access to shared secrets\npath \"secret/data/shared/*\" {\n  capabilities = [\"read\", \"list\"]\n}\nEOF\n\nvault policy write developer developer-policy.hcl\n\n# Set up auto-unseal with cloud KMS (production)\n# AWS KMS example\nvault write sys/config/seal/awskms \\\n  region=\"us-west-2\" \\\n  access_key=\"YOUR_ACCESS_KEY\" \\\n  secret_key=\"YOUR_SECRET_KEY\" \\\n  kms_key_id=\"alias/vault-unseal-key\"\n\n# Enable periodic token renewal\nvault write auth/token/roles/auto-renew \\\n  allowed_policies=\"developer\" \\\n  orphan=true \\\n  period=\"24h\" \\\n  renewable=true\n```\n\n## Integration Examples\n\n### Application Integration\n```bash\n# Using Vault Agent for automatic authentication\ncat > /etc/vault-agent.hcl <<EOF\nexit_after_auth = false\npid_file = \"./pidfile\"\n\nauto_auth {\n  method \"aws\" {\n    mount_path = \"auth/aws\"\n    config = {\n      type = \"iam\"\n      role = \"vault-role\"\n    }\n  }\n\n  sink \"file\" {\n    config = {\n      path = \"/tmp/vault-token-via-agent\"\n    }\n  }\n}\n\ncache {\n  use_auto_auth_token = true\n}\n\nlistener \"tcp\" {\n  address = \"127.0.0.1:8100\"\n  tls_disable = true\n}\n\ntemplate {\n  source      = \"/opt/vault/templates/config.json.tpl\"\n  destination = \"/opt/app/config.json\"\n  perms       = 0640\n  command     = \"systemctl reload myapp\"\n}\nEOF\n\n# Start Vault Agent\nvault agent -config=/etc/vault-agent.hcl\n```\n\n### Kubernetes Integration\n```bash\n# Enable Kubernetes auth method\nvault auth enable kubernetes\n\n# Configure Kubernetes auth\nvault write auth/kubernetes/config \\\n  token_reviewer_jwt=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\n  kubernetes_host=https://${KUBERNETES_PORT_443_TCP_ADDR}:443 \\\n  kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\n# Create role for Kubernetes service accounts\nvault write auth/kubernetes/role/myapp \\\n  bound_service_account_names=vault \\\n  bound_service_account_namespaces=default \\\n  policies=myapp-policy \\\n  ttl=24h\n```\n\n## Troubleshooting\n\n```bash\n# Check Vault logs\nsudo journalctl -u vault -f\n\n# Debug mode\nsudo systemctl stop vault\nsudo -u vault vault server -config=/etc/vault.d/vault.hcl -log-level=debug\n\n# Check seal status\nvault operator key-status\n\n# Check storage backend\nvault operator raft list-peers  # For raft storage\nconsul kv get -recurse vault/   # For consul storage\n\n# Test connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health\n\n# Check performance\nvault operator usage\n\n# Rotate encryption key\nvault operator rotate\n\n# Check configuration\nvault operator diagnose -config=/etc/vault.d/vault.hcl\n```\n\n## Additional Resources\n\n- [Official Documentation](https://www.vaultproject.io/docs)\n- [API Documentation](https://www.vaultproject.io/api-docs)\n- [Best Practices](https://learn.hashicorp.com/tutorials/vault/production-hardening)\n- [Vault Guides](https://learn.hashicorp.com/vault)\n- [Community Forum](https://discuss.hashicorp.com/c/vault)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"hashicorp-vault-installation-guide\" class=\"mobile-header\">HashiCorp Vault Installation Guide</h1>\n<p class=\"mobile-paragraph\">Secrets management platform for securely storing and accessing API keys, passwords, certificates, and other sensitive data.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB recommended</li>\n<li class=\"mobile-list-item\">Persistent storage for Vault data</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho &quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y vault</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Vault\nsudo yum install -y vault</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-binary-installation\" class=\"mobile-header\">Manual Binary Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest Vault\nVAULT_VERSION=&quot;1.14.1&quot;\ncd /tmp\nwget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip vault_${VAULT_VERSION}_linux_amd64.zip\nsudo mv vault /usr/local/bin/\nsudo chmod +x /usr/local/bin/vault\n\n# Create vault user\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create directories for persistent data\nmkdir -p ~/vault/{data,config,logs}\n\n# Create basic configuration\ncat &gt; ~/vault/config/vault.hcl &lt;&lt;EOF\nui = true\ndisable_mlock = true\n\nstorage &quot;file&quot; {\n  path = &quot;/vault/data&quot;\n}\n\nlistener &quot;tcp&quot; {\n  address     = &quot;0.0.0.0:8200&quot;\n  tls_disable = true\n}\n\napi_addr = &quot;http://0.0.0.0:8200&quot;\ncluster_addr = &quot;https://0.0.0.0:8201&quot;\nEOF\n\n# Run Vault container\ndocker run -d \\\n  --name vault \\\n  --restart unless-stopped \\\n  -p 8200:8200 \\\n  -v ~/vault/data:/vault/data \\\n  -v ~/vault/config:/vault/config \\\n  -v ~/vault/logs:/vault/logs \\\n  --cap-add=IPC_LOCK \\\n  vault:latest server -config=/vault/config/vault.hcl</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration-file\" class=\"mobile-header\">Basic Configuration File</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Vault configuration directory\nsudo mkdir -p /etc/vault.d\nsudo chown -R vault:vault /etc/vault.d\n\n# Create main configuration\nsudo tee /etc/vault.d/vault.hcl &gt; /dev/null &lt;&lt;EOF\n# Full configuration options: https://www.vaultproject.io/docs/configuration\n\nui = true\ndisable_mlock = true\n\n# Storage backend\nstorage &quot;file&quot; {\n  path = &quot;/opt/vault/data&quot;\n}\n\n# HTTPS listener\nlistener &quot;tcp&quot; {\n  address       = &quot;0.0.0.0:8200&quot;\n  tls_cert_file = &quot;/opt/vault/tls/tls.crt&quot;\n  tls_key_file  = &quot;/opt/vault/tls/tls.key&quot;\n}\n\n# HTTP listener (disable in production)\nlistener &quot;tcp&quot; {\n  address     = &quot;127.0.0.1:8201&quot;\n  tls_disable = true\n}\n\n# Enterprise license (if applicable)\n# license_path = &quot;/etc/vault.d/vault.hclic&quot;\n\n# API address\napi_addr = &quot;https://127.0.0.1:8200&quot;\n\n# Cluster address  \ncluster_addr = &quot;https://127.0.0.1:8201&quot;\n\n# Logging\nlog_level = &quot;INFO&quot;\nlog_file  = &quot;/var/log/vault/vault.log&quot;\nEOF\n\n# Create data directory\nsudo mkdir -p /opt/vault/{data,tls}\nsudo chown -R vault:vault /opt/vault\n\n# Create log directory\nsudo mkdir -p /var/log/vault\nsudo chown vault:vault /var/log/vault</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-certificate-setup\" class=\"mobile-header\">SSL/TLS Certificate Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate for development\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout /opt/vault/tls/tls.key \\\n  -out /opt/vault/tls/tls.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=vault.example.com&quot;\n\nsudo chown vault:vault /opt/vault/tls/*\nsudo chmod 600 /opt/vault/tls/tls.key\nsudo chmod 644 /opt/vault/tls/tls.crt\n\n# For production, use Let&#039;s Encrypt\nsudo apt install -y certbot\nsudo certbot certonly --standalone -d vault.example.com\nsudo cp /etc/letsencrypt/live/vault.example.com/fullchain.pem /opt/vault/tls/tls.crt\nsudo cp /etc/letsencrypt/live/vault.example.com/privkey.pem /opt/vault/tls/tls.key\nsudo chown vault:vault /opt/vault/tls/*</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service\" class=\"mobile-header\">SystemD Service</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service\nsudo tee /etc/systemd/system/vault.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=&quot;HashiCorp Vault - A tool for managing secrets&quot;\nDocumentation=https://www.vaultproject.io/docs/\nRequires=network-online.target\nAfter=network-online.target\nConditionFileNotEmpty=/etc/vault.d/vault.hcl\nStartLimitIntervalSec=60\nStartLimitBurst=3\n\n[Service]\nType=notify\nUser=vault\nGroup=vault\nProtectSystem=full\nProtectHome=read-only\nPrivateTmp=yes\nPrivateDevices=yes\nSecureBits=keep-caps\nAmbientCapabilities=CAP_IPC_LOCK\nCapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK\nNoNewPrivileges=yes\nExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl\nExecReload=/bin/kill --signal HUP $MAINPID\nKillMode=process\nRestart=on-failure\nRestartSec=5\nTimeoutStopSec=30\nStartLimitInterval=60\nStartLimitBurst=3\nLimitNOFILE=65536\nLimitMEMLOCK=infinity\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start Vault\nsudo systemctl daemon-reload\nsudo systemctl enable --now vault</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-setup-and-unsealing\" class=\"mobile-header\">Initial Setup and Unsealing</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize Vault (one-time setup)\nexport VAULT_ADDR=&#039;http://127.0.0.1:8200&#039;\nvault operator init\n\n# Save the unseal keys and root token securely!\n# Example output:\n# Unseal Key 1: key1...\n# Unseal Key 2: key2...\n# Unseal Key 3: key3...\n# Initial Root Token: hvs.token...\n\n# Unseal Vault (required after every restart)\nvault operator unseal KEY1\nvault operator unseal KEY2  \nvault operator unseal KEY3\n\n# Login with root token\nvault auth ROOT_TOKEN\n\n# Check status\nvault status</code></pre>\n      </div>\n    </div>\n<h2 id=\"basic-usage\" class=\"mobile-header\">Basic Usage</h2>\n<h3 id=\"authentication-methods\" class=\"mobile-header\">Authentication Methods</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable userpass authentication\nvault auth enable userpass\n\n# Create user\nvault write auth/userpass/users/admin password=secure_password policies=admin\n\n# Enable GitHub authentication\nvault auth enable github\nvault write auth/github/config organization=your-org\n\n# Login with different methods\nvault auth -method=userpass username=admin\nvault auth -method=github token=github_token</code></pre>\n      </div>\n    </div>\n<h3 id=\"secrets-management\" class=\"mobile-header\">Secrets Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable KV secrets engine\nvault secrets enable -version=2 kv\n\n# Store secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=secure_password \\\n  api_key=abc123\n\n# Read secrets\nvault kv get secret/myapp/config\nvault kv get -field=password secret/myapp/config\n\n# Update secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=new_password \\\n  api_key=def456\n\n# Delete secrets\nvault kv delete secret/myapp/config\n\n# List secrets\nvault kv list secret/</code></pre>\n      </div>\n    </div>\n<h3 id=\"policies\" class=\"mobile-header\">Policies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create policy file\ncat &gt; admin-policy.hcl &lt;&lt;EOF\n# Admin policy\npath &quot;*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;, &quot;sudo&quot;]\n}\nEOF\n\n# Apply policy\nvault policy write admin admin-policy.hcl\n\n# Create read-only policy\ncat &gt; readonly-policy.hcl &lt;&lt;EOF\n# Read-only access to secrets\npath &quot;secret/data/*&quot; {\n  capabilities = [&quot;read&quot;, &quot;list&quot;]\n}\nEOF\n\nvault policy write readonly readonly-policy.hcl\n\n# List policies\nvault policy list\nvault policy read admin</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-secrets-engine\" class=\"mobile-header\">Database Secrets Engine</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable database secrets engine\nvault secrets enable database\n\n# Configure MySQL connection\nvault write database/config/mysql \\\n  plugin_name=mysql-database-plugin \\\n  connection_url=&quot;{{username}}:{{password}}@tcp(mysql.example.com:3306)/&quot; \\\n  allowed_roles=&quot;mysql-role&quot; \\\n  username=&quot;vault&quot; \\\n  password=&quot;vault-password&quot;\n\n# Create role for dynamic credentials\nvault write database/roles/mysql-role \\\n  db_name=mysql \\\n  creation_statements=&quot;CREATE USER &#039;{{name}}&#039;@&#039;%&#039; IDENTIFIED BY &#039;{{password}}&#039;;GRANT SELECT ON *.* TO &#039;{{name}}&#039;@&#039;%&#039;;&quot; \\\n  default_ttl=&quot;1h&quot; \\\n  max_ttl=&quot;24h&quot;\n\n# Generate dynamic credentials\nvault read database/creds/mysql-role</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h2>\n<h3 id=\"consul-backend\" class=\"mobile-header\">Consul Backend</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Consul\nsudo apt install -y consul\n\n# Configure Vault with Consul backend\nsudo tee /etc/vault.d/vault-ha.hcl &gt; /dev/null &lt;&lt;EOF\nui = true\ndisable_mlock = true\n\nstorage &quot;consul&quot; {\n  address = &quot;127.0.0.1:8500&quot;\n  path    = &quot;vault/&quot;\n}\n\nlistener &quot;tcp&quot; {\n  address     = &quot;0.0.0.0:8200&quot;\n  tls_cert_file = &quot;/opt/vault/tls/tls.crt&quot;\n  tls_key_file  = &quot;/opt/vault/tls/tls.key&quot;\n}\n\napi_addr = &quot;https://vault-1.example.com:8200&quot;\ncluster_addr = &quot;https://vault-1.example.com:8201&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-recovery\" class=\"mobile-header\">Backup and Recovery</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/vault-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/vault&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create snapshot (Enterprise feature)\n# vault operator raft snapshot save ${BACKUP_DIR}/vault-snapshot-${DATE}.snap\n\n# For OSS version, backup storage backend data\nif [ -d &quot;/opt/vault/data&quot; ]; then\n    tar -czf ${BACKUP_DIR}/vault-data-${DATE}.tar.gz -C /opt/vault data\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;vault-*-*.tar.gz&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: vault-data-${DATE}.tar.gz&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/vault-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/vault-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 8200/tcp   # Vault API\nsudo ufw allow 8201/tcp   # Vault cluster communication\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=8200/tcp\nsudo firewall-cmd --permanent --add-port=8201/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Vault status\nvault status\n\n# Check systemd service\nsudo systemctl status vault\n\n# Test API connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health | jq\n\n# Check authentication methods\nvault auth list\n\n# Check secrets engines\nvault secrets list\n\n# Check policies\nvault policy list\n\n# Check audit devices\nvault audit list\n\n# View server logs\nsudo journalctl -u vault -f\n\n# Check seal status\nvault operator key-status</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-best-practices\" class=\"mobile-header\">Security Best Practices</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable audit logging\nvault audit enable file file_path=/var/log/vault/audit.log\n\n# Create separate policies for different roles\ncat &gt; developer-policy.hcl &lt;&lt;EOF\n# Developers can read/write to dev secrets\npath &quot;secret/data/dev/*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;]\n}\n\n# Read-only access to shared secrets\npath &quot;secret/data/shared/*&quot; {\n  capabilities = [&quot;read&quot;, &quot;list&quot;]\n}\nEOF\n\nvault policy write developer developer-policy.hcl\n\n# Set up auto-unseal with cloud KMS (production)\n# AWS KMS example\nvault write sys/config/seal/awskms \\\n  region=&quot;us-west-2&quot; \\\n  access_key=&quot;YOUR_ACCESS_KEY&quot; \\\n  secret_key=&quot;YOUR_SECRET_KEY&quot; \\\n  kms_key_id=&quot;alias/vault-unseal-key&quot;\n\n# Enable periodic token renewal\nvault write auth/token/roles/auto-renew \\\n  allowed_policies=&quot;developer&quot; \\\n  orphan=true \\\n  period=&quot;24h&quot; \\\n  renewable=true</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"application-integration\" class=\"mobile-header\">Application Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Vault Agent for automatic authentication\ncat &gt; /etc/vault-agent.hcl &lt;&lt;EOF\nexit_after_auth = false\npid_file = &quot;./pidfile&quot;\n\nauto_auth {\n  method &quot;aws&quot; {\n    mount_path = &quot;auth/aws&quot;\n    config = {\n      type = &quot;iam&quot;\n      role = &quot;vault-role&quot;\n    }\n  }\n\n  sink &quot;file&quot; {\n    config = {\n      path = &quot;/tmp/vault-token-via-agent&quot;\n    }\n  }\n}\n\ncache {\n  use_auto_auth_token = true\n}\n\nlistener &quot;tcp&quot; {\n  address = &quot;127.0.0.1:8100&quot;\n  tls_disable = true\n}\n\ntemplate {\n  source      = &quot;/opt/vault/templates/config.json.tpl&quot;\n  destination = &quot;/opt/app/config.json&quot;\n  perms       = 0640\n  command     = &quot;systemctl reload myapp&quot;\n}\nEOF\n\n# Start Vault Agent\nvault agent -config=/etc/vault-agent.hcl</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-integration\" class=\"mobile-header\">Kubernetes Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Kubernetes auth method\nvault auth enable kubernetes\n\n# Configure Kubernetes auth\nvault write auth/kubernetes/config \\\n  token_reviewer_jwt=&quot;$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)&quot; \\\n  kubernetes_host=https://${KUBERNETES_PORT_443_TCP_ADDR}:443 \\\n  kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\n# Create role for Kubernetes service accounts\nvault write auth/kubernetes/role/myapp \\\n  bound_service_account_names=vault \\\n  bound_service_account_namespaces=default \\\n  policies=myapp-policy \\\n  ttl=24h</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Vault logs\nsudo journalctl -u vault -f\n\n# Debug mode\nsudo systemctl stop vault\nsudo -u vault vault server -config=/etc/vault.d/vault.hcl -log-level=debug\n\n# Check seal status\nvault operator key-status\n\n# Check storage backend\nvault operator raft list-peers  # For raft storage\nconsul kv get -recurse vault/   # For consul storage\n\n# Test connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health\n\n# Check performance\nvault operator usage\n\n# Rotate encryption key\nvault operator rotate\n\n# Check configuration\nvault operator diagnose -config=/etc/vault.d/vault.hcl</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.vaultproject.io/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.vaultproject.io/api-docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">API Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://learn.hashicorp.com/tutorials/vault/production-hardening\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://learn.hashicorp.com/vault\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Vault Guides</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discuss.hashicorp.com/c/vault\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"8 min","wordCount":1506,"lastBuilt":"2025-09-14T01:15:26.756Z"},{"name":"vscode-server","displayName":"Vscode Server","slug":"vscode-server","description":"Repo for vscode-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/vscode-server","updatedAt":"2025-09-08T03:18:10Z","createdAt":"2023-08-28T03:50:15Z","readmeRaw":"### VS-Code docker\n\n```shell\nsudo mkdir -p /var/lib/docker/storage/vscode/config\n\nsudo docker run -d \\\n  --name=code-server \\\n  -e PUID=0 \\\n  -e PGID=0 \\\n  -e TZ=America/New_York \\\n  -e PASSWORD=password \\\n  -e SUDO_PASSWORD=password \\\n  -e PROXY_DOMAIN=code-server.casjay.in \\\n  -p 8443:8443 \\\n  -v /var/lib/docker/storage/vscode/config:/config \\\n  --restart always \\\n  linuxserver/code-server\n```\n","readmeHtml":"<h3 id=\"vs-code-docker\" class=\"mobile-header\">VS-Code docker</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo mkdir -p /var/lib/docker/storage/vscode/config\n\nsudo docker run -d \\\n  --name=code-server \\\n  -e PUID=0 \\\n  -e PGID=0 \\\n  -e TZ=America/New_York \\\n  -e PASSWORD=password \\\n  -e SUDO_PASSWORD=password \\\n  -e PROXY_DOMAIN=code-server.casjay.in \\\n  -p 8443:8443 \\\n  -v /var/lib/docker/storage/vscode/config:/config \\\n  --restart always \\\n  linuxserver/code-server</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":45,"lastBuilt":"2025-09-14T01:15:26.632Z"},{"name":"webvirt","displayName":"Webvirt","slug":"webvirt","description":"Repo for webvirt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/webvirt","updatedAt":"2025-09-08T03:18:15Z","createdAt":"2023-08-28T03:50:25Z","readmeRaw":"# CentOS 7 WebVirt\n\n```bash\nyum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx\nyum -y install gcc python-devel\n\npip install --upgrade pip\npip install numpy\n\ngit clone git://github.com/retspen/webvirtmgr.git /usr/share/webvirtmgr\ncd /usr/share/webvirtmgr\npip install -r requirements.txt\n\n./manage.py syncdb\n./manage.py collectstatic\n\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt.supervisord.ini -O  /etc/supervisord.d/webvirtmgr.ini\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt-nginx.conf -O /etc/nginx/conf.d/webvirt.conf\n```\n","readmeHtml":"<h1 id=\"centos-7-webvirt\" class=\"mobile-header\">CentOS 7 WebVirt</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx\nyum -y install gcc python-devel\n\npip install --upgrade pip\npip install numpy\n\ngit clone git://github.com/retspen/webvirtmgr.git /usr/share/webvirtmgr\ncd /usr/share/webvirtmgr\npip install -r requirements.txt\n\n./manage.py syncdb\n./manage.py collectstatic\n\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt.supervisord.ini -O  /etc/supervisord.d/webvirtmgr.ini\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt-nginx.conf -O /etc/nginx/conf.d/webvirt.conf</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T01:15:26.497Z"},{"name":"wireguard","displayName":"Wireguard","slug":"wireguard","description":"Repo for wireguard","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/wireguard","updatedAt":"2025-09-08T03:18:27Z","createdAt":"2025-09-08T03:18:17Z","readmeRaw":"## 👋 Welcome to wireguard 🚀  \n\nwireguard README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-wireguard\" class=\"mobile-header\">👋 Welcome to wireguard 🚀  </h2>\n<p class=\"mobile-paragraph\">wireguard README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:26.363Z"},{"name":"wordpress","displayName":"Wordpress","slug":"wordpress","description":"Repo for wordpress","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/wordpress","updatedAt":"2025-09-08T03:18:39Z","createdAt":"2025-09-08T03:18:29Z","readmeRaw":"# WordPress Installation Guide\n\nPopular content management system (CMS) for creating websites, blogs, and web applications with a user-friendly interface.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Web server (Apache or NGINX)\n- PHP 7.4+ with required extensions\n- MySQL 5.7+ or PostgreSQL 9.6+\n- SSL certificate (recommended)\n\n## Installation\n\n### LAMP Stack Setup (Apache + MySQL + PHP)\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mysql-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now apache2 mysql  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb  # RHEL/CentOS\n```\n\n### LEMP Stack Setup (NGINX + MySQL + PHP)\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y nginx mysql-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS  \nsudo yum install -y nginx mariadb-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now nginx mysql php7.4-fpm  # Ubuntu/Debian\nsudo systemctl enable --now nginx mariadb php-fpm   # RHEL/CentOS\n```\n\n### Database Setup\n```bash\n# Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create WordPress database\nsudo mysql -u root -p <<EOF\nCREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\nCREATE USER 'wordpressuser'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL ON wordpress.* TO 'wordpressuser'@'localhost';\nFLUSH PRIVILEGES;\nEXIT\nEOF\n```\n\n### WordPress Download and Setup\n```bash\n# Download WordPress\ncd /tmp\nwget https://wordpress.org/latest.tar.gz\ntar xzf latest.tar.gz\n\n# Create document root and copy files\nsudo mkdir -p /var/www/html/wordpress\nsudo cp -R /tmp/wordpress/* /var/www/html/wordpress/\nsudo chown -R www-data:www-data /var/www/html/wordpress  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/wordpress      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Create wp-config.php\ncd /var/www/html/wordpress\nsudo cp wp-config-sample.php wp-config.php\n\n# Generate salt keys\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/\n\n# Edit wp-config.php with database details and salt keys\nsudo nano wp-config.php\n```\n\n## Configuration\n\n### Apache Virtual Host\n```bash\n# Create Apache virtual host\nsudo tee /etc/apache2/sites-available/wordpress.conf > /dev/null <<EOF\n<VirtualHost *:80>\n    ServerName wordpress.example.com\n    ServerAlias www.wordpress.example.com\n    DocumentRoot /var/www/html/wordpress\n    \n    <Directory /var/www/html/wordpress/>\n        AllowOverride All\n        Options -Indexes +FollowSymLinks\n        Require all granted\n    </Directory>\n    \n    # Security headers\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"\n    \n    # Hide PHP version\n    Header always unset X-Powered-By\n    \n    # Disable server signature\n    ServerSignature Off\n    \n    ErrorLog \\${APACHE_LOG_DIR}/wordpress_error.log\n    CustomLog \\${APACHE_LOG_DIR}/wordpress_access.log combined\n</VirtualHost>\nEOF\n\n# Enable modules and site\nsudo a2enmod rewrite headers ssl\nsudo a2ensite wordpress.conf\nsudo systemctl restart apache2\n```\n\n### NGINX Configuration\n```bash\n# Create NGINX server block\nsudo tee /etc/nginx/sites-available/wordpress > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name wordpress.example.com www.wordpress.example.com;\n    root /var/www/html/wordpress;\n    index index.php index.html index.htm;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n\n    # Hide nginx version\n    server_tokens off;\n\n    # WordPress specific rules\n    location / {\n        try_files \\$uri \\$uri/ /index.php?\\$args;\n    }\n\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Adjust PHP version\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n    }\n\n    # Security rules\n    location ~* /(?:uploads|files)/.*\\.php\\$ {\n        deny all;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)\\$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    # Deny access to sensitive files\n    location ~* \\.(htaccess|htpasswd|ini|log|sh|inc|bak)\\$ {\n        deny all;\n    }\n\n    # WordPress: deny wp-config.php access\n    location ~* wp-config\\.php {\n        deny all;\n    }\n\n    # WordPress: deny general stuff\n    location ~* ^/(\\.user.ini|php.ini|\\..*)$ {\n        deny all;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### WordPress Configuration (wp-config.php)\n```bash\n# Create secure wp-config.php\nsudo tee /var/www/html/wordpress/wp-config.php > /dev/null <<'EOF'\n<?php\n// Database settings\ndefine('DB_NAME', 'wordpress');\ndefine('DB_USER', 'wordpressuser');\ndefine('DB_PASSWORD', 'secure_password');\ndefine('DB_HOST', 'localhost');\ndefine('DB_CHARSET', 'utf8mb4');\ndefine('DB_COLLATE', '');\n\n// Authentication Unique Keys and Salts\n// Generate these at: https://api.wordpress.org/secret-key/1.1/salt/\ndefine('AUTH_KEY',         'put your unique phrase here');\ndefine('SECURE_AUTH_KEY',  'put your unique phrase here');\ndefine('LOGGED_IN_KEY',    'put your unique phrase here');\ndefine('NONCE_KEY',        'put your unique phrase here');\ndefine('AUTH_SALT',        'put your unique phrase here');\ndefine('SECURE_AUTH_SALT', 'put your unique phrase here');\ndefine('LOGGED_IN_SALT',   'put your unique phrase here');\ndefine('NONCE_SALT',       'put your unique phrase here');\n\n// WordPress Database Table prefix\n$table_prefix = 'wp_';\n\n// WordPress debug mode (disable in production)\ndefine('WP_DEBUG', false);\n\n// Security enhancements\ndefine('DISALLOW_FILE_EDIT', true);\ndefine('DISALLOW_FILE_MODS', true);\ndefine('FORCE_SSL_ADMIN', true);\ndefine('WP_AUTO_UPDATE_CORE', true);\n\n// Increase memory limit\ndefine('WP_MEMORY_LIMIT', '512M');\n\n// Custom content directory (optional)\ndefine('WP_CONTENT_DIR', '/var/www/html/wordpress/wp-content');\ndefine('WP_CONTENT_URL', 'https://wordpress.example.com/wp-content');\n\n// Automatic updates\ndefine('WP_AUTO_UPDATE_CORE', 'minor');\n\n/* That's all, stop editing! Happy publishing. */\nif ( ! defined( 'ABSPATH' ) ) {\n    define( 'ABSPATH', dirname( __FILE__ ) . '/' );\n}\n\nrequire_once ABSPATH . 'wp-settings.php';\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/wp-config.php\nsudo chmod 600 /var/www/html/wordpress/wp-config.php\n```\n\n### SSL Configuration with Let's Encrypt\n```bash\n# Install Certbot\nsudo apt install -y certbot python3-certbot-apache  # For Apache\nsudo apt install -y certbot python3-certbot-nginx   # For NGINX\n\n# Obtain SSL certificate\nsudo certbot --apache -d wordpress.example.com -d www.wordpress.example.com  # Apache\nsudo certbot --nginx -d wordpress.example.com -d www.wordpress.example.com   # NGINX\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n```\n\n## Performance Optimization\n\n### PHP Optimization\n```bash\n# Edit PHP configuration\nsudo nano /etc/php/7.4/apache2/php.ini  # Apache\nsudo nano /etc/php/7.4/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\npost_max_size = 128M\nupload_max_filesize = 128M\nmax_execution_time = 300\nmax_input_time = 300\nmax_input_vars = 3000\ndate.timezone = \"America/New_York\"\n\n# Enable OPcache\nopcache.enable = 1\nopcache.memory_consumption = 128\nopcache.interned_strings_buffer = 8\nopcache.max_accelerated_files = 4000\nopcache.revalidate_freq = 2\nopcache.fast_shutdown = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php7.4-fpm nginx  # NGINX\n```\n\n### WordPress Caching\n```bash\n# Install Redis for object caching\nsudo apt install -y redis-server\nsudo systemctl enable --now redis-server\n\n# Configure Redis\nsudo tee -a /etc/redis/redis.conf > /dev/null <<EOF\nmaxmemory 256mb\nmaxmemory-policy allkeys-lru\nEOF\n\nsudo systemctl restart redis-server\n\n# Install WordPress Redis plugin via WP-CLI\ncd /var/www/html/wordpress\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Install and configure Redis plugin\nsudo -u www-data wp plugin install redis-cache --activate\nsudo -u www-data wp redis enable\n\n# Install caching plugins\nsudo -u www-data wp plugin install w3-total-cache --activate\nsudo -u www-data wp plugin install wp-super-cache --activate\n```\n\n### Database Optimization\n```bash\n# Optimize MySQL for WordPress\nsudo tee -a /etc/mysql/mysql.conf.d/mysqld.cnf > /dev/null <<EOF\n\n# WordPress optimizations\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_log_buffer_size = 8M\ninnodb_file_per_table = 1\ninnodb_open_files = 400\ninnodb_io_capacity = 400\ninnodb_flush_method = O_DIRECT\nquery_cache_type = 1\nquery_cache_limit = 1M\nquery_cache_size = 16M\ntmp_table_size = 32M\nmax_heap_table_size = 32M\nmax_connections = 500\nthread_cache_size = 50\nopen_files_limit = 65535\ntable_definition_cache = 4096\ntable_open_cache = 10240\nEOF\n\nsudo systemctl restart mysql\n```\n\n## Security Hardening\n\n### WordPress Security\n```bash\n# Install security plugins\nsudo -u www-data wp plugin install wordfence --activate\nsudo -u www-data wp plugin install sucuri-scanner --activate\nsudo -u www-data wp plugin install all-in-one-wp-security-and-firewall --activate\n\n# Hide WordPress version\necho \"remove_action('wp_head', 'wp_generator');\" | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Disable XML-RPC if not needed\necho \"add_filter('xmlrpc_enabled', '__return_false');\" | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Change WordPress security keys regularly\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/ | sudo tee -a /var/www/html/wordpress/wp-config.php\n\n# Create .htaccess security rules (Apache)\nsudo tee /var/www/html/wordpress/.htaccess > /dev/null <<EOF\n# Block access to wp-config.php\n<Files wp-config.php>\norder allow,deny\ndeny from all\n</Files>\n\n# Block access to readme.html, license.txt\n<FilesMatch \"^(readme\\.html|license\\.txt|wp-config\\.php)\">\norder allow,deny\ndeny from all\n</FilesMatch>\n\n# Protect against script injections\nOptions +FollowSymLinks\nRewriteEngine On\nRewriteCond %{QUERY_STRING} (<|%3C).*script.*(>|%3E) [NC,OR]\nRewriteCond %{QUERY_STRING} GLOBALS(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} _REQUEST(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} ^.*(\\[|\\]|\\(|\\)|<|>|ê|\"|;|\\?|\\*|=$).* [NC,OR]\nRewriteCond %{QUERY_STRING} ^.*(â|á|à|ä|â|ã|å|æ|ç|è|é|ê|ë|ì|í|î|ï|ð|ñ|ò|ó|ô|õ|ö|ø|ù|ú|û|ü|ý|þ|ÿ|À|Á|Â|Ã|Å|Æ|Ç|È|É|Ê|Ë|Ì|Í|Î|Ï|Ð|Ñ|Ò|Ó|Ô|Õ|Ö|Ø|Ù|Ú|Û|Ü|Ý|Þ).* [NC]\nRewriteRule ^(.*)$ index.php [F,L]\n\n# Limit login attempts\n<FilesMatch \"wp-login.php\">\norder allow,deny\nallow from all\n# Add your IP addresses here for admin access\n# allow from 192.168.1.100\n</FilesMatch>\n\n# Disable directory browsing\nOptions -Indexes\n\n# Protect uploads directory\n<Directory \"/var/www/html/wordpress/wp-content/uploads/\">\n    <Files \"*.php\">\n        Order Deny,Allow\n        Deny from All\n    </Files>\n</Directory>\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/.htaccess\n```\n\n### Firewall Configuration\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 'Apache Full'    # or 'Nginx Full'\nsudo ufw allow ssh\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n```\n\n## WordPress CLI (WP-CLI) Installation\n\n```bash\n# Install WP-CLI\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Verify installation\nwp --info\n\n# Common WP-CLI commands\ncd /var/www/html/wordpress\n\n# Download WordPress core\nsudo -u www-data wp core download\n\n# Create wp-config.php\nsudo -u www-data wp config create \\\n  --dbname=wordpress \\\n  --dbuser=wordpressuser \\\n  --dbpass=secure_password \\\n  --dbhost=localhost\n\n# Install WordPress\nsudo -u www-data wp core install \\\n  --url=https://wordpress.example.com \\\n  --title=\"My WordPress Site\" \\\n  --admin_user=admin \\\n  --admin_password=secure_admin_password \\\n  --admin_email=admin@example.com\n\n# Update WordPress core\nsudo -u www-data wp core update\n\n# Install and activate plugins\nsudo -u www-data wp plugin install akismet --activate\nsudo -u www-data wp plugin install jetpack --activate\nsudo -u www-data wp plugin install yoast-seo --activate\n\n# Update plugins\nsudo -u www-data wp plugin update --all\n\n# Install themes\nsudo -u www-data wp theme install twentytwentythree --activate\nsudo -u www-data wp theme update --all\n\n# Create users\nsudo -u www-data wp user create editor editor@example.com \\\n  --role=editor --user_pass=secure_password\n\n# Database operations\nsudo -u www-data wp db optimize\nsudo -u www-data wp db repair\nsudo -u www-data wp db check\n```\n\n## Backup and Maintenance\n\n### Automated Backup Script\n```bash\n# Create backup script\nsudo tee /usr/local/bin/wordpress-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/wordpress\"\nWP_DIR=\"/var/www/html/wordpress\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Backup WordPress files\ntar -czf ${BACKUP_DIR}/files/wordpress-files-${DATE}.tar.gz -C ${WP_DIR} .\n\n# Backup database\nmysqldump -u wordpressuser -p'secure_password' wordpress > ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\n\n# Using WP-CLI for database export\ncd ${WP_DIR}\nsudo -u www-data wp db export ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"wordpress-*\" -type f -mtime +7 -delete\n\necho \"Backup completed: wordpress-${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/wordpress-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Maintenance Tasks\n```bash\n# Create maintenance script\nsudo tee /usr/local/bin/wordpress-maintenance.sh > /dev/null <<'EOF'\n#!/bin/bash\nWP_DIR=\"/var/www/html/wordpress\"\ncd ${WP_DIR}\n\n# Update WordPress core, plugins, and themes\nsudo -u www-data wp core update\nsudo -u www-data wp plugin update --all\nsudo -u www-data wp theme update --all\n\n# Database cleanup\nsudo -u www-data wp transient delete --all\nsudo -u www-data wp db optimize\n\n# Clear caches\nif sudo -u www-data wp plugin is-installed w3-total-cache; then\n    sudo -u www-data wp w3-total-cache flush all\nfi\n\nif sudo -u www-data wp plugin is-installed wp-super-cache; then\n    sudo -u www-data wp super-cache flush\nfi\n\necho \"WordPress maintenance completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-maintenance.sh\n\n# Schedule weekly maintenance\necho \"0 3 * * 0 root /usr/local/bin/wordpress-maintenance.sh\" | sudo tee -a /etc/crontab\n```\n\n## Verification\n\n```bash\n# Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Check PHP-FPM (if using NGINX)\nsudo systemctl status php7.4-fpm\n\n# Test database connection\nmysql -u wordpressuser -p -e \"SHOW DATABASES;\"\n\n# Test website\ncurl -I http://wordpress.example.com\n\n# Check WordPress status via WP-CLI\ncd /var/www/html/wordpress\nsudo -u www-data wp core version\nsudo -u www-data wp plugin status\nsudo -u www-data wp theme status\n\n# Check file permissions\nls -la /var/www/html/wordpress/\nls -la /var/www/html/wordpress/wp-content/\n\n# Test uploads directory\nsudo -u www-data wp media regenerate --yes\n\n# Check for WordPress updates\nsudo -u www-data wp core check-update\nsudo -u www-data wp plugin list --update=available\n```\n\n## Troubleshooting\n\n```bash\n# Enable WordPress debug mode\nsudo nano /var/www/html/wordpress/wp-config.php\n# Add: define('WP_DEBUG', true);\n# Add: define('WP_DEBUG_LOG', true);\n\n# Check WordPress debug log\ntail -f /var/www/html/wordpress/wp-content/debug.log\n\n# Check web server logs\nsudo tail -f /var/log/apache2/wordpress_error.log  # Apache\nsudo tail -f /var/log/nginx/error.log              # NGINX\n\n# Check PHP logs\nsudo tail -f /var/log/php7.4-fpm.log\n\n# Database connectivity test\nsudo -u www-data wp db check\n\n# Plugin conflict troubleshooting\nsudo -u www-data wp plugin deactivate --all\nsudo -u www-data wp plugin activate plugin-name\n\n# Theme troubleshooting\nsudo -u www-data wp theme activate twentytwentythree\n\n# Check disk space\ndf -h /var/www/html/wordpress/\n\n# File permission issues\nsudo chown -R www-data:www-data /var/www/html/wordpress/\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Reset user password via WP-CLI\nsudo -u www-data wp user update admin --user_pass=new_password\n```\n\n## Additional Resources\n\n- [WordPress Codex](https://codex.wordpress.org/)\n- [WP-CLI Documentation](https://wp-cli.org/)\n- [WordPress Security Guide](https://wordpress.org/support/article/hardening-wordpress/)\n- [Performance Best Practices](https://wordpress.org/support/article/optimization/)\n- [WordPress Forums](https://wordpress.org/support/forums/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"wordpress-installation-guide\" class=\"mobile-header\">WordPress Installation Guide</h1>\n<p class=\"mobile-paragraph\">Popular content management system (CMS) for creating websites, blogs, and web applications with a user-friendly interface.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Web server (Apache or NGINX)</li>\n<li class=\"mobile-list-item\">PHP 7.4+ with required extensions</li>\n<li class=\"mobile-list-item\">MySQL 5.7+ or PostgreSQL 9.6+</li>\n<li class=\"mobile-list-item\">SSL certificate (recommended)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"lamp-stack-setup-apache-mysql-php\" class=\"mobile-header\">LAMP Stack Setup (Apache + MySQL + PHP)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mysql-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now apache2 mysql  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb  # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"lemp-stack-setup-nginx-mysql-php\" class=\"mobile-header\">LEMP Stack Setup (NGINX + MySQL + PHP)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt update\nsudo apt install -y nginx mysql-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS  \nsudo yum install -y nginx mariadb-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now nginx mysql php7.4-fpm  # Ubuntu/Debian\nsudo systemctl enable --now nginx mariadb php-fpm   # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-setup\" class=\"mobile-header\">Database Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create WordPress database\nsudo mysql -u root -p &lt;&lt;EOF\nCREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\nCREATE USER &#039;wordpressuser&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL ON wordpress.* TO &#039;wordpressuser&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEXIT\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-download-and-setup\" class=\"mobile-header\">WordPress Download and Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download WordPress\ncd /tmp\nwget https://wordpress.org/latest.tar.gz\ntar xzf latest.tar.gz\n\n# Create document root and copy files\nsudo mkdir -p /var/www/html/wordpress\nsudo cp -R /tmp/wordpress/* /var/www/html/wordpress/\nsudo chown -R www-data:www-data /var/www/html/wordpress  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/wordpress      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Create wp-config.php\ncd /var/www/html/wordpress\nsudo cp wp-config-sample.php wp-config.php\n\n# Generate salt keys\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/\n\n# Edit wp-config.php with database details and salt keys\nsudo nano wp-config.php</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"apache-virtual-host\" class=\"mobile-header\">Apache Virtual Host</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Apache virtual host\nsudo tee /etc/apache2/sites-available/wordpress.conf &gt; /dev/null &lt;&lt;EOF\n&lt;VirtualHost *:80&gt;\n    ServerName wordpress.example.com\n    ServerAlias www.wordpress.example.com\n    DocumentRoot /var/www/html/wordpress\n    \n    &lt;Directory /var/www/html/wordpress/&gt;\n        AllowOverride All\n        Options -Indexes +FollowSymLinks\n        Require all granted\n    &lt;/Directory&gt;\n    \n    # Security headers\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n    \n    # Hide PHP version\n    Header always unset X-Powered-By\n    \n    # Disable server signature\n    ServerSignature Off\n    \n    ErrorLog \\${APACHE_LOG_DIR}/wordpress_error.log\n    CustomLog \\${APACHE_LOG_DIR}/wordpress_access.log combined\n&lt;/VirtualHost&gt;\nEOF\n\n# Enable modules and site\nsudo a2enmod rewrite headers ssl\nsudo a2ensite wordpress.conf\nsudo systemctl restart apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">NGINX Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX server block\nsudo tee /etc/nginx/sites-available/wordpress &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 80;\n    server_name wordpress.example.com www.wordpress.example.com;\n    root /var/www/html/wordpress;\n    index index.php index.html index.htm;\n\n    # Security headers\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot; always;\n    add_header Content-Security-Policy &quot;default-src &#039;self&#039; http: https: data: blob: &#039;unsafe-inline&#039;&quot; always;\n\n    # Hide nginx version\n    server_tokens off;\n\n    # WordPress specific rules\n    location / {\n        try_files \\$uri \\$uri/ /index.php?\\$args;\n    }\n\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Adjust PHP version\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n    }\n\n    # Security rules\n    location ~* /(?:uploads|files)/.*\\.php\\$ {\n        deny all;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)\\$ {\n        expires 1y;\n        add_header Cache-Control &quot;public, immutable&quot;;\n    }\n\n    # Deny access to sensitive files\n    location ~* \\.(htaccess|htpasswd|ini|log|sh|inc|bak)\\$ {\n        deny all;\n    }\n\n    # WordPress: deny wp-config.php access\n    location ~* wp-config\\.php {\n        deny all;\n    }\n\n    # WordPress: deny general stuff\n    location ~* ^/(\\.user.ini|php.ini|\\..*)$ {\n        deny all;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-configuration-wp-configphp\" class=\"mobile-header\">WordPress Configuration (wp-config.php)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure wp-config.php\nsudo tee /var/www/html/wordpress/wp-config.php &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n&lt;?php\n// Database settings\ndefine(&#039;DB_NAME&#039;, &#039;wordpress&#039;);\ndefine(&#039;DB_USER&#039;, &#039;wordpressuser&#039;);\ndefine(&#039;DB_PASSWORD&#039;, &#039;secure_password&#039;);\ndefine(&#039;DB_HOST&#039;, &#039;localhost&#039;);\ndefine(&#039;DB_CHARSET&#039;, &#039;utf8mb4&#039;);\ndefine(&#039;DB_COLLATE&#039;, &#039;&#039;);\n\n// Authentication Unique Keys and Salts\n// Generate these at: https://api.wordpress.org/secret-key/1.1/salt/\ndefine(&#039;AUTH_KEY&#039;,         &#039;put your unique phrase here&#039;);\ndefine(&#039;SECURE_AUTH_KEY&#039;,  &#039;put your unique phrase here&#039;);\ndefine(&#039;LOGGED_IN_KEY&#039;,    &#039;put your unique phrase here&#039;);\ndefine(&#039;NONCE_KEY&#039;,        &#039;put your unique phrase here&#039;);\ndefine(&#039;AUTH_SALT&#039;,        &#039;put your unique phrase here&#039;);\ndefine(&#039;SECURE_AUTH_SALT&#039;, &#039;put your unique phrase here&#039;);\ndefine(&#039;LOGGED_IN_SALT&#039;,   &#039;put your unique phrase here&#039;);\ndefine(&#039;NONCE_SALT&#039;,       &#039;put your unique phrase here&#039;);\n\n// WordPress Database Table prefix\n$table_prefix = &#039;wp_&#039;;\n\n// WordPress debug mode (disable in production)\ndefine(&#039;WP_DEBUG&#039;, false);\n\n// Security enhancements\ndefine(&#039;DISALLOW_FILE_EDIT&#039;, true);\ndefine(&#039;DISALLOW_FILE_MODS&#039;, true);\ndefine(&#039;FORCE_SSL_ADMIN&#039;, true);\ndefine(&#039;WP_AUTO_UPDATE_CORE&#039;, true);\n\n// Increase memory limit\ndefine(&#039;WP_MEMORY_LIMIT&#039;, &#039;512M&#039;);\n\n// Custom content directory (optional)\ndefine(&#039;WP_CONTENT_DIR&#039;, &#039;/var/www/html/wordpress/wp-content&#039;);\ndefine(&#039;WP_CONTENT_URL&#039;, &#039;https://wordpress.example.com/wp-content&#039;);\n\n// Automatic updates\ndefine(&#039;WP_AUTO_UPDATE_CORE&#039;, &#039;minor&#039;);\n\n/* That&#039;s all, stop editing! Happy publishing. */\nif ( ! defined( &#039;ABSPATH&#039; ) ) {\n    define( &#039;ABSPATH&#039;, dirname( __FILE__ ) . &#039;/&#039; );\n}\n\nrequire_once ABSPATH . &#039;wp-settings.php&#039;;\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/wp-config.php\nsudo chmod 600 /var/www/html/wordpress/wp-config.php</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssl-configuration-with-lets-encrypt\" class=\"mobile-header\">SSL Configuration with Let's Encrypt</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot\nsudo apt install -y certbot python3-certbot-apache  # For Apache\nsudo apt install -y certbot python3-certbot-nginx   # For NGINX\n\n# Obtain SSL certificate\nsudo certbot --apache -d wordpress.example.com -d www.wordpress.example.com  # Apache\nsudo certbot --nginx -d wordpress.example.com -d www.wordpress.example.com   # NGINX\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"php-optimization\" class=\"mobile-header\">PHP Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit PHP configuration\nsudo nano /etc/php/7.4/apache2/php.ini  # Apache\nsudo nano /etc/php/7.4/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\npost_max_size = 128M\nupload_max_filesize = 128M\nmax_execution_time = 300\nmax_input_time = 300\nmax_input_vars = 3000\ndate.timezone = &quot;America/New_York&quot;\n\n# Enable OPcache\nopcache.enable = 1\nopcache.memory_consumption = 128\nopcache.interned_strings_buffer = 8\nopcache.max_accelerated_files = 4000\nopcache.revalidate_freq = 2\nopcache.fast_shutdown = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php7.4-fpm nginx  # NGINX</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-caching\" class=\"mobile-header\">WordPress Caching</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis for object caching\nsudo apt install -y redis-server\nsudo systemctl enable --now redis-server\n\n# Configure Redis\nsudo tee -a /etc/redis/redis.conf &gt; /dev/null &lt;&lt;EOF\nmaxmemory 256mb\nmaxmemory-policy allkeys-lru\nEOF\n\nsudo systemctl restart redis-server\n\n# Install WordPress Redis plugin via WP-CLI\ncd /var/www/html/wordpress\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Install and configure Redis plugin\nsudo -u www-data wp plugin install redis-cache --activate\nsudo -u www-data wp redis enable\n\n# Install caching plugins\nsudo -u www-data wp plugin install w3-total-cache --activate\nsudo -u www-data wp plugin install wp-super-cache --activate</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize MySQL for WordPress\nsudo tee -a /etc/mysql/mysql.conf.d/mysqld.cnf &gt; /dev/null &lt;&lt;EOF\n\n# WordPress optimizations\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_log_buffer_size = 8M\ninnodb_file_per_table = 1\ninnodb_open_files = 400\ninnodb_io_capacity = 400\ninnodb_flush_method = O_DIRECT\nquery_cache_type = 1\nquery_cache_limit = 1M\nquery_cache_size = 16M\ntmp_table_size = 32M\nmax_heap_table_size = 32M\nmax_connections = 500\nthread_cache_size = 50\nopen_files_limit = 65535\ntable_definition_cache = 4096\ntable_open_cache = 10240\nEOF\n\nsudo systemctl restart mysql</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"wordpress-security\" class=\"mobile-header\">WordPress Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install security plugins\nsudo -u www-data wp plugin install wordfence --activate\nsudo -u www-data wp plugin install sucuri-scanner --activate\nsudo -u www-data wp plugin install all-in-one-wp-security-and-firewall --activate\n\n# Hide WordPress version\necho &quot;remove_action(&#039;wp_head&#039;, &#039;wp_generator&#039;);&quot; | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Disable XML-RPC if not needed\necho &quot;add_filter(&#039;xmlrpc_enabled&#039;, &#039;__return_false&#039;);&quot; | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Change WordPress security keys regularly\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/ | sudo tee -a /var/www/html/wordpress/wp-config.php\n\n# Create .htaccess security rules (Apache)\nsudo tee /var/www/html/wordpress/.htaccess &gt; /dev/null &lt;&lt;EOF\n# Block access to wp-config.php\n&lt;Files wp-config.php&gt;\norder allow,deny\ndeny from all\n&lt;/Files&gt;\n\n# Block access to readme.html, license.txt\n&lt;FilesMatch &quot;^(readme\\.html|license\\.txt|wp-config\\.php)&quot;&gt;\norder allow,deny\ndeny from all\n&lt;/FilesMatch&gt;\n\n# Protect against script injections\nOptions +FollowSymLinks\nRewriteEngine On\nRewriteCond %{QUERY_STRING} (&lt;|%3C).*script.*(&gt;|%3E) [NC,OR]\nRewriteCond %{QUERY_STRING} GLOBALS(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} _REQUEST(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} ^.*(\\[|\\]|\\(|\\)|&lt;|&gt;|ê|&quot;|;|\\?|\\*|=$).* [NC,OR]\nRewriteCond %{QUERY_STRING} ^.*(â|á|à|ä|â|ã|å|æ|ç|è|é|ê|ë|ì|í|î|ï|ð|ñ|ò|ó|ô|õ|ö|ø|ù|ú|û|ü|ý|þ|ÿ|À|Á|Â|Ã|Å|Æ|Ç|È|É|Ê|Ë|Ì|Í|Î|Ï|Ð|Ñ|Ò|Ó|Ô|Õ|Ö|Ø|Ù|Ú|Û|Ü|Ý|Þ).* [NC]\nRewriteRule ^(.*)$ index.php [F,L]\n\n# Limit login attempts\n&lt;FilesMatch &quot;wp-login.php&quot;&gt;\norder allow,deny\nallow from all\n# Add your IP addresses here for admin access\n# allow from 192.168.1.100\n&lt;/FilesMatch&gt;\n\n# Disable directory browsing\nOptions -Indexes\n\n# Protect uploads directory\n&lt;Directory &quot;/var/www/html/wordpress/wp-content/uploads/&quot;&gt;\n    &lt;Files &quot;*.php&quot;&gt;\n        Order Deny,Allow\n        Deny from All\n    &lt;/Files&gt;\n&lt;/Directory&gt;\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/.htaccess</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow &#039;Apache Full&#039;    # or &#039;Nginx Full&#039;\nsudo ufw allow ssh\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"wordpress-cli-wp-cli-installation\" class=\"mobile-header\">WordPress CLI (WP-CLI) Installation</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WP-CLI\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Verify installation\nwp --info\n\n# Common WP-CLI commands\ncd /var/www/html/wordpress\n\n# Download WordPress core\nsudo -u www-data wp core download\n\n# Create wp-config.php\nsudo -u www-data wp config create \\\n  --dbname=wordpress \\\n  --dbuser=wordpressuser \\\n  --dbpass=secure_password \\\n  --dbhost=localhost\n\n# Install WordPress\nsudo -u www-data wp core install \\\n  --url=https://wordpress.example.com \\\n  --title=&quot;My WordPress Site&quot; \\\n  --admin_user=admin \\\n  --admin_password=secure_admin_password \\\n  --admin_email=admin@example.com\n\n# Update WordPress core\nsudo -u www-data wp core update\n\n# Install and activate plugins\nsudo -u www-data wp plugin install akismet --activate\nsudo -u www-data wp plugin install jetpack --activate\nsudo -u www-data wp plugin install yoast-seo --activate\n\n# Update plugins\nsudo -u www-data wp plugin update --all\n\n# Install themes\nsudo -u www-data wp theme install twentytwentythree --activate\nsudo -u www-data wp theme update --all\n\n# Create users\nsudo -u www-data wp user create editor editor@example.com \\\n  --role=editor --user_pass=secure_password\n\n# Database operations\nsudo -u www-data wp db optimize\nsudo -u www-data wp db repair\nsudo -u www-data wp db check</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-maintenance\" class=\"mobile-header\">Backup and Maintenance</h2>\n<h3 id=\"automated-backup-script\" class=\"mobile-header\">Automated Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/wordpress-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/wordpress&quot;\nWP_DIR=&quot;/var/www/html/wordpress&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Backup WordPress files\ntar -czf ${BACKUP_DIR}/files/wordpress-files-${DATE}.tar.gz -C ${WP_DIR} .\n\n# Backup database\nmysqldump -u wordpressuser -p&#039;secure_password&#039; wordpress &gt; ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\n\n# Using WP-CLI for database export\ncd ${WP_DIR}\nsudo -u www-data wp db export ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;wordpress-*&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: wordpress-${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/wordpress-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create maintenance script\nsudo tee /usr/local/bin/wordpress-maintenance.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nWP_DIR=&quot;/var/www/html/wordpress&quot;\ncd ${WP_DIR}\n\n# Update WordPress core, plugins, and themes\nsudo -u www-data wp core update\nsudo -u www-data wp plugin update --all\nsudo -u www-data wp theme update --all\n\n# Database cleanup\nsudo -u www-data wp transient delete --all\nsudo -u www-data wp db optimize\n\n# Clear caches\nif sudo -u www-data wp plugin is-installed w3-total-cache; then\n    sudo -u www-data wp w3-total-cache flush all\nfi\n\nif sudo -u www-data wp plugin is-installed wp-super-cache; then\n    sudo -u www-data wp super-cache flush\nfi\n\necho &quot;WordPress maintenance completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-maintenance.sh\n\n# Schedule weekly maintenance\necho &quot;0 3 * * 0 root /usr/local/bin/wordpress-maintenance.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Check PHP-FPM (if using NGINX)\nsudo systemctl status php7.4-fpm\n\n# Test database connection\nmysql -u wordpressuser -p -e &quot;SHOW DATABASES;&quot;\n\n# Test website\ncurl -I http://wordpress.example.com\n\n# Check WordPress status via WP-CLI\ncd /var/www/html/wordpress\nsudo -u www-data wp core version\nsudo -u www-data wp plugin status\nsudo -u www-data wp theme status\n\n# Check file permissions\nls -la /var/www/html/wordpress/\nls -la /var/www/html/wordpress/wp-content/\n\n# Test uploads directory\nsudo -u www-data wp media regenerate --yes\n\n# Check for WordPress updates\nsudo -u www-data wp core check-update\nsudo -u www-data wp plugin list --update=available</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable WordPress debug mode\nsudo nano /var/www/html/wordpress/wp-config.php\n# Add: define(&#039;WP_DEBUG&#039;, true);\n# Add: define(&#039;WP_DEBUG_LOG&#039;, true);\n\n# Check WordPress debug log\ntail -f /var/www/html/wordpress/wp-content/debug.log\n\n# Check web server logs\nsudo tail -f /var/log/apache2/wordpress_error.log  # Apache\nsudo tail -f /var/log/nginx/error.log              # NGINX\n\n# Check PHP logs\nsudo tail -f /var/log/php7.4-fpm.log\n\n# Database connectivity test\nsudo -u www-data wp db check\n\n# Plugin conflict troubleshooting\nsudo -u www-data wp plugin deactivate --all\nsudo -u www-data wp plugin activate plugin-name\n\n# Theme troubleshooting\nsudo -u www-data wp theme activate twentytwentythree\n\n# Check disk space\ndf -h /var/www/html/wordpress/\n\n# File permission issues\nsudo chown -R www-data:www-data /var/www/html/wordpress/\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Reset user password via WP-CLI\nsudo -u www-data wp user update admin --user_pass=new_password</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://codex.wordpress.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WordPress Codex</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wp-cli.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WP-CLI Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/support/article/hardening-wordpress/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WordPress Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/support/article/optimization/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/support/forums/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WordPress Forums</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"11 min","wordCount":2044,"lastBuilt":"2025-09-14T01:15:26.240Z"},{"name":"xen-orchestra","displayName":"Xen Orchestra","slug":"xen-orchestra","description":"Repo for xen-orchestra","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/xen-orchestra","updatedAt":"2025-09-08T03:18:43Z","createdAt":"2023-08-28T03:50:35Z","readmeRaw":"# xen-orchestra - CentOS\n\n```bash\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall 'Development Tools'\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## xen-orchestra - Debian\n\n```bash\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## xen-orchestra - Updating\n\n```bash\ncd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build\n```\n","readmeHtml":"<h1 id=\"xen-orchestra-centos\" class=\"mobile-header\">xen-orchestra - CentOS</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall &#039;Development Tools&#039;\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-debian\" class=\"mobile-header\">xen-orchestra - Debian</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-updating\" class=\"mobile-header\">xen-orchestra - Updating</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":152,"lastBuilt":"2025-09-14T01:15:26.112Z"},{"name":"yacht","displayName":"Yacht","slug":"yacht","description":"Repo for yacht","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/yacht","updatedAt":"2025-09-08T03:18:56Z","createdAt":"2025-09-08T03:18:45Z","readmeRaw":"## 👋 Welcome to yacht 🚀  \n\nyacht README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-yacht\" class=\"mobile-header\">👋 Welcome to yacht 🚀  </h2>\n<p class=\"mobile-paragraph\">yacht README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:25.985Z"},{"name":"zabbix","displayName":"Zabbix","slug":"zabbix","description":"Repo for zabbix","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/zabbix","updatedAt":"2025-09-08T03:19:09Z","createdAt":"2025-09-08T03:18:59Z","readmeRaw":"## 👋 Welcome to zabbix 🚀  \n\nzabbix README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-zabbix\" class=\"mobile-header\">👋 Welcome to zabbix 🚀  </h2>\n<p class=\"mobile-paragraph\">zabbix README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:25.861Z"},{"name":"zigbee2mqtt","displayName":"Zigbee2mqtt","slug":"zigbee2mqtt","description":"Repo for zigbee2mqtt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/zigbee2mqtt","updatedAt":"2025-09-08T03:19:22Z","createdAt":"2025-09-08T03:19:12Z","readmeRaw":"## 👋 Welcome to zigbee2mqtt 🚀  \n\nzigbee2mqtt README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-zigbee2mqtt\" class=\"mobile-header\">👋 Welcome to zigbee2mqtt 🚀  </h2>\n<p class=\"mobile-paragraph\">zigbee2mqtt README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:25.737Z"}],"categories":[{"key":"web-server","name":"Web Servers","description":"High-performance web servers and reverse proxies","icon":"🌐","color":"#50fa7b","keywords":["nginx","apache","haproxy","traefik","caddy"]},{"key":"database","name":"Databases","description":"SQL and NoSQL database installation guides","icon":"🗄️","color":"#8be9fd","keywords":["mysql","postgresql","mongodb","redis","mariadb","databases"]},{"key":"container","name":"Containers","description":"Container platforms and orchestration","icon":"📦","color":"#bd93f9","keywords":["docker","kubernetes","k3s","portainer","rancher","minikube"]},{"key":"security","name":"Security","description":"Security tools and authentication systems","icon":"🔒","color":"#ff5555","keywords":["vault","authelia","keycloak","pihole","fail2ban","wireguard","openvpn"]},{"key":"monitoring","name":"Monitoring","description":"Observability and monitoring solutions","icon":"📊","color":"#ffb86c","keywords":["prometheus","grafana","loki","jaeger","nagios","zabbix"]},{"key":"communication","name":"Communication","description":"Team communication and collaboration platforms","icon":"💬","color":"#f1fa8c","keywords":["mattermost","rocketchat","matrix","mastodon","element","jitsi"]},{"key":"productivity","name":"Productivity","description":"Content management and productivity tools","icon":"⚡","color":"#ff79c6","keywords":["nextcloud","wordpress","ghost","bookstack","outline","bitwarden"]},{"key":"media","name":"Media Servers","description":"Media streaming and entertainment platforms","icon":"🎬","color":"#6272a4","keywords":["plex","jellyfin","sonarr","radarr","lidarr","prowlarr"]},{"key":"infrastructure","name":"Infrastructure","description":"DevOps and infrastructure automation tools","icon":"🏗️","color":"#44475a","keywords":["ansible","terraform","gitlab","jenkins","consul","etcd"]}]},"__N_SSG":true}