{"pageProps":{"guide":{"name":"kubernetes","displayName":"Kubernetes","slug":"kubernetes","description":"Repo for kubernetes","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/kubernetes","updatedAt":"2025-09-08T03:10:22Z","createdAt":"2025-09-08T03:10:10Z","readmeRaw":"# Kubernetes Installation Guide\n\nContainer orchestration platform for automating deployment, scaling, and management of containerized applications.\n\n## Prerequisites\n\n- Linux system with 2GB+ RAM per node\n- 2 CPUs minimum per node  \n- Network connectivity between nodes\n- Container runtime (Docker/containerd)\n- Disabled swap on all nodes\n\n## Installation Methods\n\n### kubeadm (Recommended)\n\n#### Master Node Setup\n```bash\n# Disable swap\nsudo swapoff -a\nsudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n\n# Install container runtime (containerd)\nsudo apt-get update\nsudo apt-get install -y ca-certificates curl gnupg lsb-release\n\n# Add Docker's official GPG key\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n# Add Docker repository\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install containerd\nsudo apt-get update\nsudo apt-get install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n\n# Install kubeadm, kubelet, kubectl\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl\n\ncurl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg\n\necho \"deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\nsudo apt-mark hold kubelet kubeadm kubectl\n\n# Configure system settings\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\nsudo sysctl --system\n\n# Initialize cluster\nsudo kubeadm init --pod-network-cidr=10.244.0.0/16\n\n# Configure kubectl for current user\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# Install CNI plugin (Flannel)\nkubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml\n```\n\n#### Worker Node Setup\n```bash\n# Follow the same steps as master node up to kubeadm init\n# Then join the cluster using the token from master node\n\n# Get join command from master node\nkubeadm token create --print-join-command\n\n# On worker nodes, run the join command (example):\nsudo kubeadm join 192.168.1.100:6443 --token abc123.def456ghi789 --discovery-token-ca-cert-hash sha256:1234567890abcdef...\n```\n\n### k3s (Lightweight Alternative)\n```bash\n# Install k3s on master node\ncurl -sfL https://get.k3s.io | sh -\n\n# Get node token\nsudo cat /var/lib/rancher/k3s/server/node-token\n\n# Install on worker nodes\ncurl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\nsudo chown $(id -u):$(id -g) ~/.kube/config\nexport KUBECONFIG=~/.kube/config\n```\n\n### Minikube (Development)\n```bash\n# Install minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Start minikube cluster\nminikube start --driver=docker --cpus=2 --memory=4g\n\n# Enable addons\nminikube addons enable dashboard\nminikube addons enable ingress\nminikube addons enable metrics-server\n\n# Get cluster info\nkubectl cluster-info\n```\n\n## Configuration\n\n### Cluster Administration\n```bash\n# Check cluster status\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods --all-namespaces\n\n# View cluster configuration\nkubectl config view\nkubectl config get-contexts\n\n# Create namespace\nkubectl create namespace production\n\n# Set default namespace\nkubectl config set-context --current --namespace=production\n\n# Apply resource quotas\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-quota\n  namespace: production\nspec:\n  hard:\n    requests.cpu: \"4\"\n    requests.memory: 8Gi\n    limits.cpu: \"8\"\n    limits.memory: 16Gi\n    persistentvolumeclaims: \"10\"\nEOF\n```\n\n### Network Policies\n```bash\n# Create network policy for isolation\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-all\n  namespace: production\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-same-namespace\n  namespace: production\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: production\n  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          name: production\nEOF\n```\n\n### RBAC Configuration\n```bash\n# Create service account\nkubectl create serviceaccount developer-sa -n production\n\n# Create role\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: production\n  name: developer-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\", \"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\nEOF\n\n# Create role binding\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: developer-binding\n  namespace: production\nsubjects:\n- kind: ServiceAccount\n  name: developer-sa\n  namespace: production\nroleRef:\n  kind: Role\n  name: developer-role\n  apiGroup: rbac.authorization.k8s.io\nEOF\n```\n\n## Application Deployment\n\n### Basic Application Deployment\n```bash\n# Create deployment\ncat <<EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: production\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.20\n        ports:\n        - containerPort: 80\n        resources:\n          requests:\n            cpu: 100m\n            memory: 128Mi\n          limits:\n            cpu: 200m\n            memory: 256Mi\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: production\nspec:\n  selector:\n    app: nginx\n  ports:\n  - port: 80\n    targetPort: 80\n  type: ClusterIP\nEOF\n```\n\n### Ingress Configuration\n```bash\n# Install NGINX Ingress Controller\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml\n\n# Create ingress resource\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nginx-ingress\n  namespace: production\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    cert-manager.io/cluster-issuer: \"letsencrypt-prod\"\nspec:\n  tls:\n  - hosts:\n    - example.com\n    secretName: example-com-tls\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nginx-service\n            port:\n              number: 80\nEOF\n```\n\n### Persistent Storage\n```bash\n# Create storage class\ncat <<EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: fast-ssd\nprovisioner: kubernetes.io/gce-pd\nparameters:\n  type: pd-ssd\n  zones: us-central1-a,us-central1-b\nallowVolumeExpansion: true\nvolumeBindingMode: WaitForFirstConsumer\nEOF\n\n# Create persistent volume claim\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: app-data\n  namespace: production\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: fast-ssd\n  resources:\n    requests:\n      storage: 10Gi\nEOF\n\n# Use in deployment\ncat <<EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-with-storage\n  namespace: production\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:latest\n        volumeMounts:\n        - name: data-volume\n          mountPath: /data\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: app-data\nEOF\n```\n\n## Monitoring and Logging\n\n### Install Metrics Server\n```bash\n# Install metrics server\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\n# For development clusters, may need to add --kubelet-insecure-tls\nkubectl patch deployment metrics-server -n kube-system --type='json' -p='[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/args/-\", \"value\": \"--kubelet-insecure-tls\"}]'\n```\n\n### Install Kubernetes Dashboard\n```bash\n# Install dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n# Create service account for dashboard\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\nEOF\n\n# Get token for dashboard access\nkubectl -n kubernetes-dashboard create token admin-user\n\n# Access dashboard\nkubectl proxy\n# Then visit: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\n```\n\n## Backup and Disaster Recovery\n\n### etcd Backup\n```bash\n# Install etcdctl\nETCD_VER=v3.5.9\ncurl -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzf etcd-${ETCD_VER}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VER}-linux-amd64/etcdctl /usr/local/bin/\n\n# Create backup script\nsudo tee /usr/local/bin/etcd-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/etcd\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create etcd snapshot\netcdctl snapshot save ${BACKUP_DIR}/etcd-backup-${DATE}.db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Verify snapshot\netcdctl snapshot status ${BACKUP_DIR}/etcd-backup-${DATE}.db -w table\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"etcd-backup-*.db\" -type f -mtime +7 -delete\n\necho \"Backup completed: etcd-backup-${DATE}.db\"\nEOF\n\nsudo chmod +x /usr/local/bin/etcd-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/etcd-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Verification\n\n```bash\n# Check cluster health\nkubectl get nodes -o wide\nkubectl get pods --all-namespaces\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Check system pods\nkubectl get pods -n kube-system\n\n# Check cluster info\nkubectl cluster-info dump\n\n# Test DNS resolution\nkubectl run test-dns --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default\n\n# Test pod-to-pod communication\nkubectl run test-pod1 --image=nginx --port=80\nkubectl expose pod test-pod1 --port=80\nkubectl run test-pod2 --image=busybox --rm -it --restart=Never -- wget -qO- test-pod1\n\n# Check resource usage\nkubectl describe node\nkubectl describe pod <pod-name>\n\n# View logs\nkubectl logs -n kube-system -l component=kube-apiserver\nkubectl logs -n kube-system -l component=etcd\n```\n\n## Troubleshooting\n\n```bash\n# Check node status\nkubectl describe node <node-name>\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Debug pods\nkubectl describe pod <pod-name>\nkubectl logs <pod-name> -c <container-name>\nkubectl exec -it <pod-name> -- /bin/bash\n\n# Check cluster components\nsudo journalctl -u kubelet -f\nsudo journalctl -u containerd -f\n\n# Debug networking\nkubectl run debug-pod --image=nicolaka/netshoot --rm -it --restart=Never\n\n# Check certificates\nkubeadm certs check-expiration\nopenssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout\n\n# Reset cluster (if needed)\nsudo kubeadm reset\nsudo rm -rf /etc/cni/net.d\nsudo rm -rf $HOME/.kube/config\n```\n\n## Additional Resources\n\n- [Official Documentation](https://kubernetes.io/docs/)\n- [kubectl Reference](https://kubernetes.io/docs/reference/kubectl/)\n- [Kubernetes Best Practices](https://kubernetes.io/docs/concepts/configuration/overview/)\n- [Troubleshooting Guide](https://kubernetes.io/docs/tasks/debug-application-cluster/)\n- [Security Best Practices](https://kubernetes.io/docs/concepts/security/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"kubernetes-installation-guide\" class=\"mobile-header\">Kubernetes Installation Guide</h1>\n<p class=\"mobile-paragraph\">Container orchestration platform for automating deployment, scaling, and management of containerized applications.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system with 2GB+ RAM per node</li>\n<li class=\"mobile-list-item\">2 CPUs minimum per node  </li>\n<li class=\"mobile-list-item\">Network connectivity between nodes</li>\n<li class=\"mobile-list-item\">Container runtime (Docker/containerd)</li>\n<li class=\"mobile-list-item\">Disabled swap on all nodes</li>\n<h2 id=\"installation-methods\" class=\"mobile-header\">Installation Methods</h2>\n<h3 id=\"kubeadm-recommended\" class=\"mobile-header\">kubeadm (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Master Node Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Disable swap\nsudo swapoff -a\nsudo sed -i &#039;/ swap / s/^\\(.*\\)$/#\\1/g&#039; /etc/fstab\n\n# Install container runtime (containerd)\nsudo apt-get update\nsudo apt-get install -y ca-certificates curl gnupg lsb-release\n\n# Add Docker&#039;s official GPG key\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n# Add Docker repository\necho &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Install containerd\nsudo apt-get update\nsudo apt-get install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n\n# Install kubeadm, kubelet, kubectl\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl\n\ncurl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-archive-keyring.gpg\n\necho &quot;deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main&quot; | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\nsudo apt-mark hold kubelet kubeadm kubectl\n\n# Configure system settings\ncat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\ncat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\nsudo sysctl --system\n\n# Initialize cluster\nsudo kubeadm init --pod-network-cidr=10.244.0.0/16\n\n# Configure kubectl for current user\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# Install CNI plugin (Flannel)\nkubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Worker Node Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Follow the same steps as master node up to kubeadm init\n# Then join the cluster using the token from master node\n\n# Get join command from master node\nkubeadm token create --print-join-command\n\n# On worker nodes, run the join command (example):\nsudo kubeadm join 192.168.1.100:6443 --token abc123.def456ghi789 --discovery-token-ca-cert-hash sha256:1234567890abcdef...</code></pre>\n      </div>\n    </div>\n<h3 id=\"k3s-lightweight-alternative\" class=\"mobile-header\">k3s (Lightweight Alternative)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install k3s on master node\ncurl -sfL https://get.k3s.io | sh -\n\n# Get node token\nsudo cat /var/lib/rancher/k3s/server/node-token\n\n# Install on worker nodes\ncurl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\nsudo chown $(id -u):$(id -g) ~/.kube/config\nexport KUBECONFIG=~/.kube/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"minikube-development\" class=\"mobile-header\">Minikube (Development)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Start minikube cluster\nminikube start --driver=docker --cpus=2 --memory=4g\n\n# Enable addons\nminikube addons enable dashboard\nminikube addons enable ingress\nminikube addons enable metrics-server\n\n# Get cluster info\nkubectl cluster-info</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"cluster-administration\" class=\"mobile-header\">Cluster Administration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check cluster status\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods --all-namespaces\n\n# View cluster configuration\nkubectl config view\nkubectl config get-contexts\n\n# Create namespace\nkubectl create namespace production\n\n# Set default namespace\nkubectl config set-context --current --namespace=production\n\n# Apply resource quotas\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ResourceQuota\nmetadata:\n  name: compute-quota\n  namespace: production\nspec:\n  hard:\n    requests.cpu: &quot;4&quot;\n    requests.memory: 8Gi\n    limits.cpu: &quot;8&quot;\n    limits.memory: 16Gi\n    persistentvolumeclaims: &quot;10&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-policies\" class=\"mobile-header\">Network Policies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create network policy for isolation\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: deny-all\n  namespace: production\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-same-namespace\n  namespace: production\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: production\n  egress:\n  - to:\n    - namespaceSelector:\n        matchLabels:\n          name: production\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"rbac-configuration\" class=\"mobile-header\">RBAC Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create service account\nkubectl create serviceaccount developer-sa -n production\n\n# Create role\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: production\n  name: developer-role\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods&quot;, &quot;services&quot;, &quot;configmaps&quot;, &quot;secrets&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]\n- apiGroups: [&quot;apps&quot;]\n  resources: [&quot;deployments&quot;, &quot;replicasets&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]\nEOF\n\n# Create role binding\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: developer-binding\n  namespace: production\nsubjects:\n- kind: ServiceAccount\n  name: developer-sa\n  namespace: production\nroleRef:\n  kind: Role\n  name: developer-role\n  apiGroup: rbac.authorization.k8s.io\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"application-deployment\" class=\"mobile-header\">Application Deployment</h2>\n<h3 id=\"basic-application-deployment\" class=\"mobile-header\">Basic Application Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create deployment\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx-deployment\n  namespace: production\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.20\n        ports:\n        - containerPort: 80\n        resources:\n          requests:\n            cpu: 100m\n            memory: 128Mi\n          limits:\n            cpu: 200m\n            memory: 256Mi\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx-service\n  namespace: production\nspec:\n  selector:\n    app: nginx\n  ports:\n  - port: 80\n    targetPort: 80\n  type: ClusterIP\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ingress-configuration\" class=\"mobile-header\">Ingress Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX Ingress Controller\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.1/deploy/static/provider/cloud/deploy.yaml\n\n# Create ingress resource\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: nginx-ingress\n  namespace: production\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: &quot;true&quot;\n    cert-manager.io/cluster-issuer: &quot;letsencrypt-prod&quot;\nspec:\n  tls:\n  - hosts:\n    - example.com\n    secretName: example-com-tls\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: nginx-service\n            port:\n              number: 80\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"persistent-storage\" class=\"mobile-header\">Persistent Storage</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create storage class\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: fast-ssd\nprovisioner: kubernetes.io/gce-pd\nparameters:\n  type: pd-ssd\n  zones: us-central1-a,us-central1-b\nallowVolumeExpansion: true\nvolumeBindingMode: WaitForFirstConsumer\nEOF\n\n# Create persistent volume claim\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: app-data\n  namespace: production\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: fast-ssd\n  resources:\n    requests:\n      storage: 10Gi\nEOF\n\n# Use in deployment\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-with-storage\n  namespace: production\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      containers:\n      - name: myapp\n        image: myapp:latest\n        volumeMounts:\n        - name: data-volume\n          mountPath: /data\n      volumes:\n      - name: data-volume\n        persistentVolumeClaim:\n          claimName: app-data\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-logging\" class=\"mobile-header\">Monitoring and Logging</h2>\n<h3 id=\"install-metrics-server\" class=\"mobile-header\">Install Metrics Server</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install metrics server\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\n# For development clusters, may need to add --kubelet-insecure-tls\nkubectl patch deployment metrics-server -n kube-system --type=&#039;json&#039; -p=&#039;[{&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/args/-&quot;, &quot;value&quot;: &quot;--kubelet-insecure-tls&quot;}]&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"install-kubernetes-dashboard\" class=\"mobile-header\">Install Kubernetes Dashboard</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n# Create service account for dashboard\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\nEOF\n\n# Get token for dashboard access\nkubectl -n kubernetes-dashboard create token admin-user\n\n# Access dashboard\nkubectl proxy\n# Then visit: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"etcd-backup\" class=\"mobile-header\">etcd Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install etcdctl\nETCD_VER=v3.5.9\ncurl -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzf etcd-${ETCD_VER}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VER}-linux-amd64/etcdctl /usr/local/bin/\n\n# Create backup script\nsudo tee /usr/local/bin/etcd-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/etcd&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create etcd snapshot\netcdctl snapshot save ${BACKUP_DIR}/etcd-backup-${DATE}.db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Verify snapshot\netcdctl snapshot status ${BACKUP_DIR}/etcd-backup-${DATE}.db -w table\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;etcd-backup-*.db&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: etcd-backup-${DATE}.db&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/etcd-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/etcd-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check cluster health\nkubectl get nodes -o wide\nkubectl get pods --all-namespaces\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Check system pods\nkubectl get pods -n kube-system\n\n# Check cluster info\nkubectl cluster-info dump\n\n# Test DNS resolution\nkubectl run test-dns --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default\n\n# Test pod-to-pod communication\nkubectl run test-pod1 --image=nginx --port=80\nkubectl expose pod test-pod1 --port=80\nkubectl run test-pod2 --image=busybox --rm -it --restart=Never -- wget -qO- test-pod1\n\n# Check resource usage\nkubectl describe node\nkubectl describe pod &lt;pod-name&gt;\n\n# View logs\nkubectl logs -n kube-system -l component=kube-apiserver\nkubectl logs -n kube-system -l component=etcd</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check node status\nkubectl describe node &lt;node-name&gt;\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Debug pods\nkubectl describe pod &lt;pod-name&gt;\nkubectl logs &lt;pod-name&gt; -c &lt;container-name&gt;\nkubectl exec -it &lt;pod-name&gt; -- /bin/bash\n\n# Check cluster components\nsudo journalctl -u kubelet -f\nsudo journalctl -u containerd -f\n\n# Debug networking\nkubectl run debug-pod --image=nicolaka/netshoot --rm -it --restart=Never\n\n# Check certificates\nkubeadm certs check-expiration\nopenssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout\n\n# Reset cluster (if needed)\nsudo kubeadm reset\nsudo rm -rf /etc/cni/net.d\nsudo rm -rf $HOME/.kube/config</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/reference/kubectl/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">kubectl Reference</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/concepts/configuration/overview/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Kubernetes Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/tasks/debug-application-cluster/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/concepts/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"8 min","wordCount":1445,"lastBuilt":"2025-09-14T01:15:32.422Z"},"category":{"key":"container","name":"Containers","description":"Container platforms and orchestration","icon":"📦","color":"#bd93f9","keywords":["docker","kubernetes","k3s","portainer","rancher","minikube"]},"relatedGuides":[{"name":"docker","displayName":"Docker","slug":"docker","description":"Repo for docker","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/docker","updatedAt":"2025-09-08T03:06:36Z","createdAt":"2023-08-28T03:47:37Z","readmeRaw":"# Docker Installation Guide\n\nContainerization platform for developing, shipping, and running applications in isolated environments.\n\n## Prerequisites\n\n- Linux system with kernel 3.10+\n- 64-bit architecture\n- Root or sudo access\n\n## Installation\n\n### Quick Installation Script\n```bash\n# Install Docker using official script\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Add current user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Enable Docker service\nsudo systemctl enable --now docker\n```\n\n### Manual Installation (RHEL/CentOS)\n```bash\n# Install prerequisites\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker\nsudo yum install -y docker-ce docker-ce-cli containerd.io\n\n# Start Docker\nsudo systemctl enable --now docker\n```\n\n## Configuration\n\n### Docker Compose Installation\n```bash\n# Download Docker Compose\nsudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n# Make executable\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Create symlink (optional)\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n```\n\n### Docker Machine (Optional)\n```bash\n# Download Docker Machine\nbase=https://github.com/docker/machine/releases/download/v0.16.2\ncurl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine\nsudo mv /tmp/docker-machine /usr/local/bin/docker-machine\nsudo chmod +x /usr/local/bin/docker-machine\n\n# Install bash completion\nbase=https://raw.githubusercontent.com/docker/machine/v0.16.2\nfor i in docker-machine-prompt.bash docker-machine-wrapper.bash docker-machine.bash; do\n  sudo wget \"$base/contrib/completion/bash/${i}\" -P /etc/bash_completion.d\ndone\n```\n\n## Portainer Installation (Optional)\n```bash\n# Create volume and run Portainer\ndocker volume create portainer_data\ndocker run -d -p 8000:8000 -p 9443:9443 \\\n    --name portainer --restart=always \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v portainer_data:/data \\\n    portainer/portainer-ce:latest\n```\n\n## Verification\n\n```bash\n# Check Docker version\ndocker --version\ndocker-compose --version\n\n# Test Docker installation\ndocker run hello-world\n\n# Check Docker service status\nsudo systemctl status docker\n\n# List Docker images and containers\ndocker images\ndocker ps -a\n```\n\n## Usage\n\nBasic Docker commands:\n\n1. **Pull an image**: `docker pull nginx`\n2. **Run a container**: `docker run -d -p 80:80 nginx`\n3. **List containers**: `docker ps`\n4. **Stop container**: `docker stop container_id`\n5. **Remove container**: `docker rm container_id`\n\n## Additional Resources\n\n- [Official Documentation](https://docs.docker.com/)\n- [Docker Hub](https://hub.docker.com/)\n- [Docker Compose Documentation](https://docs.docker.com/compose/)\n- [Portainer Documentation](https://documentation.portainer.io/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"docker-installation-guide\" class=\"mobile-header\">Docker Installation Guide</h1>\n<p class=\"mobile-paragraph\">Containerization platform for developing, shipping, and running applications in isolated environments.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system with kernel 3.10+</li>\n<li class=\"mobile-list-item\">64-bit architecture</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"quick-installation-script\" class=\"mobile-header\">Quick Installation Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker using official script\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Add current user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Enable Docker service\nsudo systemctl enable --now docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-installation-rhelcentos\" class=\"mobile-header\">Manual Installation (RHEL/CentOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install prerequisites\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker\nsudo yum install -y docker-ce docker-ce-cli containerd.io\n\n# Start Docker\nsudo systemctl enable --now docker</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"docker-compose-installation\" class=\"mobile-header\">Docker Compose Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Docker Compose\nsudo curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose\n\n# Make executable\nsudo chmod +x /usr/local/bin/docker-compose\n\n# Create symlink (optional)\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-machine-optional\" class=\"mobile-header\">Docker Machine (Optional)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Docker Machine\nbase=https://github.com/docker/machine/releases/download/v0.16.2\ncurl -L $base/docker-machine-$(uname -s)-$(uname -m) &gt;/tmp/docker-machine\nsudo mv /tmp/docker-machine /usr/local/bin/docker-machine\nsudo chmod +x /usr/local/bin/docker-machine\n\n# Install bash completion\nbase=https://raw.githubusercontent.com/docker/machine/v0.16.2\nfor i in docker-machine-prompt.bash docker-machine-wrapper.bash docker-machine.bash; do\n  sudo wget &quot;$base/contrib/completion/bash/${i}&quot; -P /etc/bash_completion.d\ndone</code></pre>\n      </div>\n    </div>\n<h2 id=\"portainer-installation-optional\" class=\"mobile-header\">Portainer Installation (Optional)</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create volume and run Portainer\ndocker volume create portainer_data\ndocker run -d -p 8000:8000 -p 9443:9443 \\\n    --name portainer --restart=always \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    -v portainer_data:/data \\\n    portainer/portainer-ce:latest</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Docker version\ndocker --version\ndocker-compose --version\n\n# Test Docker installation\ndocker run hello-world\n\n# Check Docker service status\nsudo systemctl status docker\n\n# List Docker images and containers\ndocker images\ndocker ps -a</code></pre>\n      </div>\n    </div>\n<h2 id=\"usage\" class=\"mobile-header\">Usage</h2>\n<p class=\"mobile-paragraph\">Basic Docker commands:</p>\n<p class=\"mobile-paragraph\">1. <strong>Pull an image</strong>: <code class=\"mobile-inline-code\">docker pull nginx</code></p>\n<p class=\"mobile-paragraph\">2. <strong>Run a container</strong>: <code class=\"mobile-inline-code\">docker run -d -p 80:80 nginx</code></p>\n<p class=\"mobile-paragraph\">3. <strong>List containers</strong>: <code class=\"mobile-inline-code\">docker ps</code></p>\n<p class=\"mobile-paragraph\">4. <strong>Stop container</strong>: <code class=\"mobile-inline-code\">docker stop container_id</code></p>\n<p class=\"mobile-paragraph\">5. <strong>Remove container</strong>: <code class=\"mobile-inline-code\">docker rm container_id</code></p>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Hub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Compose Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://documentation.portainer.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Portainer Documentation</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"2 min","wordCount":336,"lastBuilt":"2025-09-14T01:15:34.937Z"},{"name":"k3s","displayName":"K3s","slug":"k3s","description":"Repo for k3s","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/k3s","updatedAt":"2025-09-08T03:09:53Z","createdAt":"2025-09-08T03:09:43Z","readmeRaw":"## 👋 Welcome to k3s 🚀  \n\nk3s README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-k3s\" class=\"mobile-header\">👋 Welcome to k3s 🚀  </h2>\n<p class=\"mobile-paragraph\">k3s README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:32.659Z"},{"name":"minikube","displayName":"Minikube","slug":"minikube","description":"Repo for minikube","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minikube","updatedAt":"2025-09-08T03:11:25Z","createdAt":"2025-09-08T03:11:15Z","readmeRaw":"## 👋 Welcome to minikube 🚀  \n\nminikube README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-minikube\" class=\"mobile-header\">👋 Welcome to minikube 🚀  </h2>\n<p class=\"mobile-paragraph\">minikube README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:15:31.539Z"}]},"__N_SSG":true}