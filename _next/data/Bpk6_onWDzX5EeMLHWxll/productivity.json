{"pageProps":{"category":{"key":"productivity","name":"Productivity","description":"Content management and productivity tools","icon":"⚡","color":"#ff79c6","keywords":["nextcloud","wordpress","ghost","bookstack","outline","bitwarden"]},"guides":[{"name":"ghost","displayName":"Ghost","slug":"ghost","description":"Repo for ghost","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ghost","updatedAt":"2025-09-08T03:07:48Z","createdAt":"2025-09-08T03:07:38Z","readmeRaw":"## 👋 Welcome to ghost 🚀  \n\nghost README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-ghost\" class=\"mobile-header\">👋 Welcome to ghost 🚀  </h2>\n<p class=\"mobile-paragraph\">ghost README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:45.517Z"},{"name":"nextcloud","displayName":"Nextcloud","slug":"nextcloud","description":"Repo for nextcloud","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nextcloud","updatedAt":"2025-09-08T03:12:12Z","createdAt":"2025-09-08T03:12:02Z","readmeRaw":"# Nextcloud Installation Guide\n\nSelf-hosted file sync and share platform with collaboration features, calendar, contacts, and extensive app ecosystem.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Web server (Apache or NGINX)\n- PHP 8.0+ with required extensions\n- Database (MySQL/MariaDB, PostgreSQL, or SQLite)\n- 2GB RAM minimum, 4GB+ recommended\n\n## Installation\n\n### LAMP Stack Setup (Apache + MySQL + PHP)\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# Enable services\nsudo systemctl enable --now apache2 mariadb  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb    # RHEL/CentOS\n```\n\n### Database Setup\n```bash\n# Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create Nextcloud database\nsudo mysql -u root -p <<EOF\nCREATE DATABASE nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE USER 'nextclouduser'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON nextcloud.* TO 'nextclouduser'@'localhost';\nFLUSH PRIVILEGES;\nEXIT\nEOF\n```\n\n### Nextcloud Download and Setup\n```bash\n# Download Nextcloud\ncd /tmp\nwget https://download.nextcloud.com/server/releases/latest.tar.bz2\ntar -xjf latest.tar.bz2\n\n# Move to web directory\nsudo cp -R nextcloud /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/nextcloud  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/nextcloud      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/nextcloud/ -type f -print0 | xargs -0 chmod 0640\nsudo find /var/www/html/nextcloud/ -type d -print0 | xargs -0 chmod 0750\nsudo chmod 750 /var/www/html/nextcloud\nsudo chmod -R 770 /var/www/html/nextcloud/data\nsudo chmod -R 770 /var/www/html/nextcloud/apps\nsudo chmod -R 770 /var/www/html/nextcloud/config\n```\n\n### Using Docker Compose\n```bash\n# Create docker-compose.yml\nmkdir -p ~/nextcloud && cd ~/nextcloud\n\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  nextcloud:\n    image: nextcloud:latest\n    restart: unless-stopped\n    ports:\n      - \"8080:80\"\n    volumes:\n      - nextcloud_data:/var/www/html\n      - ./config:/var/www/html/config\n      - ./custom_apps:/var/www/html/custom_apps\n      - ./data:/var/www/html/data\n    environment:\n      - MYSQL_HOST=db\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=secure_password\n      - NEXTCLOUD_ADMIN_USER=admin\n      - NEXTCLOUD_ADMIN_PASSWORD=admin_password\n      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.example.com\n    depends_on:\n      - db\n      - redis\n    networks:\n      - nextcloud\n\n  db:\n    image: mariadb:10.6\n    restart: unless-stopped\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=root_password\n      - MYSQL_PASSWORD=secure_password\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n    networks:\n      - nextcloud\n\n  redis:\n    image: redis:alpine\n    restart: unless-stopped\n    networks:\n      - nextcloud\n\nvolumes:\n  nextcloud_data:\n  db_data:\n\nnetworks:\n  nextcloud:\n    driver: bridge\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f nextcloud\n```\n\n## Configuration\n\n### Apache Virtual Host\n```bash\n# Create Apache virtual host\nsudo tee /etc/apache2/sites-available/nextcloud.conf > /dev/null <<EOF\n<VirtualHost *:80>\n    ServerName nextcloud.example.com\n    DocumentRoot /var/www/html/nextcloud\n\n    <Directory /var/www/html/nextcloud/>\n        Require all granted\n        AllowOverride All\n        Options FollowSymLinks MultiViews\n        \n        <IfModule mod_dav.c>\n            Dav off\n        </IfModule>\n    </Directory>\n\n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=15552000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options \"SAMEORIGIN\"\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Referrer-Policy \"no-referrer\"\n    Header always set Feature-Policy \"camera 'none'; microphone 'none'\"\n\n    ErrorLog \\${APACHE_LOG_DIR}/nextcloud_error.log\n    CustomLog \\${APACHE_LOG_DIR}/nextcloud_access.log combined\n</VirtualHost>\nEOF\n\n# Enable required modules\nsudo a2enmod rewrite headers env dir mime ssl\nsudo a2ensite nextcloud.conf\nsudo systemctl restart apache2\n```\n\n### NGINX Configuration\n```bash\n# Create NGINX server block\nsudo tee /etc/nginx/sites-available/nextcloud > /dev/null <<EOF\nupstream php-handler {\n    server unix:/var/run/php/php8.0-fpm.sock;\n}\n\nserver {\n    listen 80;\n    server_name nextcloud.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nextcloud.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/ssl/certs/nextcloud.crt;\n    ssl_certificate_key /etc/ssl/private/nextcloud.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload\" always;\n    add_header Referrer-Policy \"no-referrer\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-Download-Options \"noopen\" always;\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Permitted-Cross-Domain-Policies \"none\" always;\n    add_header X-Robots-Tag \"none\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n\n    # Remove X-Powered-By\n    fastcgi_hide_header X-Powered-By;\n\n    # Path to the root of your installation\n    root /var/www/html/nextcloud;\n    index index.php index.html /index.php\\$request_uri;\n\n    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients\n    location = / {\n        if ( \\$http_user_agent ~ ^DavClnt ) {\n            return 302 /remote.php/webdav/\\$is_args\\$args;\n        }\n    }\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # Make a regex exception for `/.well-known` so that clients can still\n    # access it despite the existence of the regex rule\n    location ^~ /.well-known {\n        location = /.well-known/carddav { return 301 /remote.php/dav/; }\n        location = /.well-known/caldav  { return 301 /remote.php/dav/; }\n        location /.well-known/acme-challenge    { try_files \\$uri \\$uri/ =404; }\n        location /.well-known/pki-validation    { try_files \\$uri \\$uri/ =404; }\n        return 301 /index.php\\$request_uri;\n    }\n\n    # Rules borrowed from `.htaccess` to hide certain paths.\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:\\$|/)  { return 404; }\n    location ~ ^/(?:\\\\.|autotest|occ|issue|indie|db_|console)                { return 404; }\n\n    # Ensure this block, which passes PHP files to the PHP process, is above the blocks\n    # which handle static assets (as seen below). If this block is not declared first,\n    # then Nginx will encounter an infinite rewriting loop when it prepends\n    # `/index.php` to the URI, resulting in a HTTP 500 error response.\n    location ~ \\\\.php(?:\\$|/) {\n        # Required for legacy support\n        rewrite ^/(?!index|remote|public|cron|core\\\\/ajax\\\\/update|status|ocs\\\\/v[12]|updater\\\\/.+|oc[ms]-provider\\\\/.+|.+\\\\/richdocumentscode\\\\/proxy) /index.php\\$request_uri;\n\n        fastcgi_split_path_info ^(.+?\\\\.php)(/.*)\\$;\n        set \\$path_info \\$fastcgi_path_info;\n\n        try_files \\$fastcgi_script_name =404;\n\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        fastcgi_param PATH_INFO \\$path_info;\n        fastcgi_param HTTPS on;\n\n        fastcgi_param modHeadersAvailable true;\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off;\n    }\n\n    location ~ \\\\.(?:css|js|svg|gif|png|jpg|ico)\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 6M;\n        access_log off;\n    }\n\n    location ~ \\\\.woff2?\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 7d;\n        access_log off;\n    }\n\n    # Rule borrowed from `.htaccess`\n    location /remote {\n        return 301 /remote.php\\$request_uri;\n    }\n\n    location / {\n        try_files \\$uri \\$uri/ /index.php\\$request_uri;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nextcloud /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### PHP Configuration\n```bash\n# Optimize PHP for Nextcloud\nsudo nano /etc/php/8.0/apache2/php.ini  # Apache\nsudo nano /etc/php/8.0/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\nupload_max_filesize = 16G\npost_max_size = 16G\nmax_execution_time = 3600\nmax_input_time = 3600\nmax_input_vars = 3000\ndate.timezone = \"America/New_York\"\n\n# OPcache settings\nopcache.enable = 1\nopcache.interned_strings_buffer = 16\nopcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\n\n# APCu for local cache\napc.enable_cli = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php8.0-fpm  # NGINX\n```\n\n### Command Line Installation\n```bash\n# Install via command line\ncd /var/www/html/nextcloud\nsudo -u www-data php occ maintenance:install \\\n  --database=\"mysql\" \\\n  --database-name=\"nextcloud\" \\\n  --database-user=\"nextclouduser\" \\\n  --database-pass=\"secure_password\" \\\n  --admin-user=\"admin\" \\\n  --admin-pass=\"admin_password\" \\\n  --data-dir=\"/var/www/html/nextcloud/data\"\n\n# Configure trusted domains\nsudo -u www-data php occ config:system:set trusted_domains 0 --value=nextcloud.example.com\nsudo -u www-data php occ config:system:set trusted_domains 1 --value=192.168.1.100\n\n# Configure caching\nsudo -u www-data php occ config:system:set memcache.local --value=\"\\\\OC\\\\Memcache\\\\APCu\"\nsudo -u www-data php occ config:system:set memcache.distributed --value=\"\\\\OC\\\\Memcache\\\\Redis\"\nsudo -u www-data php occ config:system:set redis host --value=\"localhost\"\nsudo -u www-data php occ config:system:set redis port --value=6379\n```\n\n## Performance Optimization\n\n### Redis Caching Setup\n```bash\n# Install Redis\nsudo apt install -y redis-server  # Ubuntu/Debian\nsudo yum install -y redis          # RHEL/CentOS\n\nsudo systemctl enable --now redis\n\n# Configure Redis for Nextcloud\nsudo tee -a /etc/redis/redis.conf > /dev/null <<EOF\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\nEOF\n\nsudo systemctl restart redis\n\n# Install Redis PHP extension\nsudo apt install -y php-redis  # Ubuntu/Debian\nsudo yum install -y php-redis   # RHEL/CentOS\n\n# Configure Nextcloud to use Redis\nsudo -u www-data php occ config:system:set memcache.local --value=\"\\\\OC\\\\Memcache\\\\APCu\"\nsudo -u www-data php occ config:system:set memcache.distributed --value=\"\\\\OC\\\\Memcache\\\\Redis\"\nsudo -u www-data php occ config:system:set redis host --value=\"localhost\"\nsudo -u www-data php occ config:system:set redis port --value=6379\n```\n\n### Database Optimization\n```bash\n# MySQL/MariaDB optimization for Nextcloud\nsudo tee -a /etc/mysql/mysql.conf.d/nextcloud.cnf > /dev/null <<EOF\n[mysqld]\ninnodb_buffer_pool_size = 1G\ninnodb_io_capacity = 4000\ninnodb_log_file_size = 128M\ninnodb_log_buffer_size = 32M\ninnodb_flush_log_at_trx_commit = 1\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\n\nquery_cache_type = 1\nquery_cache_limit = 2M\nquery_cache_size = 64M\n\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\njoin_buffer_size = 262144\nsort_buffer_size = 262144\n\nmax_connections = 100\nmax_connect_errors = 10\nconnect_timeout = 5\nwait_timeout = 600\nmax_allowed_packet = 64M\n\nthread_cache_size = 128\nquery_cache_size = 64M\n\n[mysql.server]\ndefault-table-type = innodb\nEOF\n\nsudo systemctl restart mysql\n\n# Add indexes for better performance\nmysql -u nextclouduser -p nextcloud <<EOF\nALTER TABLE oc_jobs ADD INDEX jobs_class_index (class);\nALTER TABLE oc_filecache ADD INDEX fs_mtime (mtime);\nEOF\n```\n\n### Background Jobs\n```bash\n# Configure cron for background jobs\nsudo crontab -u www-data -e\n# Add: */5 * * * * php /var/www/html/nextcloud/occ system:cron\n\n# Or configure via occ command\nsudo -u www-data php occ background:cron\n\n# Check background job status\nsudo -u www-data php occ status\nsudo -u www-data php occ background:job:list\n```\n\n## Security Hardening\n\n### File Permissions and Security\n```bash\n# Secure file permissions script\nsudo tee /usr/local/bin/nextcloud-permissions.sh > /dev/null <<'EOF'\n#!/bin/bash\nncpath='/var/www/html/nextcloud'\nhtuser='www-data'\nhtgroup='www-data'\nrootuser='root'\n\nprintf \"Creating possible missing Directories\\n\"\nmkdir -p $ncpath/data\nmkdir -p $ncpath/assets\nmkdir -p $ncpath/updater\n\nprintf \"chmod Files and Directories\\n\"\nfind ${ncpath}/ -type f -print0 | xargs -0 chmod 0640\nfind ${ncpath}/ -type d -print0 | xargs -0 chmod 0750\n\nprintf \"chown Directories\\n\"\nchown -R ${rootuser}:${htgroup} ${ncpath}/\nchown -R ${htuser}:${htgroup} ${ncpath}/apps/\nchown -R ${htuser}:${htgroup} ${ncpath}/assets/\nchown -R ${htuser}:${htgroup} ${ncpath}/config/\nchown -R ${htuser}:${htgroup} ${ncpath}/data/\nchown -R ${htuser}:${htgroup} ${ncpath}/themes/\nchown -R ${htuser}:${htgroup} ${ncpath}/updater/\n\nchmod +x ${ncpath}/occ\n\nprintf \"chmod/chown .htaccess\\n\"\nif [ -f ${ncpath}/.htaccess ]; then\n    chmod 0644 ${ncpath}/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/.htaccess\nfi\n\nif [ -f ${ncpath}/data/.htaccess ]; then\n    chmod 0644 ${ncpath}/data/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/data/.htaccess\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-permissions.sh\nsudo /usr/local/bin/nextcloud-permissions.sh\n```\n\n### SSL/TLS Configuration\n```bash\n# Install Let's Encrypt certificate\nsudo apt install -y certbot python3-certbot-apache  # Apache\nsudo apt install -y certbot python3-certbot-nginx   # NGINX\n\n# Obtain certificate\nsudo certbot --apache -d nextcloud.example.com  # Apache\nsudo certbot --nginx -d nextcloud.example.com   # NGINX\n\n# Configure HTTPS redirect in Nextcloud\nsudo -u www-data php occ config:system:set overwrite.cli.url --value=\"https://nextcloud.example.com\"\nsudo -u www-data php occ config:system:set overwriteprotocol --value=\"https\"\n```\n\n### Security Scan and Hardening\n```bash\n# Run Nextcloud security scan\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:reset admin\n\n# Configure rate limiting\nsudo -u www-data php occ config:app:set brute_force_protection delay_increment --value=10\nsudo -u www-data php occ config:app:set brute_force_protection fail_tolerance --value=3\n\n# Enable two-factor authentication\nsudo -u www-data php occ app:enable twofactor_totp\nsudo -u www-data php occ app:enable twofactor_u2f\n\n# Configure file access control\nsudo -u www-data php occ config:system:set default_file_access --value=\"restrict\"\n```\n\n## App Management\n\n### Essential Apps Installation\n```bash\n# Install popular apps via occ\nsudo -u www-data php occ app:install calendar\nsudo -u www-data php occ app:install contacts\nsudo -u www-data php occ app:install mail\nsudo -u www-data php occ app:install notes\nsudo -u www-data php occ app:install tasks\nsudo -u www-data php occ app:install deck\nsudo -u www-data php occ app:install polls\nsudo -u www-data php occ app:install richdocuments  # OnlyOffice integration\n\n# Enable apps\nsudo -u www-data php occ app:enable calendar\nsudo -u www-data php occ app:enable contacts\nsudo -u www-data php occ app:enable mail\n\n# List available apps\nsudo -u www-data php occ app:list\n\n# Update apps\nsudo -u www-data php occ app:update --all\n```\n\n### OnlyOffice Integration\n```bash\n# Install OnlyOffice Document Server\ndocker run -d --name onlyoffice \\\n  -p 8080:80 \\\n  -v onlyoffice_data:/var/www/onlyoffice/Data \\\n  -v onlyoffice_log:/var/log/onlyoffice \\\n  -v onlyoffice_fonts:/usr/share/fonts/truetype/custom \\\n  -v onlyoffice_forgotten:/var/lib/onlyoffice/documentserver/App_Data/cache/files/forgotten \\\n  onlyoffice/documentserver\n\n# Configure Nextcloud to use OnlyOffice\nsudo -u www-data php occ config:app:set richdocuments wopi_url --value=\"http://localhost:8080\"\n```\n\n## Backup and Maintenance\n\n### Backup Script\n```bash\nsudo tee /usr/local/bin/nextcloud-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/nextcloud\"\nNC_DIR=\"/var/www/html/nextcloud\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Enable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --on\n\n# Backup files (exclude data directory for space)\ntar --exclude=\"${NC_DIR}/data\" -czf ${BACKUP_DIR}/files/nextcloud-files-${DATE}.tar.gz -C /var/www/html nextcloud\n\n# Backup database\nmysqldump -u nextclouduser -p'secure_password' nextcloud > ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\n\n# Backup data directory separately (if needed)\n# tar -czf ${BACKUP_DIR}/files/nextcloud-data-${DATE}.tar.gz -C ${NC_DIR} data\n\n# Disable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --off\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"nextcloud-*\" -type f -mtime +7 -delete\n\necho \"Backup completed: nextcloud-${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/nextcloud-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Update and Maintenance\n```bash\n# Create update script\nsudo tee /usr/local/bin/nextcloud-update.sh > /dev/null <<'EOF'\n#!/bin/bash\nNC_DIR=\"/var/www/html/nextcloud\"\n\n# Check for updates\nsudo -u www-data php ${NC_DIR}/occ update:check\n\n# Run updater\nsudo -u www-data php ${NC_DIR}/updater/updater.phar\n\n# Update apps\nsudo -u www-data php ${NC_DIR}/occ app:update --all\n\n# Run database upgrades\nsudo -u www-data php ${NC_DIR}/occ upgrade\n\n# Scan files\nsudo -u www-data php ${NC_DIR}/occ files:scan --all\n\n# Clean up\nsudo -u www-data php ${NC_DIR}/occ files:cleanup\nsudo -u www-data php ${NC_DIR}/occ trashbin:cleanup --all-users\n\necho \"Nextcloud update completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-update.sh\n```\n\n## Verification\n\n```bash\n# Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Test Nextcloud installation\ncurl -I http://localhost/nextcloud\ncurl -I https://nextcloud.example.com\n\n# Check Nextcloud status via occ\ncd /var/www/html/nextcloud\nsudo -u www-data php occ status\nsudo -u www-data php occ check\n\n# Check background jobs\nsudo -u www-data php occ background:job:list\n\n# Check database connectivity\nsudo -u www-data php occ db:check\n\n# Check security status\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:attempts\n\n# Test file operations\nsudo -u www-data php occ files:scan admin\nsudo -u www-data php occ files:scan --all\n\n# Check logs\nsudo tail -f /var/www/html/nextcloud/data/nextcloud.log\nsudo tail -f /var/log/apache2/nextcloud_error.log\n```\n\n## Troubleshooting\n\n```bash\n# Enable debug mode\nsudo -u www-data php occ config:system:set debug --value=true --type=boolean\nsudo -u www-data php occ config:system:set loglevel --value=0\n\n# Check system requirements\nsudo -u www-data php occ check\n\n# Repair installation\nsudo -u www-data php occ maintenance:repair\n\n# Clear cache\nsudo -u www-data php occ files:cleanup\n\n# Fix file permissions\nsudo /usr/local/bin/nextcloud-permissions.sh\n\n# Database repair\nsudo -u www-data php occ db:check-and-repair\n\n# Update file cache\nsudo -u www-data php occ files:scan --all\n\n# Check configuration\nsudo -u www-data php occ config:list system\n\n# Reset user password\nsudo -u www-data php occ user:resetpassword admin\n\n# Check disk usage\ndu -sh /var/www/html/nextcloud/data/\ndf -h /var/www/html/nextcloud/\n\n# Memory usage check\nsudo -u www-data php occ status --output=json\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.nextcloud.com/)\n- [Admin Manual](https://docs.nextcloud.com/server/latest/admin_manual/)\n- [Security Hardening Guide](https://docs.nextcloud.com/server/latest/admin_manual/installation/harden_server.html)\n- [Performance Tuning](https://docs.nextcloud.com/server/latest/admin_manual/installation/server_tuning.html)\n- [Community Forum](https://help.nextcloud.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"nextcloud-installation-guide\" class=\"mobile-header\">Nextcloud Installation Guide</h1>\n<p class=\"mobile-paragraph\">Self-hosted file sync and share platform with collaboration features, calendar, contacts, and extensive app ecosystem.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Web server (Apache or NGINX)</li>\n<li class=\"mobile-list-item\">PHP 8.0+ with required extensions</li>\n<li class=\"mobile-list-item\">Database (MySQL/MariaDB, PostgreSQL, or SQLite)</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"lamp-stack-setup-apache-mysql-php\" class=\"mobile-header\">LAMP Stack Setup (Apache + MySQL + PHP)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# Enable services\nsudo systemctl enable --now apache2 mariadb  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb    # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-setup\" class=\"mobile-header\">Database Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create Nextcloud database\nsudo mysql -u root -p &lt;&lt;EOF\nCREATE DATABASE nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE USER &#039;nextclouduser&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON nextcloud.* TO &#039;nextclouduser&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEXIT\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"nextcloud-download-and-setup\" class=\"mobile-header\">Nextcloud Download and Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Nextcloud\ncd /tmp\nwget https://download.nextcloud.com/server/releases/latest.tar.bz2\ntar -xjf latest.tar.bz2\n\n# Move to web directory\nsudo cp -R nextcloud /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/nextcloud  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/nextcloud      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/nextcloud/ -type f -print0 | xargs -0 chmod 0640\nsudo find /var/www/html/nextcloud/ -type d -print0 | xargs -0 chmod 0750\nsudo chmod 750 /var/www/html/nextcloud\nsudo chmod -R 770 /var/www/html/nextcloud/data\nsudo chmod -R 770 /var/www/html/nextcloud/apps\nsudo chmod -R 770 /var/www/html/nextcloud/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker-compose\" class=\"mobile-header\">Using Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create docker-compose.yml\nmkdir -p ~/nextcloud &amp;&amp; cd ~/nextcloud\n\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  nextcloud:\n    image: nextcloud:latest\n    restart: unless-stopped\n    ports:\n      - &quot;8080:80&quot;\n    volumes:\n      - nextcloud_data:/var/www/html\n      - ./config:/var/www/html/config\n      - ./custom_apps:/var/www/html/custom_apps\n      - ./data:/var/www/html/data\n    environment:\n      - MYSQL_HOST=db\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=secure_password\n      - NEXTCLOUD_ADMIN_USER=admin\n      - NEXTCLOUD_ADMIN_PASSWORD=admin_password\n      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.example.com\n    depends_on:\n      - db\n      - redis\n    networks:\n      - nextcloud\n\n  db:\n    image: mariadb:10.6\n    restart: unless-stopped\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=root_password\n      - MYSQL_PASSWORD=secure_password\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n    networks:\n      - nextcloud\n\n  redis:\n    image: redis:alpine\n    restart: unless-stopped\n    networks:\n      - nextcloud\n\nvolumes:\n  nextcloud_data:\n  db_data:\n\nnetworks:\n  nextcloud:\n    driver: bridge\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f nextcloud</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"apache-virtual-host\" class=\"mobile-header\">Apache Virtual Host</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Apache virtual host\nsudo tee /etc/apache2/sites-available/nextcloud.conf &gt; /dev/null &lt;&lt;EOF\n&lt;VirtualHost *:80&gt;\n    ServerName nextcloud.example.com\n    DocumentRoot /var/www/html/nextcloud\n\n    &lt;Directory /var/www/html/nextcloud/&gt;\n        Require all granted\n        AllowOverride All\n        Options FollowSymLinks MultiViews\n        \n        &lt;IfModule mod_dav.c&gt;\n            Dav off\n        &lt;/IfModule&gt;\n    &lt;/Directory&gt;\n\n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=15552000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options &quot;SAMEORIGIN&quot;\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Referrer-Policy &quot;no-referrer&quot;\n    Header always set Feature-Policy &quot;camera &#039;none&#039;; microphone &#039;none&#039;&quot;\n\n    ErrorLog \\${APACHE_LOG_DIR}/nextcloud_error.log\n    CustomLog \\${APACHE_LOG_DIR}/nextcloud_access.log combined\n&lt;/VirtualHost&gt;\nEOF\n\n# Enable required modules\nsudo a2enmod rewrite headers env dir mime ssl\nsudo a2ensite nextcloud.conf\nsudo systemctl restart apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">NGINX Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX server block\nsudo tee /etc/nginx/sites-available/nextcloud &gt; /dev/null &lt;&lt;EOF\nupstream php-handler {\n    server unix:/var/run/php/php8.0-fpm.sock;\n}\n\nserver {\n    listen 80;\n    server_name nextcloud.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nextcloud.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/ssl/certs/nextcloud.crt;\n    ssl_certificate_key /etc/ssl/private/nextcloud.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload&quot; always;\n    add_header Referrer-Policy &quot;no-referrer&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header X-Download-Options &quot;noopen&quot; always;\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-Permitted-Cross-Domain-Policies &quot;none&quot; always;\n    add_header X-Robots-Tag &quot;none&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n\n    # Remove X-Powered-By\n    fastcgi_hide_header X-Powered-By;\n\n    # Path to the root of your installation\n    root /var/www/html/nextcloud;\n    index index.php index.html /index.php\\$request_uri;\n\n    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients\n    location = / {\n        if ( \\$http_user_agent ~ ^DavClnt ) {\n            return 302 /remote.php/webdav/\\$is_args\\$args;\n        }\n    }\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # Make a regex exception for `/.well-known` so that clients can still\n    # access it despite the existence of the regex rule\n    location ^~ /.well-known {\n        location = /.well-known/carddav { return 301 /remote.php/dav/; }\n        location = /.well-known/caldav  { return 301 /remote.php/dav/; }\n        location /.well-known/acme-challenge    { try_files \\$uri \\$uri/ =404; }\n        location /.well-known/pki-validation    { try_files \\$uri \\$uri/ =404; }\n        return 301 /index.php\\$request_uri;\n    }\n\n    # Rules borrowed from `.htaccess` to hide certain paths.\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:\\$|/)  { return 404; }\n    location ~ ^/(?:\\\\.|autotest|occ|issue|indie|db_|console)                { return 404; }\n\n    # Ensure this block, which passes PHP files to the PHP process, is above the blocks\n    # which handle static assets (as seen below). If this block is not declared first,\n    # then Nginx will encounter an infinite rewriting loop when it prepends\n    # `/index.php` to the URI, resulting in a HTTP 500 error response.\n    location ~ \\\\.php(?:\\$|/) {\n        # Required for legacy support\n        rewrite ^/(?!index|remote|public|cron|core\\\\/ajax\\\\/update|status|ocs\\\\/v[12]|updater\\\\/.+|oc[ms]-provider\\\\/.+|.+\\\\/richdocumentscode\\\\/proxy) /index.php\\$request_uri;\n\n        fastcgi_split_path_info ^(.+?\\\\.php)(/.*)\\$;\n        set \\$path_info \\$fastcgi_path_info;\n\n        try_files \\$fastcgi_script_name =404;\n\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        fastcgi_param PATH_INFO \\$path_info;\n        fastcgi_param HTTPS on;\n\n        fastcgi_param modHeadersAvailable true;\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off;\n    }\n\n    location ~ \\\\.(?:css|js|svg|gif|png|jpg|ico)\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 6M;\n        access_log off;\n    }\n\n    location ~ \\\\.woff2?\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 7d;\n        access_log off;\n    }\n\n    # Rule borrowed from `.htaccess`\n    location /remote {\n        return 301 /remote.php\\$request_uri;\n    }\n\n    location / {\n        try_files \\$uri \\$uri/ /index.php\\$request_uri;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nextcloud /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"php-configuration\" class=\"mobile-header\">PHP Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize PHP for Nextcloud\nsudo nano /etc/php/8.0/apache2/php.ini  # Apache\nsudo nano /etc/php/8.0/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\nupload_max_filesize = 16G\npost_max_size = 16G\nmax_execution_time = 3600\nmax_input_time = 3600\nmax_input_vars = 3000\ndate.timezone = &quot;America/New_York&quot;\n\n# OPcache settings\nopcache.enable = 1\nopcache.interned_strings_buffer = 16\nopcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\n\n# APCu for local cache\napc.enable_cli = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php8.0-fpm  # NGINX</code></pre>\n      </div>\n    </div>\n<h3 id=\"command-line-installation\" class=\"mobile-header\">Command Line Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install via command line\ncd /var/www/html/nextcloud\nsudo -u www-data php occ maintenance:install \\\n  --database=&quot;mysql&quot; \\\n  --database-name=&quot;nextcloud&quot; \\\n  --database-user=&quot;nextclouduser&quot; \\\n  --database-pass=&quot;secure_password&quot; \\\n  --admin-user=&quot;admin&quot; \\\n  --admin-pass=&quot;admin_password&quot; \\\n  --data-dir=&quot;/var/www/html/nextcloud/data&quot;\n\n# Configure trusted domains\nsudo -u www-data php occ config:system:set trusted_domains 0 --value=nextcloud.example.com\nsudo -u www-data php occ config:system:set trusted_domains 1 --value=192.168.1.100\n\n# Configure caching\nsudo -u www-data php occ config:system:set memcache.local --value=&quot;\\\\OC\\\\Memcache\\\\APCu&quot;\nsudo -u www-data php occ config:system:set memcache.distributed --value=&quot;\\\\OC\\\\Memcache\\\\Redis&quot;\nsudo -u www-data php occ config:system:set redis host --value=&quot;localhost&quot;\nsudo -u www-data php occ config:system:set redis port --value=6379</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"redis-caching-setup\" class=\"mobile-header\">Redis Caching Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis\nsudo apt install -y redis-server  # Ubuntu/Debian\nsudo yum install -y redis          # RHEL/CentOS\n\nsudo systemctl enable --now redis\n\n# Configure Redis for Nextcloud\nsudo tee -a /etc/redis/redis.conf &gt; /dev/null &lt;&lt;EOF\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\nEOF\n\nsudo systemctl restart redis\n\n# Install Redis PHP extension\nsudo apt install -y php-redis  # Ubuntu/Debian\nsudo yum install -y php-redis   # RHEL/CentOS\n\n# Configure Nextcloud to use Redis\nsudo -u www-data php occ config:system:set memcache.local --value=&quot;\\\\OC\\\\Memcache\\\\APCu&quot;\nsudo -u www-data php occ config:system:set memcache.distributed --value=&quot;\\\\OC\\\\Memcache\\\\Redis&quot;\nsudo -u www-data php occ config:system:set redis host --value=&quot;localhost&quot;\nsudo -u www-data php occ config:system:set redis port --value=6379</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/MariaDB optimization for Nextcloud\nsudo tee -a /etc/mysql/mysql.conf.d/nextcloud.cnf &gt; /dev/null &lt;&lt;EOF\n[mysqld]\ninnodb_buffer_pool_size = 1G\ninnodb_io_capacity = 4000\ninnodb_log_file_size = 128M\ninnodb_log_buffer_size = 32M\ninnodb_flush_log_at_trx_commit = 1\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\n\nquery_cache_type = 1\nquery_cache_limit = 2M\nquery_cache_size = 64M\n\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\njoin_buffer_size = 262144\nsort_buffer_size = 262144\n\nmax_connections = 100\nmax_connect_errors = 10\nconnect_timeout = 5\nwait_timeout = 600\nmax_allowed_packet = 64M\n\nthread_cache_size = 128\nquery_cache_size = 64M\n\n[mysql.server]\ndefault-table-type = innodb\nEOF\n\nsudo systemctl restart mysql\n\n# Add indexes for better performance\nmysql -u nextclouduser -p nextcloud &lt;&lt;EOF\nALTER TABLE oc_jobs ADD INDEX jobs_class_index (class);\nALTER TABLE oc_filecache ADD INDEX fs_mtime (mtime);\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"background-jobs\" class=\"mobile-header\">Background Jobs</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure cron for background jobs\nsudo crontab -u www-data -e\n# Add: */5 * * * * php /var/www/html/nextcloud/occ system:cron\n\n# Or configure via occ command\nsudo -u www-data php occ background:cron\n\n# Check background job status\nsudo -u www-data php occ status\nsudo -u www-data php occ background:job:list</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"file-permissions-and-security\" class=\"mobile-header\">File Permissions and Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure file permissions script\nsudo tee /usr/local/bin/nextcloud-permissions.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nncpath=&#039;/var/www/html/nextcloud&#039;\nhtuser=&#039;www-data&#039;\nhtgroup=&#039;www-data&#039;\nrootuser=&#039;root&#039;\n\nprintf &quot;Creating possible missing Directories\\n&quot;\nmkdir -p $ncpath/data\nmkdir -p $ncpath/assets\nmkdir -p $ncpath/updater\n\nprintf &quot;chmod Files and Directories\\n&quot;\nfind ${ncpath}/ -type f -print0 | xargs -0 chmod 0640\nfind ${ncpath}/ -type d -print0 | xargs -0 chmod 0750\n\nprintf &quot;chown Directories\\n&quot;\nchown -R ${rootuser}:${htgroup} ${ncpath}/\nchown -R ${htuser}:${htgroup} ${ncpath}/apps/\nchown -R ${htuser}:${htgroup} ${ncpath}/assets/\nchown -R ${htuser}:${htgroup} ${ncpath}/config/\nchown -R ${htuser}:${htgroup} ${ncpath}/data/\nchown -R ${htuser}:${htgroup} ${ncpath}/themes/\nchown -R ${htuser}:${htgroup} ${ncpath}/updater/\n\nchmod +x ${ncpath}/occ\n\nprintf &quot;chmod/chown .htaccess\\n&quot;\nif [ -f ${ncpath}/.htaccess ]; then\n    chmod 0644 ${ncpath}/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/.htaccess\nfi\n\nif [ -f ${ncpath}/data/.htaccess ]; then\n    chmod 0644 ${ncpath}/data/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/data/.htaccess\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-permissions.sh\nsudo /usr/local/bin/nextcloud-permissions.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Let&#039;s Encrypt certificate\nsudo apt install -y certbot python3-certbot-apache  # Apache\nsudo apt install -y certbot python3-certbot-nginx   # NGINX\n\n# Obtain certificate\nsudo certbot --apache -d nextcloud.example.com  # Apache\nsudo certbot --nginx -d nextcloud.example.com   # NGINX\n\n# Configure HTTPS redirect in Nextcloud\nsudo -u www-data php occ config:system:set overwrite.cli.url --value=&quot;https://nextcloud.example.com&quot;\nsudo -u www-data php occ config:system:set overwriteprotocol --value=&quot;https&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-scan-and-hardening\" class=\"mobile-header\">Security Scan and Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run Nextcloud security scan\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:reset admin\n\n# Configure rate limiting\nsudo -u www-data php occ config:app:set brute_force_protection delay_increment --value=10\nsudo -u www-data php occ config:app:set brute_force_protection fail_tolerance --value=3\n\n# Enable two-factor authentication\nsudo -u www-data php occ app:enable twofactor_totp\nsudo -u www-data php occ app:enable twofactor_u2f\n\n# Configure file access control\nsudo -u www-data php occ config:system:set default_file_access --value=&quot;restrict&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"app-management\" class=\"mobile-header\">App Management</h2>\n<h3 id=\"essential-apps-installation\" class=\"mobile-header\">Essential Apps Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install popular apps via occ\nsudo -u www-data php occ app:install calendar\nsudo -u www-data php occ app:install contacts\nsudo -u www-data php occ app:install mail\nsudo -u www-data php occ app:install notes\nsudo -u www-data php occ app:install tasks\nsudo -u www-data php occ app:install deck\nsudo -u www-data php occ app:install polls\nsudo -u www-data php occ app:install richdocuments  # OnlyOffice integration\n\n# Enable apps\nsudo -u www-data php occ app:enable calendar\nsudo -u www-data php occ app:enable contacts\nsudo -u www-data php occ app:enable mail\n\n# List available apps\nsudo -u www-data php occ app:list\n\n# Update apps\nsudo -u www-data php occ app:update --all</code></pre>\n      </div>\n    </div>\n<h3 id=\"onlyoffice-integration\" class=\"mobile-header\">OnlyOffice Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install OnlyOffice Document Server\ndocker run -d --name onlyoffice \\\n  -p 8080:80 \\\n  -v onlyoffice_data:/var/www/onlyoffice/Data \\\n  -v onlyoffice_log:/var/log/onlyoffice \\\n  -v onlyoffice_fonts:/usr/share/fonts/truetype/custom \\\n  -v onlyoffice_forgotten:/var/lib/onlyoffice/documentserver/App_Data/cache/files/forgotten \\\n  onlyoffice/documentserver\n\n# Configure Nextcloud to use OnlyOffice\nsudo -u www-data php occ config:app:set richdocuments wopi_url --value=&quot;http://localhost:8080&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-maintenance\" class=\"mobile-header\">Backup and Maintenance</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/nextcloud-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/nextcloud&quot;\nNC_DIR=&quot;/var/www/html/nextcloud&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Enable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --on\n\n# Backup files (exclude data directory for space)\ntar --exclude=&quot;${NC_DIR}/data&quot; -czf ${BACKUP_DIR}/files/nextcloud-files-${DATE}.tar.gz -C /var/www/html nextcloud\n\n# Backup database\nmysqldump -u nextclouduser -p&#039;secure_password&#039; nextcloud &gt; ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\n\n# Backup data directory separately (if needed)\n# tar -czf ${BACKUP_DIR}/files/nextcloud-data-${DATE}.tar.gz -C ${NC_DIR} data\n\n# Disable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --off\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;nextcloud-*&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: nextcloud-${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/nextcloud-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"update-and-maintenance\" class=\"mobile-header\">Update and Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create update script\nsudo tee /usr/local/bin/nextcloud-update.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nNC_DIR=&quot;/var/www/html/nextcloud&quot;\n\n# Check for updates\nsudo -u www-data php ${NC_DIR}/occ update:check\n\n# Run updater\nsudo -u www-data php ${NC_DIR}/updater/updater.phar\n\n# Update apps\nsudo -u www-data php ${NC_DIR}/occ app:update --all\n\n# Run database upgrades\nsudo -u www-data php ${NC_DIR}/occ upgrade\n\n# Scan files\nsudo -u www-data php ${NC_DIR}/occ files:scan --all\n\n# Clean up\nsudo -u www-data php ${NC_DIR}/occ files:cleanup\nsudo -u www-data php ${NC_DIR}/occ trashbin:cleanup --all-users\n\necho &quot;Nextcloud update completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-update.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Test Nextcloud installation\ncurl -I http://localhost/nextcloud\ncurl -I https://nextcloud.example.com\n\n# Check Nextcloud status via occ\ncd /var/www/html/nextcloud\nsudo -u www-data php occ status\nsudo -u www-data php occ check\n\n# Check background jobs\nsudo -u www-data php occ background:job:list\n\n# Check database connectivity\nsudo -u www-data php occ db:check\n\n# Check security status\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:attempts\n\n# Test file operations\nsudo -u www-data php occ files:scan admin\nsudo -u www-data php occ files:scan --all\n\n# Check logs\nsudo tail -f /var/www/html/nextcloud/data/nextcloud.log\nsudo tail -f /var/log/apache2/nextcloud_error.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug mode\nsudo -u www-data php occ config:system:set debug --value=true --type=boolean\nsudo -u www-data php occ config:system:set loglevel --value=0\n\n# Check system requirements\nsudo -u www-data php occ check\n\n# Repair installation\nsudo -u www-data php occ maintenance:repair\n\n# Clear cache\nsudo -u www-data php occ files:cleanup\n\n# Fix file permissions\nsudo /usr/local/bin/nextcloud-permissions.sh\n\n# Database repair\nsudo -u www-data php occ db:check-and-repair\n\n# Update file cache\nsudo -u www-data php occ files:scan --all\n\n# Check configuration\nsudo -u www-data php occ config:list system\n\n# Reset user password\nsudo -u www-data php occ user:resetpassword admin\n\n# Check disk usage\ndu -sh /var/www/html/nextcloud/data/\ndf -h /var/www/html/nextcloud/\n\n# Memory usage check\nsudo -u www-data php occ status --output=json</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Admin Manual</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/installation/harden_server.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Hardening Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/installation/server_tuning.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://help.nextcloud.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"12 min","wordCount":2269,"lastBuilt":"2025-09-14T01:30:43.193Z"},{"name":"wordpress","displayName":"Wordpress","slug":"wordpress","description":"Repo for wordpress","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/wordpress","updatedAt":"2025-09-08T03:18:39Z","createdAt":"2025-09-08T03:18:29Z","readmeRaw":"# WordPress Installation Guide\n\nPopular content management system (CMS) for creating websites, blogs, and web applications with a user-friendly interface.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Web server (Apache or NGINX)\n- PHP 7.4+ with required extensions\n- MySQL 5.7+ or PostgreSQL 9.6+\n- SSL certificate (recommended)\n\n## Installation\n\n### LAMP Stack Setup (Apache + MySQL + PHP)\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mysql-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now apache2 mysql  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb  # RHEL/CentOS\n```\n\n### LEMP Stack Setup (NGINX + MySQL + PHP)\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y nginx mysql-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS  \nsudo yum install -y nginx mariadb-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now nginx mysql php7.4-fpm  # Ubuntu/Debian\nsudo systemctl enable --now nginx mariadb php-fpm   # RHEL/CentOS\n```\n\n### Database Setup\n```bash\n# Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create WordPress database\nsudo mysql -u root -p <<EOF\nCREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\nCREATE USER 'wordpressuser'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL ON wordpress.* TO 'wordpressuser'@'localhost';\nFLUSH PRIVILEGES;\nEXIT\nEOF\n```\n\n### WordPress Download and Setup\n```bash\n# Download WordPress\ncd /tmp\nwget https://wordpress.org/latest.tar.gz\ntar xzf latest.tar.gz\n\n# Create document root and copy files\nsudo mkdir -p /var/www/html/wordpress\nsudo cp -R /tmp/wordpress/* /var/www/html/wordpress/\nsudo chown -R www-data:www-data /var/www/html/wordpress  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/wordpress      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Create wp-config.php\ncd /var/www/html/wordpress\nsudo cp wp-config-sample.php wp-config.php\n\n# Generate salt keys\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/\n\n# Edit wp-config.php with database details and salt keys\nsudo nano wp-config.php\n```\n\n## Configuration\n\n### Apache Virtual Host\n```bash\n# Create Apache virtual host\nsudo tee /etc/apache2/sites-available/wordpress.conf > /dev/null <<EOF\n<VirtualHost *:80>\n    ServerName wordpress.example.com\n    ServerAlias www.wordpress.example.com\n    DocumentRoot /var/www/html/wordpress\n    \n    <Directory /var/www/html/wordpress/>\n        AllowOverride All\n        Options -Indexes +FollowSymLinks\n        Require all granted\n    </Directory>\n    \n    # Security headers\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"\n    \n    # Hide PHP version\n    Header always unset X-Powered-By\n    \n    # Disable server signature\n    ServerSignature Off\n    \n    ErrorLog \\${APACHE_LOG_DIR}/wordpress_error.log\n    CustomLog \\${APACHE_LOG_DIR}/wordpress_access.log combined\n</VirtualHost>\nEOF\n\n# Enable modules and site\nsudo a2enmod rewrite headers ssl\nsudo a2ensite wordpress.conf\nsudo systemctl restart apache2\n```\n\n### NGINX Configuration\n```bash\n# Create NGINX server block\nsudo tee /etc/nginx/sites-available/wordpress > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name wordpress.example.com www.wordpress.example.com;\n    root /var/www/html/wordpress;\n    index index.php index.html index.htm;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n\n    # Hide nginx version\n    server_tokens off;\n\n    # WordPress specific rules\n    location / {\n        try_files \\$uri \\$uri/ /index.php?\\$args;\n    }\n\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Adjust PHP version\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n    }\n\n    # Security rules\n    location ~* /(?:uploads|files)/.*\\.php\\$ {\n        deny all;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)\\$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    # Deny access to sensitive files\n    location ~* \\.(htaccess|htpasswd|ini|log|sh|inc|bak)\\$ {\n        deny all;\n    }\n\n    # WordPress: deny wp-config.php access\n    location ~* wp-config\\.php {\n        deny all;\n    }\n\n    # WordPress: deny general stuff\n    location ~* ^/(\\.user.ini|php.ini|\\..*)$ {\n        deny all;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### WordPress Configuration (wp-config.php)\n```bash\n# Create secure wp-config.php\nsudo tee /var/www/html/wordpress/wp-config.php > /dev/null <<'EOF'\n<?php\n// Database settings\ndefine('DB_NAME', 'wordpress');\ndefine('DB_USER', 'wordpressuser');\ndefine('DB_PASSWORD', 'secure_password');\ndefine('DB_HOST', 'localhost');\ndefine('DB_CHARSET', 'utf8mb4');\ndefine('DB_COLLATE', '');\n\n// Authentication Unique Keys and Salts\n// Generate these at: https://api.wordpress.org/secret-key/1.1/salt/\ndefine('AUTH_KEY',         'put your unique phrase here');\ndefine('SECURE_AUTH_KEY',  'put your unique phrase here');\ndefine('LOGGED_IN_KEY',    'put your unique phrase here');\ndefine('NONCE_KEY',        'put your unique phrase here');\ndefine('AUTH_SALT',        'put your unique phrase here');\ndefine('SECURE_AUTH_SALT', 'put your unique phrase here');\ndefine('LOGGED_IN_SALT',   'put your unique phrase here');\ndefine('NONCE_SALT',       'put your unique phrase here');\n\n// WordPress Database Table prefix\n$table_prefix = 'wp_';\n\n// WordPress debug mode (disable in production)\ndefine('WP_DEBUG', false);\n\n// Security enhancements\ndefine('DISALLOW_FILE_EDIT', true);\ndefine('DISALLOW_FILE_MODS', true);\ndefine('FORCE_SSL_ADMIN', true);\ndefine('WP_AUTO_UPDATE_CORE', true);\n\n// Increase memory limit\ndefine('WP_MEMORY_LIMIT', '512M');\n\n// Custom content directory (optional)\ndefine('WP_CONTENT_DIR', '/var/www/html/wordpress/wp-content');\ndefine('WP_CONTENT_URL', 'https://wordpress.example.com/wp-content');\n\n// Automatic updates\ndefine('WP_AUTO_UPDATE_CORE', 'minor');\n\n/* That's all, stop editing! Happy publishing. */\nif ( ! defined( 'ABSPATH' ) ) {\n    define( 'ABSPATH', dirname( __FILE__ ) . '/' );\n}\n\nrequire_once ABSPATH . 'wp-settings.php';\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/wp-config.php\nsudo chmod 600 /var/www/html/wordpress/wp-config.php\n```\n\n### SSL Configuration with Let's Encrypt\n```bash\n# Install Certbot\nsudo apt install -y certbot python3-certbot-apache  # For Apache\nsudo apt install -y certbot python3-certbot-nginx   # For NGINX\n\n# Obtain SSL certificate\nsudo certbot --apache -d wordpress.example.com -d www.wordpress.example.com  # Apache\nsudo certbot --nginx -d wordpress.example.com -d www.wordpress.example.com   # NGINX\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n```\n\n## Performance Optimization\n\n### PHP Optimization\n```bash\n# Edit PHP configuration\nsudo nano /etc/php/7.4/apache2/php.ini  # Apache\nsudo nano /etc/php/7.4/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\npost_max_size = 128M\nupload_max_filesize = 128M\nmax_execution_time = 300\nmax_input_time = 300\nmax_input_vars = 3000\ndate.timezone = \"America/New_York\"\n\n# Enable OPcache\nopcache.enable = 1\nopcache.memory_consumption = 128\nopcache.interned_strings_buffer = 8\nopcache.max_accelerated_files = 4000\nopcache.revalidate_freq = 2\nopcache.fast_shutdown = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php7.4-fpm nginx  # NGINX\n```\n\n### WordPress Caching\n```bash\n# Install Redis for object caching\nsudo apt install -y redis-server\nsudo systemctl enable --now redis-server\n\n# Configure Redis\nsudo tee -a /etc/redis/redis.conf > /dev/null <<EOF\nmaxmemory 256mb\nmaxmemory-policy allkeys-lru\nEOF\n\nsudo systemctl restart redis-server\n\n# Install WordPress Redis plugin via WP-CLI\ncd /var/www/html/wordpress\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Install and configure Redis plugin\nsudo -u www-data wp plugin install redis-cache --activate\nsudo -u www-data wp redis enable\n\n# Install caching plugins\nsudo -u www-data wp plugin install w3-total-cache --activate\nsudo -u www-data wp plugin install wp-super-cache --activate\n```\n\n### Database Optimization\n```bash\n# Optimize MySQL for WordPress\nsudo tee -a /etc/mysql/mysql.conf.d/mysqld.cnf > /dev/null <<EOF\n\n# WordPress optimizations\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_log_buffer_size = 8M\ninnodb_file_per_table = 1\ninnodb_open_files = 400\ninnodb_io_capacity = 400\ninnodb_flush_method = O_DIRECT\nquery_cache_type = 1\nquery_cache_limit = 1M\nquery_cache_size = 16M\ntmp_table_size = 32M\nmax_heap_table_size = 32M\nmax_connections = 500\nthread_cache_size = 50\nopen_files_limit = 65535\ntable_definition_cache = 4096\ntable_open_cache = 10240\nEOF\n\nsudo systemctl restart mysql\n```\n\n## Security Hardening\n\n### WordPress Security\n```bash\n# Install security plugins\nsudo -u www-data wp plugin install wordfence --activate\nsudo -u www-data wp plugin install sucuri-scanner --activate\nsudo -u www-data wp plugin install all-in-one-wp-security-and-firewall --activate\n\n# Hide WordPress version\necho \"remove_action('wp_head', 'wp_generator');\" | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Disable XML-RPC if not needed\necho \"add_filter('xmlrpc_enabled', '__return_false');\" | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Change WordPress security keys regularly\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/ | sudo tee -a /var/www/html/wordpress/wp-config.php\n\n# Create .htaccess security rules (Apache)\nsudo tee /var/www/html/wordpress/.htaccess > /dev/null <<EOF\n# Block access to wp-config.php\n<Files wp-config.php>\norder allow,deny\ndeny from all\n</Files>\n\n# Block access to readme.html, license.txt\n<FilesMatch \"^(readme\\.html|license\\.txt|wp-config\\.php)\">\norder allow,deny\ndeny from all\n</FilesMatch>\n\n# Protect against script injections\nOptions +FollowSymLinks\nRewriteEngine On\nRewriteCond %{QUERY_STRING} (<|%3C).*script.*(>|%3E) [NC,OR]\nRewriteCond %{QUERY_STRING} GLOBALS(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} _REQUEST(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} ^.*(\\[|\\]|\\(|\\)|<|>|ê|\"|;|\\?|\\*|=$).* [NC,OR]\nRewriteCond %{QUERY_STRING} ^.*(â|á|à|ä|â|ã|å|æ|ç|è|é|ê|ë|ì|í|î|ï|ð|ñ|ò|ó|ô|õ|ö|ø|ù|ú|û|ü|ý|þ|ÿ|À|Á|Â|Ã|Å|Æ|Ç|È|É|Ê|Ë|Ì|Í|Î|Ï|Ð|Ñ|Ò|Ó|Ô|Õ|Ö|Ø|Ù|Ú|Û|Ü|Ý|Þ).* [NC]\nRewriteRule ^(.*)$ index.php [F,L]\n\n# Limit login attempts\n<FilesMatch \"wp-login.php\">\norder allow,deny\nallow from all\n# Add your IP addresses here for admin access\n# allow from 192.168.1.100\n</FilesMatch>\n\n# Disable directory browsing\nOptions -Indexes\n\n# Protect uploads directory\n<Directory \"/var/www/html/wordpress/wp-content/uploads/\">\n    <Files \"*.php\">\n        Order Deny,Allow\n        Deny from All\n    </Files>\n</Directory>\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/.htaccess\n```\n\n### Firewall Configuration\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 'Apache Full'    # or 'Nginx Full'\nsudo ufw allow ssh\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n```\n\n## WordPress CLI (WP-CLI) Installation\n\n```bash\n# Install WP-CLI\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Verify installation\nwp --info\n\n# Common WP-CLI commands\ncd /var/www/html/wordpress\n\n# Download WordPress core\nsudo -u www-data wp core download\n\n# Create wp-config.php\nsudo -u www-data wp config create \\\n  --dbname=wordpress \\\n  --dbuser=wordpressuser \\\n  --dbpass=secure_password \\\n  --dbhost=localhost\n\n# Install WordPress\nsudo -u www-data wp core install \\\n  --url=https://wordpress.example.com \\\n  --title=\"My WordPress Site\" \\\n  --admin_user=admin \\\n  --admin_password=secure_admin_password \\\n  --admin_email=admin@example.com\n\n# Update WordPress core\nsudo -u www-data wp core update\n\n# Install and activate plugins\nsudo -u www-data wp plugin install akismet --activate\nsudo -u www-data wp plugin install jetpack --activate\nsudo -u www-data wp plugin install yoast-seo --activate\n\n# Update plugins\nsudo -u www-data wp plugin update --all\n\n# Install themes\nsudo -u www-data wp theme install twentytwentythree --activate\nsudo -u www-data wp theme update --all\n\n# Create users\nsudo -u www-data wp user create editor editor@example.com \\\n  --role=editor --user_pass=secure_password\n\n# Database operations\nsudo -u www-data wp db optimize\nsudo -u www-data wp db repair\nsudo -u www-data wp db check\n```\n\n## Backup and Maintenance\n\n### Automated Backup Script\n```bash\n# Create backup script\nsudo tee /usr/local/bin/wordpress-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/wordpress\"\nWP_DIR=\"/var/www/html/wordpress\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Backup WordPress files\ntar -czf ${BACKUP_DIR}/files/wordpress-files-${DATE}.tar.gz -C ${WP_DIR} .\n\n# Backup database\nmysqldump -u wordpressuser -p'secure_password' wordpress > ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\n\n# Using WP-CLI for database export\ncd ${WP_DIR}\nsudo -u www-data wp db export ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"wordpress-*\" -type f -mtime +7 -delete\n\necho \"Backup completed: wordpress-${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/wordpress-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Maintenance Tasks\n```bash\n# Create maintenance script\nsudo tee /usr/local/bin/wordpress-maintenance.sh > /dev/null <<'EOF'\n#!/bin/bash\nWP_DIR=\"/var/www/html/wordpress\"\ncd ${WP_DIR}\n\n# Update WordPress core, plugins, and themes\nsudo -u www-data wp core update\nsudo -u www-data wp plugin update --all\nsudo -u www-data wp theme update --all\n\n# Database cleanup\nsudo -u www-data wp transient delete --all\nsudo -u www-data wp db optimize\n\n# Clear caches\nif sudo -u www-data wp plugin is-installed w3-total-cache; then\n    sudo -u www-data wp w3-total-cache flush all\nfi\n\nif sudo -u www-data wp plugin is-installed wp-super-cache; then\n    sudo -u www-data wp super-cache flush\nfi\n\necho \"WordPress maintenance completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-maintenance.sh\n\n# Schedule weekly maintenance\necho \"0 3 * * 0 root /usr/local/bin/wordpress-maintenance.sh\" | sudo tee -a /etc/crontab\n```\n\n## Verification\n\n```bash\n# Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Check PHP-FPM (if using NGINX)\nsudo systemctl status php7.4-fpm\n\n# Test database connection\nmysql -u wordpressuser -p -e \"SHOW DATABASES;\"\n\n# Test website\ncurl -I http://wordpress.example.com\n\n# Check WordPress status via WP-CLI\ncd /var/www/html/wordpress\nsudo -u www-data wp core version\nsudo -u www-data wp plugin status\nsudo -u www-data wp theme status\n\n# Check file permissions\nls -la /var/www/html/wordpress/\nls -la /var/www/html/wordpress/wp-content/\n\n# Test uploads directory\nsudo -u www-data wp media regenerate --yes\n\n# Check for WordPress updates\nsudo -u www-data wp core check-update\nsudo -u www-data wp plugin list --update=available\n```\n\n## Troubleshooting\n\n```bash\n# Enable WordPress debug mode\nsudo nano /var/www/html/wordpress/wp-config.php\n# Add: define('WP_DEBUG', true);\n# Add: define('WP_DEBUG_LOG', true);\n\n# Check WordPress debug log\ntail -f /var/www/html/wordpress/wp-content/debug.log\n\n# Check web server logs\nsudo tail -f /var/log/apache2/wordpress_error.log  # Apache\nsudo tail -f /var/log/nginx/error.log              # NGINX\n\n# Check PHP logs\nsudo tail -f /var/log/php7.4-fpm.log\n\n# Database connectivity test\nsudo -u www-data wp db check\n\n# Plugin conflict troubleshooting\nsudo -u www-data wp plugin deactivate --all\nsudo -u www-data wp plugin activate plugin-name\n\n# Theme troubleshooting\nsudo -u www-data wp theme activate twentytwentythree\n\n# Check disk space\ndf -h /var/www/html/wordpress/\n\n# File permission issues\nsudo chown -R www-data:www-data /var/www/html/wordpress/\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Reset user password via WP-CLI\nsudo -u www-data wp user update admin --user_pass=new_password\n```\n\n## Additional Resources\n\n- [WordPress Codex](https://codex.wordpress.org/)\n- [WP-CLI Documentation](https://wp-cli.org/)\n- [WordPress Security Guide](https://wordpress.org/support/article/hardening-wordpress/)\n- [Performance Best Practices](https://wordpress.org/support/article/optimization/)\n- [WordPress Forums](https://wordpress.org/support/forums/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"wordpress-installation-guide\" class=\"mobile-header\">WordPress Installation Guide</h1>\n<p class=\"mobile-paragraph\">Popular content management system (CMS) for creating websites, blogs, and web applications with a user-friendly interface.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Web server (Apache or NGINX)</li>\n<li class=\"mobile-list-item\">PHP 7.4+ with required extensions</li>\n<li class=\"mobile-list-item\">MySQL 5.7+ or PostgreSQL 9.6+</li>\n<li class=\"mobile-list-item\">SSL certificate (recommended)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"lamp-stack-setup-apache-mysql-php\" class=\"mobile-header\">LAMP Stack Setup (Apache + MySQL + PHP)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mysql-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now apache2 mysql  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb  # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"lemp-stack-setup-nginx-mysql-php\" class=\"mobile-header\">LEMP Stack Setup (NGINX + MySQL + PHP)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt update\nsudo apt install -y nginx mysql-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS  \nsudo yum install -y nginx mariadb-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now nginx mysql php7.4-fpm  # Ubuntu/Debian\nsudo systemctl enable --now nginx mariadb php-fpm   # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-setup\" class=\"mobile-header\">Database Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create WordPress database\nsudo mysql -u root -p &lt;&lt;EOF\nCREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\nCREATE USER &#039;wordpressuser&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL ON wordpress.* TO &#039;wordpressuser&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEXIT\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-download-and-setup\" class=\"mobile-header\">WordPress Download and Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download WordPress\ncd /tmp\nwget https://wordpress.org/latest.tar.gz\ntar xzf latest.tar.gz\n\n# Create document root and copy files\nsudo mkdir -p /var/www/html/wordpress\nsudo cp -R /tmp/wordpress/* /var/www/html/wordpress/\nsudo chown -R www-data:www-data /var/www/html/wordpress  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/wordpress      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Create wp-config.php\ncd /var/www/html/wordpress\nsudo cp wp-config-sample.php wp-config.php\n\n# Generate salt keys\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/\n\n# Edit wp-config.php with database details and salt keys\nsudo nano wp-config.php</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"apache-virtual-host\" class=\"mobile-header\">Apache Virtual Host</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Apache virtual host\nsudo tee /etc/apache2/sites-available/wordpress.conf &gt; /dev/null &lt;&lt;EOF\n&lt;VirtualHost *:80&gt;\n    ServerName wordpress.example.com\n    ServerAlias www.wordpress.example.com\n    DocumentRoot /var/www/html/wordpress\n    \n    &lt;Directory /var/www/html/wordpress/&gt;\n        AllowOverride All\n        Options -Indexes +FollowSymLinks\n        Require all granted\n    &lt;/Directory&gt;\n    \n    # Security headers\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n    \n    # Hide PHP version\n    Header always unset X-Powered-By\n    \n    # Disable server signature\n    ServerSignature Off\n    \n    ErrorLog \\${APACHE_LOG_DIR}/wordpress_error.log\n    CustomLog \\${APACHE_LOG_DIR}/wordpress_access.log combined\n&lt;/VirtualHost&gt;\nEOF\n\n# Enable modules and site\nsudo a2enmod rewrite headers ssl\nsudo a2ensite wordpress.conf\nsudo systemctl restart apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">NGINX Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX server block\nsudo tee /etc/nginx/sites-available/wordpress &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 80;\n    server_name wordpress.example.com www.wordpress.example.com;\n    root /var/www/html/wordpress;\n    index index.php index.html index.htm;\n\n    # Security headers\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot; always;\n    add_header Content-Security-Policy &quot;default-src &#039;self&#039; http: https: data: blob: &#039;unsafe-inline&#039;&quot; always;\n\n    # Hide nginx version\n    server_tokens off;\n\n    # WordPress specific rules\n    location / {\n        try_files \\$uri \\$uri/ /index.php?\\$args;\n    }\n\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Adjust PHP version\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n    }\n\n    # Security rules\n    location ~* /(?:uploads|files)/.*\\.php\\$ {\n        deny all;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)\\$ {\n        expires 1y;\n        add_header Cache-Control &quot;public, immutable&quot;;\n    }\n\n    # Deny access to sensitive files\n    location ~* \\.(htaccess|htpasswd|ini|log|sh|inc|bak)\\$ {\n        deny all;\n    }\n\n    # WordPress: deny wp-config.php access\n    location ~* wp-config\\.php {\n        deny all;\n    }\n\n    # WordPress: deny general stuff\n    location ~* ^/(\\.user.ini|php.ini|\\..*)$ {\n        deny all;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-configuration-wp-configphp\" class=\"mobile-header\">WordPress Configuration (wp-config.php)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure wp-config.php\nsudo tee /var/www/html/wordpress/wp-config.php &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n&lt;?php\n// Database settings\ndefine(&#039;DB_NAME&#039;, &#039;wordpress&#039;);\ndefine(&#039;DB_USER&#039;, &#039;wordpressuser&#039;);\ndefine(&#039;DB_PASSWORD&#039;, &#039;secure_password&#039;);\ndefine(&#039;DB_HOST&#039;, &#039;localhost&#039;);\ndefine(&#039;DB_CHARSET&#039;, &#039;utf8mb4&#039;);\ndefine(&#039;DB_COLLATE&#039;, &#039;&#039;);\n\n// Authentication Unique Keys and Salts\n// Generate these at: https://api.wordpress.org/secret-key/1.1/salt/\ndefine(&#039;AUTH_KEY&#039;,         &#039;put your unique phrase here&#039;);\ndefine(&#039;SECURE_AUTH_KEY&#039;,  &#039;put your unique phrase here&#039;);\ndefine(&#039;LOGGED_IN_KEY&#039;,    &#039;put your unique phrase here&#039;);\ndefine(&#039;NONCE_KEY&#039;,        &#039;put your unique phrase here&#039;);\ndefine(&#039;AUTH_SALT&#039;,        &#039;put your unique phrase here&#039;);\ndefine(&#039;SECURE_AUTH_SALT&#039;, &#039;put your unique phrase here&#039;);\ndefine(&#039;LOGGED_IN_SALT&#039;,   &#039;put your unique phrase here&#039;);\ndefine(&#039;NONCE_SALT&#039;,       &#039;put your unique phrase here&#039;);\n\n// WordPress Database Table prefix\n$table_prefix = &#039;wp_&#039;;\n\n// WordPress debug mode (disable in production)\ndefine(&#039;WP_DEBUG&#039;, false);\n\n// Security enhancements\ndefine(&#039;DISALLOW_FILE_EDIT&#039;, true);\ndefine(&#039;DISALLOW_FILE_MODS&#039;, true);\ndefine(&#039;FORCE_SSL_ADMIN&#039;, true);\ndefine(&#039;WP_AUTO_UPDATE_CORE&#039;, true);\n\n// Increase memory limit\ndefine(&#039;WP_MEMORY_LIMIT&#039;, &#039;512M&#039;);\n\n// Custom content directory (optional)\ndefine(&#039;WP_CONTENT_DIR&#039;, &#039;/var/www/html/wordpress/wp-content&#039;);\ndefine(&#039;WP_CONTENT_URL&#039;, &#039;https://wordpress.example.com/wp-content&#039;);\n\n// Automatic updates\ndefine(&#039;WP_AUTO_UPDATE_CORE&#039;, &#039;minor&#039;);\n\n/* That&#039;s all, stop editing! Happy publishing. */\nif ( ! defined( &#039;ABSPATH&#039; ) ) {\n    define( &#039;ABSPATH&#039;, dirname( __FILE__ ) . &#039;/&#039; );\n}\n\nrequire_once ABSPATH . &#039;wp-settings.php&#039;;\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/wp-config.php\nsudo chmod 600 /var/www/html/wordpress/wp-config.php</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssl-configuration-with-lets-encrypt\" class=\"mobile-header\">SSL Configuration with Let's Encrypt</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot\nsudo apt install -y certbot python3-certbot-apache  # For Apache\nsudo apt install -y certbot python3-certbot-nginx   # For NGINX\n\n# Obtain SSL certificate\nsudo certbot --apache -d wordpress.example.com -d www.wordpress.example.com  # Apache\nsudo certbot --nginx -d wordpress.example.com -d www.wordpress.example.com   # NGINX\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"php-optimization\" class=\"mobile-header\">PHP Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit PHP configuration\nsudo nano /etc/php/7.4/apache2/php.ini  # Apache\nsudo nano /etc/php/7.4/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\npost_max_size = 128M\nupload_max_filesize = 128M\nmax_execution_time = 300\nmax_input_time = 300\nmax_input_vars = 3000\ndate.timezone = &quot;America/New_York&quot;\n\n# Enable OPcache\nopcache.enable = 1\nopcache.memory_consumption = 128\nopcache.interned_strings_buffer = 8\nopcache.max_accelerated_files = 4000\nopcache.revalidate_freq = 2\nopcache.fast_shutdown = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php7.4-fpm nginx  # NGINX</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-caching\" class=\"mobile-header\">WordPress Caching</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis for object caching\nsudo apt install -y redis-server\nsudo systemctl enable --now redis-server\n\n# Configure Redis\nsudo tee -a /etc/redis/redis.conf &gt; /dev/null &lt;&lt;EOF\nmaxmemory 256mb\nmaxmemory-policy allkeys-lru\nEOF\n\nsudo systemctl restart redis-server\n\n# Install WordPress Redis plugin via WP-CLI\ncd /var/www/html/wordpress\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Install and configure Redis plugin\nsudo -u www-data wp plugin install redis-cache --activate\nsudo -u www-data wp redis enable\n\n# Install caching plugins\nsudo -u www-data wp plugin install w3-total-cache --activate\nsudo -u www-data wp plugin install wp-super-cache --activate</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize MySQL for WordPress\nsudo tee -a /etc/mysql/mysql.conf.d/mysqld.cnf &gt; /dev/null &lt;&lt;EOF\n\n# WordPress optimizations\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_log_buffer_size = 8M\ninnodb_file_per_table = 1\ninnodb_open_files = 400\ninnodb_io_capacity = 400\ninnodb_flush_method = O_DIRECT\nquery_cache_type = 1\nquery_cache_limit = 1M\nquery_cache_size = 16M\ntmp_table_size = 32M\nmax_heap_table_size = 32M\nmax_connections = 500\nthread_cache_size = 50\nopen_files_limit = 65535\ntable_definition_cache = 4096\ntable_open_cache = 10240\nEOF\n\nsudo systemctl restart mysql</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"wordpress-security\" class=\"mobile-header\">WordPress Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install security plugins\nsudo -u www-data wp plugin install wordfence --activate\nsudo -u www-data wp plugin install sucuri-scanner --activate\nsudo -u www-data wp plugin install all-in-one-wp-security-and-firewall --activate\n\n# Hide WordPress version\necho &quot;remove_action(&#039;wp_head&#039;, &#039;wp_generator&#039;);&quot; | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Disable XML-RPC if not needed\necho &quot;add_filter(&#039;xmlrpc_enabled&#039;, &#039;__return_false&#039;);&quot; | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Change WordPress security keys regularly\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/ | sudo tee -a /var/www/html/wordpress/wp-config.php\n\n# Create .htaccess security rules (Apache)\nsudo tee /var/www/html/wordpress/.htaccess &gt; /dev/null &lt;&lt;EOF\n# Block access to wp-config.php\n&lt;Files wp-config.php&gt;\norder allow,deny\ndeny from all\n&lt;/Files&gt;\n\n# Block access to readme.html, license.txt\n&lt;FilesMatch &quot;^(readme\\.html|license\\.txt|wp-config\\.php)&quot;&gt;\norder allow,deny\ndeny from all\n&lt;/FilesMatch&gt;\n\n# Protect against script injections\nOptions +FollowSymLinks\nRewriteEngine On\nRewriteCond %{QUERY_STRING} (&lt;|%3C).*script.*(&gt;|%3E) [NC,OR]\nRewriteCond %{QUERY_STRING} GLOBALS(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} _REQUEST(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} ^.*(\\[|\\]|\\(|\\)|&lt;|&gt;|ê|&quot;|;|\\?|\\*|=$).* [NC,OR]\nRewriteCond %{QUERY_STRING} ^.*(â|á|à|ä|â|ã|å|æ|ç|è|é|ê|ë|ì|í|î|ï|ð|ñ|ò|ó|ô|õ|ö|ø|ù|ú|û|ü|ý|þ|ÿ|À|Á|Â|Ã|Å|Æ|Ç|È|É|Ê|Ë|Ì|Í|Î|Ï|Ð|Ñ|Ò|Ó|Ô|Õ|Ö|Ø|Ù|Ú|Û|Ü|Ý|Þ).* [NC]\nRewriteRule ^(.*)$ index.php [F,L]\n\n# Limit login attempts\n&lt;FilesMatch &quot;wp-login.php&quot;&gt;\norder allow,deny\nallow from all\n# Add your IP addresses here for admin access\n# allow from 192.168.1.100\n&lt;/FilesMatch&gt;\n\n# Disable directory browsing\nOptions -Indexes\n\n# Protect uploads directory\n&lt;Directory &quot;/var/www/html/wordpress/wp-content/uploads/&quot;&gt;\n    &lt;Files &quot;*.php&quot;&gt;\n        Order Deny,Allow\n        Deny from All\n    &lt;/Files&gt;\n&lt;/Directory&gt;\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/.htaccess</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow &#039;Apache Full&#039;    # or &#039;Nginx Full&#039;\nsudo ufw allow ssh\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"wordpress-cli-wp-cli-installation\" class=\"mobile-header\">WordPress CLI (WP-CLI) Installation</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WP-CLI\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Verify installation\nwp --info\n\n# Common WP-CLI commands\ncd /var/www/html/wordpress\n\n# Download WordPress core\nsudo -u www-data wp core download\n\n# Create wp-config.php\nsudo -u www-data wp config create \\\n  --dbname=wordpress \\\n  --dbuser=wordpressuser \\\n  --dbpass=secure_password \\\n  --dbhost=localhost\n\n# Install WordPress\nsudo -u www-data wp core install \\\n  --url=https://wordpress.example.com \\\n  --title=&quot;My WordPress Site&quot; \\\n  --admin_user=admin \\\n  --admin_password=secure_admin_password \\\n  --admin_email=admin@example.com\n\n# Update WordPress core\nsudo -u www-data wp core update\n\n# Install and activate plugins\nsudo -u www-data wp plugin install akismet --activate\nsudo -u www-data wp plugin install jetpack --activate\nsudo -u www-data wp plugin install yoast-seo --activate\n\n# Update plugins\nsudo -u www-data wp plugin update --all\n\n# Install themes\nsudo -u www-data wp theme install twentytwentythree --activate\nsudo -u www-data wp theme update --all\n\n# Create users\nsudo -u www-data wp user create editor editor@example.com \\\n  --role=editor --user_pass=secure_password\n\n# Database operations\nsudo -u www-data wp db optimize\nsudo -u www-data wp db repair\nsudo -u www-data wp db check</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-maintenance\" class=\"mobile-header\">Backup and Maintenance</h2>\n<h3 id=\"automated-backup-script\" class=\"mobile-header\">Automated Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/wordpress-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/wordpress&quot;\nWP_DIR=&quot;/var/www/html/wordpress&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Backup WordPress files\ntar -czf ${BACKUP_DIR}/files/wordpress-files-${DATE}.tar.gz -C ${WP_DIR} .\n\n# Backup database\nmysqldump -u wordpressuser -p&#039;secure_password&#039; wordpress &gt; ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\n\n# Using WP-CLI for database export\ncd ${WP_DIR}\nsudo -u www-data wp db export ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;wordpress-*&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: wordpress-${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/wordpress-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create maintenance script\nsudo tee /usr/local/bin/wordpress-maintenance.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nWP_DIR=&quot;/var/www/html/wordpress&quot;\ncd ${WP_DIR}\n\n# Update WordPress core, plugins, and themes\nsudo -u www-data wp core update\nsudo -u www-data wp plugin update --all\nsudo -u www-data wp theme update --all\n\n# Database cleanup\nsudo -u www-data wp transient delete --all\nsudo -u www-data wp db optimize\n\n# Clear caches\nif sudo -u www-data wp plugin is-installed w3-total-cache; then\n    sudo -u www-data wp w3-total-cache flush all\nfi\n\nif sudo -u www-data wp plugin is-installed wp-super-cache; then\n    sudo -u www-data wp super-cache flush\nfi\n\necho &quot;WordPress maintenance completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-maintenance.sh\n\n# Schedule weekly maintenance\necho &quot;0 3 * * 0 root /usr/local/bin/wordpress-maintenance.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Check PHP-FPM (if using NGINX)\nsudo systemctl status php7.4-fpm\n\n# Test database connection\nmysql -u wordpressuser -p -e &quot;SHOW DATABASES;&quot;\n\n# Test website\ncurl -I http://wordpress.example.com\n\n# Check WordPress status via WP-CLI\ncd /var/www/html/wordpress\nsudo -u www-data wp core version\nsudo -u www-data wp plugin status\nsudo -u www-data wp theme status\n\n# Check file permissions\nls -la /var/www/html/wordpress/\nls -la /var/www/html/wordpress/wp-content/\n\n# Test uploads directory\nsudo -u www-data wp media regenerate --yes\n\n# Check for WordPress updates\nsudo -u www-data wp core check-update\nsudo -u www-data wp plugin list --update=available</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable WordPress debug mode\nsudo nano /var/www/html/wordpress/wp-config.php\n# Add: define(&#039;WP_DEBUG&#039;, true);\n# Add: define(&#039;WP_DEBUG_LOG&#039;, true);\n\n# Check WordPress debug log\ntail -f /var/www/html/wordpress/wp-content/debug.log\n\n# Check web server logs\nsudo tail -f /var/log/apache2/wordpress_error.log  # Apache\nsudo tail -f /var/log/nginx/error.log              # NGINX\n\n# Check PHP logs\nsudo tail -f /var/log/php7.4-fpm.log\n\n# Database connectivity test\nsudo -u www-data wp db check\n\n# Plugin conflict troubleshooting\nsudo -u www-data wp plugin deactivate --all\nsudo -u www-data wp plugin activate plugin-name\n\n# Theme troubleshooting\nsudo -u www-data wp theme activate twentytwentythree\n\n# Check disk space\ndf -h /var/www/html/wordpress/\n\n# File permission issues\nsudo chown -R www-data:www-data /var/www/html/wordpress/\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Reset user password via WP-CLI\nsudo -u www-data wp user update admin --user_pass=new_password</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://codex.wordpress.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WordPress Codex</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wp-cli.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WP-CLI Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/support/article/hardening-wordpress/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WordPress Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/support/article/optimization/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/support/forums/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WordPress Forums</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"11 min","wordCount":2044,"lastBuilt":"2025-09-14T01:30:37.654Z"}]},"__N_SSG":true}