{"pageProps":{"guides":[{"name":"adguard-home","displayName":"Adguard Home","slug":"adguard-home","description":"Repo for adguard-home","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adguard-home","updatedAt":"2025-09-08T03:04:18Z","createdAt":"2025-09-08T03:04:08Z","readmeRaw":"## 👋 Welcome to adguard-home 🚀  \n\nadguard-home README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adguard-home\" class=\"mobile-header\">👋 Welcome to adguard-home 🚀  </h2>\n<p class=\"mobile-paragraph\">adguard-home README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:47.224Z"},{"name":"adminer","displayName":"Adminer","slug":"adminer","description":"Repo for adminer","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adminer","updatedAt":"2025-09-08T03:04:32Z","createdAt":"2025-09-08T03:04:22Z","readmeRaw":"## 👋 Welcome to adminer 🚀  \n\nadminer README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adminer\" class=\"mobile-header\">👋 Welcome to adminer 🚀  </h2>\n<p class=\"mobile-paragraph\">adminer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:47.075Z"},{"name":"ansible","displayName":"Ansible","slug":"ansible","description":"Repo for ansible","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ansible","updatedAt":"2025-09-14T01:29:39Z","createdAt":"2025-09-08T03:04:35Z","readmeRaw":"# Ansible Installation Guide\n\nAgentless automation platform for configuration management, application deployment, and task automation across multiple systems. Industry standard for infrastructure automation with enterprise-grade security.\n\n## Prerequisites\n\n- Linux control machine (any modern distribution)\n- Python 3.8+ on control machine\n- SSH access to target hosts\n- Python 2.7+ or 3.5+ on target hosts\n- 2GB RAM minimum, 4GB+ recommended for large infrastructures\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Fedora\n```bash\n# Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Arch Linux\n```bash\n# Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version\n```\n\n#### Alpine Linux\n```bash\n# Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version\n```\n\n### Using pip (Latest Version)\n```bash\n# Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho 'source ~/ansible-venv/bin/activate' >> ~/.bashrc\n\n# Verify installation\nansible --version\n```\n\n### Using Docker\n```bash\n# Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker > /dev/null <<'EOF'\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest \"$@\"\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho 'alias ansible=\"ansible-docker ansible\"' >> ~/.bashrc\necho 'alias ansible-playbook=\"ansible-docker ansible-playbook\"' >> ~/.bashrc\n```\n\n## Project Structure and Configuration\n\n### Professional Project Structure\n```bash\n# Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat > ansible.cfg <<EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF\n```\n\n### Advanced Inventory Management\n```bash\n# Create production inventory with groups and variables\ncat > inventories/production/hosts.yml <<EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: \"{{ vault_mysql_root_password }}\"\n        mysql_replication_user: \"{{ vault_mysql_replication_user }}\"\n        mysql_replication_password: \"{{ vault_mysql_replication_password }}\"\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: \"{{ vault_haproxy_stats_password }}\"\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: \"0 2 * * *\"\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: \"0 1 * * *\"\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat > inventories/production/aws_ec2.yml <<EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: \"'web' in tags.Role\"\n  databases: \"'db' in tags.Role\"\n  loadbalancers: \"'lb' in tags.Role\"\n  \n  # Group by environment\n  production: \"tags.Environment == 'production'\"\n  staging: \"tags.Environment == 'staging'\"\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == \"us-west-2a\"\n  us_west_2b: ec2_placement_availability_zone == \"us-west-2b\"\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF\n```\n\n### Ansible Vault Security\n```bash\n# Create strong vault password\nopenssl rand -base64 32 > ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat > group_vars/all/vars.yml <<EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: \"{{ vault_mysql_root_password }}\"\ngrafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: \"{{ vault_ssl_private_key }}\"\n\n# Security settings\nansible_ssh_common_args: '-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts'\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml\n```\n\n## Comprehensive Playbooks\n\n### System Hardening Playbook\n```bash\ncat > playbooks/system-hardening.yml <<EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [\"Debian\", \"RedHat\"]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: \"*\"\n        state: latest\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == \"Debian\"\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: \"{{ security_packages }}\"\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: 'ansible ALL=(ALL) NOPASSWD:ALL'\n        create: yes\n        mode: '0440'\n        validate: 'visudo -cf %s'\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: \"{{ item.regexp }}\"\n        line: \"{{ item.line }}\"\n        backup: yes\n      loop:\n        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }\n        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }\n        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }\n        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }\n        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }\n        - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 0' }\n        - { regexp: '^#?Protocol', line: 'Protocol 2' }\n        - { regexp: '^#?LogLevel', line: 'LogLevel VERBOSE' }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == \"Debian\"\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: 'SSH access'\n      when: ansible_os_family == \"Debian\"\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: \"{{ item }}\"\n        enabled: no\n        state: stopped\n      loop: \"{{ disabled_services }}\"\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: \"{{ item.path }}\"\n        mode: \"{{ item.mode }}\"\n        owner: root\n        group: root\n      loop:\n        - { path: '/etc/passwd', mode: '0644' }\n        - { path: '/etc/shadow', mode: '0640' }\n        - { path: '/etc/group', mode: '0644' }\n        - { path: '/etc/gshadow', mode: '0640' }\n        - { path: '/etc/ssh/sshd_config', mode: '0600' }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'net.ipv4.ip_forward', value: '0' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'kernel.randomize_va_space', value: '2' }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: \"{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}\"\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF\n```\n\n### Application Deployment Playbook\n```bash\ncat > playbooks/web-application-deployment.yml <<EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: \"25%\"  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: \"{{ app_version | default('latest') }}\"\n    app_port: 3000\n    nginx_workers: \"{{ ansible_processor_cores }}\"\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: \"Server is in maintenance mode\"\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: \"{{ app_name }}\"\n        system: yes\n        shell: /bin/false\n        home: \"/opt/{{ app_name }}\"\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: \"{{ item }}\"\n        state: directory\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0755'\n      loop:\n        - \"/opt/{{ app_name }}\"\n        - \"/opt/{{ app_name }}/releases\"\n        - \"/opt/{{ app_name }}/shared\"\n        - \"/var/log/{{ app_name }}\"\n\n    - name: Download application release\n      get_url:\n        url: \"https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        mode: '0644'\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/opt/{{ app_name }}/releases/\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        remote_src: yes\n        creates: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n\n    - name: Create symlink to current release\n      file:\n        src: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n        dest: \"/opt/{{ app_name }}/current\"\n        state: link\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: \"templates/{{ app_name }}.conf.j2\"\n        dest: \"/opt/{{ app_name }}/shared/{{ app_name }}.conf\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0640'\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: \"templates/{{ app_name }}.service.j2\"\n        dest: \"/etc/systemd/system/{{ app_name }}.service\"\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: \"{{ app_name }}\"\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: \"http://localhost:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: \"http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: \"/var/log/{{ app_name }}/deployments.log\"\n        line: \"{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}\"\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF\n```\n\n### Infrastructure as Code Playbook\n```bash\ncat > playbooks/infrastructure-provisioning.yml <<EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: \"{{ inventory_hostname }}\"\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: \"{{ ansible_default_ipv4.address }} {{ inventory_hostname }}\"\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: \"{{ base_packages[ansible_os_family] | default(base_packages['Debian']) }}\"\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chrony' }}\"\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chronyd' }}\"\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: '0644'\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: \"https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz\"\n        dest: /tmp/node_exporter.tar.gz\n        mode: '0644'\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: '0755'\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'kernel.dmesg_restrict', value: '1' }\n        - { key: 'kernel.kptr_restrict', value: '2' }\n        - { key: 'kernel.yama.ptrace_scope', value: '1' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check\"\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF\n```\n\n## Advanced Role Development\n\n### Comprehensive NGINX Role\n```bash\n# Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat > roles/nginx/tasks/main.yml <<EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: \"{{ ansible_os_family }}.yml\"\n\n- name: Install NGINX\n  include_tasks: \"install-{{ ansible_os_family }}.yml\"\n\n- name: Create NGINX directories\n  file:\n    path: \"{{ item }}\"\n    state: directory\n    owner: root\n    group: root\n    mode: '0755'\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: 'nginx -t -c %s'\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    backup: yes\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    dest: \"/etc/nginx/sites-enabled/{{ item.name }}.conf\"\n    state: link\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: '0644'\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat > roles/nginx/tasks/install-Debian.yml <<EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: \"deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx\"\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat > roles/nginx/tasks/install-RedHat.yml <<EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: \"https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/\"\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat > roles/nginx/vars/main.yml <<EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - \"add_header X-Frame-Options SAMEORIGIN always;\"\n  - \"add_header X-Content-Type-Options nosniff always;\"\n  - \"add_header X-XSS-Protection '1; mode=block' always;\"\n  - \"add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains' always;\"\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: \"_\"\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat > roles/nginx/templates/nginx.conf.j2 <<EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                    '\\$status \\$body_bytes_sent \"\\$http_referer\" '\n                    '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat > roles/nginx/handlers/main.yml <<EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF\n```\n\n## Security and Compliance\n\n### Ansible Security Scanner Integration\n```bash\n# Create security scanning playbook\ncat > playbooks/security-scan.yml <<EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: \"/tmp/security-scans\"\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: \"{{ scan_results_dir }}\"\n        state: directory\n        mode: '0755'\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: \"https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip\"\n        dest: \"/tmp/cis-benchmark.zip\"\n        mode: '0644'\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh > {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: \"{{ lynis_result.stdout }}\"\n        dest: \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        mode: '0644'\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == \"Debian\"\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [\"RedHat\", \"Debian\"]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: \"{{ item }}\"\n        dest: \"./security-reports/{{ inventory_hostname }}/\"\n        flat: yes\n      loop:\n        - \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html\"\n        - \"{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json\"\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: \"{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt\"\n        mode: '0644'\nEOF\n```\n\n### Ansible AWX/Tower Integration\n```bash\n# Install Ansible AWX (open source)\ncat > playbooks/install-awx.yml <<EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: \"{{ vault_awx_admin_password }}\"\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: '0644'\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: \"http://localhost:80/api/v2/ping/\"\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: \"http://localhost:80/api/v2/organizations/\"\n        method: POST\n        user: \"{{ awx_admin_user }}\"\n        password: \"{{ awx_admin_password }}\"\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: \"Production\"\n          description: \"Production environment organization\"\n        status_code: [200, 201, 409]\nEOF\n```\n\n## Multi-Cloud Automation\n\n### AWS Infrastructure Automation\n```bash\ncat > playbooks/aws-infrastructure.yml <<EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: \"{{ aws_region | default('us-west-2') }}\"\n    vpc_cidr: \"{{ vpc_cidr | default('10.0.0.0/16') }}\"\n    environment: \"{{ environment | default('production') }}\"\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          \"tag:Name\": \"{{ environment }}-vpc\"\n        region: \"{{ aws_region }}\"\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: \"{{ environment }}-vpc\"\n        cidr_block: \"{{ vpc_cidr }}\"\n        region: \"{{ aws_region }}\"\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: \"{{ environment }}\"\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: \"{{ environment }}-web-sg\"\n        description: \"Security group for web servers\"\n        vpc_id: \"{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}\"\n        region: \"{{ aws_region }}\"\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: \"HTTP and HTTPS access\"\n          - proto: tcp\n            ports:\n              - 22\n            group_id: \"{{ environment }}-bastion-sg\"\n            rule_desc: \"SSH from bastion\"\n        tags:\n          Environment: \"{{ environment }}\"\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: \"{{ environment }}-web-{{ item }}\"\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: \"{{ ec2_key_name }}\"\n        vpc_subnet_id: \"{{ web_subnet_id }}\"\n        security_groups:\n          - \"{{ environment }}-web-sg\"\n        region: \"{{ aws_region }}\"\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: \"{{ environment }}\"\n          Role: webserver\n          Ansible: managed\n      loop: \"{{ range(1, web_server_count + 1) | list }}\"\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: \"{{ item.instances[0].tags.Name }}\"\n        hostname: \"{{ item.instances[0].public_ip_address }}\"\n        groups: webservers\n        ansible_ssh_private_key_file: \"~/.ssh/{{ ec2_key_name }}.pem\"\n        ansible_user: ec2-user\n      loop: \"{{ web_instances.results }}\"\n      changed_when: false\nEOF\n```\n\n### Kubernetes Cluster Management\n```bash\ncat > playbooks/k8s-cluster-management.yml <<EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: \"1.28.2\"\n    containerd_version: \"1.6.24\"\n    cni_version: \"1.3.0\"\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb >= 1700\n          - ansible_processor_cores >= 2\n        fail_msg: \"System doesn't meet minimum requirements\"\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: \"{{ item }}\"\n      loop: \"{{ groups['k8s_all'] }}\"\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: \"{{ containerd_version }}\"\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: \"{{ k8s_version }}\"\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: \"{{ ansible_env.HOME }}/.kube\"\n        state: directory\n        mode: '0755'\n\n    - name: Copy admin.conf to user's kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: \"{{ ansible_env.HOME }}/.kube/config\"\n        owner: \"{{ ansible_user }}\"\n        group: \"{{ ansible_user }}\"\n        mode: '0644'\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Join worker nodes to cluster\n      shell: \"{{ hostvars[groups['k8s_masters'][0]]['join_command'].stdout }}\"\n      when: inventory_hostname in groups['k8s_workers']\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n      register: cluster_status\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups['k8s_masters'][0]\nEOF\n```\n\n## Performance Optimization and Scaling\n\n### Parallel Execution Strategies\n```bash\n# Create high-performance playbook configuration\ncat > playbooks/high-performance-deployment.yml <<EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: \"30%\"   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk '{print $(NF-2)}' | sed 's/,//'\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float > 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: \"*\"\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: \"{{ item.src }}\"\n        dest: \"{{ item.dest }}\"\n        mode: \"{{ item.mode | default('0644') }}\"\n        backup: yes\n      loop:\n        - { src: \"nginx.conf.j2\", dest: \"/etc/nginx/nginx.conf\" }\n        - { src: \"mysql.cnf.j2\", dest: \"/etc/mysql/my.cnf\" }\n        - { src: \"redis.conf.j2\", dest: \"/etc/redis/redis.conf\" }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: \"{{ item.ansible_job_id }}\"\n      loop: \"{{ config_deployment.results }}\"\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: \"{{ item }}\"\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: \"restart all services\"\nEOF\n\n# Performance monitoring playbook\ncat > playbooks/performance-monitoring.yml <<EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: \"{{ monitoring_tools }}\"\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Enable system statistics collection\n      service:\n        name: \"{{ 'sysstat' if ansible_os_family == 'Debian' else 'sysstat' }}\"\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: '0755'\n\n    - name: Schedule performance monitoring\n      cron:\n        name: \"Performance monitoring\"\n        minute: \"*/5\"\n        job: \"/usr/local/bin/performance-monitor.sh\"\n        user: root\nEOF\n```\n\n## Testing and Validation\n\n### Molecule Testing Framework\n```bash\n# Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat > molecule/default/molecule.yml <<EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat > molecule/default/converge.yml <<EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: \"Include nginx role\"\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat > molecule/default/verify.yml <<EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: \"NGINX is not responding correctly\"\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test\n```\n\n### Ansible Lint and Security Scanning\n```bash\n# Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat > .ansible-lint <<EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: ['true', 'false', 'yes', 'no']\nEOF\n\n# Create security-focused playbook linting\ncat > .yamllint <<EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .\n```\n\n## Backup and Disaster Recovery\n\n### Comprehensive Backup Automation\n```bash\ncat > playbooks/backup-automation.yml <<EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: \"0 2 * * *\"\n      files: \"0 3 * * *\"\n      configs: \"0 4 * * *\"\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: \"{{ backup_root }}/{{ item }}\"\n        state: directory\n        mode: '0755'\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: '0755'\n      when: \"'dbservers' in group_names\"\n\n    - name: Schedule database backups\n      cron:\n        name: \"MySQL backup\"\n        minute: \"0\"\n        hour: \"2\"\n        job: \"/usr/local/bin/mysql-backup.sh\"\n        user: root\n      when: \"'dbservers' in group_names\"\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: '0755'\n\n    - name: Schedule file backups\n      cron:\n        name: \"File system backup\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/local/bin/file-backup.sh\"\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: \"{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz\"\n        mode: '0600'\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: \"{{ backup_root }}/\"\n        dest: \"backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/\"\n        delete: yes\n        rsync_opts:\n          - \"--exclude=*.tmp\"\n          - \"--compress\"\n          - \"--archive\"\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: \"{{ backup_root }}\"\n        age: \"{{ backup_retention_days }}d\"\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: \"{{ item.path }}\"\n        state: absent\n      loop: \"{{ old_backups.files }}\"\nEOF\n```\n\n## Verification and Monitoring\n\n### Cross-Platform System Verification\n```bash\n# Create comprehensive verification playbook\ncat > playbooks/system-verification.yml <<EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - \"ansible_facts.services[item.service + '.service'].state == 'running'\"\n        fail_msg: \"Service {{ item.service }} is not running\"\n        success_msg: \"Service {{ item.service }} is healthy\"\n      loop: \"{{ health_checks }}\"\n      when: \"item.service + '.service' in ansible_facts.services\"\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: \"{{ item.host }}\"\n        port: \"{{ item.port }}\"\n        timeout: 5\n      loop:\n        - { host: \"8.8.8.8\", port: 53 }\n        - { host: \"1.1.1.1\", port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk '$5 > \"85%\" {print $0}'\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != \"\"\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}'\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: \"WARNING: Memory usage is {{ memory_usage.stdout }}%\"\n      when: memory_usage.stdout | int > 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep \"Failed password\" /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw >/dev/null 2>&1; then\n          ufw status\n        elif command -v firewall-cmd >/dev/null 2>&1; then\n          firewall-cmd --state\n        else\n          echo \"No supported firewall found\"\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        mode: '0644'\n\n    - name: Fetch health reports\n      fetch:\n        src: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        dest: \"./reports/\"\n        flat: yes\nEOF\n```\n\n### Continuous Compliance Monitoring\n```bash\ncat > playbooks/compliance-monitoring.yml <<EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: \"{{ 'auditd' if ansible_os_family == 'RedHat' else 'auditd' }}\"\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo \"CIS-CAT not installed, skipping\"\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check | mail -s 'AIDE Report' security@example.com\"\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF\n```\n\n## CI/CD Integration\n\n### Jenkins Pipeline Integration\n```bash\n# Create Jenkinsfile for Ansible automation\ncat > Jenkinsfile <<EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = 'ansible.cfg'\n        ANSIBLE_HOST_KEY_CHECKING = 'False'\n    }\n    \n    stages {\n        stage('Lint') {\n            steps {\n                sh 'ansible-lint playbooks/'\n                sh 'yamllint .'\n            }\n        }\n        \n        stage('Syntax Check') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --syntax-check'\n            }\n        }\n        \n        stage('Dry Run') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --check --diff'\n            }\n        }\n        \n        stage('Deploy to Staging') {\n            when {\n                branch 'develop'\n            }\n            steps {\n                sh 'ansible-playbook -i inventories/staging playbooks/site.yml'\n            }\n        }\n        \n        stage('Deploy to Production') {\n            when {\n                branch 'main'\n            }\n            steps {\n                input 'Deploy to Production?'\n                sh 'ansible-playbook -i inventories/production playbooks/site.yml'\n            }\n        }\n        \n        stage('Verify Deployment') {\n            steps {\n                sh 'ansible-playbook playbooks/system-verification.yml'\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: 'logs/*.log', allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: 'reports',\n                reportFiles: '*.html',\n                reportName: 'Ansible Report'\n            ])\n        }\n        failure {\n            emailext (\n                subject: \"Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Something is wrong with ${env.BUILD_URL}\",\n                to: \"${env.DEFAULT_RECIPIENTS}\"\n            )\n        }\n    }\n}\nEOF\n```\n\n### GitLab CI Integration\n```bash\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: \"False\"\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"develop\"'\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a \"uptime\"\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=\"debug=true\" --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a \"path=/tmp/test state=touch\" --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=\"specific task name\"\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a \"var=hostvars\"\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name \"*.yml\" -exec ansible-playbook {} --syntax-check \\;\n```\n\n### Advanced Debugging\n```bash\n# Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=\"profile_tasks_sort_order=none\"\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=\"ansible_python_interpreter=/usr/bin/python3\"\n\n# Network debugging\nansible all -m command -a \"ss -tulpn\"\nansible all -m command -a \"netstat -rn\"\n\n# Process debugging\nansible all -m command -a \"ps aux --sort=-%mem | head -10\"\n\n# Disk usage analysis\nansible all -m command -a \"df -h\"\nansible all -m command -a \"du -sh /var/log/*\"\n\n# Service debugging\nansible all -m systemd -a \"name=nginx\" --become\nansible all -m command -a \"systemctl status nginx\" --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=\"debug_vars=true\" --tags debug_vars\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.ansible.com/)\n- [Ansible Galaxy](https://galaxy.ansible.com/)\n- [Best Practices Guide](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html)\n- [Security Best Practices](https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices)\n- [Ansible Molecule Testing](https://molecule.readthedocs.io/)\n- [Community Collections](https://docs.ansible.com/ansible/latest/collections/index.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"ansible-installation-guide\" class=\"mobile-header\">Ansible Installation Guide</h1>\n<p class=\"mobile-paragraph\">Agentless automation platform for configuration management, application deployment, and task automation across multiple systems. Industry standard for infrastructure automation with enterprise-grade security.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux control machine (any modern distribution)</li>\n<li class=\"mobile-list-item\">Python 3.8+ on control machine</li>\n<li class=\"mobile-list-item\">SSH access to target hosts</li>\n<li class=\"mobile-list-item\">Python 2.7+ or 3.5+ on target hosts</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for large infrastructures</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-pip-latest-version\" class=\"mobile-header\">Using pip (Latest Version)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho &#039;source ~/ansible-venv/bin/activate&#039; &gt;&gt; ~/.bashrc\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest &quot;$@&quot;\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho &#039;alias ansible=&quot;ansible-docker ansible&quot;&#039; &gt;&gt; ~/.bashrc\necho &#039;alias ansible-playbook=&quot;ansible-docker ansible-playbook&quot;&#039; &gt;&gt; ~/.bashrc</code></pre>\n      </div>\n    </div>\n<h2 id=\"project-structure-and-configuration\" class=\"mobile-header\">Project Structure and Configuration</h2>\n<h3 id=\"professional-project-structure\" class=\"mobile-header\">Professional Project Structure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat &gt; ansible.cfg &lt;&lt;EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-inventory-management\" class=\"mobile-header\">Advanced Inventory Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production inventory with groups and variables\ncat &gt; inventories/production/hosts.yml &lt;&lt;EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\n        mysql_replication_user: &quot;{{ vault_mysql_replication_user }}&quot;\n        mysql_replication_password: &quot;{{ vault_mysql_replication_password }}&quot;\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: &quot;{{ vault_haproxy_stats_password }}&quot;\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: &quot;0 2 * * *&quot;\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: &quot;0 1 * * *&quot;\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat &gt; inventories/production/aws_ec2.yml &lt;&lt;EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: &quot;&#039;web&#039; in tags.Role&quot;\n  databases: &quot;&#039;db&#039; in tags.Role&quot;\n  loadbalancers: &quot;&#039;lb&#039; in tags.Role&quot;\n  \n  # Group by environment\n  production: &quot;tags.Environment == &#039;production&#039;&quot;\n  staging: &quot;tags.Environment == &#039;staging&#039;&quot;\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == &quot;us-west-2a&quot;\n  us_west_2b: ec2_placement_availability_zone == &quot;us-west-2b&quot;\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-vault-security\" class=\"mobile-header\">Ansible Vault Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create strong vault password\nopenssl rand -base64 32 &gt; ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat &gt; group_vars/all/vars.yml &lt;&lt;EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\ngrafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: &quot;{{ vault_ssl_private_key }}&quot;\n\n# Security settings\nansible_ssh_common_args: &#039;-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts&#039;\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"comprehensive-playbooks\" class=\"mobile-header\">Comprehensive Playbooks</h2>\n<h3 id=\"system-hardening-playbook\" class=\"mobile-header\">System Hardening Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/system-hardening.yml &lt;&lt;EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [&quot;Debian&quot;, &quot;RedHat&quot;]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: &quot;*&quot;\n        state: latest\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: &quot;{{ security_packages }}&quot;\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: &#039;ansible ALL=(ALL) NOPASSWD:ALL&#039;\n        create: yes\n        mode: &#039;0440&#039;\n        validate: &#039;visudo -cf %s&#039;\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: &quot;{{ item.regexp }}&quot;\n        line: &quot;{{ item.line }}&quot;\n        backup: yes\n      loop:\n        - { regexp: &#039;^#?PermitRootLogin&#039;, line: &#039;PermitRootLogin no&#039; }\n        - { regexp: &#039;^#?PasswordAuthentication&#039;, line: &#039;PasswordAuthentication no&#039; }\n        - { regexp: &#039;^#?X11Forwarding&#039;, line: &#039;X11Forwarding no&#039; }\n        - { regexp: &#039;^#?MaxAuthTries&#039;, line: &#039;MaxAuthTries 3&#039; }\n        - { regexp: &#039;^#?ClientAliveInterval&#039;, line: &#039;ClientAliveInterval 300&#039; }\n        - { regexp: &#039;^#?ClientAliveCountMax&#039;, line: &#039;ClientAliveCountMax 0&#039; }\n        - { regexp: &#039;^#?Protocol&#039;, line: &#039;Protocol 2&#039; }\n        - { regexp: &#039;^#?LogLevel&#039;, line: &#039;LogLevel VERBOSE&#039; }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: &#039;SSH access&#039;\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: &quot;{{ item }}&quot;\n        enabled: no\n        state: stopped\n      loop: &quot;{{ disabled_services }}&quot;\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        mode: &quot;{{ item.mode }}&quot;\n        owner: root\n        group: root\n      loop:\n        - { path: &#039;/etc/passwd&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/shadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/group&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/gshadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/ssh/sshd_config&#039;, mode: &#039;0600&#039; }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;net.ipv4.ip_forward&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.randomize_va_space&#039;, value: &#039;2&#039; }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: &quot;{{ &#039;ssh&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sshd&#039; }}&quot;\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-deployment-playbook\" class=\"mobile-header\">Application Deployment Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/web-application-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: &quot;25%&quot;  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: &quot;{{ app_version | default(&#039;latest&#039;) }}&quot;\n    app_port: 3000\n    nginx_workers: &quot;{{ ansible_processor_cores }}&quot;\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: &quot;Server is in maintenance mode&quot;\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: &quot;{{ app_name }}&quot;\n        system: yes\n        shell: /bin/false\n        home: &quot;/opt/{{ app_name }}&quot;\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: &quot;{{ item }}&quot;\n        state: directory\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0755&#039;\n      loop:\n        - &quot;/opt/{{ app_name }}&quot;\n        - &quot;/opt/{{ app_name }}/releases&quot;\n        - &quot;/opt/{{ app_name }}/shared&quot;\n        - &quot;/var/log/{{ app_name }}&quot;\n\n    - name: Download application release\n      get_url:\n        url: &quot;https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        mode: &#039;0644&#039;\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/opt/{{ app_name }}/releases/&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        remote_src: yes\n        creates: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n\n    - name: Create symlink to current release\n      file:\n        src: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n        dest: &quot;/opt/{{ app_name }}/current&quot;\n        state: link\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: &quot;templates/{{ app_name }}.conf.j2&quot;\n        dest: &quot;/opt/{{ app_name }}/shared/{{ app_name }}.conf&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0640&#039;\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: &quot;templates/{{ app_name }}.service.j2&quot;\n        dest: &quot;/etc/systemd/system/{{ app_name }}.service&quot;\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: &quot;http://localhost:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: &quot;http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: &quot;/var/log/{{ app_name }}/deployments.log&quot;\n        line: &quot;{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}&quot;\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"infrastructure-as-code-playbook\" class=\"mobile-header\">Infrastructure as Code Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/infrastructure-provisioning.yml &lt;&lt;EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: &quot;{{ inventory_hostname }}&quot;\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: &quot;{{ ansible_default_ipv4.address }} {{ inventory_hostname }}&quot;\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: &quot;{{ base_packages[ansible_os_family] | default(base_packages[&#039;Debian&#039;]) }}&quot;\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chrony&#039; }}&quot;\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chronyd&#039; }}&quot;\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: &#039;0644&#039;\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: &quot;https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz&quot;\n        dest: /tmp/node_exporter.tar.gz\n        mode: &#039;0644&#039;\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;kernel.dmesg_restrict&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.kptr_restrict&#039;, value: &#039;2&#039; }\n        - { key: &#039;kernel.yama.ptrace_scope&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check&quot;\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-role-development\" class=\"mobile-header\">Advanced Role Development</h2>\n<h3 id=\"comprehensive-nginx-role\" class=\"mobile-header\">Comprehensive NGINX Role</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat &gt; roles/nginx/tasks/main.yml &lt;&lt;EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: &quot;{{ ansible_os_family }}.yml&quot;\n\n- name: Install NGINX\n  include_tasks: &quot;install-{{ ansible_os_family }}.yml&quot;\n\n- name: Create NGINX directories\n  file:\n    path: &quot;{{ item }}&quot;\n    state: directory\n    owner: root\n    group: root\n    mode: &#039;0755&#039;\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: &#039;nginx -t -c %s&#039;\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    backup: yes\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    dest: &quot;/etc/nginx/sites-enabled/{{ item.name }}.conf&quot;\n    state: link\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: &#039;0644&#039;\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat &gt; roles/nginx/tasks/install-Debian.yml &lt;&lt;EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: &quot;deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx&quot;\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat &gt; roles/nginx/tasks/install-RedHat.yml &lt;&lt;EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: &quot;https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/&quot;\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat &gt; roles/nginx/vars/main.yml &lt;&lt;EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - &quot;add_header X-Frame-Options SAMEORIGIN always;&quot;\n  - &quot;add_header X-Content-Type-Options nosniff always;&quot;\n  - &quot;add_header X-XSS-Protection &#039;1; mode=block&#039; always;&quot;\n  - &quot;add_header Strict-Transport-Security &#039;max-age=31536000; includeSubDomains&#039; always;&quot;\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: &quot;_&quot;\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat &gt; roles/nginx/templates/nginx.conf.j2 &lt;&lt;EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main &#039;\\$remote_addr - \\$remote_user [\\$time_local] &quot;\\$request&quot; &#039;\n                    &#039;\\$status \\$body_bytes_sent &quot;\\$http_referer&quot; &#039;\n                    &#039;&quot;\\$http_user_agent&quot; &quot;\\$http_x_forwarded_for&quot;&#039;;\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat &gt; roles/nginx/handlers/main.yml &lt;&lt;EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-and-compliance\" class=\"mobile-header\">Security and Compliance</h2>\n<h3 id=\"ansible-security-scanner-integration\" class=\"mobile-header\">Ansible Security Scanner Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security scanning playbook\ncat &gt; playbooks/security-scan.yml &lt;&lt;EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: &quot;/tmp/security-scans&quot;\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: &quot;{{ scan_results_dir }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: &quot;https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip&quot;\n        dest: &quot;/tmp/cis-benchmark.zip&quot;\n        mode: &#039;0644&#039;\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh &gt; {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: &quot;{{ lynis_result.stdout }}&quot;\n        dest: &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [&quot;RedHat&quot;, &quot;Debian&quot;]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: &quot;{{ item }}&quot;\n        dest: &quot;./security-reports/{{ inventory_hostname }}/&quot;\n        flat: yes\n      loop:\n        - &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html&quot;\n        - &quot;{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json&quot;\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: &quot;{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-awxtower-integration\" class=\"mobile-header\">Ansible AWX/Tower Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible AWX (open source)\ncat &gt; playbooks/install-awx.yml &lt;&lt;EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: &quot;{{ vault_awx_admin_password }}&quot;\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: &#039;0644&#039;\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: &quot;http://localhost:80/api/v2/ping/&quot;\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: &quot;http://localhost:80/api/v2/organizations/&quot;\n        method: POST\n        user: &quot;{{ awx_admin_user }}&quot;\n        password: &quot;{{ awx_admin_password }}&quot;\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: &quot;Production&quot;\n          description: &quot;Production environment organization&quot;\n        status_code: [200, 201, 409]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"multi-cloud-automation\" class=\"mobile-header\">Multi-Cloud Automation</h2>\n<h3 id=\"aws-infrastructure-automation\" class=\"mobile-header\">AWS Infrastructure Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/aws-infrastructure.yml &lt;&lt;EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: &quot;{{ aws_region | default(&#039;us-west-2&#039;) }}&quot;\n    vpc_cidr: &quot;{{ vpc_cidr | default(&#039;10.0.0.0/16&#039;) }}&quot;\n    environment: &quot;{{ environment | default(&#039;production&#039;) }}&quot;\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          &quot;tag:Name&quot;: &quot;{{ environment }}-vpc&quot;\n        region: &quot;{{ aws_region }}&quot;\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: &quot;{{ environment }}-vpc&quot;\n        cidr_block: &quot;{{ vpc_cidr }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: &quot;{{ environment }}-web-sg&quot;\n        description: &quot;Security group for web servers&quot;\n        vpc_id: &quot;{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: &quot;HTTP and HTTPS access&quot;\n          - proto: tcp\n            ports:\n              - 22\n            group_id: &quot;{{ environment }}-bastion-sg&quot;\n            rule_desc: &quot;SSH from bastion&quot;\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: &quot;{{ environment }}-web-{{ item }}&quot;\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: &quot;{{ ec2_key_name }}&quot;\n        vpc_subnet_id: &quot;{{ web_subnet_id }}&quot;\n        security_groups:\n          - &quot;{{ environment }}-web-sg&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          Role: webserver\n          Ansible: managed\n      loop: &quot;{{ range(1, web_server_count + 1) | list }}&quot;\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: &quot;{{ item.instances[0].tags.Name }}&quot;\n        hostname: &quot;{{ item.instances[0].public_ip_address }}&quot;\n        groups: webservers\n        ansible_ssh_private_key_file: &quot;~/.ssh/{{ ec2_key_name }}.pem&quot;\n        ansible_user: ec2-user\n      loop: &quot;{{ web_instances.results }}&quot;\n      changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-cluster-management\" class=\"mobile-header\">Kubernetes Cluster Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/k8s-cluster-management.yml &lt;&lt;EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: &quot;1.28.2&quot;\n    containerd_version: &quot;1.6.24&quot;\n    cni_version: &quot;1.3.0&quot;\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb &gt;= 1700\n          - ansible_processor_cores &gt;= 2\n        fail_msg: &quot;System doesn&#039;t meet minimum requirements&quot;\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: &quot;{{ item }}&quot;\n      loop: &quot;{{ groups[&#039;k8s_all&#039;] }}&quot;\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: &quot;{{ containerd_version }}&quot;\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: &quot;{{ k8s_version }}&quot;\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: &quot;{{ ansible_env.HOME }}/.kube&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    - name: Copy admin.conf to user&#039;s kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n        owner: &quot;{{ ansible_user }}&quot;\n        group: &quot;{{ ansible_user }}&quot;\n        mode: &#039;0644&#039;\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Join worker nodes to cluster\n      shell: &quot;{{ hostvars[groups[&#039;k8s_masters&#039;][0]][&#039;join_command&#039;].stdout }}&quot;\n      when: inventory_hostname in groups[&#039;k8s_workers&#039;]\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n      register: cluster_status\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization-and-scaling\" class=\"mobile-header\">Performance Optimization and Scaling</h2>\n<h3 id=\"parallel-execution-strategies\" class=\"mobile-header\">Parallel Execution Strategies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create high-performance playbook configuration\ncat &gt; playbooks/high-performance-deployment.yml &lt;&lt;EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: &quot;30%&quot;   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk &#039;{print $(NF-2)}&#039; | sed &#039;s/,//&#039;\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float &gt; 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: &quot;*&quot;\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: &quot;{{ item.src }}&quot;\n        dest: &quot;{{ item.dest }}&quot;\n        mode: &quot;{{ item.mode | default(&#039;0644&#039;) }}&quot;\n        backup: yes\n      loop:\n        - { src: &quot;nginx.conf.j2&quot;, dest: &quot;/etc/nginx/nginx.conf&quot; }\n        - { src: &quot;mysql.cnf.j2&quot;, dest: &quot;/etc/mysql/my.cnf&quot; }\n        - { src: &quot;redis.conf.j2&quot;, dest: &quot;/etc/redis/redis.conf&quot; }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: &quot;{{ item.ansible_job_id }}&quot;\n      loop: &quot;{{ config_deployment.results }}&quot;\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: &quot;{{ item }}&quot;\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: &quot;restart all services&quot;\nEOF\n\n# Performance monitoring playbook\ncat &gt; playbooks/performance-monitoring.yml &lt;&lt;EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: &quot;{{ monitoring_tools }}&quot;\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Enable system statistics collection\n      service:\n        name: &quot;{{ &#039;sysstat&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sysstat&#039; }}&quot;\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule performance monitoring\n      cron:\n        name: &quot;Performance monitoring&quot;\n        minute: &quot;*/5&quot;\n        job: &quot;/usr/local/bin/performance-monitor.sh&quot;\n        user: root\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"testing-and-validation\" class=\"mobile-header\">Testing and Validation</h2>\n<h3 id=\"molecule-testing-framework\" class=\"mobile-header\">Molecule Testing Framework</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat &gt; molecule/default/molecule.yml &lt;&lt;EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat &gt; molecule/default/converge.yml &lt;&lt;EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: &quot;Include nginx role&quot;\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat &gt; molecule/default/verify.yml &lt;&lt;EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: &quot;NGINX is not responding correctly&quot;\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-lint-and-security-scanning\" class=\"mobile-header\">Ansible Lint and Security Scanning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat &gt; .ansible-lint &lt;&lt;EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: [&#039;true&#039;, &#039;false&#039;, &#039;yes&#039;, &#039;no&#039;]\nEOF\n\n# Create security-focused playbook linting\ncat &gt; .yamllint &lt;&lt;EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"comprehensive-backup-automation\" class=\"mobile-header\">Comprehensive Backup Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/backup-automation.yml &lt;&lt;EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: &quot;0 2 * * *&quot;\n      files: &quot;0 3 * * *&quot;\n      configs: &quot;0 4 * * *&quot;\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: &quot;{{ backup_root }}/{{ item }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: &#039;0755&#039;\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    - name: Schedule database backups\n      cron:\n        name: &quot;MySQL backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;2&quot;\n        job: &quot;/usr/local/bin/mysql-backup.sh&quot;\n        user: root\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule file backups\n      cron:\n        name: &quot;File system backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/local/bin/file-backup.sh&quot;\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: &quot;{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz&quot;\n        mode: &#039;0600&#039;\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: &quot;{{ backup_root }}/&quot;\n        dest: &quot;backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/&quot;\n        delete: yes\n        rsync_opts:\n          - &quot;--exclude=*.tmp&quot;\n          - &quot;--compress&quot;\n          - &quot;--archive&quot;\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: &quot;{{ backup_root }}&quot;\n        age: &quot;{{ backup_retention_days }}d&quot;\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        state: absent\n      loop: &quot;{{ old_backups.files }}&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-monitoring\" class=\"mobile-header\">Verification and Monitoring</h2>\n<h3 id=\"cross-platform-system-verification\" class=\"mobile-header\">Cross-Platform System Verification</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive verification playbook\ncat &gt; playbooks/system-verification.yml &lt;&lt;EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - &quot;ansible_facts.services[item.service + &#039;.service&#039;].state == &#039;running&#039;&quot;\n        fail_msg: &quot;Service {{ item.service }} is not running&quot;\n        success_msg: &quot;Service {{ item.service }} is healthy&quot;\n      loop: &quot;{{ health_checks }}&quot;\n      when: &quot;item.service + &#039;.service&#039; in ansible_facts.services&quot;\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: &quot;{{ item.host }}&quot;\n        port: &quot;{{ item.port }}&quot;\n        timeout: 5\n      loop:\n        - { host: &quot;8.8.8.8&quot;, port: 53 }\n        - { host: &quot;1.1.1.1&quot;, port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk &#039;$5 &gt; &quot;85%&quot; {print $0}&#039;\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != &quot;&quot;\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk &#039;{printf &quot;%.0f&quot;, $3/$2 * 100.0}&#039;\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: &quot;WARNING: Memory usage is {{ memory_usage.stdout }}%&quot;\n      when: memory_usage.stdout | int &gt; 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep &quot;Failed password&quot; /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw &gt;/dev/null 2&gt;&amp;1; then\n          ufw status\n        elif command -v firewall-cmd &gt;/dev/null 2&gt;&amp;1; then\n          firewall-cmd --state\n        else\n          echo &quot;No supported firewall found&quot;\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    - name: Fetch health reports\n      fetch:\n        src: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        dest: &quot;./reports/&quot;\n        flat: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"continuous-compliance-monitoring\" class=\"mobile-header\">Continuous Compliance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/compliance-monitoring.yml &lt;&lt;EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: &quot;{{ &#039;auditd&#039; if ansible_os_family == &#039;RedHat&#039; else &#039;auditd&#039; }}&quot;\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo &quot;CIS-CAT not installed, skipping&quot;\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check | mail -s &#039;AIDE Report&#039; security@example.com&quot;\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-integration\" class=\"mobile-header\">CI/CD Integration</h2>\n<h3 id=\"jenkins-pipeline-integration\" class=\"mobile-header\">Jenkins Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Jenkinsfile for Ansible automation\ncat &gt; Jenkinsfile &lt;&lt;EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = &#039;ansible.cfg&#039;\n        ANSIBLE_HOST_KEY_CHECKING = &#039;False&#039;\n    }\n    \n    stages {\n        stage(&#039;Lint&#039;) {\n            steps {\n                sh &#039;ansible-lint playbooks/&#039;\n                sh &#039;yamllint .&#039;\n            }\n        }\n        \n        stage(&#039;Syntax Check&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --syntax-check&#039;\n            }\n        }\n        \n        stage(&#039;Dry Run&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --check --diff&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Staging&#039;) {\n            when {\n                branch &#039;develop&#039;\n            }\n            steps {\n                sh &#039;ansible-playbook -i inventories/staging playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Production&#039;) {\n            when {\n                branch &#039;main&#039;\n            }\n            steps {\n                input &#039;Deploy to Production?&#039;\n                sh &#039;ansible-playbook -i inventories/production playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Verify Deployment&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/system-verification.yml&#039;\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: &#039;logs/*.log&#039;, allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: &#039;reports&#039;,\n                reportFiles: &#039;*.html&#039;,\n                reportName: &#039;Ansible Report&#039;\n            ])\n        }\n        failure {\n            emailext (\n                subject: &quot;Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Something is wrong with ${env.BUILD_URL}&quot;,\n                to: &quot;${env.DEFAULT_RECIPIENTS}&quot;\n            )\n        }\n    }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci-integration\" class=\"mobile-header\">GitLab CI Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: &quot;False&quot;\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == &quot;develop&quot;&#039;\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a &quot;uptime&quot;\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug=true&quot; --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a &quot;path=/tmp/test state=touch&quot; --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=&quot;specific task name&quot;\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a &quot;var=hostvars&quot;\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name &quot;*.yml&quot; -exec ansible-playbook {} --syntax-check \\;</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=&quot;profile_tasks_sort_order=none&quot;\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=&quot;ansible_python_interpreter=/usr/bin/python3&quot;\n\n# Network debugging\nansible all -m command -a &quot;ss -tulpn&quot;\nansible all -m command -a &quot;netstat -rn&quot;\n\n# Process debugging\nansible all -m command -a &quot;ps aux --sort=-%mem | head -10&quot;\n\n# Disk usage analysis\nansible all -m command -a &quot;df -h&quot;\nansible all -m command -a &quot;du -sh /var/log/*&quot;\n\n# Service debugging\nansible all -m systemd -a &quot;name=nginx&quot; --become\nansible all -m command -a &quot;systemctl status nginx&quot; --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug_vars=true&quot; --tags debug_vars</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://galaxy.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Galaxy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://molecule.readthedocs.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Molecule Testing</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/collections/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Collections</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"31 min","wordCount":6191,"lastBuilt":"2025-09-14T01:30:36.735Z"},{"name":"apache","displayName":"Apache","slug":"apache","description":"Repo for apache","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/apache","updatedAt":"2025-09-14T01:29:40Z","createdAt":"2025-09-08T03:04:47Z","readmeRaw":"# Apache HTTP Server Installation Guide\n\nApache HTTP Server is a free and open-source cross-platform web server software developed and maintained by the Apache Software Foundation. Originally based on the NCSA HTTPd server, Apache has been the most popular web server on the Internet since April 1996, serving over 40% of active websites. It serves as a FOSS alternative to commercial web servers like Microsoft IIS, NGINX Plus, or F5 BIG-IP, offering enterprise-grade performance, security, and flexibility without licensing costs.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for production)\n  - RAM: 512MB minimum (2GB+ recommended for production)\n  - Storage: 500MB for installation (additional space for websites and logs)\n  - Network: Stable connectivity for serving web requests\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 2.6.32+\n  - macOS: 10.12+ (Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (HTTP)\n  - Port 443 (HTTPS)\n  - Additional ports for virtual hosts if needed\n- **Dependencies**:\n  - OpenSSL for SSL/TLS support\n  - PCRE for regular expressions\n  - APR (Apache Portable Runtime) libraries\n  - Zlib for compression\n- **System Access**: root or sudo privileges for installation\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install Apache (httpd) and utilities\nsudo dnf install -y httpd httpd-tools mod_ssl mod_security\n\n# RHEL/CentOS 7 (using yum)\nsudo yum install -y epel-release\nsudo yum install -y httpd httpd-tools mod_ssl mod_security\n\n# Install additional modules\nsudo dnf install -y httpd-devel httpd-manual\n\n# Create necessary directories\nsudo mkdir -p /etc/httpd/conf.d\nsudo mkdir -p /var/log/httpd\nsudo mkdir -p /var/www/html\n\n# Set proper permissions\nsudo chown -R apache:apache /var/www/html\nsudo chown -R apache:apache /var/log/httpd\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\nhttpd -v\nsudo systemctl status httpd\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package list\nsudo apt update\n\n# Install Apache and essential modules\nsudo apt install -y apache2 apache2-utils apache2-dev libapache2-mod-security2\n\n# Install additional tools\nsudo apt install -y apache2-doc ssl-cert\n\n# Enable essential modules\nsudo a2enmod rewrite ssl headers deflate expires security2 http2\n\n# Create necessary directories\nsudo mkdir -p /var/www/html\nsudo mkdir -p /var/log/apache2\n\n# Set proper permissions\nsudo chown -R www-data:www-data /var/www/html\nsudo chown -R www-data:www-data /var/log/apache2\n\n# Enable and start service\nsudo systemctl enable --now apache2\n\n# Verify installation\napache2ctl -v\nsudo systemctl status apache2\n```\n\n### Arch Linux\n\n```bash\n# Install Apache\nsudo pacman -S apache\n\n# Install additional modules\nsudo pacman -S apache-mod-security apache-mod-wsgi\n\n# Create apache user if not exists\nsudo useradd -r -d /srv/http -s /sbin/nologin -c \"Apache HTTP Server\" apache\n\n# Create necessary directories\nsudo mkdir -p /etc/httpd/conf.d\nsudo mkdir -p /var/log/httpd\nsudo mkdir -p /srv/http\n\n# Set proper permissions\nsudo chown -R apache:apache /srv/http\nsudo chown -R apache:apache /var/log/httpd\n\n# Edit main configuration\nsudo sed -i 's/#ServerName www.example.com:80/ServerName localhost:80/' /etc/httpd/conf/httpd.conf\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\nhttpd -v\nsudo systemctl status httpd\n```\n\n### Alpine Linux\n\n```bash\n# Install Apache\napk add --no-cache apache2 apache2-ssl apache2-utils\n\n# Install additional modules\napk add --no-cache apache2-mod-wsgi apache2-mod-fcgid\n\n# Create apache user if not exists\nadduser -D -H -s /sbin/nologin -g apache apache\n\n# Create necessary directories\nmkdir -p /var/www/localhost/htdocs\nmkdir -p /var/log/apache2\nmkdir -p /run/apache2\n\n# Set proper permissions\nchown -R apache:apache /var/www/localhost/htdocs\nchown -R apache:apache /var/log/apache2\nchown -R apache:apache /run/apache2\n\n# Configure basic settings\nsed -i 's/#ServerName www.example.com:80/ServerName localhost:80/' /etc/apache2/httpd.conf\n\n# Enable and start service\nrc-update add apache2 default\nrc-service apache2 start\n\n# Verify installation\nhttpd -v\nrc-service apache2 status\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y apache2 apache2-mod_ssl apache2-utils\n\n# Install additional modules\nsudo zypper install -y apache2-mod_security2 apache2-mod_wsgi\n\n# SLES 15\n# Enable web and scripting module\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\nsudo zypper install -y apache2 apache2-mod_ssl\n\n# Create necessary directories\nsudo mkdir -p /etc/apache2/conf.d\nsudo mkdir -p /var/log/apache2\nsudo mkdir -p /srv/www/htdocs\n\n# Set proper permissions\nsudo chown -R wwwrun:www /srv/www/htdocs\nsudo chown -R wwwrun:www /var/log/apache2\n\n# Enable modules\nsudo a2enmod ssl\nsudo a2enmod rewrite\nsudo a2enmod headers\n\n# Enable and start service\nsudo systemctl enable --now apache2\n\n# Verify installation\napache2ctl -v\nsudo systemctl status apache2\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install httpd\n\n# Start as service\nbrew services start httpd\n\n# Or run manually\nsudo /usr/local/bin/httpd -D FOREGROUND\n\n# Configuration location: /usr/local/etc/httpd/httpd.conf\n# Alternative: /opt/homebrew/etc/httpd/httpd.conf (Apple Silicon)\n\n# Create necessary directories\nsudo mkdir -p /usr/local/var/log/httpd\nsudo mkdir -p /usr/local/var/www\n\n# Set basic configuration\nsed -i '' 's/#ServerName www.example.com:8080/ServerName localhost:8080/' /usr/local/etc/httpd/httpd.conf\n\n# Verify installation\n/usr/local/bin/httpd -v\nbrew services list | grep httpd\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install apache24\n\n# Using ports\ncd /usr/ports/www/apache24\nmake install clean\n\n# Enable in rc.conf\necho 'apache24_enable=\"YES\"' >> /etc/rc.conf\n\n# Create necessary directories\nmkdir -p /var/log/httpd\nmkdir -p /usr/local/www/apache24/data\n\n# Set proper permissions\nchown -R www:www /usr/local/www/apache24/data\nchown -R www:www /var/log/httpd\n\n# Start service\nservice apache24 start\n\n# Verify installation\n/usr/local/sbin/httpd -v\nservice apache24 status\n\n# Configuration location: /usr/local/etc/apache24/httpd.conf\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install apache-httpd\n\n# Method 2: Using Scoop\nscoop bucket add extras\nscoop install apache\n\n# Method 3: Manual installation from Apache Lounge\n# Download from https://www.apachelounge.com/download/\n# Extract to C:\\Apache24\n\n# Install as Windows service\nC:\\Apache24\\bin\\httpd.exe -k install -n Apache24\n\n# Start service\nStart-Service Apache24\n\n# Or using net command\nnet start Apache24\n\n# Configuration location: C:\\Apache24\\conf\\httpd.conf\n# Document root: C:\\Apache24\\htdocs\n\n# Verify installation\nC:\\Apache24\\bin\\httpd.exe -v\nGet-Service Apache24\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create apache user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/www -s /sbin/nologin -c \"Apache HTTP Server\" apache\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/httpd/conf/httpd.conf`\n- Debian/Ubuntu: `/etc/apache2/apache2.conf`\n- Arch Linux: `/etc/httpd/conf/httpd.conf`\n- Alpine Linux: `/etc/apache2/httpd.conf`\n- openSUSE/SLES: `/etc/apache2/httpd.conf`\n- macOS: `/usr/local/etc/httpd/httpd.conf`\n- FreeBSD: `/usr/local/etc/apache24/httpd.conf`\n- Windows: `C:\\Apache24\\conf\\httpd.conf`\n\n3. **Essential settings to change**:\n\n```apache\n# Basic security settings\nServerTokens Prod\nServerSignature Off\n\n# Set server name\nServerName localhost:80\n\n# Basic security modules\nLoadModule headers_module modules/mod_headers.so\nLoadModule rewrite_module modules/mod_rewrite.so\nLoadModule ssl_module modules/mod_ssl.so\n\n# Security headers\nHeader always set X-Frame-Options \"SAMEORIGIN\"\nHeader always set X-Content-Type-Options \"nosniff\"\nHeader always set X-XSS-Protection \"1; mode=block\"\n\n# Hide .htaccess files\n<FilesMatch \"^\\.ht\">\n    Require all denied\n</FilesMatch>\n\n# Disable directory browsing by default\nOptions -Indexes\n\n# Basic virtual host\n<VirtualHost *:80>\n    ServerName localhost\n    DocumentRoot /var/www/html\n    ErrorLog logs/error_log\n    CustomLog logs/access_log common\n</VirtualHost>\n```\n\n### Testing Initial Setup\n\n```bash\n# Test configuration syntax\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS/Arch\n\n# Check loaded modules\napache2ctl -M  # Debian/Ubuntu\nhttpd -M       # RHEL/CentOS/Arch\n\n# Test HTTP response\ncurl -I http://localhost\n\n# Check if Apache is listening\nsudo ss -tlnp | grep :80\nsudo netstat -tlnp | grep :80\n\n# View virtual host configuration\napache2ctl -S  # Debian/Ubuntu\nhttpd -S       # RHEL/CentOS/Arch\n```\n\n**WARNING:** Never expose Apache to the public internet without proper security hardening!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Apache to start on boot\nsudo systemctl enable apache2  # Debian/Ubuntu\nsudo systemctl enable httpd    # RHEL/CentOS/Arch\n\n# Start Apache\nsudo systemctl start apache2   # Debian/Ubuntu\nsudo systemctl start httpd     # RHEL/CentOS/Arch\n\n# Stop Apache\nsudo systemctl stop apache2    # Debian/Ubuntu\nsudo systemctl stop httpd      # RHEL/CentOS/Arch\n\n# Restart Apache\nsudo systemctl restart apache2 # Debian/Ubuntu\nsudo systemctl restart httpd   # RHEL/CentOS/Arch\n\n# Graceful reload (reload config without dropping connections)\nsudo systemctl reload apache2  # Debian/Ubuntu\nsudo systemctl reload httpd    # RHEL/CentOS/Arch\n\n# Check status\nsudo systemctl status apache2  # Debian/Ubuntu\nsudo systemctl status httpd    # RHEL/CentOS/Arch\n\n# View logs\nsudo journalctl -u apache2 -f  # Debian/Ubuntu\nsudo journalctl -u httpd -f    # RHEL/CentOS/Arch\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable Apache to start on boot\nrc-update add apache2 default\n\n# Start Apache\nrc-service apache2 start\n\n# Stop Apache\nrc-service apache2 stop\n\n# Restart Apache\nrc-service apache2 restart\n\n# Graceful reload\nrc-service apache2 reload\n\n# Check status\nrc-service apache2 status\n\n# View logs\ntail -f /var/log/apache2/error.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'apache24_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Apache\nservice apache24 start\n\n# Stop Apache\nservice apache24 stop\n\n# Restart Apache\nservice apache24 restart\n\n# Graceful reload\nservice apache24 graceful\n\n# Check status\nservice apache24 status\n\n# View configuration test\nservice apache24 configtest\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start httpd\nbrew services stop httpd\nbrew services restart httpd\n\n# Check status\nbrew services list | grep httpd\n\n# Manual control\nsudo /usr/local/bin/httpd -k start\nsudo /usr/local/bin/httpd -k stop\nsudo /usr/local/bin/httpd -k restart\nsudo /usr/local/bin/httpd -k graceful\n\n# Test configuration\n/usr/local/bin/httpd -t\n```\n\n### Windows Service Manager\n\n```powershell\n# Start Apache service\nStart-Service Apache24\n# Or: net start Apache24\n\n# Stop Apache service\nStop-Service Apache24\n# Or: net stop Apache24\n\n# Restart Apache service\nRestart-Service Apache24\n\n# Check status\nGet-Service Apache24\n\n# Manual control\nC:\\Apache24\\bin\\httpd.exe -k start\nC:\\Apache24\\bin\\httpd.exe -k stop\nC:\\Apache24\\bin\\httpd.exe -k restart\n\n# Test configuration\nC:\\Apache24\\bin\\httpd.exe -t\n\n# View logs\nGet-Content C:\\Apache24\\logs\\error.log -Wait\n```\n\n## Advanced Configuration\n\n### Virtual Hosts\n\n```apache\n# /etc/apache2/sites-available/example.com.conf (Debian/Ubuntu)\n# /etc/httpd/conf.d/example.com.conf (RHEL/CentOS)\n\n<VirtualHost *:80>\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/example.com/public_html\n    \n    # Logging\n    ErrorLog ${APACHE_LOG_DIR}/example.com_error.log\n    CustomLog ${APACHE_LOG_DIR}/example.com_access.log combined\n    \n    # Security\n    <Directory /var/www/example.com/public_html>\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n        \n        # Hide sensitive files\n        <Files ~ \"^\\.(htaccess|htpasswd|env)$\">\n            Require all denied\n        </Files>\n    </Directory>\n</VirtualHost>\n\n# SSL Virtual Host\n<VirtualHost *:443>\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/example.com/public_html\n    \n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    # Modern SSL configuration\n    SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n    SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n    SSLHonorCipherOrder off\n    SSLSessionTickets off\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\n    Header always set X-Frame-Options \"SAMEORIGIN\"\n    Header always set X-Content-Type-Options \"nosniff\"\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    # Logging\n    ErrorLog ${APACHE_LOG_DIR}/example.com_ssl_error.log\n    CustomLog ${APACHE_LOG_DIR}/example.com_ssl_access.log combined\n</VirtualHost>\n```\n\n### Performance Tuning\n\n```apache\n# MPM Event configuration (modern and efficient)\n<IfModule mpm_event_module>\n    StartServers             3\n    MinSpareThreads         75\n    MaxSpareThreads        250\n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    ThreadLimit             64\n</IfModule>\n\n# Compression\n<IfModule mod_deflate.c>\n    SetOutputFilter DEFLATE\n    AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain\n    AddOutputFilterByType DEFLATE application/javascript application/xml+rss application/xml\n    AddOutputFilterByType DEFLATE application/json application/x-javascript\n    \n    # Don't compress images\n    SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|webp)$ no-gzip\n    SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip\n</IfModule>\n\n# Caching\n<IfModule mod_expires.c>\n    ExpiresActive On\n    ExpiresByType image/jpg \"access plus 1 year\"\n    ExpiresByType image/jpeg \"access plus 1 year\"\n    ExpiresByType image/gif \"access plus 1 year\"\n    ExpiresByType image/png \"access plus 1 year\"\n    ExpiresByType image/webp \"access plus 1 year\"\n    ExpiresByType text/css \"access plus 1 month\"\n    ExpiresByType application/pdf \"access plus 1 month\"\n    ExpiresByType application/javascript \"access plus 1 month\"\n    ExpiresByType application/x-javascript \"access plus 1 month\"\n    ExpiresByType image/x-icon \"access plus 1 year\"\n    ExpiresDefault \"access plus 2 days\"\n</IfModule>\n```\n\n### Security Hardening\n\n```apache\n# Security configuration\nServerTokens Prod\nServerSignature Off\n\n# Disable unnecessary HTTP methods\n<LimitExcept GET POST HEAD>\n    Require all denied\n</LimitExcept>\n\n# Hide server information\nHeader always unset Server\nHeader unset X-Powered-By\n\n# Security headers\nHeader always set Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\nHeader always set X-Frame-Options \"SAMEORIGIN\"\nHeader always set X-Content-Type-Options \"nosniff\"\nHeader always set X-XSS-Protection \"1; mode=block\"\nHeader always set Referrer-Policy \"strict-origin-when-cross-origin\"\n\n# Disable TRACE method\nTraceEnable off\n\n# Timeout settings\nTimeout 60\nKeepAliveTimeout 15\n\n# Request limits\nLimitRequestBody 10485760  # 10MB\nLimitRequestFields 100\nLimitRequestFieldSize 8190\nLimitRequestLine 4094\n\n# Hide sensitive files\n<FilesMatch \"^\\.\">\n    Require all denied\n</FilesMatch>\n\n<FilesMatch \"\\.(bak|backup|swp|tmp|~)$\">\n    Require all denied\n</FilesMatch>\n\n# Disable server-status and server-info\n<Location \"/server-status\">\n    Require ip 127.0.0.1\n    Require ip ::1\n</Location>\n\n<Location \"/server-info\">\n    Require ip 127.0.0.1\n    Require ip ::1\n</Location>\n```\n\n## Reverse Proxy Setup\n\n### nginx as Frontend Proxy\n\n```nginx\n# /etc/nginx/sites-available/apache-proxy\nupstream apache_backend {\n    server 127.0.0.1:8080;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name example.com www.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name example.com www.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://apache_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Handle Apache redirects\n        proxy_redirect http://apache_backend https://$server_name;\n    }\n    \n    # Serve static files directly with nginx\n    location ~* \\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n        try_files $uri @apache;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n    \n    location @apache {\n        proxy_pass http://apache_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nglobal\n    maxconn 4096\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\nfrontend apache_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/example.com.pem\n    \n    # Redirect HTTP to HTTPS\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-Content-Type-Options nosniff\n    \n    default_backend apache_servers\n\nbackend apache_servers\n    balance roundrobin\n    option httpchk GET / HTTP/1.1\\r\\nHost:\\ localhost\n    server apache1 127.0.0.1:8080 check\n    server apache2 127.0.0.1:8081 check backup\n```\n\n### Caddy Configuration\n\n```caddyfile\nexample.com www.example.com {\n    reverse_proxy localhost:8080\n    \n    # Security headers\n    header {\n        Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\n        X-Frame-Options \"SAMEORIGIN\"\n        X-Content-Type-Options \"nosniff\"\n        X-XSS-Protection \"1; mode=block\"\n    }\n    \n    # Compression\n    encode gzip\n    \n    # Logging\n    log {\n        output file /var/log/caddy/example.com.log\n        level INFO\n    }\n}\n```\n\n### Apache as Reverse Proxy\n\n```apache\n# Enable required modules\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\nLoadModule proxy_balancer_module modules/mod_proxy_balancer.so\n\n<VirtualHost *:80>\n    ServerName example.com\n    \n    # Proxy configuration\n    ProxyPreserveHost On\n    ProxyPass / http://backend-server:8080/\n    ProxyPassReverse / http://backend-server:8080/\n    \n    # Load balancing\n    ProxyPass /app/ balancer://mycluster/\n    ProxyPassReverse /app/ balancer://mycluster/\n    \n    <Proxy balancer://mycluster>\n        BalancerMember http://backend1:8080\n        BalancerMember http://backend2:8080\n        ProxySet hcmethod GET\n        ProxySet hcuri /health\n    </Proxy>\n    \n    # Balancer manager\n    <Location \"/balancer-manager\">\n        SetHandler balancer-manager\n        Require ip 127.0.0.1\n        Require ip ::1\n    </Location>\n</VirtualHost>\n```\n\n## Security Configuration\n\n### SSL/TLS Configuration\n\n```apache\n# Load SSL module\nLoadModule ssl_module modules/mod_ssl.so\n\n# Global SSL configuration\nSSLEngine on\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\nSSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\nSSLHonorCipherOrder off\nSSLSessionCache shmcb:/var/run/ssl_scache(512000)\nSSLSessionCacheTimeout 300\nSSLUseStapling On\nSSLStaplingCache shmcb:/var/run/ocsp(128000)\nSSLCompression off\nSSLSessionTickets off\n\n# Generate DH parameters\n# openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem\n```\n\n### ModSecurity WAF\n\n```bash\n# Install ModSecurity\n# Ubuntu/Debian\nsudo apt install libapache2-mod-security2\n\n# RHEL/CentOS\nsudo dnf install mod_security\n\n# Enable module\nsudo a2enmod security2  # Ubuntu/Debian\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/modsecurity\ncd /etc/modsecurity\nsudo wget https://github.com/coreruleset/coreruleset/archive/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 crs\nsudo cp crs/crs-setup.conf.example crs/crs-setup.conf\n```\n\n```apache\n# ModSecurity configuration\n<IfModule mod_security2.c>\n    SecRuleEngine On\n    SecRequestBodyAccess On\n    SecRequestBodyLimit 13107200\n    SecRequestBodyNoFilesLimit 131072\n    SecRequestBodyInMemoryLimit 131072\n    SecRequestBodyLimitAction Reject\n    SecResponseBodyAccess Off\n    SecDebugLog /var/log/apache2/modsec_debug.log\n    SecDebugLogLevel 0\n    SecAuditEngine RelevantOnly\n    SecAuditLogRelevantStatus \"^(?:5|4(?!04))\"\n    SecAuditLogParts ABDEFHIJZ\n    SecAuditLogType Serial\n    SecAuditLog /var/log/apache2/modsec_audit.log\n    \n    # Include OWASP Core Rule Set\n    Include /etc/modsecurity/crs/crs-setup.conf\n    Include /etc/modsecurity/crs/rules/*.conf\n</IfModule>\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 'Apache Full'    # HTTP and HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from any to any port {80, 443}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"Apache HTTP\" -Direction Inbound -Protocol TCP -LocalPort 80 -Action Allow\nNew-NetFirewallRule -DisplayName \"Apache HTTPS\" -Direction Inbound -Protocol TCP -LocalPort 443 -Action Allow\n```\n\n### Access Control\n\n```apache\n# IP-based access control\n<Directory \"/var/www/admin\">\n    Require ip 192.168.1.0/24\n    Require ip 127.0.0.1\n    Require ip ::1\n</Directory>\n\n# Password protection\n<Directory \"/var/www/private\">\n    AuthType Basic\n    AuthName \"Restricted Area\"\n    AuthUserFile /etc/apache2/.htpasswd\n    Require valid-user\n</Directory>\n\n# Create password file\n# htpasswd -c /etc/apache2/.htpasswd username\n\n# Client certificate authentication\n<Directory \"/var/www/secure\">\n    SSLRequireSSL\n    SSLVerifyClient require\n    SSLVerifyDepth 1\n    SSLCACertificateFile /etc/ssl/certs/ca.crt\n</Directory>\n```\n\n## Database Setup\n\nApache HTTP Server doesn't require a database, but it commonly integrates with databases through various modules and applications:\n\n### PHP Database Integration\n\n```apache\n# PHP module configuration\nLoadModule php_module modules/libphp.so\n\n<IfModule mod_php.c>\n    AddType application/x-httpd-php .php\n    php_admin_flag allow_url_include Off\n    php_admin_flag allow_url_fopen Off\n    php_admin_value upload_max_filesize 64M\n    php_admin_value post_max_size 64M\n    php_admin_value memory_limit 256M\n    php_admin_value max_execution_time 300\n    php_admin_flag expose_php Off\n</IfModule>\n```\n\n### Database Connection Examples\n\n```apache\n# Environment variables for database connections\nSetEnv DB_HOST localhost\nSetEnv DB_NAME myapp\nSetEnv DB_USER webapp\nSetEnv DB_PASS secretpassword\n\n# Secure environment variables from external access\n<Location \"/server-status\">\n    SetHandler server-status\n    Require local\n</Location>\n```\n\n### CGI Database Applications\n\n```apache\n# Enable CGI for database applications\nLoadModule cgi_module modules/mod_cgi.so\n\n<Directory \"/var/www/cgi-bin\">\n    AllowOverride None\n    Options +ExecCGI\n    AddHandler cgi-script .cgi .pl .py\n    Require all granted\n</Directory>\n\n# Python WSGI for database applications\nLoadModule wsgi_module modules/mod_wsgi.so\n\nWSGIDaemonProcess myapp python-home=/path/to/venv python-path=/path/to/app\nWSGIProcessGroup myapp\nWSGIScriptAlias / /path/to/app/app.wsgi\n```\n\n## Performance Optimization\n\n### System-level Tuning\n\n```bash\n# Increase system limits for Apache\nsudo tee -a /etc/security/limits.conf <<EOF\napache soft nofile 65535\napache hard nofile 65535\nwww-data soft nofile 65535\nwww-data hard nofile 65535\nEOF\n\n# Kernel optimization for web servers\nsudo tee -a /etc/sysctl.conf <<EOF\n# Apache optimization\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\n\n# Memory management\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\nsudo sysctl -p\n```\n\n### Apache Performance Settings\n\n```apache\n# Optimized MPM Event configuration\n<IfModule mpm_event_module>\n    StartServers             4\n    MinSpareThreads         25\n    MaxSpareThreads        75 \n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    ThreadLimit             64\n    ServerLimit             16\n    AsyncRequestWorkerFactor 2\n</IfModule>\n\n# Connection settings\nKeepAlive On\nKeepAliveTimeout 15\nMaxKeepAliveRequests 100\n\n# Timeout settings\nTimeout 60\nLimitRequestLine 4094\nLimitRequestFieldSize 8190\nLimitRequestFields 100\nLimitRequestBody 10485760\n\n# Buffer settings\nEnableSendfile On\nEnableMMAP On\n```\n\n### Caching Configuration\n\n```apache\n# Enable caching modules\nLoadModule cache_module modules/mod_cache.so\nLoadModule cache_disk_module modules/mod_cache_disk.so\n\n# Disk cache configuration\n<IfModule mod_cache_disk.c>\n    CacheRoot /var/cache/apache2\n    CacheDirLevels 2\n    CacheDirLength 1\n    CacheEnable disk /\n    CacheIgnoreHeaders Set-Cookie\n    CacheDefaultExpire 3600\n    CacheMaxExpire 86400\n    CacheLastModifiedFactor 0.1\n    CacheHeader on\n</IfModule>\n\n# Memory cache (alternative to disk cache)\nLoadModule cache_socache_module modules/mod_cache_socache.so\n\n<IfModule mod_cache_socache.c>\n    CacheEnable socache /\n    CacheSocache shmcb\n    CacheSocacheMaxSize 102400\n</IfModule>\n```\n\n### Content Optimization\n\n```apache\n# Compression\n<IfModule mod_deflate.c>\n    SetOutputFilter DEFLATE\n    AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain\n    AddOutputFilterByType DEFLATE application/javascript application/xml+rss application/xml\n    AddOutputFilterByType DEFLATE application/json application/x-javascript application/xhtml+xml\n    \n    # Don't compress images or binaries\n    SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|webp|pdf|zip|rar|exe)$ no-gzip\n    \n    # Compression level (1-9, 6 is good balance)\n    DeflateCompressionLevel 6\n</IfModule>\n\n# Static file caching\n<IfModule mod_expires.c>\n    ExpiresActive On\n    \n    # Images\n    ExpiresByType image/jpg \"access plus 1 year\"\n    ExpiresByType image/jpeg \"access plus 1 year\"\n    ExpiresByType image/gif \"access plus 1 year\"\n    ExpiresByType image/png \"access plus 1 year\"\n    ExpiresByType image/webp \"access plus 1 year\"\n    ExpiresByType image/svg+xml \"access plus 1 year\"\n    \n    # CSS and JavaScript\n    ExpiresByType text/css \"access plus 1 month\"\n    ExpiresByType application/javascript \"access plus 1 month\"\n    ExpiresByType application/x-javascript \"access plus 1 month\"\n    \n    # Fonts\n    ExpiresByType font/woff \"access plus 1 year\"\n    ExpiresByType font/woff2 \"access plus 1 year\"\n    ExpiresByType application/font-woff \"access plus 1 year\"\n    ExpiresByType application/font-woff2 \"access plus 1 year\"\n    \n    # Icons\n    ExpiresByType image/x-icon \"access plus 1 year\"\n    ExpiresByType image/vnd.microsoft.icon \"access plus 1 year\"\n    \n    # HTML\n    ExpiresByType text/html \"access plus 300 seconds\"\n    \n    # Default\n    ExpiresDefault \"access plus 1 day\"\n</IfModule>\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```apache\n# Enable server-status module\nLoadModule status_module modules/mod_status.so\n\n<Location \"/server-status\">\n    SetHandler server-status\n    Require ip 127.0.0.1\n    Require ip ::1\n</Location>\n\n<Location \"/server-info\">\n    SetHandler server-info\n    Require ip 127.0.0.1\n    Require ip ::1\n</Location>\n\n# Extended status\nExtendedStatus On\n```\n\n### Log Analysis\n\n```bash\n# Monitor Apache access logs\ntail -f /var/log/apache2/access.log  # Debian/Ubuntu\ntail -f /var/log/httpd/access_log    # RHEL/CentOS\n\n# Monitor error logs\ntail -f /var/log/apache2/error.log   # Debian/Ubuntu\ntail -f /var/log/httpd/error_log     # RHEL/CentOS\n\n# Analyze top IPs\nawk '{print $1}' /var/log/apache2/access.log | sort | uniq -c | sort -rn | head -10\n\n# Analyze response codes\nawk '{print $9}' /var/log/apache2/access.log | sort | uniq -c | sort -rn\n\n# Analyze most requested files\nawk '{print $7}' /var/log/apache2/access.log | sort | uniq -c | sort -rn | head -10\n\n# Check for errors\ngrep \"error\" /var/log/apache2/error.log | tail -10\n```\n\n### External Monitoring Tools\n\n```bash\n# Install monitoring tools\n# GoAccess for real-time log analysis\nsudo apt install goaccess  # Ubuntu/Debian\nsudo dnf install goaccess  # RHEL/CentOS\n\n# Real-time analysis\ngoaccess /var/log/apache2/access.log -c\n\n# Generate HTML report\ngoaccess /var/log/apache2/access.log -o /var/www/html/stats.html --log-format=COMBINED --real-time-html\n\n# Install htop for process monitoring\nsudo apt install htop\nhtop -p $(pgrep apache2 | head -5 | tr '\\n' ',' | sed 's/,$//')\n```\n\n### Performance Monitoring\n\n```bash\n# Monitor Apache processes\nps aux | grep apache2 | grep -v grep\n\n# Monitor memory usage\nps aux --sort=-%mem | grep apache2 | head -10\n\n# Monitor connection counts\nss -tan | grep :80 | wc -l\nss -tan | grep :443 | wc -l\n\n# Check server-status (if enabled)\ncurl http://localhost/server-status\ncurl http://localhost/server-status?auto  # Machine readable\n\n# Monitor file descriptors\nlsof -u apache2 | wc -l  # Ubuntu/Debian\nlsof -u apache | wc -l   # RHEL/CentOS\n```\n\n## Backup and Restore\n\n### Configuration Backup\n\n```bash\n#!/bin/bash\n# backup-apache-config.sh\n\nBACKUP_DIR=\"/backup/apache/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Detect Apache configuration directory\nif [ -d /etc/apache2 ]; then\n    # Debian/Ubuntu\n    CONFIG_DIR=\"/etc/apache2\"\n    LOG_DIR=\"/var/log/apache2\"\n    WEB_DIR=\"/var/www\"\nelif [ -d /etc/httpd ]; then\n    # RHEL/CentOS\n    CONFIG_DIR=\"/etc/httpd\"\n    LOG_DIR=\"/var/log/httpd\"\n    WEB_DIR=\"/var/www\"\nfi\n\n# Backup Apache configuration\ntar czf \"$BACKUP_DIR/apache-config.tar.gz\" -C / \"${CONFIG_DIR#/}\"\n\n# Backup website files\ntar czf \"$BACKUP_DIR/apache-sites.tar.gz\" -C \"$WEB_DIR\" .\n\n# Backup SSL certificates\nif [ -d /etc/letsencrypt ]; then\n    tar czf \"$BACKUP_DIR/ssl-certs.tar.gz\" -C /etc letsencrypt\nfi\n\n# Backup recent logs (last 7 days)\nfind \"$LOG_DIR\" -name \"*.log\" -mtime -7 -exec tar czf \"$BACKUP_DIR/apache-logs.tar.gz\" {} +\n\n# Package version info\nif command -v apache2ctl &> /dev/null; then\n    apache2ctl -v > \"$BACKUP_DIR/version.txt\"\nelif command -v httpd &> /dev/null; then\n    httpd -v > \"$BACKUP_DIR/version.txt\"\nfi\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Website Backup\n\n```bash\n#!/bin/bash\n# backup-websites.sh\n\nBACKUP_DIR=\"/backup/websites/$(date +%Y%m%d_%H%M%S)\"\nWEB_ROOT=\"/var/www/html\"\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Backup all websites\nfor site in \"$WEB_ROOT\"/*; do\n    if [ -d \"$site\" ]; then\n        site_name=$(basename \"$site\")\n        echo \"Backing up $site_name...\"\n        tar czf \"$BACKUP_DIR/${site_name}.tar.gz\" -C \"$WEB_ROOT\" \"$site_name\"\n    fi\ndone\n\n# Backup databases (if applicable)\nif command -v mysqldump &> /dev/null; then\n    for db in $(mysql -e \"SHOW DATABASES;\" | grep -v -E \"^(Database|information_schema|performance_schema|mysql|sys)$\"); do\n        mysqldump \"$db\" | gzip > \"$BACKUP_DIR/${db}.sql.gz\"\n    done\nfi\n\n# Keep only last 30 days of backups\nfind /backup/websites -type d -mtime +30 -exec rm -rf {} + 2>/dev/null\n\necho \"Website backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# restore-apache.sh\n\nBACKUP_DIR=\"$1\"\nif [ -z \"$BACKUP_DIR\" ]; then\n    echo \"Usage: $0 <backup-directory>\"\n    exit 1\nfi\n\n# Stop Apache\nif command -v systemctl &> /dev/null; then\n    sudo systemctl stop apache2 || sudo systemctl stop httpd\nelif command -v service &> /dev/null; then\n    sudo service apache2 stop || sudo service httpd stop\nfi\n\n# Restore configuration\nif [ -f \"$BACKUP_DIR/apache-config.tar.gz\" ]; then\n    sudo tar xzf \"$BACKUP_DIR/apache-config.tar.gz\" -C /\n    echo \"Configuration restored\"\nfi\n\n# Restore websites\nif [ -f \"$BACKUP_DIR/apache-sites.tar.gz\" ]; then\n    sudo tar xzf \"$BACKUP_DIR/apache-sites.tar.gz\" -C /var/www\n    echo \"Websites restored\"\nfi\n\n# Restore SSL certificates\nif [ -f \"$BACKUP_DIR/ssl-certs.tar.gz\" ]; then\n    sudo tar xzf \"$BACKUP_DIR/ssl-certs.tar.gz\" -C /etc\n    echo \"SSL certificates restored\"\nfi\n\n# Test configuration\nif command -v apache2ctl &> /dev/null; then\n    sudo apache2ctl configtest\n    if [ $? -eq 0 ]; then\n        sudo systemctl start apache2\n    fi\nelif command -v httpd &> /dev/null; then\n    sudo httpd -t\n    if [ $? -eq 0 ]; then\n        sudo systemctl start httpd\n    fi\nfi\n\necho \"Restore completed\"\n```\n\n### Automated Backup\n\n```bash\n# Create cron job for daily backups\nsudo tee /etc/cron.d/apache-backup <<EOF\n# Apache daily backup\n0 2 * * * root /usr/local/bin/backup-apache-config.sh\n0 3 * * * root /usr/local/bin/backup-websites.sh\nEOF\n\n# Make scripts executable\nsudo chmod +x /usr/local/bin/backup-apache-config.sh\nsudo chmod +x /usr/local/bin/backup-websites.sh\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Apache won't start**:\n```bash\n# Check configuration syntax\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS\n\n# Check error logs\nsudo tail -20 /var/log/apache2/error.log  # Debian/Ubuntu\nsudo tail -20 /var/log/httpd/error_log    # RHEL/CentOS\n\n# Check port conflicts\nsudo ss -tlnp | grep :80\nsudo lsof -i :80\n\n# Check permissions\nls -la /var/www/html\nps aux | grep apache2\n```\n\n2. **Permission denied errors**:\n```bash\n# Fix ownership\nsudo chown -R www-data:www-data /var/www/html  # Debian/Ubuntu\nsudo chown -R apache:apache /var/www/html      # RHEL/CentOS\n\n# Fix permissions\nsudo find /var/www/html -type d -exec chmod 755 {} \\;\nsudo find /var/www/html -type f -exec chmod 644 {} \\;\n\n# Check SELinux (RHEL/CentOS)\ngetenforce\nsudo setsebool -P httpd_can_network_connect 1\nsudo restorecon -Rv /var/www/html\n```\n\n3. **Virtual host not working**:\n```bash\n# Check virtual host configuration\napache2ctl -S  # Debian/Ubuntu\nhttpd -S       # RHEL/CentOS\n\n# Enable virtual host (Debian/Ubuntu)\nsudo a2ensite example.com.conf\nsudo systemctl reload apache2\n\n# Test virtual host\ncurl -H \"Host: example.com\" http://localhost/\n```\n\n4. **SSL certificate issues**:\n```bash\n# Check certificate files\nsudo openssl x509 -in /etc/ssl/certs/example.com.crt -text -noout\n\n# Test SSL configuration\necho | openssl s_client -servername example.com -connect example.com:443\n\n# Check SSL module\napache2ctl -M | grep ssl  # Debian/Ubuntu\nhttpd -M | grep ssl       # RHEL/CentOS\n```\n\n### Debug Mode\n\n```apache\n# Enable debug logging\nLogLevel debug\n\n# Module-specific debug\nLogLevel ssl:debug\nLogLevel rewrite:debug\n\n# Custom debug log format\nLogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\" %D\" debug\nCustomLog /var/log/apache2/debug.log debug\n```\n\n### Performance Issues\n\n```bash\n# Monitor Apache processes\ntop -p $(pgrep apache2 | head -5 | tr '\\n' ',' | sed 's/,$//')\n\n# Check memory usage\nps aux --sort=-%mem | grep apache2\n\n# Monitor connections\nwatch 'ss -tan | grep :80 | wc -l'\n\n# Check slow queries (if applicable)\ngrep \"taking too long\" /var/log/apache2/error.log\n\n# Analyze configuration\napache2ctl -t -D DUMP_VHOSTS\napache2ctl -t -D DUMP_MODULES\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update httpd\nsudo dnf update httpd httpd-tools mod_ssl\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade apache2 apache2-utils libapache2-mod-ssl\n\n# Arch Linux\nsudo pacman -Syu apache\n\n# Alpine Linux\napk update\napk upgrade apache2\n\n# openSUSE\nsudo zypper update apache2\n\n# FreeBSD\npkg update\npkg upgrade apache24\n\n# macOS\nbrew upgrade httpd\n\n# Always test configuration after update\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS\n\n# Graceful restart to apply updates\nsudo systemctl reload apache2  # Debian/Ubuntu\nsudo systemctl reload httpd    # RHEL/CentOS\n```\n\n### Log Rotation\n\n```bash\n# Configure log rotation for Apache\nsudo tee /etc/logrotate.d/apache2 <<EOF\n/var/log/apache2/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 640 root adm\n    sharedscripts\n    postrotate\n        if /bin/pidof apache2 > /dev/null ; then \\\n            /usr/sbin/apache2ctl graceful > /dev/null; \\\n        fi\n    endscript\n}\nEOF\n\n# For RHEL/CentOS\nsudo tee /etc/logrotate.d/httpd <<EOF\n/var/log/httpd/*log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    sharedscripts\n    postrotate\n        /bin/systemctl reload httpd.service > /dev/null 2>/dev/null || true\n    endscript\n}\nEOF\n```\n\n### Health Checks\n\n```bash\n#!/bin/bash\n# apache-health-check.sh\n\n# Check if Apache is running\nif ! pgrep apache2 > /dev/null && ! pgrep httpd > /dev/null; then\n    echo \"CRITICAL: Apache is not running\"\n    exit 2\nfi\n\n# Check if Apache responds to HTTP requests\nif ! curl -f -s http://localhost > /dev/null; then\n    echo \"CRITICAL: Apache not responding to HTTP requests\"\n    exit 2\nfi\n\n# Check configuration syntax\nif command -v apache2ctl &> /dev/null; then\n    if ! apache2ctl configtest &> /dev/null; then\n        echo \"WARNING: Apache configuration has syntax errors\"\n        exit 1\n    fi\nelif command -v httpd &> /dev/null; then\n    if ! httpd -t &> /dev/null; then\n        echo \"WARNING: Apache configuration has syntax errors\"\n        exit 1\n    fi\nfi\n\n# Check disk space for logs\nLOG_USAGE=$(df /var/log | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ \"$LOG_USAGE\" -gt 90 ]; then\n    echo \"WARNING: Log directory is ${LOG_USAGE}% full\"\n    exit 1\nfi\n\necho \"OK: Apache is healthy\"\nexit 0\n```\n\n### Cleanup Tasks\n\n```bash\n# Clean old log files\nfind /var/log/apache2 -name \"*.log.*\" -mtime +30 -delete  # Debian/Ubuntu\nfind /var/log/httpd -name \"*log.*\" -mtime +30 -delete     # RHEL/CentOS\n\n# Clean Apache cache\nrm -rf /var/cache/apache2/*\n\n# Clean temporary files\nfind /tmp -name \"apache*\" -mtime +7 -delete\n\n# Optimize log files (remove old entries)\nsudo journalctl --vacuum-time=30d\n```\n\n## Integration Examples\n\n### PHP Integration\n\n```bash\n# Install PHP\nsudo apt install php libapache2-mod-php  # Ubuntu/Debian\nsudo dnf install php php-cli              # RHEL/CentOS\n\n# Enable PHP module\nsudo a2enmod php8.1  # Ubuntu/Debian\n\n# Test PHP\necho \"<?php phpinfo(); ?>\" | sudo tee /var/www/html/info.php\n```\n\n### WordPress Integration\n\n```apache\n<VirtualHost *:443>\n    ServerName blog.example.com\n    DocumentRoot /var/www/wordpress\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/blog.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/blog.example.com/privkey.pem\n    \n    <Directory /var/www/wordpress>\n        AllowOverride All\n        Options -Indexes +FollowSymLinks\n        Require all granted\n    </Directory>\n    \n    # WordPress-specific rules\n    RewriteEngine On\n    RewriteRule ^/wp-admin/install.php$ - [F]\n    RewriteRule ^/wp-config-sample.php$ - [F]\n    \n    # Security for wp-config.php\n    <Files wp-config.php>\n        Require all denied\n    </Files>\n</VirtualHost>\n```\n\n### Python WSGI Integration\n\n```apache\n# Load WSGI module\nLoadModule wsgi_module modules/mod_wsgi.so\n\n<VirtualHost *:443>\n    ServerName app.example.com\n    DocumentRoot /var/www/python-app\n    \n    WSGIDaemonProcess app python-home=/var/www/python-app/venv python-path=/var/www/python-app\n    WSGIProcessGroup app\n    WSGIScriptAlias / /var/www/python-app/app.wsgi\n    \n    <Directory /var/www/python-app>\n        WSGIApplicationGroup %{GLOBAL}\n        Require all granted\n    </Directory>\n</VirtualHost>\n```\n\n### Node.js Proxy Integration\n\n```apache\n<VirtualHost *:443>\n    ServerName node.example.com\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:3000/\n    ProxyPassReverse / http://localhost:3000/\n    \n    # WebSocket support\n    ProxyPass /socket.io/ ws://localhost:3000/socket.io/\n    ProxyPassReverse /socket.io/ ws://localhost:3000/socket.io/\n    \n    # Static files served by Apache\n    Alias /static /var/www/node-app/public\n    <Directory /var/www/node-app/public>\n        Require all granted\n        ExpiresActive On\n        ExpiresDefault \"access plus 1 year\"\n    </Directory>\n</VirtualHost>\n```\n\n## Additional Resources\n\n- [Official Documentation](https://httpd.apache.org/docs/)\n- [GitHub Repository](https://github.com/apache/httpd)\n- [Security Guide](https://httpd.apache.org/docs/2.4/misc/security_tips.html)\n- [Performance Tuning](https://httpd.apache.org/docs/2.4/misc/perf-tuning.html)\n- [Apache Modules](https://httpd.apache.org/docs/2.4/mod/)\n- [Virtual Hosts Guide](https://httpd.apache.org/docs/2.4/vhosts/)\n- [SSL/TLS Guide](https://httpd.apache.org/docs/2.4/ssl/)\n- [Community Mailing Lists](https://httpd.apache.org/lists.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"apache-http-server-installation-guide\" class=\"mobile-header\">Apache HTTP Server Installation Guide</h1>\n<p class=\"mobile-paragraph\">Apache HTTP Server is a free and open-source cross-platform web server software developed and maintained by the Apache Software Foundation. Originally based on the NCSA HTTPd server, Apache has been the most popular web server on the Internet since April 1996, serving over 40% of active websites. It serves as a FOSS alternative to commercial web servers like Microsoft IIS, NGINX Plus, or F5 BIG-IP, offering enterprise-grade performance, security, and flexibility without licensing costs.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum (2GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 500MB for installation (additional space for websites and logs)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for serving web requests</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 2.6.32+</li>\n<li class=\"mobile-list-item\">macOS: 10.12+ (Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (HTTP)</li>\n<li class=\"mobile-list-item\">Port 443 (HTTPS)</li>\n<li class=\"mobile-list-item\">Additional ports for virtual hosts if needed</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">OpenSSL for SSL/TLS support</li>\n<li class=\"mobile-list-item\">PCRE for regular expressions</li>\n<li class=\"mobile-list-item\">APR (Apache Portable Runtime) libraries</li>\n<li class=\"mobile-list-item\">Zlib for compression</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges for installation</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache (httpd) and utilities\nsudo dnf install -y httpd httpd-tools mod_ssl mod_security\n\n# RHEL/CentOS 7 (using yum)\nsudo yum install -y epel-release\nsudo yum install -y httpd httpd-tools mod_ssl mod_security\n\n# Install additional modules\nsudo dnf install -y httpd-devel httpd-manual\n\n# Create necessary directories\nsudo mkdir -p /etc/httpd/conf.d\nsudo mkdir -p /var/log/httpd\nsudo mkdir -p /var/www/html\n\n# Set proper permissions\nsudo chown -R apache:apache /var/www/html\nsudo chown -R apache:apache /var/log/httpd\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\nhttpd -v\nsudo systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Apache and essential modules\nsudo apt install -y apache2 apache2-utils apache2-dev libapache2-mod-security2\n\n# Install additional tools\nsudo apt install -y apache2-doc ssl-cert\n\n# Enable essential modules\nsudo a2enmod rewrite ssl headers deflate expires security2 http2\n\n# Create necessary directories\nsudo mkdir -p /var/www/html\nsudo mkdir -p /var/log/apache2\n\n# Set proper permissions\nsudo chown -R www-data:www-data /var/www/html\nsudo chown -R www-data:www-data /var/log/apache2\n\n# Enable and start service\nsudo systemctl enable --now apache2\n\n# Verify installation\napache2ctl -v\nsudo systemctl status apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\nsudo pacman -S apache\n\n# Install additional modules\nsudo pacman -S apache-mod-security apache-mod-wsgi\n\n# Create apache user if not exists\nsudo useradd -r -d /srv/http -s /sbin/nologin -c &quot;Apache HTTP Server&quot; apache\n\n# Create necessary directories\nsudo mkdir -p /etc/httpd/conf.d\nsudo mkdir -p /var/log/httpd\nsudo mkdir -p /srv/http\n\n# Set proper permissions\nsudo chown -R apache:apache /srv/http\nsudo chown -R apache:apache /var/log/httpd\n\n# Edit main configuration\nsudo sed -i &#039;s/#ServerName www.example.com:80/ServerName localhost:80/&#039; /etc/httpd/conf/httpd.conf\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\nhttpd -v\nsudo systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\napk add --no-cache apache2 apache2-ssl apache2-utils\n\n# Install additional modules\napk add --no-cache apache2-mod-wsgi apache2-mod-fcgid\n\n# Create apache user if not exists\nadduser -D -H -s /sbin/nologin -g apache apache\n\n# Create necessary directories\nmkdir -p /var/www/localhost/htdocs\nmkdir -p /var/log/apache2\nmkdir -p /run/apache2\n\n# Set proper permissions\nchown -R apache:apache /var/www/localhost/htdocs\nchown -R apache:apache /var/log/apache2\nchown -R apache:apache /run/apache2\n\n# Configure basic settings\nsed -i &#039;s/#ServerName www.example.com:80/ServerName localhost:80/&#039; /etc/apache2/httpd.conf\n\n# Enable and start service\nrc-update add apache2 default\nrc-service apache2 start\n\n# Verify installation\nhttpd -v\nrc-service apache2 status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y apache2 apache2-mod_ssl apache2-utils\n\n# Install additional modules\nsudo zypper install -y apache2-mod_security2 apache2-mod_wsgi\n\n# SLES 15\n# Enable web and scripting module\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\nsudo zypper install -y apache2 apache2-mod_ssl\n\n# Create necessary directories\nsudo mkdir -p /etc/apache2/conf.d\nsudo mkdir -p /var/log/apache2\nsudo mkdir -p /srv/www/htdocs\n\n# Set proper permissions\nsudo chown -R wwwrun:www /srv/www/htdocs\nsudo chown -R wwwrun:www /var/log/apache2\n\n# Enable modules\nsudo a2enmod ssl\nsudo a2enmod rewrite\nsudo a2enmod headers\n\n# Enable and start service\nsudo systemctl enable --now apache2\n\n# Verify installation\napache2ctl -v\nsudo systemctl status apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install httpd\n\n# Start as service\nbrew services start httpd\n\n# Or run manually\nsudo /usr/local/bin/httpd -D FOREGROUND\n\n# Configuration location: /usr/local/etc/httpd/httpd.conf\n# Alternative: /opt/homebrew/etc/httpd/httpd.conf (Apple Silicon)\n\n# Create necessary directories\nsudo mkdir -p /usr/local/var/log/httpd\nsudo mkdir -p /usr/local/var/www\n\n# Set basic configuration\nsed -i &#039;&#039; &#039;s/#ServerName www.example.com:8080/ServerName localhost:8080/&#039; /usr/local/etc/httpd/httpd.conf\n\n# Verify installation\n/usr/local/bin/httpd -v\nbrew services list | grep httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install apache24\n\n# Using ports\ncd /usr/ports/www/apache24\nmake install clean\n\n# Enable in rc.conf\necho &#039;apache24_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Create necessary directories\nmkdir -p /var/log/httpd\nmkdir -p /usr/local/www/apache24/data\n\n# Set proper permissions\nchown -R www:www /usr/local/www/apache24/data\nchown -R www:www /var/log/httpd\n\n# Start service\nservice apache24 start\n\n# Verify installation\n/usr/local/sbin/httpd -v\nservice apache24 status\n\n# Configuration location: /usr/local/etc/apache24/httpd.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install apache-httpd\n\n# Method 2: Using Scoop\nscoop bucket add extras\nscoop install apache\n\n# Method 3: Manual installation from Apache Lounge\n# Download from https://www.apachelounge.com/download/\n# Extract to C:\\Apache24\n\n# Install as Windows service\nC:\\Apache24\\bin\\httpd.exe -k install -n Apache24\n\n# Start service\nStart-Service Apache24\n\n# Or using net command\nnet start Apache24\n\n# Configuration location: C:\\Apache24\\conf\\httpd.conf\n# Document root: C:\\Apache24\\htdocs\n\n# Verify installation\nC:\\Apache24\\bin\\httpd.exe -v\nGet-Service Apache24</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create apache user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/www -s /sbin/nologin -c &quot;Apache HTTP Server&quot; apache</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/httpd/conf/httpd.conf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/apache2/apache2.conf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/httpd/conf/httpd.conf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/apache2/httpd.conf</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/apache2/httpd.conf</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/httpd/httpd.conf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/apache24/httpd.conf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\Apache24\\conf\\httpd.conf</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Basic security settings\nServerTokens Prod\nServerSignature Off\n\n# Set server name\nServerName localhost:80\n\n# Basic security modules\nLoadModule headers_module modules/mod_headers.so\nLoadModule rewrite_module modules/mod_rewrite.so\nLoadModule ssl_module modules/mod_ssl.so\n\n# Security headers\nHeader always set X-Frame-Options &quot;SAMEORIGIN&quot;\nHeader always set X-Content-Type-Options &quot;nosniff&quot;\nHeader always set X-XSS-Protection &quot;1; mode=block&quot;\n\n# Hide .htaccess files\n&lt;FilesMatch &quot;^\\.ht&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n# Disable directory browsing by default\nOptions -Indexes\n\n# Basic virtual host\n&lt;VirtualHost *:80&gt;\n    ServerName localhost\n    DocumentRoot /var/www/html\n    ErrorLog logs/error_log\n    CustomLog logs/access_log common\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test configuration syntax\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS/Arch\n\n# Check loaded modules\napache2ctl -M  # Debian/Ubuntu\nhttpd -M       # RHEL/CentOS/Arch\n\n# Test HTTP response\ncurl -I http://localhost\n\n# Check if Apache is listening\nsudo ss -tlnp | grep :80\nsudo netstat -tlnp | grep :80\n\n# View virtual host configuration\napache2ctl -S  # Debian/Ubuntu\nhttpd -S       # RHEL/CentOS/Arch</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Never expose Apache to the public internet without proper security hardening!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Apache to start on boot\nsudo systemctl enable apache2  # Debian/Ubuntu\nsudo systemctl enable httpd    # RHEL/CentOS/Arch\n\n# Start Apache\nsudo systemctl start apache2   # Debian/Ubuntu\nsudo systemctl start httpd     # RHEL/CentOS/Arch\n\n# Stop Apache\nsudo systemctl stop apache2    # Debian/Ubuntu\nsudo systemctl stop httpd      # RHEL/CentOS/Arch\n\n# Restart Apache\nsudo systemctl restart apache2 # Debian/Ubuntu\nsudo systemctl restart httpd   # RHEL/CentOS/Arch\n\n# Graceful reload (reload config without dropping connections)\nsudo systemctl reload apache2  # Debian/Ubuntu\nsudo systemctl reload httpd    # RHEL/CentOS/Arch\n\n# Check status\nsudo systemctl status apache2  # Debian/Ubuntu\nsudo systemctl status httpd    # RHEL/CentOS/Arch\n\n# View logs\nsudo journalctl -u apache2 -f  # Debian/Ubuntu\nsudo journalctl -u httpd -f    # RHEL/CentOS/Arch</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Apache to start on boot\nrc-update add apache2 default\n\n# Start Apache\nrc-service apache2 start\n\n# Stop Apache\nrc-service apache2 stop\n\n# Restart Apache\nrc-service apache2 restart\n\n# Graceful reload\nrc-service apache2 reload\n\n# Check status\nrc-service apache2 status\n\n# View logs\ntail -f /var/log/apache2/error.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;apache24_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Apache\nservice apache24 start\n\n# Stop Apache\nservice apache24 stop\n\n# Restart Apache\nservice apache24 restart\n\n# Graceful reload\nservice apache24 graceful\n\n# Check status\nservice apache24 status\n\n# View configuration test\nservice apache24 configtest</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start httpd\nbrew services stop httpd\nbrew services restart httpd\n\n# Check status\nbrew services list | grep httpd\n\n# Manual control\nsudo /usr/local/bin/httpd -k start\nsudo /usr/local/bin/httpd -k stop\nsudo /usr/local/bin/httpd -k restart\nsudo /usr/local/bin/httpd -k graceful\n\n# Test configuration\n/usr/local/bin/httpd -t</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start Apache service\nStart-Service Apache24\n# Or: net start Apache24\n\n# Stop Apache service\nStop-Service Apache24\n# Or: net stop Apache24\n\n# Restart Apache service\nRestart-Service Apache24\n\n# Check status\nGet-Service Apache24\n\n# Manual control\nC:\\Apache24\\bin\\httpd.exe -k start\nC:\\Apache24\\bin\\httpd.exe -k stop\nC:\\Apache24\\bin\\httpd.exe -k restart\n\n# Test configuration\nC:\\Apache24\\bin\\httpd.exe -t\n\n# View logs\nGet-Content C:\\Apache24\\logs\\error.log -Wait</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"virtual-hosts\" class=\"mobile-header\">Virtual Hosts</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/example.com.conf (Debian/Ubuntu)\n# /etc/httpd/conf.d/example.com.conf (RHEL/CentOS)\n\n&lt;VirtualHost *:80&gt;\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/example.com/public_html\n    \n    # Logging\n    ErrorLog ${APACHE_LOG_DIR}/example.com_error.log\n    CustomLog ${APACHE_LOG_DIR}/example.com_access.log combined\n    \n    # Security\n    &lt;Directory /var/www/example.com/public_html&gt;\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n        \n        # Hide sensitive files\n        &lt;Files ~ &quot;^\\.(htaccess|htpasswd|env)$&quot;&gt;\n            Require all denied\n        &lt;/Files&gt;\n    &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n\n# SSL Virtual Host\n&lt;VirtualHost *:443&gt;\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/example.com/public_html\n    \n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    # Modern SSL configuration\n    SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n    SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n    SSLHonorCipherOrder off\n    SSLSessionTickets off\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;\n    Header always set X-Frame-Options &quot;SAMEORIGIN&quot;\n    Header always set X-Content-Type-Options &quot;nosniff&quot;\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    # Logging\n    ErrorLog ${APACHE_LOG_DIR}/example.com_ssl_error.log\n    CustomLog ${APACHE_LOG_DIR}/example.com_ssl_access.log combined\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-tuning\" class=\"mobile-header\">Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># MPM Event configuration (modern and efficient)\n&lt;IfModule mpm_event_module&gt;\n    StartServers             3\n    MinSpareThreads         75\n    MaxSpareThreads        250\n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    ThreadLimit             64\n&lt;/IfModule&gt;\n\n# Compression\n&lt;IfModule mod_deflate.c&gt;\n    SetOutputFilter DEFLATE\n    AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain\n    AddOutputFilterByType DEFLATE application/javascript application/xml+rss application/xml\n    AddOutputFilterByType DEFLATE application/json application/x-javascript\n    \n    # Don&#039;t compress images\n    SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|webp)$ no-gzip\n    SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip\n&lt;/IfModule&gt;\n\n# Caching\n&lt;IfModule mod_expires.c&gt;\n    ExpiresActive On\n    ExpiresByType image/jpg &quot;access plus 1 year&quot;\n    ExpiresByType image/jpeg &quot;access plus 1 year&quot;\n    ExpiresByType image/gif &quot;access plus 1 year&quot;\n    ExpiresByType image/png &quot;access plus 1 year&quot;\n    ExpiresByType image/webp &quot;access plus 1 year&quot;\n    ExpiresByType text/css &quot;access plus 1 month&quot;\n    ExpiresByType application/pdf &quot;access plus 1 month&quot;\n    ExpiresByType application/javascript &quot;access plus 1 month&quot;\n    ExpiresByType application/x-javascript &quot;access plus 1 month&quot;\n    ExpiresByType image/x-icon &quot;access plus 1 year&quot;\n    ExpiresDefault &quot;access plus 2 days&quot;\n&lt;/IfModule&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Security configuration\nServerTokens Prod\nServerSignature Off\n\n# Disable unnecessary HTTP methods\n&lt;LimitExcept GET POST HEAD&gt;\n    Require all denied\n&lt;/LimitExcept&gt;\n\n# Hide server information\nHeader always unset Server\nHeader unset X-Powered-By\n\n# Security headers\nHeader always set Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;\nHeader always set X-Frame-Options &quot;SAMEORIGIN&quot;\nHeader always set X-Content-Type-Options &quot;nosniff&quot;\nHeader always set X-XSS-Protection &quot;1; mode=block&quot;\nHeader always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n\n# Disable TRACE method\nTraceEnable off\n\n# Timeout settings\nTimeout 60\nKeepAliveTimeout 15\n\n# Request limits\nLimitRequestBody 10485760  # 10MB\nLimitRequestFields 100\nLimitRequestFieldSize 8190\nLimitRequestLine 4094\n\n# Hide sensitive files\n&lt;FilesMatch &quot;^\\.&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n&lt;FilesMatch &quot;\\.(bak|backup|swp|tmp|~)$&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n# Disable server-status and server-info\n&lt;Location &quot;/server-status&quot;&gt;\n    Require ip 127.0.0.1\n    Require ip ::1\n&lt;/Location&gt;\n\n&lt;Location &quot;/server-info&quot;&gt;\n    Require ip 127.0.0.1\n    Require ip ::1\n&lt;/Location&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-as-frontend-proxy\" class=\"mobile-header\">nginx as Frontend Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/apache-proxy\nupstream apache_backend {\n    server 127.0.0.1:8080;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name example.com www.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name example.com www.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://apache_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Handle Apache redirects\n        proxy_redirect http://apache_backend https://$server_name;\n    }\n    \n    # Serve static files directly with nginx\n    location ~* \\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n        try_files $uri @apache;\n        expires 1y;\n        add_header Cache-Control &quot;public, immutable&quot;;\n    }\n    \n    location @apache {\n        proxy_pass http://apache_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nglobal\n    maxconn 4096\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\nfrontend apache_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/example.com.pem\n    \n    # Redirect HTTP to HTTPS\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-Content-Type-Options nosniff\n    \n    default_backend apache_servers\n\nbackend apache_servers\n    balance roundrobin\n    option httpchk GET / HTTP/1.1\\r\\nHost:\\ localhost\n    server apache1 127.0.0.1:8080 check\n    server apache2 127.0.0.1:8081 check backup</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddyfile\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddyfile</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddyfile\">example.com www.example.com {\n    reverse_proxy localhost:8080\n    \n    # Security headers\n    header {\n        Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;\n        X-Frame-Options &quot;SAMEORIGIN&quot;\n        X-Content-Type-Options &quot;nosniff&quot;\n        X-XSS-Protection &quot;1; mode=block&quot;\n    }\n    \n    # Compression\n    encode gzip\n    \n    # Logging\n    log {\n        output file /var/log/caddy/example.com.log\n        level INFO\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-as-reverse-proxy\" class=\"mobile-header\">Apache as Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Enable required modules\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\nLoadModule proxy_balancer_module modules/mod_proxy_balancer.so\n\n&lt;VirtualHost *:80&gt;\n    ServerName example.com\n    \n    # Proxy configuration\n    ProxyPreserveHost On\n    ProxyPass / http://backend-server:8080/\n    ProxyPassReverse / http://backend-server:8080/\n    \n    # Load balancing\n    ProxyPass /app/ balancer://mycluster/\n    ProxyPassReverse /app/ balancer://mycluster/\n    \n    &lt;Proxy balancer://mycluster&gt;\n        BalancerMember http://backend1:8080\n        BalancerMember http://backend2:8080\n        ProxySet hcmethod GET\n        ProxySet hcuri /health\n    &lt;/Proxy&gt;\n    \n    # Balancer manager\n    &lt;Location &quot;/balancer-manager&quot;&gt;\n        SetHandler balancer-manager\n        Require ip 127.0.0.1\n        Require ip ::1\n    &lt;/Location&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Load SSL module\nLoadModule ssl_module modules/mod_ssl.so\n\n# Global SSL configuration\nSSLEngine on\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\nSSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\nSSLHonorCipherOrder off\nSSLSessionCache shmcb:/var/run/ssl_scache(512000)\nSSLSessionCacheTimeout 300\nSSLUseStapling On\nSSLStaplingCache shmcb:/var/run/ocsp(128000)\nSSLCompression off\nSSLSessionTickets off\n\n# Generate DH parameters\n# openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem</code></pre>\n      </div>\n    </div>\n<h3 id=\"modsecurity-waf\" class=\"mobile-header\">ModSecurity WAF</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ModSecurity\n# Ubuntu/Debian\nsudo apt install libapache2-mod-security2\n\n# RHEL/CentOS\nsudo dnf install mod_security\n\n# Enable module\nsudo a2enmod security2  # Ubuntu/Debian\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/modsecurity\ncd /etc/modsecurity\nsudo wget https://github.com/coreruleset/coreruleset/archive/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 crs\nsudo cp crs/crs-setup.conf.example crs/crs-setup.conf</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># ModSecurity configuration\n&lt;IfModule mod_security2.c&gt;\n    SecRuleEngine On\n    SecRequestBodyAccess On\n    SecRequestBodyLimit 13107200\n    SecRequestBodyNoFilesLimit 131072\n    SecRequestBodyInMemoryLimit 131072\n    SecRequestBodyLimitAction Reject\n    SecResponseBodyAccess Off\n    SecDebugLog /var/log/apache2/modsec_debug.log\n    SecDebugLogLevel 0\n    SecAuditEngine RelevantOnly\n    SecAuditLogRelevantStatus &quot;^(?:5|4(?!04))&quot;\n    SecAuditLogParts ABDEFHIJZ\n    SecAuditLogType Serial\n    SecAuditLog /var/log/apache2/modsec_audit.log\n    \n    # Include OWASP Core Rule Set\n    Include /etc/modsecurity/crs/crs-setup.conf\n    Include /etc/modsecurity/crs/rules/*.conf\n&lt;/IfModule&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow &#039;Apache Full&#039;    # HTTP and HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from any to any port {80, 443}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;Apache HTTP&quot; -Direction Inbound -Protocol TCP -LocalPort 80 -Action Allow\nNew-NetFirewallRule -DisplayName &quot;Apache HTTPS&quot; -Direction Inbound -Protocol TCP -LocalPort 443 -Action Allow</code></pre>\n      </div>\n    </div>\n<h3 id=\"access-control\" class=\"mobile-header\">Access Control</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># IP-based access control\n&lt;Directory &quot;/var/www/admin&quot;&gt;\n    Require ip 192.168.1.0/24\n    Require ip 127.0.0.1\n    Require ip ::1\n&lt;/Directory&gt;\n\n# Password protection\n&lt;Directory &quot;/var/www/private&quot;&gt;\n    AuthType Basic\n    AuthName &quot;Restricted Area&quot;\n    AuthUserFile /etc/apache2/.htpasswd\n    Require valid-user\n&lt;/Directory&gt;\n\n# Create password file\n# htpasswd -c /etc/apache2/.htpasswd username\n\n# Client certificate authentication\n&lt;Directory &quot;/var/www/secure&quot;&gt;\n    SSLRequireSSL\n    SSLVerifyClient require\n    SSLVerifyDepth 1\n    SSLCACertificateFile /etc/ssl/certs/ca.crt\n&lt;/Directory&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">Apache HTTP Server doesn't require a database, but it commonly integrates with databases through various modules and applications:</p>\n<h3 id=\"php-database-integration\" class=\"mobile-header\">PHP Database Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># PHP module configuration\nLoadModule php_module modules/libphp.so\n\n&lt;IfModule mod_php.c&gt;\n    AddType application/x-httpd-php .php\n    php_admin_flag allow_url_include Off\n    php_admin_flag allow_url_fopen Off\n    php_admin_value upload_max_filesize 64M\n    php_admin_value post_max_size 64M\n    php_admin_value memory_limit 256M\n    php_admin_value max_execution_time 300\n    php_admin_flag expose_php Off\n&lt;/IfModule&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-connection-examples\" class=\"mobile-header\">Database Connection Examples</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Environment variables for database connections\nSetEnv DB_HOST localhost\nSetEnv DB_NAME myapp\nSetEnv DB_USER webapp\nSetEnv DB_PASS secretpassword\n\n# Secure environment variables from external access\n&lt;Location &quot;/server-status&quot;&gt;\n    SetHandler server-status\n    Require local\n&lt;/Location&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"cgi-database-applications\" class=\"mobile-header\">CGI Database Applications</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Enable CGI for database applications\nLoadModule cgi_module modules/mod_cgi.so\n\n&lt;Directory &quot;/var/www/cgi-bin&quot;&gt;\n    AllowOverride None\n    Options +ExecCGI\n    AddHandler cgi-script .cgi .pl .py\n    Require all granted\n&lt;/Directory&gt;\n\n# Python WSGI for database applications\nLoadModule wsgi_module modules/mod_wsgi.so\n\nWSGIDaemonProcess myapp python-home=/path/to/venv python-path=/path/to/app\nWSGIProcessGroup myapp\nWSGIScriptAlias / /path/to/app/app.wsgi</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-level-tuning\" class=\"mobile-header\">System-level Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase system limits for Apache\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\napache soft nofile 65535\napache hard nofile 65535\nwww-data soft nofile 65535\nwww-data hard nofile 65535\nEOF\n\n# Kernel optimization for web servers\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Apache optimization\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\n\n# Memory management\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-performance-settings\" class=\"mobile-header\">Apache Performance Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Optimized MPM Event configuration\n&lt;IfModule mpm_event_module&gt;\n    StartServers             4\n    MinSpareThreads         25\n    MaxSpareThreads        75 \n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    ThreadLimit             64\n    ServerLimit             16\n    AsyncRequestWorkerFactor 2\n&lt;/IfModule&gt;\n\n# Connection settings\nKeepAlive On\nKeepAliveTimeout 15\nMaxKeepAliveRequests 100\n\n# Timeout settings\nTimeout 60\nLimitRequestLine 4094\nLimitRequestFieldSize 8190\nLimitRequestFields 100\nLimitRequestBody 10485760\n\n# Buffer settings\nEnableSendfile On\nEnableMMAP On</code></pre>\n      </div>\n    </div>\n<h3 id=\"caching-configuration\" class=\"mobile-header\">Caching Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Enable caching modules\nLoadModule cache_module modules/mod_cache.so\nLoadModule cache_disk_module modules/mod_cache_disk.so\n\n# Disk cache configuration\n&lt;IfModule mod_cache_disk.c&gt;\n    CacheRoot /var/cache/apache2\n    CacheDirLevels 2\n    CacheDirLength 1\n    CacheEnable disk /\n    CacheIgnoreHeaders Set-Cookie\n    CacheDefaultExpire 3600\n    CacheMaxExpire 86400\n    CacheLastModifiedFactor 0.1\n    CacheHeader on\n&lt;/IfModule&gt;\n\n# Memory cache (alternative to disk cache)\nLoadModule cache_socache_module modules/mod_cache_socache.so\n\n&lt;IfModule mod_cache_socache.c&gt;\n    CacheEnable socache /\n    CacheSocache shmcb\n    CacheSocacheMaxSize 102400\n&lt;/IfModule&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"content-optimization\" class=\"mobile-header\">Content Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Compression\n&lt;IfModule mod_deflate.c&gt;\n    SetOutputFilter DEFLATE\n    AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain\n    AddOutputFilterByType DEFLATE application/javascript application/xml+rss application/xml\n    AddOutputFilterByType DEFLATE application/json application/x-javascript application/xhtml+xml\n    \n    # Don&#039;t compress images or binaries\n    SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|webp|pdf|zip|rar|exe)$ no-gzip\n    \n    # Compression level (1-9, 6 is good balance)\n    DeflateCompressionLevel 6\n&lt;/IfModule&gt;\n\n# Static file caching\n&lt;IfModule mod_expires.c&gt;\n    ExpiresActive On\n    \n    # Images\n    ExpiresByType image/jpg &quot;access plus 1 year&quot;\n    ExpiresByType image/jpeg &quot;access plus 1 year&quot;\n    ExpiresByType image/gif &quot;access plus 1 year&quot;\n    ExpiresByType image/png &quot;access plus 1 year&quot;\n    ExpiresByType image/webp &quot;access plus 1 year&quot;\n    ExpiresByType image/svg+xml &quot;access plus 1 year&quot;\n    \n    # CSS and JavaScript\n    ExpiresByType text/css &quot;access plus 1 month&quot;\n    ExpiresByType application/javascript &quot;access plus 1 month&quot;\n    ExpiresByType application/x-javascript &quot;access plus 1 month&quot;\n    \n    # Fonts\n    ExpiresByType font/woff &quot;access plus 1 year&quot;\n    ExpiresByType font/woff2 &quot;access plus 1 year&quot;\n    ExpiresByType application/font-woff &quot;access plus 1 year&quot;\n    ExpiresByType application/font-woff2 &quot;access plus 1 year&quot;\n    \n    # Icons\n    ExpiresByType image/x-icon &quot;access plus 1 year&quot;\n    ExpiresByType image/vnd.microsoft.icon &quot;access plus 1 year&quot;\n    \n    # HTML\n    ExpiresByType text/html &quot;access plus 300 seconds&quot;\n    \n    # Default\n    ExpiresDefault &quot;access plus 1 day&quot;\n&lt;/IfModule&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Enable server-status module\nLoadModule status_module modules/mod_status.so\n\n&lt;Location &quot;/server-status&quot;&gt;\n    SetHandler server-status\n    Require ip 127.0.0.1\n    Require ip ::1\n&lt;/Location&gt;\n\n&lt;Location &quot;/server-info&quot;&gt;\n    SetHandler server-info\n    Require ip 127.0.0.1\n    Require ip ::1\n&lt;/Location&gt;\n\n# Extended status\nExtendedStatus On</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-analysis\" class=\"mobile-header\">Log Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Apache access logs\ntail -f /var/log/apache2/access.log  # Debian/Ubuntu\ntail -f /var/log/httpd/access_log    # RHEL/CentOS\n\n# Monitor error logs\ntail -f /var/log/apache2/error.log   # Debian/Ubuntu\ntail -f /var/log/httpd/error_log     # RHEL/CentOS\n\n# Analyze top IPs\nawk &#039;{print $1}&#039; /var/log/apache2/access.log | sort | uniq -c | sort -rn | head -10\n\n# Analyze response codes\nawk &#039;{print $9}&#039; /var/log/apache2/access.log | sort | uniq -c | sort -rn\n\n# Analyze most requested files\nawk &#039;{print $7}&#039; /var/log/apache2/access.log | sort | uniq -c | sort -rn | head -10\n\n# Check for errors\ngrep &quot;error&quot; /var/log/apache2/error.log | tail -10</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-tools\" class=\"mobile-header\">External Monitoring Tools</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install monitoring tools\n# GoAccess for real-time log analysis\nsudo apt install goaccess  # Ubuntu/Debian\nsudo dnf install goaccess  # RHEL/CentOS\n\n# Real-time analysis\ngoaccess /var/log/apache2/access.log -c\n\n# Generate HTML report\ngoaccess /var/log/apache2/access.log -o /var/www/html/stats.html --log-format=COMBINED --real-time-html\n\n# Install htop for process monitoring\nsudo apt install htop\nhtop -p $(pgrep apache2 | head -5 | tr &#039;\\n&#039; &#039;,&#039; | sed &#039;s/,$//&#039;)</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-monitoring\" class=\"mobile-header\">Performance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Apache processes\nps aux | grep apache2 | grep -v grep\n\n# Monitor memory usage\nps aux --sort=-%mem | grep apache2 | head -10\n\n# Monitor connection counts\nss -tan | grep :80 | wc -l\nss -tan | grep :443 | wc -l\n\n# Check server-status (if enabled)\ncurl http://localhost/server-status\ncurl http://localhost/server-status?auto  # Machine readable\n\n# Monitor file descriptors\nlsof -u apache2 | wc -l  # Ubuntu/Debian\nlsof -u apache | wc -l   # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"configuration-backup\" class=\"mobile-header\">Configuration Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-apache-config.sh\n\nBACKUP_DIR=&quot;/backup/apache/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Detect Apache configuration directory\nif [ -d /etc/apache2 ]; then\n    # Debian/Ubuntu\n    CONFIG_DIR=&quot;/etc/apache2&quot;\n    LOG_DIR=&quot;/var/log/apache2&quot;\n    WEB_DIR=&quot;/var/www&quot;\nelif [ -d /etc/httpd ]; then\n    # RHEL/CentOS\n    CONFIG_DIR=&quot;/etc/httpd&quot;\n    LOG_DIR=&quot;/var/log/httpd&quot;\n    WEB_DIR=&quot;/var/www&quot;\nfi\n\n# Backup Apache configuration\ntar czf &quot;$BACKUP_DIR/apache-config.tar.gz&quot; -C / &quot;${CONFIG_DIR#/}&quot;\n\n# Backup website files\ntar czf &quot;$BACKUP_DIR/apache-sites.tar.gz&quot; -C &quot;$WEB_DIR&quot; .\n\n# Backup SSL certificates\nif [ -d /etc/letsencrypt ]; then\n    tar czf &quot;$BACKUP_DIR/ssl-certs.tar.gz&quot; -C /etc letsencrypt\nfi\n\n# Backup recent logs (last 7 days)\nfind &quot;$LOG_DIR&quot; -name &quot;*.log&quot; -mtime -7 -exec tar czf &quot;$BACKUP_DIR/apache-logs.tar.gz&quot; {} +\n\n# Package version info\nif command -v apache2ctl &amp;&gt; /dev/null; then\n    apache2ctl -v &gt; &quot;$BACKUP_DIR/version.txt&quot;\nelif command -v httpd &amp;&gt; /dev/null; then\n    httpd -v &gt; &quot;$BACKUP_DIR/version.txt&quot;\nfi\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"website-backup\" class=\"mobile-header\">Website Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-websites.sh\n\nBACKUP_DIR=&quot;/backup/websites/$(date +%Y%m%d_%H%M%S)&quot;\nWEB_ROOT=&quot;/var/www/html&quot;\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Backup all websites\nfor site in &quot;$WEB_ROOT&quot;/*; do\n    if [ -d &quot;$site&quot; ]; then\n        site_name=$(basename &quot;$site&quot;)\n        echo &quot;Backing up $site_name...&quot;\n        tar czf &quot;$BACKUP_DIR/${site_name}.tar.gz&quot; -C &quot;$WEB_ROOT&quot; &quot;$site_name&quot;\n    fi\ndone\n\n# Backup databases (if applicable)\nif command -v mysqldump &amp;&gt; /dev/null; then\n    for db in $(mysql -e &quot;SHOW DATABASES;&quot; | grep -v -E &quot;^(Database|information_schema|performance_schema|mysql|sys)$&quot;); do\n        mysqldump &quot;$db&quot; | gzip &gt; &quot;$BACKUP_DIR/${db}.sql.gz&quot;\n    done\nfi\n\n# Keep only last 30 days of backups\nfind /backup/websites -type d -mtime +30 -exec rm -rf {} + 2&gt;/dev/null\n\necho &quot;Website backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# restore-apache.sh\n\nBACKUP_DIR=&quot;$1&quot;\nif [ -z &quot;$BACKUP_DIR&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-directory&gt;&quot;\n    exit 1\nfi\n\n# Stop Apache\nif command -v systemctl &amp;&gt; /dev/null; then\n    sudo systemctl stop apache2 || sudo systemctl stop httpd\nelif command -v service &amp;&gt; /dev/null; then\n    sudo service apache2 stop || sudo service httpd stop\nfi\n\n# Restore configuration\nif [ -f &quot;$BACKUP_DIR/apache-config.tar.gz&quot; ]; then\n    sudo tar xzf &quot;$BACKUP_DIR/apache-config.tar.gz&quot; -C /\n    echo &quot;Configuration restored&quot;\nfi\n\n# Restore websites\nif [ -f &quot;$BACKUP_DIR/apache-sites.tar.gz&quot; ]; then\n    sudo tar xzf &quot;$BACKUP_DIR/apache-sites.tar.gz&quot; -C /var/www\n    echo &quot;Websites restored&quot;\nfi\n\n# Restore SSL certificates\nif [ -f &quot;$BACKUP_DIR/ssl-certs.tar.gz&quot; ]; then\n    sudo tar xzf &quot;$BACKUP_DIR/ssl-certs.tar.gz&quot; -C /etc\n    echo &quot;SSL certificates restored&quot;\nfi\n\n# Test configuration\nif command -v apache2ctl &amp;&gt; /dev/null; then\n    sudo apache2ctl configtest\n    if [ $? -eq 0 ]; then\n        sudo systemctl start apache2\n    fi\nelif command -v httpd &amp;&gt; /dev/null; then\n    sudo httpd -t\n    if [ $? -eq 0 ]; then\n        sudo systemctl start httpd\n    fi\nfi\n\necho &quot;Restore completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"automated-backup\" class=\"mobile-header\">Automated Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create cron job for daily backups\nsudo tee /etc/cron.d/apache-backup &lt;&lt;EOF\n# Apache daily backup\n0 2 * * * root /usr/local/bin/backup-apache-config.sh\n0 3 * * * root /usr/local/bin/backup-websites.sh\nEOF\n\n# Make scripts executable\nsudo chmod +x /usr/local/bin/backup-apache-config.sh\nsudo chmod +x /usr/local/bin/backup-websites.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Apache won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check configuration syntax\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS\n\n# Check error logs\nsudo tail -20 /var/log/apache2/error.log  # Debian/Ubuntu\nsudo tail -20 /var/log/httpd/error_log    # RHEL/CentOS\n\n# Check port conflicts\nsudo ss -tlnp | grep :80\nsudo lsof -i :80\n\n# Check permissions\nls -la /var/www/html\nps aux | grep apache2</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Permission denied errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Fix ownership\nsudo chown -R www-data:www-data /var/www/html  # Debian/Ubuntu\nsudo chown -R apache:apache /var/www/html      # RHEL/CentOS\n\n# Fix permissions\nsudo find /var/www/html -type d -exec chmod 755 {} \\;\nsudo find /var/www/html -type f -exec chmod 644 {} \\;\n\n# Check SELinux (RHEL/CentOS)\ngetenforce\nsudo setsebool -P httpd_can_network_connect 1\nsudo restorecon -Rv /var/www/html</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Virtual host not working</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check virtual host configuration\napache2ctl -S  # Debian/Ubuntu\nhttpd -S       # RHEL/CentOS\n\n# Enable virtual host (Debian/Ubuntu)\nsudo a2ensite example.com.conf\nsudo systemctl reload apache2\n\n# Test virtual host\ncurl -H &quot;Host: example.com&quot; http://localhost/</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>SSL certificate issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check certificate files\nsudo openssl x509 -in /etc/ssl/certs/example.com.crt -text -noout\n\n# Test SSL configuration\necho | openssl s_client -servername example.com -connect example.com:443\n\n# Check SSL module\napache2ctl -M | grep ssl  # Debian/Ubuntu\nhttpd -M | grep ssl       # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Enable debug logging\nLogLevel debug\n\n# Module-specific debug\nLogLevel ssl:debug\nLogLevel rewrite:debug\n\n# Custom debug log format\nLogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b \\&quot;%{Referer}i\\&quot; \\&quot;%{User-agent}i\\&quot; %D&quot; debug\nCustomLog /var/log/apache2/debug.log debug</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-issues\" class=\"mobile-header\">Performance Issues</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Apache processes\ntop -p $(pgrep apache2 | head -5 | tr &#039;\\n&#039; &#039;,&#039; | sed &#039;s/,$//&#039;)\n\n# Check memory usage\nps aux --sort=-%mem | grep apache2\n\n# Monitor connections\nwatch &#039;ss -tan | grep :80 | wc -l&#039;\n\n# Check slow queries (if applicable)\ngrep &quot;taking too long&quot; /var/log/apache2/error.log\n\n# Analyze configuration\napache2ctl -t -D DUMP_VHOSTS\napache2ctl -t -D DUMP_MODULES</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update httpd\nsudo dnf update httpd httpd-tools mod_ssl\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade apache2 apache2-utils libapache2-mod-ssl\n\n# Arch Linux\nsudo pacman -Syu apache\n\n# Alpine Linux\napk update\napk upgrade apache2\n\n# openSUSE\nsudo zypper update apache2\n\n# FreeBSD\npkg update\npkg upgrade apache24\n\n# macOS\nbrew upgrade httpd\n\n# Always test configuration after update\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS\n\n# Graceful restart to apply updates\nsudo systemctl reload apache2  # Debian/Ubuntu\nsudo systemctl reload httpd    # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-rotation\" class=\"mobile-header\">Log Rotation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation for Apache\nsudo tee /etc/logrotate.d/apache2 &lt;&lt;EOF\n/var/log/apache2/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 640 root adm\n    sharedscripts\n    postrotate\n        if /bin/pidof apache2 &gt; /dev/null ; then \\\n            /usr/sbin/apache2ctl graceful &gt; /dev/null; \\\n        fi\n    endscript\n}\nEOF\n\n# For RHEL/CentOS\nsudo tee /etc/logrotate.d/httpd &lt;&lt;EOF\n/var/log/httpd/*log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    sharedscripts\n    postrotate\n        /bin/systemctl reload httpd.service &gt; /dev/null 2&gt;/dev/null || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# apache-health-check.sh\n\n# Check if Apache is running\nif ! pgrep apache2 &gt; /dev/null &amp;&amp; ! pgrep httpd &gt; /dev/null; then\n    echo &quot;CRITICAL: Apache is not running&quot;\n    exit 2\nfi\n\n# Check if Apache responds to HTTP requests\nif ! curl -f -s http://localhost &gt; /dev/null; then\n    echo &quot;CRITICAL: Apache not responding to HTTP requests&quot;\n    exit 2\nfi\n\n# Check configuration syntax\nif command -v apache2ctl &amp;&gt; /dev/null; then\n    if ! apache2ctl configtest &amp;&gt; /dev/null; then\n        echo &quot;WARNING: Apache configuration has syntax errors&quot;\n        exit 1\n    fi\nelif command -v httpd &amp;&gt; /dev/null; then\n    if ! httpd -t &amp;&gt; /dev/null; then\n        echo &quot;WARNING: Apache configuration has syntax errors&quot;\n        exit 1\n    fi\nfi\n\n# Check disk space for logs\nLOG_USAGE=$(df /var/log | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ &quot;$LOG_USAGE&quot; -gt 90 ]; then\n    echo &quot;WARNING: Log directory is ${LOG_USAGE}% full&quot;\n    exit 1\nfi\n\necho &quot;OK: Apache is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"cleanup-tasks\" class=\"mobile-header\">Cleanup Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean old log files\nfind /var/log/apache2 -name &quot;*.log.*&quot; -mtime +30 -delete  # Debian/Ubuntu\nfind /var/log/httpd -name &quot;*log.*&quot; -mtime +30 -delete     # RHEL/CentOS\n\n# Clean Apache cache\nrm -rf /var/cache/apache2/*\n\n# Clean temporary files\nfind /tmp -name &quot;apache*&quot; -mtime +7 -delete\n\n# Optimize log files (remove old entries)\nsudo journalctl --vacuum-time=30d</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"php-integration\" class=\"mobile-header\">PHP Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PHP\nsudo apt install php libapache2-mod-php  # Ubuntu/Debian\nsudo dnf install php php-cli              # RHEL/CentOS\n\n# Enable PHP module\nsudo a2enmod php8.1  # Ubuntu/Debian\n\n# Test PHP\necho &quot;&lt;?php phpinfo(); ?&gt;&quot; | sudo tee /var/www/html/info.php</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-integration\" class=\"mobile-header\">WordPress Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:443&gt;\n    ServerName blog.example.com\n    DocumentRoot /var/www/wordpress\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/blog.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/blog.example.com/privkey.pem\n    \n    &lt;Directory /var/www/wordpress&gt;\n        AllowOverride All\n        Options -Indexes +FollowSymLinks\n        Require all granted\n    &lt;/Directory&gt;\n    \n    # WordPress-specific rules\n    RewriteEngine On\n    RewriteRule ^/wp-admin/install.php$ - [F]\n    RewriteRule ^/wp-config-sample.php$ - [F]\n    \n    # Security for wp-config.php\n    &lt;Files wp-config.php&gt;\n        Require all denied\n    &lt;/Files&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"python-wsgi-integration\" class=\"mobile-header\">Python WSGI Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Load WSGI module\nLoadModule wsgi_module modules/mod_wsgi.so\n\n&lt;VirtualHost *:443&gt;\n    ServerName app.example.com\n    DocumentRoot /var/www/python-app\n    \n    WSGIDaemonProcess app python-home=/var/www/python-app/venv python-path=/var/www/python-app\n    WSGIProcessGroup app\n    WSGIScriptAlias / /var/www/python-app/app.wsgi\n    \n    &lt;Directory /var/www/python-app&gt;\n        WSGIApplicationGroup %{GLOBAL}\n        Require all granted\n    &lt;/Directory&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-proxy-integration\" class=\"mobile-header\">Node.js Proxy Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:443&gt;\n    ServerName node.example.com\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:3000/\n    ProxyPassReverse / http://localhost:3000/\n    \n    # WebSocket support\n    ProxyPass /socket.io/ ws://localhost:3000/socket.io/\n    ProxyPassReverse /socket.io/ ws://localhost:3000/socket.io/\n    \n    # Static files served by Apache\n    Alias /static /var/www/node-app/public\n    &lt;Directory /var/www/node-app/public&gt;\n        Require all granted\n        ExpiresActive On\n        ExpiresDefault &quot;access plus 1 year&quot;\n    &lt;/Directory&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/apache/httpd\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/2.4/misc/security_tips.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/2.4/misc/perf-tuning.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/2.4/mod/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Apache Modules</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/2.4/vhosts/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Virtual Hosts Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/2.4/ssl/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">SSL/TLS Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/lists.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Mailing Lists</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"24 min","wordCount":4766,"lastBuilt":"2025-09-14T01:30:36.529Z"},{"name":"apache-kafka","displayName":"Apache Kafka","slug":"apache-kafka","description":"Repo for apache-kafka","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/apache-kafka","updatedAt":"2025-09-08T03:05:12Z","createdAt":"2025-09-08T03:05:01Z","readmeRaw":"## 👋 Welcome to apache-kafka 🚀  \n\napache-kafka README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-apache-kafka\" class=\"mobile-header\">👋 Welcome to apache-kafka 🚀  </h2>\n<p class=\"mobile-paragraph\">apache-kafka README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:46.894Z"},{"name":"caddy","displayName":"Caddy","slug":"caddy","description":"Repo for caddy","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/caddy","updatedAt":"2025-09-08T03:05:30Z","createdAt":"2025-09-08T03:05:19Z","readmeRaw":"## 👋 Welcome to caddy 🚀  \n\ncaddy README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-caddy\" class=\"mobile-header\">👋 Welcome to caddy 🚀  </h2>\n<p class=\"mobile-paragraph\">caddy README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:46.753Z"},{"name":"certbot","displayName":"Certbot","slug":"certbot","description":"Repo for certbot","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/certbot","updatedAt":"2025-09-08T03:05:44Z","createdAt":"2025-09-08T03:05:34Z","readmeRaw":"## 👋 Welcome to certbot 🚀  \n\nDescription  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-certbot\" class=\"mobile-header\">👋 Welcome to certbot 🚀  </h2>\n<p class=\"mobile-paragraph\">Description  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":14,"lastBuilt":"2025-09-14T01:30:46.606Z"},{"name":"code-server","displayName":"Code Server","slug":"code-server","description":"Repo for code-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/code-server","updatedAt":"2025-09-08T03:06:11Z","createdAt":"2025-09-08T03:06:01Z","readmeRaw":"## 👋 Welcome to code-server 🚀  \n\ncode-server README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-code-server\" class=\"mobile-header\">👋 Welcome to code-server 🚀  </h2>\n<p class=\"mobile-paragraph\">code-server README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:46.376Z"},{"name":"databases","displayName":"Databases","slug":"databases","description":"Repo for databases","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/databases","updatedAt":"2025-09-14T01:29:50Z","createdAt":"2023-08-28T03:47:28Z","readmeRaw":"# Database Installation Guide\n\nComprehensive installation and configuration guide for popular database management systems including MySQL/MariaDB, PostgreSQL, MongoDB, and more. Complete with security hardening and performance optimization for production environments.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for production\n- SSD storage recommended for database files\n- Network connectivity for replication setups (if applicable)\n\n## MySQL/MariaDB Installation\n\n### Ubuntu/Debian\n```bash\n# Update system\nsudo apt update\n\n# Install MariaDB (recommended over MySQL)\nsudo apt install -y mariadb-server mariadb-client\n\n# Or install MySQL\nsudo apt install -y mysql-server mysql-client\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Enable and start service\nsudo systemctl enable --now mariadb  # or mysql\n\n# Verify installation\nmysql --version\nsudo systemctl status mariadb\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install MariaDB from official repository\nsudo tee /etc/yum.repos.d/MariaDB.repo > /dev/null <<EOF\n[mariadb]\nname = MariaDB\nbaseurl = https://mirror.its.dal.ca/mariadb/yum/10.11/rhel\\$releasever-\\$basearch\nmodule_hotfixes = 1\ngpgkey = https://mirror.its.dal.ca/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\nEOF\n\nsudo yum install -y MariaDB-server MariaDB-client MariaDB-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload\n```\n\n### MariaDB Production Configuration\n```bash\n# Create optimized configuration\nsudo tee /etc/mysql/mariadb.conf.d/50-server.cnf > /dev/null <<EOF\n[mysqld]\n# Connection and thread handling\nmax_connections = 500\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 4G  # 70-80% of RAM\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_io_capacity = 2000\ninnodb_io_capacity_max = 4000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8\ninnodb_open_files = 8192\n\n# Query cache (for read-heavy workloads)\nquery_cache_type = 1\nquery_cache_size = 256M\nquery_cache_limit = 2M\n\n# Temporary tables\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nsync_binlog = 1\nexpire_logs_days = 7\nbinlog_cache_size = 1M\n\n# Slow query log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\nlog_queries_not_using_indexes = 1\n\n# Security\nbind-address = 127.0.0.1  # Change for network access\nskip_name_resolve = 1\nlocal_infile = 0\n\n# SSL configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\nEOF\n\nsudo systemctl restart mariadb\n```\n\n### MySQL/MariaDB Security Hardening\n```bash\n# Create dedicated database user with limited privileges\nmysql -u root -p <<EOF\n-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create application user\nCREATE USER 'appuser'@'localhost' IDENTIFIED BY 'secure_app_password_2024';\nCREATE USER 'appuser'@'192.168.1.%' IDENTIFIED BY 'secure_app_password_2024';\n\n-- Grant minimal privileges\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'localhost';\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO 'appuser'@'192.168.1.%';\n\n-- Create read-only user for backups\nCREATE USER 'backup'@'localhost' IDENTIFIED BY 'backup_password_2024';\nGRANT SELECT, LOCK TABLES, SHOW VIEW, EVENT, TRIGGER ON *.* TO 'backup'@'localhost';\n\n-- Create replication user\nCREATE USER 'replication'@'%' IDENTIFIED BY 'replication_password_2024';\nGRANT REPLICATION SLAVE ON *.* TO 'replication'@'%';\n\n-- Remove default users and databases\nDROP DATABASE IF EXISTS test;\nDELETE FROM mysql.user WHERE User='';\nDELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');\n\n-- Secure privileges\nFLUSH PRIVILEGES;\nEOF\n\n# Generate SSL certificates for MySQL\nsudo mkdir -p /etc/mysql/ssl\ncd /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out ca-key.pem 4096\nsudo openssl req -new -x509 -nodes -days 3650 -key ca-key.pem -out ca-cert.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=MySQL-CA\"\n\n# Create server certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout server-key.pem -out server-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mysql.example.com\"\nsudo openssl x509 -req -days 365 -set_serial 01 -in server-req.pem -out server-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout client-key.pem -out client-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mysql-client\"\nsudo openssl x509 -req -days 365 -set_serial 02 -in client-req.pem -out client-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Set permissions\nsudo chown mysql:mysql /etc/mysql/ssl/*\nsudo chmod 600 /etc/mysql/ssl/*key.pem\nsudo chmod 644 /etc/mysql/ssl/*.pem\n\nsudo systemctl restart mariadb\n```\n\n## PostgreSQL Installation\n\n### Ubuntu/Debian PostgreSQL Setup\n```bash\n# Install PostgreSQL official repository\nsudo apt install -y wget ca-certificates\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\necho \"deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main\" | sudo tee /etc/apt/sources.list.d/pgdg.list\n\n# Update and install PostgreSQL 16\nsudo apt update\nsudo apt install -y postgresql-16 postgresql-client-16 postgresql-contrib-16\n\n# Enable and start service\nsudo systemctl enable --now postgresql\n\n# Configure PostgreSQL\nsudo -u postgres psql <<EOF\n-- Create application database\nCREATE DATABASE myapp WITH ENCODING='UTF8' LC_COLLATE='en_US.UTF-8' LC_CTYPE='en_US.UTF-8' TEMPLATE=template0;\n\n-- Create application user\nCREATE USER appuser WITH ENCRYPTED PASSWORD 'secure_app_password_2024';\nGRANT ALL PRIVILEGES ON DATABASE myapp TO appuser;\n\n-- Create read-only user\nCREATE USER readonly WITH ENCRYPTED PASSWORD 'readonly_password_2024';\nGRANT CONNECT ON DATABASE myapp TO readonly;\n\\c myapp\nGRANT USAGE ON SCHEMA public TO readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly;\n\n-- Security settings\nALTER SYSTEM SET password_encryption = 'scram-sha-256';\nSELECT pg_reload_conf();\nEOF\n```\n\n### RHEL/CentOS/Rocky Linux PostgreSQL\n```bash\n# Install PostgreSQL repository\nsudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install PostgreSQL 16\nsudo yum install -y postgresql16-server postgresql16 postgresql16-contrib postgresql16-devel\n\n# Initialize database\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\n\n# Enable and start service\nsudo systemctl enable --now postgresql-16\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5432/tcp\nsudo firewall-cmd --reload\n```\n\n### PostgreSQL Production Configuration\n```bash\n# Configure PostgreSQL for production\nsudo tee /var/lib/pgsql/16/data/postgresql.conf > /dev/null <<EOF\n# PostgreSQL 16 Production Configuration\n\n# Connection settings\nlisten_addresses = 'localhost'  # Change to '*' for network access\nport = 5432\nmax_connections = 200\nshared_buffers = 2GB  # 25% of RAM\neffective_cache_size = 8GB  # 75% of RAM\n\n# Memory settings\nwork_mem = 16MB\nmaintenance_work_mem = 512MB\ndynamic_shared_memory_type = posix\n\n# WAL settings\nwal_level = replica\nwal_buffers = 64MB\ncheckpoint_completion_target = 0.9\nmax_wal_size = 4GB\nmin_wal_size = 1GB\ncheckpoint_timeout = 15min\n\n# Query planner\nrandom_page_cost = 1.1  # For SSD\neffective_io_concurrency = 200\nmax_worker_processes = 8\nmax_parallel_workers_per_gather = 4\nmax_parallel_workers = 8\nmax_parallel_maintenance_workers = 4\n\n# Logging\nlog_destination = 'stderr'\nlogging_collector = on\nlog_directory = 'log'\nlog_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'\nlog_rotation_age = 1d\nlog_rotation_size = 100MB\nlog_min_duration_statement = 1000  # Log slow queries\nlog_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '\nlog_statement = 'ddl'  # Log DDL statements\nlog_lock_waits = on\n\n# SSL configuration\nssl = on\nssl_cert_file = '/var/lib/pgsql/16/data/ssl/server.crt'\nssl_key_file = '/var/lib/pgsql/16/data/ssl/server.key'\nssl_ca_file = '/var/lib/pgsql/16/data/ssl/ca.crt'\nssl_min_protocol_version = 'TLSv1.2'\nssl_prefer_server_ciphers = on\n\n# Security\npassword_encryption = scram-sha-256\nkrb_server_keyfile = ''\ndb_user_namespace = off\nrow_security = on\n\n# Autovacuum\nautovacuum = on\nautovacuum_max_workers = 4\nautovacuum_naptime = 1min\nautovacuum_vacuum_threshold = 50\nautovacuum_analyze_threshold = 50\nautovacuum_vacuum_scale_factor = 0.1\nautovacuum_analyze_scale_factor = 0.05\n\n# Background writer\nbgwriter_delay = 200ms\nbgwriter_lru_maxpages = 100\nbgwriter_lru_multiplier = 2.0\nbgwriter_flush_after = 512kB\n\n# Checkpointer\ncheckpoint_flush_after = 256kB\n\n# Statistics\ntrack_activities = on\ntrack_counts = on\ntrack_io_timing = on\ntrack_functions = all\nstats_temp_directory = 'pg_stat_tmp'\nEOF\n\n# Configure client authentication\nsudo tee /var/lib/pgsql/16/data/pg_hba.conf > /dev/null <<EOF\n# PostgreSQL Client Authentication Configuration\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# Local connections\nlocal   all             postgres                                peer\nlocal   all             all                                     scram-sha-256\n\n# IPv4 local connections\nhost    all             all             127.0.0.1/32            scram-sha-256\n\n# IPv6 local connections  \nhost    all             all             ::1/128                 scram-sha-256\n\n# Network connections (if needed)\nhostssl myapp           appuser         192.168.1.0/24          scram-sha-256\nhostssl myapp           readonly        192.168.1.0/24          scram-sha-256\n\n# Replication connections\nhostssl replication     replication     192.168.1.0/24          scram-sha-256\n\n# Deny all other connections\nhost    all             all             0.0.0.0/0               reject\nEOF\n\n# Generate SSL certificates\nsudo mkdir -p /var/lib/pgsql/16/data/ssl\ncd /var/lib/pgsql/16/data/ssl\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj \"/C=US/ST=State/L=City/O=Organization/CN=PostgreSQL-CA\"\n\nsudo openssl genrsa -out server.key 4096\nsudo openssl req -new -key server.key -out server.csr -subj \"/C=US/ST=State/L=City/O=Organization/CN=postgres.example.com\"\nsudo openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt\n\nsudo chown postgres:postgres /var/lib/pgsql/16/data/ssl/*\nsudo chmod 600 /var/lib/pgsql/16/data/ssl/*.key\nsudo chmod 644 /var/lib/pgsql/16/data/ssl/*.crt\n\nsudo systemctl restart postgresql-16\n```\n\n### PostgreSQL Security Hardening\n```bash\n# Advanced security configuration\nsudo -u postgres psql <<EOF\n-- Enable row-level security\nALTER SYSTEM SET row_security = on;\n\n-- Configure logging for security\nALTER SYSTEM SET log_statement = 'all';\nALTER SYSTEM SET log_connections = on;\nALTER SYSTEM SET log_disconnections = on;\nALTER SYSTEM SET log_lock_waits = on;\nALTER SYSTEM SET log_temp_files = 0;\n\n-- Password policies\nALTER SYSTEM SET password_encryption = 'scram-sha-256';\n\n-- Create roles with specific privileges\nCREATE ROLE app_read;\nGRANT CONNECT ON DATABASE myapp TO app_read;\nGRANT USAGE ON SCHEMA public TO app_read;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO app_read;\n\nCREATE ROLE app_write;\nGRANT app_read TO app_write;\nGRANT INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_write;\n\n-- Create application-specific user\nCREATE USER myapp_user WITH PASSWORD 'secure_password_2024';\nGRANT app_write TO myapp_user;\n\n-- Security functions\nCREATE OR REPLACE FUNCTION audit_trigger_function()\nRETURNS TRIGGER AS \\$\\$\nBEGIN\n    INSERT INTO audit_log (table_name, operation, old_values, new_values, user_name, timestamp)\n    VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), row_to_json(NEW), current_user, now());\n    RETURN COALESCE(NEW, OLD);\nEND;\n\\$\\$ LANGUAGE plpgsql;\n\n-- Reload configuration\nSELECT pg_reload_conf();\nEOF\n\n# Configure connection limits\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf > /dev/null <<EOF\n\n# Connection limiting per user/database\n# ALTER USER myapp_user CONNECTION LIMIT 50;\n# ALTER DATABASE myapp CONNECTION LIMIT 100;\nEOF\n```\n\n## MongoDB Installation\n\n### Ubuntu/Debian MongoDB Setup\n```bash\n# Import MongoDB public GPG key\nwget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -\n\n# Add MongoDB repository\necho \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n# Update and install MongoDB\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Verify installation\nmongosh --eval 'db.runCommand(\"connectionStatus\")'\n```\n\n### RHEL/CentOS/Rocky Linux MongoDB\n```bash\n# Add MongoDB repository\nsudo tee /etc/yum.repos.d/mongodb-org-7.0.repo > /dev/null <<EOF\n[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/7.0/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\nEOF\n\n# Install MongoDB\nsudo yum install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27017/tcp\nsudo firewall-cmd --reload\n```\n\n### MongoDB Production Configuration\n```bash\n# Create secure MongoDB configuration\nsudo tee /etc/mongod.conf > /dev/null <<EOF\n# MongoDB Production Configuration\n\nstorage:\n  dbPath: /var/lib/mongo\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 4  # 50% of RAM\n      journalCompressor: snappy\n      directoryForIndexes: false\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n  quiet: false\n  logRotate: reopen\n  component:\n    accessControl:\n      verbosity: 1\n    command:\n      verbosity: 1\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1  # Change for network access\n  maxIncomingConnections: 1000\n  compression:\n    compressors: snappy,zstd\n  ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb/mongodb.pem\n    CAFile: /etc/ssl/mongodb/ca.pem\n    allowInvalidHostnames: false\n    allowInvalidCertificates: false\n\nsecurity:\n  authorization: enabled\n  keyFile: /etc/mongodb/mongodb-keyfile\n  clusterAuthMode: x509\n  javascriptEnabled: false\n\noperationProfiling:\n  mode: slowOp\n  slowOpThresholdMs: 100\n  slowOpSampleRate: 0.02\n\nreplication:\n  replSetName: rs0\n  enableMajorityReadConcern: true\n\nsharding:\n  clusterRole: shardsvr  # or configsvr for config servers\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid\n  timeZoneInfo: /usr/share/zoneinfo\n\nsetParameter:\n  authenticationMechanisms: SCRAM-SHA-1,SCRAM-SHA-256\n  scramIterationCount: 15000\n  failIndexKeyTooLong: false\n  notablescan: 1  # Disable table scans in production\nEOF\n\n# Create MongoDB keyfile for replica set authentication\nsudo openssl rand -base64 756 | sudo tee /etc/mongodb/mongodb-keyfile\nsudo chmod 600 /etc/mongodb/mongodb-keyfile\nsudo chown mongod:mongod /etc/mongodb/mongodb-keyfile\n\n# Generate SSL certificates for MongoDB\nsudo mkdir -p /etc/ssl/mongodb\ncd /etc/ssl/mongodb\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=MongoDB-CA\"\n\nsudo openssl genrsa -out mongodb.key 4096\nsudo openssl req -new -key mongodb.key -out mongodb.csr -subj \"/C=US/ST=State/L=City/O=Organization/CN=mongodb.example.com\"\nsudo openssl x509 -req -days 365 -in mongodb.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out mongodb.crt\n\n# Combine certificate and key for MongoDB\nsudo cat mongodb.crt mongodb.key | sudo tee mongodb.pem\nsudo chmod 600 /etc/ssl/mongodb/*.key /etc/ssl/mongodb/*.pem\nsudo chown mongod:mongod /etc/ssl/mongodb/*\n\nsudo systemctl restart mongod\n```\n\n### MongoDB Security Setup\n```bash\n# Initialize MongoDB security\nmongosh --ssl --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem --sslCAFile /etc/ssl/mongodb/ca.pem <<EOF\n// Create admin user\nuse admin\ndb.createUser({\n  user: \"admin\",\n  pwd: \"secure_admin_password_2024\",\n  roles: [\n    { role: \"userAdminAnyDatabase\", db: \"admin\" },\n    { role: \"readWriteAnyDatabase\", db: \"admin\" },\n    { role: \"dbAdminAnyDatabase\", db: \"admin\" },\n    { role: \"clusterAdmin\", db: \"admin\" }\n  ]\n})\n\n// Create application user\nuse myapp\ndb.createUser({\n  user: \"appuser\",\n  pwd: \"secure_app_password_2024\",\n  roles: [\n    { role: \"readWrite\", db: \"myapp\" }\n  ]\n})\n\n// Create read-only user\ndb.createUser({\n  user: \"readonly\",\n  pwd: \"readonly_password_2024\",\n  roles: [\n    { role: \"read\", db: \"myapp\" }\n  ]\n})\n\n// Create backup user\nuse admin\ndb.createUser({\n  user: \"backup\",\n  pwd: \"backup_password_2024\",\n  roles: [\n    { role: \"backup\", db: \"admin\" },\n    { role: \"restore\", db: \"admin\" }\n  ]\n})\n\n// Initialize replica set (if using replication)\nrs.initiate({\n  _id: \"rs0\",\n  members: [\n    { _id: 0, host: \"mongodb1.example.com:27017\", priority: 2 },\n    { _id: 1, host: \"mongodb2.example.com:27017\", priority: 1 },\n    { _id: 2, host: \"mongodb3.example.com:27017\", priority: 1, arbiterOnly: true }\n  ]\n})\nEOF\n```\n\n## Redis Installation and Configuration\n\n### Redis Setup (All Distributions)\n```bash\n# Ubuntu/Debian\nsudo apt install -y redis-server redis-tools\n\n# RHEL/CentOS\nsudo yum install -y redis\n\n# Fedora\nsudo dnf install -y redis\n\n# Arch Linux\nsudo pacman -S redis\n\n# Configure Redis for production\nsudo tee /etc/redis/redis.conf > /dev/null <<EOF\n# Redis Production Configuration\n\n# Network\nbind 127.0.0.1 ::1  # Change for network access\nport 6379\ntcp-backlog 511\ntimeout 300\ntcp-keepalive 300\n\n# Security\nrequirepass redis_secure_password_2024\nrename-command FLUSHDB \"FLUSHDB_9a8b7c6d5e4f3g2h1\"\nrename-command FLUSHALL \"FLUSHALL_h1g2f3e4d5c6b7a8\"\nrename-command DEBUG \"DEBUG_8a7b6c5d4e3f2g1h\"\nrename-command CONFIG \"CONFIG_1h2g3f4e5d6c7b8a\"\n\n# SSL/TLS (Redis 6.0+)\ntls-port 6380\nport 0  # Disable non-TLS port\ntls-cert-file /etc/redis/tls/redis.crt\ntls-key-file /etc/redis/tls/redis.key\ntls-ca-cert-file /etc/redis/tls/ca.crt\ntls-protocols \"TLSv1.2 TLSv1.3\"\ntls-prefer-server-ciphers yes\n\n# Memory management\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\nmaxmemory-samples 5\n\n# Persistence\nsave 900 1\nsave 300 10\nsave 60 10000\nrdbcompression yes\nrdbchecksum yes\ndbfilename redis.rdb\ndir /var/lib/redis/\n\n# AOF (Append Only File)\nappendonly yes\nappendfilename \"appendonly.aof\"\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n\n# Logging\nloglevel notice\nlogfile /var/log/redis/redis-server.log\nsyslog-enabled yes\nsyslog-ident redis\n\n# Slow log\nslowlog-log-slower-than 10000\nslowlog-max-len 128\n\n# Latency monitoring\nlatency-monitor-threshold 100\n\n# Client output buffer limits\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Advanced configuration\nhz 10\ndynamic-hz yes\naof-rewrite-incremental-fsync yes\nrdb-save-incremental-fsync yes\n\n# Lua scripting\nlua-time-limit 5000\nEOF\n\n# Generate Redis TLS certificates\nsudo mkdir -p /etc/redis/tls\ncd /etc/redis/tls\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj \"/C=US/ST=State/L=City/O=Organization/CN=Redis-CA\"\n\nsudo openssl genrsa -out redis.key 4096\nsudo openssl req -new -key redis.key -out redis.csr -subj \"/C=US/ST=State/L=City/O=Organization/CN=redis.example.com\"\nsudo openssl x509 -req -days 365 -in redis.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out redis.crt\n\nsudo chown redis:redis /etc/redis/tls/*\nsudo chmod 600 /etc/redis/tls/*.key\nsudo chmod 644 /etc/redis/tls/*.crt\n\nsudo systemctl restart redis-server\n```\n\n## Database Monitoring and Maintenance\n\n### Comprehensive Database Monitoring\n```bash\nsudo tee /usr/local/bin/database-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nMONITOR_LOG=\"/var/log/database-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${MONITOR_LOG}\n}\n\n# MySQL/MariaDB monitoring\nif command -v mysql >/dev/null 2>&1 && systemctl is-active mariadb >/dev/null 2>&1; then\n    log_message \"=== MySQL/MariaDB Monitoring ===\"\n    \n    # Connection count\n    MYSQL_CONNECTIONS=$(mysql -e \"SHOW STATUS LIKE 'Threads_connected';\" | tail -1 | awk '{print $2}')\n    MYSQL_MAX_CONNECTIONS=$(mysql -e \"SHOW VARIABLES LIKE 'max_connections';\" | tail -1 | awk '{print $2}')\n    log_message \"MySQL connections: ${MYSQL_CONNECTIONS}/${MYSQL_MAX_CONNECTIONS}\"\n    \n    # Query performance\n    SLOW_QUERIES=$(mysql -e \"SHOW STATUS LIKE 'Slow_queries';\" | tail -1 | awk '{print $2}')\n    log_message \"MySQL slow queries: ${SLOW_QUERIES}\"\n    \n    # Buffer pool hit ratio\n    BUFFER_HIT_RATIO=$(mysql -e \"\n      SELECT ROUND((1 - (Innodb_buffer_pool_reads / Innodb_buffer_pool_read_requests)) * 100, 2) as hit_ratio\n      FROM INFORMATION_SCHEMA.GLOBAL_STATUS \n      WHERE VARIABLE_NAME IN ('Innodb_buffer_pool_reads', 'Innodb_buffer_pool_read_requests');\" | tail -1)\n    log_message \"InnoDB buffer pool hit ratio: ${BUFFER_HIT_RATIO}%\"\nfi\n\n# PostgreSQL monitoring\nif command -v psql >/dev/null 2>&1 && systemctl is-active postgresql-16 >/dev/null 2>&1; then\n    log_message \"=== PostgreSQL Monitoring ===\"\n    \n    # Connection count\n    PG_CONNECTIONS=$(sudo -u postgres psql -t -c \"SELECT count(*) FROM pg_stat_activity;\")\n    PG_MAX_CONNECTIONS=$(sudo -u postgres psql -t -c \"SHOW max_connections;\")\n    log_message \"PostgreSQL connections: ${PG_CONNECTIONS}/${PG_MAX_CONNECTIONS}\"\n    \n    # Database size\n    PG_DB_SIZE=$(sudo -u postgres psql -t -c \"SELECT pg_size_pretty(pg_database_size('myapp'));\")\n    log_message \"PostgreSQL database size: ${PG_DB_SIZE}\"\n    \n    # Cache hit ratio\n    PG_CACHE_HIT=$(sudo -u postgres psql -t -c \"\n      SELECT round(sum(blks_hit)*100.0/sum(blks_hit+blks_read), 2) \n      FROM pg_stat_database WHERE datname='myapp';\")\n    log_message \"PostgreSQL cache hit ratio: ${PG_CACHE_HIT}%\"\n    \n    # Long running queries\n    LONG_QUERIES=$(sudo -u postgres psql -t -c \"\n      SELECT count(*) FROM pg_stat_activity \n      WHERE state = 'active' AND now() - query_start > interval '5 minutes';\")\n    log_message \"PostgreSQL long-running queries: ${LONG_QUERIES}\"\nfi\n\n# MongoDB monitoring\nif command -v mongosh >/dev/null 2>&1 && systemctl is-active mongod >/dev/null 2>&1; then\n    log_message \"=== MongoDB Monitoring ===\"\n    \n    # Connection count\n    MONGO_CONNECTIONS=$(mongosh --quiet --eval \"db.serverStatus().connections.current\")\n    MONGO_MAX_CONNECTIONS=$(mongosh --quiet --eval \"db.serverStatus().connections.available\")\n    log_message \"MongoDB connections: ${MONGO_CONNECTIONS}/${MONGO_MAX_CONNECTIONS}\"\n    \n    # Database statistics\n    MONGO_DB_SIZE=$(mongosh myapp --quiet --eval \"Math.round(db.stats().dataSize / 1024 / 1024) + ' MB'\")\n    log_message \"MongoDB database size: ${MONGO_DB_SIZE}\"\n    \n    # OpLog status (for replica sets)\n    if mongosh admin --quiet --eval \"rs.status().ok\" 2>/dev/null | grep -q \"1\"; then\n        OPLOG_SIZE=$(mongosh local --quiet --eval \"Math.round(db.oplog.rs.stats().maxSize / 1024 / 1024) + ' MB'\")\n        log_message \"MongoDB OpLog size: ${OPLOG_SIZE}\"\n    fi\nfi\n\n# Redis monitoring\nif command -v redis-cli >/dev/null 2>&1 && systemctl is-active redis >/dev/null 2>&1; then\n    log_message \"=== Redis Monitoring ===\"\n    \n    # Memory usage\n    REDIS_MEMORY=$(redis-cli info memory | grep used_memory_human: | cut -d: -f2)\n    REDIS_MAX_MEMORY=$(redis-cli config get maxmemory | tail -1)\n    log_message \"Redis memory usage: ${REDIS_MEMORY} / ${REDIS_MAX_MEMORY}\"\n    \n    # Connected clients\n    REDIS_CLIENTS=$(redis-cli info clients | grep connected_clients: | cut -d: -f2)\n    log_message \"Redis connected clients: ${REDIS_CLIENTS}\"\n    \n    # Hit ratio\n    REDIS_HITS=$(redis-cli info stats | grep keyspace_hits: | cut -d: -f2)\n    REDIS_MISSES=$(redis-cli info stats | grep keyspace_misses: | cut -d: -f2)\n    if [ ${REDIS_MISSES} -gt 0 ]; then\n        REDIS_HIT_RATIO=$(echo \"scale=2; ${REDIS_HITS} / (${REDIS_HITS} + ${REDIS_MISSES}) * 100\" | bc)\n        log_message \"Redis hit ratio: ${REDIS_HIT_RATIO}%\"\n    fi\nfi\n\nlog_message \"Database monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho \"*/5 * * * * root /usr/local/bin/database-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n### Database Backup Automation\n```bash\nsudo tee /usr/local/bin/database-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/databases\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{mysql,postgresql,mongodb,redis}\n\n# MySQL/MariaDB backup\nif command -v mysql >/dev/null 2>&1 && systemctl is-active mariadb >/dev/null 2>&1; then\n    echo \"Backing up MySQL/MariaDB...\"\n    \n    # Full backup with all databases\n    mysqldump --all-databases --single-transaction --routines --triggers --events \\\n      --master-data=2 --flush-logs --delete-master-logs \\\n      > ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Compress backup\n    gzip ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Individual database backup\n    mysqldump --single-transaction --routines --triggers myapp \\\n      > ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\n    gzip ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\nfi\n\n# PostgreSQL backup\nif command -v pg_dump >/dev/null 2>&1 && systemctl is-active postgresql-16 >/dev/null 2>&1; then\n    echo \"Backing up PostgreSQL...\"\n    \n    # Full cluster backup\n    sudo -u postgres pg_dumpall > ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\n    \n    # Individual database backup\n    sudo -u postgres pg_dump -Fc myapp > ${BACKUP_DIR}/postgresql/myapp-backup-${DATE}.dump\n    \n    # Compress SQL backup\n    gzip ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\nfi\n\n# MongoDB backup\nif command -v mongodump >/dev/null 2>&1 && systemctl is-active mongod >/dev/null 2>&1; then\n    echo \"Backing up MongoDB...\"\n    \n    # Full backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --out ${BACKUP_DIR}/mongodb/full-backup-${DATE}\n    \n    # Individual database backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --db myapp --out ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\n    \n    # Compress backups\n    tar -czf ${BACKUP_DIR}/mongodb/full-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb full-backup-${DATE}\n    tar -czf ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb myapp-backup-${DATE}\n    \n    # Remove uncompressed directories\n    rm -rf ${BACKUP_DIR}/mongodb/full-backup-${DATE} ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\nfi\n\n# Redis backup\nif command -v redis-cli >/dev/null 2>&1 && systemctl is-active redis >/dev/null 2>&1; then\n    echo \"Backing up Redis...\"\n    \n    # Trigger background save\n    redis-cli BGSAVE\n    \n    # Wait for save to complete\n    while [ \"$(redis-cli LASTSAVE)\" = \"$(redis-cli LASTSAVE)\" ]; do\n        sleep 1\n    done\n    \n    # Copy RDB file\n    cp /var/lib/redis/dump.rdb ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\n    gzip ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\nfi\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://database-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination database-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://database-backups/\n\n# Keep only last 14 days of backups\nfind ${BACKUP_DIR} -name \"*backup*\" -type f -mtime +14 -delete\n\n# Verify backup integrity\necho \"Verifying backup integrity...\"\nfor backup in ${BACKUP_DIR}/*/*.gz; do\n    if gzip -t \"$backup\" 2>/dev/null; then\n        echo \"✓ $(basename $backup) - OK\"\n    else\n        echo \"✗ $(basename $backup) - CORRUPTED\"\n    fi\ndone\n\necho \"Database backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-backup.sh\n\n# Schedule daily backups\necho \"0 1 * * * root /usr/local/bin/database-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## High Availability and Replication\n\n### MySQL/MariaDB Master-Slave Replication\n```bash\n# Configure master server\nsudo tee -a /etc/mysql/mariadb.conf.d/replication.cnf > /dev/null <<EOF\n[mysqld]\n# Replication settings\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = myapp\nsync_binlog = 1\nrelay-log = mysql-relay-bin\nrelay-log-recovery = 1\n\n# GTID replication (recommended)\ngtid_mode = ON\nenforce_gtid_consistency = ON\nlog_slave_updates = ON\nEOF\n\nmysql -u root -p <<EOF\n-- Create replication user\nCREATE USER 'replication'@'%' IDENTIFIED BY 'replication_password_2024';\nGRANT REPLICATION SLAVE ON *.* TO 'replication'@'%';\nFLUSH PRIVILEGES;\n\n-- Get master status\nSHOW MASTER STATUS;\nEOF\n\n# Configure slave server (server-id = 2)\n# On slave server:\nmysql -u root -p <<EOF\nCHANGE MASTER TO\n  MASTER_HOST='mysql-master.example.com',\n  MASTER_USER='replication',\n  MASTER_PASSWORD='replication_password_2024',\n  MASTER_AUTO_POSITION=1;\n\nSTART SLAVE;\nSHOW SLAVE STATUS\\G\nEOF\n```\n\n### PostgreSQL Streaming Replication\n```bash\n# Configure master server\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf > /dev/null <<EOF\n# Replication settings\nwal_level = replica\nmax_wal_senders = 10\nmax_replication_slots = 10\nwal_keep_size = 1GB\nhot_standby = on\narchive_mode = on\narchive_command = 'cp %p /var/lib/pgsql/16/archive/%f'\nEOF\n\n# Configure replication access\nsudo tee -a /var/lib/pgsql/16/data/pg_hba.conf > /dev/null <<EOF\n# Replication connections\nhostssl replication replication 192.168.1.0/24 scram-sha-256\nEOF\n\n# Create replication user\nsudo -u postgres psql <<EOF\nCREATE USER replication WITH REPLICATION ENCRYPTED PASSWORD 'replication_password_2024';\nEOF\n\n# Create archive directory\nsudo mkdir -p /var/lib/pgsql/16/archive\nsudo chown postgres:postgres /var/lib/pgsql/16/archive\n\nsudo systemctl restart postgresql-16\n\n# Setup slave server\n# On slave server, create base backup:\nsudo -u postgres pg_basebackup -h master.example.com -D /var/lib/pgsql/16/data -U replication -W -v -P -R\n```\n\n### MongoDB Replica Set Configuration\n```bash\n# Initialize replica set (run on primary node)\nmongosh admin <<EOF\nrs.initiate({\n  _id: \"rs0\",\n  version: 1,\n  protocolVersion: 1,\n  members: [\n    { \n      _id: 0, \n      host: \"mongodb1.example.com:27017\",\n      priority: 2,\n      votes: 1\n    },\n    { \n      _id: 1, \n      host: \"mongodb2.example.com:27017\",\n      priority: 1,\n      votes: 1\n    },\n    { \n      _id: 2, \n      host: \"mongodb3.example.com:27017\",\n      priority: 1,\n      votes: 1,\n      arbiterOnly: true\n    }\n  ],\n  settings: {\n    chainingAllowed: false,\n    heartbeatIntervalMillis: 2000,\n    heartbeatTimeoutSecs: 10,\n    electionTimeoutMillis: 10000,\n    catchUpTimeoutMillis: -1,\n    getLastErrorModes: {\n      majority: { \n        tags: { \n          dc: 1 \n        } \n      }\n    }\n  }\n})\n\n// Check replica set status\nrs.status()\n\n// Configure read preferences\nrs.conf()\nEOF\n\n# Configure MongoDB sharding (for large deployments)\n# Config server initialization:\nmongosh admin <<EOF\nrs.initiate({\n  _id: \"configReplSet\",\n  configsvr: true,\n  members: [\n    { _id: 0, host: \"config1.example.com:27019\" },\n    { _id: 1, host: \"config2.example.com:27019\" },\n    { _id: 2, host: \"config3.example.com:27019\" }\n  ]\n})\nEOF\n```\n\n### Redis Sentinel High Availability\n```bash\n# Configure Redis Sentinel for HA\nsudo tee /etc/redis/sentinel.conf > /dev/null <<EOF\n# Redis Sentinel Configuration\nport 26379\nsentinel deny-scripts-reconfig yes\n\n# Monitor Redis master\nsentinel monitor mymaster redis-master.example.com 6379 2\nsentinel auth-pass mymaster redis_secure_password_2024\nsentinel down-after-milliseconds mymaster 5000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 10000\n\n# Notification scripts\nsentinel notification-script mymaster /etc/redis/notify.sh\nsentinel client-reconfig-script mymaster /etc/redis/reconfig.sh\n\n# Security\nrequirepass sentinel_password_2024\nEOF\n\n# Create notification script\nsudo tee /etc/redis/notify.sh > /dev/null <<'EOF'\n#!/bin/bash\necho \"$(date): Redis failover event: $*\" >> /var/log/redis/sentinel.log\n# Add alerting logic here (email, Slack, etc.)\nEOF\n\n# Create reconfiguration script\nsudo tee /etc/redis/reconfig.sh > /dev/null <<'EOF'\n#!/bin/bash\necho \"$(date): Redis master changed to: $6:$7\" >> /var/log/redis/sentinel.log\n# Update application configuration, restart services, etc.\nEOF\n\nsudo chmod +x /etc/redis/{notify,reconfig}.sh\nsudo systemctl enable --now redis-sentinel\n```\n\n## Performance Optimization\n\n### Database Performance Tuning\n```bash\nsudo tee /usr/local/bin/database-performance-tune.sh > /dev/null <<'EOF'\n#!/bin/bash\n\ntune_mysql() {\n    echo \"Tuning MySQL/MariaDB performance...\"\n    \n    # Calculate optimal buffer pool size (70% of RAM)\n    TOTAL_RAM=$(free -b | awk 'NR==2{print $2}')\n    BUFFER_POOL_SIZE=$((TOTAL_RAM * 70 / 100))\n    \n    mysql -u root -p <<EOF\n-- Performance tuning\nSET GLOBAL innodb_buffer_pool_size = ${BUFFER_POOL_SIZE};\nSET GLOBAL query_cache_size = $((TOTAL_RAM * 5 / 100));\nSET GLOBAL thread_cache_size = 100;\nSET GLOBAL table_open_cache = 4096;\nSET GLOBAL innodb_io_capacity = 2000;\n\n-- Show current configuration\nSHOW VARIABLES LIKE 'innodb_buffer_pool_size';\nSHOW VARIABLES LIKE 'query_cache_size';\nEOF\n}\n\ntune_postgresql() {\n    echo \"Tuning PostgreSQL performance...\"\n    \n    # Use pg_tune recommendations\n    TOTAL_RAM_MB=$(($(free -m | awk 'NR==2{print $2}')))\n    SHARED_BUFFERS=$((TOTAL_RAM_MB / 4))\n    EFFECTIVE_CACHE=$((TOTAL_RAM_MB * 3 / 4))\n    \n    sudo -u postgres psql <<EOF\n-- Performance tuning\nALTER SYSTEM SET shared_buffers = '${SHARED_BUFFERS}MB';\nALTER SYSTEM SET effective_cache_size = '${EFFECTIVE_CACHE}MB';\nALTER SYSTEM SET work_mem = '16MB';\nALTER SYSTEM SET maintenance_work_mem = '256MB';\nALTER SYSTEM SET random_page_cost = 1.1;\nALTER SYSTEM SET effective_io_concurrency = 200;\n\n-- Reload configuration\nSELECT pg_reload_conf();\n\n-- Show current settings\nSHOW shared_buffers;\nSHOW effective_cache_size;\nEOF\n}\n\ntune_mongodb() {\n    echo \"Tuning MongoDB performance...\"\n    \n    # Calculate WiredTiger cache size (50% of RAM)\n    TOTAL_RAM_GB=$(($(free -g | awk 'NR==2{print $2}')))\n    CACHE_SIZE_GB=$((TOTAL_RAM_GB / 2))\n    \n    mongosh admin <<EOF\n// Performance tuning\ndb.adminCommand({\n  \"setParameter\": 1,\n  \"wiredTigerEngineRuntimeConfig\": \"cache_size=${CACHE_SIZE_GB}GB\"\n})\n\n// Show current cache usage\ndb.serverStatus().wiredTiger.cache\nEOF\n}\n\ntune_redis() {\n    echo \"Tuning Redis performance...\"\n    \n    # Calculate maxmemory (50% of RAM for dedicated Redis server)\n    TOTAL_RAM_BYTES=$(free -b | awk 'NR==2{print $2}')\n    MAX_MEMORY_BYTES=$((TOTAL_RAM_BYTES / 2))\n    \n    redis-cli CONFIG SET maxmemory ${MAX_MEMORY_BYTES}\n    redis-cli CONFIG SET maxmemory-policy allkeys-lru\n    redis-cli CONFIG REWRITE\n    \n    echo \"Redis maxmemory set to $(redis-cli CONFIG GET maxmemory | tail -1) bytes\"\n}\n\n# Check which databases are running and tune them\nif systemctl is-active mariadb >/dev/null 2>&1; then\n    tune_mysql\nfi\n\nif systemctl is-active postgresql-16 >/dev/null 2>&1; then\n    tune_postgresql\nfi\n\nif systemctl is-active mongod >/dev/null 2>&1; then\n    tune_mongodb\nfi\n\nif systemctl is-active redis >/dev/null 2>&1; then\n    tune_redis\nfi\n\necho \"Database performance tuning completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-performance-tune.sh\n```\n\n## Verification and Testing\n\n### Database Health Checks\n```bash\nsudo tee /usr/local/bin/database-health-check.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/database-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# MySQL/MariaDB health check\nif command -v mysql >/dev/null 2>&1; then\n    if systemctl is-active mariadb >/dev/null 2>&1; then\n        log_message \"✓ MariaDB service is running\"\n        \n        # Test connectivity\n        if mysql -e \"SELECT 1;\" >/dev/null 2>&1; then\n            log_message \"✓ MariaDB connectivity test passed\"\n        else\n            log_message \"✗ MariaDB connectivity test failed\"\n        fi\n        \n        # Check for errors in log\n        ERROR_COUNT=$(tail -100 /var/log/mysql/error.log | grep -i error | wc -l)\n        log_message \"ℹ MariaDB errors in last 100 log lines: ${ERROR_COUNT}\"\n    else\n        log_message \"✗ MariaDB service is not running\"\n    fi\nfi\n\n# PostgreSQL health check\nif command -v psql >/dev/null 2>&1; then\n    if systemctl is-active postgresql-16 >/dev/null 2>&1; then\n        log_message \"✓ PostgreSQL service is running\"\n        \n        # Test connectivity\n        if sudo -u postgres psql -c \"SELECT version();\" >/dev/null 2>&1; then\n            log_message \"✓ PostgreSQL connectivity test passed\"\n        else\n            log_message \"✗ PostgreSQL connectivity test failed\"\n        fi\n        \n        # Check replication lag (if slave)\n        if sudo -u postgres psql -t -c \"SELECT pg_is_in_recovery();\" | grep -q \"t\"; then\n            LAG=$(sudo -u postgres psql -t -c \"SELECT EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))::int;\")\n            log_message \"ℹ PostgreSQL replication lag: ${LAG} seconds\"\n        fi\n    else\n        log_message \"✗ PostgreSQL service is not running\"\n    fi\nfi\n\n# MongoDB health check\nif command -v mongosh >/dev/null 2>&1; then\n    if systemctl is-active mongod >/dev/null 2>&1; then\n        log_message \"✓ MongoDB service is running\"\n        \n        # Test connectivity\n        if mongosh --quiet --eval \"db.adminCommand('ping').ok\" 2>/dev/null | grep -q \"1\"; then\n            log_message \"✓ MongoDB connectivity test passed\"\n        else\n            log_message \"✗ MongoDB connectivity test failed\"\n        fi\n        \n        # Check replica set status\n        if mongosh admin --quiet --eval \"rs.status().ok\" 2>/dev/null | grep -q \"1\"; then\n            PRIMARY_COUNT=$(mongosh admin --quiet --eval \"rs.status().members.filter(m => m.stateStr === 'PRIMARY').length\")\n            log_message \"ℹ MongoDB replica set has ${PRIMARY_COUNT} primary node(s)\"\n        fi\n    else\n        log_message \"✗ MongoDB service is not running\"\n    fi\nfi\n\n# Redis health check\nif command -v redis-cli >/dev/null 2>&1; then\n    if systemctl is-active redis >/dev/null 2>&1; then\n        log_message \"✓ Redis service is running\"\n        \n        # Test connectivity\n        if redis-cli ping | grep -q \"PONG\"; then\n            log_message \"✓ Redis connectivity test passed\"\n        else\n            log_message \"✗ Redis connectivity test failed\"\n        fi\n        \n        # Check memory usage\n        REDIS_MEMORY_PERCENT=$(redis-cli info memory | grep used_memory_rss_human: | cut -d: -f2)\n        log_message \"ℹ Redis memory usage: ${REDIS_MEMORY_PERCENT}\"\n    else\n        log_message \"✗ Redis service is not running\"\n    fi\nfi\n\nlog_message \"Database health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/database-health-check.sh\n\n# Schedule health checks every 10 minutes\necho \"*/10 * * * * root /usr/local/bin/database-health-check.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Database Issues\n```bash\n# MySQL/MariaDB troubleshooting\n# Check service status\nsudo systemctl status mariadb\n\n# Check error logs\nsudo tail -f /var/log/mysql/error.log\n\n# Test connectivity\nmysql -u root -p -e \"SELECT version();\"\n\n# Check process list\nmysql -u root -p -e \"SHOW FULL PROCESSLIST;\"\n\n# Check locks\nmysql -u root -p -e \"SHOW ENGINE INNODB STATUS\\G\" | grep -A 20 \"LATEST DETECTED DEADLOCK\"\n\n# Repair tables\nmysqlcheck --all-databases --repair -u root -p\n\n# PostgreSQL troubleshooting\n# Check service status\nsudo systemctl status postgresql-16\n\n# Check logs\nsudo tail -f /var/lib/pgsql/16/data/log/postgresql-*.log\n\n# Test connectivity\nsudo -u postgres psql -c \"SELECT version();\"\n\n# Check active connections\nsudo -u postgres psql -c \"SELECT count(*) FROM pg_stat_activity WHERE state = 'active';\"\n\n# Check locks\nsudo -u postgres psql -c \"SELECT * FROM pg_locks WHERE NOT granted;\"\n\n# Vacuum and analyze\nsudo -u postgres vacuumdb --all --analyze --verbose\n\n# MongoDB troubleshooting\n# Check service status\nsudo systemctl status mongod\n\n# Check logs\nsudo tail -f /var/log/mongodb/mongod.log\n\n# Test connectivity\nmongosh --eval \"db.adminCommand('ping')\"\n\n# Check replica set status\nmongosh admin --eval \"rs.status()\"\n\n# Check database profiler\nmongosh myapp --eval \"db.getProfilingStatus()\"\n\n# Repair database\nmongosh myapp --eval \"db.repairDatabase()\"\n\n# Redis troubleshooting\n# Check service status\nsudo systemctl status redis\n\n# Check logs\nsudo tail -f /var/log/redis/redis-server.log\n\n# Test connectivity\nredis-cli ping\n\n# Check memory stats\nredis-cli info memory\n\n# Check slow log\nredis-cli slowlog get 10\n\n# Monitor commands\nredis-cli monitor\n```\n\n### Advanced Database Debugging\n```bash\n# MySQL/MariaDB debugging\n# Enable general log\nmysql -u root -p -e \"SET GLOBAL general_log = 'ON';\"\nmysql -u root -p -e \"SET GLOBAL log_output = 'FILE';\"\n\n# Performance schema\nmysql -u root -p -e \"SELECT * FROM performance_schema.file_summary_by_event_name WHERE event_name LIKE 'wait/io/file%' ORDER BY sum_timer_wait DESC LIMIT 10;\"\n\n# PostgreSQL debugging\n# Enable query logging\nsudo -u postgres psql -c \"ALTER SYSTEM SET log_statement = 'all';\"\nsudo -u postgres psql -c \"SELECT pg_reload_conf();\"\n\n# Check query performance\nsudo -u postgres psql -c \"SELECT query, calls, total_time, mean_time FROM pg_stat_statements ORDER BY total_time DESC LIMIT 10;\"\n\n# MongoDB debugging\n# Enable profiler\nmongosh myapp --eval \"db.setProfilingLevel(2, { slowms: 100 })\"\n\n# Check slow operations\nmongosh myapp --eval \"db.system.profile.find().sort({ts:-1}).limit(5).pretty()\"\n\n# Redis debugging\n# Enable slow log\nredis-cli CONFIG SET slowlog-log-slower-than 10000\n\n# Check slow operations\nredis-cli SLOWLOG GET 10\n\n# Monitor memory usage\nredis-cli --latency-history -i 1\n```\n\n## Additional Resources\n\n- [MySQL Documentation](https://dev.mysql.com/doc/)\n- [MariaDB Documentation](https://mariadb.com/docs/)\n- [PostgreSQL Documentation](https://www.postgresql.org/docs/)\n- [MongoDB Documentation](https://docs.mongodb.com/)\n- [Redis Documentation](https://redis.io/documentation)\n- [Database Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"database-installation-guide\" class=\"mobile-header\">Database Installation Guide</h1>\n<p class=\"mobile-paragraph\">Comprehensive installation and configuration guide for popular database management systems including MySQL/MariaDB, PostgreSQL, MongoDB, and more. Complete with security hardening and performance optimization for production environments.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for production</li>\n<li class=\"mobile-list-item\">SSD storage recommended for database files</li>\n<li class=\"mobile-list-item\">Network connectivity for replication setups (if applicable)</li>\n<h2 id=\"mysqlmariadb-installation\" class=\"mobile-header\">MySQL/MariaDB Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system\nsudo apt update\n\n# Install MariaDB (recommended over MySQL)\nsudo apt install -y mariadb-server mariadb-client\n\n# Or install MySQL\nsudo apt install -y mysql-server mysql-client\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Enable and start service\nsudo systemctl enable --now mariadb  # or mysql\n\n# Verify installation\nmysql --version\nsudo systemctl status mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MariaDB from official repository\nsudo tee /etc/yum.repos.d/MariaDB.repo &gt; /dev/null &lt;&lt;EOF\n[mariadb]\nname = MariaDB\nbaseurl = https://mirror.its.dal.ca/mariadb/yum/10.11/rhel\\$releasever-\\$basearch\nmodule_hotfixes = 1\ngpgkey = https://mirror.its.dal.ca/mariadb/yum/RPM-GPG-KEY-MariaDB\ngpgcheck = 1\nEOF\n\nsudo yum install -y MariaDB-server MariaDB-client MariaDB-backup\n\n# Enable and start service\nsudo systemctl enable --now mariadb\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=mysql\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"mariadb-production-configuration\" class=\"mobile-header\">MariaDB Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create optimized configuration\nsudo tee /etc/mysql/mariadb.conf.d/50-server.cnf &gt; /dev/null &lt;&lt;EOF\n[mysqld]\n# Connection and thread handling\nmax_connections = 500\nthread_cache_size = 100\ntable_open_cache = 4096\ntable_definition_cache = 2048\n\n# InnoDB settings\ninnodb_buffer_pool_size = 4G  # 70-80% of RAM\ninnodb_log_file_size = 1G\ninnodb_log_buffer_size = 64M\ninnodb_file_per_table = 1\ninnodb_flush_log_at_trx_commit = 2\ninnodb_flush_method = O_DIRECT\ninnodb_io_capacity = 2000\ninnodb_io_capacity_max = 4000\ninnodb_read_io_threads = 8\ninnodb_write_io_threads = 8\ninnodb_open_files = 8192\n\n# Query cache (for read-heavy workloads)\nquery_cache_type = 1\nquery_cache_size = 256M\nquery_cache_limit = 2M\n\n# Temporary tables\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\n# Binary logging (for replication)\nlog_bin = mysql-bin\nbinlog_format = ROW\nsync_binlog = 1\nexpire_logs_days = 7\nbinlog_cache_size = 1M\n\n# Slow query log\nslow_query_log = 1\nslow_query_log_file = /var/log/mysql/slow.log\nlong_query_time = 2\nlog_queries_not_using_indexes = 1\n\n# Security\nbind-address = 127.0.0.1  # Change for network access\nskip_name_resolve = 1\nlocal_infile = 0\n\n# SSL configuration\nssl_cert = /etc/mysql/ssl/server-cert.pem\nssl_key = /etc/mysql/ssl/server-key.pem\nssl_ca = /etc/mysql/ssl/ca-cert.pem\nrequire_secure_transport = ON\n\n# Character set\ncharacter_set_server = utf8mb4\ncollation_server = utf8mb4_unicode_ci\nEOF\n\nsudo systemctl restart mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-security-hardening\" class=\"mobile-header\">MySQL/MariaDB Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated database user with limited privileges\nmysql -u root -p &lt;&lt;EOF\n-- Create application database\nCREATE DATABASE myapp CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\n\n-- Create application user\nCREATE USER &#039;appuser&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_app_password_2024&#039;;\nCREATE USER &#039;appuser&#039;@&#039;192.168.1.%&#039; IDENTIFIED BY &#039;secure_app_password_2024&#039;;\n\n-- Grant minimal privileges\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;localhost&#039;;\nGRANT SELECT, INSERT, UPDATE, DELETE ON myapp.* TO &#039;appuser&#039;@&#039;192.168.1.%&#039;;\n\n-- Create read-only user for backups\nCREATE USER &#039;backup&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;backup_password_2024&#039;;\nGRANT SELECT, LOCK TABLES, SHOW VIEW, EVENT, TRIGGER ON *.* TO &#039;backup&#039;@&#039;localhost&#039;;\n\n-- Create replication user\nCREATE USER &#039;replication&#039;@&#039;%&#039; IDENTIFIED BY &#039;replication_password_2024&#039;;\nGRANT REPLICATION SLAVE ON *.* TO &#039;replication&#039;@&#039;%&#039;;\n\n-- Remove default users and databases\nDROP DATABASE IF EXISTS test;\nDELETE FROM mysql.user WHERE User=&#039;&#039;;\nDELETE FROM mysql.user WHERE User=&#039;root&#039; AND Host NOT IN (&#039;localhost&#039;, &#039;127.0.0.1&#039;, &#039;::1&#039;);\n\n-- Secure privileges\nFLUSH PRIVILEGES;\nEOF\n\n# Generate SSL certificates for MySQL\nsudo mkdir -p /etc/mysql/ssl\ncd /etc/mysql/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out ca-key.pem 4096\nsudo openssl req -new -x509 -nodes -days 3650 -key ca-key.pem -out ca-cert.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=MySQL-CA&quot;\n\n# Create server certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout server-key.pem -out server-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mysql.example.com&quot;\nsudo openssl x509 -req -days 365 -set_serial 01 -in server-req.pem -out server-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Create client certificate\nsudo openssl req -newkey rsa:4096 -days 365 -nodes -keyout client-key.pem -out client-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mysql-client&quot;\nsudo openssl x509 -req -days 365 -set_serial 02 -in client-req.pem -out client-cert.pem -CA ca-cert.pem -CAkey ca-key.pem\n\n# Set permissions\nsudo chown mysql:mysql /etc/mysql/ssl/*\nsudo chmod 600 /etc/mysql/ssl/*key.pem\nsudo chmod 644 /etc/mysql/ssl/*.pem\n\nsudo systemctl restart mariadb</code></pre>\n      </div>\n    </div>\n<h2 id=\"postgresql-installation\" class=\"mobile-header\">PostgreSQL Installation</h2>\n<h3 id=\"ubuntudebian-postgresql-setup\" class=\"mobile-header\">Ubuntu/Debian PostgreSQL Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL official repository\nsudo apt install -y wget ca-certificates\nwget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -\necho &quot;deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main&quot; | sudo tee /etc/apt/sources.list.d/pgdg.list\n\n# Update and install PostgreSQL 16\nsudo apt update\nsudo apt install -y postgresql-16 postgresql-client-16 postgresql-contrib-16\n\n# Enable and start service\nsudo systemctl enable --now postgresql\n\n# Configure PostgreSQL\nsudo -u postgres psql &lt;&lt;EOF\n-- Create application database\nCREATE DATABASE myapp WITH ENCODING=&#039;UTF8&#039; LC_COLLATE=&#039;en_US.UTF-8&#039; LC_CTYPE=&#039;en_US.UTF-8&#039; TEMPLATE=template0;\n\n-- Create application user\nCREATE USER appuser WITH ENCRYPTED PASSWORD &#039;secure_app_password_2024&#039;;\nGRANT ALL PRIVILEGES ON DATABASE myapp TO appuser;\n\n-- Create read-only user\nCREATE USER readonly WITH ENCRYPTED PASSWORD &#039;readonly_password_2024&#039;;\nGRANT CONNECT ON DATABASE myapp TO readonly;\n\\c myapp\nGRANT USAGE ON SCHEMA public TO readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO readonly;\nALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO readonly;\n\n-- Security settings\nALTER SYSTEM SET password_encryption = &#039;scram-sha-256&#039;;\nSELECT pg_reload_conf();\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linux-postgresql\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux PostgreSQL</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL repository\nsudo yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-9-x86_64/pgdg-redhat-repo-latest.noarch.rpm\n\n# Install PostgreSQL 16\nsudo yum install -y postgresql16-server postgresql16 postgresql16-contrib postgresql16-devel\n\n# Initialize database\nsudo /usr/pgsql-16/bin/postgresql-16-setup initdb\n\n# Enable and start service\nsudo systemctl enable --now postgresql-16\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5432/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"postgresql-production-configuration\" class=\"mobile-header\">PostgreSQL Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure PostgreSQL for production\nsudo tee /var/lib/pgsql/16/data/postgresql.conf &gt; /dev/null &lt;&lt;EOF\n# PostgreSQL 16 Production Configuration\n\n# Connection settings\nlisten_addresses = &#039;localhost&#039;  # Change to &#039;*&#039; for network access\nport = 5432\nmax_connections = 200\nshared_buffers = 2GB  # 25% of RAM\neffective_cache_size = 8GB  # 75% of RAM\n\n# Memory settings\nwork_mem = 16MB\nmaintenance_work_mem = 512MB\ndynamic_shared_memory_type = posix\n\n# WAL settings\nwal_level = replica\nwal_buffers = 64MB\ncheckpoint_completion_target = 0.9\nmax_wal_size = 4GB\nmin_wal_size = 1GB\ncheckpoint_timeout = 15min\n\n# Query planner\nrandom_page_cost = 1.1  # For SSD\neffective_io_concurrency = 200\nmax_worker_processes = 8\nmax_parallel_workers_per_gather = 4\nmax_parallel_workers = 8\nmax_parallel_maintenance_workers = 4\n\n# Logging\nlog_destination = &#039;stderr&#039;\nlogging_collector = on\nlog_directory = &#039;log&#039;\nlog_filename = &#039;postgresql-%Y-%m-%d_%H%M%S.log&#039;\nlog_rotation_age = 1d\nlog_rotation_size = 100MB\nlog_min_duration_statement = 1000  # Log slow queries\nlog_line_prefix = &#039;%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h &#039;\nlog_statement = &#039;ddl&#039;  # Log DDL statements\nlog_lock_waits = on\n\n# SSL configuration\nssl = on\nssl_cert_file = &#039;/var/lib/pgsql/16/data/ssl/server.crt&#039;\nssl_key_file = &#039;/var/lib/pgsql/16/data/ssl/server.key&#039;\nssl_ca_file = &#039;/var/lib/pgsql/16/data/ssl/ca.crt&#039;\nssl_min_protocol_version = &#039;TLSv1.2&#039;\nssl_prefer_server_ciphers = on\n\n# Security\npassword_encryption = scram-sha-256\nkrb_server_keyfile = &#039;&#039;\ndb_user_namespace = off\nrow_security = on\n\n# Autovacuum\nautovacuum = on\nautovacuum_max_workers = 4\nautovacuum_naptime = 1min\nautovacuum_vacuum_threshold = 50\nautovacuum_analyze_threshold = 50\nautovacuum_vacuum_scale_factor = 0.1\nautovacuum_analyze_scale_factor = 0.05\n\n# Background writer\nbgwriter_delay = 200ms\nbgwriter_lru_maxpages = 100\nbgwriter_lru_multiplier = 2.0\nbgwriter_flush_after = 512kB\n\n# Checkpointer\ncheckpoint_flush_after = 256kB\n\n# Statistics\ntrack_activities = on\ntrack_counts = on\ntrack_io_timing = on\ntrack_functions = all\nstats_temp_directory = &#039;pg_stat_tmp&#039;\nEOF\n\n# Configure client authentication\nsudo tee /var/lib/pgsql/16/data/pg_hba.conf &gt; /dev/null &lt;&lt;EOF\n# PostgreSQL Client Authentication Configuration\n\n# TYPE  DATABASE        USER            ADDRESS                 METHOD\n\n# Local connections\nlocal   all             postgres                                peer\nlocal   all             all                                     scram-sha-256\n\n# IPv4 local connections\nhost    all             all             127.0.0.1/32            scram-sha-256\n\n# IPv6 local connections  \nhost    all             all             ::1/128                 scram-sha-256\n\n# Network connections (if needed)\nhostssl myapp           appuser         192.168.1.0/24          scram-sha-256\nhostssl myapp           readonly        192.168.1.0/24          scram-sha-256\n\n# Replication connections\nhostssl replication     replication     192.168.1.0/24          scram-sha-256\n\n# Deny all other connections\nhost    all             all             0.0.0.0/0               reject\nEOF\n\n# Generate SSL certificates\nsudo mkdir -p /var/lib/pgsql/16/data/ssl\ncd /var/lib/pgsql/16/data/ssl\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=PostgreSQL-CA&quot;\n\nsudo openssl genrsa -out server.key 4096\nsudo openssl req -new -key server.key -out server.csr -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=postgres.example.com&quot;\nsudo openssl x509 -req -days 365 -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out server.crt\n\nsudo chown postgres:postgres /var/lib/pgsql/16/data/ssl/*\nsudo chmod 600 /var/lib/pgsql/16/data/ssl/*.key\nsudo chmod 644 /var/lib/pgsql/16/data/ssl/*.crt\n\nsudo systemctl restart postgresql-16</code></pre>\n      </div>\n    </div>\n<h3 id=\"postgresql-security-hardening\" class=\"mobile-header\">PostgreSQL Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Advanced security configuration\nsudo -u postgres psql &lt;&lt;EOF\n-- Enable row-level security\nALTER SYSTEM SET row_security = on;\n\n-- Configure logging for security\nALTER SYSTEM SET log_statement = &#039;all&#039;;\nALTER SYSTEM SET log_connections = on;\nALTER SYSTEM SET log_disconnections = on;\nALTER SYSTEM SET log_lock_waits = on;\nALTER SYSTEM SET log_temp_files = 0;\n\n-- Password policies\nALTER SYSTEM SET password_encryption = &#039;scram-sha-256&#039;;\n\n-- Create roles with specific privileges\nCREATE ROLE app_read;\nGRANT CONNECT ON DATABASE myapp TO app_read;\nGRANT USAGE ON SCHEMA public TO app_read;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO app_read;\n\nCREATE ROLE app_write;\nGRANT app_read TO app_write;\nGRANT INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO app_write;\n\n-- Create application-specific user\nCREATE USER myapp_user WITH PASSWORD &#039;secure_password_2024&#039;;\nGRANT app_write TO myapp_user;\n\n-- Security functions\nCREATE OR REPLACE FUNCTION audit_trigger_function()\nRETURNS TRIGGER AS \\$\\$\nBEGIN\n    INSERT INTO audit_log (table_name, operation, old_values, new_values, user_name, timestamp)\n    VALUES (TG_TABLE_NAME, TG_OP, row_to_json(OLD), row_to_json(NEW), current_user, now());\n    RETURN COALESCE(NEW, OLD);\nEND;\n\\$\\$ LANGUAGE plpgsql;\n\n-- Reload configuration\nSELECT pg_reload_conf();\nEOF\n\n# Configure connection limits\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf &gt; /dev/null &lt;&lt;EOF\n\n# Connection limiting per user/database\n# ALTER USER myapp_user CONNECTION LIMIT 50;\n# ALTER DATABASE myapp CONNECTION LIMIT 100;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"mongodb-installation\" class=\"mobile-header\">MongoDB Installation</h2>\n<h3 id=\"ubuntudebian-mongodb-setup\" class=\"mobile-header\">Ubuntu/Debian MongoDB Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Import MongoDB public GPG key\nwget -qO - https://www.mongodb.org/static/pgp/server-7.0.asc | sudo apt-key add -\n\n# Add MongoDB repository\necho &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n# Update and install MongoDB\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Verify installation\nmongosh --eval &#039;db.runCommand(&quot;connectionStatus&quot;)&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linux-mongodb\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux MongoDB</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add MongoDB repository\nsudo tee /etc/yum.repos.d/mongodb-org-7.0.repo &gt; /dev/null &lt;&lt;EOF\n[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/7.0/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\nEOF\n\n# Install MongoDB\nsudo yum install -y mongodb-org\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27017/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-production-configuration\" class=\"mobile-header\">MongoDB Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure MongoDB configuration\nsudo tee /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\n# MongoDB Production Configuration\n\nstorage:\n  dbPath: /var/lib/mongo\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 4  # 50% of RAM\n      journalCompressor: snappy\n      directoryForIndexes: false\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.log\n  quiet: false\n  logRotate: reopen\n  component:\n    accessControl:\n      verbosity: 1\n    command:\n      verbosity: 1\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1  # Change for network access\n  maxIncomingConnections: 1000\n  compression:\n    compressors: snappy,zstd\n  ssl:\n    mode: requireSSL\n    PEMKeyFile: /etc/ssl/mongodb/mongodb.pem\n    CAFile: /etc/ssl/mongodb/ca.pem\n    allowInvalidHostnames: false\n    allowInvalidCertificates: false\n\nsecurity:\n  authorization: enabled\n  keyFile: /etc/mongodb/mongodb-keyfile\n  clusterAuthMode: x509\n  javascriptEnabled: false\n\noperationProfiling:\n  mode: slowOp\n  slowOpThresholdMs: 100\n  slowOpSampleRate: 0.02\n\nreplication:\n  replSetName: rs0\n  enableMajorityReadConcern: true\n\nsharding:\n  clusterRole: shardsvr  # or configsvr for config servers\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid\n  timeZoneInfo: /usr/share/zoneinfo\n\nsetParameter:\n  authenticationMechanisms: SCRAM-SHA-1,SCRAM-SHA-256\n  scramIterationCount: 15000\n  failIndexKeyTooLong: false\n  notablescan: 1  # Disable table scans in production\nEOF\n\n# Create MongoDB keyfile for replica set authentication\nsudo openssl rand -base64 756 | sudo tee /etc/mongodb/mongodb-keyfile\nsudo chmod 600 /etc/mongodb/mongodb-keyfile\nsudo chown mongod:mongod /etc/mongodb/mongodb-keyfile\n\n# Generate SSL certificates for MongoDB\nsudo mkdir -p /etc/ssl/mongodb\ncd /etc/ssl/mongodb\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=MongoDB-CA&quot;\n\nsudo openssl genrsa -out mongodb.key 4096\nsudo openssl req -new -key mongodb.key -out mongodb.csr -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mongodb.example.com&quot;\nsudo openssl x509 -req -days 365 -in mongodb.csr -CA ca.pem -CAkey ca.key -CAcreateserial -out mongodb.crt\n\n# Combine certificate and key for MongoDB\nsudo cat mongodb.crt mongodb.key | sudo tee mongodb.pem\nsudo chmod 600 /etc/ssl/mongodb/*.key /etc/ssl/mongodb/*.pem\nsudo chown mongod:mongod /etc/ssl/mongodb/*\n\nsudo systemctl restart mongod</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-security-setup\" class=\"mobile-header\">MongoDB Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize MongoDB security\nmongosh --ssl --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem --sslCAFile /etc/ssl/mongodb/ca.pem &lt;&lt;EOF\n// Create admin user\nuse admin\ndb.createUser({\n  user: &quot;admin&quot;,\n  pwd: &quot;secure_admin_password_2024&quot;,\n  roles: [\n    { role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;readWriteAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;dbAdminAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;clusterAdmin&quot;, db: &quot;admin&quot; }\n  ]\n})\n\n// Create application user\nuse myapp\ndb.createUser({\n  user: &quot;appuser&quot;,\n  pwd: &quot;secure_app_password_2024&quot;,\n  roles: [\n    { role: &quot;readWrite&quot;, db: &quot;myapp&quot; }\n  ]\n})\n\n// Create read-only user\ndb.createUser({\n  user: &quot;readonly&quot;,\n  pwd: &quot;readonly_password_2024&quot;,\n  roles: [\n    { role: &quot;read&quot;, db: &quot;myapp&quot; }\n  ]\n})\n\n// Create backup user\nuse admin\ndb.createUser({\n  user: &quot;backup&quot;,\n  pwd: &quot;backup_password_2024&quot;,\n  roles: [\n    { role: &quot;backup&quot;, db: &quot;admin&quot; },\n    { role: &quot;restore&quot;, db: &quot;admin&quot; }\n  ]\n})\n\n// Initialize replica set (if using replication)\nrs.initiate({\n  _id: &quot;rs0&quot;,\n  members: [\n    { _id: 0, host: &quot;mongodb1.example.com:27017&quot;, priority: 2 },\n    { _id: 1, host: &quot;mongodb2.example.com:27017&quot;, priority: 1 },\n    { _id: 2, host: &quot;mongodb3.example.com:27017&quot;, priority: 1, arbiterOnly: true }\n  ]\n})\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"redis-installation-and-configuration\" class=\"mobile-header\">Redis Installation and Configuration</h2>\n<h3 id=\"redis-setup-all-distributions\" class=\"mobile-header\">Redis Setup (All Distributions)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt install -y redis-server redis-tools\n\n# RHEL/CentOS\nsudo yum install -y redis\n\n# Fedora\nsudo dnf install -y redis\n\n# Arch Linux\nsudo pacman -S redis\n\n# Configure Redis for production\nsudo tee /etc/redis/redis.conf &gt; /dev/null &lt;&lt;EOF\n# Redis Production Configuration\n\n# Network\nbind 127.0.0.1 ::1  # Change for network access\nport 6379\ntcp-backlog 511\ntimeout 300\ntcp-keepalive 300\n\n# Security\nrequirepass redis_secure_password_2024\nrename-command FLUSHDB &quot;FLUSHDB_9a8b7c6d5e4f3g2h1&quot;\nrename-command FLUSHALL &quot;FLUSHALL_h1g2f3e4d5c6b7a8&quot;\nrename-command DEBUG &quot;DEBUG_8a7b6c5d4e3f2g1h&quot;\nrename-command CONFIG &quot;CONFIG_1h2g3f4e5d6c7b8a&quot;\n\n# SSL/TLS (Redis 6.0+)\ntls-port 6380\nport 0  # Disable non-TLS port\ntls-cert-file /etc/redis/tls/redis.crt\ntls-key-file /etc/redis/tls/redis.key\ntls-ca-cert-file /etc/redis/tls/ca.crt\ntls-protocols &quot;TLSv1.2 TLSv1.3&quot;\ntls-prefer-server-ciphers yes\n\n# Memory management\nmaxmemory 2gb\nmaxmemory-policy allkeys-lru\nmaxmemory-samples 5\n\n# Persistence\nsave 900 1\nsave 300 10\nsave 60 10000\nrdbcompression yes\nrdbchecksum yes\ndbfilename redis.rdb\ndir /var/lib/redis/\n\n# AOF (Append Only File)\nappendonly yes\nappendfilename &quot;appendonly.aof&quot;\nappendfsync everysec\nno-appendfsync-on-rewrite no\nauto-aof-rewrite-percentage 100\nauto-aof-rewrite-min-size 64mb\n\n# Logging\nloglevel notice\nlogfile /var/log/redis/redis-server.log\nsyslog-enabled yes\nsyslog-ident redis\n\n# Slow log\nslowlog-log-slower-than 10000\nslowlog-max-len 128\n\n# Latency monitoring\nlatency-monitor-threshold 100\n\n# Client output buffer limits\nclient-output-buffer-limit normal 0 0 0\nclient-output-buffer-limit replica 256mb 64mb 60\nclient-output-buffer-limit pubsub 32mb 8mb 60\n\n# Advanced configuration\nhz 10\ndynamic-hz yes\naof-rewrite-incremental-fsync yes\nrdb-save-incremental-fsync yes\n\n# Lua scripting\nlua-time-limit 5000\nEOF\n\n# Generate Redis TLS certificates\nsudo mkdir -p /etc/redis/tls\ncd /etc/redis/tls\n\nsudo openssl genrsa -out ca.key 4096\nsudo openssl req -new -x509 -days 3650 -key ca.key -out ca.crt -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=Redis-CA&quot;\n\nsudo openssl genrsa -out redis.key 4096\nsudo openssl req -new -key redis.key -out redis.csr -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=redis.example.com&quot;\nsudo openssl x509 -req -days 365 -in redis.csr -CA ca.crt -CAkey ca.key -CAcreateserial -out redis.crt\n\nsudo chown redis:redis /etc/redis/tls/*\nsudo chmod 600 /etc/redis/tls/*.key\nsudo chmod 644 /etc/redis/tls/*.crt\n\nsudo systemctl restart redis-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-monitoring-and-maintenance\" class=\"mobile-header\">Database Monitoring and Maintenance</h2>\n<h3 id=\"comprehensive-database-monitoring\" class=\"mobile-header\">Comprehensive Database Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMONITOR_LOG=&quot;/var/log/database-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${MONITOR_LOG}\n}\n\n# MySQL/MariaDB monitoring\nif command -v mysql &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== MySQL/MariaDB Monitoring ===&quot;\n    \n    # Connection count\n    MYSQL_CONNECTIONS=$(mysql -e &quot;SHOW STATUS LIKE &#039;Threads_connected&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\n    MYSQL_MAX_CONNECTIONS=$(mysql -e &quot;SHOW VARIABLES LIKE &#039;max_connections&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\n    log_message &quot;MySQL connections: ${MYSQL_CONNECTIONS}/${MYSQL_MAX_CONNECTIONS}&quot;\n    \n    # Query performance\n    SLOW_QUERIES=$(mysql -e &quot;SHOW STATUS LIKE &#039;Slow_queries&#039;;&quot; | tail -1 | awk &#039;{print $2}&#039;)\n    log_message &quot;MySQL slow queries: ${SLOW_QUERIES}&quot;\n    \n    # Buffer pool hit ratio\n    BUFFER_HIT_RATIO=$(mysql -e &quot;\n      SELECT ROUND((1 - (Innodb_buffer_pool_reads / Innodb_buffer_pool_read_requests)) * 100, 2) as hit_ratio\n      FROM INFORMATION_SCHEMA.GLOBAL_STATUS \n      WHERE VARIABLE_NAME IN (&#039;Innodb_buffer_pool_reads&#039;, &#039;Innodb_buffer_pool_read_requests&#039;);&quot; | tail -1)\n    log_message &quot;InnoDB buffer pool hit ratio: ${BUFFER_HIT_RATIO}%&quot;\nfi\n\n# PostgreSQL monitoring\nif command -v psql &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== PostgreSQL Monitoring ===&quot;\n    \n    # Connection count\n    PG_CONNECTIONS=$(sudo -u postgres psql -t -c &quot;SELECT count(*) FROM pg_stat_activity;&quot;)\n    PG_MAX_CONNECTIONS=$(sudo -u postgres psql -t -c &quot;SHOW max_connections;&quot;)\n    log_message &quot;PostgreSQL connections: ${PG_CONNECTIONS}/${PG_MAX_CONNECTIONS}&quot;\n    \n    # Database size\n    PG_DB_SIZE=$(sudo -u postgres psql -t -c &quot;SELECT pg_size_pretty(pg_database_size(&#039;myapp&#039;));&quot;)\n    log_message &quot;PostgreSQL database size: ${PG_DB_SIZE}&quot;\n    \n    # Cache hit ratio\n    PG_CACHE_HIT=$(sudo -u postgres psql -t -c &quot;\n      SELECT round(sum(blks_hit)*100.0/sum(blks_hit+blks_read), 2) \n      FROM pg_stat_database WHERE datname=&#039;myapp&#039;;&quot;)\n    log_message &quot;PostgreSQL cache hit ratio: ${PG_CACHE_HIT}%&quot;\n    \n    # Long running queries\n    LONG_QUERIES=$(sudo -u postgres psql -t -c &quot;\n      SELECT count(*) FROM pg_stat_activity \n      WHERE state = &#039;active&#039; AND now() - query_start &gt; interval &#039;5 minutes&#039;;&quot;)\n    log_message &quot;PostgreSQL long-running queries: ${LONG_QUERIES}&quot;\nfi\n\n# MongoDB monitoring\nif command -v mongosh &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== MongoDB Monitoring ===&quot;\n    \n    # Connection count\n    MONGO_CONNECTIONS=$(mongosh --quiet --eval &quot;db.serverStatus().connections.current&quot;)\n    MONGO_MAX_CONNECTIONS=$(mongosh --quiet --eval &quot;db.serverStatus().connections.available&quot;)\n    log_message &quot;MongoDB connections: ${MONGO_CONNECTIONS}/${MONGO_MAX_CONNECTIONS}&quot;\n    \n    # Database statistics\n    MONGO_DB_SIZE=$(mongosh myapp --quiet --eval &quot;Math.round(db.stats().dataSize / 1024 / 1024) + &#039; MB&#039;&quot;)\n    log_message &quot;MongoDB database size: ${MONGO_DB_SIZE}&quot;\n    \n    # OpLog status (for replica sets)\n    if mongosh admin --quiet --eval &quot;rs.status().ok&quot; 2&gt;/dev/null | grep -q &quot;1&quot;; then\n        OPLOG_SIZE=$(mongosh local --quiet --eval &quot;Math.round(db.oplog.rs.stats().maxSize / 1024 / 1024) + &#039; MB&#039;&quot;)\n        log_message &quot;MongoDB OpLog size: ${OPLOG_SIZE}&quot;\n    fi\nfi\n\n# Redis monitoring\nif command -v redis-cli &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;=== Redis Monitoring ===&quot;\n    \n    # Memory usage\n    REDIS_MEMORY=$(redis-cli info memory | grep used_memory_human: | cut -d: -f2)\n    REDIS_MAX_MEMORY=$(redis-cli config get maxmemory | tail -1)\n    log_message &quot;Redis memory usage: ${REDIS_MEMORY} / ${REDIS_MAX_MEMORY}&quot;\n    \n    # Connected clients\n    REDIS_CLIENTS=$(redis-cli info clients | grep connected_clients: | cut -d: -f2)\n    log_message &quot;Redis connected clients: ${REDIS_CLIENTS}&quot;\n    \n    # Hit ratio\n    REDIS_HITS=$(redis-cli info stats | grep keyspace_hits: | cut -d: -f2)\n    REDIS_MISSES=$(redis-cli info stats | grep keyspace_misses: | cut -d: -f2)\n    if [ ${REDIS_MISSES} -gt 0 ]; then\n        REDIS_HIT_RATIO=$(echo &quot;scale=2; ${REDIS_HITS} / (${REDIS_HITS} + ${REDIS_MISSES}) * 100&quot; | bc)\n        log_message &quot;Redis hit ratio: ${REDIS_HIT_RATIO}%&quot;\n    fi\nfi\n\nlog_message &quot;Database monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho &quot;*/5 * * * * root /usr/local/bin/database-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-backup-automation\" class=\"mobile-header\">Database Backup Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/databases&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{mysql,postgresql,mongodb,redis}\n\n# MySQL/MariaDB backup\nif command -v mysql &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up MySQL/MariaDB...&quot;\n    \n    # Full backup with all databases\n    mysqldump --all-databases --single-transaction --routines --triggers --events \\\n      --master-data=2 --flush-logs --delete-master-logs \\\n      &gt; ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Compress backup\n    gzip ${BACKUP_DIR}/mysql/full-backup-${DATE}.sql\n    \n    # Individual database backup\n    mysqldump --single-transaction --routines --triggers myapp \\\n      &gt; ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\n    gzip ${BACKUP_DIR}/mysql/myapp-backup-${DATE}.sql\nfi\n\n# PostgreSQL backup\nif command -v pg_dump &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up PostgreSQL...&quot;\n    \n    # Full cluster backup\n    sudo -u postgres pg_dumpall &gt; ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\n    \n    # Individual database backup\n    sudo -u postgres pg_dump -Fc myapp &gt; ${BACKUP_DIR}/postgresql/myapp-backup-${DATE}.dump\n    \n    # Compress SQL backup\n    gzip ${BACKUP_DIR}/postgresql/cluster-backup-${DATE}.sql\nfi\n\n# MongoDB backup\nif command -v mongodump &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up MongoDB...&quot;\n    \n    # Full backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --out ${BACKUP_DIR}/mongodb/full-backup-${DATE}\n    \n    # Individual database backup\n    mongodump --host localhost:27017 --ssl \\\n      --sslPEMKeyFile /etc/ssl/mongodb/mongodb.pem \\\n      --sslCAFile /etc/ssl/mongodb/ca.pem \\\n      --db myapp --out ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\n    \n    # Compress backups\n    tar -czf ${BACKUP_DIR}/mongodb/full-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb full-backup-${DATE}\n    tar -czf ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}.tar.gz -C ${BACKUP_DIR}/mongodb myapp-backup-${DATE}\n    \n    # Remove uncompressed directories\n    rm -rf ${BACKUP_DIR}/mongodb/full-backup-${DATE} ${BACKUP_DIR}/mongodb/myapp-backup-${DATE}\nfi\n\n# Redis backup\nif command -v redis-cli &gt;/dev/null 2&gt;&amp;1 &amp;&amp; systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Backing up Redis...&quot;\n    \n    # Trigger background save\n    redis-cli BGSAVE\n    \n    # Wait for save to complete\n    while [ &quot;$(redis-cli LASTSAVE)&quot; = &quot;$(redis-cli LASTSAVE)&quot; ]; do\n        sleep 1\n    done\n    \n    # Copy RDB file\n    cp /var/lib/redis/dump.rdb ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\n    gzip ${BACKUP_DIR}/redis/redis-backup-${DATE}.rdb\nfi\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://database-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination database-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://database-backups/\n\n# Keep only last 14 days of backups\nfind ${BACKUP_DIR} -name &quot;*backup*&quot; -type f -mtime +14 -delete\n\n# Verify backup integrity\necho &quot;Verifying backup integrity...&quot;\nfor backup in ${BACKUP_DIR}/*/*.gz; do\n    if gzip -t &quot;$backup&quot; 2&gt;/dev/null; then\n        echo &quot;✓ $(basename $backup) - OK&quot;\n    else\n        echo &quot;✗ $(basename $backup) - CORRUPTED&quot;\n    fi\ndone\n\necho &quot;Database backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-backup.sh\n\n# Schedule daily backups\necho &quot;0 1 * * * root /usr/local/bin/database-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-and-replication\" class=\"mobile-header\">High Availability and Replication</h2>\n<h3 id=\"mysqlmariadb-master-slave-replication\" class=\"mobile-header\">MySQL/MariaDB Master-Slave Replication</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure master server\nsudo tee -a /etc/mysql/mariadb.conf.d/replication.cnf &gt; /dev/null &lt;&lt;EOF\n[mysqld]\n# Replication settings\nserver-id = 1\nlog_bin = mysql-bin\nbinlog_format = ROW\nbinlog_do_db = myapp\nsync_binlog = 1\nrelay-log = mysql-relay-bin\nrelay-log-recovery = 1\n\n# GTID replication (recommended)\ngtid_mode = ON\nenforce_gtid_consistency = ON\nlog_slave_updates = ON\nEOF\n\nmysql -u root -p &lt;&lt;EOF\n-- Create replication user\nCREATE USER &#039;replication&#039;@&#039;%&#039; IDENTIFIED BY &#039;replication_password_2024&#039;;\nGRANT REPLICATION SLAVE ON *.* TO &#039;replication&#039;@&#039;%&#039;;\nFLUSH PRIVILEGES;\n\n-- Get master status\nSHOW MASTER STATUS;\nEOF\n\n# Configure slave server (server-id = 2)\n# On slave server:\nmysql -u root -p &lt;&lt;EOF\nCHANGE MASTER TO\n  MASTER_HOST=&#039;mysql-master.example.com&#039;,\n  MASTER_USER=&#039;replication&#039;,\n  MASTER_PASSWORD=&#039;replication_password_2024&#039;,\n  MASTER_AUTO_POSITION=1;\n\nSTART SLAVE;\nSHOW SLAVE STATUS\\G\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"postgresql-streaming-replication\" class=\"mobile-header\">PostgreSQL Streaming Replication</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure master server\nsudo tee -a /var/lib/pgsql/16/data/postgresql.conf &gt; /dev/null &lt;&lt;EOF\n# Replication settings\nwal_level = replica\nmax_wal_senders = 10\nmax_replication_slots = 10\nwal_keep_size = 1GB\nhot_standby = on\narchive_mode = on\narchive_command = &#039;cp %p /var/lib/pgsql/16/archive/%f&#039;\nEOF\n\n# Configure replication access\nsudo tee -a /var/lib/pgsql/16/data/pg_hba.conf &gt; /dev/null &lt;&lt;EOF\n# Replication connections\nhostssl replication replication 192.168.1.0/24 scram-sha-256\nEOF\n\n# Create replication user\nsudo -u postgres psql &lt;&lt;EOF\nCREATE USER replication WITH REPLICATION ENCRYPTED PASSWORD &#039;replication_password_2024&#039;;\nEOF\n\n# Create archive directory\nsudo mkdir -p /var/lib/pgsql/16/archive\nsudo chown postgres:postgres /var/lib/pgsql/16/archive\n\nsudo systemctl restart postgresql-16\n\n# Setup slave server\n# On slave server, create base backup:\nsudo -u postgres pg_basebackup -h master.example.com -D /var/lib/pgsql/16/data -U replication -W -v -P -R</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-replica-set-configuration\" class=\"mobile-header\">MongoDB Replica Set Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize replica set (run on primary node)\nmongosh admin &lt;&lt;EOF\nrs.initiate({\n  _id: &quot;rs0&quot;,\n  version: 1,\n  protocolVersion: 1,\n  members: [\n    { \n      _id: 0, \n      host: &quot;mongodb1.example.com:27017&quot;,\n      priority: 2,\n      votes: 1\n    },\n    { \n      _id: 1, \n      host: &quot;mongodb2.example.com:27017&quot;,\n      priority: 1,\n      votes: 1\n    },\n    { \n      _id: 2, \n      host: &quot;mongodb3.example.com:27017&quot;,\n      priority: 1,\n      votes: 1,\n      arbiterOnly: true\n    }\n  ],\n  settings: {\n    chainingAllowed: false,\n    heartbeatIntervalMillis: 2000,\n    heartbeatTimeoutSecs: 10,\n    electionTimeoutMillis: 10000,\n    catchUpTimeoutMillis: -1,\n    getLastErrorModes: {\n      majority: { \n        tags: { \n          dc: 1 \n        } \n      }\n    }\n  }\n})\n\n// Check replica set status\nrs.status()\n\n// Configure read preferences\nrs.conf()\nEOF\n\n# Configure MongoDB sharding (for large deployments)\n# Config server initialization:\nmongosh admin &lt;&lt;EOF\nrs.initiate({\n  _id: &quot;configReplSet&quot;,\n  configsvr: true,\n  members: [\n    { _id: 0, host: &quot;config1.example.com:27019&quot; },\n    { _id: 1, host: &quot;config2.example.com:27019&quot; },\n    { _id: 2, host: &quot;config3.example.com:27019&quot; }\n  ]\n})\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-sentinel-high-availability\" class=\"mobile-header\">Redis Sentinel High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Redis Sentinel for HA\nsudo tee /etc/redis/sentinel.conf &gt; /dev/null &lt;&lt;EOF\n# Redis Sentinel Configuration\nport 26379\nsentinel deny-scripts-reconfig yes\n\n# Monitor Redis master\nsentinel monitor mymaster redis-master.example.com 6379 2\nsentinel auth-pass mymaster redis_secure_password_2024\nsentinel down-after-milliseconds mymaster 5000\nsentinel parallel-syncs mymaster 1\nsentinel failover-timeout mymaster 10000\n\n# Notification scripts\nsentinel notification-script mymaster /etc/redis/notify.sh\nsentinel client-reconfig-script mymaster /etc/redis/reconfig.sh\n\n# Security\nrequirepass sentinel_password_2024\nEOF\n\n# Create notification script\nsudo tee /etc/redis/notify.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\necho &quot;$(date): Redis failover event: $*&quot; &gt;&gt; /var/log/redis/sentinel.log\n# Add alerting logic here (email, Slack, etc.)\nEOF\n\n# Create reconfiguration script\nsudo tee /etc/redis/reconfig.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\necho &quot;$(date): Redis master changed to: $6:$7&quot; &gt;&gt; /var/log/redis/sentinel.log\n# Update application configuration, restart services, etc.\nEOF\n\nsudo chmod +x /etc/redis/{notify,reconfig}.sh\nsudo systemctl enable --now redis-sentinel</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"database-performance-tuning\" class=\"mobile-header\">Database Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-performance-tune.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\ntune_mysql() {\n    echo &quot;Tuning MySQL/MariaDB performance...&quot;\n    \n    # Calculate optimal buffer pool size (70% of RAM)\n    TOTAL_RAM=$(free -b | awk &#039;NR==2{print $2}&#039;)\n    BUFFER_POOL_SIZE=$((TOTAL_RAM * 70 / 100))\n    \n    mysql -u root -p &lt;&lt;EOF\n-- Performance tuning\nSET GLOBAL innodb_buffer_pool_size = ${BUFFER_POOL_SIZE};\nSET GLOBAL query_cache_size = $((TOTAL_RAM * 5 / 100));\nSET GLOBAL thread_cache_size = 100;\nSET GLOBAL table_open_cache = 4096;\nSET GLOBAL innodb_io_capacity = 2000;\n\n-- Show current configuration\nSHOW VARIABLES LIKE &#039;innodb_buffer_pool_size&#039;;\nSHOW VARIABLES LIKE &#039;query_cache_size&#039;;\nEOF\n}\n\ntune_postgresql() {\n    echo &quot;Tuning PostgreSQL performance...&quot;\n    \n    # Use pg_tune recommendations\n    TOTAL_RAM_MB=$(($(free -m | awk &#039;NR==2{print $2}&#039;)))\n    SHARED_BUFFERS=$((TOTAL_RAM_MB / 4))\n    EFFECTIVE_CACHE=$((TOTAL_RAM_MB * 3 / 4))\n    \n    sudo -u postgres psql &lt;&lt;EOF\n-- Performance tuning\nALTER SYSTEM SET shared_buffers = &#039;${SHARED_BUFFERS}MB&#039;;\nALTER SYSTEM SET effective_cache_size = &#039;${EFFECTIVE_CACHE}MB&#039;;\nALTER SYSTEM SET work_mem = &#039;16MB&#039;;\nALTER SYSTEM SET maintenance_work_mem = &#039;256MB&#039;;\nALTER SYSTEM SET random_page_cost = 1.1;\nALTER SYSTEM SET effective_io_concurrency = 200;\n\n-- Reload configuration\nSELECT pg_reload_conf();\n\n-- Show current settings\nSHOW shared_buffers;\nSHOW effective_cache_size;\nEOF\n}\n\ntune_mongodb() {\n    echo &quot;Tuning MongoDB performance...&quot;\n    \n    # Calculate WiredTiger cache size (50% of RAM)\n    TOTAL_RAM_GB=$(($(free -g | awk &#039;NR==2{print $2}&#039;)))\n    CACHE_SIZE_GB=$((TOTAL_RAM_GB / 2))\n    \n    mongosh admin &lt;&lt;EOF\n// Performance tuning\ndb.adminCommand({\n  &quot;setParameter&quot;: 1,\n  &quot;wiredTigerEngineRuntimeConfig&quot;: &quot;cache_size=${CACHE_SIZE_GB}GB&quot;\n})\n\n// Show current cache usage\ndb.serverStatus().wiredTiger.cache\nEOF\n}\n\ntune_redis() {\n    echo &quot;Tuning Redis performance...&quot;\n    \n    # Calculate maxmemory (50% of RAM for dedicated Redis server)\n    TOTAL_RAM_BYTES=$(free -b | awk &#039;NR==2{print $2}&#039;)\n    MAX_MEMORY_BYTES=$((TOTAL_RAM_BYTES / 2))\n    \n    redis-cli CONFIG SET maxmemory ${MAX_MEMORY_BYTES}\n    redis-cli CONFIG SET maxmemory-policy allkeys-lru\n    redis-cli CONFIG REWRITE\n    \n    echo &quot;Redis maxmemory set to $(redis-cli CONFIG GET maxmemory | tail -1) bytes&quot;\n}\n\n# Check which databases are running and tune them\nif systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n    tune_mysql\nfi\n\nif systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n    tune_postgresql\nfi\n\nif systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n    tune_mongodb\nfi\n\nif systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n    tune_redis\nfi\n\necho &quot;Database performance tuning completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-performance-tune.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-testing\" class=\"mobile-header\">Verification and Testing</h2>\n<h3 id=\"database-health-checks\" class=\"mobile-header\">Database Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/database-health-check.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/database-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# MySQL/MariaDB health check\nif command -v mysql &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active mariadb &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;✓ MariaDB service is running&quot;\n        \n        # Test connectivity\n        if mysql -e &quot;SELECT 1;&quot; &gt;/dev/null 2&gt;&amp;1; then\n            log_message &quot;✓ MariaDB connectivity test passed&quot;\n        else\n            log_message &quot;✗ MariaDB connectivity test failed&quot;\n        fi\n        \n        # Check for errors in log\n        ERROR_COUNT=$(tail -100 /var/log/mysql/error.log | grep -i error | wc -l)\n        log_message &quot;ℹ MariaDB errors in last 100 log lines: ${ERROR_COUNT}&quot;\n    else\n        log_message &quot;✗ MariaDB service is not running&quot;\n    fi\nfi\n\n# PostgreSQL health check\nif command -v psql &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active postgresql-16 &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;✓ PostgreSQL service is running&quot;\n        \n        # Test connectivity\n        if sudo -u postgres psql -c &quot;SELECT version();&quot; &gt;/dev/null 2&gt;&amp;1; then\n            log_message &quot;✓ PostgreSQL connectivity test passed&quot;\n        else\n            log_message &quot;✗ PostgreSQL connectivity test failed&quot;\n        fi\n        \n        # Check replication lag (if slave)\n        if sudo -u postgres psql -t -c &quot;SELECT pg_is_in_recovery();&quot; | grep -q &quot;t&quot;; then\n            LAG=$(sudo -u postgres psql -t -c &quot;SELECT EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))::int;&quot;)\n            log_message &quot;ℹ PostgreSQL replication lag: ${LAG} seconds&quot;\n        fi\n    else\n        log_message &quot;✗ PostgreSQL service is not running&quot;\n    fi\nfi\n\n# MongoDB health check\nif command -v mongosh &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;✓ MongoDB service is running&quot;\n        \n        # Test connectivity\n        if mongosh --quiet --eval &quot;db.adminCommand(&#039;ping&#039;).ok&quot; 2&gt;/dev/null | grep -q &quot;1&quot;; then\n            log_message &quot;✓ MongoDB connectivity test passed&quot;\n        else\n            log_message &quot;✗ MongoDB connectivity test failed&quot;\n        fi\n        \n        # Check replica set status\n        if mongosh admin --quiet --eval &quot;rs.status().ok&quot; 2&gt;/dev/null | grep -q &quot;1&quot;; then\n            PRIMARY_COUNT=$(mongosh admin --quiet --eval &quot;rs.status().members.filter(m =&gt; m.stateStr === &#039;PRIMARY&#039;).length&quot;)\n            log_message &quot;ℹ MongoDB replica set has ${PRIMARY_COUNT} primary node(s)&quot;\n        fi\n    else\n        log_message &quot;✗ MongoDB service is not running&quot;\n    fi\nfi\n\n# Redis health check\nif command -v redis-cli &gt;/dev/null 2&gt;&amp;1; then\n    if systemctl is-active redis &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;✓ Redis service is running&quot;\n        \n        # Test connectivity\n        if redis-cli ping | grep -q &quot;PONG&quot;; then\n            log_message &quot;✓ Redis connectivity test passed&quot;\n        else\n            log_message &quot;✗ Redis connectivity test failed&quot;\n        fi\n        \n        # Check memory usage\n        REDIS_MEMORY_PERCENT=$(redis-cli info memory | grep used_memory_rss_human: | cut -d: -f2)\n        log_message &quot;ℹ Redis memory usage: ${REDIS_MEMORY_PERCENT}&quot;\n    else\n        log_message &quot;✗ Redis service is not running&quot;\n    fi\nfi\n\nlog_message &quot;Database health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/database-health-check.sh\n\n# Schedule health checks every 10 minutes\necho &quot;*/10 * * * * root /usr/local/bin/database-health-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-database-issues\" class=\"mobile-header\">Common Database Issues</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/MariaDB troubleshooting\n# Check service status\nsudo systemctl status mariadb\n\n# Check error logs\nsudo tail -f /var/log/mysql/error.log\n\n# Test connectivity\nmysql -u root -p -e &quot;SELECT version();&quot;\n\n# Check process list\nmysql -u root -p -e &quot;SHOW FULL PROCESSLIST;&quot;\n\n# Check locks\nmysql -u root -p -e &quot;SHOW ENGINE INNODB STATUS\\G&quot; | grep -A 20 &quot;LATEST DETECTED DEADLOCK&quot;\n\n# Repair tables\nmysqlcheck --all-databases --repair -u root -p\n\n# PostgreSQL troubleshooting\n# Check service status\nsudo systemctl status postgresql-16\n\n# Check logs\nsudo tail -f /var/lib/pgsql/16/data/log/postgresql-*.log\n\n# Test connectivity\nsudo -u postgres psql -c &quot;SELECT version();&quot;\n\n# Check active connections\nsudo -u postgres psql -c &quot;SELECT count(*) FROM pg_stat_activity WHERE state = &#039;active&#039;;&quot;\n\n# Check locks\nsudo -u postgres psql -c &quot;SELECT * FROM pg_locks WHERE NOT granted;&quot;\n\n# Vacuum and analyze\nsudo -u postgres vacuumdb --all --analyze --verbose\n\n# MongoDB troubleshooting\n# Check service status\nsudo systemctl status mongod\n\n# Check logs\nsudo tail -f /var/log/mongodb/mongod.log\n\n# Test connectivity\nmongosh --eval &quot;db.adminCommand(&#039;ping&#039;)&quot;\n\n# Check replica set status\nmongosh admin --eval &quot;rs.status()&quot;\n\n# Check database profiler\nmongosh myapp --eval &quot;db.getProfilingStatus()&quot;\n\n# Repair database\nmongosh myapp --eval &quot;db.repairDatabase()&quot;\n\n# Redis troubleshooting\n# Check service status\nsudo systemctl status redis\n\n# Check logs\nsudo tail -f /var/log/redis/redis-server.log\n\n# Test connectivity\nredis-cli ping\n\n# Check memory stats\nredis-cli info memory\n\n# Check slow log\nredis-cli slowlog get 10\n\n# Monitor commands\nredis-cli monitor</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-database-debugging\" class=\"mobile-header\">Advanced Database Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/MariaDB debugging\n# Enable general log\nmysql -u root -p -e &quot;SET GLOBAL general_log = &#039;ON&#039;;&quot;\nmysql -u root -p -e &quot;SET GLOBAL log_output = &#039;FILE&#039;;&quot;\n\n# Performance schema\nmysql -u root -p -e &quot;SELECT * FROM performance_schema.file_summary_by_event_name WHERE event_name LIKE &#039;wait/io/file%&#039; ORDER BY sum_timer_wait DESC LIMIT 10;&quot;\n\n# PostgreSQL debugging\n# Enable query logging\nsudo -u postgres psql -c &quot;ALTER SYSTEM SET log_statement = &#039;all&#039;;&quot;\nsudo -u postgres psql -c &quot;SELECT pg_reload_conf();&quot;\n\n# Check query performance\nsudo -u postgres psql -c &quot;SELECT query, calls, total_time, mean_time FROM pg_stat_statements ORDER BY total_time DESC LIMIT 10;&quot;\n\n# MongoDB debugging\n# Enable profiler\nmongosh myapp --eval &quot;db.setProfilingLevel(2, { slowms: 100 })&quot;\n\n# Check slow operations\nmongosh myapp --eval &quot;db.system.profile.find().sort({ts:-1}).limit(5).pretty()&quot;\n\n# Redis debugging\n# Enable slow log\nredis-cli CONFIG SET slowlog-log-slower-than 10000\n\n# Check slow operations\nredis-cli SLOWLOG GET 10\n\n# Monitor memory usage\nredis-cli --latency-history -i 1</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://dev.mysql.com/doc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MySQL Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://mariadb.com/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MariaDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.postgresql.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">PostgreSQL Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://redis.io/documentation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Redis Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Database_Security_Cheat_Sheet.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Database Security Cheat Sheet</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"25 min","wordCount":4871,"lastBuilt":"2025-09-14T01:30:36.311Z"},{"name":"discourse","displayName":"Discourse","slug":"discourse","description":"Repo for discourse","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/discourse","updatedAt":"2025-09-08T03:06:31Z","createdAt":"2025-09-08T03:06:20Z","readmeRaw":"## 👋 Welcome to discourse 🚀  \n\ndiscourse README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-discourse\" class=\"mobile-header\">👋 Welcome to discourse 🚀  </h2>\n<p class=\"mobile-paragraph\">discourse README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:46.222Z"},{"name":"docker","displayName":"Docker","slug":"docker","description":"Repo for docker","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/docker","updatedAt":"2025-09-14T01:29:53Z","createdAt":"2023-08-28T03:47:37Z","readmeRaw":"# Docker Installation Guide\n\nDocker is a free and open-source containerization platform that enables developers to package applications and their dependencies into portable containers. Originally developed by Solomon Hykes at dotCloud, Docker revolutionized application deployment by providing OS-level virtualization. It serves as a FOSS alternative to proprietary virtualization solutions like VMware vSphere, Microsoft Hyper-V containers, or commercial container platforms, offering comparable functionality with features like image layering, container orchestration, and resource isolation.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 64-bit processor with virtualization support (Intel VT-x/AMD-V)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 20GB minimum (50GB+ recommended, SSD preferred)\n  - BIOS: Virtualization must be enabled\n- **Operating System**: \n  - Linux: Kernel 3.10+ with cgroups and namespaces support\n  - macOS: 10.15+ (Catalina or newer)\n  - Windows: Windows 10 64-bit Pro/Enterprise/Education (Build 19041+)\n- **Network Requirements**:\n  - Internet connection for pulling images\n  - Port 2375 (unencrypted) or 2376 (TLS) for Docker API\n  - Port 2377 for Swarm mode cluster management\n  - Port 7946 TCP/UDP for container network discovery\n  - Port 4789 UDP for overlay network traffic\n- **Dependencies**:\n  - iptables 1.4+ (Linux)\n  - Git (for building images)\n  - systemd or compatible init system (Linux)\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Remove old versions\nsudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-engine\n\n# Install required packages\nsudo yum install -y yum-utils\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker Engine\nsudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Verify installation\nsudo docker run hello-world\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt-get update\n\n# Install prerequisites\nsudo apt-get install -y \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n# Add Docker's official GPG key\nsudo mkdir -m 0755 -p /etc/apt/keyrings\nwget -O docker.gpg https://download.docker.com/linux/ubuntu/gpg\nsudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg < docker.gpg\nrm docker.gpg\n\n# Add repository\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install Docker Engine\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n```\n\n### Arch Linux\n\n```bash\n# Install Docker from official repositories\nsudo pacman -S docker docker-compose docker-buildx\n\n# Optional: Install Docker documentation\nsudo pacman -S docker-docs\n\n# Enable and start Docker service\nsudo systemctl enable --now docker\n\n# For rootless Docker\nsudo pacman -S fuse-overlayfs slirp4netns\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n```\n\n### Alpine Linux\n\n```bash\n# Add community repository if not enabled\necho \"http://dl-cdn.alpinelinux.org/alpine/v$(cat /etc/alpine-release | cut -d'.' -f1,2)/community\" >> /etc/apk/repositories\n\n# Update package index\napk update\n\n# Install Docker\napk add docker docker-cli docker-compose\n\n# Add Docker to boot services\nrc-update add docker boot\n\n# Start Docker service\nservice docker start\n\n# Install docker-compose (Python version)\napk add py3-pip\npip3 install docker-compose\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y docker docker-compose docker-buildx\n\n# For latest version from official Docker repository\nsudo zypper addrepo https://download.docker.com/linux/suse/docker-ce.repo\nsudo zypper refresh\nsudo zypper install -y docker-ce docker-ce-cli containerd.io\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n\n# SLES specific\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y docker\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install --cask docker\n\n# Start Docker Desktop\nopen /Applications/Docker.app\n\n# Wait for Docker to start, then verify\ndocker --version\ndocker compose version\n\n# Alternative: Install Docker CLI only (without Desktop)\nbrew install docker docker-compose\n\n# For docker-machine (managing remote Docker hosts)\nbrew install docker-machine\n```\n\n### FreeBSD\n\n```bash\n# Install Docker from packages\npkg install docker docker-compose\n\n# Or from ports\ncd /usr/ports/sysutils/docker\nmake install clean\n\n# Enable Docker\necho 'docker_enable=\"YES\"' >> /etc/rc.conf\n\n# Load required kernel modules\nkldload linux64\nkldload fdescfs\n\n# Start Docker\nservice docker start\n\n# Add user to docker group\npw groupmod docker -m $USER\n```\n\n### Windows\n\n```powershell\n# Enable WSL2 (required for Docker Desktop)\nwsl --install\n\n# Enable required Windows features\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n# Download and install Docker Desktop\n# Visit: https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe\n\n# Or use Chocolatey\nchoco install docker-desktop\n\n# Or use winget\nwinget install Docker.DockerDesktop\n\n# Start Docker Desktop from Start Menu\n# Verify installation in PowerShell\ndocker --version\ndocker compose version\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Configure Docker daemon**:\n```bash\n# Create daemon configuration directory\nsudo mkdir -p /etc/docker\n\n# Create daemon.json with optimized settings\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\"\n  },\n  \"storage-driver\": \"overlay2\",\n  \"live-restore\": true,\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    }\n  }\n}\nEOF\n\n# Restart Docker to apply changes\nsudo systemctl restart docker\n```\n\n2. **Configure user permissions**:\n```bash\n# Add current user to docker group (Linux)\nsudo usermod -aG docker $USER\n\n# Apply group changes (logout/login or use newgrp)\nnewgrp docker\n\n# Verify docker works without sudo\ndocker run hello-world\n```\n\n3. **Essential security settings**:\n```bash\n# Enable user namespace remapping for better isolation\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"userns-remap\": \"default\"\n}\nEOF\n\n# Create subuid/subgid entries\necho \"dockremap:100000:65536\" | sudo tee -a /etc/subuid\necho \"dockremap:100000:65536\" | sudo tee -a /etc/subgid\n\n# Restart Docker\nsudo systemctl restart docker\n```\n\n### Testing Initial Setup\n\n```bash\n# Check Docker version\ndocker version\n\n# View system information\ndocker info\n\n# Test container creation\ndocker run --rm alpine echo \"Docker is working!\"\n\n# Test networking\ndocker run --rm alpine ping -c 3 google.com\n\n# Test volume mounting\ndocker run --rm -v /tmp:/host alpine ls /host\n```\n\n**WARNING:** Never expose Docker daemon socket (2375/2376) to the internet without proper TLS authentication!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Docker to start on boot\nsudo systemctl enable docker\n\n# Start Docker service\nsudo systemctl start docker\n\n# Stop Docker service\nsudo systemctl stop docker\n\n# Restart Docker service\nsudo systemctl restart docker\n\n# Reload Docker configuration\nsudo systemctl reload docker\n\n# Check Docker status\nsudo systemctl status docker\n\n# View Docker logs\nsudo journalctl -u docker.service -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable Docker to start on boot\nrc-update add docker boot\n\n# Start Docker service\nrc-service docker start\n\n# Stop Docker service\nrc-service docker stop\n\n# Restart Docker service\nrc-service docker restart\n\n# Check Docker status\nrc-service docker status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'docker_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Docker\nservice docker start\n\n# Stop Docker\nservice docker stop\n\n# Restart Docker\nservice docker restart\n\n# Check status\nservice docker status\n```\n\n### launchd (macOS)\n\n```bash\n# Docker Desktop manages its own services\n# Control through the UI or command line\n\n# Stop Docker Desktop\nosascript -e 'quit app \"Docker\"'\n\n# Start Docker Desktop\nopen -a Docker\n\n# Check if Docker is running\ndocker system info >/dev/null 2>&1 && echo \"Docker is running\" || echo \"Docker is not running\"\n```\n\n### Windows Service Manager\n\n```powershell\n# Docker Desktop manages services automatically\n# For manual control:\n\n# Restart Docker Desktop\nStop-Process -Name \"Docker Desktop\" -Force\nStart-Process \"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe\"\n\n# Check Docker service status\nGet-Service -Name docker\n\n# Restart Docker service\nRestart-Service docker\n```\n\n## Advanced Configuration\n\n### Storage Driver Configuration\n\n```bash\n# Configure storage driver options\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"storage-driver\": \"overlay2\",\n  \"storage-opts\": [\n    \"overlay2.override_kernel_check=true\",\n    \"overlay2.size=20G\"\n  ],\n  \"data-root\": \"/var/lib/docker\"\n}\nEOF\n\n# For devicemapper (older systems)\n{\n  \"storage-driver\": \"devicemapper\",\n  \"storage-opts\": [\n    \"dm.thinpooldev=/dev/mapper/docker-thinpool\",\n    \"dm.use_deferred_removal=true\",\n    \"dm.use_deferred_deletion=true\"\n  ]\n}\n```\n\n### Network Configuration\n\n```bash\n# Configure default network settings\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"bip\": \"172.17.0.1/16\",\n  \"fixed-cidr\": \"172.17.0.0/16\",\n  \"default-address-pools\": [\n    {\n      \"base\": \"172.80.0.0/16\",\n      \"size\": 24\n    }\n  ],\n  \"dns\": [\"8.8.8.8\", \"8.8.4.4\"],\n  \"dns-search\": [\"example.com\"]\n}\nEOF\n\n# Enable IPv6 support\n{\n  \"ipv6\": true,\n  \"fixed-cidr-v6\": \"2001:db8::/64\"\n}\n```\n\n### Resource Limits\n\n```bash\n# Configure default container limits\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    },\n    \"nproc\": {\n      \"Name\": \"nproc\",\n      \"Hard\": 32000,\n      \"Soft\": 32000\n    }\n  },\n  \"default-runtime\": \"runc\",\n  \"runtimes\": {\n    \"nvidia\": {\n      \"path\": \"nvidia-container-runtime\",\n      \"runtimeArgs\": []\n    }\n  }\n}\nEOF\n```\n\n## Reverse Proxy Setup\n\n### nginx as Docker Registry Proxy\n\n```nginx\n# /etc/nginx/sites-available/docker-registry\nserver {\n    listen 443 ssl http2;\n    server_name registry.example.com;\n\n    ssl_certificate /etc/ssl/certs/registry.crt;\n    ssl_certificate_key /etc/ssl/private/registry.key;\n\n    # Docker Registry API\n    location /v2/ {\n        proxy_pass http://localhost:5000;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_read_timeout 900;\n        \n        # Required for docker client\n        chunked_transfer_encoding on;\n        client_max_body_size 0;\n    }\n}\n```\n\n### Apache as Docker Registry Proxy\n\n```apache\n# /etc/apache2/sites-available/docker-registry.conf\n<VirtualHost *:443>\n    ServerName registry.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/registry.crt\n    SSLCertificateKeyFile /etc/ssl/private/registry.key\n    \n    ProxyPreserveHost On\n    ProxyPass /v2 http://localhost:5000/v2\n    ProxyPassReverse /v2 http://localhost:5000/v2\n    \n    <Location /v2>\n        Order deny,allow\n        Allow from all\n        \n        # Authentication\n        AuthType Basic\n        AuthName \"Docker Registry\"\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    </Location>\n</VirtualHost>\n```\n\n### Caddy as Docker Registry Proxy\n\n```caddyfile\nregistry.example.com {\n    reverse_proxy localhost:5000 {\n        header_up Host {host}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    basicauth /v2/* {\n        admin $2a$14$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    }\n    \n    encode gzip\n}\n```\n\n### Traefik Configuration\n\n```yaml\n# docker-compose.yml for Traefik\nversion: '3.8'\n\nservices:\n  traefik:\n    image: traefik:v2.9\n    command:\n      - \"--api.insecure=true\"\n      - \"--providers.docker=true\"\n      - \"--entrypoints.websecure.address=:443\"\n    ports:\n      - \"443:443\"\n      - \"8080:8080\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./certs:/certs\n\n  registry:\n    image: registry:2\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.registry.rule=Host(`registry.example.com`)\"\n      - \"traefik.http.routers.registry.entrypoints=websecure\"\n      - \"traefik.http.routers.registry.tls=true\"\n```\n\n## Security Configuration\n\n### Docker Daemon Security\n\n```bash\n# Enable TLS for Docker daemon\n# Generate CA private key\nopenssl genrsa -aes256 -out ca-key.pem 4096\n\n# Generate CA certificate\nopenssl req -new -x509 -days 3650 -key ca-key.pem -sha256 -out ca.pem\n\n# Generate server key\nopenssl genrsa -out server-key.pem 4096\n\n# Generate certificate signing request\nopenssl req -subj \"/CN=$HOST\" -sha256 -new -key server-key.pem -out server.csr\n\n# Generate server certificate\necho subjectAltName = DNS:$HOST,IP:127.0.0.1 >> extfile.cnf\necho extendedKeyUsage = serverAuth >> extfile.cnf\nopenssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem -extfile extfile.cnf\n\n# Configure Docker to use TLS\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"hosts\": [\"tcp://0.0.0.0:2376\"],\n  \"tls\": true,\n  \"tlsverify\": true,\n  \"tlscert\": \"/etc/docker/certs/server-cert.pem\",\n  \"tlskey\": \"/etc/docker/certs/server-key.pem\",\n  \"tlscacert\": \"/etc/docker/certs/ca.pem\"\n}\nEOF\n```\n\n### AppArmor/SELinux Configuration\n\n```bash\n# AppArmor (Debian/Ubuntu)\n# Check if AppArmor is enabled\nsudo aa-status\n\n# Docker containers use docker-default profile by default\n# Create custom profile\nsudo tee /etc/apparmor.d/docker-custom <<EOF\n#include <tunables/global>\n\nprofile docker-custom flags=(attach_disconnected,mediate_deleted) {\n  #include <abstractions/base>\n  \n  network,\n  capability,\n  \n  # Deny dangerous capabilities\n  deny capability dac_override,\n  deny capability setuid,\n  deny capability setgid,\n  \n  # File access\n  deny /proc/sys/** w,\n  deny /sys/** w,\n  \n  # Allow necessary access\n  /usr/bin/** ix,\n  /bin/** ix,\n  /lib/** r,\n}\nEOF\n\n# Load profile\nsudo apparmor_parser -r /etc/apparmor.d/docker-custom\n\n# SELinux (RHEL/CentOS)\n# Enable SELinux for containers\nsudo setsebool -P container_manage_cgroup true\n\n# Check Docker SELinux context\nps -eZ | grep dockerd\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\n# Docker manages its own iptables rules\n# To integrate with UFW:\nsudo tee -a /etc/ufw/after.rules <<EOF\n*filter\n:ufw-user-forward - [0:0]\n:DOCKER-USER - [0:0]\n-A DOCKER-USER -j ufw-user-forward\n-A DOCKER-USER -j RETURN -s 10.0.0.0/8\n-A DOCKER-USER -j RETURN -s 172.16.0.0/12\n-A DOCKER-USER -j RETURN -s 192.168.0.0/16\n-A DOCKER-USER -j DROP\nCOMMIT\nEOF\n\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\n# Add Docker zone\nsudo firewall-cmd --permanent --new-zone=docker\nsudo firewall-cmd --permanent --zone=docker --add-interface=docker0\nsudo firewall-cmd --permanent --zone=docker --add-port=2377/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/udp\nsudo firewall-cmd --permanent --zone=docker --add-port=4789/udp\nsudo firewall-cmd --reload\n\n# iptables (manual)\n# Allow Docker subnet\nsudo iptables -A INPUT -s 172.17.0.0/16 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on docker0 all\npass out on docker0 all\n```\n\n## Database Setup\n\nDocker doesn't require a database, but here's how to run databases in Docker:\n\n### PostgreSQL in Docker\n\n```bash\n# Create volume for persistent data\ndocker volume create postgres_data\n\n# Run PostgreSQL container\ndocker run -d \\\n  --name postgres \\\n  --restart unless-stopped \\\n  -e POSTGRES_PASSWORD=securepassword \\\n  -e POSTGRES_USER=myuser \\\n  -e POSTGRES_DB=mydb \\\n  -v postgres_data:/var/lib/postgresql/data \\\n  -p 5432:5432 \\\n  postgres:15-alpine\n\n# Connect to PostgreSQL\ndocker exec -it postgres psql -U myuser -d mydb\n```\n\n### MySQL in Docker\n\n```bash\n# Create volume for persistent data\ndocker volume create mysql_data\n\n# Run MySQL container\ndocker run -d \\\n  --name mysql \\\n  --restart unless-stopped \\\n  -e MYSQL_ROOT_PASSWORD=rootpassword \\\n  -e MYSQL_DATABASE=mydb \\\n  -e MYSQL_USER=myuser \\\n  -e MYSQL_PASSWORD=securepassword \\\n  -v mysql_data:/var/lib/mysql \\\n  -p 3306:3306 \\\n  mysql:8.0\n\n# Connect to MySQL\ndocker exec -it mysql mysql -u myuser -p\n```\n\n## Performance Optimization\n\n### Kernel Parameters\n\n```bash\n# Optimize kernel parameters for Docker\nsudo tee -a /etc/sysctl.conf <<EOF\n# Docker optimization\nvm.max_map_count=262144\nfs.file-max=2097152\nfs.inotify.max_user_watches=524288\nfs.inotify.max_user_instances=512\n\n# Network optimization\nnet.core.somaxconn=32768\nnet.ipv4.tcp_max_syn_backlog=8192\nnet.core.netdev_max_backlog=5000\nnet.ipv4.ip_local_port_range=1024 65535\n\n# Bridge settings\nnet.bridge.bridge-nf-call-iptables=1\nnet.bridge.bridge-nf-call-ip6tables=1\nnet.ipv4.ip_forward=1\nEOF\n\n# Apply settings\nsudo sysctl -p\n```\n\n### Storage Optimization\n\n```bash\n# Use dedicated disk for Docker\n# Format with XFS for better performance\nsudo mkfs.xfs /dev/sdb1\nsudo mkdir -p /var/lib/docker\nsudo mount /dev/sdb1 /var/lib/docker\n\n# Add to /etc/fstab\necho \"/dev/sdb1 /var/lib/docker xfs defaults,noatime 0 2\" | sudo tee -a /etc/fstab\n\n# Configure storage driver options\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"storage-driver\": \"overlay2\",\n  \"storage-opts\": [\n    \"overlay2.override_kernel_check=true\"\n  ],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\"\n  }\n}\nEOF\n```\n\n### Build Optimization\n\n```bash\n# Enable BuildKit for faster builds\nexport DOCKER_BUILDKIT=1\n\n# Configure BuildKit in daemon\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"features\": {\n    \"buildkit\": true\n  }\n}\nEOF\n\n# Use build cache mount\n# In Dockerfile:\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN --mount=type=cache,target=/var/cache/apk \\\n    apk add --no-cache git\n```\n\n## Monitoring\n\n### Docker Stats and Events\n\n```bash\n# Monitor container resource usage\ndocker stats\n\n# Stream Docker events\ndocker events\n\n# Monitor specific container\ndocker stats container_name\n\n# Export metrics in JSON\ndocker stats --no-stream --format json > stats.json\n\n# Monitor Docker daemon\nsudo journalctl -u docker.service -f\n```\n\n### cAdvisor Setup\n\n```bash\n# Run cAdvisor for container metrics\ndocker run -d \\\n  --name=cadvisor \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -v /:/rootfs:ro \\\n  -v /var/run:/var/run:ro \\\n  -v /sys:/sys:ro \\\n  -v /var/lib/docker/:/var/lib/docker:ro \\\n  -v /dev/disk/:/dev/disk:ro \\\n  --privileged \\\n  gcr.io/cadvisor/cadvisor:latest\n\n# Access metrics at http://localhost:8080\n```\n\n### Prometheus Integration\n\n```yaml\n# docker-compose.yml for monitoring stack\nversion: '3.8'\n\nservices:\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    ports:\n      - \"9090:9090\"\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n\n  node-exporter:\n    image: prom/node-exporter\n    ports:\n      - \"9100:9100\"\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n\nvolumes:\n  prometheus_data:\n```\n\n## Backup and Restore\n\n### Container Backup\n\n```bash\n#!/bin/bash\n# backup-docker.sh\n\nBACKUP_DIR=\"/backup/docker\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p $BACKUP_DIR/{images,volumes,configs}\n\n# Backup running containers\ndocker ps -q | while read container; do\n    name=$(docker inspect -f '{{.Name}}' $container | sed 's/\\///')\n    docker commit $container backup_$name:$DATE\n    docker save backup_$name:$DATE | gzip > $BACKUP_DIR/images/${name}_${DATE}.tar.gz\n    docker inspect $container > $BACKUP_DIR/configs/${name}_${DATE}.json\ndone\n\n# Backup volumes\ndocker volume ls -q | while read volume; do\n    docker run --rm \\\n        -v $volume:/data \\\n        -v $BACKUP_DIR/volumes:/backup \\\n        alpine tar czf /backup/${volume}_${DATE}.tar.gz -C /data .\ndone\n\n# Backup Docker daemon config\ncp /etc/docker/daemon.json $BACKUP_DIR/configs/daemon_${DATE}.json\n\necho \"Backup completed: $DATE\"\n```\n\n### Volume Backup\n\n```bash\n# Backup named volume\ndocker run --rm \\\n    -v myvolume:/source:ro \\\n    -v $(pwd):/backup \\\n    alpine tar czf /backup/myvolume.tar.gz -C /source .\n\n# Restore volume\ndocker run --rm \\\n    -v myvolume:/target \\\n    -v $(pwd):/backup \\\n    alpine tar xzf /backup/myvolume.tar.gz -C /target\n```\n\n### Registry Backup\n\n```bash\n# Backup Docker registry data\ndocker exec registry tar czf - /var/lib/registry | gzip > registry_backup_$(date +%Y%m%d).tar.gz\n\n# Backup registry config\ndocker exec registry cat /etc/docker/registry/config.yml > registry_config_backup.yml\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Cannot connect to Docker daemon**:\n```bash\n# Check if Docker is running\nsudo systemctl status docker\n\n# Check Docker socket permissions\nls -la /var/run/docker.sock\n\n# Check if user is in docker group\ngroups $USER\n\n# Start Docker if not running\nsudo systemctl start docker\n```\n\n2. **Container networking issues**:\n```bash\n# Check Docker networks\ndocker network ls\n\n# Inspect bridge network\ndocker network inspect bridge\n\n# Check iptables rules\nsudo iptables -L -n -v\n\n# Reset Docker networking\nsudo systemctl stop docker\nsudo ip link delete docker0\nsudo systemctl start docker\n```\n\n3. **Storage space issues**:\n```bash\n# Check disk usage\ndocker system df\n\n# Clean up unused resources\ndocker system prune -a --volumes\n\n# Check Docker root directory\ndf -h /var/lib/docker\n\n# Find large containers/images\ndocker ps -s\ndocker images --format \"table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}\"\n```\n\n4. **Permission denied errors**:\n```bash\n# Fix socket permissions\nsudo chmod 666 /var/run/docker.sock\n\n# Fix user namespace issues\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Check SELinux/AppArmor\ngetenforce  # SELinux\nsudo aa-status  # AppArmor\n```\n\n### Debug Mode\n\n```bash\n# Run Docker in debug mode\nsudo dockerd --debug\n\n# Enable debug logging\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"debug\": true,\n  \"log-level\": \"debug\"\n}\nEOF\n\nsudo systemctl restart docker\n\n# Check debug logs\nsudo journalctl -u docker.service --no-pager\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum update docker-ce docker-ce-cli containerd.io\n\n# Debian/Ubuntu\nsudo apt-get update\nsudo apt-get upgrade docker-ce docker-ce-cli containerd.io\n\n# Arch Linux\nsudo pacman -Syu docker\n\n# Alpine Linux\napk update\napk upgrade docker\n\n# openSUSE\nsudo zypper update docker\n\n# FreeBSD\npkg update\npkg upgrade docker\n\n# Always restart after updates\nsudo systemctl restart docker\n```\n\n### Cleanup Tasks\n\n```bash\n#!/bin/bash\n# docker-cleanup.sh\n\necho \"Starting Docker cleanup...\"\n\n# Remove stopped containers\ndocker container prune -f\n\n# Remove unused images\ndocker image prune -a -f\n\n# Remove unused volumes\ndocker volume prune -f\n\n# Remove unused networks\ndocker network prune -f\n\n# Remove build cache\ndocker builder prune -f\n\n# Show disk usage after cleanup\ndocker system df\n\necho \"Cleanup completed\"\n```\n\n### Log Rotation\n\n```bash\n# Configure log rotation for containers\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\",\n    \"compress\": \"true\"\n  }\n}\nEOF\n\n# System-wide Docker logs rotation\nsudo tee /etc/logrotate.d/docker <<EOF\n/var/lib/docker/containers/*/*.log {\n    rotate 7\n    daily\n    compress\n    missingok\n    delaycompress\n    copytruncate\n}\nEOF\n```\n\n## Integration Examples\n\n### CI/CD Pipeline Integration\n\n```yaml\n# GitLab CI example\nstages:\n  - build\n  - test\n  - deploy\n\nvariables:\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: \"/certs\"\n\nbuild:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker build -t myapp:$CI_COMMIT_SHA .\n    - docker push myapp:$CI_COMMIT_SHA\n\n# Jenkins Pipeline example\npipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                script {\n                    docker.build(\"myapp:${env.BUILD_ID}\")\n                }\n            }\n        }\n    }\n}\n```\n\n### Kubernetes Integration\n\n```bash\n# Install CRI-Docker for Kubernetes\nCRI_VERSION=\"0.3.1\"\nwget https://github.com/Mirantis/cri-dockerd/releases/download/v${CRI_VERSION}/cri-dockerd-${CRI_VERSION}.amd64.tgz\ntar xzf cri-dockerd-${CRI_VERSION}.amd64.tgz\nsudo install -o root -g root -m 0755 cri-dockerd /usr/local/bin/cri-dockerd\nrm cri-dockerd-${CRI_VERSION}.amd64.tgz cri-dockerd\n\n# Create systemd service\nsudo tee /etc/systemd/system/cri-docker.service <<EOF\n[Unit]\nDescription=CRI Docker Interface\nAfter=network.target docker.service\nRequires=docker.service\n\n[Service]\nType=notify\nExecStart=/usr/local/bin/cri-dockerd --container-runtime-endpoint unix:///var/run/cri-dockerd.sock\nRestart=always\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now cri-docker\n```\n\n### Docker Compose Examples\n\n```yaml\n# Multi-tier application stack\nversion: '3.8'\n\nservices:\n  web:\n    build: ./web\n    ports:\n      - \"80:80\"\n    environment:\n      - DATABASE_URL=postgresql://user:pass@db:5432/mydb\n    depends_on:\n      - db\n    networks:\n      - frontend\n      - backend\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n      - POSTGRES_DB=mydb\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    networks:\n      - backend\n\n  redis:\n    image: redis:alpine\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db_data:\n```\n\n### SDK Integration\n\n```python\n# Python Docker SDK\nimport docker\n\nclient = docker.from_env()\n\n# Run container\ncontainer = client.containers.run(\n    \"alpine\",\n    \"echo hello world\",\n    detach=True\n)\n\n# List containers\nfor container in client.containers.list():\n    print(container.name)\n\n# Build image\nimage, logs = client.images.build(\n    path=\".\",\n    tag=\"myapp:latest\"\n)\n```\n\n```javascript\n// Node.js Docker SDK\nconst Docker = require('dockerode');\nconst docker = new Docker();\n\n// Run container\ndocker.createContainer({\n  Image: 'alpine',\n  Cmd: ['echo', 'hello world'],\n  name: 'mycontainer'\n}, (err, container) => {\n  if (!err) {\n    container.start();\n  }\n});\n\n// List containers\ndocker.listContainers((err, containers) => {\n  containers.forEach(containerInfo => {\n    console.log(containerInfo.Names);\n  });\n});\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.docker.com/)\n- [Docker Hub](https://hub.docker.com/)\n- [Docker GitHub Repository](https://github.com/docker)\n- [Docker Best Practices](https://docs.docker.com/develop/dev-best-practices/)\n- [Docker Security Documentation](https://docs.docker.com/engine/security/)\n- [Docker Compose Documentation](https://docs.docker.com/compose/)\n- [Docker Community Forums](https://forums.docker.com/)\n- [Play with Docker](https://labs.play-with-docker.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"docker-installation-guide\" class=\"mobile-header\">Docker Installation Guide</h1>\n<p class=\"mobile-paragraph\">Docker is a free and open-source containerization platform that enables developers to package applications and their dependencies into portable containers. Originally developed by Solomon Hykes at dotCloud, Docker revolutionized application deployment by providing OS-level virtualization. It serves as a FOSS alternative to proprietary virtualization solutions like VMware vSphere, Microsoft Hyper-V containers, or commercial container platforms, offering comparable functionality with features like image layering, container orchestration, and resource isolation.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 64-bit processor with virtualization support (Intel VT-x/AMD-V)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 20GB minimum (50GB+ recommended, SSD preferred)</li>\n<li class=\"mobile-list-item\">BIOS: Virtualization must be enabled</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Kernel 3.10+ with cgroups and namespaces support</li>\n<li class=\"mobile-list-item\">macOS: 10.15+ (Catalina or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows 10 64-bit Pro/Enterprise/Education (Build 19041+)</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Internet connection for pulling images</li>\n<li class=\"mobile-list-item\">Port 2375 (unencrypted) or 2376 (TLS) for Docker API</li>\n<li class=\"mobile-list-item\">Port 2377 for Swarm mode cluster management</li>\n<li class=\"mobile-list-item\">Port 7946 TCP/UDP for container network discovery</li>\n<li class=\"mobile-list-item\">Port 4789 UDP for overlay network traffic</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">iptables 1.4+ (Linux)</li>\n<li class=\"mobile-list-item\">Git (for building images)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Remove old versions\nsudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-engine\n\n# Install required packages\nsudo yum install -y yum-utils\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker Engine\nsudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Verify installation\nsudo docker run hello-world</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt-get update\n\n# Install prerequisites\nsudo apt-get install -y \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n# Add Docker&#039;s official GPG key\nsudo mkdir -m 0755 -p /etc/apt/keyrings\nwget -O docker.gpg https://download.docker.com/linux/ubuntu/gpg\nsudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg &lt; docker.gpg\nrm docker.gpg\n\n# Add repository\necho \\\n  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Install Docker Engine\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker from official repositories\nsudo pacman -S docker docker-compose docker-buildx\n\n# Optional: Install Docker documentation\nsudo pacman -S docker-docs\n\n# Enable and start Docker service\nsudo systemctl enable --now docker\n\n# For rootless Docker\nsudo pacman -S fuse-overlayfs slirp4netns\n\n# Add user to docker group\nsudo usermod -aG docker $USER</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add community repository if not enabled\necho &quot;http://dl-cdn.alpinelinux.org/alpine/v$(cat /etc/alpine-release | cut -d&#039;.&#039; -f1,2)/community&quot; &gt;&gt; /etc/apk/repositories\n\n# Update package index\napk update\n\n# Install Docker\napk add docker docker-cli docker-compose\n\n# Add Docker to boot services\nrc-update add docker boot\n\n# Start Docker service\nservice docker start\n\n# Install docker-compose (Python version)\napk add py3-pip\npip3 install docker-compose</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y docker docker-compose docker-buildx\n\n# For latest version from official Docker repository\nsudo zypper addrepo https://download.docker.com/linux/suse/docker-ce.repo\nsudo zypper refresh\nsudo zypper install -y docker-ce docker-ce-cli containerd.io\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n\n# SLES specific\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install --cask docker\n\n# Start Docker Desktop\nopen /Applications/Docker.app\n\n# Wait for Docker to start, then verify\ndocker --version\ndocker compose version\n\n# Alternative: Install Docker CLI only (without Desktop)\nbrew install docker docker-compose\n\n# For docker-machine (managing remote Docker hosts)\nbrew install docker-machine</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker from packages\npkg install docker docker-compose\n\n# Or from ports\ncd /usr/ports/sysutils/docker\nmake install clean\n\n# Enable Docker\necho &#039;docker_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Load required kernel modules\nkldload linux64\nkldload fdescfs\n\n# Start Docker\nservice docker start\n\n# Add user to docker group\npw groupmod docker -m $USER</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Enable WSL2 (required for Docker Desktop)\nwsl --install\n\n# Enable required Windows features\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n# Download and install Docker Desktop\n# Visit: https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe\n\n# Or use Chocolatey\nchoco install docker-desktop\n\n# Or use winget\nwinget install Docker.DockerDesktop\n\n# Start Docker Desktop from Start Menu\n# Verify installation in PowerShell\ndocker --version\ndocker compose version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Configure Docker daemon</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create daemon configuration directory\nsudo mkdir -p /etc/docker\n\n# Create daemon.json with optimized settings\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: {\n    &quot;max-size&quot;: &quot;10m&quot;,\n    &quot;max-file&quot;: &quot;3&quot;\n  },\n  &quot;storage-driver&quot;: &quot;overlay2&quot;,\n  &quot;live-restore&quot;: true,\n  &quot;default-ulimits&quot;: {\n    &quot;nofile&quot;: {\n      &quot;Name&quot;: &quot;nofile&quot;,\n      &quot;Hard&quot;: 64000,\n      &quot;Soft&quot;: 64000\n    }\n  }\n}\nEOF\n\n# Restart Docker to apply changes\nsudo systemctl restart docker</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Configure user permissions</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add current user to docker group (Linux)\nsudo usermod -aG docker $USER\n\n# Apply group changes (logout/login or use newgrp)\nnewgrp docker\n\n# Verify docker works without sudo\ndocker run hello-world</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Essential security settings</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable user namespace remapping for better isolation\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;userns-remap&quot;: &quot;default&quot;\n}\nEOF\n\n# Create subuid/subgid entries\necho &quot;dockremap:100000:65536&quot; | sudo tee -a /etc/subuid\necho &quot;dockremap:100000:65536&quot; | sudo tee -a /etc/subgid\n\n# Restart Docker\nsudo systemctl restart docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Docker version\ndocker version\n\n# View system information\ndocker info\n\n# Test container creation\ndocker run --rm alpine echo &quot;Docker is working!&quot;\n\n# Test networking\ndocker run --rm alpine ping -c 3 google.com\n\n# Test volume mounting\ndocker run --rm -v /tmp:/host alpine ls /host</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Never expose Docker daemon socket (2375/2376) to the internet without proper TLS authentication!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Docker to start on boot\nsudo systemctl enable docker\n\n# Start Docker service\nsudo systemctl start docker\n\n# Stop Docker service\nsudo systemctl stop docker\n\n# Restart Docker service\nsudo systemctl restart docker\n\n# Reload Docker configuration\nsudo systemctl reload docker\n\n# Check Docker status\nsudo systemctl status docker\n\n# View Docker logs\nsudo journalctl -u docker.service -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Docker to start on boot\nrc-update add docker boot\n\n# Start Docker service\nrc-service docker start\n\n# Stop Docker service\nrc-service docker stop\n\n# Restart Docker service\nrc-service docker restart\n\n# Check Docker status\nrc-service docker status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;docker_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Docker\nservice docker start\n\n# Stop Docker\nservice docker stop\n\n# Restart Docker\nservice docker restart\n\n# Check status\nservice docker status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Docker Desktop manages its own services\n# Control through the UI or command line\n\n# Stop Docker Desktop\nosascript -e &#039;quit app &quot;Docker&quot;&#039;\n\n# Start Docker Desktop\nopen -a Docker\n\n# Check if Docker is running\ndocker system info &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo &quot;Docker is running&quot; || echo &quot;Docker is not running&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Docker Desktop manages services automatically\n# For manual control:\n\n# Restart Docker Desktop\nStop-Process -Name &quot;Docker Desktop&quot; -Force\nStart-Process &quot;C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe&quot;\n\n# Check Docker service status\nGet-Service -Name docker\n\n# Restart Docker service\nRestart-Service docker</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"storage-driver-configuration\" class=\"mobile-header\">Storage Driver Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure storage driver options\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;storage-driver&quot;: &quot;overlay2&quot;,\n  &quot;storage-opts&quot;: [\n    &quot;overlay2.override_kernel_check=true&quot;,\n    &quot;overlay2.size=20G&quot;\n  ],\n  &quot;data-root&quot;: &quot;/var/lib/docker&quot;\n}\nEOF\n\n# For devicemapper (older systems)\n{\n  &quot;storage-driver&quot;: &quot;devicemapper&quot;,\n  &quot;storage-opts&quot;: [\n    &quot;dm.thinpooldev=/dev/mapper/docker-thinpool&quot;,\n    &quot;dm.use_deferred_removal=true&quot;,\n    &quot;dm.use_deferred_deletion=true&quot;\n  ]\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-configuration\" class=\"mobile-header\">Network Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure default network settings\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;bip&quot;: &quot;172.17.0.1/16&quot;,\n  &quot;fixed-cidr&quot;: &quot;172.17.0.0/16&quot;,\n  &quot;default-address-pools&quot;: [\n    {\n      &quot;base&quot;: &quot;172.80.0.0/16&quot;,\n      &quot;size&quot;: 24\n    }\n  ],\n  &quot;dns&quot;: [&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;],\n  &quot;dns-search&quot;: [&quot;example.com&quot;]\n}\nEOF\n\n# Enable IPv6 support\n{\n  &quot;ipv6&quot;: true,\n  &quot;fixed-cidr-v6&quot;: &quot;2001:db8::/64&quot;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure default container limits\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;default-ulimits&quot;: {\n    &quot;nofile&quot;: {\n      &quot;Name&quot;: &quot;nofile&quot;,\n      &quot;Hard&quot;: 64000,\n      &quot;Soft&quot;: 64000\n    },\n    &quot;nproc&quot;: {\n      &quot;Name&quot;: &quot;nproc&quot;,\n      &quot;Hard&quot;: 32000,\n      &quot;Soft&quot;: 32000\n    }\n  },\n  &quot;default-runtime&quot;: &quot;runc&quot;,\n  &quot;runtimes&quot;: {\n    &quot;nvidia&quot;: {\n      &quot;path&quot;: &quot;nvidia-container-runtime&quot;,\n      &quot;runtimeArgs&quot;: []\n    }\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-as-docker-registry-proxy\" class=\"mobile-header\">nginx as Docker Registry Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/docker-registry\nserver {\n    listen 443 ssl http2;\n    server_name registry.example.com;\n\n    ssl_certificate /etc/ssl/certs/registry.crt;\n    ssl_certificate_key /etc/ssl/private/registry.key;\n\n    # Docker Registry API\n    location /v2/ {\n        proxy_pass http://localhost:5000;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_read_timeout 900;\n        \n        # Required for docker client\n        chunked_transfer_encoding on;\n        client_max_body_size 0;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-as-docker-registry-proxy\" class=\"mobile-header\">Apache as Docker Registry Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/docker-registry.conf\n&lt;VirtualHost *:443&gt;\n    ServerName registry.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/registry.crt\n    SSLCertificateKeyFile /etc/ssl/private/registry.key\n    \n    ProxyPreserveHost On\n    ProxyPass /v2 http://localhost:5000/v2\n    ProxyPassReverse /v2 http://localhost:5000/v2\n    \n    &lt;Location /v2&gt;\n        Order deny,allow\n        Allow from all\n        \n        # Authentication\n        AuthType Basic\n        AuthName &quot;Docker Registry&quot;\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    &lt;/Location&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-as-docker-registry-proxy\" class=\"mobile-header\">Caddy as Docker Registry Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"caddyfile\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddyfile</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddyfile\">registry.example.com {\n    reverse_proxy localhost:5000 {\n        header_up Host {host}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    basicauth /v2/* {\n        admin $2a$14$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    }\n    \n    encode gzip\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"traefik-configuration\" class=\"mobile-header\">Traefik Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml for Traefik\nversion: &#039;3.8&#039;\n\nservices:\n  traefik:\n    image: traefik:v2.9\n    command:\n      - &quot;--api.insecure=true&quot;\n      - &quot;--providers.docker=true&quot;\n      - &quot;--entrypoints.websecure.address=:443&quot;\n    ports:\n      - &quot;443:443&quot;\n      - &quot;8080:8080&quot;\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./certs:/certs\n\n  registry:\n    image: registry:2\n    labels:\n      - &quot;traefik.enable=true&quot;\n      - &quot;traefik.http.routers.registry.rule=Host(`registry.example.com`)&quot;\n      - &quot;traefik.http.routers.registry.entrypoints=websecure&quot;\n      - &quot;traefik.http.routers.registry.tls=true&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"docker-daemon-security\" class=\"mobile-header\">Docker Daemon Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable TLS for Docker daemon\n# Generate CA private key\nopenssl genrsa -aes256 -out ca-key.pem 4096\n\n# Generate CA certificate\nopenssl req -new -x509 -days 3650 -key ca-key.pem -sha256 -out ca.pem\n\n# Generate server key\nopenssl genrsa -out server-key.pem 4096\n\n# Generate certificate signing request\nopenssl req -subj &quot;/CN=$HOST&quot; -sha256 -new -key server-key.pem -out server.csr\n\n# Generate server certificate\necho subjectAltName = DNS:$HOST,IP:127.0.0.1 &gt;&gt; extfile.cnf\necho extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf\nopenssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem -extfile extfile.cnf\n\n# Configure Docker to use TLS\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;hosts&quot;: [&quot;tcp://0.0.0.0:2376&quot;],\n  &quot;tls&quot;: true,\n  &quot;tlsverify&quot;: true,\n  &quot;tlscert&quot;: &quot;/etc/docker/certs/server-cert.pem&quot;,\n  &quot;tlskey&quot;: &quot;/etc/docker/certs/server-key.pem&quot;,\n  &quot;tlscacert&quot;: &quot;/etc/docker/certs/ca.pem&quot;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"apparmorselinux-configuration\" class=\"mobile-header\">AppArmor/SELinux Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># AppArmor (Debian/Ubuntu)\n# Check if AppArmor is enabled\nsudo aa-status\n\n# Docker containers use docker-default profile by default\n# Create custom profile\nsudo tee /etc/apparmor.d/docker-custom &lt;&lt;EOF\n#include &lt;tunables/global&gt;\n\nprofile docker-custom flags=(attach_disconnected,mediate_deleted) {\n  #include &lt;abstractions/base&gt;\n  \n  network,\n  capability,\n  \n  # Deny dangerous capabilities\n  deny capability dac_override,\n  deny capability setuid,\n  deny capability setgid,\n  \n  # File access\n  deny /proc/sys/** w,\n  deny /sys/** w,\n  \n  # Allow necessary access\n  /usr/bin/** ix,\n  /bin/** ix,\n  /lib/** r,\n}\nEOF\n\n# Load profile\nsudo apparmor_parser -r /etc/apparmor.d/docker-custom\n\n# SELinux (RHEL/CentOS)\n# Enable SELinux for containers\nsudo setsebool -P container_manage_cgroup true\n\n# Check Docker SELinux context\nps -eZ | grep dockerd</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\n# Docker manages its own iptables rules\n# To integrate with UFW:\nsudo tee -a /etc/ufw/after.rules &lt;&lt;EOF\n*filter\n:ufw-user-forward - [0:0]\n:DOCKER-USER - [0:0]\n-A DOCKER-USER -j ufw-user-forward\n-A DOCKER-USER -j RETURN -s 10.0.0.0/8\n-A DOCKER-USER -j RETURN -s 172.16.0.0/12\n-A DOCKER-USER -j RETURN -s 192.168.0.0/16\n-A DOCKER-USER -j DROP\nCOMMIT\nEOF\n\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\n# Add Docker zone\nsudo firewall-cmd --permanent --new-zone=docker\nsudo firewall-cmd --permanent --zone=docker --add-interface=docker0\nsudo firewall-cmd --permanent --zone=docker --add-port=2377/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/udp\nsudo firewall-cmd --permanent --zone=docker --add-port=4789/udp\nsudo firewall-cmd --reload\n\n# iptables (manual)\n# Allow Docker subnet\nsudo iptables -A INPUT -s 172.17.0.0/16 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on docker0 all\npass out on docker0 all</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">Docker doesn't require a database, but here's how to run databases in Docker:</p>\n<h3 id=\"postgresql-in-docker\" class=\"mobile-header\">PostgreSQL in Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create volume for persistent data\ndocker volume create postgres_data\n\n# Run PostgreSQL container\ndocker run -d \\\n  --name postgres \\\n  --restart unless-stopped \\\n  -e POSTGRES_PASSWORD=securepassword \\\n  -e POSTGRES_USER=myuser \\\n  -e POSTGRES_DB=mydb \\\n  -v postgres_data:/var/lib/postgresql/data \\\n  -p 5432:5432 \\\n  postgres:15-alpine\n\n# Connect to PostgreSQL\ndocker exec -it postgres psql -U myuser -d mydb</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-in-docker\" class=\"mobile-header\">MySQL in Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create volume for persistent data\ndocker volume create mysql_data\n\n# Run MySQL container\ndocker run -d \\\n  --name mysql \\\n  --restart unless-stopped \\\n  -e MYSQL_ROOT_PASSWORD=rootpassword \\\n  -e MYSQL_DATABASE=mydb \\\n  -e MYSQL_USER=myuser \\\n  -e MYSQL_PASSWORD=securepassword \\\n  -v mysql_data:/var/lib/mysql \\\n  -p 3306:3306 \\\n  mysql:8.0\n\n# Connect to MySQL\ndocker exec -it mysql mysql -u myuser -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"kernel-parameters\" class=\"mobile-header\">Kernel Parameters</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize kernel parameters for Docker\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Docker optimization\nvm.max_map_count=262144\nfs.file-max=2097152\nfs.inotify.max_user_watches=524288\nfs.inotify.max_user_instances=512\n\n# Network optimization\nnet.core.somaxconn=32768\nnet.ipv4.tcp_max_syn_backlog=8192\nnet.core.netdev_max_backlog=5000\nnet.ipv4.ip_local_port_range=1024 65535\n\n# Bridge settings\nnet.bridge.bridge-nf-call-iptables=1\nnet.bridge.bridge-nf-call-ip6tables=1\nnet.ipv4.ip_forward=1\nEOF\n\n# Apply settings\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-optimization\" class=\"mobile-header\">Storage Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use dedicated disk for Docker\n# Format with XFS for better performance\nsudo mkfs.xfs /dev/sdb1\nsudo mkdir -p /var/lib/docker\nsudo mount /dev/sdb1 /var/lib/docker\n\n# Add to /etc/fstab\necho &quot;/dev/sdb1 /var/lib/docker xfs defaults,noatime 0 2&quot; | sudo tee -a /etc/fstab\n\n# Configure storage driver options\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;storage-driver&quot;: &quot;overlay2&quot;,\n  &quot;storage-opts&quot;: [\n    &quot;overlay2.override_kernel_check=true&quot;\n  ],\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: {\n    &quot;max-size&quot;: &quot;10m&quot;,\n    &quot;max-file&quot;: &quot;3&quot;\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"build-optimization\" class=\"mobile-header\">Build Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable BuildKit for faster builds\nexport DOCKER_BUILDKIT=1\n\n# Configure BuildKit in daemon\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;features&quot;: {\n    &quot;buildkit&quot;: true\n  }\n}\nEOF\n\n# Use build cache mount\n# In Dockerfile:\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN --mount=type=cache,target=/var/cache/apk \\\n    apk add --no-cache git</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"docker-stats-and-events\" class=\"mobile-header\">Docker Stats and Events</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor container resource usage\ndocker stats\n\n# Stream Docker events\ndocker events\n\n# Monitor specific container\ndocker stats container_name\n\n# Export metrics in JSON\ndocker stats --no-stream --format json &gt; stats.json\n\n# Monitor Docker daemon\nsudo journalctl -u docker.service -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"cadvisor-setup\" class=\"mobile-header\">cAdvisor Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run cAdvisor for container metrics\ndocker run -d \\\n  --name=cadvisor \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -v /:/rootfs:ro \\\n  -v /var/run:/var/run:ro \\\n  -v /sys:/sys:ro \\\n  -v /var/lib/docker/:/var/lib/docker:ro \\\n  -v /dev/disk/:/dev/disk:ro \\\n  --privileged \\\n  gcr.io/cadvisor/cadvisor:latest\n\n# Access metrics at http://localhost:8080</code></pre>\n      </div>\n    </div>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml for monitoring stack\nversion: &#039;3.8&#039;\n\nservices:\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    ports:\n      - &quot;9090:9090&quot;\n    command:\n      - &#039;--config.file=/etc/prometheus/prometheus.yml&#039;\n      - &#039;--storage.tsdb.path=/prometheus&#039;\n\n  node-exporter:\n    image: prom/node-exporter\n    ports:\n      - &quot;9100:9100&quot;\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n\nvolumes:\n  prometheus_data:</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"container-backup\" class=\"mobile-header\">Container Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-docker.sh\n\nBACKUP_DIR=&quot;/backup/docker&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p $BACKUP_DIR/{images,volumes,configs}\n\n# Backup running containers\ndocker ps -q | while read container; do\n    name=$(docker inspect -f &#039;{{.Name}}&#039; $container | sed &#039;s/\\///&#039;)\n    docker commit $container backup_$name:$DATE\n    docker save backup_$name:$DATE | gzip &gt; $BACKUP_DIR/images/${name}_${DATE}.tar.gz\n    docker inspect $container &gt; $BACKUP_DIR/configs/${name}_${DATE}.json\ndone\n\n# Backup volumes\ndocker volume ls -q | while read volume; do\n    docker run --rm \\\n        -v $volume:/data \\\n        -v $BACKUP_DIR/volumes:/backup \\\n        alpine tar czf /backup/${volume}_${DATE}.tar.gz -C /data .\ndone\n\n# Backup Docker daemon config\ncp /etc/docker/daemon.json $BACKUP_DIR/configs/daemon_${DATE}.json\n\necho &quot;Backup completed: $DATE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"volume-backup\" class=\"mobile-header\">Volume Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup named volume\ndocker run --rm \\\n    -v myvolume:/source:ro \\\n    -v $(pwd):/backup \\\n    alpine tar czf /backup/myvolume.tar.gz -C /source .\n\n# Restore volume\ndocker run --rm \\\n    -v myvolume:/target \\\n    -v $(pwd):/backup \\\n    alpine tar xzf /backup/myvolume.tar.gz -C /target</code></pre>\n      </div>\n    </div>\n<h3 id=\"registry-backup\" class=\"mobile-header\">Registry Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup Docker registry data\ndocker exec registry tar czf - /var/lib/registry | gzip &gt; registry_backup_$(date +%Y%m%d).tar.gz\n\n# Backup registry config\ndocker exec registry cat /etc/docker/registry/config.yml &gt; registry_config_backup.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Cannot connect to Docker daemon</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if Docker is running\nsudo systemctl status docker\n\n# Check Docker socket permissions\nls -la /var/run/docker.sock\n\n# Check if user is in docker group\ngroups $USER\n\n# Start Docker if not running\nsudo systemctl start docker</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Container networking issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Docker networks\ndocker network ls\n\n# Inspect bridge network\ndocker network inspect bridge\n\n# Check iptables rules\nsudo iptables -L -n -v\n\n# Reset Docker networking\nsudo systemctl stop docker\nsudo ip link delete docker0\nsudo systemctl start docker</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Storage space issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check disk usage\ndocker system df\n\n# Clean up unused resources\ndocker system prune -a --volumes\n\n# Check Docker root directory\ndf -h /var/lib/docker\n\n# Find large containers/images\ndocker ps -s\ndocker images --format &quot;table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Permission denied errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Fix socket permissions\nsudo chmod 666 /var/run/docker.sock\n\n# Fix user namespace issues\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Check SELinux/AppArmor\ngetenforce  # SELinux\nsudo aa-status  # AppArmor</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run Docker in debug mode\nsudo dockerd --debug\n\n# Enable debug logging\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;debug&quot;: true,\n  &quot;log-level&quot;: &quot;debug&quot;\n}\nEOF\n\nsudo systemctl restart docker\n\n# Check debug logs\nsudo journalctl -u docker.service --no-pager</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum update docker-ce docker-ce-cli containerd.io\n\n# Debian/Ubuntu\nsudo apt-get update\nsudo apt-get upgrade docker-ce docker-ce-cli containerd.io\n\n# Arch Linux\nsudo pacman -Syu docker\n\n# Alpine Linux\napk update\napk upgrade docker\n\n# openSUSE\nsudo zypper update docker\n\n# FreeBSD\npkg update\npkg upgrade docker\n\n# Always restart after updates\nsudo systemctl restart docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"cleanup-tasks\" class=\"mobile-header\">Cleanup Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# docker-cleanup.sh\n\necho &quot;Starting Docker cleanup...&quot;\n\n# Remove stopped containers\ndocker container prune -f\n\n# Remove unused images\ndocker image prune -a -f\n\n# Remove unused volumes\ndocker volume prune -f\n\n# Remove unused networks\ndocker network prune -f\n\n# Remove build cache\ndocker builder prune -f\n\n# Show disk usage after cleanup\ndocker system df\n\necho &quot;Cleanup completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-rotation\" class=\"mobile-header\">Log Rotation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation for containers\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: {\n    &quot;max-size&quot;: &quot;10m&quot;,\n    &quot;max-file&quot;: &quot;3&quot;,\n    &quot;compress&quot;: &quot;true&quot;\n  }\n}\nEOF\n\n# System-wide Docker logs rotation\nsudo tee /etc/logrotate.d/docker &lt;&lt;EOF\n/var/lib/docker/containers/*/*.log {\n    rotate 7\n    daily\n    compress\n    missingok\n    delaycompress\n    copytruncate\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"cicd-pipeline-integration\" class=\"mobile-header\">CI/CD Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># GitLab CI example\nstages:\n  - build\n  - test\n  - deploy\n\nvariables:\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: &quot;/certs&quot;\n\nbuild:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker build -t myapp:$CI_COMMIT_SHA .\n    - docker push myapp:$CI_COMMIT_SHA\n\n# Jenkins Pipeline example\npipeline {\n    agent any\n    stages {\n        stage(&#039;Build&#039;) {\n            steps {\n                script {\n                    docker.build(&quot;myapp:${env.BUILD_ID}&quot;)\n                }\n            }\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-integration\" class=\"mobile-header\">Kubernetes Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install CRI-Docker for Kubernetes\nCRI_VERSION=&quot;0.3.1&quot;\nwget https://github.com/Mirantis/cri-dockerd/releases/download/v${CRI_VERSION}/cri-dockerd-${CRI_VERSION}.amd64.tgz\ntar xzf cri-dockerd-${CRI_VERSION}.amd64.tgz\nsudo install -o root -g root -m 0755 cri-dockerd /usr/local/bin/cri-dockerd\nrm cri-dockerd-${CRI_VERSION}.amd64.tgz cri-dockerd\n\n# Create systemd service\nsudo tee /etc/systemd/system/cri-docker.service &lt;&lt;EOF\n[Unit]\nDescription=CRI Docker Interface\nAfter=network.target docker.service\nRequires=docker.service\n\n[Service]\nType=notify\nExecStart=/usr/local/bin/cri-dockerd --container-runtime-endpoint unix:///var/run/cri-dockerd.sock\nRestart=always\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now cri-docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-compose-examples\" class=\"mobile-header\">Docker Compose Examples</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Multi-tier application stack\nversion: &#039;3.8&#039;\n\nservices:\n  web:\n    build: ./web\n    ports:\n      - &quot;80:80&quot;\n    environment:\n      - DATABASE_URL=postgresql://user:pass@db:5432/mydb\n    depends_on:\n      - db\n    networks:\n      - frontend\n      - backend\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n      - POSTGRES_DB=mydb\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    networks:\n      - backend\n\n  redis:\n    image: redis:alpine\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db_data:</code></pre>\n      </div>\n    </div>\n<h3 id=\"sdk-integration\" class=\"mobile-header\">SDK Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Python Docker SDK\nimport docker\n\nclient = docker.from_env()\n\n# Run container\ncontainer = client.containers.run(\n    &quot;alpine&quot;,\n    &quot;echo hello world&quot;,\n    detach=True\n)\n\n# List containers\nfor container in client.containers.list():\n    print(container.name)\n\n# Build image\nimage, logs = client.images.build(\n    path=&quot;.&quot;,\n    tag=&quot;myapp:latest&quot;\n)</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Node.js Docker SDK\nconst Docker = require(&#039;dockerode&#039;);\nconst docker = new Docker();\n\n// Run container\ndocker.createContainer({\n  Image: &#039;alpine&#039;,\n  Cmd: [&#039;echo&#039;, &#039;hello world&#039;],\n  name: &#039;mycontainer&#039;\n}, (err, container) =&gt; {\n  if (!err) {\n    container.start();\n  }\n});\n\n// List containers\ndocker.listContainers((err, containers) =&gt; {\n  containers.forEach(containerInfo =&gt; {\n    console.log(containerInfo.Names);\n  });\n});</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Hub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/docker\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/develop/dev-best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/engine/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Security Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Compose Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forums.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Community Forums</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://labs.play-with-docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Play with Docker</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"17 min","wordCount":3265,"lastBuilt":"2025-09-14T01:30:36.116Z"},{"name":"drupal","displayName":"Drupal","slug":"drupal","description":"Repo for drupal","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/drupal","updatedAt":"2025-09-08T03:06:48Z","createdAt":"2025-09-08T03:06:38Z","readmeRaw":"## 👋 Welcome to drupal 🚀  \n\ndrupal README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-drupal\" class=\"mobile-header\">👋 Welcome to drupal 🚀  </h2>\n<p class=\"mobile-paragraph\">drupal README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:46.083Z"},{"name":"elasticsearch","displayName":"Elasticsearch","slug":"elasticsearch","description":"Repo for elasticsearch","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/elasticsearch","updatedAt":"2025-09-08T03:07:02Z","createdAt":"2025-09-08T03:06:51Z","readmeRaw":"## 👋 Welcome to elasticsearch 🚀  \n\nelasticsearch README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-elasticsearch\" class=\"mobile-header\">👋 Welcome to elasticsearch 🚀  </h2>\n<p class=\"mobile-paragraph\">elasticsearch README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:45.945Z"},{"name":"element","displayName":"Element","slug":"element","description":"Repo for element","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/element","updatedAt":"2025-09-08T03:07:16Z","createdAt":"2025-09-08T03:07:06Z","readmeRaw":"## 👋 Welcome to element 🚀  \n\nelement README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-element\" class=\"mobile-header\">👋 Welcome to element 🚀  </h2>\n<p class=\"mobile-paragraph\">element README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:45.805Z"},{"name":"exchange","displayName":"Exchange","slug":"exchange","description":"Repo for exchange","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/exchange","updatedAt":"2025-09-08T03:07:21Z","createdAt":"2023-08-28T03:47:46Z","readmeRaw":"# Exchange 2016 on Server 2016\n\n```text\n\nInstall-WindowsFeature NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS, ADLDS, Server-Media-Foundation\n\nhttps://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe\nhttps://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe\n\nEnable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools,IIS-ManagementScriptingTools,IIS-IIS6ManagementCompatibility,IIS-LegacySnapIn,IIS-ManagementConsole,IIS-Metabase,IIS-WebServerManagementTools,IIS-WebServerRole\n\n```\n","readmeHtml":"<h1 id=\"exchange-2016-on-server-2016\" class=\"mobile-header\">Exchange 2016 on Server 2016</h1>\n<div class=\"mobile-code-block\" data-language=\"text\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">text</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-text\">\nInstall-WindowsFeature NET-Framework-45-Features, RPC-over-HTTP-proxy, RSAT-Clustering, RSAT-Clustering-CmdInterface, RSAT-Clustering-Mgmt, RSAT-Clustering-PowerShell, Web-Mgmt-Console, WAS-Process-Model, Web-Asp-Net45, Web-Basic-Auth, Web-Client-Auth, Web-Digest-Auth, Web-Dir-Browsing, Web-Dyn-Compression, Web-Http-Errors, Web-Http-Logging, Web-Http-Redirect, Web-Http-Tracing, Web-ISAPI-Ext, Web-ISAPI-Filter, Web-Lgcy-Mgmt-Console, Web-Metabase, Web-Mgmt-Console, Web-Mgmt-Service, Web-Net-Ext45, Web-Request-Monitor, Web-Server, Web-Stat-Compression, Web-Static-Content, Web-Windows-Auth, Web-WMI, Windows-Identity-Foundation, RSAT-ADDS, ADLDS, Server-Media-Foundation\n\nhttps://download.microsoft.com/download/2/C/4/2C47A5C1-A1F3-4843-B9FE-84C0032C61EC/UcmaRuntimeSetup.exe\nhttps://download.microsoft.com/download/2/E/6/2E61CFA4-993B-4DD4-91DA-3737CD5CD6E3/vcredist_x64.exe\n\nEnable-WindowsOptionalFeature -Online -FeatureName IIS-ManagementScriptingTools,IIS-ManagementScriptingTools,IIS-IIS6ManagementCompatibility,IIS-LegacySnapIn,IIS-ManagementConsole,IIS-Metabase,IIS-WebServerManagementTools,IIS-WebServerRole\n</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T01:30:45.661Z"},{"name":"fail2ban","displayName":"Fail2ban","slug":"fail2ban","description":"Repo for fail2ban","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/fail2ban","updatedAt":"2025-09-14T01:29:56Z","createdAt":"2025-09-08T03:07:24Z","readmeRaw":"# Fail2Ban Installation Guide\n\nIntrusion prevention software that protects servers from brute-force attacks by monitoring log files and automatically banning malicious IP addresses. Essential security tool for any public-facing server.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- iptables or firewalld\n- Log files to monitor (SSH, web server, etc.)\n- Python 3.6+ (usually pre-installed)\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install Fail2Ban\nsudo apt install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\nfail2ban-client version\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Fail2Ban\nsudo yum install -y fail2ban fail2ban-systemd whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\n```\n\n### Fedora\n```bash\n# Install Fail2Ban\nsudo dnf install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\n```\n\n## Configuration\n\n### Basic Configuration\n```bash\n# Create local jail configuration (never edit jail.conf directly)\nsudo tee /etc/fail2ban/jail.local > /dev/null <<EOF\n# Fail2Ban Local Configuration\n\n[DEFAULT]\n# Ban settings\nbantime = 3600\nfindtime = 600\nmaxretry = 3\nbackend = auto\n\n# Notification settings\ndestemail = admin@example.com\nsender = fail2ban@example.com\nmta = sendmail\n\n# Actions\naction = %(action_mwl)s\n\n# Ignore IP addresses (whitelist)\nignoreip = 127.0.0.1/8 ::1 192.168.1.0/24 10.0.0.0/8\n\n# SSH protection\n[sshd]\nenabled = true\nport = ssh,2222\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\n\n# HTTP/HTTPS brute force protection\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nlogpath = /var/log/nginx/error.log\nmaxretry = 3\n\n[nginx-noscript]\nenabled = true\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 6\n\n[nginx-badbots]\nenabled = true\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n# Apache protection\n[apache-auth]\nenabled = false\nfilter = apache-auth\nlogpath = /var/log/apache2/error.log\nmaxretry = 3\n\n[apache-badbots]\nenabled = false\nfilter = apache-badbots\nlogpath = /var/log/apache2/access.log\nmaxretry = 2\n\n# Database protection\n[mysql]\nenabled = false\nfilter = mysql-auth\nlogpath = /var/log/mysql/error.log\nmaxretry = 3\nbantime = 7200\n\n[postgresql]\nenabled = false\nfilter = postgresql\nlogpath = /var/log/postgresql/postgresql-*-main.log\nmaxretry = 3\n\n# Mail server protection\n[postfix]\nenabled = false\nfilter = postfix\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n[dovecot]\nenabled = false\nfilter = dovecot\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n# FTP protection\n[vsftpd]\nenabled = false\nfilter = vsftpd\nlogpath = /var/log/vsftpd.log\nmaxretry = 3\n\n# Custom application protection\n[custom-app]\nenabled = false\nfilter = custom-app\nlogpath = /var/log/myapp/error.log\nmaxretry = 5\nbantime = 1800\nEOF\n```\n\n### Custom Filters\n```bash\n# Create custom filter for web applications\nsudo tee /etc/fail2ban/filter.d/nginx-custom.conf > /dev/null <<EOF\n# Custom NGINX filter for advanced protection\n\n[Definition]\nfailregex = \n    # Failed login attempts\n    ^<HOST> -.*POST.*(wp-login\\.php|login|signin|admin).*HTTP/[0-9\\.]+\\\" 200\n    # Directory traversal attempts\n    ^<HOST> -.*GET.*(\\.\\./|\\.\\.\\%2F).*HTTP/[0-9\\.]+\\\" 404\n    # SQL injection attempts  \n    ^<HOST> -.*GET.*(union|select|insert|cast|set|declare|drop|create|alter|delete|update|replace|truncate).*HTTP/[0-9\\.]+\\\" 200\n    # XSS attempts\n    ^<HOST> -.*GET.*(script|javascript|vbscript|onload|onerror|onclick).*HTTP/[0-9\\.]+\\\" 200\n    # Suspicious user agents\n    ^<HOST> -.*\\\"(.*sqlmap.*|.*nikto.*|.*nessus.*|.*openvas.*|.*python-requests.*|.*curl.*|.*wget.*)\\\"$\n    # Too many 404 errors\n    ^<HOST> -.*\\\" 404 \n\nignoreregex =\n    # Ignore legitimate requests\n    ^<HOST> -.*GET.*/favicon\\.ico.*HTTP/[0-9\\.]+\\\" 404\n    ^<HOST> -.*GET.*/robots\\.txt.*HTTP/[0-9\\.]+\\\" 404\nEOF\n\n# Create WordPress-specific filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf > /dev/null <<EOF\n[Definition]\nfailregex = \n    # WordPress login failures\n    ^<HOST> -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\\" 200\n    # WordPress admin access attempts\n    ^<HOST> -.*GET.*/wp-admin.*HTTP/[0-9\\.]+\\\" 403\n    # XML-RPC attacks\n    ^<HOST> -.*POST.*/xmlrpc\\.php.*HTTP/[0-9\\.]+\\\" 200\n\nignoreregex =\n    # Ignore successful admin logins (adjust pattern as needed)\n    ^<HOST> -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\\" 302\nEOF\n\n# Add WordPress jail to jail.local\nsudo tee -a /etc/fail2ban/jail.local > /dev/null <<EOF\n\n[wordpress]\nenabled = true\nfilter = wordpress\nlogpath = /var/log/nginx/access.log\nport = http,https\nmaxretry = 3\nbantime = 1800\nfindtime = 600\nEOF\n\nsudo systemctl restart fail2ban\n```\n\n### Advanced Configuration\n```bash\n# Create advanced fail2ban configuration with multiple actions\nsudo tee /etc/fail2ban/action.d/telegram.conf > /dev/null <<EOF\n# Telegram notification action\n\n[Definition]\nactionstart = \nactionstop = \nactioncheck = \nactionban = curl -s \"https://api.telegram.org/bot<bot_token>/sendMessage\" -d \"chat_id=<chat_id>&text=🚫 Fail2Ban: <name> banned <ip> for <failures> failures\"\nactionunban = curl -s \"https://api.telegram.org/bot<bot_token>/sendMessage\" -d \"chat_id=<chat_id>&text=✅ Fail2Ban: <name> unbanned <ip>\"\n\n[Init]\nbot_token = your_telegram_bot_token\nchat_id = your_telegram_chat_id\nEOF\n\n# Create comprehensive protection configuration\nsudo tee /etc/fail2ban/jail.d/comprehensive.conf > /dev/null <<EOF\n# Comprehensive Security Configuration\n\n[DEFAULT]\n# Enhanced ban settings\nbantime.increment = true\nbantime.rndtime = 60\nbantime.maxtime = 86400\nbantime.factor = 2\nbantime.formula = ban.Time * (1<<(ban.Count if ban.Count<20 else 20)) * banFactor\n\n# Multiple actions (ban + notify)\naction = %(action_mwl)s[dest=security@example.com]\n         telegram[bot_token=your_bot_token, chat_id=your_chat_id]\n\n[sshd-aggressive]\nenabled = true\nport = ssh\nfilter = sshd[mode=aggressive]\nlogpath = /var/log/auth.log\nmaxretry = 2\nbantime = 7200\nfindtime = 300\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\nbantime = 3600\n\n[nginx-noproxy]\nenabled = true\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nbantime = 86400\n\n# Protect against port scans\n[port-scan]\nenabled = true\nfilter = port-scan\nlogpath = /var/log/messages\nmaxretry = 1\nbantime = 86400\n\n# DNS amplification protection\n[named-refused]\nenabled = false\nfilter = named-refused\nlogpath = /var/log/messages\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### Custom Filters for Applications\n```bash\n# Create filter for Node.js applications\nsudo tee /etc/fail2ban/filter.d/nodejs-auth.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^.*Authentication failed for.*from <HOST>.*$\n            ^.*Invalid login attempt.*IP: <HOST>.*$\n            ^.*Failed login.*remote_addr: <HOST>.*$\nignoreregex =\nEOF\n\n# Create filter for Grafana\nsudo tee /etc/fail2ban/filter.d/grafana.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^.*logger=context.*error=\"invalid username or password\".*remote_addr=<HOST>\n            ^.*logger=context.*error=\"user not found\".*remote_addr=<HOST>\nignoreregex =\nEOF\n\n# Create filter for GitLab\nsudo tee /etc/fail2ban/filter.d/gitlab.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^.*Failed Login:.*IP: <HOST>.*$\n            ^.*Rack_Attack.*Throttle.*IP: <HOST>.*$\nignoreregex =\nEOF\n\n# Add application-specific jails\nsudo tee /etc/fail2ban/jail.d/applications.conf > /dev/null <<EOF\n[nodejs-auth]\nenabled = false\nfilter = nodejs-auth\nlogpath = /var/log/nodejs/app.log\nmaxretry = 5\nbantime = 1800\n\n[grafana]\nenabled = false\nfilter = grafana\nlogpath = /var/log/grafana/grafana.log\nmaxretry = 5\nbantime = 3600\n\n[gitlab]\nenabled = false\nfilter = gitlab\nlogpath = /var/log/gitlab/gitlab-rails/production.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n## Monitoring and Management\n\n### Fail2Ban Management Script\n```bash\nsudo tee /usr/local/bin/fail2ban-manager.sh > /dev/null <<'EOF'\n#!/bin/bash\n\ncase \"${1}\" in\n    \"status\")\n        echo \"=== Fail2Ban Status ===\"\n        sudo fail2ban-client status\n        echo \"\"\n        echo \"=== Active Jails ===\"\n        for jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n            echo \"Jail: $jail\"\n            sudo fail2ban-client status $jail\n            echo \"\"\n        done\n        ;;\n        \n    \"unban\")\n        IP=\"${2}\"\n        if [ -z \"$IP\" ]; then\n            echo \"Usage: $0 unban <ip_address>\"\n            exit 1\n        fi\n        \n        echo \"Unbanning IP: $IP from all jails\"\n        for jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n            sudo fail2ban-client set $jail unbanip $IP 2>/dev/null && echo \"  - Unbanned from $jail\"\n        done\n        ;;\n        \n    \"ban\")\n        IP=\"${2}\"\n        JAIL=\"${3:-sshd}\"\n        if [ -z \"$IP\" ]; then\n            echo \"Usage: $0 ban <ip_address> [jail_name]\"\n            exit 1\n        fi\n        \n        echo \"Banning IP: $IP in jail: $JAIL\"\n        sudo fail2ban-client set $JAIL banip $IP\n        ;;\n        \n    \"whitelist\")\n        IP=\"${2}\"\n        if [ -z \"$IP\" ]; then\n            echo \"Usage: $0 whitelist <ip_address>\"\n            exit 1\n        fi\n        \n        echo \"Adding $IP to whitelist\"\n        sudo sed -i \"s/ignoreip = .*/& $IP/\" /etc/fail2ban/jail.local\n        sudo systemctl restart fail2ban\n        ;;\n        \n    \"logs\")\n        JAIL=\"${2:-sshd}\"\n        echo \"Recent bans for jail: $JAIL\"\n        sudo grep \"Ban\\|Unban\" /var/log/fail2ban.log | grep \"$JAIL\" | tail -20\n        ;;\n        \n    \"stats\")\n        echo \"=== Fail2Ban Statistics ===\"\n        echo \"Total bans today: $(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Ban \")\"\n        echo \"Total unbans today: $(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Unban \")\"\n        echo \"\"\n        echo \"Top banned IPs (last 1000 entries):\"\n        sudo tail -1000 /var/log/fail2ban.log | grep \"Ban \" | awk '{print $(NF-1)}' | sort | uniq -c | sort -nr | head -10\n        ;;\n        \n    \"test\")\n        JAIL=\"${2:-sshd}\"\n        LOG_FILE=\"${3:-/var/log/auth.log}\"\n        echo \"Testing filter for jail: $JAIL\"\n        echo \"Log file: $LOG_FILE\"\n        sudo fail2ban-regex $LOG_FILE /etc/fail2ban/filter.d/${JAIL}.conf\n        ;;\n        \n    \"reload\")\n        echo \"Reloading Fail2Ban configuration...\"\n        sudo fail2ban-client reload\n        echo \"Configuration reloaded\"\n        ;;\n        \n    *)\n        echo \"Fail2Ban Management Script\"\n        echo \"Usage: $0 {status|unban|ban|whitelist|logs|stats|test|reload}\"\n        echo \"\"\n        echo \"Examples:\"\n        echo \"  $0 status                    # Show status of all jails\"\n        echo \"  $0 unban 192.168.1.100      # Unban IP from all jails\"\n        echo \"  $0 ban 10.0.0.1 sshd        # Ban IP in specific jail\"\n        echo \"  $0 whitelist 192.168.1.50   # Add IP to whitelist\"\n        echo \"  $0 logs sshd                # Show recent logs for jail\"\n        echo \"  $0 stats                    # Show ban statistics\"\n        echo \"  $0 test sshd                # Test jail filter\"\n        echo \"  $0 reload                   # Reload configuration\"\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-manager.sh\n```\n\n### Security Monitoring\n```bash\n# Create comprehensive monitoring script\nsudo tee /usr/local/bin/fail2ban-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nMONITOR_LOG=\"/var/log/fail2ban-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${MONITOR_LOG}\n}\n\n# Check Fail2Ban service\nif systemctl is-active fail2ban >/dev/null 2>&1; then\n    log_message \"✓ Fail2Ban service is running\"\nelse\n    log_message \"✗ Fail2Ban service is not running\"\n    exit 1\nfi\n\n# Check jail status\nACTIVE_JAILS=$(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g' | wc -w)\nlog_message \"ℹ Active jails: ${ACTIVE_JAILS}\"\n\n# Check today's bans\nBANS_TODAY=$(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Ban \" 2>/dev/null || echo \"0\")\nUNBANS_TODAY=$(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Unban \" 2>/dev/null || echo \"0\")\nlog_message \"ℹ Today's activity: ${BANS_TODAY} bans, ${UNBANS_TODAY} unbans\"\n\n# Check currently banned IPs\nTOTAL_BANNED=0\nfor jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n    JAIL_BANNED=$(sudo fail2ban-client status $jail | grep \"Currently banned:\" | awk '{print $3}')\n    TOTAL_BANNED=$((TOTAL_BANNED + JAIL_BANNED))\ndone\n\nlog_message \"ℹ Currently banned IPs: ${TOTAL_BANNED}\"\n\n# Check for configuration errors\nif ! sudo fail2ban-client status >/dev/null 2>&1; then\n    log_message \"⚠ Fail2Ban configuration errors detected\"\n    sudo fail2ban-client status 2>&1 | head -5 >> ${MONITOR_LOG}\nfi\n\n# Check log file accessibility\nfor jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n    LOG_PATH=$(sudo fail2ban-client get $jail logpath 2>/dev/null)\n    if [ -n \"$LOG_PATH\" ] && [ ! -r \"$LOG_PATH\" ]; then\n        log_message \"⚠ Cannot read log file for $jail: $LOG_PATH\"\n    fi\ndone\n\nlog_message \"Fail2Ban monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-monitor.sh\n\n# Schedule monitoring every 15 minutes\necho \"*/15 * * * * root /usr/local/bin/fail2ban-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n### Geographic Blocking Integration\n```bash\n# Install GeoIP for country-based blocking\nsudo apt install -y geoip-database geoip-bin  # Ubuntu/Debian\nsudo yum install -y GeoIP GeoIP-data          # RHEL/CentOS\n\n# Create geographic blocking filter\nsudo tee /etc/fail2ban/filter.d/geoip-block.conf > /dev/null <<EOF\n[Definition]\n# Block connections from specific countries\nfailregex = ^<HOST> -\nignoreregex =\n\n[Init]\n# Countries to block (ISO country codes)\ncountries = CN,RU,KP,IR\nEOF\n\n# Create action for geographic blocking\nsudo tee /etc/fail2ban/action.d/geoip-block.conf > /dev/null <<EOF\n[Definition]\nactioncheck = \nactionstart = \nactionstop = \nactionban = COUNTRY=$(geoiplookup <ip> | awk -F: '{print $2}' | awk '{print $1}'); if echo \"CN RU KP IR\" | grep -q \"$COUNTRY\"; then iptables -A f2b-<name> -s <ip> -j DROP; fi\nactionunban = iptables -D f2b-<name> -s <ip> -j DROP 2>/dev/null || true\n\n[Init]\nname = geoip-block\nEOF\n\n# Add geographic blocking jail\nsudo tee /etc/fail2ban/jail.d/geoip.conf > /dev/null <<EOF\n[geoip-block]\nenabled = false  # Enable if needed\nfilter = geoip-block\naction = geoip-block\nlogpath = /var/log/nginx/access.log\nmaxretry = 1\nbantime = 86400\nfindtime = 60\nEOF\n```\n\n## Integration Examples\n\n### Web Server Integration\n```bash\n# NGINX: Enable logging for Fail2Ban\nsudo tee -a /etc/nginx/nginx.conf > /dev/null <<EOF\n\nhttp {\n    # Log format for Fail2Ban\n    log_format fail2ban '\\$remote_addr - \\$remote_user [\\$time_local] '\n                       '\"\\$request\" \\$status \\$body_bytes_sent '\n                       '\"\\$http_referer\" \"\\$http_user_agent\"';\n    \n    # Enable access and error logging\n    access_log /var/log/nginx/access.log fail2ban;\n    error_log /var/log/nginx/error.log warn;\n}\nEOF\n\nsudo nginx -t && sudo systemctl reload nginx\n\n# Apache: Enable logging\nsudo tee -a /etc/apache2/apache2.conf > /dev/null <<EOF\n\n# Enhanced logging for Fail2Ban\nLogFormat \"%h %l %u %t \\\"%r\\\" %>s %O \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" fail2ban\nCustomLog \\${APACHE_LOG_DIR}/access.log fail2ban\nErrorLog \\${APACHE_LOG_DIR}/error.log\nLogLevel warn\nEOF\n\nsudo systemctl reload apache2\n```\n\n## Backup and Disaster Recovery\n\n### Configuration Backup\n```bash\nsudo tee /usr/local/bin/fail2ban-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/fail2ban\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\necho \"Starting Fail2Ban backup...\"\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/fail2ban-config-${DATE}.tar.gz \\\n    /etc/fail2ban/ \\\n    /var/lib/fail2ban/\n\n# Export current ban list\nsudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g' > /tmp/jails.txt\nwhile read jail; do\n    sudo fail2ban-client status $jail | grep \"Banned IP list:\" > ${BACKUP_DIR}/banned-ips-${jail}-${DATE}.txt\ndone < /tmp/jails.txt\n\n# Keep last 30 backups\nfind ${BACKUP_DIR} -name \"fail2ban-*\" -type f -mtime +30 -delete\n\necho \"Fail2Ban backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-backup.sh\n\n# Schedule weekly backups\necho \"0 4 * * 0 root /usr/local/bin/fail2ban-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check Fail2Ban service status\nsudo systemctl status fail2ban\nsudo journalctl -u fail2ban -f\n\n# Check jail status\nsudo fail2ban-client status\nsudo fail2ban-client status sshd\n\n# Test filter patterns\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check banned IPs\nsudo fail2ban-client status sshd\nsudo iptables -L -n | grep f2b\n\n# View Fail2Ban logs\nsudo tail -f /var/log/fail2ban.log\n\n# Unban IP address\nsudo fail2ban-client set sshd unbanip 192.168.1.100\n\n# Ban IP manually\nsudo fail2ban-client set sshd banip 10.0.0.1\n\n# Reload configuration\nsudo fail2ban-client reload\n\n# Test SSH jail\nsudo grep \"Failed password\" /var/log/auth.log | head -5\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check iptables rules\nsudo iptables -L f2b-sshd -n\nsudo iptables -L INPUT -n | grep f2b\n\n# Debug mode\nsudo fail2ban-server -f -v\n\n# Configuration validation\nsudo fail2ban-client -t\n\n# Check log file permissions\nls -la /var/log/auth.log\nls -la /var/log/nginx/access.log\n\n# Monitor real-time bans\nsudo tail -f /var/log/fail2ban.log | grep \"Ban\\|Unban\"\n\n# Check jail configuration\nsudo fail2ban-client get sshd maxretry\nsudo fail2ban-client get sshd bantime\nsudo fail2ban-client get sshd findtime\n```\n\n## Additional Resources\n\n- [Fail2Ban Documentation](https://fail2ban.readthedocs.io/)\n- [Fail2Ban GitHub](https://github.com/fail2ban/fail2ban)\n- [Filter Configuration Guide](https://fail2ban.readthedocs.io/en/stable/filters.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"fail2ban-installation-guide\" class=\"mobile-header\">Fail2Ban Installation Guide</h1>\n<p class=\"mobile-paragraph\">Intrusion prevention software that protects servers from brute-force attacks by monitoring log files and automatically banning malicious IP addresses. Essential security tool for any public-facing server.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">iptables or firewalld</li>\n<li class=\"mobile-list-item\">Log files to monitor (SSH, web server, etc.)</li>\n<li class=\"mobile-list-item\">Python 3.6+ (usually pre-installed)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Fail2Ban\nsudo apt install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\nfail2ban-client version</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Fail2Ban\nsudo yum install -y fail2ban fail2ban-systemd whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Fail2Ban\nsudo dnf install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create local jail configuration (never edit jail.conf directly)\nsudo tee /etc/fail2ban/jail.local &gt; /dev/null &lt;&lt;EOF\n# Fail2Ban Local Configuration\n\n[DEFAULT]\n# Ban settings\nbantime = 3600\nfindtime = 600\nmaxretry = 3\nbackend = auto\n\n# Notification settings\ndestemail = admin@example.com\nsender = fail2ban@example.com\nmta = sendmail\n\n# Actions\naction = %(action_mwl)s\n\n# Ignore IP addresses (whitelist)\nignoreip = 127.0.0.1/8 ::1 192.168.1.0/24 10.0.0.0/8\n\n# SSH protection\n[sshd]\nenabled = true\nport = ssh,2222\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\n\n# HTTP/HTTPS brute force protection\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nlogpath = /var/log/nginx/error.log\nmaxretry = 3\n\n[nginx-noscript]\nenabled = true\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 6\n\n[nginx-badbots]\nenabled = true\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n# Apache protection\n[apache-auth]\nenabled = false\nfilter = apache-auth\nlogpath = /var/log/apache2/error.log\nmaxretry = 3\n\n[apache-badbots]\nenabled = false\nfilter = apache-badbots\nlogpath = /var/log/apache2/access.log\nmaxretry = 2\n\n# Database protection\n[mysql]\nenabled = false\nfilter = mysql-auth\nlogpath = /var/log/mysql/error.log\nmaxretry = 3\nbantime = 7200\n\n[postgresql]\nenabled = false\nfilter = postgresql\nlogpath = /var/log/postgresql/postgresql-*-main.log\nmaxretry = 3\n\n# Mail server protection\n[postfix]\nenabled = false\nfilter = postfix\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n[dovecot]\nenabled = false\nfilter = dovecot\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n# FTP protection\n[vsftpd]\nenabled = false\nfilter = vsftpd\nlogpath = /var/log/vsftpd.log\nmaxretry = 3\n\n# Custom application protection\n[custom-app]\nenabled = false\nfilter = custom-app\nlogpath = /var/log/myapp/error.log\nmaxretry = 5\nbantime = 1800\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-filters\" class=\"mobile-header\">Custom Filters</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create custom filter for web applications\nsudo tee /etc/fail2ban/filter.d/nginx-custom.conf &gt; /dev/null &lt;&lt;EOF\n# Custom NGINX filter for advanced protection\n\n[Definition]\nfailregex = \n    # Failed login attempts\n    ^&lt;HOST&gt; -.*POST.*(wp-login\\.php|login|signin|admin).*HTTP/[0-9\\.]+\\&quot; 200\n    # Directory traversal attempts\n    ^&lt;HOST&gt; -.*GET.*(\\.\\./|\\.\\.\\%2F).*HTTP/[0-9\\.]+\\&quot; 404\n    # SQL injection attempts  \n    ^&lt;HOST&gt; -.*GET.*(union|select|insert|cast|set|declare|drop|create|alter|delete|update|replace|truncate).*HTTP/[0-9\\.]+\\&quot; 200\n    # XSS attempts\n    ^&lt;HOST&gt; -.*GET.*(script|javascript|vbscript|onload|onerror|onclick).*HTTP/[0-9\\.]+\\&quot; 200\n    # Suspicious user agents\n    ^&lt;HOST&gt; -.*\\&quot;(.*sqlmap.*|.*nikto.*|.*nessus.*|.*openvas.*|.*python-requests.*|.*curl.*|.*wget.*)\\&quot;$\n    # Too many 404 errors\n    ^&lt;HOST&gt; -.*\\&quot; 404 \n\nignoreregex =\n    # Ignore legitimate requests\n    ^&lt;HOST&gt; -.*GET.*/favicon\\.ico.*HTTP/[0-9\\.]+\\&quot; 404\n    ^&lt;HOST&gt; -.*GET.*/robots\\.txt.*HTTP/[0-9\\.]+\\&quot; 404\nEOF\n\n# Create WordPress-specific filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = \n    # WordPress login failures\n    ^&lt;HOST&gt; -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\&quot; 200\n    # WordPress admin access attempts\n    ^&lt;HOST&gt; -.*GET.*/wp-admin.*HTTP/[0-9\\.]+\\&quot; 403\n    # XML-RPC attacks\n    ^&lt;HOST&gt; -.*POST.*/xmlrpc\\.php.*HTTP/[0-9\\.]+\\&quot; 200\n\nignoreregex =\n    # Ignore successful admin logins (adjust pattern as needed)\n    ^&lt;HOST&gt; -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\&quot; 302\nEOF\n\n# Add WordPress jail to jail.local\nsudo tee -a /etc/fail2ban/jail.local &gt; /dev/null &lt;&lt;EOF\n\n[wordpress]\nenabled = true\nfilter = wordpress\nlogpath = /var/log/nginx/access.log\nport = http,https\nmaxretry = 3\nbantime = 1800\nfindtime = 600\nEOF\n\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create advanced fail2ban configuration with multiple actions\nsudo tee /etc/fail2ban/action.d/telegram.conf &gt; /dev/null &lt;&lt;EOF\n# Telegram notification action\n\n[Definition]\nactionstart = \nactionstop = \nactioncheck = \nactionban = curl -s &quot;https://api.telegram.org/bot&lt;bot_token&gt;/sendMessage&quot; -d &quot;chat_id=&lt;chat_id&gt;&amp;text=🚫 Fail2Ban: &lt;name&gt; banned &lt;ip&gt; for &lt;failures&gt; failures&quot;\nactionunban = curl -s &quot;https://api.telegram.org/bot&lt;bot_token&gt;/sendMessage&quot; -d &quot;chat_id=&lt;chat_id&gt;&amp;text=✅ Fail2Ban: &lt;name&gt; unbanned &lt;ip&gt;&quot;\n\n[Init]\nbot_token = your_telegram_bot_token\nchat_id = your_telegram_chat_id\nEOF\n\n# Create comprehensive protection configuration\nsudo tee /etc/fail2ban/jail.d/comprehensive.conf &gt; /dev/null &lt;&lt;EOF\n# Comprehensive Security Configuration\n\n[DEFAULT]\n# Enhanced ban settings\nbantime.increment = true\nbantime.rndtime = 60\nbantime.maxtime = 86400\nbantime.factor = 2\nbantime.formula = ban.Time * (1&lt;&lt;(ban.Count if ban.Count&lt;20 else 20)) * banFactor\n\n# Multiple actions (ban + notify)\naction = %(action_mwl)s[dest=security@example.com]\n         telegram[bot_token=your_bot_token, chat_id=your_chat_id]\n\n[sshd-aggressive]\nenabled = true\nport = ssh\nfilter = sshd[mode=aggressive]\nlogpath = /var/log/auth.log\nmaxretry = 2\nbantime = 7200\nfindtime = 300\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\nbantime = 3600\n\n[nginx-noproxy]\nenabled = true\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nbantime = 86400\n\n# Protect against port scans\n[port-scan]\nenabled = true\nfilter = port-scan\nlogpath = /var/log/messages\nmaxretry = 1\nbantime = 86400\n\n# DNS amplification protection\n[named-refused]\nenabled = false\nfilter = named-refused\nlogpath = /var/log/messages\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-filters-for-applications\" class=\"mobile-header\">Custom Filters for Applications</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create filter for Node.js applications\nsudo tee /etc/fail2ban/filter.d/nodejs-auth.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^.*Authentication failed for.*from &lt;HOST&gt;.*$\n            ^.*Invalid login attempt.*IP: &lt;HOST&gt;.*$\n            ^.*Failed login.*remote_addr: &lt;HOST&gt;.*$\nignoreregex =\nEOF\n\n# Create filter for Grafana\nsudo tee /etc/fail2ban/filter.d/grafana.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^.*logger=context.*error=&quot;invalid username or password&quot;.*remote_addr=&lt;HOST&gt;\n            ^.*logger=context.*error=&quot;user not found&quot;.*remote_addr=&lt;HOST&gt;\nignoreregex =\nEOF\n\n# Create filter for GitLab\nsudo tee /etc/fail2ban/filter.d/gitlab.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^.*Failed Login:.*IP: &lt;HOST&gt;.*$\n            ^.*Rack_Attack.*Throttle.*IP: &lt;HOST&gt;.*$\nignoreregex =\nEOF\n\n# Add application-specific jails\nsudo tee /etc/fail2ban/jail.d/applications.conf &gt; /dev/null &lt;&lt;EOF\n[nodejs-auth]\nenabled = false\nfilter = nodejs-auth\nlogpath = /var/log/nodejs/app.log\nmaxretry = 5\nbantime = 1800\n\n[grafana]\nenabled = false\nfilter = grafana\nlogpath = /var/log/grafana/grafana.log\nmaxretry = 5\nbantime = 3600\n\n[gitlab]\nenabled = false\nfilter = gitlab\nlogpath = /var/log/gitlab/gitlab-rails/production.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-management\" class=\"mobile-header\">Monitoring and Management</h2>\n<h3 id=\"fail2ban-management-script\" class=\"mobile-header\">Fail2Ban Management Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/fail2ban-manager.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\ncase &quot;${1}&quot; in\n    &quot;status&quot;)\n        echo &quot;=== Fail2Ban Status ===&quot;\n        sudo fail2ban-client status\n        echo &quot;&quot;\n        echo &quot;=== Active Jails ===&quot;\n        for jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n            echo &quot;Jail: $jail&quot;\n            sudo fail2ban-client status $jail\n            echo &quot;&quot;\n        done\n        ;;\n        \n    &quot;unban&quot;)\n        IP=&quot;${2}&quot;\n        if [ -z &quot;$IP&quot; ]; then\n            echo &quot;Usage: $0 unban &lt;ip_address&gt;&quot;\n            exit 1\n        fi\n        \n        echo &quot;Unbanning IP: $IP from all jails&quot;\n        for jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n            sudo fail2ban-client set $jail unbanip $IP 2&gt;/dev/null &amp;&amp; echo &quot;  - Unbanned from $jail&quot;\n        done\n        ;;\n        \n    &quot;ban&quot;)\n        IP=&quot;${2}&quot;\n        JAIL=&quot;${3:-sshd}&quot;\n        if [ -z &quot;$IP&quot; ]; then\n            echo &quot;Usage: $0 ban &lt;ip_address&gt; [jail_name]&quot;\n            exit 1\n        fi\n        \n        echo &quot;Banning IP: $IP in jail: $JAIL&quot;\n        sudo fail2ban-client set $JAIL banip $IP\n        ;;\n        \n    &quot;whitelist&quot;)\n        IP=&quot;${2}&quot;\n        if [ -z &quot;$IP&quot; ]; then\n            echo &quot;Usage: $0 whitelist &lt;ip_address&gt;&quot;\n            exit 1\n        fi\n        \n        echo &quot;Adding $IP to whitelist&quot;\n        sudo sed -i &quot;s/ignoreip = .*/&amp; $IP/&quot; /etc/fail2ban/jail.local\n        sudo systemctl restart fail2ban\n        ;;\n        \n    &quot;logs&quot;)\n        JAIL=&quot;${2:-sshd}&quot;\n        echo &quot;Recent bans for jail: $JAIL&quot;\n        sudo grep &quot;Ban\\|Unban&quot; /var/log/fail2ban.log | grep &quot;$JAIL&quot; | tail -20\n        ;;\n        \n    &quot;stats&quot;)\n        echo &quot;=== Fail2Ban Statistics ===&quot;\n        echo &quot;Total bans today: $(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Ban &quot;)&quot;\n        echo &quot;Total unbans today: $(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Unban &quot;)&quot;\n        echo &quot;&quot;\n        echo &quot;Top banned IPs (last 1000 entries):&quot;\n        sudo tail -1000 /var/log/fail2ban.log | grep &quot;Ban &quot; | awk &#039;{print $(NF-1)}&#039; | sort | uniq -c | sort -nr | head -10\n        ;;\n        \n    &quot;test&quot;)\n        JAIL=&quot;${2:-sshd}&quot;\n        LOG_FILE=&quot;${3:-/var/log/auth.log}&quot;\n        echo &quot;Testing filter for jail: $JAIL&quot;\n        echo &quot;Log file: $LOG_FILE&quot;\n        sudo fail2ban-regex $LOG_FILE /etc/fail2ban/filter.d/${JAIL}.conf\n        ;;\n        \n    &quot;reload&quot;)\n        echo &quot;Reloading Fail2Ban configuration...&quot;\n        sudo fail2ban-client reload\n        echo &quot;Configuration reloaded&quot;\n        ;;\n        \n    *)\n        echo &quot;Fail2Ban Management Script&quot;\n        echo &quot;Usage: $0 {status|unban|ban|whitelist|logs|stats|test|reload}&quot;\n        echo &quot;&quot;\n        echo &quot;Examples:&quot;\n        echo &quot;  $0 status                    # Show status of all jails&quot;\n        echo &quot;  $0 unban 192.168.1.100      # Unban IP from all jails&quot;\n        echo &quot;  $0 ban 10.0.0.1 sshd        # Ban IP in specific jail&quot;\n        echo &quot;  $0 whitelist 192.168.1.50   # Add IP to whitelist&quot;\n        echo &quot;  $0 logs sshd                # Show recent logs for jail&quot;\n        echo &quot;  $0 stats                    # Show ban statistics&quot;\n        echo &quot;  $0 test sshd                # Test jail filter&quot;\n        echo &quot;  $0 reload                   # Reload configuration&quot;\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-manager.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-monitoring\" class=\"mobile-header\">Security Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive monitoring script\nsudo tee /usr/local/bin/fail2ban-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMONITOR_LOG=&quot;/var/log/fail2ban-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${MONITOR_LOG}\n}\n\n# Check Fail2Ban service\nif systemctl is-active fail2ban &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Fail2Ban service is running&quot;\nelse\n    log_message &quot;✗ Fail2Ban service is not running&quot;\n    exit 1\nfi\n\n# Check jail status\nACTIVE_JAILS=$(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039; | wc -w)\nlog_message &quot;ℹ Active jails: ${ACTIVE_JAILS}&quot;\n\n# Check today&#039;s bans\nBANS_TODAY=$(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Ban &quot; 2&gt;/dev/null || echo &quot;0&quot;)\nUNBANS_TODAY=$(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Unban &quot; 2&gt;/dev/null || echo &quot;0&quot;)\nlog_message &quot;ℹ Today&#039;s activity: ${BANS_TODAY} bans, ${UNBANS_TODAY} unbans&quot;\n\n# Check currently banned IPs\nTOTAL_BANNED=0\nfor jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n    JAIL_BANNED=$(sudo fail2ban-client status $jail | grep &quot;Currently banned:&quot; | awk &#039;{print $3}&#039;)\n    TOTAL_BANNED=$((TOTAL_BANNED + JAIL_BANNED))\ndone\n\nlog_message &quot;ℹ Currently banned IPs: ${TOTAL_BANNED}&quot;\n\n# Check for configuration errors\nif ! sudo fail2ban-client status &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;⚠ Fail2Ban configuration errors detected&quot;\n    sudo fail2ban-client status 2&gt;&amp;1 | head -5 &gt;&gt; ${MONITOR_LOG}\nfi\n\n# Check log file accessibility\nfor jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n    LOG_PATH=$(sudo fail2ban-client get $jail logpath 2&gt;/dev/null)\n    if [ -n &quot;$LOG_PATH&quot; ] &amp;&amp; [ ! -r &quot;$LOG_PATH&quot; ]; then\n        log_message &quot;⚠ Cannot read log file for $jail: $LOG_PATH&quot;\n    fi\ndone\n\nlog_message &quot;Fail2Ban monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-monitor.sh\n\n# Schedule monitoring every 15 minutes\necho &quot;*/15 * * * * root /usr/local/bin/fail2ban-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"geographic-blocking-integration\" class=\"mobile-header\">Geographic Blocking Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install GeoIP for country-based blocking\nsudo apt install -y geoip-database geoip-bin  # Ubuntu/Debian\nsudo yum install -y GeoIP GeoIP-data          # RHEL/CentOS\n\n# Create geographic blocking filter\nsudo tee /etc/fail2ban/filter.d/geoip-block.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\n# Block connections from specific countries\nfailregex = ^&lt;HOST&gt; -\nignoreregex =\n\n[Init]\n# Countries to block (ISO country codes)\ncountries = CN,RU,KP,IR\nEOF\n\n# Create action for geographic blocking\nsudo tee /etc/fail2ban/action.d/geoip-block.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nactioncheck = \nactionstart = \nactionstop = \nactionban = COUNTRY=$(geoiplookup &lt;ip&gt; | awk -F: &#039;{print $2}&#039; | awk &#039;{print $1}&#039;); if echo &quot;CN RU KP IR&quot; | grep -q &quot;$COUNTRY&quot;; then iptables -A f2b-&lt;name&gt; -s &lt;ip&gt; -j DROP; fi\nactionunban = iptables -D f2b-&lt;name&gt; -s &lt;ip&gt; -j DROP 2&gt;/dev/null || true\n\n[Init]\nname = geoip-block\nEOF\n\n# Add geographic blocking jail\nsudo tee /etc/fail2ban/jail.d/geoip.conf &gt; /dev/null &lt;&lt;EOF\n[geoip-block]\nenabled = false  # Enable if needed\nfilter = geoip-block\naction = geoip-block\nlogpath = /var/log/nginx/access.log\nmaxretry = 1\nbantime = 86400\nfindtime = 60\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"web-server-integration\" class=\"mobile-header\">Web Server Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># NGINX: Enable logging for Fail2Ban\nsudo tee -a /etc/nginx/nginx.conf &gt; /dev/null &lt;&lt;EOF\n\nhttp {\n    # Log format for Fail2Ban\n    log_format fail2ban &#039;\\$remote_addr - \\$remote_user [\\$time_local] &#039;\n                       &#039;&quot;\\$request&quot; \\$status \\$body_bytes_sent &#039;\n                       &#039;&quot;\\$http_referer&quot; &quot;\\$http_user_agent&quot;&#039;;\n    \n    # Enable access and error logging\n    access_log /var/log/nginx/access.log fail2ban;\n    error_log /var/log/nginx/error.log warn;\n}\nEOF\n\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx\n\n# Apache: Enable logging\nsudo tee -a /etc/apache2/apache2.conf &gt; /dev/null &lt;&lt;EOF\n\n# Enhanced logging for Fail2Ban\nLogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %O \\&quot;%{Referer}i\\&quot; \\&quot;%{User-Agent}i\\&quot;&quot; fail2ban\nCustomLog \\${APACHE_LOG_DIR}/access.log fail2ban\nErrorLog \\${APACHE_LOG_DIR}/error.log\nLogLevel warn\nEOF\n\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"configuration-backup\" class=\"mobile-header\">Configuration Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/fail2ban-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/fail2ban&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\necho &quot;Starting Fail2Ban backup...&quot;\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/fail2ban-config-${DATE}.tar.gz \\\n    /etc/fail2ban/ \\\n    /var/lib/fail2ban/\n\n# Export current ban list\nsudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039; &gt; /tmp/jails.txt\nwhile read jail; do\n    sudo fail2ban-client status $jail | grep &quot;Banned IP list:&quot; &gt; ${BACKUP_DIR}/banned-ips-${jail}-${DATE}.txt\ndone &lt; /tmp/jails.txt\n\n# Keep last 30 backups\nfind ${BACKUP_DIR} -name &quot;fail2ban-*&quot; -type f -mtime +30 -delete\n\necho &quot;Fail2Ban backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-backup.sh\n\n# Schedule weekly backups\necho &quot;0 4 * * 0 root /usr/local/bin/fail2ban-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Fail2Ban service status\nsudo systemctl status fail2ban\nsudo journalctl -u fail2ban -f\n\n# Check jail status\nsudo fail2ban-client status\nsudo fail2ban-client status sshd\n\n# Test filter patterns\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check banned IPs\nsudo fail2ban-client status sshd\nsudo iptables -L -n | grep f2b\n\n# View Fail2Ban logs\nsudo tail -f /var/log/fail2ban.log\n\n# Unban IP address\nsudo fail2ban-client set sshd unbanip 192.168.1.100\n\n# Ban IP manually\nsudo fail2ban-client set sshd banip 10.0.0.1\n\n# Reload configuration\nsudo fail2ban-client reload\n\n# Test SSH jail\nsudo grep &quot;Failed password&quot; /var/log/auth.log | head -5\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check iptables rules\nsudo iptables -L f2b-sshd -n\nsudo iptables -L INPUT -n | grep f2b\n\n# Debug mode\nsudo fail2ban-server -f -v\n\n# Configuration validation\nsudo fail2ban-client -t\n\n# Check log file permissions\nls -la /var/log/auth.log\nls -la /var/log/nginx/access.log\n\n# Monitor real-time bans\nsudo tail -f /var/log/fail2ban.log | grep &quot;Ban\\|Unban&quot;\n\n# Check jail configuration\nsudo fail2ban-client get sshd maxretry\nsudo fail2ban-client get sshd bantime\nsudo fail2ban-client get sshd findtime</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://fail2ban.readthedocs.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Fail2Ban Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/fail2ban/fail2ban\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Fail2Ban GitHub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://fail2ban.readthedocs.io/en/stable/filters.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Filter Configuration Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"12 min","wordCount":2249,"lastBuilt":"2025-09-14T01:30:35.925Z"},{"name":"ghost","displayName":"Ghost","slug":"ghost","description":"Repo for ghost","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ghost","updatedAt":"2025-09-08T03:07:48Z","createdAt":"2025-09-08T03:07:38Z","readmeRaw":"## 👋 Welcome to ghost 🚀  \n\nghost README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-ghost\" class=\"mobile-header\">👋 Welcome to ghost 🚀  </h2>\n<p class=\"mobile-paragraph\">ghost README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:45.517Z"},{"name":"gitea","displayName":"Gitea","slug":"gitea","description":"Repo for gitea","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitea","updatedAt":"2025-09-08T03:07:55Z","createdAt":"2023-08-28T03:47:56Z","readmeRaw":"# Gitea Install\n\n```bash\necho \"\n###### Debian Main Repos\ndeb http://ftp.us.debian.org/debian/ stable main contrib non-free\ndeb http://ftp.us.debian.org/debian/ stable-updates main contrib non-free\ndeb http://security.debian.org/ stable/updates main contrib non-free\n\" > /etc/apt/sources.list\n\napt update && apt upgrade -y\napt install -y curl wget apt-transport-https psmisc net-tools postfix dirmngr neovim git-core build-essential nginx-full nfs-common htop open-vm-tools\ndpkg-reconfigure postfix\ndpkg-reconfigure dash\n\nmkdir -p /mnt/backups /var/www/html/.well-known /etc/letsencrypt\necho \"\n10.0.254.1:/mnt/Volume_1/backups         /mnt/backups                 nfs defaults,rw 0 0\n10.0.254.1:/var/www/html/.well-known     /var/www/html/.well-known    nfs defaults,rw 0 0\n10.0.254.1:/etc/letsencrypt              /etc/letsencrypt             nfs defaults,rw 0 0\n\" >> /etc/fstab\nmount -a\n\nuseradd --system --shell /bin/bash --comment 'Git Version Control' --create-home --home-dir /home/git git\n\nmkdir -p /var/lib/gitea/{custom,data,indexers,public,log}\nchown git:git /var/lib/gitea/{data,indexers,log}\nchmod 750 /var/lib/gitea/{data,indexers,log}\nmkdir /etc/gitea\nchown root:git /etc/gitea\nchmod 770 /etc/gitea\nchmod 750 /etc/gitea\nchmod 644 /etc/gitea/app.ini\n```\n","readmeHtml":"<h1 id=\"gitea-install\" class=\"mobile-header\">Gitea Install</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">echo &quot;\n###### Debian Main Repos\ndeb http://ftp.us.debian.org/debian/ stable main contrib non-free\ndeb http://ftp.us.debian.org/debian/ stable-updates main contrib non-free\ndeb http://security.debian.org/ stable/updates main contrib non-free\n&quot; &gt; /etc/apt/sources.list\n\napt update &amp;&amp; apt upgrade -y\napt install -y curl wget apt-transport-https psmisc net-tools postfix dirmngr neovim git-core build-essential nginx-full nfs-common htop open-vm-tools\ndpkg-reconfigure postfix\ndpkg-reconfigure dash\n\nmkdir -p /mnt/backups /var/www/html/.well-known /etc/letsencrypt\necho &quot;\n10.0.254.1:/mnt/Volume_1/backups         /mnt/backups                 nfs defaults,rw 0 0\n10.0.254.1:/var/www/html/.well-known     /var/www/html/.well-known    nfs defaults,rw 0 0\n10.0.254.1:/etc/letsencrypt              /etc/letsencrypt             nfs defaults,rw 0 0\n&quot; &gt;&gt; /etc/fstab\nmount -a\n\nuseradd --system --shell /bin/bash --comment &#039;Git Version Control&#039; --create-home --home-dir /home/git git\n\nmkdir -p /var/lib/gitea/{custom,data,indexers,public,log}\nchown git:git /var/lib/gitea/{data,indexers,log}\nchmod 750 /var/lib/gitea/{data,indexers,log}\nmkdir /etc/gitea\nchown root:git /etc/gitea\nchmod 770 /etc/gitea\nchmod 750 /etc/gitea\nchmod 644 /etc/gitea/app.ini</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":125,"lastBuilt":"2025-09-14T01:30:45.362Z"},{"name":"gitlab","displayName":"Gitlab","slug":"gitlab","description":"Repo for gitlab","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/gitlab","updatedAt":"2025-09-14T01:30:01Z","createdAt":"2025-09-08T03:07:56Z","readmeRaw":"# GitLab Installation Guide\n\nComplete DevOps platform with Git repository management, CI/CD pipelines, issue tracking, and container registry. Enterprise-grade solution for modern software development lifecycle with advanced security features.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- 8GB RAM minimum, 16GB+ recommended for production\n- 4 CPU cores minimum, 8+ recommended\n- 50GB+ available disk space, SSD recommended\n- Domain name for external access\n- SSL certificates for production deployment\n- SMTP server for email notifications\n\n## Installation\n\n### Using Omnibus Package (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Install dependencies\nsudo apt-get update\nsudo apt-get install -y curl openssh-server ca-certificates tzdata perl postfix\n\n# Configure Postfix for email\nsudo dpkg-reconfigure postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab Enterprise Edition\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" apt-get install -y gitlab-ee\n\n# For GitLab Community Edition\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" apt-get install -y gitlab-ce\n\n# Initial configuration\nsudo gitlab-ctl reconfigure\n\n# Check status\nsudo gitlab-ctl status\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install dependencies\nsudo yum install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# For newer versions\nsudo dnf install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# Enable and start services\nsudo systemctl enable --now sshd postfix\n\n# Configure SELinux and firewall\nsudo setsebool -P httpd_can_network_connect 1\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" yum install -y gitlab-ee\n\n# Configure and start\nsudo gitlab-ctl reconfigure\n```\n\n#### Fedora\n```bash\n# Install dependencies\nsudo dnf install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# Enable services\nsudo systemctl enable --now sshd postfix\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo EXTERNAL_URL=\"https://gitlab.example.com\" dnf install -y gitlab-ee\n\nsudo gitlab-ctl reconfigure\n```\n\n### Docker Installation (Single Container)\n```bash\n# Create GitLab directories\nsudo mkdir -p /srv/gitlab/{config,logs,data}\n\n# Set environment variables\nexport GITLAB_HOME=/srv/gitlab\n\n# Run GitLab container with comprehensive configuration\nsudo docker run --detach \\\n  --hostname gitlab.example.com \\\n  --env GITLAB_OMNIBUS_CONFIG=\"\n    external_url 'https://gitlab.example.com';\n    gitlab_rails['gitlab_shell_ssh_port'] = 2222;\n    \n    # SSL configuration\n    nginx['ssl_certificate'] = '/etc/gitlab/ssl/gitlab.crt';\n    nginx['ssl_certificate_key'] = '/etc/gitlab/ssl/gitlab.key';\n    nginx['ssl_protocols'] = 'TLSv1.2 TLSv1.3';\n    nginx['ssl_prefer_server_ciphers'] = 'off';\n    \n    # Security settings\n    gitlab_rails['rack_attack_git_basic_auth'] = {\n      'enabled' => true,\n      'ip_whitelist' => ['127.0.0.1', '192.168.1.0/24'],\n      'maxretry' => 10,\n      'findtime' => 60,\n      'bantime' => 3600\n    };\n    \n    # Performance settings\n    postgresql['shared_preload_libraries'] = 'pg_stat_statements';\n    postgresql['max_connections'] = 200;\n    postgresql['shared_buffers'] = '1GB';\n    postgresql['effective_cache_size'] = '4GB';\n    \n    # Container Registry\n    registry_external_url 'https://registry.example.com';\n    gitlab_rails['registry_enabled'] = true;\n    \n    # Monitoring\n    prometheus_monitoring['enable'] = true;\n    grafana['enable'] = true;\n    grafana['admin_password'] = 'secure_grafana_password';\n    \n    # Email configuration\n    gitlab_rails['smtp_enable'] = true;\n    gitlab_rails['smtp_address'] = 'smtp.example.com';\n    gitlab_rails['smtp_port'] = 587;\n    gitlab_rails['smtp_user_name'] = 'gitlab@example.com';\n    gitlab_rails['smtp_password'] = 'smtp_secure_password';\n    gitlab_rails['smtp_domain'] = 'example.com';\n    gitlab_rails['smtp_authentication'] = 'login';\n    gitlab_rails['smtp_enable_starttls_auto'] = true;\n    gitlab_rails['smtp_tls'] = false;\n    gitlab_rails['smtp_openssl_verify_mode'] = 'peer';\n    \n    # Email settings\n    gitlab_rails['gitlab_email_from'] = 'gitlab@example.com';\n    gitlab_rails['gitlab_email_display_name'] = 'GitLab';\n    \n    # Backup configuration\n    gitlab_rails['backup_keep_time'] = 604800;\n    gitlab_rails['backup_upload_connection'] = {\n      'provider' => 'AWS',\n      'region' => 'us-west-2',\n      'aws_access_key_id' => 'backup_access_key',\n      'aws_secret_access_key' => 'backup_secret_key'\n    };\n    gitlab_rails['backup_upload_remote_directory'] = 'gitlab-backups';\n    \" \\\n  --publish 443:443 --publish 80:80 --publish 2222:22 \\\n  --name gitlab \\\n  --restart unless-stopped \\\n  --volume $GITLAB_HOME/config:/etc/gitlab \\\n  --volume $GITLAB_HOME/logs:/var/log/gitlab \\\n  --volume $GITLAB_HOME/data:/var/opt/gitlab \\\n  --shm-size 256m \\\n  gitlab/gitlab-ee:latest\n```\n\n### Docker Compose (Production Setup)\n```bash\nmkdir -p ~/gitlab-stack\ncd ~/gitlab-stack\n\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  gitlab:\n    image: gitlab/gitlab-ee:latest\n    container_name: gitlab\n    restart: unless-stopped\n    hostname: gitlab.example.com\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url 'https://gitlab.example.com'\n        \n        # Performance settings\n        postgresql['shared_buffers'] = \"2GB\"\n        postgresql['effective_cache_size'] = \"8GB\"\n        postgresql['max_connections'] = 300\n        \n        # Security settings\n        gitlab_rails['rack_attack_git_basic_auth'] = {\n          'enabled' => true,\n          'ip_whitelist' => ['127.0.0.1', '10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16'],\n          'maxretry' => 10,\n          'findtime' => 60,\n          'bantime' => 3600\n        }\n        \n        # Container Registry\n        registry_external_url 'https://registry.example.com'\n        gitlab_rails['registry_enabled'] = true\n        \n        # Monitoring\n        prometheus_monitoring['enable'] = true\n        grafana['enable'] = true\n        \n        # Let's Encrypt (disable for reverse proxy setup)\n        letsencrypt['enable'] = false\n        nginx['listen_port'] = 80\n        nginx['listen_https'] = false\n        \n        # GitLab Pages\n        pages_external_url \"https://pages.example.com\"\n        gitlab_pages['enable'] = true\n    ports:\n      - '80:80'\n      - '443:443'\n      - '2222:22'\n    volumes:\n      - './config:/etc/gitlab'\n      - './logs:/var/log/gitlab'\n      - './data:/var/opt/gitlab'\n    networks:\n      - gitlab\n    shm_size: '256m'\n    healthcheck:\n      test: [\"CMD-SHELL\", \"gitlab-healthcheck --fail --max-time 10\"]\n      interval: 60s\n      timeout: 30s\n      retries: 5\n      start_period: 200s\n\n  gitlab-runner:\n    image: gitlab/gitlab-runner:latest\n    container_name: gitlab-runner\n    restart: unless-stopped\n    volumes:\n      - './runner-config:/etc/gitlab-runner'\n      - '/var/run/docker.sock:/var/run/docker.sock'\n    networks:\n      - gitlab\n    depends_on:\n      - gitlab\n\n  redis:\n    image: redis:7-alpine\n    container_name: gitlab-redis\n    restart: unless-stopped\n    command: redis-server --appendonly yes --requirepass redis_secure_password\n    volumes:\n      - redis-data:/data\n    networks:\n      - gitlab\n\n  nginx:\n    image: nginx:alpine\n    container_name: gitlab-nginx\n    restart: unless-stopped\n    ports:\n      - '443:443'\n    volumes:\n      - './nginx/nginx.conf:/etc/nginx/nginx.conf:ro'\n      - './nginx/ssl:/etc/nginx/ssl:ro'\n    depends_on:\n      - gitlab\n    networks:\n      - gitlab\n\nnetworks:\n  gitlab:\n    driver: bridge\n\nvolumes:\n  redis-data:\nEOF\n\n# Create NGINX reverse proxy configuration\nmkdir -p nginx\ncat > nginx/nginx.conf <<EOF\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream gitlab {\n        server gitlab:80;\n    }\n    \n    upstream registry {\n        server gitlab:5000;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name gitlab.example.com;\n\n        ssl_certificate /etc/nginx/ssl/gitlab.crt;\n        ssl_certificate_key /etc/nginx/ssl/gitlab.key;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n\n        client_max_body_size 0;\n        gzip off;\n\n        location / {\n            proxy_pass http://gitlab;\n            proxy_set_header Host \\$host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n        }\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name registry.example.com;\n\n        ssl_certificate /etc/nginx/ssl/registry.crt;\n        ssl_certificate_key /etc/nginx/ssl/registry.key;\n\n        client_max_body_size 0;\n\n        location /v2/ {\n            proxy_pass http://registry;\n            proxy_set_header Host \\$host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n        }\n    }\n}\nEOF\n\ndocker-compose up -d\n```\n\n## Enterprise Configuration\n\n### Production Configuration (/etc/gitlab/gitlab.rb)\n```bash\nsudo tee /etc/gitlab/gitlab.rb > /dev/null <<EOF\n# GitLab Enterprise Production Configuration\n\nexternal_url 'https://gitlab.example.com'\n\n# Performance and Resource Settings\nunicorn['worker_timeout'] = 60\nunicorn['worker_processes'] = 8\nsidekiq['max_concurrency'] = 25\nsidekiq['min_concurrency'] = 10\n\n# PostgreSQL configuration\npostgresql['enable'] = true\npostgresql['max_connections'] = 300\npostgresql['shared_buffers'] = \"2GB\"\npostgresql['effective_cache_size'] = \"8GB\"\npostgresql['work_mem'] = \"16MB\"\npostgresql['maintenance_work_mem'] = \"256MB\"\npostgresql['checkpoint_completion_target'] = 0.9\npostgresql['wal_buffers'] = \"16MB\"\npostgresql['default_statistics_target'] = 100\npostgresql['random_page_cost'] = 1.1\npostgresql['effective_io_concurrency'] = 200\n\n# Redis configuration\nredis['enable'] = true\nredis['maxmemory'] = \"1gb\"\nredis['maxmemory_policy'] = \"allkeys-lru\"\nredis['save'] = '900 1 300 10 60 10000'\nredis['password'] = 'redis_secure_password'\n\n# Gitaly configuration (Git RPC service)\ngitaly['enable'] = true\ngitaly['auth_token'] = 'secure_gitaly_token'\ngitaly['ruby_max_rss'] = 300000000  # 300MB\ngitaly['concurrency'] = [\n  {\n    'rpc' => \"/gitaly.SmartHTTPService/PostReceivePack\",\n    'max_per_repo' => 3\n  },\n  {\n    'rpc' => \"/gitaly.SSHService/SSHUploadPack\", \n    'max_per_repo' => 3\n  }\n]\n\n# NGINX configuration\nnginx['enable'] = true\nnginx['listen_port'] = 80\nnginx['listen_https'] = false\nnginx['redirect_http_to_https'] = false\nnginx['ssl_certificate'] = \"/etc/gitlab/ssl/gitlab.crt\"\nnginx['ssl_certificate_key'] = \"/etc/gitlab/ssl/gitlab.key\"\nnginx['ssl_protocols'] = \"TLSv1.2 TLSv1.3\"\nnginx['ssl_prefer_server_ciphers'] = \"off\"\nnginx['ssl_ciphers'] = \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\"\n\n# Container Registry\nregistry_external_url 'https://registry.example.com'\ngitlab_rails['registry_enabled'] = true\nregistry['enable'] = true\nregistry['username'] = \"registry\"\nregistry['uid'] = 996\nregistry['gid'] = 996\nregistry['dir'] = \"/var/opt/gitlab/registry\"\nregistry['log_directory'] = \"/var/log/gitlab/registry\"\nregistry['log_level'] = \"info\"\nregistry['rootcertbundle'] = \"/opt/gitlab/embedded/ssl/certs/cacert.pem\"\n\n# GitLab Pages\npages_external_url \"https://pages.example.com\"\ngitlab_pages['enable'] = true\ngitlab_pages['dir'] = \"/var/opt/gitlab/gitlab-pages\"\ngitlab_pages['log_directory'] = \"/var/log/gitlab/gitlab-pages\"\ngitlab_pages['access_control'] = true\ngitlab_pages['use_legacy_storage'] = false\n\n# Email configuration\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.example.com\"\ngitlab_rails['smtp_port'] = 587\ngitlab_rails['smtp_user_name'] = \"gitlab@example.com\"\ngitlab_rails['smtp_password'] = \"smtp_secure_password\"\ngitlab_rails['smtp_domain'] = \"example.com\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = false\ngitlab_rails['smtp_openssl_verify_mode'] = 'peer'\n\ngitlab_rails['gitlab_email_enabled'] = true\ngitlab_rails['gitlab_email_from'] = 'gitlab@example.com'\ngitlab_rails['gitlab_email_display_name'] = 'GitLab'\ngitlab_rails['gitlab_email_reply_to'] = 'noreply@example.com'\n\n# Security settings\ngitlab_rails['rack_attack_git_basic_auth'] = {\n  'enabled' => true,\n  'ip_whitelist' => %w{127.0.0.1 192.168.1.0/24 10.0.0.0/8},\n  'maxretry' => 10,\n  'findtime' => 60,\n  'bantime' => 3600\n}\n\n# Two-factor authentication\ngitlab_rails['require_two_factor_authentication'] = false\ngitlab_rails['two_factor_grace_period'] = 8  # 8 hours instead of default 48\n\n# Session settings\ngitlab_rails['session_expire_delay'] = 10080  # 1 week\ngitlab_rails['session_store_enabled'] = true\n\n# Backup configuration\ngitlab_rails['backup_keep_time'] = 604800  # 7 days\ngitlab_rails['backup_upload_connection'] = {\n  'provider' => 'AWS',\n  'region' => 'us-west-2',\n  'aws_access_key_id' => 'backup_access_key',\n  'aws_secret_access_key' => 'backup_secret_key'\n}\ngitlab_rails['backup_upload_remote_directory'] = 'gitlab-backups'\ngitlab_rails['backup_multipart_chunk_size'] = 104857600  # 100MB\n\n# Monitoring\nprometheus_monitoring['enable'] = true\nprometheus['enable'] = true\nprometheus['listen_address'] = 'localhost:9090'\nprometheus['scrape_configs'] = [\n  {\n    'job_name' => 'gitlab-workhorse',\n    'static_configs' => [\n      { 'targets' => ['localhost:9229'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-unicorn',\n    'static_configs' => [\n      { 'targets' => ['localhost:8080'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-sidekiq',\n    'static_configs' => [\n      { 'targets' => ['localhost:8082'] }\n    ]\n  }\n]\n\ngrafana['enable'] = true\ngrafana['admin_password'] = 'secure_grafana_password'\ngrafana['disable_login_form'] = false\n\n# Logging\nlogging['svlogd_size'] = 200 * 1024 * 1024  # 200MB\nlogging['svlogd_num'] = 30\nlogging['svlogd_timeout'] = 24 * 60 * 60    # rotate after 24 hours\nlogging['logrotate_frequency'] = \"daily\"\nlogging['logrotate_rotate'] = 30\nlogging['logrotate_compress'] = \"compress\"\n\n# Git settings\ngitlab_rails['gitlab_default_branch'] = 'main'\ngitlab_rails['max_request_duration_seconds'] = 60\n\n# Rate limiting\ngitlab_rails['rate_limit_requests_per_period'] = 300\ngitlab_rails['rate_limit_period'] = 60\n\n# Enterprise features (if using GitLab EE)\n# gitlab_rails['ee_license'] = File.read('/etc/gitlab/GitLab.gitlab-license')\n\n# Security scanning\ngitlab_rails['dependency_scanning_enabled'] = true\ngitlab_rails['container_scanning_enabled'] = true\ngitlab_rails['sast_enabled'] = true\ngitlab_rails['secret_detection_enabled'] = true\n\n# LDAP configuration (Enterprise)\ngitlab_rails['ldap_enabled'] = false\ngitlab_rails['prevent_ldap_sign_in'] = false\ngitlab_rails['ldap_servers'] = {\n  'main' => {\n    'label' => 'LDAP',\n    'host' => 'ldap.example.com',\n    'port' => 636,\n    'uid' => 'sAMAccountName',\n    'bind_dn' => 'CN=gitlab,OU=Service Accounts,DC=example,DC=com',\n    'password' => 'ldap_service_password',\n    'encryption' => 'ssl',\n    'verify_certificates' => true,\n    'ca_file' => '/etc/gitlab/ssl/ldap-ca.crt',\n    'base' => 'DC=example,DC=com',\n    'user_filter' => '',\n    'attributes' => {\n      'username' => ['uid', 'userid', 'sAMAccountName'],\n      'email' => ['mail', 'email', 'userPrincipalName'],\n      'name' => 'cn',\n      'first_name' => 'givenName',\n      'last_name' => 'sn'\n    },\n    'group_base' => 'OU=Groups,DC=example,DC=com',\n    'admin_group' => 'GitLab Administrators'\n  }\n}\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Security Hardening (2024 Best Practices)\n\n### SSL/TLS Configuration\n```bash\n# Generate SSL certificates\nsudo mkdir -p /etc/gitlab/ssl\n\n# Self-signed certificate for testing\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/gitlab/ssl/gitlab.key \\\n  -out /etc/gitlab/ssl/gitlab.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=gitlab.example.com\"\n\n# Production: Let's Encrypt integration\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Let's Encrypt configuration\nletsencrypt['enable'] = true\nletsencrypt['contact_emails'] = ['admin@example.com']\nletsencrypt['auto_renew'] = true\nletsencrypt['auto_renew_hour'] = 0\nletsencrypt['auto_renew_minute'] = 0\nletsencrypt['auto_renew_day_of_month'] = \"*/4\"\n\n# Force HTTPS\nnginx['redirect_http_to_https'] = true\nnginx['ssl_protocols'] = \"TLSv1.2 TLSv1.3\"\nnginx['ssl_prefer_server_ciphers'] = \"off\"\nnginx['ssl_ciphers'] = \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\"\n\n# HSTS\nnginx['hsts_max_age'] = 31536000\nnginx['hsts_include_subdomains'] = true\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Advanced Security Configuration\n```bash\n# Configure security settings\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Security hardening\ngitlab_rails['webhook_timeout'] = 10\ngitlab_rails['webhook_max_redirects'] = 3\n\n# Disable password authentication (use SSO/LDAP)\ngitlab_rails['omniauth_allow_single_sign_on'] = ['saml', 'ldapmain']\ngitlab_rails['omniauth_block_auto_created_users'] = false\ngitlab_rails['omniauth_auto_sign_in_with_provider'] = 'saml'\n\n# API rate limiting\ngitlab_rails['rate_limit_requests_per_period'] = 1000\ngitlab_rails['rate_limit_period'] = 60\n\n# Git over HTTP rate limiting\ngitlab_rails['rack_attack_git_basic_auth'] = {\n  'enabled' => true,\n  'ip_whitelist' => %w{127.0.0.1 192.168.1.0/24},\n  'maxretry' => 20,\n  'findtime' => 60,\n  'bantime' => 3600\n}\n\n# Protected paths\ngitlab_rails['rack_attack_protected_paths'] = [\n  '/users/password',\n  '/users/sign_in',\n  '/api/v4/session.json',\n  '/api/v4/session',\n  '/users/confirmation',\n  '/unsubscribes/',\n  '/import/github/personal_access_token',\n  '/admin/session'\n]\n\n# SSH security\ngitlab_rails['gitlab_shell_ssh_port'] = 2222\ngitlab_shell['auth_file'] = \"/var/opt/gitlab/.ssh/authorized_keys\"\n\n# Container Registry security\nregistry['notifications'] = [\n  {\n    'name' => 'security_scan',\n    'url' => 'https://security-scanner.example.com/webhook',\n    'timeout' => '2000ms',\n    'threshold' => 3,\n    'backoff' => '1000ms'\n  }\n]\n\n# Secrets management\ngitlab_rails['db_password'] = File.read('/etc/gitlab/secrets/db_password').strip\ngitlab_rails['secret_key_base'] = File.read('/etc/gitlab/secrets/secret_key_base').strip\ngitlab_rails['otp_key_base'] = File.read('/etc/gitlab/secrets/otp_key_base').strip\ngitlab_rails['encrypted_settings_key_base'] = File.read('/etc/gitlab/secrets/encrypted_settings_key_base').strip\n\n# Audit logging\ngitlab_rails['audit_events_enabled'] = true\n\n# Disable features that increase attack surface\ngitlab_rails['usage_ping_enabled'] = false\ngitlab_rails['sentry_enabled'] = false\nEOF\n\n# Create secrets directory and files\nsudo mkdir -p /etc/gitlab/secrets\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/db_password\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/secret_key_base\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/otp_key_base\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/encrypted_settings_key_base\n\n# Secure permissions\nsudo chmod 600 /etc/gitlab/secrets/*\nsudo chown git:git /etc/gitlab/secrets/*\n\nsudo gitlab-ctl reconfigure\n```\n\n### GitLab Runner Security Configuration\n```bash\n# Create secure runner configuration\nsudo mkdir -p /etc/gitlab-runner\n\nsudo tee /etc/gitlab-runner/config.toml > /dev/null <<EOF\nconcurrent = 4\ncheck_interval = 0\nshutdown_timeout = 0\n\n[session_server]\n  session_timeout = 1800\n\n[[runners]]\n  name = \"docker-runner-secure\"\n  url = \"https://gitlab.example.com/\"\n  token = \"runner_registration_token\"\n  executor = \"docker\"\n  \n  # Security settings\n  pre_clone_script = \"echo 'Starting secure build'\"\n  pre_build_script = \"echo 'Preparing secure environment'\"\n  post_build_script = \"echo 'Cleaning up secure environment'\"\n  \n  [runners.docker]\n    tls_verify = false\n    image = \"alpine:latest\"\n    privileged = false  # Critical: Never use privileged mode\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [\"/cache\", \"/certs/client\"]\n    shm_size = 0\n    network_mode = \"bridge\"\n    \n    # Security restrictions\n    cap_drop = [\"ALL\"]\n    cap_add = [\"CHOWN\", \"SETGID\", \"SETUID\"]\n    security_opt = [\"no-new-privileges:true\"]\n    \n    # Resource limits\n    memory = \"2g\"\n    memory_swap = \"2g\"\n    memory_reservation = \"1g\"\n    cpus = \"1.5\"\n    \n    # Network security\n    dns = [\"8.8.8.8\", \"8.8.4.4\"]\n    extra_hosts = [\"gitlab.example.com:192.168.1.100\"]\n    \n    # Image scanning\n    pull_policy = [\"if-not-present\"]\n    \n  [runners.docker.tmpfs]\n    \"/tmp\" = \"rw,noexec,nosuid,size=100m\"\n    \"/var/tmp\" = \"rw,noexec,nosuid,size=100m\"\n\n# Kubernetes executor (more secure)\n[[runners]]\n  name = \"k8s-runner-secure\"\n  url = \"https://gitlab.example.com/\"\n  token = \"k8s_runner_token\"\n  executor = \"kubernetes\"\n  \n  [runners.kubernetes]\n    host = \"https://k8s.example.com:6443\"\n    namespace = \"gitlab-runner\"\n    privileged = false  # Never use privileged\n    image = \"alpine:latest\"\n    \n    # Security context\n    run_as_user = 1000\n    run_as_group = 1000\n    fs_group = 1000\n    \n    # Resource limits\n    memory_limit = \"2Gi\"\n    memory_request = \"1Gi\"\n    cpu_limit = \"1000m\"\n    cpu_request = \"500m\"\n    \n    # Security policies\n    [runners.kubernetes.pod_security_context]\n      run_as_non_root = true\n      run_as_user = 1000\n      run_as_group = 1000\n      fs_group = 1000\n      \n    [[runners.kubernetes.volumes.empty_dir]]\n      name = \"tmp\"\n      mount_path = \"/tmp\"\n      medium = \"Memory\"\nEOF\n\n# Register runner with security tags\nsudo gitlab-runner register \\\n  --url \"https://gitlab.example.com/\" \\\n  --registration-token \"RUNNER_TOKEN\" \\\n  --description \"secure-docker-runner\" \\\n  --tag-list \"docker,secure,production\" \\\n  --run-untagged=\"false\" \\\n  --locked=\"true\" \\\n  --access-level=\"ref_protected\" \\\n  --executor \"docker\" \\\n  --docker-image alpine:latest \\\n  --docker-privileged=\"false\" \\\n  --docker-volumes \"/certs/client\"\n\nsudo systemctl enable --now gitlab-runner\n```\n\n## CI/CD Pipeline Security\n\n### Secure Pipeline Configuration\n```bash\n# Create .gitlab-ci.yml with security best practices\ncat > .gitlab-ci.yml <<EOF\n# GitLab CI/CD Security Best Practices - 2024\n\nstages:\n  - security-scan\n  - test\n  - build\n  - security-test\n  - deploy\n\nvariables:\n  # Security variables\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: \"/certs\"\n  SECURE_LOG_LEVEL: info\n  \n  # Use protected variables for sensitive data\n  # DEPLOY_TOKEN: (set in GitLab UI as protected variable)\n  # AWS_ACCESS_KEY: (set in GitLab UI as protected variable)\n\n# Security scanning stage\nsecret-detection:\n  stage: security-scan\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/secrets:latest\n  script:\n    - echo \"Scanning for secrets in code...\"\n    - /analyzer run\n  artifacts:\n    reports:\n      secret_detection: gl-secret-detection-report.json\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH'\n  tags:\n    - secure\n\ndependency-scanning:\n  stage: security-scan  \n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/gemnasium:latest\n  script:\n    - echo \"Scanning dependencies for vulnerabilities...\"\n    - /analyzer run\n  artifacts:\n    reports:\n      dependency_scanning: gl-dependency-scanning-report.json\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH'\n  tags:\n    - secure\n\nsast:\n  stage: security-scan\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/sobelow:latest\n  script:\n    - echo \"Static application security testing...\"\n    - /analyzer run\n  artifacts:\n    reports:\n      sast: gl-sast-report.json\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH'\n  tags:\n    - secure\n\n# Container scanning\ncontainer-scanning:\n  stage: security-test\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/klar:latest\n  script:\n    - echo \"Scanning container image for vulnerabilities...\"\n    - /analyzer run\n  artifacts:\n    reports:\n      container_scanning: gl-container-scanning-report.json\n  dependencies:\n    - build\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH'\n  tags:\n    - secure\n\n# Secure build stage\nbuild:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  before_script:\n    # Verify image signatures\n    - echo \"Verifying base image integrity...\"\n    - docker trust inspect alpine:latest\n  script:\n    - echo \"Building application with security scanning...\"\n    - docker build -t \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA .\n    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n    - docker login -u \\$CI_REGISTRY_USER -p \\$CI_REGISTRY_PASSWORD \\$CI_REGISTRY\n    - docker push \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \"main\"'\n  tags:\n    - secure\n\n# Secure deployment\ndeploy-production:\n  stage: deploy\n  image: alpine:latest\n  before_script:\n    # Install kubectl and verify cluster connectivity\n    - apk add --no-cache curl\n    - curl -LO \"https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl\"\n    - chmod +x kubectl && mv kubectl /usr/local/bin/\n    - kubectl config use-context production-cluster\n    - kubectl auth can-i create deployments --namespace=production\n  script:\n    - echo \"Deploying to production with security validations...\"\n    - kubectl apply -f k8s/production/ --namespace=production\n    - kubectl rollout status deployment/app --namespace=production --timeout=300s\n  environment:\n    name: production\n    url: https://app.example.com\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \"main\"'\n      when: manual\n  only:\n    variables:\n      - \\$CI_COMMIT_REF_PROTECTED == \"true\"\n  tags:\n    - secure\n    - production\n\n# Security compliance check\ncompliance-check:\n  stage: security-test\n  image: alpine:latest\n  script:\n    - echo \"Running compliance checks...\"\n    - apk add --no-cache curl jq\n    - |\n      # Check for required security labels in Docker images\n      if ! docker inspect \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA | jq -r '.[].Config.Labels[\"security.scan\"]' | grep -q \"passed\"; then\n        echo \"ERROR: Image failed security scan\"\n        exit 1\n      fi\n    - echo \"Compliance check passed\"\n  dependencies:\n    - container-scanning\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \"main\"'\n  tags:\n    - secure\n\n# Infrastructure as Code scanning\niac-scanning:\n  stage: security-scan\n  image: bridgecrew/checkov:latest\n  script:\n    - checkov --framework terraform --framework kubernetes --framework dockerfile\n  artifacts:\n    reports:\n      junit: checkov-report.xml\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH'\n      changes:\n        - \"**/*.tf\"\n        - \"**/*.yml\"\n        - \"**/*.yaml\"\n        - \"**/Dockerfile*\"\n  tags:\n    - secure\nEOF\n```\n\n### RBAC and Access Control\n```bash\n# Configure GitLab RBAC via API\nGITLAB_URL=\"https://gitlab.example.com\"\nADMIN_TOKEN=\"your_admin_token\"\n\n# Create groups with specific permissions\ncurl --request POST --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --data \"name=developers&path=developers&description=Development team&visibility=private\" \\\n  \"${GITLAB_URL}/api/v4/groups\"\n\ncurl --request POST --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --data \"name=security-team&path=security-team&description=Security team&visibility=private\" \\\n  \"${GITLAB_URL}/api/v4/groups\"\n\n# Create projects with security templates\ncurl --request POST --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --data \"name=secure-app&description=Secure application&visibility=private&issues_enabled=true&merge_requests_enabled=true&wiki_enabled=false&builds_enabled=true&snippets_enabled=false&container_registry_enabled=true&shared_runners_enabled=false\" \\\n  \"${GITLAB_URL}/api/v4/projects\"\n\n# Configure branch protection\nPROJECT_ID=\"1\"  # Replace with actual project ID\ncurl --request POST --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --data \"name=main&code_owner_approval_required=true&push_access_level=40&merge_access_level=40&unprotect_access_level=40\" \\\n  \"${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/protected_branches\"\n\n# Configure push rules (Premium/Ultimate)\ncurl --request POST --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --data \"deny_delete_tag=true&member_check=true&prevent_secrets=true&author_email_regex=.*@example.com&file_extension_restriction=jar,exe&max_file_size=100\" \\\n  \"${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/push_rule\"\n```\n\n### Vulnerability Scanning Integration\n```bash\n# Configure dependency proxy for secure image caching\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Dependency Proxy for secure image caching\ngitlab_rails['dependency_proxy_enabled'] = true\ngitlab_rails['dependency_proxy_storage_path'] = \"/var/opt/gitlab/gitlab-rails/shared/dependency_proxy\"\n\n# Security scanning\ngitlab_rails['sast_enabled'] = true\ngitlab_rails['dependency_scanning_enabled'] = true\ngitlab_rails['container_scanning_enabled'] = true\ngitlab_rails['secret_detection_enabled'] = true\ngitlab_rails['license_scanning_enabled'] = true\n\n# Secure package registry\ngitlab_rails['packages_enabled'] = true\ngitlab_rails['packages_storage_path'] = \"/var/opt/gitlab/gitlab-rails/shared/packages\"\nEOF\n\n# Create custom security scanning templates\nmkdir -p .gitlab/ci-templates\n\ncat > .gitlab/ci-templates/Security-Scanning.gitlab-ci.yml <<EOF\n# Custom Security Scanning Template\n\n.security-scan-template:\n  stage: security-scan\n  variables:\n    SECURE_LOG_LEVEL: info\n  before_script:\n    - echo \"Preparing security scan environment...\"\n    - apk add --no-cache curl jq\n  tags:\n    - secure\n\ncustom-sast:\n  extends: .security-scan-template\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/semgrep:latest\n  script:\n    - echo \"Running custom SAST analysis...\"\n    - /analyzer run\n  artifacts:\n    reports:\n      sast: gl-sast-report.json\n    expire_in: 1 week\n\ncustom-secrets-scan:\n  extends: .security-scan-template\n  image: trufflesecurity/trufflehog:latest\n  script:\n    - echo \"Scanning for secrets with TruffleHog...\"\n    - trufflehog git file://. --json > trufflehog-report.json\n    - |\n      if [ -s trufflehog-report.json ]; then\n        echo \"Secrets detected!\"\n        cat trufflehog-report.json\n        exit 1\n      fi\n  artifacts:\n    reports:\n      secret_detection: trufflehog-report.json\n    expire_in: 1 week\n\nimage-vulnerability-scan:\n  extends: .security-scan-template\n  image: aquasec/trivy:latest\n  script:\n    - echo \"Scanning Docker images for vulnerabilities...\"\n    - trivy image --format template --template \"@contrib/gitlab.tpl\" \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n  artifacts:\n    reports:\n      container_scanning: gl-container-scanning-report.json\n    expire_in: 1 week\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Backup and Disaster Recovery\n\n### Enterprise Backup Strategy\n```bash\nsudo tee /usr/local/bin/gitlab-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/gitlab\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{omnibus,secrets,ssl,logs}\n\n# Create GitLab backup\ngitlab-backup create STRATEGY=copy SKIP=uploads,builds,artifacts,lfs,registry,pages\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/omnibus/gitlab-config-${DATE}.tar.gz \\\n    /etc/gitlab/gitlab.rb \\\n    /etc/gitlab/gitlab-secrets.json\n\n# Backup SSL certificates\ntar -czf ${BACKUP_DIR}/ssl/gitlab-ssl-${DATE}.tar.gz \\\n    /etc/gitlab/ssl/ \\\n    /etc/letsencrypt/\n\n# Backup secrets\ntar -czf ${BACKUP_DIR}/secrets/gitlab-secrets-${DATE}.tar.gz \\\n    /etc/gitlab/secrets/\n\n# Upload to multiple cloud storage backends\naws s3 cp ${BACKUP_DIR}/ s3://gitlab-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination gitlab-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://gitlab-backups/\n\n# Geo-replication backup (Enterprise)\nif command -v gitlab-rake >/dev/null 2>&1; then\n    gitlab-rake gitlab:geo:check\n    gitlab-rake geo:status\nfi\n\n# Test backup integrity\nLATEST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar | head -1)\nif [ -n \"$LATEST_BACKUP\" ]; then\n    echo \"Latest backup: $LATEST_BACKUP\"\n    tar -tf \"$LATEST_BACKUP\" > /tmp/backup-contents.txt\n    if [ $? -eq 0 ]; then\n        echo \"✓ Backup integrity verified\"\n    else\n        echo \"✗ Backup integrity check failed\"\n    fi\nfi\n\n# Keep only last 7 backups locally\nfind /var/opt/gitlab/backups/ -name \"*_gitlab_backup.tar\" -mtime +7 -delete\nfind ${BACKUP_DIR} -name \"gitlab-*\" -type f -mtime +7 -delete\n\necho \"GitLab backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup.sh\n\n# Schedule daily backups\necho \"0 2 * * * root /usr/local/bin/gitlab-backup.sh\" | sudo tee -a /etc/crontab\n\n# Create disaster recovery script\nsudo tee /usr/local/bin/gitlab-restore.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_FILE=\"${1}\"\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup_file>\"\n    echo \"Available backups:\"\n    ls -la /var/opt/gitlab/backups/*_gitlab_backup.tar\n    exit 1\nfi\n\n# Stop GitLab services\ngitlab-ctl stop unicorn\ngitlab-ctl stop puma\ngitlab-ctl stop sidekiq\n\n# Restore from backup\ngitlab-backup restore BACKUP=$(basename $BACKUP_FILE _gitlab_backup.tar) force=yes\n\n# Restore configuration\nif [ -f \"/backup/gitlab/omnibus/gitlab-config-latest.tar.gz\" ]; then\n    cd /\n    tar -xzf /backup/gitlab/omnibus/gitlab-config-latest.tar.gz\nfi\n\n# Reconfigure and restart\ngitlab-ctl reconfigure\ngitlab-ctl restart\n\n# Verify installation\ngitlab-rake gitlab:check SANITIZE=true\n\necho \"GitLab restore completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-restore.sh\n```\n\n### High Availability Setup\n```bash\n# Configure GitLab for HA with external services\nsudo tee /etc/gitlab/gitlab.rb > /dev/null <<EOF\n# GitLab High Availability Configuration\n\nexternal_url 'https://gitlab.example.com'\n\n# Disable built-in services (use external)\npostgresql['enable'] = false\nredis['enable'] = false\nnginx['enable'] = true\nunicorn['enable'] = true\nsidekiq['enable'] = true\ngitlab_workhorse['enable'] = true\ngitaly['enable'] = true\n\n# External PostgreSQL\ngitlab_rails['db_adapter'] = 'postgresql'\ngitlab_rails['db_encoding'] = 'unicode'\ngitlab_rails['db_host'] = 'postgres-master.example.com'\ngitlab_rails['db_port'] = 5432\ngitlab_rails['db_database'] = 'gitlabhq_production'\ngitlab_rails['db_username'] = 'gitlab'\ngitlab_rails['db_password'] = 'secure_db_password'\ngitlab_rails['db_load_balancing'] = {\n  'hosts' => ['postgres-slave1.example.com', 'postgres-slave2.example.com']\n}\n\n# External Redis\ngitlab_rails['redis_host'] = 'redis-master.example.com'\ngitlab_rails['redis_port'] = 6379\ngitlab_rails['redis_password'] = 'redis_secure_password'\ngitlab_rails['redis_sentinels'] = [\n  {'host' => 'redis-sentinel1.example.com', 'port' => 26379},\n  {'host' => 'redis-sentinel2.example.com', 'port' => 26379},\n  {'host' => 'redis-sentinel3.example.com', 'port' => 26379}\n]\n\n# Load balancing\nnginx['listen_addresses'] = ['0.0.0.0']\nnginx['real_ip_header'] = 'X-Forwarded-For'\nnginx['real_ip_recursive'] = 'on'\nnginx['real_ip_trusted_addresses'] = ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16']\n\n# Gitaly cluster (Enterprise)\ngit_data_dirs({\n  'default' => {\n    'gitaly_address' => 'tcp://gitaly1.example.com:8075',\n    'gitaly_token' => 'gitaly_secure_token'\n  },\n  'storage1' => {\n    'gitaly_address' => 'tcp://gitaly2.example.com:8075',\n    'gitaly_token' => 'gitaly_secure_token'\n  }\n})\n\n# Object storage (S3-compatible)\ngitlab_rails['object_store']['enabled'] = true\ngitlab_rails['object_store']['proxy_download'] = true\ngitlab_rails['object_store']['connection'] = {\n  'provider' => 'AWS',\n  'region' => 'us-west-2',\n  'aws_access_key_id' => 'object_store_access_key',\n  'aws_secret_access_key' => 'object_store_secret_key'\n}\ngitlab_rails['object_store']['objects']['artifacts']['bucket'] = 'gitlab-artifacts'\ngitlab_rails['object_store']['objects']['lfs']['bucket'] = 'gitlab-lfs'\ngitlab_rails['object_store']['objects']['uploads']['bucket'] = 'gitlab-uploads'\ngitlab_rails['object_store']['objects']['packages']['bucket'] = 'gitlab-packages'\n\n# Geo replication (Enterprise Premium)\ngitlab_rails['geo_primary_role'] = true  # Set to false for secondary\ngitlab_rails['geo_node_name'] = 'primary-site'\ngitlab_rails['geo_registry_replication_enabled'] = true\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n## Container Registry and Package Management\n\n### Secure Container Registry Setup\n```bash\n# Configure container registry with security scanning\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Container Registry configuration\nregistry_external_url 'https://registry.example.com'\ngitlab_rails['registry_enabled'] = true\nregistry['enable'] = true\n\n# Registry storage\nregistry['storage'] = {\n  's3' => {\n    'accesskey' => 'registry_s3_access_key',\n    'secretkey' => 'registry_s3_secret_key',\n    'bucket' => 'gitlab-registry',\n    'region' => 'us-west-2',\n    'encrypt' => true\n  }\n}\n\n# Registry security\nregistry['auth_token_realm'] = \"https://gitlab.example.com/jwt/auth\"\nregistry['auth_token_service'] = \"container_registry\"\nregistry['auth_token_issuer'] = \"gitlab-issuer\"\nregistry['auth_token_autoredirect'] = false\n\n# Health checks\nregistry['health_storagedriver_enabled'] = true\nregistry['health_storagedriver_interval'] = '10s'\nregistry['health_storagedriver_threshold'] = 3\n\n# Container scanning\ngitlab_rails['container_registry_token_expire_delay'] = 300\ngitlab_rails['container_registry_cleanup_enabled'] = true\n\n# Image retention policies\nregistry['middleware'] = {\n  'repository' => [\n    {\n      'name' => 'cloudfront',\n      'disabled' => false,\n      'options' => {\n        'baseurl' => 'https://registry-cdn.example.com',\n        'privatekey' => '/etc/gitlab/registry-cdn-private-key.pem',\n        'keypairid' => 'CLOUDFRONT_KEY_PAIR_ID',\n        'duration' => '3600s'\n      }\n    }\n  ]\n}\n\n# Package registry\ngitlab_rails['packages_enabled'] = true\ngitlab_rails['packages_storage_path'] = \"/var/opt/gitlab/gitlab-rails/shared/packages\"\nEOF\n\n# Create container registry cleanup policy\ncat > registry-cleanup-policy.json <<EOF\n{\n  \"name_regex\": \".*\",\n  \"name_regex_keep\": \"v\\\\d+\\\\.\\\\d+\\\\.\\\\d+\",\n  \"cadence\": \"7d\",\n  \"older_than\": \"30d\",\n  \"keep_n\": 10\n}\nEOF\n\n# Apply cleanup policy via API\ncurl --request PUT --header \"PRIVATE-TOKEN: ${ADMIN_TOKEN}\" \\\n  --header \"Content-Type: application/json\" \\\n  --data @registry-cleanup-policy.json \\\n  \"${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/registry/repositories/1\"\n\nsudo gitlab-ctl reconfigure\n```\n\n## Monitoring and Observability\n\n### Comprehensive Monitoring Setup\n```bash\n# Enable built-in monitoring stack\nsudo tee -a /etc/gitlab/gitlab.rb > /dev/null <<EOF\n\n# Prometheus monitoring\nprometheus_monitoring['enable'] = true\nprometheus['enable'] = true\nprometheus['monitor_kubernetes'] = true\nprometheus['scrape_configs'] = [\n  {\n    'job_name' => 'gitlab-workhorse',\n    'static_configs' => [\n      { 'targets' => ['localhost:9229'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-unicorn',  \n    'static_configs' => [\n      { 'targets' => ['localhost:8080'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-sidekiq',\n    'static_configs' => [\n      { 'targets' => ['localhost:8082'] }\n    ]\n  },\n  {\n    'job_name' => 'gitlab-pages',\n    'static_configs' => [\n      { 'targets' => ['localhost:8090'] }\n    ]\n  },\n  {\n    'job_name' => 'docker-registry',\n    'static_configs' => [\n      { 'targets' => ['localhost:5001'] }\n    ]\n  }\n]\n\n# Grafana configuration\ngrafana['enable'] = true\ngrafana['admin_password'] = 'secure_grafana_password'\ngrafana['disable_login_form'] = false\ngrafana['allow_user_sign_up'] = false\n\n# Grafana LDAP integration\ngrafana['ldap_enabled'] = true\ngrafana['ldap_allow_sign_up'] = false\ngrafana['ldap_servers'] = [{\n  'host' => 'ldap.example.com',\n  'port' => 636,\n  'uid' => 'sAMAccountName',\n  'bind_dn' => 'CN=grafana,OU=Service Accounts,DC=example,DC=com',\n  'password' => 'ldap_service_password',\n  'encryption' => 'ssl',\n  'base' => 'DC=example,DC=com',\n  'user_filter' => '',\n  'group_base' => 'OU=Groups,DC=example,DC=com',\n  'admin_group' => 'GitLab Administrators'\n}]\n\n# Node Exporter\nnode_exporter['enable'] = true\nnode_exporter['listen_address'] = 'localhost:9100'\n\n# Alert Manager\nalertmanager['enable'] = true\nalertmanager['admin_email'] = 'alerts@example.com'\nalertmanager['flags'] = {\n  'storage.path' => '/var/opt/gitlab/alertmanager/data',\n  'config.file' => '/var/opt/gitlab/alertmanager/alertmanager.yml'\n}\n\n# Log forwarding\nlogging['logrotate_frequency'] = \"daily\"\nlogging['logrotate_rotate'] = 30\nlogging['logrotate_compress'] = \"compress\"\nlogging['svlogd_size'] = 200 * 1024 * 1024  # 200MB\nlogging['svlogd_num'] = 30\nEOF\n\n# Create custom alerting rules\nsudo mkdir -p /var/opt/gitlab/alertmanager\n\nsudo tee /var/opt/gitlab/alertmanager/alertmanager.yml > /dev/null <<EOF\nglobal:\n  smtp_smarthost: 'smtp.example.com:587'\n  smtp_from: 'gitlab-alerts@example.com'\n  smtp_auth_username: 'gitlab-alerts@example.com'\n  smtp_auth_password: 'smtp_password'\n\nroute:\n  group_by: ['alertname', 'cluster', 'service']\n  group_wait: 30s\n  group_interval: 5m\n  repeat_interval: 12h\n  receiver: 'gitlab-alerts'\n  routes:\n  - match:\n      severity: critical\n    receiver: 'critical-alerts'\n    group_wait: 10s\n    repeat_interval: 5m\n\nreceivers:\n- name: 'gitlab-alerts'\n  email_configs:\n  - to: 'gitlab-admin@example.com'\n    subject: 'GitLab Alert: {{ .GroupLabels.alertname }}'\n    body: |\n      {{ range .Alerts }}\n      Alert: {{ .Annotations.summary }}\n      Description: {{ .Annotations.description }}\n      Instance: {{ .Labels.instance }}\n      {{ end }}\n\n- name: 'critical-alerts'\n  email_configs:\n  - to: 'oncall@example.com'\n    subject: 'CRITICAL GitLab Alert: {{ .GroupLabels.alertname }}'\n  slack_configs:\n  - api_url: 'https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK'\n    channel: '#critical-alerts'\n    title: 'Critical GitLab Alert'\nEOF\n\nsudo gitlab-ctl reconfigure\n```\n\n### Performance Monitoring\n```bash\n# Create GitLab performance monitoring script\nsudo tee /usr/local/bin/gitlab-performance-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nMONITOR_LOG=\"/var/log/gitlab-performance.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${MONITOR_LOG}\n}\n\n# Check GitLab service health\nfor service in unicorn sidekiq workhorse gitaly; do\n    if gitlab-ctl status $service | grep -q \"run:\"; then\n        log_message \"✓ $service is running\"\n    else\n        log_message \"✗ $service is not running\"\n    fi\ndone\n\n# Check database performance\nDB_CONNECTIONS=$(gitlab-psql -c \"SELECT count(*) FROM pg_stat_activity;\" -t)\nlog_message \"ℹ Database connections: ${DB_CONNECTIONS}\"\n\n# Check Redis performance  \nREDIS_MEMORY=$(redis-cli info memory | grep used_memory_human: | cut -d: -f2)\nlog_message \"ℹ Redis memory usage: ${REDIS_MEMORY}\"\n\n# Check Git repository storage\nREPO_SIZE=$(du -sh /var/opt/gitlab/git-data/repositories | cut -f1)\nlog_message \"ℹ Repository storage usage: ${REPO_SIZE}\"\n\n# Check background job queue\nSIDEKIQ_QUEUE=$(gitlab-rails runner \"puts Sidekiq::Queue.new.size\")\nlog_message \"ℹ Sidekiq queue size: ${SIDEKIQ_QUEUE}\"\n\n# Check GitLab metrics\nGITLAB_VERSION=$(gitlab-rake gitlab:env:info | grep \"GitLab information\" -A 10 | grep \"Version:\" | awk '{print $2}')\nlog_message \"ℹ GitLab version: ${GITLAB_VERSION}\"\n\n# Performance metrics via API\nAPI_RESPONSE_TIME=$(curl -w \"%{time_total}\" -s -o /dev/null https://gitlab.example.com/api/v4/projects)\nlog_message \"ℹ API response time: ${API_RESPONSE_TIME}s\"\n\n# Check disk I/O\nDISK_USAGE=$(df /var/opt/gitlab | awk 'NR==2 {print $5}' | sed 's/%//')\nlog_message \"ℹ Disk usage: ${DISK_USAGE}%\"\n\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message \"⚠ High disk usage detected\"\nfi\n\nlog_message \"Performance monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-performance-monitor.sh\n\n# Schedule performance monitoring\necho \"*/15 * * * * root /usr/local/bin/gitlab-performance-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n## GitLab Runner Advanced Configuration\n\n### Secure Multi-Platform Runner Setup\n```bash\n# Create advanced runner configuration with security\nsudo tee /etc/gitlab-runner/config.toml > /dev/null <<EOF\nconcurrent = 10\ncheck_interval = 0\nlog_level = \"info\"\nlog_format = \"runner\"\nshutdown_timeout = 30\n\n[session_server]\n  session_timeout = 1800\n\n# Docker executor with security hardening\n[[runners]]\n  name = \"docker-secure-runner\"\n  url = \"https://gitlab.example.com/\"\n  token = \"secure_runner_token\"\n  executor = \"docker\"\n  output_limit = 4096\n  \n  # Security scripts\n  pre_clone_script = \"\"\"\n    echo 'Security scan initiated'\n    id\n    pwd\n    env | grep -E '^(CI_|GITLAB_)' | sort\n  \"\"\"\n  \n  pre_build_script = \"\"\"\n    echo 'Preparing secure build environment'\n    # Verify no sensitive data in environment\n    if env | grep -i -E '(password|secret|key|token)' | grep -v -E '^(CI_JOB_TOKEN|GITLAB_CI|CI_SERVER)'; then\n      echo 'ERROR: Sensitive data detected in environment'\n      exit 1\n    fi\n  \"\"\"\n  \n  post_build_script = \"\"\"\n    echo 'Cleaning up build artifacts'\n    rm -rf /tmp/* 2>/dev/null || true\n  \"\"\"\n  \n  [runners.docker]\n    tls_verify = false\n    image = \"alpine:latest\"\n    privileged = false\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [\"/cache\", \"/certs/client\"]\n    shm_size = 268435456  # 256MB\n    \n    # Security restrictions\n    cap_drop = [\"ALL\"]\n    cap_add = [\"CHOWN\", \"SETGID\", \"SETUID\"]\n    security_opt = [\"no-new-privileges:true\", \"apparmor:unconfined\"]\n    \n    # Resource limits\n    memory = \"2g\"\n    memory_swap = \"2g\"\n    memory_reservation = \"1g\"\n    cpus = \"2\"\n    \n    # Network security\n    network_mode = \"bridge\"\n    dns = [\"8.8.8.8\", \"8.8.4.4\"]\n    \n    # Disable dangerous features\n    disable_entrypoint_overwrite = true\n    \n    # Image pull policy\n    pull_policy = [\"if-not-present\"]\n    \n  [runners.docker.tmpfs]\n    \"/tmp\" = \"rw,noexec,nosuid,size=100m\"\n    \"/var/tmp\" = \"rw,noexec,nosuid,size=100m\"\n\n# Kubernetes executor (Enterprise recommended)\n[[runners]]\n  name = \"k8s-secure-runner\"\n  url = \"https://gitlab.example.com/\"\n  token = \"k8s_runner_token\"\n  executor = \"kubernetes\"\n  \n  [runners.kubernetes]\n    host = \"https://k8s.example.com:6443\"\n    namespace = \"gitlab-runner\"\n    privileged = false\n    image = \"alpine:latest\"\n    \n    # Security context\n    run_as_user = 1000\n    run_as_group = 1000\n    fs_group = 1000\n    \n    # Resource limits\n    memory_limit = \"4Gi\"\n    memory_request = \"2Gi\"\n    cpu_limit = \"2000m\"\n    cpu_request = \"1000m\"\n    \n    # Security policies\n    [runners.kubernetes.pod_security_context]\n      run_as_non_root = true\n      run_as_user = 1000\n      run_as_group = 1000\n      fs_group = 1000\n      seccomp_profile_type = \"RuntimeDefault\"\n      \n    [runners.kubernetes.container_security_context]\n      allow_privilege_escalation = false\n      read_only_root_filesystem = true\n      capabilities = { drop = [\"ALL\"] }\n      \n    # Volume mounts for security\n    [[runners.kubernetes.volumes.empty_dir]]\n      name = \"tmp\"\n      mount_path = \"/tmp\"\n      medium = \"Memory\"\n      \n    [[runners.kubernetes.volumes.empty_dir]]\n      name = \"var-tmp\"\n      mount_path = \"/var/tmp\"\n      medium = \"Memory\"\n\n# Shell executor for specific tasks (limited use)\n[[runners]]\n  name = \"shell-restricted-runner\"\n  url = \"https://gitlab.example.com/\"\n  token = \"shell_runner_token\"\n  executor = \"shell\"\n  shell = \"bash\"\n  \n  # Restricted tags only\n  tag_list = [\"shell\", \"restricted\"]\n  run_untagged = false\n  locked = true\n  \n  # Security environment\n  environment = [\n    \"PATH=/usr/local/bin:/usr/bin:/bin\",\n    \"HOME=/home/gitlab-runner\",\n    \"SHELL=/bin/bash\"\n  ]\n  \n  # Cleanup\n  builds_dir = \"/home/gitlab-runner/builds\"\n  cache_dir = \"/home/gitlab-runner/cache\"\n  \n  [runners.cache]\n    Type = \"s3\"\n    [runners.cache.s3]\n      ServerAddress = \"s3.amazonaws.com\"\n      BucketName = \"gitlab-runner-cache\"\n      BucketLocation = \"us-west-2\"\n      Insecure = false\nEOF\n\nsudo systemctl restart gitlab-runner\n```\n\n### GitLab Runner Auto-scaling (Cloud)\n```bash\n# Configure GitLab Runner with Docker Machine for auto-scaling\nsudo tee /etc/gitlab-runner/autoscale-config.toml > /dev/null <<EOF\nconcurrent = 50\ncheck_interval = 0\n\n[[runners]]\n  name = \"autoscale-runner\"\n  url = \"https://gitlab.example.com/\"\n  token = \"autoscale_runner_token\"\n  executor = \"docker+machine\"\n  \n  [runners.docker]\n    image = \"alpine:latest\"\n    privileged = false\n    disable_cache = false\n    volumes = [\"/cache\"]\n    \n    # Security\n    cap_drop = [\"ALL\"]\n    security_opt = [\"no-new-privileges:true\"]\n    \n  [runners.machine]\n    IdleCount = 2\n    IdleTime = 1800\n    MaxBuilds = 20\n    MachineName = \"gitlab-runner-%s\"\n    MachineDriver = \"amazonec2\"\n    \n    # AWS EC2 configuration\n    [runners.machine.autoscaling]\n      Periods = [\"* * 9-17 * * mon-fri *\", \"* * 18-8 * * * *\"]\n      IdleCount = [5, 1]\n      IdleTime = [1800, 3600]\n      Timezone = \"UTC\"\n    \n    # Machine options for security\n    [runners.machine.machineoptions]\n      amazonec2-access-key = \"aws_access_key\"\n      amazonec2-secret-key = \"aws_secret_key\"\n      amazonec2-region = \"us-west-2\"\n      amazonec2-vpc-id = \"vpc-12345678\"\n      amazonec2-subnet-id = \"subnet-87654321\"\n      amazonec2-security-group = \"gitlab-runner-sg\"\n      amazonec2-instance-type = \"t3.medium\"\n      amazonec2-ami = \"ami-0c02fb55956c7d316\"  # Amazon Linux 2\n      amazonec2-iam-instance-profile = \"GitLabRunnerInstanceProfile\"\n      amazonec2-use-private-address = \"true\"\n      amazonec2-tags = \"Name,gitlab-runner,Environment,production\"\n      amazonec2-root-size = \"20\"\n      amazonec2-volume-type = \"gp3\"\n      amazonec2-use-ebs-optimized = \"true\"\n      \n  [runners.cache]\n    Type = \"s3\"\n    Shared = true\n    [runners.cache.s3]\n      ServerAddress = \"s3.amazonaws.com\"\n      AccessKey = \"cache_access_key\"\n      SecretKey = \"cache_secret_key\"  \n      BucketName = \"gitlab-runner-cache\"\n      BucketLocation = \"us-west-2\"\n      Insecure = false\nEOF\n```\n\n## Verification and Health Checks\n\n### Comprehensive Health Monitoring\n```bash\nsudo tee /usr/local/bin/gitlab-health-check.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/gitlab-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check GitLab service status\nif gitlab-ctl status | grep -q \"down:\"; then\n    log_message \"⚠ Some GitLab services are down:\"\n    gitlab-ctl status | grep \"down:\" | while read line; do\n        log_message \"  - $line\"\n    done\nelse\n    log_message \"✓ All GitLab services are running\"\nfi\n\n# Check GitLab application health\nif gitlab-rake gitlab:check >/dev/null 2>&1; then\n    log_message \"✓ GitLab application health check passed\"\nelse\n    log_message \"✗ GitLab application health check failed\"\n    gitlab-rake gitlab:check | tail -10 >> ${HEALTH_LOG}\nfi\n\n# Check GitLab Runner connectivity\nRUNNERS_ONLINE=$(curl -s --header \"PRIVATE-TOKEN: admin_token\" https://gitlab.example.com/api/v4/runners | jq '[.[] | select(.status==\"online\")] | length')\nTOTAL_RUNNERS=$(curl -s --header \"PRIVATE-TOKEN: admin_token\" https://gitlab.example.com/api/v4/runners | jq '. | length')\nlog_message \"ℹ GitLab Runners: ${RUNNERS_ONLINE}/${TOTAL_RUNNERS} online\"\n\n# Check database connectivity\nif gitlab-psql -c \"SELECT version();\" >/dev/null 2>&1; then\n    log_message \"✓ Database connection is healthy\"\nelse\n    log_message \"✗ Database connection issues\"\nfi\n\n# Check Redis connectivity\nif redis-cli ping | grep -q \"PONG\"; then\n    log_message \"✓ Redis connection is healthy\"\nelse\n    log_message \"✗ Redis connection issues\"\nfi\n\n# Check container registry\nREGISTRY_STATUS=$(curl -s https://registry.example.com/v2/ | jq -r .message 2>/dev/null)\nif [ \"$REGISTRY_STATUS\" = \"authentication required\" ] || [ \"$REGISTRY_STATUS\" = \"null\" ]; then\n    log_message \"✓ Container registry is responding\"\nelse\n    log_message \"⚠ Container registry issues\"\nfi\n\n# Check backup status\nLAST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar 2>/dev/null | head -1)\nif [ -n \"$LAST_BACKUP\" ]; then\n    BACKUP_AGE=$(stat -c %Y \"$LAST_BACKUP\")\n    CURRENT_TIME=$(date +%s)\n    HOURS_SINCE_BACKUP=$(( (CURRENT_TIME - BACKUP_AGE) / 3600 ))\n    \n    if [ $HOURS_SINCE_BACKUP -lt 48 ]; then\n        log_message \"✓ Recent backup available (${HOURS_SINCE_BACKUP} hours old)\"\n    else\n        log_message \"⚠ Last backup is ${HOURS_SINCE_BACKUP} hours old\"\n    fi\nelse\n    log_message \"✗ No backup files found\"\nfi\n\n# Check SSL certificate expiry\nSSL_EXPIRY=$(echo | openssl s_client -servername gitlab.example.com -connect gitlab.example.com:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)\nSSL_EXPIRY_EPOCH=$(date -d \"$SSL_EXPIRY\" +%s)\nCURRENT_EPOCH=$(date +%s)\nDAYS_TO_EXPIRY=$(( (SSL_EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))\n\nif [ $DAYS_TO_EXPIRY -lt 30 ]; then\n    log_message \"⚠ SSL certificate expires in ${DAYS_TO_EXPIRY} days\"\nelse\n    log_message \"✓ SSL certificate expires in ${DAYS_TO_EXPIRY} days\"\nfi\n\n# Check system resources\nCPU_USAGE=$(top -bn1 | grep \"Cpu(s)\" | awk '{print $2}' | cut -d'%' -f1)\nMEMORY_USAGE=$(free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}')\nlog_message \"ℹ System usage - CPU: ${CPU_USAGE}%, Memory: ${MEMORY_USAGE}%\"\n\nlog_message \"GitLab health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-health-check.sh\n\n# Schedule health checks every 15 minutes\necho \"*/15 * * * * root /usr/local/bin/gitlab-health-check.sh\" | sudo tee -a /etc/crontab\n```\n\n### Security Audit and Compliance\n```bash\nsudo tee /usr/local/bin/gitlab-security-audit.sh > /dev/null <<'EOF'\n#!/bin/bash\nAUDIT_LOG=\"/var/log/gitlab-security-audit.log\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${AUDIT_LOG}\n}\n\nlog_message \"Starting GitLab security audit...\"\n\n# Check user accounts with admin privileges\nADMIN_USERS=$(gitlab-rails runner \"puts User.admins.count\")\nlog_message \"ℹ ${ADMIN_USERS} users with admin privileges\"\n\n# Check for users without 2FA\nUSERS_WITHOUT_2FA=$(gitlab-rails runner \"puts User.where(two_factor_enabled: false).count\")\nlog_message \"ℹ ${USERS_WITHOUT_2FA} users without 2FA enabled\"\n\n# Check SSH key security\nWEAK_SSH_KEYS=$(gitlab-rails runner \"puts Key.where('LENGTH(key) < ?', 2048).count\")\nlog_message \"ℹ ${WEAK_SSH_KEYS} SSH keys shorter than 2048 bits\"\n\n# Check project visibility\nPUBLIC_PROJECTS=$(gitlab-rails runner \"puts Project.where(visibility_level: 20).count\")\nINTERNAL_PROJECTS=$(gitlab-rails runner \"puts Project.where(visibility_level: 10).count\")\nPRIVATE_PROJECTS=$(gitlab-rails runner \"puts Project.where(visibility_level: 0).count\")\nlog_message \"ℹ Projects - Public: ${PUBLIC_PROJECTS}, Internal: ${INTERNAL_PROJECTS}, Private: ${PRIVATE_PROJECTS}\"\n\n# Check for projects without security scanning\nPROJECTS_WITHOUT_SAST=$(gitlab-rails runner \"\nputs Project.joins(:ci_pipelines)\n  .where('ci_pipelines.created_at > ?', 30.days.ago)\n  .where.not(id: Ci::Build.joins(:pipeline).where('ci_builds.name ILIKE ?', '%sast%').select(:project_id))\n  .distinct.count\n\")\nlog_message \"ℹ ${PROJECTS_WITHOUT_SAST} active projects without SAST scanning\"\n\n# Check external integrations\nWEBHOOK_COUNT=$(gitlab-rails runner \"puts ProjectHook.count + SystemHook.count\")\nlog_message \"ℹ ${WEBHOOK_COUNT} webhooks configured\"\n\n# Check audit events (Enterprise)\nif gitlab-rails runner \"puts defined?(AuditEvent)\" | grep -q \"constant\"; then\n    RECENT_AUDIT_EVENTS=$(gitlab-rails runner \"puts AuditEvent.where('created_at > ?', 24.hours.ago).count\")\n    log_message \"ℹ ${RECENT_AUDIT_EVENTS} audit events in last 24 hours\"\nfi\n\n# Check for suspicious activity\nFAILED_LOGINS=$(grep \"Failed Login\" /var/log/gitlab/gitlab-rails/production.log | grep \"$(date +'%Y-%m-%d')\" | wc -l)\nif [ ${FAILED_LOGINS} -gt 20 ]; then\n    log_message \"⚠ ${FAILED_LOGINS} failed login attempts today\"\nelse\n    log_message \"✓ ${FAILED_LOGINS} failed login attempts today (normal)\"\nfi\n\n# Check for large file uploads\nLARGE_UPLOADS=$(find /var/opt/gitlab/git-data/repositories -type f -size +100M -mtime -7 | wc -l)\nif [ ${LARGE_UPLOADS} -gt 0 ]; then\n    log_message \"ℹ ${LARGE_UPLOADS} large files (>100MB) uploaded in last week\"\nfi\n\nlog_message \"Security audit completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-security-audit.sh\n\n# Schedule daily security audits\necho \"0 8 * * * root /usr/local/bin/gitlab-security-audit.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Check GitLab status\nsudo gitlab-ctl status\nsudo gitlab-ctl tail\n\n# Check configuration\nsudo gitlab-ctl show-config\nsudo gitlab-rake gitlab:check SANITIZE=true\n\n# Reconfigure GitLab\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\n\n# Database issues\nsudo gitlab-psql -d gitlabhq_production\nsudo gitlab-rake db:migrate:status\n\n# Redis issues\nredis-cli ping\nredis-cli info\n\n# Check logs for errors\nsudo gitlab-ctl tail gitlab-workhorse\nsudo gitlab-ctl tail unicorn\nsudo gitlab-ctl tail sidekiq\n\n# Performance issues\nsudo gitlab-rake gitlab:env:info\nsudo gitlab-ctl status | grep memory\n\n# SSL/TLS issues\nsudo gitlab-rake gitlab:check\nopenssl s_client -connect gitlab.example.com:443\n\n# Container registry issues\nsudo gitlab-ctl registry-garbage-collect\ndocker login registry.example.com\n\n# Runner connectivity issues\nsudo gitlab-runner verify\nsudo gitlab-runner list\n\n# Backup issues\ngitlab-backup create STRATEGY=copy\ngitlab-backup restore BACKUP=timestamp\n\n# Reset admin password\nsudo gitlab-rake \"gitlab:password:reset[root]\"\n\n# Check disk usage\ndf -h /var/opt/gitlab/\nsudo du -sh /var/opt/gitlab/git-data/\n\n# Memory usage analysis\nps aux --sort=-%mem | grep gitlab\ngitlab-ctl status | grep memory\n\n# Network connectivity\ncurl -I https://gitlab.example.com\ntelnet gitlab.example.com 443\n\n# Service restart order (if needed)\nsudo gitlab-ctl stop\nsudo gitlab-ctl start postgresql\nsudo gitlab-ctl start redis\nsudo gitlab-ctl start\n```\n\n### Advanced Debugging\n```bash\n# Enable debug logging\nsudo gitlab-ctl edit-config\n# Add: gitlab_rails['log_level'] = 'DEBUG'\n\nsudo gitlab-ctl reconfigure\n\n# Debug specific services\nsudo gitlab-ctl tail gitlab-workhorse\nsudo gitlab-ctl tail unicorn\nsudo gitlab-ctl tail sidekiq\nsudo gitlab-ctl tail gitaly\n\n# Database debugging\nsudo gitlab-psql -d gitlabhq_production -c \"\\l\"\nsudo gitlab-rake db:migrate:status\n\n# Git debugging\nsudo -u git gitaly-debug\nsudo gitlab-rake gitlab:gitaly:check\n\n# Performance profiling\nsudo gitlab-rake gitlab:setup\nsudo gitlab-rake gitlab:check:repos\nsudo gitlab-rake gitlab:cleanup:sessions\n\n# Container registry debugging\nsudo gitlab-ctl registry-garbage-collect -m\ndocker system df\n\n# Runner debugging\nsudo gitlab-runner --debug run\nsudo gitlab-runner exec docker test-job\n\n# Network debugging for distributed setup\nping -c 4 postgres-master.example.com\nping -c 4 redis-master.example.com\ntelnet postgres-master.example.com 5432\ntelnet redis-master.example.com 6379\n\n# Memory leak detection\npmap -x $(pgrep gitlab-workhorse)\nvalgrind --tool=memcheck --leak-check=full gitlab-workhorse\n\n# Strace for syscall analysis\nstrace -p $(pgrep gitlab-workhorse) -e trace=network,file\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.gitlab.com/)\n- [GitLab Admin Documentation](https://docs.gitlab.com/ee/administration/)\n- [Security Hardening Guide](https://docs.gitlab.com/security/hardening/)\n- [GitLab Runner Documentation](https://docs.gitlab.com/runner/)\n- [Container Registry Guide](https://docs.gitlab.com/ee/administration/packages/container_registry.html)\n- [GitLab API Documentation](https://docs.gitlab.com/ee/api/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"gitlab-installation-guide\" class=\"mobile-header\">GitLab Installation Guide</h1>\n<p class=\"mobile-paragraph\">Complete DevOps platform with Git repository management, CI/CD pipelines, issue tracking, and container registry. Enterprise-grade solution for modern software development lifecycle with advanced security features.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">8GB RAM minimum, 16GB+ recommended for production</li>\n<li class=\"mobile-list-item\">4 CPU cores minimum, 8+ recommended</li>\n<li class=\"mobile-list-item\">50GB+ available disk space, SSD recommended</li>\n<li class=\"mobile-list-item\">Domain name for external access</li>\n<li class=\"mobile-list-item\">SSL certificates for production deployment</li>\n<li class=\"mobile-list-item\">SMTP server for email notifications</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-omnibus-package-recommended\" class=\"mobile-header\">Using Omnibus Package (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo apt-get update\nsudo apt-get install -y curl openssh-server ca-certificates tzdata perl postfix\n\n# Configure Postfix for email\nsudo dpkg-reconfigure postfix\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n\n# Install GitLab Enterprise Edition\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; apt-get install -y gitlab-ee\n\n# For GitLab Community Edition\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; apt-get install -y gitlab-ce\n\n# Initial configuration\nsudo gitlab-ctl reconfigure\n\n# Check status\nsudo gitlab-ctl status</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo yum install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# For newer versions\nsudo dnf install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# Enable and start services\nsudo systemctl enable --now sshd postfix\n\n# Configure SELinux and firewall\nsudo setsebool -P httpd_can_network_connect 1\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; yum install -y gitlab-ee\n\n# Configure and start\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo dnf install -y curl policycoreutils-python-utils openssh-server perl postfix\n\n# Enable services\nsudo systemctl enable --now sshd postfix\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# Add GitLab repository\ncurl -fsSL https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.rpm.sh | sudo bash\n\n# Install GitLab\nsudo EXTERNAL_URL=&quot;https://gitlab.example.com&quot; dnf install -y gitlab-ee\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation-single-container\" class=\"mobile-header\">Docker Installation (Single Container)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create GitLab directories\nsudo mkdir -p /srv/gitlab/{config,logs,data}\n\n# Set environment variables\nexport GITLAB_HOME=/srv/gitlab\n\n# Run GitLab container with comprehensive configuration\nsudo docker run --detach \\\n  --hostname gitlab.example.com \\\n  --env GITLAB_OMNIBUS_CONFIG=&quot;\n    external_url &#039;https://gitlab.example.com&#039;;\n    gitlab_rails[&#039;gitlab_shell_ssh_port&#039;] = 2222;\n    \n    # SSL configuration\n    nginx[&#039;ssl_certificate&#039;] = &#039;/etc/gitlab/ssl/gitlab.crt&#039;;\n    nginx[&#039;ssl_certificate_key&#039;] = &#039;/etc/gitlab/ssl/gitlab.key&#039;;\n    nginx[&#039;ssl_protocols&#039;] = &#039;TLSv1.2 TLSv1.3&#039;;\n    nginx[&#039;ssl_prefer_server_ciphers&#039;] = &#039;off&#039;;\n    \n    # Security settings\n    gitlab_rails[&#039;rack_attack_git_basic_auth&#039;] = {\n      &#039;enabled&#039; =&gt; true,\n      &#039;ip_whitelist&#039; =&gt; [&#039;127.0.0.1&#039;, &#039;192.168.1.0/24&#039;],\n      &#039;maxretry&#039; =&gt; 10,\n      &#039;findtime&#039; =&gt; 60,\n      &#039;bantime&#039; =&gt; 3600\n    };\n    \n    # Performance settings\n    postgresql[&#039;shared_preload_libraries&#039;] = &#039;pg_stat_statements&#039;;\n    postgresql[&#039;max_connections&#039;] = 200;\n    postgresql[&#039;shared_buffers&#039;] = &#039;1GB&#039;;\n    postgresql[&#039;effective_cache_size&#039;] = &#039;4GB&#039;;\n    \n    # Container Registry\n    registry_external_url &#039;https://registry.example.com&#039;;\n    gitlab_rails[&#039;registry_enabled&#039;] = true;\n    \n    # Monitoring\n    prometheus_monitoring[&#039;enable&#039;] = true;\n    grafana[&#039;enable&#039;] = true;\n    grafana[&#039;admin_password&#039;] = &#039;secure_grafana_password&#039;;\n    \n    # Email configuration\n    gitlab_rails[&#039;smtp_enable&#039;] = true;\n    gitlab_rails[&#039;smtp_address&#039;] = &#039;smtp.example.com&#039;;\n    gitlab_rails[&#039;smtp_port&#039;] = 587;\n    gitlab_rails[&#039;smtp_user_name&#039;] = &#039;gitlab@example.com&#039;;\n    gitlab_rails[&#039;smtp_password&#039;] = &#039;smtp_secure_password&#039;;\n    gitlab_rails[&#039;smtp_domain&#039;] = &#039;example.com&#039;;\n    gitlab_rails[&#039;smtp_authentication&#039;] = &#039;login&#039;;\n    gitlab_rails[&#039;smtp_enable_starttls_auto&#039;] = true;\n    gitlab_rails[&#039;smtp_tls&#039;] = false;\n    gitlab_rails[&#039;smtp_openssl_verify_mode&#039;] = &#039;peer&#039;;\n    \n    # Email settings\n    gitlab_rails[&#039;gitlab_email_from&#039;] = &#039;gitlab@example.com&#039;;\n    gitlab_rails[&#039;gitlab_email_display_name&#039;] = &#039;GitLab&#039;;\n    \n    # Backup configuration\n    gitlab_rails[&#039;backup_keep_time&#039;] = 604800;\n    gitlab_rails[&#039;backup_upload_connection&#039;] = {\n      &#039;provider&#039; =&gt; &#039;AWS&#039;,\n      &#039;region&#039; =&gt; &#039;us-west-2&#039;,\n      &#039;aws_access_key_id&#039; =&gt; &#039;backup_access_key&#039;,\n      &#039;aws_secret_access_key&#039; =&gt; &#039;backup_secret_key&#039;\n    };\n    gitlab_rails[&#039;backup_upload_remote_directory&#039;] = &#039;gitlab-backups&#039;;\n    &quot; \\\n  --publish 443:443 --publish 80:80 --publish 2222:22 \\\n  --name gitlab \\\n  --restart unless-stopped \\\n  --volume $GITLAB_HOME/config:/etc/gitlab \\\n  --volume $GITLAB_HOME/logs:/var/log/gitlab \\\n  --volume $GITLAB_HOME/data:/var/opt/gitlab \\\n  --shm-size 256m \\\n  gitlab/gitlab-ee:latest</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-compose-production-setup\" class=\"mobile-header\">Docker Compose (Production Setup)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">mkdir -p ~/gitlab-stack\ncd ~/gitlab-stack\n\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  gitlab:\n    image: gitlab/gitlab-ee:latest\n    container_name: gitlab\n    restart: unless-stopped\n    hostname: gitlab.example.com\n    environment:\n      GITLAB_OMNIBUS_CONFIG: |\n        external_url &#039;https://gitlab.example.com&#039;\n        \n        # Performance settings\n        postgresql[&#039;shared_buffers&#039;] = &quot;2GB&quot;\n        postgresql[&#039;effective_cache_size&#039;] = &quot;8GB&quot;\n        postgresql[&#039;max_connections&#039;] = 300\n        \n        # Security settings\n        gitlab_rails[&#039;rack_attack_git_basic_auth&#039;] = {\n          &#039;enabled&#039; =&gt; true,\n          &#039;ip_whitelist&#039; =&gt; [&#039;127.0.0.1&#039;, &#039;10.0.0.0/8&#039;, &#039;172.16.0.0/12&#039;, &#039;192.168.0.0/16&#039;],\n          &#039;maxretry&#039; =&gt; 10,\n          &#039;findtime&#039; =&gt; 60,\n          &#039;bantime&#039; =&gt; 3600\n        }\n        \n        # Container Registry\n        registry_external_url &#039;https://registry.example.com&#039;\n        gitlab_rails[&#039;registry_enabled&#039;] = true\n        \n        # Monitoring\n        prometheus_monitoring[&#039;enable&#039;] = true\n        grafana[&#039;enable&#039;] = true\n        \n        # Let&#039;s Encrypt (disable for reverse proxy setup)\n        letsencrypt[&#039;enable&#039;] = false\n        nginx[&#039;listen_port&#039;] = 80\n        nginx[&#039;listen_https&#039;] = false\n        \n        # GitLab Pages\n        pages_external_url &quot;https://pages.example.com&quot;\n        gitlab_pages[&#039;enable&#039;] = true\n    ports:\n      - &#039;80:80&#039;\n      - &#039;443:443&#039;\n      - &#039;2222:22&#039;\n    volumes:\n      - &#039;./config:/etc/gitlab&#039;\n      - &#039;./logs:/var/log/gitlab&#039;\n      - &#039;./data:/var/opt/gitlab&#039;\n    networks:\n      - gitlab\n    shm_size: &#039;256m&#039;\n    healthcheck:\n      test: [&quot;CMD-SHELL&quot;, &quot;gitlab-healthcheck --fail --max-time 10&quot;]\n      interval: 60s\n      timeout: 30s\n      retries: 5\n      start_period: 200s\n\n  gitlab-runner:\n    image: gitlab/gitlab-runner:latest\n    container_name: gitlab-runner\n    restart: unless-stopped\n    volumes:\n      - &#039;./runner-config:/etc/gitlab-runner&#039;\n      - &#039;/var/run/docker.sock:/var/run/docker.sock&#039;\n    networks:\n      - gitlab\n    depends_on:\n      - gitlab\n\n  redis:\n    image: redis:7-alpine\n    container_name: gitlab-redis\n    restart: unless-stopped\n    command: redis-server --appendonly yes --requirepass redis_secure_password\n    volumes:\n      - redis-data:/data\n    networks:\n      - gitlab\n\n  nginx:\n    image: nginx:alpine\n    container_name: gitlab-nginx\n    restart: unless-stopped\n    ports:\n      - &#039;443:443&#039;\n    volumes:\n      - &#039;./nginx/nginx.conf:/etc/nginx/nginx.conf:ro&#039;\n      - &#039;./nginx/ssl:/etc/nginx/ssl:ro&#039;\n    depends_on:\n      - gitlab\n    networks:\n      - gitlab\n\nnetworks:\n  gitlab:\n    driver: bridge\n\nvolumes:\n  redis-data:\nEOF\n\n# Create NGINX reverse proxy configuration\nmkdir -p nginx\ncat &gt; nginx/nginx.conf &lt;&lt;EOF\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    upstream gitlab {\n        server gitlab:80;\n    }\n    \n    upstream registry {\n        server gitlab:5000;\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name gitlab.example.com;\n\n        ssl_certificate /etc/nginx/ssl/gitlab.crt;\n        ssl_certificate_key /etc/nginx/ssl/gitlab.key;\n        ssl_protocols TLSv1.2 TLSv1.3;\n        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n\n        client_max_body_size 0;\n        gzip off;\n\n        location / {\n            proxy_pass http://gitlab;\n            proxy_set_header Host \\$host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n        }\n    }\n\n    server {\n        listen 443 ssl http2;\n        server_name registry.example.com;\n\n        ssl_certificate /etc/nginx/ssl/registry.crt;\n        ssl_certificate_key /etc/nginx/ssl/registry.key;\n\n        client_max_body_size 0;\n\n        location /v2/ {\n            proxy_pass http://registry;\n            proxy_set_header Host \\$host;\n            proxy_set_header X-Real-IP \\$remote_addr;\n            proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto \\$scheme;\n        }\n    }\n}\nEOF\n\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"enterprise-configuration\" class=\"mobile-header\">Enterprise Configuration</h2>\n<h3 id=\"production-configuration-etcgitlabgitlabrb\" class=\"mobile-header\">Production Configuration (/etc/gitlab/gitlab.rb)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n# GitLab Enterprise Production Configuration\n\nexternal_url &#039;https://gitlab.example.com&#039;\n\n# Performance and Resource Settings\nunicorn[&#039;worker_timeout&#039;] = 60\nunicorn[&#039;worker_processes&#039;] = 8\nsidekiq[&#039;max_concurrency&#039;] = 25\nsidekiq[&#039;min_concurrency&#039;] = 10\n\n# PostgreSQL configuration\npostgresql[&#039;enable&#039;] = true\npostgresql[&#039;max_connections&#039;] = 300\npostgresql[&#039;shared_buffers&#039;] = &quot;2GB&quot;\npostgresql[&#039;effective_cache_size&#039;] = &quot;8GB&quot;\npostgresql[&#039;work_mem&#039;] = &quot;16MB&quot;\npostgresql[&#039;maintenance_work_mem&#039;] = &quot;256MB&quot;\npostgresql[&#039;checkpoint_completion_target&#039;] = 0.9\npostgresql[&#039;wal_buffers&#039;] = &quot;16MB&quot;\npostgresql[&#039;default_statistics_target&#039;] = 100\npostgresql[&#039;random_page_cost&#039;] = 1.1\npostgresql[&#039;effective_io_concurrency&#039;] = 200\n\n# Redis configuration\nredis[&#039;enable&#039;] = true\nredis[&#039;maxmemory&#039;] = &quot;1gb&quot;\nredis[&#039;maxmemory_policy&#039;] = &quot;allkeys-lru&quot;\nredis[&#039;save&#039;] = &#039;900 1 300 10 60 10000&#039;\nredis[&#039;password&#039;] = &#039;redis_secure_password&#039;\n\n# Gitaly configuration (Git RPC service)\ngitaly[&#039;enable&#039;] = true\ngitaly[&#039;auth_token&#039;] = &#039;secure_gitaly_token&#039;\ngitaly[&#039;ruby_max_rss&#039;] = 300000000  # 300MB\ngitaly[&#039;concurrency&#039;] = [\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SmartHTTPService/PostReceivePack&quot;,\n    &#039;max_per_repo&#039; =&gt; 3\n  },\n  {\n    &#039;rpc&#039; =&gt; &quot;/gitaly.SSHService/SSHUploadPack&quot;, \n    &#039;max_per_repo&#039; =&gt; 3\n  }\n]\n\n# NGINX configuration\nnginx[&#039;enable&#039;] = true\nnginx[&#039;listen_port&#039;] = 80\nnginx[&#039;listen_https&#039;] = false\nnginx[&#039;redirect_http_to_https&#039;] = false\nnginx[&#039;ssl_certificate&#039;] = &quot;/etc/gitlab/ssl/gitlab.crt&quot;\nnginx[&#039;ssl_certificate_key&#039;] = &quot;/etc/gitlab/ssl/gitlab.key&quot;\nnginx[&#039;ssl_protocols&#039;] = &quot;TLSv1.2 TLSv1.3&quot;\nnginx[&#039;ssl_prefer_server_ciphers&#039;] = &quot;off&quot;\nnginx[&#039;ssl_ciphers&#039;] = &quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384&quot;\n\n# Container Registry\nregistry_external_url &#039;https://registry.example.com&#039;\ngitlab_rails[&#039;registry_enabled&#039;] = true\nregistry[&#039;enable&#039;] = true\nregistry[&#039;username&#039;] = &quot;registry&quot;\nregistry[&#039;uid&#039;] = 996\nregistry[&#039;gid&#039;] = 996\nregistry[&#039;dir&#039;] = &quot;/var/opt/gitlab/registry&quot;\nregistry[&#039;log_directory&#039;] = &quot;/var/log/gitlab/registry&quot;\nregistry[&#039;log_level&#039;] = &quot;info&quot;\nregistry[&#039;rootcertbundle&#039;] = &quot;/opt/gitlab/embedded/ssl/certs/cacert.pem&quot;\n\n# GitLab Pages\npages_external_url &quot;https://pages.example.com&quot;\ngitlab_pages[&#039;enable&#039;] = true\ngitlab_pages[&#039;dir&#039;] = &quot;/var/opt/gitlab/gitlab-pages&quot;\ngitlab_pages[&#039;log_directory&#039;] = &quot;/var/log/gitlab/gitlab-pages&quot;\ngitlab_pages[&#039;access_control&#039;] = true\ngitlab_pages[&#039;use_legacy_storage&#039;] = false\n\n# Email configuration\ngitlab_rails[&#039;smtp_enable&#039;] = true\ngitlab_rails[&#039;smtp_address&#039;] = &quot;smtp.example.com&quot;\ngitlab_rails[&#039;smtp_port&#039;] = 587\ngitlab_rails[&#039;smtp_user_name&#039;] = &quot;gitlab@example.com&quot;\ngitlab_rails[&#039;smtp_password&#039;] = &quot;smtp_secure_password&quot;\ngitlab_rails[&#039;smtp_domain&#039;] = &quot;example.com&quot;\ngitlab_rails[&#039;smtp_authentication&#039;] = &quot;login&quot;\ngitlab_rails[&#039;smtp_enable_starttls_auto&#039;] = true\ngitlab_rails[&#039;smtp_tls&#039;] = false\ngitlab_rails[&#039;smtp_openssl_verify_mode&#039;] = &#039;peer&#039;\n\ngitlab_rails[&#039;gitlab_email_enabled&#039;] = true\ngitlab_rails[&#039;gitlab_email_from&#039;] = &#039;gitlab@example.com&#039;\ngitlab_rails[&#039;gitlab_email_display_name&#039;] = &#039;GitLab&#039;\ngitlab_rails[&#039;gitlab_email_reply_to&#039;] = &#039;noreply@example.com&#039;\n\n# Security settings\ngitlab_rails[&#039;rack_attack_git_basic_auth&#039;] = {\n  &#039;enabled&#039; =&gt; true,\n  &#039;ip_whitelist&#039; =&gt; %w{127.0.0.1 192.168.1.0/24 10.0.0.0/8},\n  &#039;maxretry&#039; =&gt; 10,\n  &#039;findtime&#039; =&gt; 60,\n  &#039;bantime&#039; =&gt; 3600\n}\n\n# Two-factor authentication\ngitlab_rails[&#039;require_two_factor_authentication&#039;] = false\ngitlab_rails[&#039;two_factor_grace_period&#039;] = 8  # 8 hours instead of default 48\n\n# Session settings\ngitlab_rails[&#039;session_expire_delay&#039;] = 10080  # 1 week\ngitlab_rails[&#039;session_store_enabled&#039;] = true\n\n# Backup configuration\ngitlab_rails[&#039;backup_keep_time&#039;] = 604800  # 7 days\ngitlab_rails[&#039;backup_upload_connection&#039;] = {\n  &#039;provider&#039; =&gt; &#039;AWS&#039;,\n  &#039;region&#039; =&gt; &#039;us-west-2&#039;,\n  &#039;aws_access_key_id&#039; =&gt; &#039;backup_access_key&#039;,\n  &#039;aws_secret_access_key&#039; =&gt; &#039;backup_secret_key&#039;\n}\ngitlab_rails[&#039;backup_upload_remote_directory&#039;] = &#039;gitlab-backups&#039;\ngitlab_rails[&#039;backup_multipart_chunk_size&#039;] = 104857600  # 100MB\n\n# Monitoring\nprometheus_monitoring[&#039;enable&#039;] = true\nprometheus[&#039;enable&#039;] = true\nprometheus[&#039;listen_address&#039;] = &#039;localhost:9090&#039;\nprometheus[&#039;scrape_configs&#039;] = [\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-workhorse&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:9229&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-unicorn&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8080&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-sidekiq&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8082&#039;] }\n    ]\n  }\n]\n\ngrafana[&#039;enable&#039;] = true\ngrafana[&#039;admin_password&#039;] = &#039;secure_grafana_password&#039;\ngrafana[&#039;disable_login_form&#039;] = false\n\n# Logging\nlogging[&#039;svlogd_size&#039;] = 200 * 1024 * 1024  # 200MB\nlogging[&#039;svlogd_num&#039;] = 30\nlogging[&#039;svlogd_timeout&#039;] = 24 * 60 * 60    # rotate after 24 hours\nlogging[&#039;logrotate_frequency&#039;] = &quot;daily&quot;\nlogging[&#039;logrotate_rotate&#039;] = 30\nlogging[&#039;logrotate_compress&#039;] = &quot;compress&quot;\n\n# Git settings\ngitlab_rails[&#039;gitlab_default_branch&#039;] = &#039;main&#039;\ngitlab_rails[&#039;max_request_duration_seconds&#039;] = 60\n\n# Rate limiting\ngitlab_rails[&#039;rate_limit_requests_per_period&#039;] = 300\ngitlab_rails[&#039;rate_limit_period&#039;] = 60\n\n# Enterprise features (if using GitLab EE)\n# gitlab_rails[&#039;ee_license&#039;] = File.read(&#039;/etc/gitlab/GitLab.gitlab-license&#039;)\n\n# Security scanning\ngitlab_rails[&#039;dependency_scanning_enabled&#039;] = true\ngitlab_rails[&#039;container_scanning_enabled&#039;] = true\ngitlab_rails[&#039;sast_enabled&#039;] = true\ngitlab_rails[&#039;secret_detection_enabled&#039;] = true\n\n# LDAP configuration (Enterprise)\ngitlab_rails[&#039;ldap_enabled&#039;] = false\ngitlab_rails[&#039;prevent_ldap_sign_in&#039;] = false\ngitlab_rails[&#039;ldap_servers&#039;] = {\n  &#039;main&#039; =&gt; {\n    &#039;label&#039; =&gt; &#039;LDAP&#039;,\n    &#039;host&#039; =&gt; &#039;ldap.example.com&#039;,\n    &#039;port&#039; =&gt; 636,\n    &#039;uid&#039; =&gt; &#039;sAMAccountName&#039;,\n    &#039;bind_dn&#039; =&gt; &#039;CN=gitlab,OU=Service Accounts,DC=example,DC=com&#039;,\n    &#039;password&#039; =&gt; &#039;ldap_service_password&#039;,\n    &#039;encryption&#039; =&gt; &#039;ssl&#039;,\n    &#039;verify_certificates&#039; =&gt; true,\n    &#039;ca_file&#039; =&gt; &#039;/etc/gitlab/ssl/ldap-ca.crt&#039;,\n    &#039;base&#039; =&gt; &#039;DC=example,DC=com&#039;,\n    &#039;user_filter&#039; =&gt; &#039;&#039;,\n    &#039;attributes&#039; =&gt; {\n      &#039;username&#039; =&gt; [&#039;uid&#039;, &#039;userid&#039;, &#039;sAMAccountName&#039;],\n      &#039;email&#039; =&gt; [&#039;mail&#039;, &#039;email&#039;, &#039;userPrincipalName&#039;],\n      &#039;name&#039; =&gt; &#039;cn&#039;,\n      &#039;first_name&#039; =&gt; &#039;givenName&#039;,\n      &#039;last_name&#039; =&gt; &#039;sn&#039;\n    },\n    &#039;group_base&#039; =&gt; &#039;OU=Groups,DC=example,DC=com&#039;,\n    &#039;admin_group&#039; =&gt; &#039;GitLab Administrators&#039;\n  }\n}\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening-2024-best-practices\" class=\"mobile-header\">Security Hardening (2024 Best Practices)</h2>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo mkdir -p /etc/gitlab/ssl\n\n# Self-signed certificate for testing\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/gitlab/ssl/gitlab.key \\\n  -out /etc/gitlab/ssl/gitlab.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=gitlab.example.com&quot;\n\n# Production: Let&#039;s Encrypt integration\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Let&#039;s Encrypt configuration\nletsencrypt[&#039;enable&#039;] = true\nletsencrypt[&#039;contact_emails&#039;] = [&#039;admin@example.com&#039;]\nletsencrypt[&#039;auto_renew&#039;] = true\nletsencrypt[&#039;auto_renew_hour&#039;] = 0\nletsencrypt[&#039;auto_renew_minute&#039;] = 0\nletsencrypt[&#039;auto_renew_day_of_month&#039;] = &quot;*/4&quot;\n\n# Force HTTPS\nnginx[&#039;redirect_http_to_https&#039;] = true\nnginx[&#039;ssl_protocols&#039;] = &quot;TLSv1.2 TLSv1.3&quot;\nnginx[&#039;ssl_prefer_server_ciphers&#039;] = &quot;off&quot;\nnginx[&#039;ssl_ciphers&#039;] = &quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384&quot;\n\n# HSTS\nnginx[&#039;hsts_max_age&#039;] = 31536000\nnginx[&#039;hsts_include_subdomains&#039;] = true\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-configuration\" class=\"mobile-header\">Advanced Security Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure security settings\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Security hardening\ngitlab_rails[&#039;webhook_timeout&#039;] = 10\ngitlab_rails[&#039;webhook_max_redirects&#039;] = 3\n\n# Disable password authentication (use SSO/LDAP)\ngitlab_rails[&#039;omniauth_allow_single_sign_on&#039;] = [&#039;saml&#039;, &#039;ldapmain&#039;]\ngitlab_rails[&#039;omniauth_block_auto_created_users&#039;] = false\ngitlab_rails[&#039;omniauth_auto_sign_in_with_provider&#039;] = &#039;saml&#039;\n\n# API rate limiting\ngitlab_rails[&#039;rate_limit_requests_per_period&#039;] = 1000\ngitlab_rails[&#039;rate_limit_period&#039;] = 60\n\n# Git over HTTP rate limiting\ngitlab_rails[&#039;rack_attack_git_basic_auth&#039;] = {\n  &#039;enabled&#039; =&gt; true,\n  &#039;ip_whitelist&#039; =&gt; %w{127.0.0.1 192.168.1.0/24},\n  &#039;maxretry&#039; =&gt; 20,\n  &#039;findtime&#039; =&gt; 60,\n  &#039;bantime&#039; =&gt; 3600\n}\n\n# Protected paths\ngitlab_rails[&#039;rack_attack_protected_paths&#039;] = [\n  &#039;/users/password&#039;,\n  &#039;/users/sign_in&#039;,\n  &#039;/api/v4/session.json&#039;,\n  &#039;/api/v4/session&#039;,\n  &#039;/users/confirmation&#039;,\n  &#039;/unsubscribes/&#039;,\n  &#039;/import/github/personal_access_token&#039;,\n  &#039;/admin/session&#039;\n]\n\n# SSH security\ngitlab_rails[&#039;gitlab_shell_ssh_port&#039;] = 2222\ngitlab_shell[&#039;auth_file&#039;] = &quot;/var/opt/gitlab/.ssh/authorized_keys&quot;\n\n# Container Registry security\nregistry[&#039;notifications&#039;] = [\n  {\n    &#039;name&#039; =&gt; &#039;security_scan&#039;,\n    &#039;url&#039; =&gt; &#039;https://security-scanner.example.com/webhook&#039;,\n    &#039;timeout&#039; =&gt; &#039;2000ms&#039;,\n    &#039;threshold&#039; =&gt; 3,\n    &#039;backoff&#039; =&gt; &#039;1000ms&#039;\n  }\n]\n\n# Secrets management\ngitlab_rails[&#039;db_password&#039;] = File.read(&#039;/etc/gitlab/secrets/db_password&#039;).strip\ngitlab_rails[&#039;secret_key_base&#039;] = File.read(&#039;/etc/gitlab/secrets/secret_key_base&#039;).strip\ngitlab_rails[&#039;otp_key_base&#039;] = File.read(&#039;/etc/gitlab/secrets/otp_key_base&#039;).strip\ngitlab_rails[&#039;encrypted_settings_key_base&#039;] = File.read(&#039;/etc/gitlab/secrets/encrypted_settings_key_base&#039;).strip\n\n# Audit logging\ngitlab_rails[&#039;audit_events_enabled&#039;] = true\n\n# Disable features that increase attack surface\ngitlab_rails[&#039;usage_ping_enabled&#039;] = false\ngitlab_rails[&#039;sentry_enabled&#039;] = false\nEOF\n\n# Create secrets directory and files\nsudo mkdir -p /etc/gitlab/secrets\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/db_password\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/secret_key_base\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/otp_key_base\nsudo openssl rand -base64 64 | sudo tee /etc/gitlab/secrets/encrypted_settings_key_base\n\n# Secure permissions\nsudo chmod 600 /etc/gitlab/secrets/*\nsudo chown git:git /etc/gitlab/secrets/*\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-runner-security-configuration\" class=\"mobile-header\">GitLab Runner Security Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure runner configuration\nsudo mkdir -p /etc/gitlab-runner\n\nsudo tee /etc/gitlab-runner/config.toml &gt; /dev/null &lt;&lt;EOF\nconcurrent = 4\ncheck_interval = 0\nshutdown_timeout = 0\n\n[session_server]\n  session_timeout = 1800\n\n[[runners]]\n  name = &quot;docker-runner-secure&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;runner_registration_token&quot;\n  executor = &quot;docker&quot;\n  \n  # Security settings\n  pre_clone_script = &quot;echo &#039;Starting secure build&#039;&quot;\n  pre_build_script = &quot;echo &#039;Preparing secure environment&#039;&quot;\n  post_build_script = &quot;echo &#039;Cleaning up secure environment&#039;&quot;\n  \n  [runners.docker]\n    tls_verify = false\n    image = &quot;alpine:latest&quot;\n    privileged = false  # Critical: Never use privileged mode\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [&quot;/cache&quot;, &quot;/certs/client&quot;]\n    shm_size = 0\n    network_mode = &quot;bridge&quot;\n    \n    # Security restrictions\n    cap_drop = [&quot;ALL&quot;]\n    cap_add = [&quot;CHOWN&quot;, &quot;SETGID&quot;, &quot;SETUID&quot;]\n    security_opt = [&quot;no-new-privileges:true&quot;]\n    \n    # Resource limits\n    memory = &quot;2g&quot;\n    memory_swap = &quot;2g&quot;\n    memory_reservation = &quot;1g&quot;\n    cpus = &quot;1.5&quot;\n    \n    # Network security\n    dns = [&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;]\n    extra_hosts = [&quot;gitlab.example.com:192.168.1.100&quot;]\n    \n    # Image scanning\n    pull_policy = [&quot;if-not-present&quot;]\n    \n  [runners.docker.tmpfs]\n    &quot;/tmp&quot; = &quot;rw,noexec,nosuid,size=100m&quot;\n    &quot;/var/tmp&quot; = &quot;rw,noexec,nosuid,size=100m&quot;\n\n# Kubernetes executor (more secure)\n[[runners]]\n  name = &quot;k8s-runner-secure&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;k8s_runner_token&quot;\n  executor = &quot;kubernetes&quot;\n  \n  [runners.kubernetes]\n    host = &quot;https://k8s.example.com:6443&quot;\n    namespace = &quot;gitlab-runner&quot;\n    privileged = false  # Never use privileged\n    image = &quot;alpine:latest&quot;\n    \n    # Security context\n    run_as_user = 1000\n    run_as_group = 1000\n    fs_group = 1000\n    \n    # Resource limits\n    memory_limit = &quot;2Gi&quot;\n    memory_request = &quot;1Gi&quot;\n    cpu_limit = &quot;1000m&quot;\n    cpu_request = &quot;500m&quot;\n    \n    # Security policies\n    [runners.kubernetes.pod_security_context]\n      run_as_non_root = true\n      run_as_user = 1000\n      run_as_group = 1000\n      fs_group = 1000\n      \n    [[runners.kubernetes.volumes.empty_dir]]\n      name = &quot;tmp&quot;\n      mount_path = &quot;/tmp&quot;\n      medium = &quot;Memory&quot;\nEOF\n\n# Register runner with security tags\nsudo gitlab-runner register \\\n  --url &quot;https://gitlab.example.com/&quot; \\\n  --registration-token &quot;RUNNER_TOKEN&quot; \\\n  --description &quot;secure-docker-runner&quot; \\\n  --tag-list &quot;docker,secure,production&quot; \\\n  --run-untagged=&quot;false&quot; \\\n  --locked=&quot;true&quot; \\\n  --access-level=&quot;ref_protected&quot; \\\n  --executor &quot;docker&quot; \\\n  --docker-image alpine:latest \\\n  --docker-privileged=&quot;false&quot; \\\n  --docker-volumes &quot;/certs/client&quot;\n\nsudo systemctl enable --now gitlab-runner</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-pipeline-security\" class=\"mobile-header\">CI/CD Pipeline Security</h2>\n<h3 id=\"secure-pipeline-configuration\" class=\"mobile-header\">Secure Pipeline Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create .gitlab-ci.yml with security best practices\ncat &gt; .gitlab-ci.yml &lt;&lt;EOF\n# GitLab CI/CD Security Best Practices - 2024\n\nstages:\n  - security-scan\n  - test\n  - build\n  - security-test\n  - deploy\n\nvariables:\n  # Security variables\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: &quot;/certs&quot;\n  SECURE_LOG_LEVEL: info\n  \n  # Use protected variables for sensitive data\n  # DEPLOY_TOKEN: (set in GitLab UI as protected variable)\n  # AWS_ACCESS_KEY: (set in GitLab UI as protected variable)\n\n# Security scanning stage\nsecret-detection:\n  stage: security-scan\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/secrets:latest\n  script:\n    - echo &quot;Scanning for secrets in code...&quot;\n    - /analyzer run\n  artifacts:\n    reports:\n      secret_detection: gl-secret-detection-report.json\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH&#039;\n  tags:\n    - secure\n\ndependency-scanning:\n  stage: security-scan  \n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/gemnasium:latest\n  script:\n    - echo &quot;Scanning dependencies for vulnerabilities...&quot;\n    - /analyzer run\n  artifacts:\n    reports:\n      dependency_scanning: gl-dependency-scanning-report.json\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH&#039;\n  tags:\n    - secure\n\nsast:\n  stage: security-scan\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/sobelow:latest\n  script:\n    - echo &quot;Static application security testing...&quot;\n    - /analyzer run\n  artifacts:\n    reports:\n      sast: gl-sast-report.json\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH&#039;\n  tags:\n    - secure\n\n# Container scanning\ncontainer-scanning:\n  stage: security-test\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/klar:latest\n  script:\n    - echo &quot;Scanning container image for vulnerabilities...&quot;\n    - /analyzer run\n  artifacts:\n    reports:\n      container_scanning: gl-container-scanning-report.json\n  dependencies:\n    - build\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH&#039;\n  tags:\n    - secure\n\n# Secure build stage\nbuild:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  before_script:\n    # Verify image signatures\n    - echo &quot;Verifying base image integrity...&quot;\n    - docker trust inspect alpine:latest\n  script:\n    - echo &quot;Building application with security scanning...&quot;\n    - docker build -t \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA .\n    - docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n    - docker login -u \\$CI_REGISTRY_USER -p \\$CI_REGISTRY_PASSWORD \\$CI_REGISTRY\n    - docker push \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == &quot;main&quot;&#039;\n  tags:\n    - secure\n\n# Secure deployment\ndeploy-production:\n  stage: deploy\n  image: alpine:latest\n  before_script:\n    # Install kubectl and verify cluster connectivity\n    - apk add --no-cache curl\n    - curl -LO &quot;https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl&quot;\n    - chmod +x kubectl &amp;&amp; mv kubectl /usr/local/bin/\n    - kubectl config use-context production-cluster\n    - kubectl auth can-i create deployments --namespace=production\n  script:\n    - echo &quot;Deploying to production with security validations...&quot;\n    - kubectl apply -f k8s/production/ --namespace=production\n    - kubectl rollout status deployment/app --namespace=production --timeout=300s\n  environment:\n    name: production\n    url: https://app.example.com\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == &quot;main&quot;&#039;\n      when: manual\n  only:\n    variables:\n      - \\$CI_COMMIT_REF_PROTECTED == &quot;true&quot;\n  tags:\n    - secure\n    - production\n\n# Security compliance check\ncompliance-check:\n  stage: security-test\n  image: alpine:latest\n  script:\n    - echo &quot;Running compliance checks...&quot;\n    - apk add --no-cache curl jq\n    - |\n      # Check for required security labels in Docker images\n      if ! docker inspect \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA | jq -r &#039;.[].Config.Labels[&quot;security.scan&quot;]&#039; | grep -q &quot;passed&quot;; then\n        echo &quot;ERROR: Image failed security scan&quot;\n        exit 1\n      fi\n    - echo &quot;Compliance check passed&quot;\n  dependencies:\n    - container-scanning\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == &quot;main&quot;&#039;\n  tags:\n    - secure\n\n# Infrastructure as Code scanning\niac-scanning:\n  stage: security-scan\n  image: bridgecrew/checkov:latest\n  script:\n    - checkov --framework terraform --framework kubernetes --framework dockerfile\n  artifacts:\n    reports:\n      junit: checkov-report.xml\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH&#039;\n      changes:\n        - &quot;**/*.tf&quot;\n        - &quot;**/*.yml&quot;\n        - &quot;**/*.yaml&quot;\n        - &quot;**/Dockerfile*&quot;\n  tags:\n    - secure\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"rbac-and-access-control\" class=\"mobile-header\">RBAC and Access Control</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure GitLab RBAC via API\nGITLAB_URL=&quot;https://gitlab.example.com&quot;\nADMIN_TOKEN=&quot;your_admin_token&quot;\n\n# Create groups with specific permissions\ncurl --request POST --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --data &quot;name=developers&amp;path=developers&amp;description=Development team&amp;visibility=private&quot; \\\n  &quot;${GITLAB_URL}/api/v4/groups&quot;\n\ncurl --request POST --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --data &quot;name=security-team&amp;path=security-team&amp;description=Security team&amp;visibility=private&quot; \\\n  &quot;${GITLAB_URL}/api/v4/groups&quot;\n\n# Create projects with security templates\ncurl --request POST --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --data &quot;name=secure-app&amp;description=Secure application&amp;visibility=private&amp;issues_enabled=true&amp;merge_requests_enabled=true&amp;wiki_enabled=false&amp;builds_enabled=true&amp;snippets_enabled=false&amp;container_registry_enabled=true&amp;shared_runners_enabled=false&quot; \\\n  &quot;${GITLAB_URL}/api/v4/projects&quot;\n\n# Configure branch protection\nPROJECT_ID=&quot;1&quot;  # Replace with actual project ID\ncurl --request POST --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --data &quot;name=main&amp;code_owner_approval_required=true&amp;push_access_level=40&amp;merge_access_level=40&amp;unprotect_access_level=40&quot; \\\n  &quot;${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/protected_branches&quot;\n\n# Configure push rules (Premium/Ultimate)\ncurl --request POST --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --data &quot;deny_delete_tag=true&amp;member_check=true&amp;prevent_secrets=true&amp;author_email_regex=.*@example.com&amp;file_extension_restriction=jar,exe&amp;max_file_size=100&quot; \\\n  &quot;${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/push_rule&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"vulnerability-scanning-integration\" class=\"mobile-header\">Vulnerability Scanning Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure dependency proxy for secure image caching\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Dependency Proxy for secure image caching\ngitlab_rails[&#039;dependency_proxy_enabled&#039;] = true\ngitlab_rails[&#039;dependency_proxy_storage_path&#039;] = &quot;/var/opt/gitlab/gitlab-rails/shared/dependency_proxy&quot;\n\n# Security scanning\ngitlab_rails[&#039;sast_enabled&#039;] = true\ngitlab_rails[&#039;dependency_scanning_enabled&#039;] = true\ngitlab_rails[&#039;container_scanning_enabled&#039;] = true\ngitlab_rails[&#039;secret_detection_enabled&#039;] = true\ngitlab_rails[&#039;license_scanning_enabled&#039;] = true\n\n# Secure package registry\ngitlab_rails[&#039;packages_enabled&#039;] = true\ngitlab_rails[&#039;packages_storage_path&#039;] = &quot;/var/opt/gitlab/gitlab-rails/shared/packages&quot;\nEOF\n\n# Create custom security scanning templates\nmkdir -p .gitlab/ci-templates\n\ncat &gt; .gitlab/ci-templates/Security-Scanning.gitlab-ci.yml &lt;&lt;EOF\n# Custom Security Scanning Template\n\n.security-scan-template:\n  stage: security-scan\n  variables:\n    SECURE_LOG_LEVEL: info\n  before_script:\n    - echo &quot;Preparing security scan environment...&quot;\n    - apk add --no-cache curl jq\n  tags:\n    - secure\n\ncustom-sast:\n  extends: .security-scan-template\n  image: registry.gitlab.com/gitlab-org/security-products/analyzers/semgrep:latest\n  script:\n    - echo &quot;Running custom SAST analysis...&quot;\n    - /analyzer run\n  artifacts:\n    reports:\n      sast: gl-sast-report.json\n    expire_in: 1 week\n\ncustom-secrets-scan:\n  extends: .security-scan-template\n  image: trufflesecurity/trufflehog:latest\n  script:\n    - echo &quot;Scanning for secrets with TruffleHog...&quot;\n    - trufflehog git file://. --json &gt; trufflehog-report.json\n    - |\n      if [ -s trufflehog-report.json ]; then\n        echo &quot;Secrets detected!&quot;\n        cat trufflehog-report.json\n        exit 1\n      fi\n  artifacts:\n    reports:\n      secret_detection: trufflehog-report.json\n    expire_in: 1 week\n\nimage-vulnerability-scan:\n  extends: .security-scan-template\n  image: aquasec/trivy:latest\n  script:\n    - echo &quot;Scanning Docker images for vulnerabilities...&quot;\n    - trivy image --format template --template &quot;@contrib/gitlab.tpl&quot; \\$CI_REGISTRY_IMAGE:\\$CI_COMMIT_SHA\n  artifacts:\n    reports:\n      container_scanning: gl-container-scanning-report.json\n    expire_in: 1 week\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"enterprise-backup-strategy\" class=\"mobile-header\">Enterprise Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/gitlab-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/gitlab&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{omnibus,secrets,ssl,logs}\n\n# Create GitLab backup\ngitlab-backup create STRATEGY=copy SKIP=uploads,builds,artifacts,lfs,registry,pages\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/omnibus/gitlab-config-${DATE}.tar.gz \\\n    /etc/gitlab/gitlab.rb \\\n    /etc/gitlab/gitlab-secrets.json\n\n# Backup SSL certificates\ntar -czf ${BACKUP_DIR}/ssl/gitlab-ssl-${DATE}.tar.gz \\\n    /etc/gitlab/ssl/ \\\n    /etc/letsencrypt/\n\n# Backup secrets\ntar -czf ${BACKUP_DIR}/secrets/gitlab-secrets-${DATE}.tar.gz \\\n    /etc/gitlab/secrets/\n\n# Upload to multiple cloud storage backends\naws s3 cp ${BACKUP_DIR}/ s3://gitlab-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination gitlab-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://gitlab-backups/\n\n# Geo-replication backup (Enterprise)\nif command -v gitlab-rake &gt;/dev/null 2&gt;&amp;1; then\n    gitlab-rake gitlab:geo:check\n    gitlab-rake geo:status\nfi\n\n# Test backup integrity\nLATEST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar | head -1)\nif [ -n &quot;$LATEST_BACKUP&quot; ]; then\n    echo &quot;Latest backup: $LATEST_BACKUP&quot;\n    tar -tf &quot;$LATEST_BACKUP&quot; &gt; /tmp/backup-contents.txt\n    if [ $? -eq 0 ]; then\n        echo &quot;✓ Backup integrity verified&quot;\n    else\n        echo &quot;✗ Backup integrity check failed&quot;\n    fi\nfi\n\n# Keep only last 7 backups locally\nfind /var/opt/gitlab/backups/ -name &quot;*_gitlab_backup.tar&quot; -mtime +7 -delete\nfind ${BACKUP_DIR} -name &quot;gitlab-*&quot; -type f -mtime +7 -delete\n\necho &quot;GitLab backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-backup.sh\n\n# Schedule daily backups\necho &quot;0 2 * * * root /usr/local/bin/gitlab-backup.sh&quot; | sudo tee -a /etc/crontab\n\n# Create disaster recovery script\nsudo tee /usr/local/bin/gitlab-restore.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_FILE=&quot;${1}&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    echo &quot;Available backups:&quot;\n    ls -la /var/opt/gitlab/backups/*_gitlab_backup.tar\n    exit 1\nfi\n\n# Stop GitLab services\ngitlab-ctl stop unicorn\ngitlab-ctl stop puma\ngitlab-ctl stop sidekiq\n\n# Restore from backup\ngitlab-backup restore BACKUP=$(basename $BACKUP_FILE _gitlab_backup.tar) force=yes\n\n# Restore configuration\nif [ -f &quot;/backup/gitlab/omnibus/gitlab-config-latest.tar.gz&quot; ]; then\n    cd /\n    tar -xzf /backup/gitlab/omnibus/gitlab-config-latest.tar.gz\nfi\n\n# Reconfigure and restart\ngitlab-ctl reconfigure\ngitlab-ctl restart\n\n# Verify installation\ngitlab-rake gitlab:check SANITIZE=true\n\necho &quot;GitLab restore completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-restore.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure GitLab for HA with external services\nsudo tee /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n# GitLab High Availability Configuration\n\nexternal_url &#039;https://gitlab.example.com&#039;\n\n# Disable built-in services (use external)\npostgresql[&#039;enable&#039;] = false\nredis[&#039;enable&#039;] = false\nnginx[&#039;enable&#039;] = true\nunicorn[&#039;enable&#039;] = true\nsidekiq[&#039;enable&#039;] = true\ngitlab_workhorse[&#039;enable&#039;] = true\ngitaly[&#039;enable&#039;] = true\n\n# External PostgreSQL\ngitlab_rails[&#039;db_adapter&#039;] = &#039;postgresql&#039;\ngitlab_rails[&#039;db_encoding&#039;] = &#039;unicode&#039;\ngitlab_rails[&#039;db_host&#039;] = &#039;postgres-master.example.com&#039;\ngitlab_rails[&#039;db_port&#039;] = 5432\ngitlab_rails[&#039;db_database&#039;] = &#039;gitlabhq_production&#039;\ngitlab_rails[&#039;db_username&#039;] = &#039;gitlab&#039;\ngitlab_rails[&#039;db_password&#039;] = &#039;secure_db_password&#039;\ngitlab_rails[&#039;db_load_balancing&#039;] = {\n  &#039;hosts&#039; =&gt; [&#039;postgres-slave1.example.com&#039;, &#039;postgres-slave2.example.com&#039;]\n}\n\n# External Redis\ngitlab_rails[&#039;redis_host&#039;] = &#039;redis-master.example.com&#039;\ngitlab_rails[&#039;redis_port&#039;] = 6379\ngitlab_rails[&#039;redis_password&#039;] = &#039;redis_secure_password&#039;\ngitlab_rails[&#039;redis_sentinels&#039;] = [\n  {&#039;host&#039; =&gt; &#039;redis-sentinel1.example.com&#039;, &#039;port&#039; =&gt; 26379},\n  {&#039;host&#039; =&gt; &#039;redis-sentinel2.example.com&#039;, &#039;port&#039; =&gt; 26379},\n  {&#039;host&#039; =&gt; &#039;redis-sentinel3.example.com&#039;, &#039;port&#039; =&gt; 26379}\n]\n\n# Load balancing\nnginx[&#039;listen_addresses&#039;] = [&#039;0.0.0.0&#039;]\nnginx[&#039;real_ip_header&#039;] = &#039;X-Forwarded-For&#039;\nnginx[&#039;real_ip_recursive&#039;] = &#039;on&#039;\nnginx[&#039;real_ip_trusted_addresses&#039;] = [&#039;10.0.0.0/8&#039;, &#039;172.16.0.0/12&#039;, &#039;192.168.0.0/16&#039;]\n\n# Gitaly cluster (Enterprise)\ngit_data_dirs({\n  &#039;default&#039; =&gt; {\n    &#039;gitaly_address&#039; =&gt; &#039;tcp://gitaly1.example.com:8075&#039;,\n    &#039;gitaly_token&#039; =&gt; &#039;gitaly_secure_token&#039;\n  },\n  &#039;storage1&#039; =&gt; {\n    &#039;gitaly_address&#039; =&gt; &#039;tcp://gitaly2.example.com:8075&#039;,\n    &#039;gitaly_token&#039; =&gt; &#039;gitaly_secure_token&#039;\n  }\n})\n\n# Object storage (S3-compatible)\ngitlab_rails[&#039;object_store&#039;][&#039;enabled&#039;] = true\ngitlab_rails[&#039;object_store&#039;][&#039;proxy_download&#039;] = true\ngitlab_rails[&#039;object_store&#039;][&#039;connection&#039;] = {\n  &#039;provider&#039; =&gt; &#039;AWS&#039;,\n  &#039;region&#039; =&gt; &#039;us-west-2&#039;,\n  &#039;aws_access_key_id&#039; =&gt; &#039;object_store_access_key&#039;,\n  &#039;aws_secret_access_key&#039; =&gt; &#039;object_store_secret_key&#039;\n}\ngitlab_rails[&#039;object_store&#039;][&#039;objects&#039;][&#039;artifacts&#039;][&#039;bucket&#039;] = &#039;gitlab-artifacts&#039;\ngitlab_rails[&#039;object_store&#039;][&#039;objects&#039;][&#039;lfs&#039;][&#039;bucket&#039;] = &#039;gitlab-lfs&#039;\ngitlab_rails[&#039;object_store&#039;][&#039;objects&#039;][&#039;uploads&#039;][&#039;bucket&#039;] = &#039;gitlab-uploads&#039;\ngitlab_rails[&#039;object_store&#039;][&#039;objects&#039;][&#039;packages&#039;][&#039;bucket&#039;] = &#039;gitlab-packages&#039;\n\n# Geo replication (Enterprise Premium)\ngitlab_rails[&#039;geo_primary_role&#039;] = true  # Set to false for secondary\ngitlab_rails[&#039;geo_node_name&#039;] = &#039;primary-site&#039;\ngitlab_rails[&#039;geo_registry_replication_enabled&#039;] = true\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"container-registry-and-package-management\" class=\"mobile-header\">Container Registry and Package Management</h2>\n<h3 id=\"secure-container-registry-setup\" class=\"mobile-header\">Secure Container Registry Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure container registry with security scanning\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Container Registry configuration\nregistry_external_url &#039;https://registry.example.com&#039;\ngitlab_rails[&#039;registry_enabled&#039;] = true\nregistry[&#039;enable&#039;] = true\n\n# Registry storage\nregistry[&#039;storage&#039;] = {\n  &#039;s3&#039; =&gt; {\n    &#039;accesskey&#039; =&gt; &#039;registry_s3_access_key&#039;,\n    &#039;secretkey&#039; =&gt; &#039;registry_s3_secret_key&#039;,\n    &#039;bucket&#039; =&gt; &#039;gitlab-registry&#039;,\n    &#039;region&#039; =&gt; &#039;us-west-2&#039;,\n    &#039;encrypt&#039; =&gt; true\n  }\n}\n\n# Registry security\nregistry[&#039;auth_token_realm&#039;] = &quot;https://gitlab.example.com/jwt/auth&quot;\nregistry[&#039;auth_token_service&#039;] = &quot;container_registry&quot;\nregistry[&#039;auth_token_issuer&#039;] = &quot;gitlab-issuer&quot;\nregistry[&#039;auth_token_autoredirect&#039;] = false\n\n# Health checks\nregistry[&#039;health_storagedriver_enabled&#039;] = true\nregistry[&#039;health_storagedriver_interval&#039;] = &#039;10s&#039;\nregistry[&#039;health_storagedriver_threshold&#039;] = 3\n\n# Container scanning\ngitlab_rails[&#039;container_registry_token_expire_delay&#039;] = 300\ngitlab_rails[&#039;container_registry_cleanup_enabled&#039;] = true\n\n# Image retention policies\nregistry[&#039;middleware&#039;] = {\n  &#039;repository&#039; =&gt; [\n    {\n      &#039;name&#039; =&gt; &#039;cloudfront&#039;,\n      &#039;disabled&#039; =&gt; false,\n      &#039;options&#039; =&gt; {\n        &#039;baseurl&#039; =&gt; &#039;https://registry-cdn.example.com&#039;,\n        &#039;privatekey&#039; =&gt; &#039;/etc/gitlab/registry-cdn-private-key.pem&#039;,\n        &#039;keypairid&#039; =&gt; &#039;CLOUDFRONT_KEY_PAIR_ID&#039;,\n        &#039;duration&#039; =&gt; &#039;3600s&#039;\n      }\n    }\n  ]\n}\n\n# Package registry\ngitlab_rails[&#039;packages_enabled&#039;] = true\ngitlab_rails[&#039;packages_storage_path&#039;] = &quot;/var/opt/gitlab/gitlab-rails/shared/packages&quot;\nEOF\n\n# Create container registry cleanup policy\ncat &gt; registry-cleanup-policy.json &lt;&lt;EOF\n{\n  &quot;name_regex&quot;: &quot;.*&quot;,\n  &quot;name_regex_keep&quot;: &quot;v\\\\d+\\\\.\\\\d+\\\\.\\\\d+&quot;,\n  &quot;cadence&quot;: &quot;7d&quot;,\n  &quot;older_than&quot;: &quot;30d&quot;,\n  &quot;keep_n&quot;: 10\n}\nEOF\n\n# Apply cleanup policy via API\ncurl --request PUT --header &quot;PRIVATE-TOKEN: ${ADMIN_TOKEN}&quot; \\\n  --header &quot;Content-Type: application/json&quot; \\\n  --data @registry-cleanup-policy.json \\\n  &quot;${GITLAB_URL}/api/v4/projects/${PROJECT_ID}/registry/repositories/1&quot;\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-observability\" class=\"mobile-header\">Monitoring and Observability</h2>\n<h3 id=\"comprehensive-monitoring-setup\" class=\"mobile-header\">Comprehensive Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable built-in monitoring stack\nsudo tee -a /etc/gitlab/gitlab.rb &gt; /dev/null &lt;&lt;EOF\n\n# Prometheus monitoring\nprometheus_monitoring[&#039;enable&#039;] = true\nprometheus[&#039;enable&#039;] = true\nprometheus[&#039;monitor_kubernetes&#039;] = true\nprometheus[&#039;scrape_configs&#039;] = [\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-workhorse&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:9229&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-unicorn&#039;,  \n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8080&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-sidekiq&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8082&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;gitlab-pages&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:8090&#039;] }\n    ]\n  },\n  {\n    &#039;job_name&#039; =&gt; &#039;docker-registry&#039;,\n    &#039;static_configs&#039; =&gt; [\n      { &#039;targets&#039; =&gt; [&#039;localhost:5001&#039;] }\n    ]\n  }\n]\n\n# Grafana configuration\ngrafana[&#039;enable&#039;] = true\ngrafana[&#039;admin_password&#039;] = &#039;secure_grafana_password&#039;\ngrafana[&#039;disable_login_form&#039;] = false\ngrafana[&#039;allow_user_sign_up&#039;] = false\n\n# Grafana LDAP integration\ngrafana[&#039;ldap_enabled&#039;] = true\ngrafana[&#039;ldap_allow_sign_up&#039;] = false\ngrafana[&#039;ldap_servers&#039;] = [{\n  &#039;host&#039; =&gt; &#039;ldap.example.com&#039;,\n  &#039;port&#039; =&gt; 636,\n  &#039;uid&#039; =&gt; &#039;sAMAccountName&#039;,\n  &#039;bind_dn&#039; =&gt; &#039;CN=grafana,OU=Service Accounts,DC=example,DC=com&#039;,\n  &#039;password&#039; =&gt; &#039;ldap_service_password&#039;,\n  &#039;encryption&#039; =&gt; &#039;ssl&#039;,\n  &#039;base&#039; =&gt; &#039;DC=example,DC=com&#039;,\n  &#039;user_filter&#039; =&gt; &#039;&#039;,\n  &#039;group_base&#039; =&gt; &#039;OU=Groups,DC=example,DC=com&#039;,\n  &#039;admin_group&#039; =&gt; &#039;GitLab Administrators&#039;\n}]\n\n# Node Exporter\nnode_exporter[&#039;enable&#039;] = true\nnode_exporter[&#039;listen_address&#039;] = &#039;localhost:9100&#039;\n\n# Alert Manager\nalertmanager[&#039;enable&#039;] = true\nalertmanager[&#039;admin_email&#039;] = &#039;alerts@example.com&#039;\nalertmanager[&#039;flags&#039;] = {\n  &#039;storage.path&#039; =&gt; &#039;/var/opt/gitlab/alertmanager/data&#039;,\n  &#039;config.file&#039; =&gt; &#039;/var/opt/gitlab/alertmanager/alertmanager.yml&#039;\n}\n\n# Log forwarding\nlogging[&#039;logrotate_frequency&#039;] = &quot;daily&quot;\nlogging[&#039;logrotate_rotate&#039;] = 30\nlogging[&#039;logrotate_compress&#039;] = &quot;compress&quot;\nlogging[&#039;svlogd_size&#039;] = 200 * 1024 * 1024  # 200MB\nlogging[&#039;svlogd_num&#039;] = 30\nEOF\n\n# Create custom alerting rules\nsudo mkdir -p /var/opt/gitlab/alertmanager\n\nsudo tee /var/opt/gitlab/alertmanager/alertmanager.yml &gt; /dev/null &lt;&lt;EOF\nglobal:\n  smtp_smarthost: &#039;smtp.example.com:587&#039;\n  smtp_from: &#039;gitlab-alerts@example.com&#039;\n  smtp_auth_username: &#039;gitlab-alerts@example.com&#039;\n  smtp_auth_password: &#039;smtp_password&#039;\n\nroute:\n  group_by: [&#039;alertname&#039;, &#039;cluster&#039;, &#039;service&#039;]\n  group_wait: 30s\n  group_interval: 5m\n  repeat_interval: 12h\n  receiver: &#039;gitlab-alerts&#039;\n  routes:\n  - match:\n      severity: critical\n    receiver: &#039;critical-alerts&#039;\n    group_wait: 10s\n    repeat_interval: 5m\n\nreceivers:\n- name: &#039;gitlab-alerts&#039;\n  email_configs:\n  - to: &#039;gitlab-admin@example.com&#039;\n    subject: &#039;GitLab Alert: {{ .GroupLabels.alertname }}&#039;\n    body: |\n      {{ range .Alerts }}\n      Alert: {{ .Annotations.summary }}\n      Description: {{ .Annotations.description }}\n      Instance: {{ .Labels.instance }}\n      {{ end }}\n\n- name: &#039;critical-alerts&#039;\n  email_configs:\n  - to: &#039;oncall@example.com&#039;\n    subject: &#039;CRITICAL GitLab Alert: {{ .GroupLabels.alertname }}&#039;\n  slack_configs:\n  - api_url: &#039;https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK&#039;\n    channel: &#039;#critical-alerts&#039;\n    title: &#039;Critical GitLab Alert&#039;\nEOF\n\nsudo gitlab-ctl reconfigure</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-monitoring\" class=\"mobile-header\">Performance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create GitLab performance monitoring script\nsudo tee /usr/local/bin/gitlab-performance-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMONITOR_LOG=&quot;/var/log/gitlab-performance.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${MONITOR_LOG}\n}\n\n# Check GitLab service health\nfor service in unicorn sidekiq workhorse gitaly; do\n    if gitlab-ctl status $service | grep -q &quot;run:&quot;; then\n        log_message &quot;✓ $service is running&quot;\n    else\n        log_message &quot;✗ $service is not running&quot;\n    fi\ndone\n\n# Check database performance\nDB_CONNECTIONS=$(gitlab-psql -c &quot;SELECT count(*) FROM pg_stat_activity;&quot; -t)\nlog_message &quot;ℹ Database connections: ${DB_CONNECTIONS}&quot;\n\n# Check Redis performance  \nREDIS_MEMORY=$(redis-cli info memory | grep used_memory_human: | cut -d: -f2)\nlog_message &quot;ℹ Redis memory usage: ${REDIS_MEMORY}&quot;\n\n# Check Git repository storage\nREPO_SIZE=$(du -sh /var/opt/gitlab/git-data/repositories | cut -f1)\nlog_message &quot;ℹ Repository storage usage: ${REPO_SIZE}&quot;\n\n# Check background job queue\nSIDEKIQ_QUEUE=$(gitlab-rails runner &quot;puts Sidekiq::Queue.new.size&quot;)\nlog_message &quot;ℹ Sidekiq queue size: ${SIDEKIQ_QUEUE}&quot;\n\n# Check GitLab metrics\nGITLAB_VERSION=$(gitlab-rake gitlab:env:info | grep &quot;GitLab information&quot; -A 10 | grep &quot;Version:&quot; | awk &#039;{print $2}&#039;)\nlog_message &quot;ℹ GitLab version: ${GITLAB_VERSION}&quot;\n\n# Performance metrics via API\nAPI_RESPONSE_TIME=$(curl -w &quot;%{time_total}&quot; -s -o /dev/null https://gitlab.example.com/api/v4/projects)\nlog_message &quot;ℹ API response time: ${API_RESPONSE_TIME}s&quot;\n\n# Check disk I/O\nDISK_USAGE=$(df /var/opt/gitlab | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nlog_message &quot;ℹ Disk usage: ${DISK_USAGE}%&quot;\n\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message &quot;⚠ High disk usage detected&quot;\nfi\n\nlog_message &quot;Performance monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-performance-monitor.sh\n\n# Schedule performance monitoring\necho &quot;*/15 * * * * root /usr/local/bin/gitlab-performance-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"gitlab-runner-advanced-configuration\" class=\"mobile-header\">GitLab Runner Advanced Configuration</h2>\n<h3 id=\"secure-multi-platform-runner-setup\" class=\"mobile-header\">Secure Multi-Platform Runner Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create advanced runner configuration with security\nsudo tee /etc/gitlab-runner/config.toml &gt; /dev/null &lt;&lt;EOF\nconcurrent = 10\ncheck_interval = 0\nlog_level = &quot;info&quot;\nlog_format = &quot;runner&quot;\nshutdown_timeout = 30\n\n[session_server]\n  session_timeout = 1800\n\n# Docker executor with security hardening\n[[runners]]\n  name = &quot;docker-secure-runner&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;secure_runner_token&quot;\n  executor = &quot;docker&quot;\n  output_limit = 4096\n  \n  # Security scripts\n  pre_clone_script = &quot;&quot;&quot;\n    echo &#039;Security scan initiated&#039;\n    id\n    pwd\n    env | grep -E &#039;^(CI_|GITLAB_)&#039; | sort\n  &quot;&quot;&quot;\n  \n  pre_build_script = &quot;&quot;&quot;\n    echo &#039;Preparing secure build environment&#039;\n    # Verify no sensitive data in environment\n    if env | grep -i -E &#039;(password|secret|key|token)&#039; | grep -v -E &#039;^(CI_JOB_TOKEN|GITLAB_CI|CI_SERVER)&#039;; then\n      echo &#039;ERROR: Sensitive data detected in environment&#039;\n      exit 1\n    fi\n  &quot;&quot;&quot;\n  \n  post_build_script = &quot;&quot;&quot;\n    echo &#039;Cleaning up build artifacts&#039;\n    rm -rf /tmp/* 2&gt;/dev/null || true\n  &quot;&quot;&quot;\n  \n  [runners.docker]\n    tls_verify = false\n    image = &quot;alpine:latest&quot;\n    privileged = false\n    disable_entrypoint_overwrite = false\n    oom_kill_disable = false\n    disable_cache = false\n    volumes = [&quot;/cache&quot;, &quot;/certs/client&quot;]\n    shm_size = 268435456  # 256MB\n    \n    # Security restrictions\n    cap_drop = [&quot;ALL&quot;]\n    cap_add = [&quot;CHOWN&quot;, &quot;SETGID&quot;, &quot;SETUID&quot;]\n    security_opt = [&quot;no-new-privileges:true&quot;, &quot;apparmor:unconfined&quot;]\n    \n    # Resource limits\n    memory = &quot;2g&quot;\n    memory_swap = &quot;2g&quot;\n    memory_reservation = &quot;1g&quot;\n    cpus = &quot;2&quot;\n    \n    # Network security\n    network_mode = &quot;bridge&quot;\n    dns = [&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;]\n    \n    # Disable dangerous features\n    disable_entrypoint_overwrite = true\n    \n    # Image pull policy\n    pull_policy = [&quot;if-not-present&quot;]\n    \n  [runners.docker.tmpfs]\n    &quot;/tmp&quot; = &quot;rw,noexec,nosuid,size=100m&quot;\n    &quot;/var/tmp&quot; = &quot;rw,noexec,nosuid,size=100m&quot;\n\n# Kubernetes executor (Enterprise recommended)\n[[runners]]\n  name = &quot;k8s-secure-runner&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;k8s_runner_token&quot;\n  executor = &quot;kubernetes&quot;\n  \n  [runners.kubernetes]\n    host = &quot;https://k8s.example.com:6443&quot;\n    namespace = &quot;gitlab-runner&quot;\n    privileged = false\n    image = &quot;alpine:latest&quot;\n    \n    # Security context\n    run_as_user = 1000\n    run_as_group = 1000\n    fs_group = 1000\n    \n    # Resource limits\n    memory_limit = &quot;4Gi&quot;\n    memory_request = &quot;2Gi&quot;\n    cpu_limit = &quot;2000m&quot;\n    cpu_request = &quot;1000m&quot;\n    \n    # Security policies\n    [runners.kubernetes.pod_security_context]\n      run_as_non_root = true\n      run_as_user = 1000\n      run_as_group = 1000\n      fs_group = 1000\n      seccomp_profile_type = &quot;RuntimeDefault&quot;\n      \n    [runners.kubernetes.container_security_context]\n      allow_privilege_escalation = false\n      read_only_root_filesystem = true\n      capabilities = { drop = [&quot;ALL&quot;] }\n      \n    # Volume mounts for security\n    [[runners.kubernetes.volumes.empty_dir]]\n      name = &quot;tmp&quot;\n      mount_path = &quot;/tmp&quot;\n      medium = &quot;Memory&quot;\n      \n    [[runners.kubernetes.volumes.empty_dir]]\n      name = &quot;var-tmp&quot;\n      mount_path = &quot;/var/tmp&quot;\n      medium = &quot;Memory&quot;\n\n# Shell executor for specific tasks (limited use)\n[[runners]]\n  name = &quot;shell-restricted-runner&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;shell_runner_token&quot;\n  executor = &quot;shell&quot;\n  shell = &quot;bash&quot;\n  \n  # Restricted tags only\n  tag_list = [&quot;shell&quot;, &quot;restricted&quot;]\n  run_untagged = false\n  locked = true\n  \n  # Security environment\n  environment = [\n    &quot;PATH=/usr/local/bin:/usr/bin:/bin&quot;,\n    &quot;HOME=/home/gitlab-runner&quot;,\n    &quot;SHELL=/bin/bash&quot;\n  ]\n  \n  # Cleanup\n  builds_dir = &quot;/home/gitlab-runner/builds&quot;\n  cache_dir = &quot;/home/gitlab-runner/cache&quot;\n  \n  [runners.cache]\n    Type = &quot;s3&quot;\n    [runners.cache.s3]\n      ServerAddress = &quot;s3.amazonaws.com&quot;\n      BucketName = &quot;gitlab-runner-cache&quot;\n      BucketLocation = &quot;us-west-2&quot;\n      Insecure = false\nEOF\n\nsudo systemctl restart gitlab-runner</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-runner-auto-scaling-cloud\" class=\"mobile-header\">GitLab Runner Auto-scaling (Cloud)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure GitLab Runner with Docker Machine for auto-scaling\nsudo tee /etc/gitlab-runner/autoscale-config.toml &gt; /dev/null &lt;&lt;EOF\nconcurrent = 50\ncheck_interval = 0\n\n[[runners]]\n  name = &quot;autoscale-runner&quot;\n  url = &quot;https://gitlab.example.com/&quot;\n  token = &quot;autoscale_runner_token&quot;\n  executor = &quot;docker+machine&quot;\n  \n  [runners.docker]\n    image = &quot;alpine:latest&quot;\n    privileged = false\n    disable_cache = false\n    volumes = [&quot;/cache&quot;]\n    \n    # Security\n    cap_drop = [&quot;ALL&quot;]\n    security_opt = [&quot;no-new-privileges:true&quot;]\n    \n  [runners.machine]\n    IdleCount = 2\n    IdleTime = 1800\n    MaxBuilds = 20\n    MachineName = &quot;gitlab-runner-%s&quot;\n    MachineDriver = &quot;amazonec2&quot;\n    \n    # AWS EC2 configuration\n    [runners.machine.autoscaling]\n      Periods = [&quot;* * 9-17 * * mon-fri *&quot;, &quot;* * 18-8 * * * *&quot;]\n      IdleCount = [5, 1]\n      IdleTime = [1800, 3600]\n      Timezone = &quot;UTC&quot;\n    \n    # Machine options for security\n    [runners.machine.machineoptions]\n      amazonec2-access-key = &quot;aws_access_key&quot;\n      amazonec2-secret-key = &quot;aws_secret_key&quot;\n      amazonec2-region = &quot;us-west-2&quot;\n      amazonec2-vpc-id = &quot;vpc-12345678&quot;\n      amazonec2-subnet-id = &quot;subnet-87654321&quot;\n      amazonec2-security-group = &quot;gitlab-runner-sg&quot;\n      amazonec2-instance-type = &quot;t3.medium&quot;\n      amazonec2-ami = &quot;ami-0c02fb55956c7d316&quot;  # Amazon Linux 2\n      amazonec2-iam-instance-profile = &quot;GitLabRunnerInstanceProfile&quot;\n      amazonec2-use-private-address = &quot;true&quot;\n      amazonec2-tags = &quot;Name,gitlab-runner,Environment,production&quot;\n      amazonec2-root-size = &quot;20&quot;\n      amazonec2-volume-type = &quot;gp3&quot;\n      amazonec2-use-ebs-optimized = &quot;true&quot;\n      \n  [runners.cache]\n    Type = &quot;s3&quot;\n    Shared = true\n    [runners.cache.s3]\n      ServerAddress = &quot;s3.amazonaws.com&quot;\n      AccessKey = &quot;cache_access_key&quot;\n      SecretKey = &quot;cache_secret_key&quot;  \n      BucketName = &quot;gitlab-runner-cache&quot;\n      BucketLocation = &quot;us-west-2&quot;\n      Insecure = false\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-health-checks\" class=\"mobile-header\">Verification and Health Checks</h2>\n<h3 id=\"comprehensive-health-monitoring\" class=\"mobile-header\">Comprehensive Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/gitlab-health-check.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/gitlab-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check GitLab service status\nif gitlab-ctl status | grep -q &quot;down:&quot;; then\n    log_message &quot;⚠ Some GitLab services are down:&quot;\n    gitlab-ctl status | grep &quot;down:&quot; | while read line; do\n        log_message &quot;  - $line&quot;\n    done\nelse\n    log_message &quot;✓ All GitLab services are running&quot;\nfi\n\n# Check GitLab application health\nif gitlab-rake gitlab:check &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ GitLab application health check passed&quot;\nelse\n    log_message &quot;✗ GitLab application health check failed&quot;\n    gitlab-rake gitlab:check | tail -10 &gt;&gt; ${HEALTH_LOG}\nfi\n\n# Check GitLab Runner connectivity\nRUNNERS_ONLINE=$(curl -s --header &quot;PRIVATE-TOKEN: admin_token&quot; https://gitlab.example.com/api/v4/runners | jq &#039;[.[] | select(.status==&quot;online&quot;)] | length&#039;)\nTOTAL_RUNNERS=$(curl -s --header &quot;PRIVATE-TOKEN: admin_token&quot; https://gitlab.example.com/api/v4/runners | jq &#039;. | length&#039;)\nlog_message &quot;ℹ GitLab Runners: ${RUNNERS_ONLINE}/${TOTAL_RUNNERS} online&quot;\n\n# Check database connectivity\nif gitlab-psql -c &quot;SELECT version();&quot; &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Database connection is healthy&quot;\nelse\n    log_message &quot;✗ Database connection issues&quot;\nfi\n\n# Check Redis connectivity\nif redis-cli ping | grep -q &quot;PONG&quot;; then\n    log_message &quot;✓ Redis connection is healthy&quot;\nelse\n    log_message &quot;✗ Redis connection issues&quot;\nfi\n\n# Check container registry\nREGISTRY_STATUS=$(curl -s https://registry.example.com/v2/ | jq -r .message 2&gt;/dev/null)\nif [ &quot;$REGISTRY_STATUS&quot; = &quot;authentication required&quot; ] || [ &quot;$REGISTRY_STATUS&quot; = &quot;null&quot; ]; then\n    log_message &quot;✓ Container registry is responding&quot;\nelse\n    log_message &quot;⚠ Container registry issues&quot;\nfi\n\n# Check backup status\nLAST_BACKUP=$(ls -t /var/opt/gitlab/backups/*_gitlab_backup.tar 2&gt;/dev/null | head -1)\nif [ -n &quot;$LAST_BACKUP&quot; ]; then\n    BACKUP_AGE=$(stat -c %Y &quot;$LAST_BACKUP&quot;)\n    CURRENT_TIME=$(date +%s)\n    HOURS_SINCE_BACKUP=$(( (CURRENT_TIME - BACKUP_AGE) / 3600 ))\n    \n    if [ $HOURS_SINCE_BACKUP -lt 48 ]; then\n        log_message &quot;✓ Recent backup available (${HOURS_SINCE_BACKUP} hours old)&quot;\n    else\n        log_message &quot;⚠ Last backup is ${HOURS_SINCE_BACKUP} hours old&quot;\n    fi\nelse\n    log_message &quot;✗ No backup files found&quot;\nfi\n\n# Check SSL certificate expiry\nSSL_EXPIRY=$(echo | openssl s_client -servername gitlab.example.com -connect gitlab.example.com:443 2&gt;/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)\nSSL_EXPIRY_EPOCH=$(date -d &quot;$SSL_EXPIRY&quot; +%s)\nCURRENT_EPOCH=$(date +%s)\nDAYS_TO_EXPIRY=$(( (SSL_EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))\n\nif [ $DAYS_TO_EXPIRY -lt 30 ]; then\n    log_message &quot;⚠ SSL certificate expires in ${DAYS_TO_EXPIRY} days&quot;\nelse\n    log_message &quot;✓ SSL certificate expires in ${DAYS_TO_EXPIRY} days&quot;\nfi\n\n# Check system resources\nCPU_USAGE=$(top -bn1 | grep &quot;Cpu(s)&quot; | awk &#039;{print $2}&#039; | cut -d&#039;%&#039; -f1)\nMEMORY_USAGE=$(free | grep Mem | awk &#039;{printf &quot;%.0f&quot;, $3/$2 * 100.0}&#039;)\nlog_message &quot;ℹ System usage - CPU: ${CPU_USAGE}%, Memory: ${MEMORY_USAGE}%&quot;\n\nlog_message &quot;GitLab health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-health-check.sh\n\n# Schedule health checks every 15 minutes\necho &quot;*/15 * * * * root /usr/local/bin/gitlab-health-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-audit-and-compliance\" class=\"mobile-header\">Security Audit and Compliance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/gitlab-security-audit.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nAUDIT_LOG=&quot;/var/log/gitlab-security-audit.log&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${AUDIT_LOG}\n}\n\nlog_message &quot;Starting GitLab security audit...&quot;\n\n# Check user accounts with admin privileges\nADMIN_USERS=$(gitlab-rails runner &quot;puts User.admins.count&quot;)\nlog_message &quot;ℹ ${ADMIN_USERS} users with admin privileges&quot;\n\n# Check for users without 2FA\nUSERS_WITHOUT_2FA=$(gitlab-rails runner &quot;puts User.where(two_factor_enabled: false).count&quot;)\nlog_message &quot;ℹ ${USERS_WITHOUT_2FA} users without 2FA enabled&quot;\n\n# Check SSH key security\nWEAK_SSH_KEYS=$(gitlab-rails runner &quot;puts Key.where(&#039;LENGTH(key) &lt; ?&#039;, 2048).count&quot;)\nlog_message &quot;ℹ ${WEAK_SSH_KEYS} SSH keys shorter than 2048 bits&quot;\n\n# Check project visibility\nPUBLIC_PROJECTS=$(gitlab-rails runner &quot;puts Project.where(visibility_level: 20).count&quot;)\nINTERNAL_PROJECTS=$(gitlab-rails runner &quot;puts Project.where(visibility_level: 10).count&quot;)\nPRIVATE_PROJECTS=$(gitlab-rails runner &quot;puts Project.where(visibility_level: 0).count&quot;)\nlog_message &quot;ℹ Projects - Public: ${PUBLIC_PROJECTS}, Internal: ${INTERNAL_PROJECTS}, Private: ${PRIVATE_PROJECTS}&quot;\n\n# Check for projects without security scanning\nPROJECTS_WITHOUT_SAST=$(gitlab-rails runner &quot;\nputs Project.joins(:ci_pipelines)\n  .where(&#039;ci_pipelines.created_at &gt; ?&#039;, 30.days.ago)\n  .where.not(id: Ci::Build.joins(:pipeline).where(&#039;ci_builds.name ILIKE ?&#039;, &#039;%sast%&#039;).select(:project_id))\n  .distinct.count\n&quot;)\nlog_message &quot;ℹ ${PROJECTS_WITHOUT_SAST} active projects without SAST scanning&quot;\n\n# Check external integrations\nWEBHOOK_COUNT=$(gitlab-rails runner &quot;puts ProjectHook.count + SystemHook.count&quot;)\nlog_message &quot;ℹ ${WEBHOOK_COUNT} webhooks configured&quot;\n\n# Check audit events (Enterprise)\nif gitlab-rails runner &quot;puts defined?(AuditEvent)&quot; | grep -q &quot;constant&quot;; then\n    RECENT_AUDIT_EVENTS=$(gitlab-rails runner &quot;puts AuditEvent.where(&#039;created_at &gt; ?&#039;, 24.hours.ago).count&quot;)\n    log_message &quot;ℹ ${RECENT_AUDIT_EVENTS} audit events in last 24 hours&quot;\nfi\n\n# Check for suspicious activity\nFAILED_LOGINS=$(grep &quot;Failed Login&quot; /var/log/gitlab/gitlab-rails/production.log | grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; | wc -l)\nif [ ${FAILED_LOGINS} -gt 20 ]; then\n    log_message &quot;⚠ ${FAILED_LOGINS} failed login attempts today&quot;\nelse\n    log_message &quot;✓ ${FAILED_LOGINS} failed login attempts today (normal)&quot;\nfi\n\n# Check for large file uploads\nLARGE_UPLOADS=$(find /var/opt/gitlab/git-data/repositories -type f -size +100M -mtime -7 | wc -l)\nif [ ${LARGE_UPLOADS} -gt 0 ]; then\n    log_message &quot;ℹ ${LARGE_UPLOADS} large files (&gt;100MB) uploaded in last week&quot;\nfi\n\nlog_message &quot;Security audit completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/gitlab-security-audit.sh\n\n# Schedule daily security audits\necho &quot;0 8 * * * root /usr/local/bin/gitlab-security-audit.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check GitLab status\nsudo gitlab-ctl status\nsudo gitlab-ctl tail\n\n# Check configuration\nsudo gitlab-ctl show-config\nsudo gitlab-rake gitlab:check SANITIZE=true\n\n# Reconfigure GitLab\nsudo gitlab-ctl reconfigure\nsudo gitlab-ctl restart\n\n# Database issues\nsudo gitlab-psql -d gitlabhq_production\nsudo gitlab-rake db:migrate:status\n\n# Redis issues\nredis-cli ping\nredis-cli info\n\n# Check logs for errors\nsudo gitlab-ctl tail gitlab-workhorse\nsudo gitlab-ctl tail unicorn\nsudo gitlab-ctl tail sidekiq\n\n# Performance issues\nsudo gitlab-rake gitlab:env:info\nsudo gitlab-ctl status | grep memory\n\n# SSL/TLS issues\nsudo gitlab-rake gitlab:check\nopenssl s_client -connect gitlab.example.com:443\n\n# Container registry issues\nsudo gitlab-ctl registry-garbage-collect\ndocker login registry.example.com\n\n# Runner connectivity issues\nsudo gitlab-runner verify\nsudo gitlab-runner list\n\n# Backup issues\ngitlab-backup create STRATEGY=copy\ngitlab-backup restore BACKUP=timestamp\n\n# Reset admin password\nsudo gitlab-rake &quot;gitlab:password:reset[root]&quot;\n\n# Check disk usage\ndf -h /var/opt/gitlab/\nsudo du -sh /var/opt/gitlab/git-data/\n\n# Memory usage analysis\nps aux --sort=-%mem | grep gitlab\ngitlab-ctl status | grep memory\n\n# Network connectivity\ncurl -I https://gitlab.example.com\ntelnet gitlab.example.com 443\n\n# Service restart order (if needed)\nsudo gitlab-ctl stop\nsudo gitlab-ctl start postgresql\nsudo gitlab-ctl start redis\nsudo gitlab-ctl start</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nsudo gitlab-ctl edit-config\n# Add: gitlab_rails[&#039;log_level&#039;] = &#039;DEBUG&#039;\n\nsudo gitlab-ctl reconfigure\n\n# Debug specific services\nsudo gitlab-ctl tail gitlab-workhorse\nsudo gitlab-ctl tail unicorn\nsudo gitlab-ctl tail sidekiq\nsudo gitlab-ctl tail gitaly\n\n# Database debugging\nsudo gitlab-psql -d gitlabhq_production -c &quot;\\l&quot;\nsudo gitlab-rake db:migrate:status\n\n# Git debugging\nsudo -u git gitaly-debug\nsudo gitlab-rake gitlab:gitaly:check\n\n# Performance profiling\nsudo gitlab-rake gitlab:setup\nsudo gitlab-rake gitlab:check:repos\nsudo gitlab-rake gitlab:cleanup:sessions\n\n# Container registry debugging\nsudo gitlab-ctl registry-garbage-collect -m\ndocker system df\n\n# Runner debugging\nsudo gitlab-runner --debug run\nsudo gitlab-runner exec docker test-job\n\n# Network debugging for distributed setup\nping -c 4 postgres-master.example.com\nping -c 4 redis-master.example.com\ntelnet postgres-master.example.com 5432\ntelnet redis-master.example.com 6379\n\n# Memory leak detection\npmap -x $(pgrep gitlab-workhorse)\nvalgrind --tool=memcheck --leak-check=full gitlab-workhorse\n\n# Strace for syscall analysis\nstrace -p $(pgrep gitlab-workhorse) -e trace=network,file</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/administration/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Admin Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/security/hardening/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Hardening Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/runner/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab Runner Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/administration/packages/container_registry.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Container Registry Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.gitlab.com/ee/api/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitLab API Documentation</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"29 min","wordCount":5786,"lastBuilt":"2025-09-14T01:30:35.767Z"},{"name":"grafana","displayName":"Grafana","slug":"grafana","description":"Repo for grafana","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/grafana","updatedAt":"2025-09-14T01:30:03Z","createdAt":"2025-09-08T03:08:10Z","readmeRaw":"# Grafana Installation Guide\n\nGrafana is a free and open-source multi-platform analytics and interactive visualization web application. Originally developed by Torkel Ödegaard, Grafana provides charts, graphs, and alerts for the web when connected to supported data sources. It serves as a FOSS alternative to commercial solutions like Datadog, New Relic, or Splunk dashboards, offering enterprise-grade visualization and monitoring without licensing costs, with features like alerting, authentication integration, and extensive plugin ecosystem.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for production)\n  - RAM: 512MB minimum (2GB+ recommended for production)\n  - Storage: 1GB minimum (10GB+ recommended for dashboard storage and logs)\n  - Network: Stable internet connection for plugins and updates\n- **Operating System**: \n  - Linux: Any modern distribution with systemd support\n  - macOS: 10.15+ (Catalina or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 12.0+\n- **Network Requirements**:\n  - Port 3000 (default Grafana web interface)\n  - Port 443/80 (HTTPS/HTTP if using reverse proxy)\n  - Outbound HTTPS for plugin downloads and updates\n- **Dependencies**:\n  - Database (SQLite, MySQL, PostgreSQL) - SQLite included by default\n  - Data sources (Prometheus, InfluxDB, etc.) for meaningful dashboards\n  - Web browser with JavaScript support\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Add Grafana repository\nsudo tee /etc/yum.repos.d/grafana.repo <<EOF\n[grafana]\nname=grafana\nbaseurl=https://packages.grafana.com/oss/rpm\nrepo_gpgcheck=1\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.grafana.com/gpg.key\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nEOF\n\n# Install Grafana\nsudo yum install -y grafana\n\n# Enable and start service\nsudo systemctl enable --now grafana-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index and install prerequisites\nsudo apt update\nsudo apt install -y software-properties-common wget\n\n# Add Grafana GPG key\nwget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\n\n# Add repository\necho \"deb https://packages.grafana.com/oss/deb stable main\" | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Install Grafana\nsudo apt update\nsudo apt install -y grafana\n\n# Enable and start service\nsudo systemctl enable --now grafana-server\n\n# Configure firewall\nsudo ufw allow 3000\n```\n\n### Arch Linux\n\n```bash\n# Install Grafana from official repositories\nsudo pacman -S grafana\n\n# Optional: Install additional plugins\nsudo pacman -S grafana-zabbix\n\n# Enable and start service\nsudo systemctl enable --now grafana-server\n\n# Configure firewall\nsudo ufw allow 3000\n```\n\n### Alpine Linux\n\n```bash\n# Install Grafana\napk add --no-cache grafana\n\n# Create grafana user if not exists\nadduser -D -H -s /sbin/nologin grafana\n\n# Create necessary directories\nmkdir -p /var/lib/grafana /var/log/grafana\nchown -R grafana:grafana /var/lib/grafana /var/log/grafana\n\n# Enable and start service\nrc-update add grafana default\nrc-service grafana start\n\n# Configure firewall\nufw allow 3000\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y grafana\n\n# For latest version, add official repository\nsudo zypper addrepo https://packages.grafana.com/oss/rpm grafana\nsudo zypper refresh\nsudo zypper install -y grafana\n\n# SLES 15 - may need additional repositories\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\nsudo zypper install -y grafana\n\n# Enable and start service\nsudo systemctl enable --now grafana-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install grafana\n\n# Start as service\nbrew services start grafana\n\n# Or run manually\ngrafana-server --config=/usr/local/etc/grafana/grafana.ini --homepath /usr/local/share/grafana\n\n# Configuration location: /usr/local/etc/grafana/\n# Alternative: /opt/homebrew/etc/grafana/ (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install grafana8\n\n# Using ports\ncd /usr/ports/www/grafana8\nmake install clean\n\n# Enable in rc.conf\necho 'grafana_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice grafana start\n\n# Configuration location: /usr/local/etc/grafana.conf\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install grafana\n\n# Method 2: Using Scoop\nscoop bucket add extras\nscoop install grafana\n\n# Method 3: Manual installation\n# Download from https://grafana.com/grafana/download\n# Extract to C:\\grafana\n# Run grafana-server.exe\n\n# Install as Windows service using NSSM\nnssm install grafana C:\\grafana\\bin\\grafana-server.exe\nnssm set grafana AppDirectory C:\\grafana\nnssm start grafana\n\n# Configuration location: C:\\grafana\\conf\\defaults.ini\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create grafana user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/grafana -s /sbin/nologin -c \"Grafana Dashboard\" grafana\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/grafana/grafana.ini`\n- Debian/Ubuntu: `/etc/grafana/grafana.ini`\n- Arch Linux: `/etc/grafana/grafana.ini`\n- Alpine Linux: `/etc/grafana/grafana.ini`\n- openSUSE/SLES: `/etc/grafana/grafana.ini`\n- macOS: `/usr/local/etc/grafana/grafana.ini`\n- FreeBSD: `/usr/local/etc/grafana.conf`\n- Windows: `C:\\grafana\\conf\\custom.ini`\n\n3. **Essential settings to change**:\n\n```ini\n# /etc/grafana/grafana.ini\n[server]\n# Change from default port if needed\nhttp_port = 3000\n\n# Set domain for proper URL generation\ndomain = grafana.example.com\nroot_url = https://grafana.example.com\n\n# Protocol for serving (http or https)\nprotocol = https\ncert_file = /etc/grafana/grafana.crt\ncert_key = /etc/grafana/grafana.key\n\n[security]\n# IMPORTANT: Change default admin password\nadmin_user = admin\nadmin_password = secure_admin_password\n\n# Disable user signup\ndisable_initial_admin_creation = false\n\n[auth.anonymous]\n# Disable anonymous access\nenabled = false\n\n[database]\n# Use external database for production\ntype = mysql\nhost = localhost:3306\nname = grafana\nuser = grafana\npassword = secure_grafana_password\n\n[smtp]\n# Configure email for alerts\nenabled = true\nhost = smtp.example.com:587\nuser = grafana@example.com\npassword = smtp_password\nfrom_address = grafana@example.com\nfrom_name = Grafana\n```\n\n### Testing Initial Setup\n\n```bash\n# Check if Grafana is running\nsudo systemctl status grafana-server\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check logs\nsudo journalctl -u grafana-server -f\n\n# Verify configuration\ngrafana-server -config /etc/grafana/grafana.ini -test\n\n# Test login\ncurl -X POST http://localhost:3000/login \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"user\":\"admin\",\"password\":\"secure_admin_password\"}'\n```\n\n**WARNING:** Change the default admin password immediately after installation!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Grafana to start on boot\nsudo systemctl enable grafana-server\n\n# Start Grafana\nsudo systemctl start grafana-server\n\n# Stop Grafana\nsudo systemctl stop grafana-server\n\n# Restart Grafana\nsudo systemctl restart grafana-server\n\n# Reload configuration\nsudo systemctl reload grafana-server\n\n# Check status\nsudo systemctl status grafana-server\n\n# View logs\nsudo journalctl -u grafana-server -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable Grafana to start on boot\nrc-update add grafana default\n\n# Start Grafana\nrc-service grafana start\n\n# Stop Grafana\nrc-service grafana stop\n\n# Restart Grafana\nrc-service grafana restart\n\n# Check status\nrc-service grafana status\n\n# View logs\ntail -f /var/log/grafana/grafana.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'grafana_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Grafana\nservice grafana start\n\n# Stop Grafana\nservice grafana stop\n\n# Restart Grafana\nservice grafana restart\n\n# Check status\nservice grafana status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start grafana\nbrew services stop grafana\nbrew services restart grafana\n\n# Check status\nbrew services list | grep grafana\n\n# Manual control\ngrafana-server --config=/usr/local/etc/grafana/grafana.ini\n```\n\n### Windows Service Manager\n\n```powershell\n# Using NSSM\nnssm start grafana\nnssm stop grafana\nnssm restart grafana\n\n# Using native Windows commands\nStart-Service grafana\nStop-Service grafana\nRestart-Service grafana\n\n# Check status\nGet-Service grafana\n\n# View logs (if configured to use Windows Event Log)\nGet-EventLog -LogName Application -Source Grafana\n```\n\n## Advanced Configuration\n\n### Database Backend Configuration\n\n```ini\n# MySQL/MariaDB (Recommended for production)\n[database]\ntype = mysql\nhost = mysql.example.com:3306\nname = grafana\nuser = grafana\npassword = secure_grafana_password\nssl_mode = require\nca_cert_path = /etc/ssl/certs/mysql-ca.pem\ncert_path = /etc/ssl/certs/mysql-cert.pem\nkey_path = /etc/ssl/private/mysql-key.pem\nmax_idle_conn = 2\nmax_open_conn = 0\nconn_max_lifetime = 14400\nlog_queries = false\n\n# PostgreSQL\n[database]\ntype = postgres\nhost = postgres.example.com:5432\nname = grafana\nuser = grafana\npassword = secure_grafana_password\nssl_mode = require\nca_cert_path = /etc/ssl/certs/postgres-ca.pem\ncert_path = /etc/ssl/certs/postgres-cert.pem\nkey_path = /etc/ssl/private/postgres-key.pem\nmax_idle_conn = 2\nmax_open_conn = 0\nconn_max_lifetime = 14400\n```\n\n### Authentication Configuration\n\n```ini\n# LDAP Authentication\n[auth.ldap]\nenabled = true\nconfig_file = /etc/grafana/ldap.toml\nallow_sign_up = false\nsync_cron = \"0 0 1 * * *\"\nactive_sync_enabled = true\n\n# OAuth Configuration (GitHub example)\n[auth.github]\nenabled = true\nallow_sign_up = false\nclient_id = your_github_client_id\nclient_secret = your_github_client_secret\nscopes = user:email,read:org\nauth_url = https://github.com/login/oauth/authorize\ntoken_url = https://github.com/login/oauth/access_token\napi_url = https://api.github.com/user\nallowed_domains = example.com\nallowed_organizations = your-organization\n\n# SAML Configuration (Enterprise feature)\n[auth.saml]\nenabled = true\ncertificate_path = /etc/grafana/saml.crt\nprivate_key_path = /etc/grafana/saml.key\nidp_metadata_url = https://idp.example.com/metadata\n```\n\n### High Availability Setup\n\n```ini\n# Multiple Grafana instances with shared database\n[database]\ntype = mysql\nhost = mysql-cluster.example.com:3306\nname = grafana\nuser = grafana\npassword = secure_password\n\n# Session storage in Redis\n[session]\nprovider = redis\nprovider_config = addr=redis.example.com:6379,pool_size=100,db=0\n\n# Alerting HA\n[unified_alerting]\nenabled = true\nha_peers = grafana-2.example.com:9094,grafana-3.example.com:9094\nha_listen_address = 0.0.0.0:9094\nha_advertise_address = grafana-1.example.com:9094\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/grafana\nupstream grafana {\n    server 127.0.0.1:3000;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name grafana.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name grafana.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/grafana.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/grafana.example.com/privkey.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n\n    location / {\n        proxy_pass http://grafana;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n# /etc/apache2/sites-available/grafana.conf\n<VirtualHost *:443>\n    ServerName grafana.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/grafana.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/grafana.example.com/privkey.pem\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:3000/\n    ProxyPassReverse / http://localhost:3000/\n    \n    # WebSocket support\n    RewriteEngine On\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://localhost:3000/$1\" [P,L]\n    \n    Header always set Strict-Transport-Security \"max-age=63072000\"\n</VirtualHost>\n```\n\n### Caddy Configuration\n\n```caddyfile\ngrafana.example.com {\n    reverse_proxy localhost:3000\n    \n    header {\n        Strict-Transport-Security \"max-age=63072000\"\n        X-Frame-Options \"SAMEORIGIN\"\n        X-Content-Type-Options \"nosniff\"\n    }\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend grafana_frontend\n    bind *:443 ssl crt /etc/haproxy/certs/grafana.pem\n    mode http\n    option httplog\n    \n    default_backend grafana_backend\n\nbackend grafana_backend\n    mode http\n    balance roundrobin\n    option httpchk GET /api/health\n    server grafana1 127.0.0.1:3000 check\n    server grafana2 127.0.0.2:3000 check backup\n```\n\n## Security Configuration\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificate for Grafana\nsudo mkdir -p /etc/grafana/ssl\n\n# Self-signed certificate (development)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/grafana/ssl/grafana.key \\\n  -out /etc/grafana/ssl/grafana.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=grafana.example.com\"\n\n# Production: Use Let's Encrypt\nsudo certbot certonly --standalone -d grafana.example.com\nsudo cp /etc/letsencrypt/live/grafana.example.com/fullchain.pem /etc/grafana/ssl/grafana.crt\nsudo cp /etc/letsencrypt/live/grafana.example.com/privkey.pem /etc/grafana/ssl/grafana.key\n\n# Set permissions\nsudo chown grafana:grafana /etc/grafana/ssl/*\nsudo chmod 600 /etc/grafana/ssl/grafana.key\nsudo chmod 644 /etc/grafana/ssl/grafana.crt\n```\n\n### Security Hardening\n\n```ini\n# Security configuration in grafana.ini\n[security]\n# Strong admin password\nadmin_password = $2b$10$very_secure_bcrypt_hash\n\n# Security keys\nsecret_key = your_32_character_secret_key_here\nencryption_provider = secretKey.v1\navailable_encryption_providers = secretKey.v1\n\n# Security policies\ndisable_gravatar = true\ncookie_secure = true\ncookie_samesite = strict\nstrict_transport_security = true\nstrict_transport_security_max_age_seconds = 86400\nx_content_type_options = true\nx_xss_protection = true\ncontent_security_policy = true\n\n# Login protection\ndisable_brute_force_login_protection = false\nlogin_maximum_inactive_lifetime_duration = 7d\nlogin_maximum_lifetime_duration = 30d\n\n# Data source proxy whitelist\ndata_source_proxy_whitelist = 127.0.0.1:9090,prometheus.example.com:9090\n\n[users]\n# Disable user registration\nallow_sign_up = false\nallow_org_create = false\nauto_assign_org = true\nauto_assign_org_role = Viewer\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 3000\nsudo ufw allow 443\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=grafana\nsudo firewall-cmd --permanent --zone=grafana --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=grafana --add-port=3000/tcp\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 3000 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 3000\npass in on $ext_if proto tcp to any port 443\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"Grafana\" -Direction Inbound -Protocol TCP -LocalPort 3000 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### MySQL/MariaDB Setup\n\n```bash\n# Create Grafana database\nmysql -u root -p <<EOF\nCREATE DATABASE grafana CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'grafana'@'%' IDENTIFIED BY 'secure_grafana_password';\nGRANT ALL PRIVILEGES ON grafana.* TO 'grafana'@'%';\nFLUSH PRIVILEGES;\nEOF\n\n# Optimize MySQL for Grafana\nsudo tee /etc/mysql/conf.d/grafana.cnf <<EOF\n[mysqld]\n# Grafana optimizations\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_log_buffer_size = 8M\ninnodb_file_per_table = 1\ninnodb_open_files = 400\nmax_connections = 200\nthread_cache_size = 50\nquery_cache_type = 1\nquery_cache_size = 16M\nEOF\n\nsudo systemctl restart mysql\n```\n\n### PostgreSQL Setup\n\n```bash\n# Create Grafana database\nsudo -u postgres createdb grafana\nsudo -u postgres createuser grafana\n\nsudo -u postgres psql <<EOF\nALTER USER grafana WITH PASSWORD 'secure_grafana_password';\nGRANT ALL PRIVILEGES ON DATABASE grafana TO grafana;\n\\q\nEOF\n\n# Optimize PostgreSQL for Grafana\nsudo tee -a /etc/postgresql/13/main/postgresql.conf <<EOF\n# Grafana optimizations\nshared_buffers = 256MB\neffective_cache_size = 1GB\nmaintenance_work_mem = 64MB\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\ndefault_statistics_target = 100\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nwork_mem = 4MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\nEOF\n\nsudo systemctl restart postgresql\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\ngrafana soft nofile 65535\ngrafana hard nofile 65535\nEOF\n\n# Kernel parameters for better performance\nsudo tee -a /etc/sysctl.conf <<EOF\n# Grafana optimizations\nvm.max_map_count = 262144\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nEOF\n\nsudo sysctl -p\n```\n\n### Grafana Performance Tuning\n\n```ini\n# Performance settings in grafana.ini\n[server]\n# Increase read timeout\nread_timeout = 0\n\n[database]\n# Database connection pool optimization\nmax_idle_conn = 2\nmax_open_conn = 0\nconn_max_lifetime = 14400\n\n[dataproxy]\n# Data source proxy timeouts\ntimeout = 30\ndial_timeout = 10\nkeep_alive_seconds = 30\n\n[rendering]\n# Server-side rendering settings\nserver_url = http://localhost:8081/render\ncallback_url = http://localhost:3000/\nconcurrent_render_request_limit = 30\n\n[alerting]\n# Alerting performance\nconcurrent_render_limit = 5\n```\n\n### Caching Configuration\n\n```ini\n# Remote cache configuration\n[remote_cache]\ntype = redis\nconnstr = addr=redis.example.com:6379,pool_size=100,db=0,ssl=false\n\n# Or use memcached\n[remote_cache]\ntype = memcached\nconnstr = memcached.example.com:11211\n```\n\n## Monitoring\n\n### Built-in Metrics\n\n```bash\n# Grafana exposes metrics on /metrics endpoint\ncurl http://localhost:3000/metrics\n\n# Key metrics to monitor:\n# grafana_database_conn_*: Database connections\n# grafana_http_request_*: HTTP request metrics  \n# grafana_page_response_*: Page response times\n# grafana_proxy_*: Data source proxy metrics\n# go_memstats_*: Go runtime memory statistics\n```\n\n### Health Check Endpoint\n\n```bash\n# Health check endpoint\ncurl http://localhost:3000/api/health\n\n# Response format:\n# {\n#   \"commit\": \"abc123\",\n#   \"database\": \"ok\",\n#   \"version\": \"9.3.0\"\n# }\n```\n\n### Alerting Configuration\n\n```yaml\n# /etc/grafana/provisioning/alerting/rules.yml\napiVersion: 1\n\ngroups:\n  - name: grafana-health\n    folder: Infrastructure\n    interval: 1m\n    rules:\n      - uid: grafana_high_memory\n        title: Grafana High Memory Usage\n        condition: A\n        data:\n          - refId: A\n            queryType: ''\n            relativeTimeRange:\n              from: 300\n              to: 0\n            datasourceUid: prometheus\n            model:\n              expr: go_memstats_alloc_bytes{job=\"grafana\"} > 500000000\n              refId: A\n        noDataState: NoData\n        execErrState: Alerting\n        for: 5m\n        annotations:\n          description: \"Grafana memory usage is above 500MB\"\n          summary: \"High memory usage on Grafana instance\"\n```\n\n### Log Analysis\n\n```bash\n# Monitor Grafana logs\nsudo tail -f /var/log/grafana/grafana.log\n\n# Log rotation configuration\nsudo tee /etc/logrotate.d/grafana <<EOF\n/var/log/grafana/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 grafana grafana\n    postrotate\n        systemctl reload grafana-server > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## Backup and Restore\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# backup-grafana.sh\n\nBACKUP_DIR=\"/backup/grafana/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop Grafana for consistent backup\nsudo systemctl stop grafana-server\n\n# Backup SQLite database (if using SQLite)\nif [ -f /var/lib/grafana/grafana.db ]; then\n    cp /var/lib/grafana/grafana.db \"$BACKUP_DIR/grafana.db\"\nfi\n\n# Backup MySQL database (if using MySQL)\nif grep -q \"type = mysql\" /etc/grafana/grafana.ini; then\n    mysqldump -u grafana -p grafana > \"$BACKUP_DIR/grafana-mysql.sql\"\nfi\n\n# Backup PostgreSQL database (if using PostgreSQL)\nif grep -q \"type = postgres\" /etc/grafana/grafana.ini; then\n    pg_dump -U grafana grafana > \"$BACKUP_DIR/grafana-postgres.sql\"\nfi\n\n# Backup configuration\ntar czf \"$BACKUP_DIR/grafana-config.tar.gz\" /etc/grafana/\n\n# Backup plugins\ntar czf \"$BACKUP_DIR/grafana-plugins.tar.gz\" /var/lib/grafana/plugins/\n\n# Backup dashboards via API\nmkdir -p \"$BACKUP_DIR/dashboards\"\ncurl -s \"http://admin:password@localhost:3000/api/search?type=dash-db\" | \\\n    jq -r '.[] | .uid' | while read uid; do\n        curl -s \"http://admin:password@localhost:3000/api/dashboards/uid/$uid\" > \\\n            \"$BACKUP_DIR/dashboards/$uid.json\"\n    done\n\n# Start Grafana\nsudo systemctl start grafana-server\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# restore-grafana.sh\n\nBACKUP_DIR=\"$1\"\nif [ -z \"$BACKUP_DIR\" ]; then\n    echo \"Usage: $0 <backup-directory>\"\n    exit 1\nfi\n\n# Stop Grafana\nsudo systemctl stop grafana-server\n\n# Restore database\nif [ -f \"$BACKUP_DIR/grafana.db\" ]; then\n    cp \"$BACKUP_DIR/grafana.db\" /var/lib/grafana/grafana.db\n    chown grafana:grafana /var/lib/grafana/grafana.db\nfi\n\n# Restore MySQL database\nif [ -f \"$BACKUP_DIR/grafana-mysql.sql\" ]; then\n    mysql -u grafana -p grafana < \"$BACKUP_DIR/grafana-mysql.sql\"\nfi\n\n# Restore PostgreSQL database\nif [ -f \"$BACKUP_DIR/grafana-postgres.sql\" ]; then\n    dropdb grafana && createdb grafana\n    psql -U grafana grafana < \"$BACKUP_DIR/grafana-postgres.sql\"\nfi\n\n# Restore configuration\ntar xzf \"$BACKUP_DIR/grafana-config.tar.gz\" -C /\n\n# Restore plugins\ntar xzf \"$BACKUP_DIR/grafana-plugins.tar.gz\" -C /\n\n# Fix ownership\nsudo chown -R grafana:grafana /var/lib/grafana /etc/grafana\n\n# Start Grafana\nsudo systemctl start grafana-server\n\necho \"Restore completed from: $BACKUP_DIR\"\n```\n\n### Automated Backup\n\n```bash\n# Create cron job for daily backups\necho \"0 2 * * * /usr/local/bin/backup-grafana.sh\" | sudo crontab -\n\n# Backup retention script\nfind /backup/grafana -type d -mtime +30 -exec rm -rf {} \\; 2>/dev/null\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Cannot connect to Grafana web interface**:\n```bash\n# Check service status\nsudo systemctl status grafana-server\n\n# Check logs\nsudo journalctl -u grafana-server -f\n\n# Check port binding\nsudo ss -tlnp | grep :3000\n\n# Test local connection\ncurl -I http://localhost:3000\n```\n\n2. **Database connection issues**:\n```bash\n# Test database connectivity\n# MySQL\nmysql -h localhost -u grafana -p grafana -e \"SELECT 1;\"\n\n# PostgreSQL\npsql -h localhost -U grafana -d grafana -c \"SELECT 1;\"\n\n# Check database logs\nsudo tail -f /var/log/mysql/error.log\nsudo tail -f /var/log/postgresql/postgresql-*.log\n```\n\n3. **Plugin installation failures**:\n```bash\n# Check plugin directory permissions\nls -la /var/lib/grafana/plugins/\n\n# Install plugin manually\nsudo grafana-cli --pluginUrl https://example.com/plugin.zip plugins install custom-plugin\n\n# Check plugin logs\nsudo journalctl -u grafana-server | grep -i plugin\n```\n\n4. **High memory usage**:\n```bash\n# Check Grafana memory usage\nps aux | grep grafana-server\n\n# Monitor memory growth\ntop -p $(pgrep grafana-server)\n\n# Check for memory leaks in logs\nsudo grep -i \"out of memory\" /var/log/grafana/grafana.log\n\n# Restart if needed\nsudo systemctl restart grafana-server\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\nsudo systemctl edit grafana-server\n# Add:\n[Service]\nEnvironment=\"GF_LOG_LEVEL=debug\"\n\nsudo systemctl daemon-reload\nsudo systemctl restart grafana-server\n\n# View debug logs\nsudo journalctl -u grafana-server -f\n```\n\n### Performance Troubleshooting\n\n```bash\n# Check dashboard performance\ncurl -w \"@curl-format.txt\" -s -o /dev/null http://localhost:3000/d/dashboard-uid\n\n# Monitor database queries (if MySQL)\nmysql -e \"SHOW PROCESSLIST;\" | grep grafana\n\n# Check data source response times\ncurl -w \"Time: %{time_total}s\\n\" http://prometheus:9090/api/v1/query?query=up\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update grafana\nsudo yum update grafana\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade grafana\n\n# Arch Linux\nsudo pacman -Syu grafana\n\n# Alpine Linux\napk update\napk upgrade grafana\n\n# openSUSE\nsudo zypper update grafana\n\n# FreeBSD\npkg update\npkg upgrade grafana8\n\n# macOS\nbrew upgrade grafana\n\n# Always restart after updates\nsudo systemctl restart grafana-server\n```\n\n### Plugin Management\n\n```bash\n# List installed plugins\ngrafana-cli plugins ls\n\n# Update all plugins\nsudo grafana-cli plugins update-all\n\n# Install specific plugin\nsudo grafana-cli plugins install grafana-clock-panel\n\n# Remove plugin\nsudo grafana-cli plugins remove grafana-clock-panel\n\n# Install from URL\nsudo grafana-cli --pluginUrl https://example.com/plugin.zip plugins install custom-plugin\n```\n\n### Health Checks\n\n```bash\n#!/bin/bash\n# grafana-health-check.sh\n\n# Check service status\nif ! systemctl is-active grafana-server >/dev/null 2>&1; then\n    echo \"CRITICAL: Grafana service is not running\"\n    exit 2\nfi\n\n# Check web interface\nif ! curl -f -s http://localhost:3000/api/health >/dev/null; then\n    echo \"CRITICAL: Grafana web interface is not responding\"\n    exit 2\nfi\n\n# Check database connectivity\nif ! curl -s http://localhost:3000/api/health | grep -q '\"database\":\"ok\"'; then\n    echo \"WARNING: Database connectivity issues\"\n    exit 1\nfi\n\n# Check disk space\nDISK_USAGE=$(df /var/lib/grafana | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ \"$DISK_USAGE\" -gt 85 ]; then\n    echo \"WARNING: Disk usage is ${DISK_USAGE}%\"\n    exit 1\nfi\n\necho \"OK: Grafana is healthy\"\nexit 0\n```\n\n### Cleanup Tasks\n\n```bash\n# Clean old dashboard versions\nmysql -u grafana -p grafana -e \"DELETE FROM dashboard_version WHERE created < DATE_SUB(NOW(), INTERVAL 90 DAY);\"\n\n# Clean old annotations\nmysql -u grafana -p grafana -e \"DELETE FROM annotation WHERE created < DATE_SUB(NOW(), INTERVAL 30 DAY);\"\n\n# Clean old sessions\nmysql -u grafana -p grafana -e \"DELETE FROM session WHERE expiry < NOW();\"\n\n# Clean old alert notifications\nmysql -u grafana -p grafana -e \"DELETE FROM alert_notification WHERE created < DATE_SUB(NOW(), INTERVAL 30 DAY);\"\n\n# Optimize database tables\nmysql -u grafana -p grafana -e \"OPTIMIZE TABLE dashboard, dashboard_version, annotation, session;\"\n```\n\n## Integration Examples\n\n### Prometheus Data Source\n\n```yaml\n# /etc/grafana/provisioning/datasources/prometheus.yml\napiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    access: proxy\n    url: http://prometheus:9090\n    isDefault: true\n    editable: false\n    jsonData:\n      httpMethod: POST\n      queryTimeout: 60s\n      timeInterval: 15s\n```\n\n### Dashboard Provisioning\n\n```yaml\n# /etc/grafana/provisioning/dashboards/default.yml\napiVersion: 1\n\nproviders:\n  - name: 'default'\n    orgId: 1\n    folder: ''\n    type: file\n    disableDeletion: false\n    editable: true\n    options:\n      path: /var/lib/grafana/dashboards\n```\n\n### Alert Manager Integration\n\n```yaml\n# /etc/grafana/provisioning/alerting/contactpoints.yml\napiVersion: 1\n\ncontactPoints:\n  - name: email-alerts\n    orgId: 1\n    receivers:\n      - uid: email_uid\n        type: email\n        settings:\n          addresses: \"admin@example.com\"\n          subject: \"Grafana Alert\"\n```\n\n### LDAP Configuration\n\n```toml\n# /etc/grafana/ldap.toml\n[[servers]]\nhost = \"ldap.example.com\"\nport = 636\nuse_ssl = true\nstart_tls = false\nssl_skip_verify = false\n\nsearch_filter = \"(sAMAccountName=%s)\"\nsearch_base_dns = [\"ou=Users,dc=example,dc=com\"]\n\nbind_dn = \"cn=grafana,ou=Service Accounts,dc=example,dc=com\"\nbind_password = 'ldap_service_password'\n\n[servers.attributes]\nusername = \"sAMAccountName\"\nname = \"givenName\"\nsurname = \"sn\"\nemail = \"mail\"\nmember_of = \"memberOf\"\n\n[[servers.group_mappings]]\ngroup_dn = \"cn=Grafana Admins,ou=Groups,dc=example,dc=com\"\norg_role = \"Admin\"\ngrafana_admin = true\n```\n\n## Additional Resources\n\n- [Official Documentation](https://grafana.com/docs/grafana/latest/)\n- [GitHub Repository](https://github.com/grafana/grafana)\n- [Plugin Directory](https://grafana.com/grafana/plugins/)\n- [Dashboard Gallery](https://grafana.com/grafana/dashboards/)\n- [Community Forum](https://community.grafana.com/)\n- [Grafana Academy](https://grafana.com/tutorials/)\n- [Best Practices Guide](https://grafana.com/docs/grafana/latest/best-practices/)\n- [Security Documentation](https://grafana.com/docs/grafana/latest/administration/security/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"grafana-installation-guide\" class=\"mobile-header\">Grafana Installation Guide</h1>\n<p class=\"mobile-paragraph\">Grafana is a free and open-source multi-platform analytics and interactive visualization web application. Originally developed by Torkel Ödegaard, Grafana provides charts, graphs, and alerts for the web when connected to supported data sources. It serves as a FOSS alternative to commercial solutions like Datadog, New Relic, or Splunk dashboards, offering enterprise-grade visualization and monitoring without licensing costs, with features like alerting, authentication integration, and extensive plugin ecosystem.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum (2GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 1GB minimum (10GB+ recommended for dashboard storage and logs)</li>\n<li class=\"mobile-list-item\">Network: Stable internet connection for plugins and updates</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with systemd support</li>\n<li class=\"mobile-list-item\">macOS: 10.15+ (Catalina or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 12.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 3000 (default Grafana web interface)</li>\n<li class=\"mobile-list-item\">Port 443/80 (HTTPS/HTTP if using reverse proxy)</li>\n<li class=\"mobile-list-item\">Outbound HTTPS for plugin downloads and updates</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Database (SQLite, MySQL, PostgreSQL) - SQLite included by default</li>\n<li class=\"mobile-list-item\">Data sources (Prometheus, InfluxDB, etc.) for meaningful dashboards</li>\n<li class=\"mobile-list-item\">Web browser with JavaScript support</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Grafana repository\nsudo tee /etc/yum.repos.d/grafana.repo &lt;&lt;EOF\n[grafana]\nname=grafana\nbaseurl=https://packages.grafana.com/oss/rpm\nrepo_gpgcheck=1\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.grafana.com/gpg.key\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nEOF\n\n# Install Grafana\nsudo yum install -y grafana\n\n# Enable and start service\nsudo systemctl enable --now grafana-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index and install prerequisites\nsudo apt update\nsudo apt install -y software-properties-common wget\n\n# Add Grafana GPG key\nwget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\n\n# Add repository\necho &quot;deb https://packages.grafana.com/oss/deb stable main&quot; | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Install Grafana\nsudo apt update\nsudo apt install -y grafana\n\n# Enable and start service\nsudo systemctl enable --now grafana-server\n\n# Configure firewall\nsudo ufw allow 3000</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Grafana from official repositories\nsudo pacman -S grafana\n\n# Optional: Install additional plugins\nsudo pacman -S grafana-zabbix\n\n# Enable and start service\nsudo systemctl enable --now grafana-server\n\n# Configure firewall\nsudo ufw allow 3000</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Grafana\napk add --no-cache grafana\n\n# Create grafana user if not exists\nadduser -D -H -s /sbin/nologin grafana\n\n# Create necessary directories\nmkdir -p /var/lib/grafana /var/log/grafana\nchown -R grafana:grafana /var/lib/grafana /var/log/grafana\n\n# Enable and start service\nrc-update add grafana default\nrc-service grafana start\n\n# Configure firewall\nufw allow 3000</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y grafana\n\n# For latest version, add official repository\nsudo zypper addrepo https://packages.grafana.com/oss/rpm grafana\nsudo zypper refresh\nsudo zypper install -y grafana\n\n# SLES 15 - may need additional repositories\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\nsudo zypper install -y grafana\n\n# Enable and start service\nsudo systemctl enable --now grafana-server\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install grafana\n\n# Start as service\nbrew services start grafana\n\n# Or run manually\ngrafana-server --config=/usr/local/etc/grafana/grafana.ini --homepath /usr/local/share/grafana\n\n# Configuration location: /usr/local/etc/grafana/\n# Alternative: /opt/homebrew/etc/grafana/ (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install grafana8\n\n# Using ports\ncd /usr/ports/www/grafana8\nmake install clean\n\n# Enable in rc.conf\necho &#039;grafana_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice grafana start\n\n# Configuration location: /usr/local/etc/grafana.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install grafana\n\n# Method 2: Using Scoop\nscoop bucket add extras\nscoop install grafana\n\n# Method 3: Manual installation\n# Download from https://grafana.com/grafana/download\n# Extract to C:\\grafana\n# Run grafana-server.exe\n\n# Install as Windows service using NSSM\nnssm install grafana C:\\grafana\\bin\\grafana-server.exe\nnssm set grafana AppDirectory C:\\grafana\nnssm start grafana\n\n# Configuration location: C:\\grafana\\conf\\defaults.ini</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create grafana user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/grafana -s /sbin/nologin -c &quot;Grafana Dashboard&quot; grafana</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/grafana/grafana.ini</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/grafana/grafana.ini</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/grafana/grafana.ini</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/grafana/grafana.ini</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/grafana/grafana.ini</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/grafana/grafana.ini</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/grafana.conf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\grafana\\conf\\custom.ini</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/grafana/grafana.ini\n[server]\n# Change from default port if needed\nhttp_port = 3000\n\n# Set domain for proper URL generation\ndomain = grafana.example.com\nroot_url = https://grafana.example.com\n\n# Protocol for serving (http or https)\nprotocol = https\ncert_file = /etc/grafana/grafana.crt\ncert_key = /etc/grafana/grafana.key\n\n[security]\n# IMPORTANT: Change default admin password\nadmin_user = admin\nadmin_password = secure_admin_password\n\n# Disable user signup\ndisable_initial_admin_creation = false\n\n[auth.anonymous]\n# Disable anonymous access\nenabled = false\n\n[database]\n# Use external database for production\ntype = mysql\nhost = localhost:3306\nname = grafana\nuser = grafana\npassword = secure_grafana_password\n\n[smtp]\n# Configure email for alerts\nenabled = true\nhost = smtp.example.com:587\nuser = grafana@example.com\npassword = smtp_password\nfrom_address = grafana@example.com\nfrom_name = Grafana</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if Grafana is running\nsudo systemctl status grafana-server\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check logs\nsudo journalctl -u grafana-server -f\n\n# Verify configuration\ngrafana-server -config /etc/grafana/grafana.ini -test\n\n# Test login\ncurl -X POST http://localhost:3000/login \\\n  -H &#039;Content-Type: application/json&#039; \\\n  -d &#039;{&quot;user&quot;:&quot;admin&quot;,&quot;password&quot;:&quot;secure_admin_password&quot;}&#039;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Change the default admin password immediately after installation!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Grafana to start on boot\nsudo systemctl enable grafana-server\n\n# Start Grafana\nsudo systemctl start grafana-server\n\n# Stop Grafana\nsudo systemctl stop grafana-server\n\n# Restart Grafana\nsudo systemctl restart grafana-server\n\n# Reload configuration\nsudo systemctl reload grafana-server\n\n# Check status\nsudo systemctl status grafana-server\n\n# View logs\nsudo journalctl -u grafana-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Grafana to start on boot\nrc-update add grafana default\n\n# Start Grafana\nrc-service grafana start\n\n# Stop Grafana\nrc-service grafana stop\n\n# Restart Grafana\nrc-service grafana restart\n\n# Check status\nrc-service grafana status\n\n# View logs\ntail -f /var/log/grafana/grafana.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;grafana_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Grafana\nservice grafana start\n\n# Stop Grafana\nservice grafana stop\n\n# Restart Grafana\nservice grafana restart\n\n# Check status\nservice grafana status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start grafana\nbrew services stop grafana\nbrew services restart grafana\n\n# Check status\nbrew services list | grep grafana\n\n# Manual control\ngrafana-server --config=/usr/local/etc/grafana/grafana.ini</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using NSSM\nnssm start grafana\nnssm stop grafana\nnssm restart grafana\n\n# Using native Windows commands\nStart-Service grafana\nStop-Service grafana\nRestart-Service grafana\n\n# Check status\nGet-Service grafana\n\n# View logs (if configured to use Windows Event Log)\nGet-EventLog -LogName Application -Source Grafana</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"database-backend-configuration\" class=\"mobile-header\">Database Backend Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># MySQL/MariaDB (Recommended for production)\n[database]\ntype = mysql\nhost = mysql.example.com:3306\nname = grafana\nuser = grafana\npassword = secure_grafana_password\nssl_mode = require\nca_cert_path = /etc/ssl/certs/mysql-ca.pem\ncert_path = /etc/ssl/certs/mysql-cert.pem\nkey_path = /etc/ssl/private/mysql-key.pem\nmax_idle_conn = 2\nmax_open_conn = 0\nconn_max_lifetime = 14400\nlog_queries = false\n\n# PostgreSQL\n[database]\ntype = postgres\nhost = postgres.example.com:5432\nname = grafana\nuser = grafana\npassword = secure_grafana_password\nssl_mode = require\nca_cert_path = /etc/ssl/certs/postgres-ca.pem\ncert_path = /etc/ssl/certs/postgres-cert.pem\nkey_path = /etc/ssl/private/postgres-key.pem\nmax_idle_conn = 2\nmax_open_conn = 0\nconn_max_lifetime = 14400</code></pre>\n      </div>\n    </div>\n<h3 id=\"authentication-configuration\" class=\"mobile-header\">Authentication Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># LDAP Authentication\n[auth.ldap]\nenabled = true\nconfig_file = /etc/grafana/ldap.toml\nallow_sign_up = false\nsync_cron = &quot;0 0 1 * * *&quot;\nactive_sync_enabled = true\n\n# OAuth Configuration (GitHub example)\n[auth.github]\nenabled = true\nallow_sign_up = false\nclient_id = your_github_client_id\nclient_secret = your_github_client_secret\nscopes = user:email,read:org\nauth_url = https://github.com/login/oauth/authorize\ntoken_url = https://github.com/login/oauth/access_token\napi_url = https://api.github.com/user\nallowed_domains = example.com\nallowed_organizations = your-organization\n\n# SAML Configuration (Enterprise feature)\n[auth.saml]\nenabled = true\ncertificate_path = /etc/grafana/saml.crt\nprivate_key_path = /etc/grafana/saml.key\nidp_metadata_url = https://idp.example.com/metadata</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Multiple Grafana instances with shared database\n[database]\ntype = mysql\nhost = mysql-cluster.example.com:3306\nname = grafana\nuser = grafana\npassword = secure_password\n\n# Session storage in Redis\n[session]\nprovider = redis\nprovider_config = addr=redis.example.com:6379,pool_size=100,db=0\n\n# Alerting HA\n[unified_alerting]\nenabled = true\nha_peers = grafana-2.example.com:9094,grafana-3.example.com:9094\nha_listen_address = 0.0.0.0:9094\nha_advertise_address = grafana-1.example.com:9094</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/grafana\nupstream grafana {\n    server 127.0.0.1:3000;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name grafana.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name grafana.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/grafana.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/grafana.example.com/privkey.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n\n    location / {\n        proxy_pass http://grafana;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/grafana.conf\n&lt;VirtualHost *:443&gt;\n    ServerName grafana.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/grafana.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/grafana.example.com/privkey.pem\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:3000/\n    ProxyPassReverse / http://localhost:3000/\n    \n    # WebSocket support\n    RewriteEngine On\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://localhost:3000/$1&quot; [P,L]\n    \n    Header always set Strict-Transport-Security &quot;max-age=63072000&quot;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddyfile\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddyfile</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddyfile\">grafana.example.com {\n    reverse_proxy localhost:3000\n    \n    header {\n        Strict-Transport-Security &quot;max-age=63072000&quot;\n        X-Frame-Options &quot;SAMEORIGIN&quot;\n        X-Content-Type-Options &quot;nosniff&quot;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend grafana_frontend\n    bind *:443 ssl crt /etc/haproxy/certs/grafana.pem\n    mode http\n    option httplog\n    \n    default_backend grafana_backend\n\nbackend grafana_backend\n    mode http\n    balance roundrobin\n    option httpchk GET /api/health\n    server grafana1 127.0.0.1:3000 check\n    server grafana2 127.0.0.2:3000 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificate for Grafana\nsudo mkdir -p /etc/grafana/ssl\n\n# Self-signed certificate (development)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/grafana/ssl/grafana.key \\\n  -out /etc/grafana/ssl/grafana.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=grafana.example.com&quot;\n\n# Production: Use Let&#039;s Encrypt\nsudo certbot certonly --standalone -d grafana.example.com\nsudo cp /etc/letsencrypt/live/grafana.example.com/fullchain.pem /etc/grafana/ssl/grafana.crt\nsudo cp /etc/letsencrypt/live/grafana.example.com/privkey.pem /etc/grafana/ssl/grafana.key\n\n# Set permissions\nsudo chown grafana:grafana /etc/grafana/ssl/*\nsudo chmod 600 /etc/grafana/ssl/grafana.key\nsudo chmod 644 /etc/grafana/ssl/grafana.crt</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Security configuration in grafana.ini\n[security]\n# Strong admin password\nadmin_password = $2b$10$very_secure_bcrypt_hash\n\n# Security keys\nsecret_key = your_32_character_secret_key_here\nencryption_provider = secretKey.v1\navailable_encryption_providers = secretKey.v1\n\n# Security policies\ndisable_gravatar = true\ncookie_secure = true\ncookie_samesite = strict\nstrict_transport_security = true\nstrict_transport_security_max_age_seconds = 86400\nx_content_type_options = true\nx_xss_protection = true\ncontent_security_policy = true\n\n# Login protection\ndisable_brute_force_login_protection = false\nlogin_maximum_inactive_lifetime_duration = 7d\nlogin_maximum_lifetime_duration = 30d\n\n# Data source proxy whitelist\ndata_source_proxy_whitelist = 127.0.0.1:9090,prometheus.example.com:9090\n\n[users]\n# Disable user registration\nallow_sign_up = false\nallow_org_create = false\nauto_assign_org = true\nauto_assign_org_role = Viewer</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 3000\nsudo ufw allow 443\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=grafana\nsudo firewall-cmd --permanent --zone=grafana --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=grafana --add-port=3000/tcp\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 3000 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 3000\npass in on $ext_if proto tcp to any port 443\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;Grafana&quot; -Direction Inbound -Protocol TCP -LocalPort 3000 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"mysqlmariadb-setup\" class=\"mobile-header\">MySQL/MariaDB Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Grafana database\nmysql -u root -p &lt;&lt;EOF\nCREATE DATABASE grafana CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;grafana&#039;@&#039;%&#039; IDENTIFIED BY &#039;secure_grafana_password&#039;;\nGRANT ALL PRIVILEGES ON grafana.* TO &#039;grafana&#039;@&#039;%&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Optimize MySQL for Grafana\nsudo tee /etc/mysql/conf.d/grafana.cnf &lt;&lt;EOF\n[mysqld]\n# Grafana optimizations\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_log_buffer_size = 8M\ninnodb_file_per_table = 1\ninnodb_open_files = 400\nmax_connections = 200\nthread_cache_size = 50\nquery_cache_type = 1\nquery_cache_size = 16M\nEOF\n\nsudo systemctl restart mysql</code></pre>\n      </div>\n    </div>\n<h3 id=\"postgresql-setup\" class=\"mobile-header\">PostgreSQL Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Grafana database\nsudo -u postgres createdb grafana\nsudo -u postgres createuser grafana\n\nsudo -u postgres psql &lt;&lt;EOF\nALTER USER grafana WITH PASSWORD &#039;secure_grafana_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE grafana TO grafana;\n\\q\nEOF\n\n# Optimize PostgreSQL for Grafana\nsudo tee -a /etc/postgresql/13/main/postgresql.conf &lt;&lt;EOF\n# Grafana optimizations\nshared_buffers = 256MB\neffective_cache_size = 1GB\nmaintenance_work_mem = 64MB\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\ndefault_statistics_target = 100\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nwork_mem = 4MB\nmin_wal_size = 1GB\nmax_wal_size = 4GB\nEOF\n\nsudo systemctl restart postgresql</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\ngrafana soft nofile 65535\ngrafana hard nofile 65535\nEOF\n\n# Kernel parameters for better performance\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Grafana optimizations\nvm.max_map_count = 262144\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nEOF\n\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"grafana-performance-tuning\" class=\"mobile-header\">Grafana Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Performance settings in grafana.ini\n[server]\n# Increase read timeout\nread_timeout = 0\n\n[database]\n# Database connection pool optimization\nmax_idle_conn = 2\nmax_open_conn = 0\nconn_max_lifetime = 14400\n\n[dataproxy]\n# Data source proxy timeouts\ntimeout = 30\ndial_timeout = 10\nkeep_alive_seconds = 30\n\n[rendering]\n# Server-side rendering settings\nserver_url = http://localhost:8081/render\ncallback_url = http://localhost:3000/\nconcurrent_render_request_limit = 30\n\n[alerting]\n# Alerting performance\nconcurrent_render_limit = 5</code></pre>\n      </div>\n    </div>\n<h3 id=\"caching-configuration\" class=\"mobile-header\">Caching Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># Remote cache configuration\n[remote_cache]\ntype = redis\nconnstr = addr=redis.example.com:6379,pool_size=100,db=0,ssl=false\n\n# Or use memcached\n[remote_cache]\ntype = memcached\nconnstr = memcached.example.com:11211</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-metrics\" class=\"mobile-header\">Built-in Metrics</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Grafana exposes metrics on /metrics endpoint\ncurl http://localhost:3000/metrics\n\n# Key metrics to monitor:\n# grafana_database_conn_*: Database connections\n# grafana_http_request_*: HTTP request metrics  \n# grafana_page_response_*: Page response times\n# grafana_proxy_*: Data source proxy metrics\n# go_memstats_*: Go runtime memory statistics</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-endpoint\" class=\"mobile-header\">Health Check Endpoint</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Health check endpoint\ncurl http://localhost:3000/api/health\n\n# Response format:\n# {\n#   &quot;commit&quot;: &quot;abc123&quot;,\n#   &quot;database&quot;: &quot;ok&quot;,\n#   &quot;version&quot;: &quot;9.3.0&quot;\n# }</code></pre>\n      </div>\n    </div>\n<h3 id=\"alerting-configuration\" class=\"mobile-header\">Alerting Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/grafana/provisioning/alerting/rules.yml\napiVersion: 1\n\ngroups:\n  - name: grafana-health\n    folder: Infrastructure\n    interval: 1m\n    rules:\n      - uid: grafana_high_memory\n        title: Grafana High Memory Usage\n        condition: A\n        data:\n          - refId: A\n            queryType: &#039;&#039;\n            relativeTimeRange:\n              from: 300\n              to: 0\n            datasourceUid: prometheus\n            model:\n              expr: go_memstats_alloc_bytes{job=&quot;grafana&quot;} &gt; 500000000\n              refId: A\n        noDataState: NoData\n        execErrState: Alerting\n        for: 5m\n        annotations:\n          description: &quot;Grafana memory usage is above 500MB&quot;\n          summary: &quot;High memory usage on Grafana instance&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-analysis\" class=\"mobile-header\">Log Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Grafana logs\nsudo tail -f /var/log/grafana/grafana.log\n\n# Log rotation configuration\nsudo tee /etc/logrotate.d/grafana &lt;&lt;EOF\n/var/log/grafana/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 grafana grafana\n    postrotate\n        systemctl reload grafana-server &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-grafana.sh\n\nBACKUP_DIR=&quot;/backup/grafana/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop Grafana for consistent backup\nsudo systemctl stop grafana-server\n\n# Backup SQLite database (if using SQLite)\nif [ -f /var/lib/grafana/grafana.db ]; then\n    cp /var/lib/grafana/grafana.db &quot;$BACKUP_DIR/grafana.db&quot;\nfi\n\n# Backup MySQL database (if using MySQL)\nif grep -q &quot;type = mysql&quot; /etc/grafana/grafana.ini; then\n    mysqldump -u grafana -p grafana &gt; &quot;$BACKUP_DIR/grafana-mysql.sql&quot;\nfi\n\n# Backup PostgreSQL database (if using PostgreSQL)\nif grep -q &quot;type = postgres&quot; /etc/grafana/grafana.ini; then\n    pg_dump -U grafana grafana &gt; &quot;$BACKUP_DIR/grafana-postgres.sql&quot;\nfi\n\n# Backup configuration\ntar czf &quot;$BACKUP_DIR/grafana-config.tar.gz&quot; /etc/grafana/\n\n# Backup plugins\ntar czf &quot;$BACKUP_DIR/grafana-plugins.tar.gz&quot; /var/lib/grafana/plugins/\n\n# Backup dashboards via API\nmkdir -p &quot;$BACKUP_DIR/dashboards&quot;\ncurl -s &quot;http://admin:password@localhost:3000/api/search?type=dash-db&quot; | \\\n    jq -r &#039;.[] | .uid&#039; | while read uid; do\n        curl -s &quot;http://admin:password@localhost:3000/api/dashboards/uid/$uid&quot; &gt; \\\n            &quot;$BACKUP_DIR/dashboards/$uid.json&quot;\n    done\n\n# Start Grafana\nsudo systemctl start grafana-server\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# restore-grafana.sh\n\nBACKUP_DIR=&quot;$1&quot;\nif [ -z &quot;$BACKUP_DIR&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-directory&gt;&quot;\n    exit 1\nfi\n\n# Stop Grafana\nsudo systemctl stop grafana-server\n\n# Restore database\nif [ -f &quot;$BACKUP_DIR/grafana.db&quot; ]; then\n    cp &quot;$BACKUP_DIR/grafana.db&quot; /var/lib/grafana/grafana.db\n    chown grafana:grafana /var/lib/grafana/grafana.db\nfi\n\n# Restore MySQL database\nif [ -f &quot;$BACKUP_DIR/grafana-mysql.sql&quot; ]; then\n    mysql -u grafana -p grafana &lt; &quot;$BACKUP_DIR/grafana-mysql.sql&quot;\nfi\n\n# Restore PostgreSQL database\nif [ -f &quot;$BACKUP_DIR/grafana-postgres.sql&quot; ]; then\n    dropdb grafana &amp;&amp; createdb grafana\n    psql -U grafana grafana &lt; &quot;$BACKUP_DIR/grafana-postgres.sql&quot;\nfi\n\n# Restore configuration\ntar xzf &quot;$BACKUP_DIR/grafana-config.tar.gz&quot; -C /\n\n# Restore plugins\ntar xzf &quot;$BACKUP_DIR/grafana-plugins.tar.gz&quot; -C /\n\n# Fix ownership\nsudo chown -R grafana:grafana /var/lib/grafana /etc/grafana\n\n# Start Grafana\nsudo systemctl start grafana-server\n\necho &quot;Restore completed from: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"automated-backup\" class=\"mobile-header\">Automated Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create cron job for daily backups\necho &quot;0 2 * * * /usr/local/bin/backup-grafana.sh&quot; | sudo crontab -\n\n# Backup retention script\nfind /backup/grafana -type d -mtime +30 -exec rm -rf {} \\; 2&gt;/dev/null</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Cannot connect to Grafana web interface</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status grafana-server\n\n# Check logs\nsudo journalctl -u grafana-server -f\n\n# Check port binding\nsudo ss -tlnp | grep :3000\n\n# Test local connection\ncurl -I http://localhost:3000</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Database connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test database connectivity\n# MySQL\nmysql -h localhost -u grafana -p grafana -e &quot;SELECT 1;&quot;\n\n# PostgreSQL\npsql -h localhost -U grafana -d grafana -c &quot;SELECT 1;&quot;\n\n# Check database logs\nsudo tail -f /var/log/mysql/error.log\nsudo tail -f /var/log/postgresql/postgresql-*.log</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Plugin installation failures</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check plugin directory permissions\nls -la /var/lib/grafana/plugins/\n\n# Install plugin manually\nsudo grafana-cli --pluginUrl https://example.com/plugin.zip plugins install custom-plugin\n\n# Check plugin logs\nsudo journalctl -u grafana-server | grep -i plugin</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>High memory usage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Grafana memory usage\nps aux | grep grafana-server\n\n# Monitor memory growth\ntop -p $(pgrep grafana-server)\n\n# Check for memory leaks in logs\nsudo grep -i &quot;out of memory&quot; /var/log/grafana/grafana.log\n\n# Restart if needed\nsudo systemctl restart grafana-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nsudo systemctl edit grafana-server\n# Add:\n[Service]\nEnvironment=&quot;GF_LOG_LEVEL=debug&quot;\n\nsudo systemctl daemon-reload\nsudo systemctl restart grafana-server\n\n# View debug logs\nsudo journalctl -u grafana-server -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-troubleshooting\" class=\"mobile-header\">Performance Troubleshooting</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check dashboard performance\ncurl -w &quot;@curl-format.txt&quot; -s -o /dev/null http://localhost:3000/d/dashboard-uid\n\n# Monitor database queries (if MySQL)\nmysql -e &quot;SHOW PROCESSLIST;&quot; | grep grafana\n\n# Check data source response times\ncurl -w &quot;Time: %{time_total}s\\n&quot; http://prometheus:9090/api/v1/query?query=up</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update grafana\nsudo yum update grafana\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade grafana\n\n# Arch Linux\nsudo pacman -Syu grafana\n\n# Alpine Linux\napk update\napk upgrade grafana\n\n# openSUSE\nsudo zypper update grafana\n\n# FreeBSD\npkg update\npkg upgrade grafana8\n\n# macOS\nbrew upgrade grafana\n\n# Always restart after updates\nsudo systemctl restart grafana-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"plugin-management\" class=\"mobile-header\">Plugin Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># List installed plugins\ngrafana-cli plugins ls\n\n# Update all plugins\nsudo grafana-cli plugins update-all\n\n# Install specific plugin\nsudo grafana-cli plugins install grafana-clock-panel\n\n# Remove plugin\nsudo grafana-cli plugins remove grafana-clock-panel\n\n# Install from URL\nsudo grafana-cli --pluginUrl https://example.com/plugin.zip plugins install custom-plugin</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# grafana-health-check.sh\n\n# Check service status\nif ! systemctl is-active grafana-server &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: Grafana service is not running&quot;\n    exit 2\nfi\n\n# Check web interface\nif ! curl -f -s http://localhost:3000/api/health &gt;/dev/null; then\n    echo &quot;CRITICAL: Grafana web interface is not responding&quot;\n    exit 2\nfi\n\n# Check database connectivity\nif ! curl -s http://localhost:3000/api/health | grep -q &#039;&quot;database&quot;:&quot;ok&quot;&#039;; then\n    echo &quot;WARNING: Database connectivity issues&quot;\n    exit 1\nfi\n\n# Check disk space\nDISK_USAGE=$(df /var/lib/grafana | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ &quot;$DISK_USAGE&quot; -gt 85 ]; then\n    echo &quot;WARNING: Disk usage is ${DISK_USAGE}%&quot;\n    exit 1\nfi\n\necho &quot;OK: Grafana is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"cleanup-tasks\" class=\"mobile-header\">Cleanup Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean old dashboard versions\nmysql -u grafana -p grafana -e &quot;DELETE FROM dashboard_version WHERE created &lt; DATE_SUB(NOW(), INTERVAL 90 DAY);&quot;\n\n# Clean old annotations\nmysql -u grafana -p grafana -e &quot;DELETE FROM annotation WHERE created &lt; DATE_SUB(NOW(), INTERVAL 30 DAY);&quot;\n\n# Clean old sessions\nmysql -u grafana -p grafana -e &quot;DELETE FROM session WHERE expiry &lt; NOW();&quot;\n\n# Clean old alert notifications\nmysql -u grafana -p grafana -e &quot;DELETE FROM alert_notification WHERE created &lt; DATE_SUB(NOW(), INTERVAL 30 DAY);&quot;\n\n# Optimize database tables\nmysql -u grafana -p grafana -e &quot;OPTIMIZE TABLE dashboard, dashboard_version, annotation, session;&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"prometheus-data-source\" class=\"mobile-header\">Prometheus Data Source</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/grafana/provisioning/datasources/prometheus.yml\napiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    access: proxy\n    url: http://prometheus:9090\n    isDefault: true\n    editable: false\n    jsonData:\n      httpMethod: POST\n      queryTimeout: 60s\n      timeInterval: 15s</code></pre>\n      </div>\n    </div>\n<h3 id=\"dashboard-provisioning\" class=\"mobile-header\">Dashboard Provisioning</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/grafana/provisioning/dashboards/default.yml\napiVersion: 1\n\nproviders:\n  - name: &#039;default&#039;\n    orgId: 1\n    folder: &#039;&#039;\n    type: file\n    disableDeletion: false\n    editable: true\n    options:\n      path: /var/lib/grafana/dashboards</code></pre>\n      </div>\n    </div>\n<h3 id=\"alert-manager-integration\" class=\"mobile-header\">Alert Manager Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/grafana/provisioning/alerting/contactpoints.yml\napiVersion: 1\n\ncontactPoints:\n  - name: email-alerts\n    orgId: 1\n    receivers:\n      - uid: email_uid\n        type: email\n        settings:\n          addresses: &quot;admin@example.com&quot;\n          subject: &quot;Grafana Alert&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"ldap-configuration\" class=\"mobile-header\">LDAP Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"toml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">toml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-toml\"># /etc/grafana/ldap.toml\n[[servers]]\nhost = &quot;ldap.example.com&quot;\nport = 636\nuse_ssl = true\nstart_tls = false\nssl_skip_verify = false\n\nsearch_filter = &quot;(sAMAccountName=%s)&quot;\nsearch_base_dns = [&quot;ou=Users,dc=example,dc=com&quot;]\n\nbind_dn = &quot;cn=grafana,ou=Service Accounts,dc=example,dc=com&quot;\nbind_password = &#039;ldap_service_password&#039;\n\n[servers.attributes]\nusername = &quot;sAMAccountName&quot;\nname = &quot;givenName&quot;\nsurname = &quot;sn&quot;\nemail = &quot;mail&quot;\nmember_of = &quot;memberOf&quot;\n\n[[servers.group_mappings]]\ngroup_dn = &quot;cn=Grafana Admins,ou=Groups,dc=example,dc=com&quot;\norg_role = &quot;Admin&quot;\ngrafana_admin = true</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/docs/grafana/latest/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/grafana/grafana\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/grafana/plugins/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Plugin Directory</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/grafana/dashboards/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Dashboard Gallery</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://community.grafana.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/tutorials/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Grafana Academy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/docs/grafana/latest/best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/docs/grafana/latest/administration/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Documentation</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"18 min","wordCount":3423,"lastBuilt":"2025-09-14T01:30:35.575Z"},{"name":"haproxy","displayName":"Haproxy","slug":"haproxy","description":"Repo for haproxy","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/haproxy","updatedAt":"2025-09-14T01:30:06Z","createdAt":"2025-09-08T03:08:23Z","readmeRaw":"# HAProxy Installation Guide\n\nHigh-performance TCP/HTTP load balancer and reverse proxy for distributing traffic across multiple backend servers. Industry standard for load balancing with enterprise-grade security and reliability.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 2GB RAM minimum, 4GB+ recommended for high-traffic environments\n- Multiple backend servers to load balance (optional for testing)\n- SSL certificates for production HTTPS termination\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt-get update\n\n# Install HAProxy and utilities\nsudo apt-get install -y haproxy haproxy-doc software-properties-common\n\n# For latest version from PPA\nsudo add-apt-repository ppa:vbernat/haproxy-2.8\nsudo apt-get update\nsudo apt-get install -y haproxy=2.8.*\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install HAProxy\nsudo yum install -y haproxy\n\n# For newer versions\nsudo dnf install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy\n```\n\n#### Fedora\n```bash\n# Install HAProxy\nsudo dnf install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-port=8404/tcp  # Stats interface\nsudo firewall-cmd --reload\n```\n\n#### Arch Linux\n```bash\n# Install HAProxy\nsudo pacman -Syu haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy\n```\n\n#### Alpine Linux\n```bash\n# Install HAProxy\nsudo apk update\nsudo apk add haproxy\n\n# Enable and start HAProxy\nsudo rc-update add haproxy default\nsudo service haproxy start\n```\n\n### From Source (Latest Features)\n```bash\n# Install build dependencies\n# Ubuntu/Debian\nsudo apt-get install -y build-essential libssl-dev libpcre3-dev zlib1g-dev liblua5.3-dev libsystemd-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y \"Development Tools\"\nsudo yum install -y openssl-devel pcre-devel zlib-devel lua-devel systemd-devel\n\n# Download latest HAProxy LTS\nHAPROXY_VERSION=\"3.0.5\"\ncd /tmp\nwget \"https://www.haproxy.org/download/3.0/src/haproxy-${HAPROXY_VERSION}.tar.gz\"\ntar xzf haproxy-${HAPROXY_VERSION}.tar.gz\ncd haproxy-${HAPROXY_VERSION}\n\n# Compile with full features\nmake clean\nmake -j$(nproc) TARGET=linux-glibc \\\n    USE_OPENSSL=1 \\\n    USE_ZLIB=1 \\\n    USE_PCRE=1 \\\n    USE_SYSTEMD=1 \\\n    USE_LUA=1 \\\n    USE_PROMEX=1 \\\n    USE_THREAD=1 \\\n    USE_CPU_AFFINITY=1 \\\n    USE_TFO=1 \\\n    USE_NS=1 \\\n    USE_DL=1 \\\n    USE_RT=1\n\n# Install HAProxy\nsudo make install\nsudo mkdir -p /etc/haproxy /var/lib/haproxy /var/log/haproxy\nsudo useradd --system --home /var/lib/haproxy --shell /bin/false haproxy\nsudo chown -R haproxy:haproxy /var/lib/haproxy /var/log/haproxy\n\n# Create systemd service\nsudo tee /etc/systemd/system/haproxy.service > /dev/null <<EOF\n[Unit]\nDescription=HAProxy Load Balancer\nDocumentation=man:haproxy(1)\nDocumentation=file:/usr/share/doc/haproxy/configuration.txt\nAfter=network.target\n\n[Service]\nType=notify\nExecStart=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock\nExecReload=/bin/kill -USR2 \\$MAINPID\nExecStop=/bin/kill -USR1 \\$MAINPID\nKillMode=mixed\nRestart=on-failure\nSuccessExitStatus=143\nKillSignal=SIGTERM\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/lib/haproxy\nReadWritePaths=/var/log/haproxy\nReadWritePaths=/run\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy\n```\n\n### Using Docker\n```bash\n# Create HAProxy configuration directory\nmkdir -p ~/haproxy/{config,ssl,logs}\n\n# Create basic configuration\ncat > ~/haproxy/config/haproxy.cfg <<EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n    \n    # SSL configuration\n    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n    ssl-default-server-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS\n    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor\n    option http-server-close\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    timeout http-keep-alive 4000\n    timeout check 3000\n\n# Frontend\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /usr/local/etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # Redirect HTTP to HTTPS\n    redirect scheme https code 301 if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n    http-response set-header X-Frame-Options \"SAMEORIGIN\"\n    http-response set-header X-Content-Type-Options \"nosniff\"\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    \n    default_backend web_servers\n\n# Backend\nbackend web_servers\n    balance roundrobin\n    option httpchk GET /health\n    http-check expect status 200\n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\n\n# Stats interface\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if TRUE\nEOF\n\n# Run HAProxy container\ndocker run -d \\\n  --name haproxy \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -p 8404:8404 \\\n  -v ~/haproxy/config:/usr/local/etc/haproxy:ro \\\n  -v ~/haproxy/ssl:/usr/local/etc/haproxy/ssl:ro \\\n  -v ~/haproxy/logs:/var/log/haproxy \\\n  haproxy:latest\n```\n\n## Production Configuration\n\n### Enterprise Production Configuration\n```bash\n# Backup original configuration\nsudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup\n\n# Create comprehensive production configuration\nsudo tee /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n#---------------------------------------------------------------------\n# HAProxy Enterprise Production Configuration\n# Version: 3.0+ LTS\n#---------------------------------------------------------------------\n\nglobal\n    log 127.0.0.1:514 local0 info\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\n    # SSL/TLS configuration (2024 best practices)\n    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets prefer-client-ciphers\n    \n    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets\n\n    # DH parameters for perfect forward secrecy\n    ssl-dh-param-file /etc/haproxy/ssl/dhparam.pem\n    \n    # Performance tuning\n    maxconn 40000\n    nbthread 4\n    cpu-map auto:1/1-4 0-3\n    \n    # Logging\n    log-tag haproxy-prod\n    \n    # Security\n    insecure-fork-wanted\n    insecure-setuid-wanted\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor except 127.0.0.0/8\n    option http-server-close\n    option redispatch\n    \n    # Timeouts\n    timeout connect 10s\n    timeout client 1m\n    timeout server 1m\n    timeout http-keep-alive 10s\n    timeout check 10s\n    timeout tunnel 2h\n    \n    # Retries\n    retries 3\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/css text/javascript application/javascript application/json application/xml\n    \n    # Default error pages\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\n#---------------------------------------------------------------------\n# Frontend Configuration\n#---------------------------------------------------------------------\n\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1 crt-ignore-err all\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n    http-response set-header X-Frame-Options \"SAMEORIGIN\"\n    http-response set-header X-Content-Type-Options \"nosniff\"\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    http-response set-header Referrer-Policy \"strict-origin-when-cross-origin\"\n    http-response set-header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'\"\n    \n    # Rate limiting\n    stick-table type ip size 100k expire 30s store http_req_rate(10s)\n    http-request track-sc0 src\n    http-request deny if { sc_http_req_rate(0) gt 20 }\n    \n    # Block bad bots and crawlers\n    acl is_bot hdr_sub(User-Agent) -i bot crawler spider scraper\n    http-request deny if is_bot\n    \n    # ACLs for routing\n    acl is_api path_beg /api/\n    acl is_admin path_beg /admin/\n    acl is_static path_beg /static/ /css/ /js/ /images/\n    acl is_websocket hdr(Upgrade) -i websocket\n    \n    # Force HTTPS\n    redirect scheme https code 301 if !{ ssl_fc }\n    \n    # Routing rules\n    use_backend api_servers if is_api\n    use_backend admin_servers if is_admin\n    use_backend static_servers if is_static\n    use_backend websocket_servers if is_websocket\n    default_backend web_servers\n\n#---------------------------------------------------------------------\n# Backend Configurations\n#---------------------------------------------------------------------\n\n# Main web servers\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health HTTP/1.1\\r\\nHost:\\ example.com\n    http-check expect status 200\n    \n    # Health check configuration\n    default-server inter 2000 rise 2 fall 3 slowstart 60s maxconn 250 maxqueue 256 weight 100\n    \n    server web1 192.168.1.10:8080 check cookie web1\n    server web2 192.168.1.11:8080 check cookie web2\n    server web3 192.168.1.12:8080 check cookie web3\n    server web4 192.168.1.13:8080 check cookie web4 backup\n    \n    # Stick table for session persistence\n    stick-table type ip size 200k expire 30m\n    stick on src\n\n# API servers backend\nbackend api_servers\n    balance roundrobin\n    option httpchk GET /api/health HTTP/1.1\\r\\nHost:\\ api.example.com\n    http-check expect rstring ^OK$\n    \n    # Enable HTTP/2 to backend\n    server api1 192.168.1.20:3000 check proto h2 verify none\n    server api2 192.168.1.21:3000 check proto h2 verify none\n    server api3 192.168.1.22:3000 check proto h2 verify none\n\n# Admin backend (restricted access)\nbackend admin_servers\n    balance source\n    option httpchk GET /admin/health\n    http-check expect status 200\n    \n    # IP whitelist for admin access\n    http-request deny unless { src 192.168.1.0/24 10.0.0.0/8 }\n    \n    server admin1 192.168.1.30:9000 check\n\n# Static content servers\nbackend static_servers\n    balance roundrobin\n    option httpchk GET /health.txt\n    http-check expect string \"OK\"\n    \n    # Cache control\n    http-response set-header Cache-Control \"public, max-age=86400\"\n    \n    server static1 192.168.1.40:8080 check\n    server static2 192.168.1.41:8080 check\n\n# WebSocket servers\nbackend websocket_servers\n    balance leastconn\n    option httpchk GET /ws/health\n    http-check expect status 101\n    \n    # WebSocket specific settings\n    timeout tunnel 3600s\n    \n    server ws1 192.168.1.50:8080 check\n    server ws2 192.168.1.51:8080 check\n\n#---------------------------------------------------------------------\n# Database Load Balancing (TCP Mode)\n#---------------------------------------------------------------------\n\n# MySQL Master-Slave Load Balancing\nfrontend mysql_frontend\n    bind *:3306\n    mode tcp\n    default_backend mysql_servers\n\nbackend mysql_servers\n    mode tcp\n    balance leastconn\n    option mysql-check user haproxy_check\n    \n    # MySQL health checks\n    server mysql-master 192.168.1.60:3306 check weight 1000\n    server mysql-slave1 192.168.1.61:3306 check weight 100 backup\n    server mysql-slave2 192.168.1.62:3306 check weight 100 backup\n\n# PostgreSQL Load Balancing\nfrontend postgresql_frontend\n    bind *:5432\n    mode tcp\n    default_backend postgresql_servers\n\nbackend postgresql_servers\n    mode tcp\n    balance roundrobin\n    option pgsql-check user haproxy_check\n    \n    server postgres1 192.168.1.70:5432 check\n    server postgres2 192.168.1.71:5432 check\n\n# Redis Cluster Load Balancing\nfrontend redis_frontend\n    bind *:6379\n    mode tcp\n    default_backend redis_servers\n\nbackend redis_servers\n    mode tcp\n    balance first\n    option redis-check\n    \n    server redis1 192.168.1.80:6379 check\n    server redis2 192.168.1.81:6379 check backup\n\n#---------------------------------------------------------------------\n# Statistics and Monitoring\n#---------------------------------------------------------------------\n\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if { src 192.168.1.0/24 }\n    stats auth admin:secure_stats_password\n    \n    # Enhanced statistics\n    stats show-legends\n    stats show-modules\n    stats realm \"HAProxy Statistics\"\n    \n    # Prometheus metrics (if compiled with USE_PROMEX)\n    http-request use-service prometheus-exporter if { path /metrics }\n\n#---------------------------------------------------------------------\n# Advanced Features\n#---------------------------------------------------------------------\n\n# Global rate limiting\nbackend rate_limit_backend\n    stick-table type ip size 100k expire 30s store gpc0,http_req_rate(10s)\n\n# DDoS protection\nfrontend ddos_protection\n    bind *:80\n    \n    # Track client IPs\n    stick-table type ip size 100k expire 30s store gpc0,http_req_rate(10s),http_err_rate(10s)\n    http-request track-sc0 src table rate_limit_backend\n    \n    # Block clients exceeding rate limits\n    http-request deny if { sc_http_req_rate(0) gt 50 }\n    http-request deny if { sc_http_err_rate(0) gt 10 }\n    \n    default_backend web_servers\n\n# Health check backend for external monitoring\nbackend health_check\n    mode http\n    http-request return status 200 content-type text/plain string \"HAProxy is healthy\"\nEOF\n\n# Test configuration\nsudo haproxy -c -f ~/haproxy/config/haproxy.cfg\n```\n\n## SSL/TLS Configuration and Security\n\n### Advanced SSL Termination\n```bash\n# Generate strong DH parameters\nsudo openssl dhparam -out /etc/haproxy/ssl/dhparam.pem 4096\n\n# Create SSL certificate bundle\nsudo mkdir -p /etc/haproxy/ssl\n\n# Self-signed certificate for testing\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/haproxy/ssl/example.com.key \\\n  -out /etc/haproxy/ssl/example.com.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=example.com\"\n\n# Combine certificate and key for HAProxy\nsudo cat /etc/haproxy/ssl/example.com.crt /etc/haproxy/ssl/example.com.key | sudo tee /etc/haproxy/ssl/example.com.pem\n\n# Production: Let's Encrypt certificates\nsudo certbot certonly --standalone -d example.com -d www.example.com\nsudo cat /etc/letsencrypt/live/example.com/fullchain.pem /etc/letsencrypt/live/example.com/privkey.pem | sudo tee /etc/haproxy/ssl/example.com.pem\n\n# Set proper permissions\nsudo chmod 600 /etc/haproxy/ssl/*.pem\nsudo chown haproxy:haproxy /etc/haproxy/ssl/*.pem\n\n# Create certificate renewal script\nsudo tee /usr/local/bin/haproxy-ssl-renewal.sh > /dev/null <<'EOF'\n#!/bin/bash\nCERT_PATH=\"/etc/letsencrypt/live\"\nHAPROXY_CERT_DIR=\"/etc/haproxy/ssl\"\n\n# Renew certificates\ncertbot renew --quiet --pre-hook \"systemctl stop haproxy\" --post-hook \"systemctl start haproxy\"\n\n# Update HAProxy certificate bundles\nfor domain in $(ls ${CERT_PATH}/); do\n    if [ -f \"${CERT_PATH}/${domain}/fullchain.pem\" ]; then\n        cat \"${CERT_PATH}/${domain}/fullchain.pem\" \"${CERT_PATH}/${domain}/privkey.pem\" > \"${HAPROXY_CERT_DIR}/${domain}.pem\"\n        chmod 600 \"${HAPROXY_CERT_DIR}/${domain}.pem\"\n        chown haproxy:haproxy \"${HAPROXY_CERT_DIR}/${domain}.pem\"\n    fi\ndone\n\n# Reload HAProxy configuration\nsystemctl reload haproxy\n\necho \"SSL certificates updated for HAProxy\"\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-ssl-renewal.sh\n\n# Schedule certificate renewal\necho \"0 3 * * 1 root /usr/local/bin/haproxy-ssl-renewal.sh\" | sudo tee -a /etc/crontab\n```\n\n### Security Hardening Configuration\n```bash\n# Create security-focused configuration additions\nsudo tee /etc/haproxy/conf.d/security.cfg > /dev/null <<EOF\n#---------------------------------------------------------------------\n# Security Configuration\n#---------------------------------------------------------------------\n\nglobal\n    # Security settings\n    tune.ssl.default-dh-param 2048\n    tune.ssl.capture-buffer-size 0\n    tune.ssl.maxrecord 1460\n    \n    # Disable SSLv3 and weak ciphers\n    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11\n\ndefaults\n    # Hide server information\n    option hide-version\n    \n    # Security headers for all responses\n    http-response del-header Server\n    http-response del-header X-Powered-By\n    \n    # Request size limits\n    http-request deny if { req.body_size gt 10000000 }  # 10MB limit\n    \n    # Block suspicious request methods\n    acl blocked_methods method TRACE CONNECT\n    http-request deny if blocked_methods\n    \n    # Block requests with suspicious headers\n    acl suspicious_headers hdr_cnt(host) gt 1\n    acl suspicious_headers hdr_cnt(content-length) gt 1\n    http-request deny if suspicious_headers\n\n# Rate limiting configuration\nbackend rate_limit_abuse\n    stick-table type ip size 100k expire 30s store gpc0,gpc1,http_req_rate(10s),http_err_rate(10s),conn_rate(10s)\n\nfrontend rate_limiting\n    # Track requests per IP\n    http-request track-sc0 src table rate_limit_abuse\n    \n    # Deny clients that exceed rate limits\n    http-request deny if { sc_http_req_rate(0) gt 100 }\n    http-request deny if { sc_conn_rate(0) gt 20 }\n    http-request deny if { sc_http_err_rate(0) gt 10 }\n    \n    # Slow down abusive clients\n    http-request set-var(req.delay) int(1000) if { sc_http_req_rate(0) gt 50 }\n    http-request lua.delay_request if { var(req.delay) -m found }\n\n# WAF-like filtering\nfrontend security_frontend\n    # Block common attacks\n    acl is_sql_injection path_reg -i .*(union|select|insert|delete|update|drop|create|alter|exec|script|javascript|vbscript|onload|onerror|onclick).*\n    acl is_xss path_reg -i .*(script|iframe|object|embed|form|img|svg|math|details|svg).*\n    acl is_path_traversal path_reg -i .*(\\.\\./|\\.\\.\\\\|%2e%2e%2f|%2e%2e\\\\).*\n    \n    http-request deny if is_sql_injection\n    http-request deny if is_xss\n    http-request deny if is_path_traversal\n    \n    # GeoIP blocking (requires GeoIP data)\n    # http-request deny if { src,map_ip(/etc/haproxy/geoip/country.map) -i CN RU }\n\nEOF\n\n# Include security configuration\necho \"include /etc/haproxy/conf.d/*.cfg\" | sudo tee -a /etc/haproxy/haproxy.cfg\n```\n\n## Advanced Load Balancing Strategies\n\n### Multi-Tier Application Load Balancing\n```bash\nsudo tee /etc/haproxy/haproxy.cfg > /dev/null <<EOF\nglobal\n    log stdout local0\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    timeout connect 5s\n    timeout client 50s\n    timeout server 50s\n\n#---------------------------------------------------------------------\n# Application Frontend with Advanced Routing\n#---------------------------------------------------------------------\n\nfrontend app_frontend\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # ACLs for microservices routing\n    acl is_user_service path_beg /api/users/\n    acl is_order_service path_beg /api/orders/\n    acl is_payment_service path_beg /api/payments/\n    acl is_notification_service path_beg /api/notifications/\n    acl is_admin_panel path_beg /admin/\n    acl is_monitoring path_beg /monitoring/\n    \n    # Geographic routing\n    acl is_us_traffic src 192.168.1.0/24\n    acl is_eu_traffic src 192.168.2.0/24\n    acl is_asia_traffic src 192.168.3.0/24\n    \n    # Device detection\n    acl is_mobile hdr_reg(User-Agent) -i (mobile|android|iphone|ipad)\n    acl is_desktop hdr_reg(User-Agent) -i (windows|macos|linux)\n    \n    # Routing decisions\n    use_backend user_service_us if is_user_service is_us_traffic\n    use_backend user_service_eu if is_user_service is_eu_traffic\n    use_backend order_service if is_order_service\n    use_backend payment_service if is_payment_service\n    use_backend notification_service if is_notification_service\n    use_backend admin_panel if is_admin_panel\n    use_backend monitoring_backend if is_monitoring\n    use_backend mobile_servers if is_mobile\n    default_backend web_servers\n\n# User Service Backends (Geographic)\nbackend user_service_us\n    balance roundrobin\n    option httpchk GET /api/users/health\n    http-check expect status 200\n    server user-us-1 192.168.1.100:3001 check\n    server user-us-2 192.168.1.101:3001 check\n    server user-us-3 192.168.1.102:3001 check\n\nbackend user_service_eu\n    balance roundrobin\n    option httpchk GET /api/users/health\n    server user-eu-1 192.168.2.100:3001 check\n    server user-eu-2 192.168.2.101:3001 check\n\n# Microservices Backends\nbackend order_service\n    balance leastconn\n    option httpchk GET /api/orders/health\n    server order-1 192.168.1.110:3002 check\n    server order-2 192.168.1.111:3002 check\n    server order-3 192.168.1.112:3002 check\n\nbackend payment_service\n    balance roundrobin\n    option httpchk GET /api/payments/health\n    # Enhanced security for payment service\n    http-request set-header X-Forwarded-Proto https\n    http-request add-header X-Client-IP %[src]\n    server payment-1 192.168.1.120:3003 check ssl verify none\n    server payment-2 192.168.1.121:3003 check ssl verify none\n\nbackend notification_service\n    balance roundrobin\n    option httpchk GET /api/notifications/health\n    server notification-1 192.168.1.130:3004 check\n    server notification-2 192.168.1.131:3004 check\n\n# Admin Panel Backend (Restricted)\nbackend admin_panel\n    balance source\n    option httpchk GET /admin/health\n    http-check expect status 200\n    \n    # Additional security\n    http-request add-header X-Admin-Access \"true\"\n    timeout server 2m\n    \n    server admin-1 192.168.1.140:9000 check\n\n# Mobile-Optimized Backend\nbackend mobile_servers\n    balance roundrobin\n    option httpchk GET /mobile/health\n    # Mobile-specific optimizations\n    compression algo gzip\n    compression type text/html text/css application/javascript application/json\n    server mobile-1 192.168.1.150:8080 check\n    server mobile-2 192.168.1.151:8080 check\n\n#---------------------------------------------------------------------\n# Monitoring and Statistics\n#---------------------------------------------------------------------\n\nlisten stats\n    bind *:8404 ssl crt /etc/haproxy/ssl/stats.pem\n    stats enable\n    stats uri /\n    stats refresh 5s\n    stats admin if { src 192.168.1.0/24 }\n    stats auth admin:secure_stats_password\n    stats realm \"HAProxy Statistics\"\n    \n    # Prometheus metrics endpoint\n    http-request use-service prometheus-exporter if { path /metrics }\n    \n    # JSON stats API\n    http-request use-service prometheus-exporter if { path /stats/json }\n\n# Health check endpoint for external monitoring\nlisten health_check\n    bind *:8080\n    mode http\n    monitor-uri /health\n    option httplog\n    \n    acl site_dead nbsrv(web_servers) lt 1\n    acl api_dead nbsrv(api_servers) lt 1\n    \n    monitor fail if site_dead\n    monitor fail if api_dead\nEOF\n```\n\n### Global Load Balancing with DNS\n```bash\n# Integration with external DNS load balancing\nsudo tee /etc/haproxy/haproxy-dns.cfg > /dev/null <<EOF\nglobal\n    # DNS resolution for dynamic backends\n    dns-resolver dns1\n        nameserver dns1 8.8.8.8:53\n        nameserver dns2 8.8.4.4:53\n        resolve_retries 3\n        timeout retry 1s\n        hold nx 30s\n        hold other 30s\n        hold refused 30s\n        hold timeout 30s\n        hold valid 10s\n\ndefaults\n    mode http\n    timeout connect 5s\n    timeout client 30s\n    timeout server 30s\n\n# Dynamic backend resolution\nbackend dynamic_backend\n    balance roundrobin\n    option httpchk GET /health\n    \n    # Servers resolved via DNS\n    server-template web- 3 web.example.com:80 check resolvers dns1\n    server-template api- 2 api.example.com:80 check resolvers dns1\n\n# Service discovery integration\nbackend consul_backend\n    balance roundrobin\n    option httpchk GET /health\n    \n    # Consul service discovery\n    server-template consul- 3 _web._tcp.service.consul:80 check resolvers dns1\nEOF\n```\n\n## High Availability and Clustering\n\n### HAProxy Keepalived Setup\n```bash\n# Install keepalived for HA\nsudo apt install -y keepalived  # Ubuntu/Debian\nsudo yum install -y keepalived  # RHEL/CentOS\n\n# Configure keepalived on primary HAProxy\nsudo tee /etc/keepalived/keepalived.conf > /dev/null <<EOF\n! Configuration File for keepalived\n\nglobal_defs {\n    router_id HAProxy_Primary\n    vrrp_skip_check_adv_addr\n    vrrp_strict\n    vrrp_garp_interval 0\n    vrrp_gna_interval 0\n    script_user root\n    enable_script_security\n}\n\n# Health check script\nvrrp_script chk_haproxy {\n    script \"/usr/bin/killall -0 haproxy\"\n    interval 2\n    weight 2\n    fall 3\n    rise 2\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface eth0\n    virtual_router_id 51\n    priority 110\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass secure_vrrp_password\n    }\n    virtual_ipaddress {\n        192.168.1.100/24\n    }\n    track_script {\n        chk_haproxy\n    }\n    notify_master /etc/keepalived/master.sh\n    notify_backup /etc/keepalived/backup.sh\n}\nEOF\n\n# Create notification scripts\nsudo tee /etc/keepalived/master.sh > /dev/null <<'EOF'\n#!/bin/bash\necho \"$(date): Became MASTER\" >> /var/log/keepalived.log\n# Add any additional master setup commands here\nEOF\n\nsudo tee /etc/keepalived/backup.sh > /dev/null <<'EOF'\n#!/bin/bash\necho \"$(date): Became BACKUP\" >> /var/log/keepalived.log\n# Add any additional backup setup commands here\nEOF\n\nsudo chmod +x /etc/keepalived/{master,backup}.sh\nsudo systemctl enable --now keepalived\n\n# Configure backup HAProxy with lower priority (100 instead of 110)\n```\n\n### Multi-Site Load Balancing\n```bash\n# Configure multi-site load balancing\nsudo tee /etc/haproxy/haproxy-multisite.cfg > /dev/null <<EOF\nglobal\n    log stdout local0\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    timeout connect 5s\n    timeout client 30s\n    timeout server 30s\n\n# Frontend for multi-site routing\nfrontend multisite_frontend\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # Site detection based on headers\n    acl is_site_a hdr(host) -i site-a.example.com\n    acl is_site_b hdr(host) -i site-b.example.com\n    acl is_site_c hdr(host) -i site-c.example.com\n    \n    # Geographic routing based on source IP\n    acl is_americas src 10.1.0.0/16\n    acl is_europe src 10.2.0.0/16\n    acl is_asia src 10.3.0.0/16\n    \n    # Route to appropriate backends\n    use_backend site_a_americas if is_site_a is_americas\n    use_backend site_a_europe if is_site_a is_europe\n    use_backend site_a_asia if is_site_a is_asia\n    use_backend site_b_backend if is_site_b\n    use_backend site_c_backend if is_site_c\n    \n    default_backend default_site\n\n# Regional backends\nbackend site_a_americas\n    balance leastconn\n    option httpchk GET /health\n    server site-a-us-1 us-east-1.example.com:80 check\n    server site-a-us-2 us-west-2.example.com:80 check\n\nbackend site_a_europe\n    balance leastconn\n    option httpchk GET /health\n    server site-a-eu-1 eu-west-1.example.com:80 check\n    server site-a-eu-2 eu-central-1.example.com:80 check\n\nbackend site_a_asia\n    balance leastconn\n    option httpchk GET /health\n    server site-a-ap-1 ap-southeast-1.example.com:80 check\n    server site-a-ap-2 ap-northeast-1.example.com:80 check\nEOF\n```\n\n## Monitoring and Observability\n\n### Prometheus Integration\n```bash\n# Configure HAProxy for Prometheus scraping\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\n# Prometheus metrics endpoint\nfrontend prometheus_frontend\n    bind *:8405\n    http-request use-service prometheus-exporter if { path /metrics }\n    http-request deny\nEOF\n\n# Create HAProxy exporter configuration\nsudo tee /etc/systemd/system/haproxy-exporter.service > /dev/null <<EOF\n[Unit]\nDescription=HAProxy Exporter for Prometheus\nAfter=network.target\n\n[Service]\nType=simple\nUser=haproxy\nExecStart=/usr/local/bin/haproxy_exporter \\\n    --haproxy.scrape-uri=\"http://admin:secure_stats_password@localhost:8404/stats;csv\" \\\n    --web.listen-address=\"0.0.0.0:9101\"\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Download HAProxy exporter\nHAPROXY_EXPORTER_VERSION=\"0.15.0\"\nwget https://github.com/prometheus/haproxy_exporter/releases/download/v${HAPROXY_EXPORTER_VERSION}/haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64.tar.gz\ntar xzf haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64.tar.gz\nsudo cp haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64/haproxy_exporter /usr/local/bin/\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy-exporter\n```\n\n### Comprehensive Logging\n```bash\n# Configure rsyslog for HAProxy\nsudo tee /etc/rsyslog.d/49-haproxy.conf > /dev/null <<EOF\n# HAProxy log configuration\n\\$ModLoad imudp\n\\$UDPServerRun 514\n\\$UDPServerAddress 127.0.0.1\n\n# HAProxy logs\nlocal0.*    /var/log/haproxy/haproxy.log\n& stop\n\n# Separate access and error logs\nlocal0.info /var/log/haproxy/access.log\nlocal0.err  /var/log/haproxy/error.log\nlocal0.warning /var/log/haproxy/warning.log\nEOF\n\n# Create log directory\nsudo mkdir -p /var/log/haproxy\nsudo chown syslog:adm /var/log/haproxy\n\n# Configure log rotation\nsudo tee /etc/logrotate.d/haproxy > /dev/null <<EOF\n/var/log/haproxy/*.log {\n    daily\n    rotate 30\n    missingok\n    notifempty\n    compress\n    delaycompress\n    postrotate\n        /bin/kill -HUP \\`cat /var/run/rsyslogd.pid 2>/dev/null\\` 2>/dev/null || true\n    endscript\n}\nEOF\n\nsudo systemctl restart rsyslog\nsudo systemctl reload haproxy\n```\n\n## Performance Optimization\n\n### System-Level Tuning\n```bash\n# Kernel optimization for HAProxy\nsudo tee -a /etc/sysctl.conf > /dev/null <<EOF\n# HAProxy performance tuning\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_max_tw_buckets = 400000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 15000 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 16777216\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 65536 16777216\nnet.ipv4.tcp_wmem = 4096 65536 16777216\nfs.file-max = 100000\nvm.swappiness = 1\nEOF\n\nsudo sysctl -p\n\n# Set resource limits\nsudo tee -a /etc/security/limits.conf > /dev/null <<EOF\nhaproxy soft nofile 65535\nhaproxy hard nofile 65535\nhaproxy soft nproc 65535\nhaproxy hard nproc 65535\nEOF\n\n# Optimize HAProxy service\nsudo tee /etc/systemd/system/haproxy.service.d/performance.conf > /dev/null <<EOF\n[Service]\nLimitNOFILE=65535\nLimitNPROC=65535\nExecStart=\nExecStart=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock\nExecReload=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -c -q\nExecReload=/bin/kill -USR2 \\$MAINPID\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart haproxy\n```\n\n### Advanced Performance Configuration\n```bash\nsudo tee /etc/haproxy/performance.cfg > /dev/null <<EOF\nglobal\n    # Performance optimization\n    maxconn 40000\n    nbthread 8\n    cpu-map auto:1/1-8 0-7\n    \n    # Memory optimization\n    tune.maxrewrite 1024\n    tune.bufsize 32768\n    \n    # Connection optimization\n    tune.maxaccept 500\n    tune.recv_enough 10000\n    \n    # SSL optimization\n    tune.ssl.default-dh-param 2048\n    tune.ssl.maxrecord 1460\n    tune.ssl.capture-buffer-size 0\n    \n    # Compression\n    tune.comp.maxlevel 6\n\ndefaults\n    # Performance settings\n    maxconn 8000\n    \n    # Timeouts\n    timeout connect 3s\n    timeout client 25s\n    timeout server 25s\n    timeout tunnel 3600s\n    timeout http-keep-alive 1s\n    timeout http-request 15s\n    timeout queue 30s\n    timeout tarpit 60s\n    \n    # Keep-alive optimization\n    option http-keep-alive\n    option prefer-last-server\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/css text/javascript application/javascript application/json application/xml\n\n# High-performance backend configuration\nbackend high_performance_backend\n    balance leastconn\n    option httpchk GET /health\n    http-check expect status 200\n    \n    # Connection pooling\n    option http-reuse always\n    \n    # Server configuration with optimal settings\n    default-server inter 1000 fastinter 500 downinter 2000 rise 2 fall 3 slowstart 30s maxconn 1000 maxqueue 256 weight 100\n    \n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\n    server web4 192.168.1.13:8080 check\nEOF\n```\n\n## Backup and Disaster Recovery\n\n### Configuration Management and Backup\n```bash\nsudo tee /usr/local/bin/haproxy-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/haproxy\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{config,ssl,stats,logs}\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/config/haproxy-config-${DATE}.tar.gz \\\n    /etc/haproxy/ \\\n    /etc/systemd/system/haproxy.service* \\\n    /etc/keepalived/\n\n# Backup SSL certificates\ntar -czf ${BACKUP_DIR}/ssl/haproxy-ssl-${DATE}.tar.gz \\\n    /etc/haproxy/ssl/ \\\n    /etc/letsencrypt/\n\n# Backup statistics and runtime state\necho \"show stat\" | socat stdio /run/haproxy/admin.sock > ${BACKUP_DIR}/stats/haproxy-stats-${DATE}.txt\necho \"show info\" | socat stdio /run/haproxy/admin.sock > ${BACKUP_DIR}/stats/haproxy-info-${DATE}.txt\necho \"show sess\" | socat stdio /run/haproxy/admin.sock > ${BACKUP_DIR}/stats/haproxy-sessions-${DATE}.txt\n\n# Backup recent logs\nfind /var/log/haproxy -name \"*.log\" -mtime -1 -exec tar -czf ${BACKUP_DIR}/logs/haproxy-logs-${DATE}.tar.gz {} +\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://haproxy-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination haproxy-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://haproxy-backups/\n\n# Keep only last 15 backups\nfind ${BACKUP_DIR} -name \"haproxy-*\" -type f -mtime +15 -delete\n\n# Test configuration validity\nhaproxy -c -f /etc/haproxy/haproxy.cfg\n\necho \"HAProxy backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-backup.sh\n\n# Schedule daily backups\necho \"0 2 * * * root /usr/local/bin/haproxy-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Disaster Recovery Automation\n```bash\nsudo tee /usr/local/bin/haproxy-dr.sh > /dev/null <<'EOF'\n#!/bin/bash\nDR_MODE=\"${1:-test}\"  # test, activate, or deactivate\n\ncase \"$DR_MODE\" in\n    \"test\")\n        echo \"Testing DR procedures...\"\n        \n        # Test backup restoration\n        LATEST_BACKUP=$(ls -t /backup/haproxy/config/haproxy-config-*.tar.gz | head -1)\n        if [ -n \"$LATEST_BACKUP\" ]; then\n            echo \"✓ Latest backup found: $LATEST_BACKUP\"\n        else\n            echo \"✗ No backup files found\"\n            exit 1\n        fi\n        \n        # Test configuration\n        haproxy -c -f /etc/haproxy/haproxy.cfg\n        echo \"✓ Configuration is valid\"\n        \n        # Test backend connectivity\n        for backend in $(echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep \",BACKEND,\" | cut -d, -f1); do\n            echo \"Testing backend: $backend\"\n            echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep \"$backend\"\n        done\n        \n        echo \"DR test completed\"\n        ;;\n        \n    \"activate\")\n        echo \"Activating DR procedures...\"\n        \n        # Switch to DR configuration\n        cp /etc/haproxy/haproxy-dr.cfg /etc/haproxy/haproxy.cfg\n        \n        # Reload HAProxy\n        systemctl reload haproxy\n        \n        # Update DNS (example with Route53)\n        aws route53 change-resource-record-sets --hosted-zone-id Z123456789 --change-batch file://dr-dns-update.json\n        \n        echo \"DR activated\"\n        ;;\n        \n    \"deactivate\")\n        echo \"Deactivating DR procedures...\"\n        \n        # Restore original configuration\n        cp /etc/haproxy/haproxy.cfg.backup /etc/haproxy/haproxy.cfg\n        \n        # Reload HAProxy\n        systemctl reload haproxy\n        \n        # Update DNS back to primary\n        aws route53 change-resource-record-sets --hosted-zone-id Z123456789 --change-batch file://primary-dns-update.json\n        \n        echo \"DR deactivated\"\n        ;;\n        \n    *)\n        echo \"Usage: $0 {test|activate|deactivate}\"\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-dr.sh\n```\n\n## Verification and Health Checks\n\n### Comprehensive Health Monitoring\n```bash\nsudo tee /usr/local/bin/haproxy-health-check.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/haproxy-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check HAProxy service status\nif systemctl is-active haproxy >/dev/null 2>&1; then\n    log_message \"✓ HAProxy service is running\"\nelse\n    log_message \"✗ HAProxy service is not running\"\n    exit 1\nfi\n\n# Check configuration validity\nif haproxy -c -f /etc/haproxy/haproxy.cfg >/dev/null 2>&1; then\n    log_message \"✓ HAProxy configuration is valid\"\nelse\n    log_message \"✗ HAProxy configuration has errors\"\n    haproxy -c -f /etc/haproxy/haproxy.cfg\nfi\n\n# Check listening ports\nLISTENING_PORTS=$(netstat -tlnp | grep haproxy | wc -l)\nlog_message \"✓ HAProxy is listening on ${LISTENING_PORTS} ports\"\n\n# Check backend server health\nBACKEND_STATS=$(echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep -c \",UP,\")\nTOTAL_SERVERS=$(echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep -c \",.*,\")\nlog_message \"✓ ${BACKEND_STATS}/${TOTAL_SERVERS} backend servers are healthy\"\n\n# Check SSL certificate expiry\nif [ -d /etc/haproxy/ssl ]; then\n    for cert in /etc/haproxy/ssl/*.pem; do\n        if [ -f \"$cert\" ]; then\n            EXPIRY=$(openssl x509 -in \"$cert\" -noout -dates | grep notAfter | cut -d= -f2)\n            EXPIRY_EPOCH=$(date -d \"$EXPIRY\" +%s)\n            CURRENT_EPOCH=$(date +%s)\n            DAYS_TO_EXPIRY=$(( (EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))\n            \n            if [ $DAYS_TO_EXPIRY -lt 30 ]; then\n                log_message \"⚠ SSL certificate $(basename $cert) expires in ${DAYS_TO_EXPIRY} days\"\n            else\n                log_message \"✓ SSL certificate $(basename $cert) expires in ${DAYS_TO_EXPIRY} days\"\n            fi\n        fi\n    done\nfi\n\n# Check memory usage\nMEMORY_USAGE=$(ps -o pid,vsz,rss,comm -C haproxy | tail -1 | awk '{print $3/1024}')\nlog_message \"ℹ HAProxy memory usage: ${MEMORY_USAGE}MB\"\n\n# Check connection statistics\nCURRENT_CONNS=$(echo \"show info\" | socat stdio /run/haproxy/admin.sock | grep \"CurrConns\" | cut -d: -f2 | tr -d ' ')\nMAX_CONNS=$(echo \"show info\" | socat stdio /run/haproxy/admin.sock | grep \"MaxConn\" | cut -d: -f2 | tr -d ' ')\nlog_message \"ℹ Current connections: ${CURRENT_CONNS}/${MAX_CONNS}\"\n\n# Check for any backend servers that are down\nDOWN_SERVERS=$(echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep \",DOWN,\" | wc -l)\nif [ $DOWN_SERVERS -gt 0 ]; then\n    log_message \"⚠ ${DOWN_SERVERS} backend servers are down\"\n    echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep \",DOWN,\" | while IFS=, read pxname svname; do\n        log_message \"  - ${pxname}/${svname} is DOWN\"\n    done\nfi\n\nlog_message \"HAProxy health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-health-check.sh\n\n# Schedule health checks every 5 minutes\necho \"*/5 * * * * root /usr/local/bin/haproxy-health-check.sh\" | sudo tee -a /etc/crontab\n```\n\n### Load Testing and Performance Validation\n```bash\nsudo tee /usr/local/bin/haproxy-load-test.sh > /dev/null <<'EOF'\n#!/bin/bash\nTEST_RESULTS=\"/tmp/haproxy-load-test-$(date +%Y%m%d_%H%M%S).txt\"\nTEST_URL=\"https://example.com\"\nCONCURRENT_USERS=100\nTEST_DURATION=60\n\necho \"HAProxy Load Test Results\" > ${TEST_RESULTS}\necho \"========================\" >> ${TEST_RESULTS}\necho \"Date: $(date)\" >> ${TEST_RESULTS}\necho \"Target URL: ${TEST_URL}\" >> ${TEST_RESULTS}\necho \"Concurrent Users: ${CONCURRENT_USERS}\" >> ${TEST_RESULTS}\necho \"Test Duration: ${TEST_DURATION}s\" >> ${TEST_RESULTS}\necho \"\" >> ${TEST_RESULTS}\n\n# Install testing tools if not available\nif ! command -v ab &> /dev/null; then\n    apt-get update && apt-get install -y apache2-utils\nfi\n\nif ! command -v wrk &> /dev/null; then\n    git clone https://github.com/wg/wrk.git /tmp/wrk\n    cd /tmp/wrk && make && cp wrk /usr/local/bin/\nfi\n\n# Run Apache Bench test\necho \"Apache Bench Results:\" >> ${TEST_RESULTS}\nab -n 10000 -c ${CONCURRENT_USERS} -k ${TEST_URL}/ >> ${TEST_RESULTS} 2>&1\n\necho \"\" >> ${TEST_RESULTS}\necho \"WRK Results:\" >> ${TEST_RESULTS}\nwrk -t4 -c${CONCURRENT_USERS} -d${TEST_DURATION}s --latency ${TEST_URL}/ >> ${TEST_RESULTS}\n\n# Capture HAProxy stats during test\necho \"\" >> ${TEST_RESULTS}\necho \"HAProxy Statistics During Test:\" >> ${TEST_RESULTS}\necho \"show info\" | socat stdio /run/haproxy/admin.sock >> ${TEST_RESULTS}\necho \"show stat\" | socat stdio /run/haproxy/admin.sock >> ${TEST_RESULTS}\n\necho \"\" >> ${TEST_RESULTS}\necho \"Load test completed at: $(date)\" >> ${TEST_RESULTS}\n\necho \"Load test completed. Results: ${TEST_RESULTS}\"\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-load-test.sh\n```\n\n## Firewall Configuration (Cross-Platform)\n\n### Security Rules\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 80/tcp comment 'HTTP'\nsudo ufw allow 443/tcp comment 'HTTPS' \nsudo ufw allow from 192.168.1.0/24 to any port 8404 comment 'Stats interface - internal only'\nsudo ufw allow from 192.168.1.0/24 to any port 9101 comment 'Prometheus exporter - internal only'\nsudo ufw deny 8404 comment 'Block stats from public'\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS/Fedora)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --new-zone=haproxy-mgmt\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-port=8404/tcp\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-port=9101/tcp\nsudo firewall-cmd --reload\n\n# iptables (Universal)\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 8404 -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 9101 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 8404 -j DROP\nsudo iptables -A INPUT -p tcp --dport 9101 -j DROP\n\n# Save iptables rules\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save\n```\n\n### DDoS Protection Configuration\n```bash\nsudo tee /etc/haproxy/ddos-protection.cfg > /dev/null <<EOF\n# DDoS Protection Configuration\n\nglobal\n    # Stick tables for tracking\n    tune.stick-table.enable 1\n\nfrontend ddos_protection\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/ssl/\n    \n    # Track client behavior\n    stick-table type ip size 1m expire 5m store gpc0,gpc1,http_req_rate(10s),http_err_rate(10s),conn_rate(10s),bytes_out_rate(10s)\n    \n    # Track requests\n    http-request track-sc0 src\n    \n    # Rate limiting rules\n    acl abuse_request_rate sc_http_req_rate(0) gt 100\n    acl abuse_connection_rate sc_conn_rate(0) gt 20\n    acl abuse_error_rate sc_http_err_rate(0) gt 10\n    acl abuse_bandwidth sc_bytes_out_rate(0) gt 10000000  # 10MB/s\n    \n    # Geographic blocking (requires GeoIP)\n    # acl blocked_countries src,map_ip(/etc/haproxy/geoip-country.map) -i CN RU\n    \n    # User-Agent filtering\n    acl bad_user_agent hdr_sub(User-Agent) -i \"sqlmap\" \"nikto\" \"nmap\" \"masscan\" \"zmap\"\n    acl empty_user_agent hdr_cnt(User-Agent) eq 0\n    \n    # HTTP method filtering\n    acl allowed_methods method GET POST PUT DELETE HEAD OPTIONS PATCH\n    \n    # Deny rules\n    http-request deny if abuse_request_rate\n    http-request deny if abuse_connection_rate\n    http-request deny if abuse_error_rate\n    http-request deny if abuse_bandwidth\n    http-request deny if bad_user_agent\n    http-request deny if empty_user_agent\n    http-request deny if !allowed_methods\n    # http-request deny if blocked_countries\n    \n    # Tarpit suspicious clients\n    http-request tarpit if { sc_http_req_rate(0) gt 50 }\n    \n    default_backend web_servers\n\n# Clean backend\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health\n    \n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\nEOF\n```\n\n## Runtime Management and Monitoring\n\n### Advanced Runtime Commands\n```bash\n# Create HAProxy management script\nsudo tee /usr/local/bin/haproxy-manage.sh > /dev/null <<'EOF'\n#!/bin/bash\nHAPROXY_SOCKET=\"/run/haproxy/admin.sock\"\n\ncase \"$1\" in\n    \"status\")\n        echo \"=== HAProxy Status ===\"\n        echo \"show info\" | socat stdio ${HAPROXY_SOCKET}\n        echo \"\"\n        echo \"=== Server Status ===\"\n        echo \"show stat\" | socat stdio ${HAPROXY_SOCKET} | column -t -s \",\"\n        ;;\n    \n    \"enable\")\n        if [ -z \"$2\" ] || [ -z \"$3\" ]; then\n            echo \"Usage: $0 enable <backend> <server>\"\n            exit 1\n        fi\n        echo \"enable server $2/$3\" | socat stdio ${HAPROXY_SOCKET}\n        echo \"Server $2/$3 enabled\"\n        ;;\n    \n    \"disable\")\n        if [ -z \"$2\" ] || [ -z \"$3\" ]; then\n            echo \"Usage: $0 disable <backend> <server>\"\n            exit 1\n        fi\n        echo \"disable server $2/$3\" | socat stdio ${HAPROXY_SOCKET}\n        echo \"Server $2/$3 disabled\"\n        ;;\n    \n    \"weight\")\n        if [ -z \"$2\" ] || [ -z \"$3\" ] || [ -z \"$4\" ]; then\n            echo \"Usage: $0 weight <backend> <server> <weight>\"\n            exit 1\n        fi\n        echo \"set weight $2/$3 $4\" | socat stdio ${HAPROXY_SOCKET}\n        echo \"Weight for $2/$3 set to $4\"\n        ;;\n    \n    \"sessions\")\n        echo \"=== Active Sessions ===\"\n        echo \"show sess\" | socat stdio ${HAPROXY_SOCKET}\n        ;;\n    \n    \"errors\")\n        echo \"=== Recent Errors ===\"\n        echo \"show errors\" | socat stdio ${HAPROXY_SOCKET}\n        ;;\n    \n    \"reload\")\n        echo \"Reloading HAProxy configuration...\"\n        if haproxy -c -f /etc/haproxy/haproxy.cfg; then\n            systemctl reload haproxy\n            echo \"Configuration reloaded successfully\"\n        else\n            echo \"Configuration has errors, reload aborted\"\n            exit 1\n        fi\n        ;;\n    \n    \"drain\")\n        if [ -z \"$2\" ] || [ -z \"$3\" ]; then\n            echo \"Usage: $0 drain <backend> <server>\"\n            exit 1\n        fi\n        echo \"set server $2/$3 state drain\" | socat stdio ${HAPROXY_SOCKET}\n        echo \"Server $2/$3 is being drained\"\n        \n        # Wait for connections to finish\n        while [ $(echo \"show stat\" | socat stdio ${HAPROXY_SOCKET} | grep \"$2,$3\" | cut -d, -f5) -gt 0 ]; do\n            echo \"Waiting for connections to finish...\"\n            sleep 5\n        done\n        echo \"Server $2/$3 has been drained\"\n        ;;\n    \n    *)\n        echo \"Usage: $0 {status|enable|disable|weight|sessions|errors|reload|drain} [options]\"\n        echo \"\"\n        echo \"Examples:\"\n        echo \"  $0 status\"\n        echo \"  $0 enable web_servers web1\"\n        echo \"  $0 disable web_servers web1\"\n        echo \"  $0 weight web_servers web1 50\"\n        echo \"  $0 drain web_servers web1\"\n        echo \"  $0 sessions\"\n        echo \"  $0 errors\"\n        echo \"  $0 reload\"\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-manage.sh\n```\n\n### Automated Log Analysis\n```bash\nsudo tee /usr/local/bin/haproxy-log-analysis.sh > /dev/null <<'EOF'\n#!/bin/bash\nLOG_FILE=\"/var/log/haproxy/haproxy.log\"\nANALYSIS_DIR=\"/var/log/haproxy-analysis\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${ANALYSIS_DIR}\n\n# Top client IPs\necho \"Top Client IPs - ${DATE}\" > ${ANALYSIS_DIR}/top-clients-${DATE}.txt\nawk '{print $6}' ${LOG_FILE} | sort | uniq -c | sort -nr | head -20 >> ${ANALYSIS_DIR}/top-clients-${DATE}.txt\n\n# Response time analysis\necho \"Response Time Analysis - ${DATE}\" > ${ANALYSIS_DIR}/response-times-${DATE}.txt\nawk '{print $11}' ${LOG_FILE} | grep -v '^-$' | sort -n | tail -100 >> ${ANALYSIS_DIR}/response-times-${DATE}.txt\n\n# Error analysis\necho \"Error Analysis - ${DATE}\" > ${ANALYSIS_DIR}/errors-${DATE}.txt\nawk '$10 >= 400 {print $0}' ${LOG_FILE} | tail -100 >> ${ANALYSIS_DIR}/errors-${DATE}.txt\n\n# Backend server analysis\necho \"Backend Server Performance - ${DATE}\" > ${ANALYSIS_DIR}/backend-performance-${DATE}.txt\nawk '{print $8}' ${LOG_FILE} | sort | uniq -c | sort -nr >> ${ANALYSIS_DIR}/backend-performance-${DATE}.txt\n\n# SSL/TLS analysis\necho \"SSL/TLS Analysis - ${DATE}\" > ${ANALYSIS_DIR}/ssl-analysis-${DATE}.txt\ngrep \"SSL\" ${LOG_FILE} | tail -50 >> ${ANALYSIS_DIR}/ssl-analysis-${DATE}.txt\n\n# Generate summary report\ncat > ${ANALYSIS_DIR}/summary-${DATE}.txt <<EOL\nHAProxy Log Analysis Summary - ${DATE}\n=====================================\n\nTotal Requests: $(wc -l < ${LOG_FILE})\nUnique IPs: $(awk '{print $6}' ${LOG_FILE} | sort -u | wc -l)\n4xx Errors: $(awk '$10 >= 400 && $10 < 500 {print $0}' ${LOG_FILE} | wc -l)\n5xx Errors: $(awk '$10 >= 500 {print $0}' ${LOG_FILE} | wc -l)\n\nAverage Response Time: $(awk '{sum += $11; count++} END {print sum/count}' ${LOG_FILE})ms\n\nTop 5 Requested URLs:\n$(awk '{print $12}' ${LOG_FILE} | sort | uniq -c | sort -nr | head -5)\n\nAnalysis completed at: $(date)\nEOL\n\necho \"Log analysis completed. Reports in: ${ANALYSIS_DIR}/\"\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-log-analysis.sh\n\n# Schedule daily log analysis\necho \"0 6 * * * root /usr/local/bin/haproxy-log-analysis.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Check HAProxy process status\nps aux | grep haproxy\nsystemctl status haproxy\n\n# Configuration validation\nhaproxy -c -f /etc/haproxy/haproxy.cfg\nhaproxy -c -V -f /etc/haproxy/haproxy.cfg\n\n# Socket connectivity test\nsocat - /run/haproxy/admin.sock\necho \"show info\" | socat stdio /run/haproxy/admin.sock\n\n# Backend server connectivity test\nfor server in 192.168.1.10 192.168.1.11 192.168.1.12; do\n    echo \"Testing $server...\"\n    nc -zv $server 8080\n    curl -I http://$server:8080/health\ndone\n\n# SSL certificate issues\nopenssl x509 -in /etc/haproxy/ssl/example.com.pem -text -noout\nopenssl verify -CAfile /etc/haproxy/ssl/ca.crt /etc/haproxy/ssl/example.com.pem\n\n# Memory usage debugging\npmap -x $(pgrep haproxy)\ncat /proc/$(pgrep haproxy)/status | grep -E \"(VmSize|VmRSS|VmData|VmStk)\"\n\n# Network debugging\nss -tulpn | grep haproxy\nnetstat -tulpn | grep haproxy\nlsof -i :80,443,8404\n\n# Log debugging\ntail -f /var/log/haproxy/haproxy.log\njournalctl -u haproxy -f\n\n# Performance debugging\necho \"show stat\" | socat stdio /run/haproxy/admin.sock | grep -v \"^#\"\necho \"show sess\" | socat stdio /run/haproxy/admin.sock\necho \"show pools\" | socat stdio /run/haproxy/admin.sock\n\n# Configuration debugging\nhaproxy -vv\nhaproxy -dM -f /etc/haproxy/haproxy.cfg  # Don't use in production\n\n# Check for core dumps\nfind /var/crash -name \"haproxy*\" 2>/dev/null\nfind /var/lib/systemd/coredump -name \"*haproxy*\" 2>/dev/null\n```\n\n### Advanced Debugging\n```bash\n# Enable debug logging\nsudo systemctl edit haproxy.service\n# Add:\n[Service]\nExecStart=\nExecStart=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock -d\n\nsudo systemctl daemon-reload\nsudo systemctl restart haproxy\n\n# Real-time connection monitoring\nwatch -n 1 'echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep -E \"FRONTEND|BACKEND\" | column -t -s \",\"'\n\n# TCP dump for network analysis\ntcpdump -i any -w haproxy-traffic.pcap port 80 or port 443\ntcpdump -i any -w backend-traffic.pcap host 192.168.1.10\n\n# Strace HAProxy process\nstrace -p $(pgrep haproxy) -e trace=network\n\n# Monitor file descriptors\nlsof -p $(pgrep haproxy) | wc -l\ncat /proc/$(pgrep haproxy)/limits | grep \"Max open files\"\n\n# Check shared memory segments\nipcs -m | grep haproxy\n\n# Monitor syscalls\nperf trace -p $(pgrep haproxy)\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.haproxy.org/)\n- [HAProxy Configuration Manual](https://cbonte.github.io/haproxy-dconv/)\n- [Best Practices Guide](https://www.haproxy.com/documentation/hapee/latest/configuration/best-practices/)\n- [Performance Tuning Guide](https://www.haproxy.com/blog/haproxy-performance-tuning/)\n- [Security Guide](https://www.haproxy.com/solutions/security/)\n- [Community Forum](https://discourse.haproxy.org/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"haproxy-installation-guide\" class=\"mobile-header\">HAProxy Installation Guide</h1>\n<p class=\"mobile-paragraph\">High-performance TCP/HTTP load balancer and reverse proxy for distributing traffic across multiple backend servers. Industry standard for load balancing with enterprise-grade security and reliability.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for high-traffic environments</li>\n<li class=\"mobile-list-item\">Multiple backend servers to load balance (optional for testing)</li>\n<li class=\"mobile-list-item\">SSL certificates for production HTTPS termination</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt-get update\n\n# Install HAProxy and utilities\nsudo apt-get install -y haproxy haproxy-doc software-properties-common\n\n# For latest version from PPA\nsudo add-apt-repository ppa:vbernat/haproxy-2.8\nsudo apt-get update\nsudo apt-get install -y haproxy=2.8.*\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install HAProxy\nsudo yum install -y haproxy\n\n# For newer versions\nsudo dnf install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install HAProxy\nsudo dnf install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-port=8404/tcp  # Stats interface\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install HAProxy\nsudo pacman -Syu haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install HAProxy\nsudo apk update\nsudo apk add haproxy\n\n# Enable and start HAProxy\nsudo rc-update add haproxy default\nsudo service haproxy start</code></pre>\n      </div>\n    </div>\n<h3 id=\"from-source-latest-features\" class=\"mobile-header\">From Source (Latest Features)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install build dependencies\n# Ubuntu/Debian\nsudo apt-get install -y build-essential libssl-dev libpcre3-dev zlib1g-dev liblua5.3-dev libsystemd-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y &quot;Development Tools&quot;\nsudo yum install -y openssl-devel pcre-devel zlib-devel lua-devel systemd-devel\n\n# Download latest HAProxy LTS\nHAPROXY_VERSION=&quot;3.0.5&quot;\ncd /tmp\nwget &quot;https://www.haproxy.org/download/3.0/src/haproxy-${HAPROXY_VERSION}.tar.gz&quot;\ntar xzf haproxy-${HAPROXY_VERSION}.tar.gz\ncd haproxy-${HAPROXY_VERSION}\n\n# Compile with full features\nmake clean\nmake -j$(nproc) TARGET=linux-glibc \\\n    USE_OPENSSL=1 \\\n    USE_ZLIB=1 \\\n    USE_PCRE=1 \\\n    USE_SYSTEMD=1 \\\n    USE_LUA=1 \\\n    USE_PROMEX=1 \\\n    USE_THREAD=1 \\\n    USE_CPU_AFFINITY=1 \\\n    USE_TFO=1 \\\n    USE_NS=1 \\\n    USE_DL=1 \\\n    USE_RT=1\n\n# Install HAProxy\nsudo make install\nsudo mkdir -p /etc/haproxy /var/lib/haproxy /var/log/haproxy\nsudo useradd --system --home /var/lib/haproxy --shell /bin/false haproxy\nsudo chown -R haproxy:haproxy /var/lib/haproxy /var/log/haproxy\n\n# Create systemd service\nsudo tee /etc/systemd/system/haproxy.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=HAProxy Load Balancer\nDocumentation=man:haproxy(1)\nDocumentation=file:/usr/share/doc/haproxy/configuration.txt\nAfter=network.target\n\n[Service]\nType=notify\nExecStart=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock\nExecReload=/bin/kill -USR2 \\$MAINPID\nExecStop=/bin/kill -USR1 \\$MAINPID\nKillMode=mixed\nRestart=on-failure\nSuccessExitStatus=143\nKillSignal=SIGTERM\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/lib/haproxy\nReadWritePaths=/var/log/haproxy\nReadWritePaths=/run\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create HAProxy configuration directory\nmkdir -p ~/haproxy/{config,ssl,logs}\n\n# Create basic configuration\ncat &gt; ~/haproxy/config/haproxy.cfg &lt;&lt;EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n    \n    # SSL configuration\n    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n    ssl-default-server-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS\n    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor\n    option http-server-close\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    timeout http-keep-alive 4000\n    timeout check 3000\n\n# Frontend\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /usr/local/etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # Redirect HTTP to HTTPS\n    redirect scheme https code 301 if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\n    http-response set-header X-Frame-Options &quot;SAMEORIGIN&quot;\n    http-response set-header X-Content-Type-Options &quot;nosniff&quot;\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    \n    default_backend web_servers\n\n# Backend\nbackend web_servers\n    balance roundrobin\n    option httpchk GET /health\n    http-check expect status 200\n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\n\n# Stats interface\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if TRUE\nEOF\n\n# Run HAProxy container\ndocker run -d \\\n  --name haproxy \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -p 8404:8404 \\\n  -v ~/haproxy/config:/usr/local/etc/haproxy:ro \\\n  -v ~/haproxy/ssl:/usr/local/etc/haproxy/ssl:ro \\\n  -v ~/haproxy/logs:/var/log/haproxy \\\n  haproxy:latest</code></pre>\n      </div>\n    </div>\n<h2 id=\"production-configuration\" class=\"mobile-header\">Production Configuration</h2>\n<h3 id=\"enterprise-production-configuration\" class=\"mobile-header\">Enterprise Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup original configuration\nsudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup\n\n# Create comprehensive production configuration\nsudo tee /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n#---------------------------------------------------------------------\n# HAProxy Enterprise Production Configuration\n# Version: 3.0+ LTS\n#---------------------------------------------------------------------\n\nglobal\n    log 127.0.0.1:514 local0 info\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\n    # SSL/TLS configuration (2024 best practices)\n    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets prefer-client-ciphers\n    \n    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets\n\n    # DH parameters for perfect forward secrecy\n    ssl-dh-param-file /etc/haproxy/ssl/dhparam.pem\n    \n    # Performance tuning\n    maxconn 40000\n    nbthread 4\n    cpu-map auto:1/1-4 0-3\n    \n    # Logging\n    log-tag haproxy-prod\n    \n    # Security\n    insecure-fork-wanted\n    insecure-setuid-wanted\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor except 127.0.0.0/8\n    option http-server-close\n    option redispatch\n    \n    # Timeouts\n    timeout connect 10s\n    timeout client 1m\n    timeout server 1m\n    timeout http-keep-alive 10s\n    timeout check 10s\n    timeout tunnel 2h\n    \n    # Retries\n    retries 3\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/css text/javascript application/javascript application/json application/xml\n    \n    # Default error pages\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\n#---------------------------------------------------------------------\n# Frontend Configuration\n#---------------------------------------------------------------------\n\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1 crt-ignore-err all\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\n    http-response set-header X-Frame-Options &quot;SAMEORIGIN&quot;\n    http-response set-header X-Content-Type-Options &quot;nosniff&quot;\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    http-response set-header Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n    http-response set-header Content-Security-Policy &quot;default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;&quot;\n    \n    # Rate limiting\n    stick-table type ip size 100k expire 30s store http_req_rate(10s)\n    http-request track-sc0 src\n    http-request deny if { sc_http_req_rate(0) gt 20 }\n    \n    # Block bad bots and crawlers\n    acl is_bot hdr_sub(User-Agent) -i bot crawler spider scraper\n    http-request deny if is_bot\n    \n    # ACLs for routing\n    acl is_api path_beg /api/\n    acl is_admin path_beg /admin/\n    acl is_static path_beg /static/ /css/ /js/ /images/\n    acl is_websocket hdr(Upgrade) -i websocket\n    \n    # Force HTTPS\n    redirect scheme https code 301 if !{ ssl_fc }\n    \n    # Routing rules\n    use_backend api_servers if is_api\n    use_backend admin_servers if is_admin\n    use_backend static_servers if is_static\n    use_backend websocket_servers if is_websocket\n    default_backend web_servers\n\n#---------------------------------------------------------------------\n# Backend Configurations\n#---------------------------------------------------------------------\n\n# Main web servers\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health HTTP/1.1\\r\\nHost:\\ example.com\n    http-check expect status 200\n    \n    # Health check configuration\n    default-server inter 2000 rise 2 fall 3 slowstart 60s maxconn 250 maxqueue 256 weight 100\n    \n    server web1 192.168.1.10:8080 check cookie web1\n    server web2 192.168.1.11:8080 check cookie web2\n    server web3 192.168.1.12:8080 check cookie web3\n    server web4 192.168.1.13:8080 check cookie web4 backup\n    \n    # Stick table for session persistence\n    stick-table type ip size 200k expire 30m\n    stick on src\n\n# API servers backend\nbackend api_servers\n    balance roundrobin\n    option httpchk GET /api/health HTTP/1.1\\r\\nHost:\\ api.example.com\n    http-check expect rstring ^OK$\n    \n    # Enable HTTP/2 to backend\n    server api1 192.168.1.20:3000 check proto h2 verify none\n    server api2 192.168.1.21:3000 check proto h2 verify none\n    server api3 192.168.1.22:3000 check proto h2 verify none\n\n# Admin backend (restricted access)\nbackend admin_servers\n    balance source\n    option httpchk GET /admin/health\n    http-check expect status 200\n    \n    # IP whitelist for admin access\n    http-request deny unless { src 192.168.1.0/24 10.0.0.0/8 }\n    \n    server admin1 192.168.1.30:9000 check\n\n# Static content servers\nbackend static_servers\n    balance roundrobin\n    option httpchk GET /health.txt\n    http-check expect string &quot;OK&quot;\n    \n    # Cache control\n    http-response set-header Cache-Control &quot;public, max-age=86400&quot;\n    \n    server static1 192.168.1.40:8080 check\n    server static2 192.168.1.41:8080 check\n\n# WebSocket servers\nbackend websocket_servers\n    balance leastconn\n    option httpchk GET /ws/health\n    http-check expect status 101\n    \n    # WebSocket specific settings\n    timeout tunnel 3600s\n    \n    server ws1 192.168.1.50:8080 check\n    server ws2 192.168.1.51:8080 check\n\n#---------------------------------------------------------------------\n# Database Load Balancing (TCP Mode)\n#---------------------------------------------------------------------\n\n# MySQL Master-Slave Load Balancing\nfrontend mysql_frontend\n    bind *:3306\n    mode tcp\n    default_backend mysql_servers\n\nbackend mysql_servers\n    mode tcp\n    balance leastconn\n    option mysql-check user haproxy_check\n    \n    # MySQL health checks\n    server mysql-master 192.168.1.60:3306 check weight 1000\n    server mysql-slave1 192.168.1.61:3306 check weight 100 backup\n    server mysql-slave2 192.168.1.62:3306 check weight 100 backup\n\n# PostgreSQL Load Balancing\nfrontend postgresql_frontend\n    bind *:5432\n    mode tcp\n    default_backend postgresql_servers\n\nbackend postgresql_servers\n    mode tcp\n    balance roundrobin\n    option pgsql-check user haproxy_check\n    \n    server postgres1 192.168.1.70:5432 check\n    server postgres2 192.168.1.71:5432 check\n\n# Redis Cluster Load Balancing\nfrontend redis_frontend\n    bind *:6379\n    mode tcp\n    default_backend redis_servers\n\nbackend redis_servers\n    mode tcp\n    balance first\n    option redis-check\n    \n    server redis1 192.168.1.80:6379 check\n    server redis2 192.168.1.81:6379 check backup\n\n#---------------------------------------------------------------------\n# Statistics and Monitoring\n#---------------------------------------------------------------------\n\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if { src 192.168.1.0/24 }\n    stats auth admin:secure_stats_password\n    \n    # Enhanced statistics\n    stats show-legends\n    stats show-modules\n    stats realm &quot;HAProxy Statistics&quot;\n    \n    # Prometheus metrics (if compiled with USE_PROMEX)\n    http-request use-service prometheus-exporter if { path /metrics }\n\n#---------------------------------------------------------------------\n# Advanced Features\n#---------------------------------------------------------------------\n\n# Global rate limiting\nbackend rate_limit_backend\n    stick-table type ip size 100k expire 30s store gpc0,http_req_rate(10s)\n\n# DDoS protection\nfrontend ddos_protection\n    bind *:80\n    \n    # Track client IPs\n    stick-table type ip size 100k expire 30s store gpc0,http_req_rate(10s),http_err_rate(10s)\n    http-request track-sc0 src table rate_limit_backend\n    \n    # Block clients exceeding rate limits\n    http-request deny if { sc_http_req_rate(0) gt 50 }\n    http-request deny if { sc_http_err_rate(0) gt 10 }\n    \n    default_backend web_servers\n\n# Health check backend for external monitoring\nbackend health_check\n    mode http\n    http-request return status 200 content-type text/plain string &quot;HAProxy is healthy&quot;\nEOF\n\n# Test configuration\nsudo haproxy -c -f ~/haproxy/config/haproxy.cfg</code></pre>\n      </div>\n    </div>\n<h2 id=\"ssltls-configuration-and-security\" class=\"mobile-header\">SSL/TLS Configuration and Security</h2>\n<h3 id=\"advanced-ssl-termination\" class=\"mobile-header\">Advanced SSL Termination</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate strong DH parameters\nsudo openssl dhparam -out /etc/haproxy/ssl/dhparam.pem 4096\n\n# Create SSL certificate bundle\nsudo mkdir -p /etc/haproxy/ssl\n\n# Self-signed certificate for testing\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/haproxy/ssl/example.com.key \\\n  -out /etc/haproxy/ssl/example.com.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=example.com&quot;\n\n# Combine certificate and key for HAProxy\nsudo cat /etc/haproxy/ssl/example.com.crt /etc/haproxy/ssl/example.com.key | sudo tee /etc/haproxy/ssl/example.com.pem\n\n# Production: Let&#039;s Encrypt certificates\nsudo certbot certonly --standalone -d example.com -d www.example.com\nsudo cat /etc/letsencrypt/live/example.com/fullchain.pem /etc/letsencrypt/live/example.com/privkey.pem | sudo tee /etc/haproxy/ssl/example.com.pem\n\n# Set proper permissions\nsudo chmod 600 /etc/haproxy/ssl/*.pem\nsudo chown haproxy:haproxy /etc/haproxy/ssl/*.pem\n\n# Create certificate renewal script\nsudo tee /usr/local/bin/haproxy-ssl-renewal.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nCERT_PATH=&quot;/etc/letsencrypt/live&quot;\nHAPROXY_CERT_DIR=&quot;/etc/haproxy/ssl&quot;\n\n# Renew certificates\ncertbot renew --quiet --pre-hook &quot;systemctl stop haproxy&quot; --post-hook &quot;systemctl start haproxy&quot;\n\n# Update HAProxy certificate bundles\nfor domain in $(ls ${CERT_PATH}/); do\n    if [ -f &quot;${CERT_PATH}/${domain}/fullchain.pem&quot; ]; then\n        cat &quot;${CERT_PATH}/${domain}/fullchain.pem&quot; &quot;${CERT_PATH}/${domain}/privkey.pem&quot; &gt; &quot;${HAPROXY_CERT_DIR}/${domain}.pem&quot;\n        chmod 600 &quot;${HAPROXY_CERT_DIR}/${domain}.pem&quot;\n        chown haproxy:haproxy &quot;${HAPROXY_CERT_DIR}/${domain}.pem&quot;\n    fi\ndone\n\n# Reload HAProxy configuration\nsystemctl reload haproxy\n\necho &quot;SSL certificates updated for HAProxy&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-ssl-renewal.sh\n\n# Schedule certificate renewal\necho &quot;0 3 * * 1 root /usr/local/bin/haproxy-ssl-renewal.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening-configuration\" class=\"mobile-header\">Security Hardening Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security-focused configuration additions\nsudo tee /etc/haproxy/conf.d/security.cfg &gt; /dev/null &lt;&lt;EOF\n#---------------------------------------------------------------------\n# Security Configuration\n#---------------------------------------------------------------------\n\nglobal\n    # Security settings\n    tune.ssl.default-dh-param 2048\n    tune.ssl.capture-buffer-size 0\n    tune.ssl.maxrecord 1460\n    \n    # Disable SSLv3 and weak ciphers\n    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11\n\ndefaults\n    # Hide server information\n    option hide-version\n    \n    # Security headers for all responses\n    http-response del-header Server\n    http-response del-header X-Powered-By\n    \n    # Request size limits\n    http-request deny if { req.body_size gt 10000000 }  # 10MB limit\n    \n    # Block suspicious request methods\n    acl blocked_methods method TRACE CONNECT\n    http-request deny if blocked_methods\n    \n    # Block requests with suspicious headers\n    acl suspicious_headers hdr_cnt(host) gt 1\n    acl suspicious_headers hdr_cnt(content-length) gt 1\n    http-request deny if suspicious_headers\n\n# Rate limiting configuration\nbackend rate_limit_abuse\n    stick-table type ip size 100k expire 30s store gpc0,gpc1,http_req_rate(10s),http_err_rate(10s),conn_rate(10s)\n\nfrontend rate_limiting\n    # Track requests per IP\n    http-request track-sc0 src table rate_limit_abuse\n    \n    # Deny clients that exceed rate limits\n    http-request deny if { sc_http_req_rate(0) gt 100 }\n    http-request deny if { sc_conn_rate(0) gt 20 }\n    http-request deny if { sc_http_err_rate(0) gt 10 }\n    \n    # Slow down abusive clients\n    http-request set-var(req.delay) int(1000) if { sc_http_req_rate(0) gt 50 }\n    http-request lua.delay_request if { var(req.delay) -m found }\n\n# WAF-like filtering\nfrontend security_frontend\n    # Block common attacks\n    acl is_sql_injection path_reg -i .*(union|select|insert|delete|update|drop|create|alter|exec|script|javascript|vbscript|onload|onerror|onclick).*\n    acl is_xss path_reg -i .*(script|iframe|object|embed|form|img|svg|math|details|svg).*\n    acl is_path_traversal path_reg -i .*(\\.\\./|\\.\\.\\\\|%2e%2e%2f|%2e%2e\\\\).*\n    \n    http-request deny if is_sql_injection\n    http-request deny if is_xss\n    http-request deny if is_path_traversal\n    \n    # GeoIP blocking (requires GeoIP data)\n    # http-request deny if { src,map_ip(/etc/haproxy/geoip/country.map) -i CN RU }\n\nEOF\n\n# Include security configuration\necho &quot;include /etc/haproxy/conf.d/*.cfg&quot; | sudo tee -a /etc/haproxy/haproxy.cfg</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-load-balancing-strategies\" class=\"mobile-header\">Advanced Load Balancing Strategies</h2>\n<h3 id=\"multi-tier-application-load-balancing\" class=\"mobile-header\">Multi-Tier Application Load Balancing</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    log stdout local0\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    timeout connect 5s\n    timeout client 50s\n    timeout server 50s\n\n#---------------------------------------------------------------------\n# Application Frontend with Advanced Routing\n#---------------------------------------------------------------------\n\nfrontend app_frontend\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # ACLs for microservices routing\n    acl is_user_service path_beg /api/users/\n    acl is_order_service path_beg /api/orders/\n    acl is_payment_service path_beg /api/payments/\n    acl is_notification_service path_beg /api/notifications/\n    acl is_admin_panel path_beg /admin/\n    acl is_monitoring path_beg /monitoring/\n    \n    # Geographic routing\n    acl is_us_traffic src 192.168.1.0/24\n    acl is_eu_traffic src 192.168.2.0/24\n    acl is_asia_traffic src 192.168.3.0/24\n    \n    # Device detection\n    acl is_mobile hdr_reg(User-Agent) -i (mobile|android|iphone|ipad)\n    acl is_desktop hdr_reg(User-Agent) -i (windows|macos|linux)\n    \n    # Routing decisions\n    use_backend user_service_us if is_user_service is_us_traffic\n    use_backend user_service_eu if is_user_service is_eu_traffic\n    use_backend order_service if is_order_service\n    use_backend payment_service if is_payment_service\n    use_backend notification_service if is_notification_service\n    use_backend admin_panel if is_admin_panel\n    use_backend monitoring_backend if is_monitoring\n    use_backend mobile_servers if is_mobile\n    default_backend web_servers\n\n# User Service Backends (Geographic)\nbackend user_service_us\n    balance roundrobin\n    option httpchk GET /api/users/health\n    http-check expect status 200\n    server user-us-1 192.168.1.100:3001 check\n    server user-us-2 192.168.1.101:3001 check\n    server user-us-3 192.168.1.102:3001 check\n\nbackend user_service_eu\n    balance roundrobin\n    option httpchk GET /api/users/health\n    server user-eu-1 192.168.2.100:3001 check\n    server user-eu-2 192.168.2.101:3001 check\n\n# Microservices Backends\nbackend order_service\n    balance leastconn\n    option httpchk GET /api/orders/health\n    server order-1 192.168.1.110:3002 check\n    server order-2 192.168.1.111:3002 check\n    server order-3 192.168.1.112:3002 check\n\nbackend payment_service\n    balance roundrobin\n    option httpchk GET /api/payments/health\n    # Enhanced security for payment service\n    http-request set-header X-Forwarded-Proto https\n    http-request add-header X-Client-IP %[src]\n    server payment-1 192.168.1.120:3003 check ssl verify none\n    server payment-2 192.168.1.121:3003 check ssl verify none\n\nbackend notification_service\n    balance roundrobin\n    option httpchk GET /api/notifications/health\n    server notification-1 192.168.1.130:3004 check\n    server notification-2 192.168.1.131:3004 check\n\n# Admin Panel Backend (Restricted)\nbackend admin_panel\n    balance source\n    option httpchk GET /admin/health\n    http-check expect status 200\n    \n    # Additional security\n    http-request add-header X-Admin-Access &quot;true&quot;\n    timeout server 2m\n    \n    server admin-1 192.168.1.140:9000 check\n\n# Mobile-Optimized Backend\nbackend mobile_servers\n    balance roundrobin\n    option httpchk GET /mobile/health\n    # Mobile-specific optimizations\n    compression algo gzip\n    compression type text/html text/css application/javascript application/json\n    server mobile-1 192.168.1.150:8080 check\n    server mobile-2 192.168.1.151:8080 check\n\n#---------------------------------------------------------------------\n# Monitoring and Statistics\n#---------------------------------------------------------------------\n\nlisten stats\n    bind *:8404 ssl crt /etc/haproxy/ssl/stats.pem\n    stats enable\n    stats uri /\n    stats refresh 5s\n    stats admin if { src 192.168.1.0/24 }\n    stats auth admin:secure_stats_password\n    stats realm &quot;HAProxy Statistics&quot;\n    \n    # Prometheus metrics endpoint\n    http-request use-service prometheus-exporter if { path /metrics }\n    \n    # JSON stats API\n    http-request use-service prometheus-exporter if { path /stats/json }\n\n# Health check endpoint for external monitoring\nlisten health_check\n    bind *:8080\n    mode http\n    monitor-uri /health\n    option httplog\n    \n    acl site_dead nbsrv(web_servers) lt 1\n    acl api_dead nbsrv(api_servers) lt 1\n    \n    monitor fail if site_dead\n    monitor fail if api_dead\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"global-load-balancing-with-dns\" class=\"mobile-header\">Global Load Balancing with DNS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Integration with external DNS load balancing\nsudo tee /etc/haproxy/haproxy-dns.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    # DNS resolution for dynamic backends\n    dns-resolver dns1\n        nameserver dns1 8.8.8.8:53\n        nameserver dns2 8.8.4.4:53\n        resolve_retries 3\n        timeout retry 1s\n        hold nx 30s\n        hold other 30s\n        hold refused 30s\n        hold timeout 30s\n        hold valid 10s\n\ndefaults\n    mode http\n    timeout connect 5s\n    timeout client 30s\n    timeout server 30s\n\n# Dynamic backend resolution\nbackend dynamic_backend\n    balance roundrobin\n    option httpchk GET /health\n    \n    # Servers resolved via DNS\n    server-template web- 3 web.example.com:80 check resolvers dns1\n    server-template api- 2 api.example.com:80 check resolvers dns1\n\n# Service discovery integration\nbackend consul_backend\n    balance roundrobin\n    option httpchk GET /health\n    \n    # Consul service discovery\n    server-template consul- 3 _web._tcp.service.consul:80 check resolvers dns1\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-and-clustering\" class=\"mobile-header\">High Availability and Clustering</h2>\n<h3 id=\"haproxy-keepalived-setup\" class=\"mobile-header\">HAProxy Keepalived Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install keepalived for HA\nsudo apt install -y keepalived  # Ubuntu/Debian\nsudo yum install -y keepalived  # RHEL/CentOS\n\n# Configure keepalived on primary HAProxy\nsudo tee /etc/keepalived/keepalived.conf &gt; /dev/null &lt;&lt;EOF\n! Configuration File for keepalived\n\nglobal_defs {\n    router_id HAProxy_Primary\n    vrrp_skip_check_adv_addr\n    vrrp_strict\n    vrrp_garp_interval 0\n    vrrp_gna_interval 0\n    script_user root\n    enable_script_security\n}\n\n# Health check script\nvrrp_script chk_haproxy {\n    script &quot;/usr/bin/killall -0 haproxy&quot;\n    interval 2\n    weight 2\n    fall 3\n    rise 2\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface eth0\n    virtual_router_id 51\n    priority 110\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass secure_vrrp_password\n    }\n    virtual_ipaddress {\n        192.168.1.100/24\n    }\n    track_script {\n        chk_haproxy\n    }\n    notify_master /etc/keepalived/master.sh\n    notify_backup /etc/keepalived/backup.sh\n}\nEOF\n\n# Create notification scripts\nsudo tee /etc/keepalived/master.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\necho &quot;$(date): Became MASTER&quot; &gt;&gt; /var/log/keepalived.log\n# Add any additional master setup commands here\nEOF\n\nsudo tee /etc/keepalived/backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\necho &quot;$(date): Became BACKUP&quot; &gt;&gt; /var/log/keepalived.log\n# Add any additional backup setup commands here\nEOF\n\nsudo chmod +x /etc/keepalived/{master,backup}.sh\nsudo systemctl enable --now keepalived\n\n# Configure backup HAProxy with lower priority (100 instead of 110)</code></pre>\n      </div>\n    </div>\n<h3 id=\"multi-site-load-balancing\" class=\"mobile-header\">Multi-Site Load Balancing</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure multi-site load balancing\nsudo tee /etc/haproxy/haproxy-multisite.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    log stdout local0\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    timeout connect 5s\n    timeout client 30s\n    timeout server 30s\n\n# Frontend for multi-site routing\nfrontend multisite_frontend\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # Site detection based on headers\n    acl is_site_a hdr(host) -i site-a.example.com\n    acl is_site_b hdr(host) -i site-b.example.com\n    acl is_site_c hdr(host) -i site-c.example.com\n    \n    # Geographic routing based on source IP\n    acl is_americas src 10.1.0.0/16\n    acl is_europe src 10.2.0.0/16\n    acl is_asia src 10.3.0.0/16\n    \n    # Route to appropriate backends\n    use_backend site_a_americas if is_site_a is_americas\n    use_backend site_a_europe if is_site_a is_europe\n    use_backend site_a_asia if is_site_a is_asia\n    use_backend site_b_backend if is_site_b\n    use_backend site_c_backend if is_site_c\n    \n    default_backend default_site\n\n# Regional backends\nbackend site_a_americas\n    balance leastconn\n    option httpchk GET /health\n    server site-a-us-1 us-east-1.example.com:80 check\n    server site-a-us-2 us-west-2.example.com:80 check\n\nbackend site_a_europe\n    balance leastconn\n    option httpchk GET /health\n    server site-a-eu-1 eu-west-1.example.com:80 check\n    server site-a-eu-2 eu-central-1.example.com:80 check\n\nbackend site_a_asia\n    balance leastconn\n    option httpchk GET /health\n    server site-a-ap-1 ap-southeast-1.example.com:80 check\n    server site-a-ap-2 ap-northeast-1.example.com:80 check\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-observability\" class=\"mobile-header\">Monitoring and Observability</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure HAProxy for Prometheus scraping\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\n# Prometheus metrics endpoint\nfrontend prometheus_frontend\n    bind *:8405\n    http-request use-service prometheus-exporter if { path /metrics }\n    http-request deny\nEOF\n\n# Create HAProxy exporter configuration\nsudo tee /etc/systemd/system/haproxy-exporter.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=HAProxy Exporter for Prometheus\nAfter=network.target\n\n[Service]\nType=simple\nUser=haproxy\nExecStart=/usr/local/bin/haproxy_exporter \\\n    --haproxy.scrape-uri=&quot;http://admin:secure_stats_password@localhost:8404/stats;csv&quot; \\\n    --web.listen-address=&quot;0.0.0.0:9101&quot;\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Download HAProxy exporter\nHAPROXY_EXPORTER_VERSION=&quot;0.15.0&quot;\nwget https://github.com/prometheus/haproxy_exporter/releases/download/v${HAPROXY_EXPORTER_VERSION}/haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64.tar.gz\ntar xzf haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64.tar.gz\nsudo cp haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64/haproxy_exporter /usr/local/bin/\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy-exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"comprehensive-logging\" class=\"mobile-header\">Comprehensive Logging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure rsyslog for HAProxy\nsudo tee /etc/rsyslog.d/49-haproxy.conf &gt; /dev/null &lt;&lt;EOF\n# HAProxy log configuration\n\\$ModLoad imudp\n\\$UDPServerRun 514\n\\$UDPServerAddress 127.0.0.1\n\n# HAProxy logs\nlocal0.*    /var/log/haproxy/haproxy.log\n&amp; stop\n\n# Separate access and error logs\nlocal0.info /var/log/haproxy/access.log\nlocal0.err  /var/log/haproxy/error.log\nlocal0.warning /var/log/haproxy/warning.log\nEOF\n\n# Create log directory\nsudo mkdir -p /var/log/haproxy\nsudo chown syslog:adm /var/log/haproxy\n\n# Configure log rotation\nsudo tee /etc/logrotate.d/haproxy &gt; /dev/null &lt;&lt;EOF\n/var/log/haproxy/*.log {\n    daily\n    rotate 30\n    missingok\n    notifempty\n    compress\n    delaycompress\n    postrotate\n        /bin/kill -HUP \\`cat /var/run/rsyslogd.pid 2&gt;/dev/null\\` 2&gt;/dev/null || true\n    endscript\n}\nEOF\n\nsudo systemctl restart rsyslog\nsudo systemctl reload haproxy</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-level-tuning\" class=\"mobile-header\">System-Level Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel optimization for HAProxy\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;EOF\n# HAProxy performance tuning\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_max_tw_buckets = 400000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 15000 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 16777216\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 65536 16777216\nnet.ipv4.tcp_wmem = 4096 65536 16777216\nfs.file-max = 100000\nvm.swappiness = 1\nEOF\n\nsudo sysctl -p\n\n# Set resource limits\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;EOF\nhaproxy soft nofile 65535\nhaproxy hard nofile 65535\nhaproxy soft nproc 65535\nhaproxy hard nproc 65535\nEOF\n\n# Optimize HAProxy service\nsudo tee /etc/systemd/system/haproxy.service.d/performance.conf &gt; /dev/null &lt;&lt;EOF\n[Service]\nLimitNOFILE=65535\nLimitNPROC=65535\nExecStart=\nExecStart=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock\nExecReload=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -c -q\nExecReload=/bin/kill -USR2 \\$MAINPID\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-performance-configuration\" class=\"mobile-header\">Advanced Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/haproxy/performance.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    # Performance optimization\n    maxconn 40000\n    nbthread 8\n    cpu-map auto:1/1-8 0-7\n    \n    # Memory optimization\n    tune.maxrewrite 1024\n    tune.bufsize 32768\n    \n    # Connection optimization\n    tune.maxaccept 500\n    tune.recv_enough 10000\n    \n    # SSL optimization\n    tune.ssl.default-dh-param 2048\n    tune.ssl.maxrecord 1460\n    tune.ssl.capture-buffer-size 0\n    \n    # Compression\n    tune.comp.maxlevel 6\n\ndefaults\n    # Performance settings\n    maxconn 8000\n    \n    # Timeouts\n    timeout connect 3s\n    timeout client 25s\n    timeout server 25s\n    timeout tunnel 3600s\n    timeout http-keep-alive 1s\n    timeout http-request 15s\n    timeout queue 30s\n    timeout tarpit 60s\n    \n    # Keep-alive optimization\n    option http-keep-alive\n    option prefer-last-server\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/css text/javascript application/javascript application/json application/xml\n\n# High-performance backend configuration\nbackend high_performance_backend\n    balance leastconn\n    option httpchk GET /health\n    http-check expect status 200\n    \n    # Connection pooling\n    option http-reuse always\n    \n    # Server configuration with optimal settings\n    default-server inter 1000 fastinter 500 downinter 2000 rise 2 fall 3 slowstart 30s maxconn 1000 maxqueue 256 weight 100\n    \n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\n    server web4 192.168.1.13:8080 check\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"configuration-management-and-backup\" class=\"mobile-header\">Configuration Management and Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/haproxy-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/haproxy&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{config,ssl,stats,logs}\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/config/haproxy-config-${DATE}.tar.gz \\\n    /etc/haproxy/ \\\n    /etc/systemd/system/haproxy.service* \\\n    /etc/keepalived/\n\n# Backup SSL certificates\ntar -czf ${BACKUP_DIR}/ssl/haproxy-ssl-${DATE}.tar.gz \\\n    /etc/haproxy/ssl/ \\\n    /etc/letsencrypt/\n\n# Backup statistics and runtime state\necho &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock &gt; ${BACKUP_DIR}/stats/haproxy-stats-${DATE}.txt\necho &quot;show info&quot; | socat stdio /run/haproxy/admin.sock &gt; ${BACKUP_DIR}/stats/haproxy-info-${DATE}.txt\necho &quot;show sess&quot; | socat stdio /run/haproxy/admin.sock &gt; ${BACKUP_DIR}/stats/haproxy-sessions-${DATE}.txt\n\n# Backup recent logs\nfind /var/log/haproxy -name &quot;*.log&quot; -mtime -1 -exec tar -czf ${BACKUP_DIR}/logs/haproxy-logs-${DATE}.tar.gz {} +\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://haproxy-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination haproxy-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://haproxy-backups/\n\n# Keep only last 15 backups\nfind ${BACKUP_DIR} -name &quot;haproxy-*&quot; -type f -mtime +15 -delete\n\n# Test configuration validity\nhaproxy -c -f /etc/haproxy/haproxy.cfg\n\necho &quot;HAProxy backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-backup.sh\n\n# Schedule daily backups\necho &quot;0 2 * * * root /usr/local/bin/haproxy-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"disaster-recovery-automation\" class=\"mobile-header\">Disaster Recovery Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/haproxy-dr.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nDR_MODE=&quot;${1:-test}&quot;  # test, activate, or deactivate\n\ncase &quot;$DR_MODE&quot; in\n    &quot;test&quot;)\n        echo &quot;Testing DR procedures...&quot;\n        \n        # Test backup restoration\n        LATEST_BACKUP=$(ls -t /backup/haproxy/config/haproxy-config-*.tar.gz | head -1)\n        if [ -n &quot;$LATEST_BACKUP&quot; ]; then\n            echo &quot;✓ Latest backup found: $LATEST_BACKUP&quot;\n        else\n            echo &quot;✗ No backup files found&quot;\n            exit 1\n        fi\n        \n        # Test configuration\n        haproxy -c -f /etc/haproxy/haproxy.cfg\n        echo &quot;✓ Configuration is valid&quot;\n        \n        # Test backend connectivity\n        for backend in $(echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;,BACKEND,&quot; | cut -d, -f1); do\n            echo &quot;Testing backend: $backend&quot;\n            echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;$backend&quot;\n        done\n        \n        echo &quot;DR test completed&quot;\n        ;;\n        \n    &quot;activate&quot;)\n        echo &quot;Activating DR procedures...&quot;\n        \n        # Switch to DR configuration\n        cp /etc/haproxy/haproxy-dr.cfg /etc/haproxy/haproxy.cfg\n        \n        # Reload HAProxy\n        systemctl reload haproxy\n        \n        # Update DNS (example with Route53)\n        aws route53 change-resource-record-sets --hosted-zone-id Z123456789 --change-batch file://dr-dns-update.json\n        \n        echo &quot;DR activated&quot;\n        ;;\n        \n    &quot;deactivate&quot;)\n        echo &quot;Deactivating DR procedures...&quot;\n        \n        # Restore original configuration\n        cp /etc/haproxy/haproxy.cfg.backup /etc/haproxy/haproxy.cfg\n        \n        # Reload HAProxy\n        systemctl reload haproxy\n        \n        # Update DNS back to primary\n        aws route53 change-resource-record-sets --hosted-zone-id Z123456789 --change-batch file://primary-dns-update.json\n        \n        echo &quot;DR deactivated&quot;\n        ;;\n        \n    *)\n        echo &quot;Usage: $0 {test|activate|deactivate}&quot;\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-dr.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-health-checks\" class=\"mobile-header\">Verification and Health Checks</h2>\n<h3 id=\"comprehensive-health-monitoring\" class=\"mobile-header\">Comprehensive Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/haproxy-health-check.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/haproxy-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check HAProxy service status\nif systemctl is-active haproxy &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ HAProxy service is running&quot;\nelse\n    log_message &quot;✗ HAProxy service is not running&quot;\n    exit 1\nfi\n\n# Check configuration validity\nif haproxy -c -f /etc/haproxy/haproxy.cfg &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ HAProxy configuration is valid&quot;\nelse\n    log_message &quot;✗ HAProxy configuration has errors&quot;\n    haproxy -c -f /etc/haproxy/haproxy.cfg\nfi\n\n# Check listening ports\nLISTENING_PORTS=$(netstat -tlnp | grep haproxy | wc -l)\nlog_message &quot;✓ HAProxy is listening on ${LISTENING_PORTS} ports&quot;\n\n# Check backend server health\nBACKEND_STATS=$(echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep -c &quot;,UP,&quot;)\nTOTAL_SERVERS=$(echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep -c &quot;,.*,&quot;)\nlog_message &quot;✓ ${BACKEND_STATS}/${TOTAL_SERVERS} backend servers are healthy&quot;\n\n# Check SSL certificate expiry\nif [ -d /etc/haproxy/ssl ]; then\n    for cert in /etc/haproxy/ssl/*.pem; do\n        if [ -f &quot;$cert&quot; ]; then\n            EXPIRY=$(openssl x509 -in &quot;$cert&quot; -noout -dates | grep notAfter | cut -d= -f2)\n            EXPIRY_EPOCH=$(date -d &quot;$EXPIRY&quot; +%s)\n            CURRENT_EPOCH=$(date +%s)\n            DAYS_TO_EXPIRY=$(( (EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))\n            \n            if [ $DAYS_TO_EXPIRY -lt 30 ]; then\n                log_message &quot;⚠ SSL certificate $(basename $cert) expires in ${DAYS_TO_EXPIRY} days&quot;\n            else\n                log_message &quot;✓ SSL certificate $(basename $cert) expires in ${DAYS_TO_EXPIRY} days&quot;\n            fi\n        fi\n    done\nfi\n\n# Check memory usage\nMEMORY_USAGE=$(ps -o pid,vsz,rss,comm -C haproxy | tail -1 | awk &#039;{print $3/1024}&#039;)\nlog_message &quot;ℹ HAProxy memory usage: ${MEMORY_USAGE}MB&quot;\n\n# Check connection statistics\nCURRENT_CONNS=$(echo &quot;show info&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;CurrConns&quot; | cut -d: -f2 | tr -d &#039; &#039;)\nMAX_CONNS=$(echo &quot;show info&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;MaxConn&quot; | cut -d: -f2 | tr -d &#039; &#039;)\nlog_message &quot;ℹ Current connections: ${CURRENT_CONNS}/${MAX_CONNS}&quot;\n\n# Check for any backend servers that are down\nDOWN_SERVERS=$(echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;,DOWN,&quot; | wc -l)\nif [ $DOWN_SERVERS -gt 0 ]; then\n    log_message &quot;⚠ ${DOWN_SERVERS} backend servers are down&quot;\n    echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;,DOWN,&quot; | while IFS=, read pxname svname; do\n        log_message &quot;  - ${pxname}/${svname} is DOWN&quot;\n    done\nfi\n\nlog_message &quot;HAProxy health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-health-check.sh\n\n# Schedule health checks every 5 minutes\necho &quot;*/5 * * * * root /usr/local/bin/haproxy-health-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"load-testing-and-performance-validation\" class=\"mobile-header\">Load Testing and Performance Validation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/haproxy-load-test.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nTEST_RESULTS=&quot;/tmp/haproxy-load-test-$(date +%Y%m%d_%H%M%S).txt&quot;\nTEST_URL=&quot;https://example.com&quot;\nCONCURRENT_USERS=100\nTEST_DURATION=60\n\necho &quot;HAProxy Load Test Results&quot; &gt; ${TEST_RESULTS}\necho &quot;========================&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Date: $(date)&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Target URL: ${TEST_URL}&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Concurrent Users: ${CONCURRENT_USERS}&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Test Duration: ${TEST_DURATION}s&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;&quot; &gt;&gt; ${TEST_RESULTS}\n\n# Install testing tools if not available\nif ! command -v ab &amp;&gt; /dev/null; then\n    apt-get update &amp;&amp; apt-get install -y apache2-utils\nfi\n\nif ! command -v wrk &amp;&gt; /dev/null; then\n    git clone https://github.com/wg/wrk.git /tmp/wrk\n    cd /tmp/wrk &amp;&amp; make &amp;&amp; cp wrk /usr/local/bin/\nfi\n\n# Run Apache Bench test\necho &quot;Apache Bench Results:&quot; &gt;&gt; ${TEST_RESULTS}\nab -n 10000 -c ${CONCURRENT_USERS} -k ${TEST_URL}/ &gt;&gt; ${TEST_RESULTS} 2&gt;&amp;1\n\necho &quot;&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;WRK Results:&quot; &gt;&gt; ${TEST_RESULTS}\nwrk -t4 -c${CONCURRENT_USERS} -d${TEST_DURATION}s --latency ${TEST_URL}/ &gt;&gt; ${TEST_RESULTS}\n\n# Capture HAProxy stats during test\necho &quot;&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;HAProxy Statistics During Test:&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;show info&quot; | socat stdio /run/haproxy/admin.sock &gt;&gt; ${TEST_RESULTS}\necho &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock &gt;&gt; ${TEST_RESULTS}\n\necho &quot;&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Load test completed at: $(date)&quot; &gt;&gt; ${TEST_RESULTS}\n\necho &quot;Load test completed. Results: ${TEST_RESULTS}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-load-test.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration-cross-platform\" class=\"mobile-header\">Firewall Configuration (Cross-Platform)</h2>\n<h3 id=\"security-rules\" class=\"mobile-header\">Security Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 80/tcp comment &#039;HTTP&#039;\nsudo ufw allow 443/tcp comment &#039;HTTPS&#039; \nsudo ufw allow from 192.168.1.0/24 to any port 8404 comment &#039;Stats interface - internal only&#039;\nsudo ufw allow from 192.168.1.0/24 to any port 9101 comment &#039;Prometheus exporter - internal only&#039;\nsudo ufw deny 8404 comment &#039;Block stats from public&#039;\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS/Fedora)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --new-zone=haproxy-mgmt\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-port=8404/tcp\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-port=9101/tcp\nsudo firewall-cmd --reload\n\n# iptables (Universal)\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 8404 -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 9101 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 8404 -j DROP\nsudo iptables -A INPUT -p tcp --dport 9101 -j DROP\n\n# Save iptables rules\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save</code></pre>\n      </div>\n    </div>\n<h3 id=\"ddos-protection-configuration\" class=\"mobile-header\">DDoS Protection Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/haproxy/ddos-protection.cfg &gt; /dev/null &lt;&lt;EOF\n# DDoS Protection Configuration\n\nglobal\n    # Stick tables for tracking\n    tune.stick-table.enable 1\n\nfrontend ddos_protection\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/ssl/\n    \n    # Track client behavior\n    stick-table type ip size 1m expire 5m store gpc0,gpc1,http_req_rate(10s),http_err_rate(10s),conn_rate(10s),bytes_out_rate(10s)\n    \n    # Track requests\n    http-request track-sc0 src\n    \n    # Rate limiting rules\n    acl abuse_request_rate sc_http_req_rate(0) gt 100\n    acl abuse_connection_rate sc_conn_rate(0) gt 20\n    acl abuse_error_rate sc_http_err_rate(0) gt 10\n    acl abuse_bandwidth sc_bytes_out_rate(0) gt 10000000  # 10MB/s\n    \n    # Geographic blocking (requires GeoIP)\n    # acl blocked_countries src,map_ip(/etc/haproxy/geoip-country.map) -i CN RU\n    \n    # User-Agent filtering\n    acl bad_user_agent hdr_sub(User-Agent) -i &quot;sqlmap&quot; &quot;nikto&quot; &quot;nmap&quot; &quot;masscan&quot; &quot;zmap&quot;\n    acl empty_user_agent hdr_cnt(User-Agent) eq 0\n    \n    # HTTP method filtering\n    acl allowed_methods method GET POST PUT DELETE HEAD OPTIONS PATCH\n    \n    # Deny rules\n    http-request deny if abuse_request_rate\n    http-request deny if abuse_connection_rate\n    http-request deny if abuse_error_rate\n    http-request deny if abuse_bandwidth\n    http-request deny if bad_user_agent\n    http-request deny if empty_user_agent\n    http-request deny if !allowed_methods\n    # http-request deny if blocked_countries\n    \n    # Tarpit suspicious clients\n    http-request tarpit if { sc_http_req_rate(0) gt 50 }\n    \n    default_backend web_servers\n\n# Clean backend\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health\n    \n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"runtime-management-and-monitoring\" class=\"mobile-header\">Runtime Management and Monitoring</h2>\n<h3 id=\"advanced-runtime-commands\" class=\"mobile-header\">Advanced Runtime Commands</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create HAProxy management script\nsudo tee /usr/local/bin/haproxy-manage.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHAPROXY_SOCKET=&quot;/run/haproxy/admin.sock&quot;\n\ncase &quot;$1&quot; in\n    &quot;status&quot;)\n        echo &quot;=== HAProxy Status ===&quot;\n        echo &quot;show info&quot; | socat stdio ${HAPROXY_SOCKET}\n        echo &quot;&quot;\n        echo &quot;=== Server Status ===&quot;\n        echo &quot;show stat&quot; | socat stdio ${HAPROXY_SOCKET} | column -t -s &quot;,&quot;\n        ;;\n    \n    &quot;enable&quot;)\n        if [ -z &quot;$2&quot; ] || [ -z &quot;$3&quot; ]; then\n            echo &quot;Usage: $0 enable &lt;backend&gt; &lt;server&gt;&quot;\n            exit 1\n        fi\n        echo &quot;enable server $2/$3&quot; | socat stdio ${HAPROXY_SOCKET}\n        echo &quot;Server $2/$3 enabled&quot;\n        ;;\n    \n    &quot;disable&quot;)\n        if [ -z &quot;$2&quot; ] || [ -z &quot;$3&quot; ]; then\n            echo &quot;Usage: $0 disable &lt;backend&gt; &lt;server&gt;&quot;\n            exit 1\n        fi\n        echo &quot;disable server $2/$3&quot; | socat stdio ${HAPROXY_SOCKET}\n        echo &quot;Server $2/$3 disabled&quot;\n        ;;\n    \n    &quot;weight&quot;)\n        if [ -z &quot;$2&quot; ] || [ -z &quot;$3&quot; ] || [ -z &quot;$4&quot; ]; then\n            echo &quot;Usage: $0 weight &lt;backend&gt; &lt;server&gt; &lt;weight&gt;&quot;\n            exit 1\n        fi\n        echo &quot;set weight $2/$3 $4&quot; | socat stdio ${HAPROXY_SOCKET}\n        echo &quot;Weight for $2/$3 set to $4&quot;\n        ;;\n    \n    &quot;sessions&quot;)\n        echo &quot;=== Active Sessions ===&quot;\n        echo &quot;show sess&quot; | socat stdio ${HAPROXY_SOCKET}\n        ;;\n    \n    &quot;errors&quot;)\n        echo &quot;=== Recent Errors ===&quot;\n        echo &quot;show errors&quot; | socat stdio ${HAPROXY_SOCKET}\n        ;;\n    \n    &quot;reload&quot;)\n        echo &quot;Reloading HAProxy configuration...&quot;\n        if haproxy -c -f /etc/haproxy/haproxy.cfg; then\n            systemctl reload haproxy\n            echo &quot;Configuration reloaded successfully&quot;\n        else\n            echo &quot;Configuration has errors, reload aborted&quot;\n            exit 1\n        fi\n        ;;\n    \n    &quot;drain&quot;)\n        if [ -z &quot;$2&quot; ] || [ -z &quot;$3&quot; ]; then\n            echo &quot;Usage: $0 drain &lt;backend&gt; &lt;server&gt;&quot;\n            exit 1\n        fi\n        echo &quot;set server $2/$3 state drain&quot; | socat stdio ${HAPROXY_SOCKET}\n        echo &quot;Server $2/$3 is being drained&quot;\n        \n        # Wait for connections to finish\n        while [ $(echo &quot;show stat&quot; | socat stdio ${HAPROXY_SOCKET} | grep &quot;$2,$3&quot; | cut -d, -f5) -gt 0 ]; do\n            echo &quot;Waiting for connections to finish...&quot;\n            sleep 5\n        done\n        echo &quot;Server $2/$3 has been drained&quot;\n        ;;\n    \n    *)\n        echo &quot;Usage: $0 {status|enable|disable|weight|sessions|errors|reload|drain} [options]&quot;\n        echo &quot;&quot;\n        echo &quot;Examples:&quot;\n        echo &quot;  $0 status&quot;\n        echo &quot;  $0 enable web_servers web1&quot;\n        echo &quot;  $0 disable web_servers web1&quot;\n        echo &quot;  $0 weight web_servers web1 50&quot;\n        echo &quot;  $0 drain web_servers web1&quot;\n        echo &quot;  $0 sessions&quot;\n        echo &quot;  $0 errors&quot;\n        echo &quot;  $0 reload&quot;\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-manage.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"automated-log-analysis\" class=\"mobile-header\">Automated Log Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/haproxy-log-analysis.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOG_FILE=&quot;/var/log/haproxy/haproxy.log&quot;\nANALYSIS_DIR=&quot;/var/log/haproxy-analysis&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${ANALYSIS_DIR}\n\n# Top client IPs\necho &quot;Top Client IPs - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/top-clients-${DATE}.txt\nawk &#039;{print $6}&#039; ${LOG_FILE} | sort | uniq -c | sort -nr | head -20 &gt;&gt; ${ANALYSIS_DIR}/top-clients-${DATE}.txt\n\n# Response time analysis\necho &quot;Response Time Analysis - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/response-times-${DATE}.txt\nawk &#039;{print $11}&#039; ${LOG_FILE} | grep -v &#039;^-$&#039; | sort -n | tail -100 &gt;&gt; ${ANALYSIS_DIR}/response-times-${DATE}.txt\n\n# Error analysis\necho &quot;Error Analysis - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/errors-${DATE}.txt\nawk &#039;$10 &gt;= 400 {print $0}&#039; ${LOG_FILE} | tail -100 &gt;&gt; ${ANALYSIS_DIR}/errors-${DATE}.txt\n\n# Backend server analysis\necho &quot;Backend Server Performance - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/backend-performance-${DATE}.txt\nawk &#039;{print $8}&#039; ${LOG_FILE} | sort | uniq -c | sort -nr &gt;&gt; ${ANALYSIS_DIR}/backend-performance-${DATE}.txt\n\n# SSL/TLS analysis\necho &quot;SSL/TLS Analysis - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/ssl-analysis-${DATE}.txt\ngrep &quot;SSL&quot; ${LOG_FILE} | tail -50 &gt;&gt; ${ANALYSIS_DIR}/ssl-analysis-${DATE}.txt\n\n# Generate summary report\ncat &gt; ${ANALYSIS_DIR}/summary-${DATE}.txt &lt;&lt;EOL\nHAProxy Log Analysis Summary - ${DATE}\n=====================================\n\nTotal Requests: $(wc -l &lt; ${LOG_FILE})\nUnique IPs: $(awk &#039;{print $6}&#039; ${LOG_FILE} | sort -u | wc -l)\n4xx Errors: $(awk &#039;$10 &gt;= 400 &amp;&amp; $10 &lt; 500 {print $0}&#039; ${LOG_FILE} | wc -l)\n5xx Errors: $(awk &#039;$10 &gt;= 500 {print $0}&#039; ${LOG_FILE} | wc -l)\n\nAverage Response Time: $(awk &#039;{sum += $11; count++} END {print sum/count}&#039; ${LOG_FILE})ms\n\nTop 5 Requested URLs:\n$(awk &#039;{print $12}&#039; ${LOG_FILE} | sort | uniq -c | sort -nr | head -5)\n\nAnalysis completed at: $(date)\nEOL\n\necho &quot;Log analysis completed. Reports in: ${ANALYSIS_DIR}/&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-log-analysis.sh\n\n# Schedule daily log analysis\necho &quot;0 6 * * * root /usr/local/bin/haproxy-log-analysis.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check HAProxy process status\nps aux | grep haproxy\nsystemctl status haproxy\n\n# Configuration validation\nhaproxy -c -f /etc/haproxy/haproxy.cfg\nhaproxy -c -V -f /etc/haproxy/haproxy.cfg\n\n# Socket connectivity test\nsocat - /run/haproxy/admin.sock\necho &quot;show info&quot; | socat stdio /run/haproxy/admin.sock\n\n# Backend server connectivity test\nfor server in 192.168.1.10 192.168.1.11 192.168.1.12; do\n    echo &quot;Testing $server...&quot;\n    nc -zv $server 8080\n    curl -I http://$server:8080/health\ndone\n\n# SSL certificate issues\nopenssl x509 -in /etc/haproxy/ssl/example.com.pem -text -noout\nopenssl verify -CAfile /etc/haproxy/ssl/ca.crt /etc/haproxy/ssl/example.com.pem\n\n# Memory usage debugging\npmap -x $(pgrep haproxy)\ncat /proc/$(pgrep haproxy)/status | grep -E &quot;(VmSize|VmRSS|VmData|VmStk)&quot;\n\n# Network debugging\nss -tulpn | grep haproxy\nnetstat -tulpn | grep haproxy\nlsof -i :80,443,8404\n\n# Log debugging\ntail -f /var/log/haproxy/haproxy.log\njournalctl -u haproxy -f\n\n# Performance debugging\necho &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep -v &quot;^#&quot;\necho &quot;show sess&quot; | socat stdio /run/haproxy/admin.sock\necho &quot;show pools&quot; | socat stdio /run/haproxy/admin.sock\n\n# Configuration debugging\nhaproxy -vv\nhaproxy -dM -f /etc/haproxy/haproxy.cfg  # Don&#039;t use in production\n\n# Check for core dumps\nfind /var/crash -name &quot;haproxy*&quot; 2&gt;/dev/null\nfind /var/lib/systemd/coredump -name &quot;*haproxy*&quot; 2&gt;/dev/null</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nsudo systemctl edit haproxy.service\n# Add:\n[Service]\nExecStart=\nExecStart=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock -d\n\nsudo systemctl daemon-reload\nsudo systemctl restart haproxy\n\n# Real-time connection monitoring\nwatch -n 1 &#039;echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep -E &quot;FRONTEND|BACKEND&quot; | column -t -s &quot;,&quot;&#039;\n\n# TCP dump for network analysis\ntcpdump -i any -w haproxy-traffic.pcap port 80 or port 443\ntcpdump -i any -w backend-traffic.pcap host 192.168.1.10\n\n# Strace HAProxy process\nstrace -p $(pgrep haproxy) -e trace=network\n\n# Monitor file descriptors\nlsof -p $(pgrep haproxy) | wc -l\ncat /proc/$(pgrep haproxy)/limits | grep &quot;Max open files&quot;\n\n# Check shared memory segments\nipcs -m | grep haproxy\n\n# Monitor syscalls\nperf trace -p $(pgrep haproxy)</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.haproxy.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://cbonte.github.io/haproxy-dconv/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HAProxy Configuration Manual</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.haproxy.com/documentation/hapee/latest/configuration/best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.haproxy.com/blog/haproxy-performance-tuning/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.haproxy.com/solutions/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discourse.haproxy.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"29 min","wordCount":5710,"lastBuilt":"2025-09-14T01:30:35.420Z"},{"name":"home-assistant","displayName":"Home Assistant","slug":"home-assistant","description":"Repo for home-assistant","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/home-assistant","updatedAt":"2025-09-08T03:08:39Z","createdAt":"2023-08-28T03:48:06Z","readmeRaw":"# Home-Assistant on CentOS 7\n\n```bash\n# Optionally add user\n#adduser --system --shell=/bin/bash --home=/var/lib/homeassistant  homeassistant\n\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/rpm-packages.txt -O /tmp/hass-rpms.txt\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/requirements-el7.txt -O /tmp/hass-pips.txt\n\nyum install -y $(cat /tmp/hass-rpms.txt)\n\n#Optional switch to user and clone repo\n#su - homeassistant\n#git clone https://github.com/casjay-devices/home-assistant /var/lib/homeassistant/.homeassistant\n\ncd /var/lib/homeassistant && python3 -m venv . && source ./bin/activate\n\n/var/lib/homeassistant/bin/python3 -m pip install --upgrade pip\n/var/lib/homeassistant/bin/python3 -m pip install wheel\n/var/lib/homeassistant/bin/python3 -m pip install python-openzwave\n/var/lib/homeassistant/bin/python3 -m pip install homeassistant \n/var/lib/homeassistant/bin/python3 -m pip install -r /tmp/hass-pips.txt\nsystemctl daemon-reload && systemctl enable hass.service\n\necho 'SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"0658\", ATTRS{idProduct}==\"0200\", SYMLINK+=\"zwave\"' >> /etc/udev/rules.d/99-usb-serial.rules\necho 'SUBSYSTEM==\"tty\", ATTRS{idVendor}==\"067b\", ATTRS{idProduct}==\"2303\", SYMLINK+=\"gps\"' >> /etc/udev/rules.d/99-usb-serial.rules\n\ndeactivate\n```\n","readmeHtml":"<h1 id=\"home-assistant-on-centos-7\" class=\"mobile-header\">Home-Assistant on CentOS 7</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optionally add user\n#adduser --system --shell=/bin/bash --home=/var/lib/homeassistant  homeassistant\n\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/rpm-packages.txt -O /tmp/hass-rpms.txt\nwget https://github.com/casjay-base/howtos/raw/main/home-assistant/requirements-el7.txt -O /tmp/hass-pips.txt\n\nyum install -y $(cat /tmp/hass-rpms.txt)\n\n#Optional switch to user and clone repo\n#su - homeassistant\n#git clone https://github.com/casjay-devices/home-assistant /var/lib/homeassistant/.homeassistant\n\ncd /var/lib/homeassistant &amp;&amp; python3 -m venv . &amp;&amp; source ./bin/activate\n\n/var/lib/homeassistant/bin/python3 -m pip install --upgrade pip\n/var/lib/homeassistant/bin/python3 -m pip install wheel\n/var/lib/homeassistant/bin/python3 -m pip install python-openzwave\n/var/lib/homeassistant/bin/python3 -m pip install homeassistant \n/var/lib/homeassistant/bin/python3 -m pip install -r /tmp/hass-pips.txt\nsystemctl daemon-reload &amp;&amp; systemctl enable hass.service\n\necho &#039;SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;0658&quot;, ATTRS{idProduct}==&quot;0200&quot;, SYMLINK+=&quot;zwave&quot;&#039; &gt;&gt; /etc/udev/rules.d/99-usb-serial.rules\necho &#039;SUBSYSTEM==&quot;tty&quot;, ATTRS{idVendor}==&quot;067b&quot;, ATTRS{idProduct}==&quot;2303&quot;, SYMLINK+=&quot;gps&quot;&#039; &gt;&gt; /etc/udev/rules.d/99-usb-serial.rules\n\ndeactivate</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":102,"lastBuilt":"2025-09-14T01:30:45.223Z"},{"name":"influxdb","displayName":"Influxdb","slug":"influxdb","description":"Repo for influxdb","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/influxdb","updatedAt":"2025-09-08T03:08:55Z","createdAt":"2025-09-08T03:08:45Z","readmeRaw":"## 👋 Welcome to influxdb 🚀  \n\ninfluxdb README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-influxdb\" class=\"mobile-header\">👋 Welcome to influxdb 🚀  </h2>\n<p class=\"mobile-paragraph\">influxdb README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:45.072Z"},{"name":"jellyfin","displayName":"Jellyfin","slug":"jellyfin","description":"Repo for jellyfin","category":"media","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jellyfin","updatedAt":"2025-09-14T01:30:13Z","createdAt":"2025-09-08T03:08:57Z","readmeRaw":"# Jellyfin Installation Guide\n\nOpen-source media server for managing and streaming your personal media collection. Modern alternative to Plex with no licensing restrictions and complete control over your media library.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for transcoding\n- GPU recommended for hardware transcoding (Intel Quick Sync, NVIDIA, AMD)\n- Storage space for media library\n- Network connectivity for remote access\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install prerequisite packages\nsudo apt install -y curl gnupg\n\n# Add Jellyfin repository\ncurl -fsSL https://repo.jellyfin.org/install-debuntu.sh | sudo bash\n\n# Install Jellyfin\nsudo apt install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo ufw allow 8096/tcp comment 'Jellyfin HTTP'\nsudo ufw allow 8920/tcp comment 'Jellyfin HTTPS'\n\n# Verify installation\nsudo systemctl status jellyfin\ncurl -I http://localhost:8096\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Add Jellyfin repository\nsudo rpm --import https://repo.jellyfin.org/jellyfin_team.gpg.key\n\nsudo tee /etc/yum.repos.d/jellyfin.repo > /dev/null <<EOF\n[jellyfin]\nname=Jellyfin Repository\nbaseurl=https://repo.jellyfin.org/releases/server/centos/versions/stable/server/\\$basearch/\nenabled=1\ngpgcheck=1\ngpgkey=https://repo.jellyfin.org/jellyfin_team.gpg.key\nEOF\n\n# Install Jellyfin\nsudo yum install -y jellyfin-server jellyfin-web\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n```\n\n## Configuration\n\n### Hardware Transcoding Setup\n```bash\n# Install hardware transcoding drivers\n# Intel Quick Sync\nsudo apt install -y intel-media-va-driver-non-free\n\n# Add jellyfin user to video group\nsudo usermod -aG video,render jellyfin\n\n# Verify hardware access\nls -la /dev/dri/\n```\n\n### NGINX Reverse Proxy\n```bash\nsudo tee /etc/nginx/sites-available/jellyfin > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name jellyfin.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jellyfin.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jellyfin.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jellyfin.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:8096;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/jellyfin /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n## Backup and Monitoring\n\n### Backup Strategy\n```bash\nsudo tee /usr/local/bin/jellyfin-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/jellyfin\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup Jellyfin configuration and database\nsystemctl stop jellyfin\ntar -czf ${BACKUP_DIR}/jellyfin-${DATE}.tar.gz -C /var/lib/jellyfin .\nsystemctl start jellyfin\n\necho \"Jellyfin backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-backup.sh\necho \"0 2 * * * root /usr/local/bin/jellyfin-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Health Monitoring\n```bash\nsudo tee /usr/local/bin/jellyfin-health.sh > /dev/null <<'EOF'\n#!/bin/bash\nLOG=\"/var/log/jellyfin-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active jellyfin >/dev/null; then\n    log_message \"✓ Jellyfin service running\"\nelse\n    log_message \"✗ Jellyfin service not running\"\nfi\n\n# Check web interface\nif curl -f http://localhost:8096/health >/dev/null 2>&1; then\n    log_message \"✓ Web interface responding\"\nelse\n    log_message \"✗ Web interface not responding\"\nfi\n\nlog_message \"Health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-health.sh\necho \"*/15 * * * * root /usr/local/bin/jellyfin-health.sh\" | sudo tee -a /etc/crontab\n```\n\n## Additional Resources\n\n- [Jellyfin Documentation](https://jellyfin.org/docs/)\n- [Hardware Acceleration Guide](https://jellyfin.org/docs/general/administration/hardware-acceleration/)\n- [Jellyfin Community](https://forum.jellyfin.org/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"jellyfin-installation-guide\" class=\"mobile-header\">Jellyfin Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source media server for managing and streaming your personal media collection. Modern alternative to Plex with no licensing restrictions and complete control over your media library.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for transcoding</li>\n<li class=\"mobile-list-item\">GPU recommended for hardware transcoding (Intel Quick Sync, NVIDIA, AMD)</li>\n<li class=\"mobile-list-item\">Storage space for media library</li>\n<li class=\"mobile-list-item\">Network connectivity for remote access</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install prerequisite packages\nsudo apt install -y curl gnupg\n\n# Add Jellyfin repository\ncurl -fsSL https://repo.jellyfin.org/install-debuntu.sh | sudo bash\n\n# Install Jellyfin\nsudo apt install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo ufw allow 8096/tcp comment &#039;Jellyfin HTTP&#039;\nsudo ufw allow 8920/tcp comment &#039;Jellyfin HTTPS&#039;\n\n# Verify installation\nsudo systemctl status jellyfin\ncurl -I http://localhost:8096</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Jellyfin repository\nsudo rpm --import https://repo.jellyfin.org/jellyfin_team.gpg.key\n\nsudo tee /etc/yum.repos.d/jellyfin.repo &gt; /dev/null &lt;&lt;EOF\n[jellyfin]\nname=Jellyfin Repository\nbaseurl=https://repo.jellyfin.org/releases/server/centos/versions/stable/server/\\$basearch/\nenabled=1\ngpgcheck=1\ngpgkey=https://repo.jellyfin.org/jellyfin_team.gpg.key\nEOF\n\n# Install Jellyfin\nsudo yum install -y jellyfin-server jellyfin-web\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"hardware-transcoding-setup\" class=\"mobile-header\">Hardware Transcoding Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install hardware transcoding drivers\n# Intel Quick Sync\nsudo apt install -y intel-media-va-driver-non-free\n\n# Add jellyfin user to video group\nsudo usermod -aG video,render jellyfin\n\n# Verify hardware access\nls -la /dev/dri/</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy\" class=\"mobile-header\">NGINX Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/nginx/sites-available/jellyfin &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 80;\n    server_name jellyfin.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jellyfin.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jellyfin.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jellyfin.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:8096;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/jellyfin /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-monitoring\" class=\"mobile-header\">Backup and Monitoring</h2>\n<h3 id=\"backup-strategy\" class=\"mobile-header\">Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/jellyfin-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/jellyfin&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup Jellyfin configuration and database\nsystemctl stop jellyfin\ntar -czf ${BACKUP_DIR}/jellyfin-${DATE}.tar.gz -C /var/lib/jellyfin .\nsystemctl start jellyfin\n\necho &quot;Jellyfin backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-backup.sh\necho &quot;0 2 * * * root /usr/local/bin/jellyfin-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/jellyfin-health.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOG=&quot;/var/log/jellyfin-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active jellyfin &gt;/dev/null; then\n    log_message &quot;✓ Jellyfin service running&quot;\nelse\n    log_message &quot;✗ Jellyfin service not running&quot;\nfi\n\n# Check web interface\nif curl -f http://localhost:8096/health &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Web interface responding&quot;\nelse\n    log_message &quot;✗ Web interface not responding&quot;\nfi\n\nlog_message &quot;Health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-health.sh\necho &quot;*/15 * * * * root /usr/local/bin/jellyfin-health.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://jellyfin.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jellyfin Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://jellyfin.org/docs/general/administration/hardware-acceleration/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Hardware Acceleration Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forum.jellyfin.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jellyfin Community</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"3 min","wordCount":507,"lastBuilt":"2025-09-14T01:30:35.188Z"},{"name":"jenkins","displayName":"Jenkins","slug":"jenkins","description":"Repo for jenkins","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jenkins","updatedAt":"2025-09-14T01:30:16Z","createdAt":"2023-08-28T03:48:15Z","readmeRaw":"# Jenkins Installation Guide\n\nOpen-source automation server for building, testing, and deploying applications. Industry-leading CI/CD platform with extensive plugin ecosystem and enterprise-grade security features.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- Java 11 or 17 (LTS versions recommended)\n- 4GB RAM minimum, 8GB+ recommended for production\n- 50GB+ disk space for builds and artifacts\n- Network connectivity for external integrations\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install Java 17 (LTS)\nsudo apt install -y openjdk-17-jdk openjdk-17-jre\n\n# Add Jenkins repository and key\nwget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo apt-key add -\necho \"deb https://pkg.jenkins.io/debian-stable binary/\" | sudo tee /etc/apt/sources.list.d/jenkins.list\n\n# Update package list\nsudo apt update\n\n# Install Jenkins\nsudo apt install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo ufw allow 8080/tcp comment 'Jenkins HTTP'\nsudo ufw allow OpenSSH\n\n# Verify installation\nsudo systemctl status jenkins\njava -version\njenkins --version\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install Java 17\nsudo yum install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key\n\n# Install Jenkins\nsudo yum install -y jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp  # Agent communication\nsudo firewall-cmd --reload\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Verify installation\nsudo systemctl status jenkins\n```\n\n### Fedora\n```bash\n# Install Java 17\nsudo dnf install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key\n\n# Install Jenkins\nsudo dnf install -y jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n```\n\n### Arch Linux\n```bash\n# Install Java\nsudo pacman -Syu jdk17-openjdk\n\n# Install Jenkins from AUR\nyay -S jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Verify installation\nsudo systemctl status jenkins\n```\n\n### Docker Installation (Recommended for Development)\n```bash\n# Create Jenkins directories\nmkdir -p ~/jenkins/{jenkins_home,docker_certs,docker_sock}\n\n# Run Jenkins container with Docker support\ndocker run -d \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  -v ~/jenkins/jenkins_home:/var/jenkins_home \\\n  -v ~/jenkins/docker_certs:/certs/client:ro \\\n  -v ~/jenkins/docker_sock:/var/run/docker.sock \\\n  --group-add $(getent group docker | cut -d: -f3) \\\n  --security-opt no-new-privileges:true \\\n  jenkins/jenkins:lts-jdk17\n\n# Get initial admin password\ndocker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n```\n\n## Security Hardening (2024 Best Practices)\n\n### Initial Security Setup\n```bash\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n\n# Complete setup via web interface: http://your-server:8080\n# 1. Enter admin password\n# 2. Install suggested plugins\n# 3. Create first admin user\n# 4. Configure Jenkins URL\n\n# Advanced security configuration via Jenkins CLI\n# Download Jenkins CLI\nwget http://localhost:8080/jnlpJars/jenkins-cli.jar\n\n# Create CLI configuration script\ncat > jenkins-security-config.sh <<'EOF'\n#!/bin/bash\nJENKINS_URL=\"http://localhost:8080\"\nADMIN_USER=\"admin\"\nADMIN_PASS=\"secure_admin_password_2024\"\n\n# Function to run Jenkins CLI commands\nrun_jenkins_cli() {\n    java -jar jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_USER}:${ADMIN_PASS} \"$@\"\n}\n\n# Install essential security plugins\nrun_jenkins_cli install-plugin \\\n    authorize-project \\\n    build-timeout \\\n    credentials-binding \\\n    workflow-aggregator \\\n    matrix-auth \\\n    pam-auth \\\n    ldap \\\n    role-strategy \\\n    audit-trail \\\n    job-dsl \\\n    pipeline-stage-view \\\n    blueocean\n\n# Configure global security\nrun_jenkins_cli groovy = <<GROOVY\nimport jenkins.model.*\nimport hudson.security.*\nimport hudson.security.csrf.DefaultCrumbIssuer\n\ndef instance = Jenkins.getInstance()\n\n// Enable CSRF protection\ninstance.setCrumbIssuer(new DefaultCrumbIssuer(true))\n\n// Configure security realm (local users)\ndef hudsonRealm = new HudsonPrivateSecurityRealm(false)\ninstance.setSecurityRealm(hudsonRealm)\n\n// Create admin user\ndef adminUser = hudsonRealm.createAccount(\"admin\", \"secure_admin_password_2024\")\n\n// Configure authorization strategy\ndef strategy = new FullControlOnceLoggedInAuthorizationStrategy()\nstrategy.setDenyAnonymousReadAccess(true)\ninstance.setAuthorizationStrategy(strategy)\n\n// Disable CLI over remoting\ninstance.getDescriptor(\"jenkins.CLI\").get().setEnabled(false)\n\n// Disable agent-to-master access control for security\ninstance.getExtensionList(jenkins.security.s2m.AdminWhitelistRule.class)\n    .get(jenkins.security.s2m.AdminWhitelistRule.class)\n    .setMasterKillSwitch(false)\n\n// Enable slave-to-master access control\ninstance.injector.getInstance(AdminWhitelistRule.class).setMasterKillSwitch(false)\n\n// Save configuration\ninstance.save()\n\nprintln \"Security configuration applied\"\nGROOVY\n\necho \"Jenkins security configuration completed\"\nEOF\n\nchmod +x jenkins-security-config.sh\n./jenkins-security-config.sh\n```\n\n### Advanced Authentication Setup\n```bash\n# Configure LDAP authentication\ncat > ldap-config.groovy <<'EOF'\nimport jenkins.model.*\nimport hudson.security.*\nimport hudson.security.LDAPSecurityRealm\n\ndef instance = Jenkins.getInstance()\n\n// LDAP configuration\ndef ldapRealm = new LDAPSecurityRealm(\n    \"ldaps://ldap.example.com:636\",  // LDAP server\n    \"DC=example,DC=com\",             // Root DN\n    \"(&(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))\", // User search filter\n    \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\", // Manager DN\n    \"ldap_service_password\",         // Manager password\n    false,                          // Inhibit infer root DN\n    false,                          // Disable email resolution\n    null,                           // Cache configuration\n    null,                           // Environment properties\n    \"displayName\",                  // Display name LDAP attribute\n    \"mail\",                         // Email LDAP attribute\n    null,                           // Id strategy\n    \"(&(objectClass=group)(cn={0}))\" // Group search filter\n)\n\n// Set LDAP as security realm\ninstance.setSecurityRealm(ldapRealm)\n\n// Configure matrix-based authorization\ndef authStrategy = new ProjectMatrixAuthorizationStrategy()\n\n// Admin permissions\nauthStrategy.add(Jenkins.ADMINISTER, \"admin\")\nauthStrategy.add(Jenkins.ADMINISTER, \"jenkins-admins\")\n\n// Developer permissions\nauthStrategy.add(Jenkins.READ, \"authenticated\")\nauthStrategy.add(Item.BUILD, \"developers\")\nauthStrategy.add(Item.READ, \"developers\")\nauthStrategy.add(Item.WORKSPACE, \"developers\")\n\ninstance.setAuthorizationStrategy(authStrategy)\ninstance.save()\n\nprintln \"LDAP authentication configured\"\nEOF\n\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 groovy = < ldap-config.groovy\n```\n\n### Plugin Security and Management\n```bash\n# Create plugin security script\nsudo tee /usr/local/bin/jenkins-plugin-security.sh > /dev/null <<'EOF'\n#!/bin/bash\nJENKINS_CLI=\"/var/lib/jenkins/jenkins-cli.jar\"\nJENKINS_URL=\"http://localhost:8080\"\nADMIN_USER=\"admin\"\nADMIN_PASS=\"secure_admin_password_2024\"\n\n# Function to run Jenkins CLI\njenkins_cli() {\n    java -jar ${JENKINS_CLI} -s ${JENKINS_URL} -auth ${ADMIN_USER}:${ADMIN_PASS} \"$@\"\n}\n\n# Check for plugin updates\necho \"Checking for plugin security updates...\"\njenkins_cli list-plugins | grep -E \"\\)$\" > /tmp/outdated-plugins.txt\n\nif [ -s /tmp/outdated-plugins.txt ]; then\n    echo \"Outdated plugins found:\"\n    cat /tmp/outdated-plugins.txt\n    \n    # Update all plugins\n    jenkins_cli install-plugin $(awk '{print $1}' /tmp/outdated-plugins.txt | tr '\\n' ' ')\n    \n    echo \"Restarting Jenkins to apply plugin updates...\"\n    jenkins_cli safe-restart\nfi\n\n# Install essential security plugins\nSECURITY_PLUGINS=(\n    \"authorize-project\"\n    \"build-timeout\"\n    \"credentials-binding\"\n    \"matrix-auth\"\n    \"role-strategy\"\n    \"audit-trail\"\n    \"configuration-as-code\"\n    \"job-dsl\"\n    \"pipeline-stage-view\"\n    \"workflow-aggregator\"\n    \"blueocean\"\n    \"pipeline-utility-steps\"\n    \"timestamper\"\n    \"ws-cleanup\"\n    \"build-name-setter\"\n    \"description-setter\"\n)\n\nfor plugin in \"${SECURITY_PLUGINS[@]}\"; do\n    if ! jenkins_cli list-plugins | grep -q \"^$plugin \"; then\n        echo \"Installing security plugin: $plugin\"\n        jenkins_cli install-plugin \"$plugin\"\n    fi\ndone\n\necho \"Plugin security check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/jenkins-plugin-security.sh\n```\n\n## Advanced Configuration\n\n### Jenkins Configuration as Code (JCasC)\n```bash\n# Create Jenkins Configuration as Code setup\nsudo mkdir -p /var/lib/jenkins/casc_configs\n\nsudo tee /var/lib/jenkins/casc_configs/jenkins.yaml > /dev/null <<EOF\n# Jenkins Configuration as Code (JCasC)\njenkins:\n  systemMessage: \"Jenkins managed by Configuration as Code\"\n  numExecutors: 0  # Don't run builds on master\n  mode: EXCLUSIVE\n  scmCheckoutRetryCount: 3\n  \n  securityRealm:\n    ldap:\n      configurations:\n        - server: \"ldaps://ldap.example.com:636\"\n          rootDN: \"DC=example,DC=com\"\n          inhibitInferRootDN: false\n          userSearchBase: \"OU=Users\"\n          userSearch: \"(&(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))\"\n          groupSearchBase: \"OU=Groups\"\n          groupSearchFilter: \"(&(objectClass=group)(cn={0}))\"\n          managerDN: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n          managerPasswordSecret: \"ldap-password\"\n          displayNameAttributeName: \"displayName\"\n          mailAddressAttributeName: \"mail\"\n\n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: \"admin\"\n            description: \"Jenkins administrators\"\n            permissions:\n              - \"Overall/Administer\"\n            assignments:\n              - \"jenkins-admins\"\n          - name: \"developer\"\n            description: \"Developers\"\n            permissions:\n              - \"Overall/Read\"\n              - \"Job/Build\"\n              - \"Job/Cancel\"\n              - \"Job/Read\"\n              - \"Job/Workspace\"\n            assignments:\n              - \"developers\"\n              - \"authenticated\"\n\n  remotingSecurity:\n    enabled: true\n\n  nodes:\n    - permanent:\n        name: \"agent-1\"\n        remoteFS: \"/var/lib/jenkins\"\n        launcher:\n          ssh:\n            host: \"jenkins-agent-1.example.com\"\n            credentialsId: \"ssh-agent-key\"\n            sshHostKeyVerificationStrategy: \"manuallyTrustedKeyVerificationStrategy\"\n\nunclassified:\n  globalLibraries:\n    libraries:\n      - name: \"shared-pipeline-library\"\n        defaultVersion: \"main\"\n        retriever:\n          modernSCM:\n            scm:\n              git:\n                remote: \"https://github.com/example/jenkins-shared-library.git\"\n                credentialsId: \"github-token\"\n\n  location:\n    adminAddress: \"jenkins@example.com\"\n    url: \"https://jenkins.example.com/\"\n\nsecurity:\n  globalJobDslSecurityConfiguration:\n    useScriptSecurity: true\n  \n  scriptApproval:\n    approvedSignatures:\n      - \"method java.lang.String trim\"\n      - \"method java.util.Properties getProperty java.lang.String\"\n\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"github-user\"\n              username: \"jenkins-bot\"\n              password: \"{AQAAABAAAAAQhudQr8JjwNNI9pj8oI3L2gE=}\"\n              description: \"GitHub service account\"\n          - basicSSHUserPrivateKey:\n              scope: GLOBAL\n              id: \"ssh-agent-key\"\n              username: \"jenkins\"\n              description: \"SSH key for Jenkins agents\"\n              privateKeySource:\n                directEntry:\n                  privateKey: \"{AQAAABAAAAAQhudQr8JjwNNI9pj8oI3L2gE=}\"\n\ntool:\n  git:\n    installations:\n      - name: \"Default\"\n        home: \"/usr/bin/git\"\n  \n  maven:\n    installations:\n      - name: \"Maven 3.9\"\n        properties:\n          - installSource:\n              installers:\n                - maven:\n                    id: \"3.9.6\"\n\n  jdk:\n    installations:\n      - name: \"OpenJDK 17\"\n        home: \"/usr/lib/jvm/java-17-openjdk\"\n      - name: \"OpenJDK 11\"\n        home: \"/usr/lib/jvm/java-11-openjdk\"\nEOF\n\n# Set environment variable for JCasC\nsudo tee /etc/systemd/system/jenkins.service.d/override.conf > /dev/null <<EOF\n[Service]\nEnvironment=\"CASC_JENKINS_CONFIG=/var/lib/jenkins/casc_configs\"\nEnvironment=\"JAVA_OPTS=-Djava.awt.headless=true -Xmx2g -Xms1g -XX:+UseG1GC\"\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n```\n\n### Secure Agent Configuration\n```bash\n# Create Jenkins agent setup script\nsudo tee /usr/local/bin/jenkins-agent-setup.sh > /dev/null <<'EOF'\n#!/bin/bash\nAGENT_NAME=\"${1:-agent-1}\"\nAGENT_HOST=\"${2:-jenkins-agent-1.example.com}\"\n\n# Create agent working directory\nssh $AGENT_HOST \"sudo mkdir -p /var/lib/jenkins && sudo useradd -r -d /var/lib/jenkins jenkins\"\n\n# Generate SSH key for agent communication\nif [ ! -f ~/.ssh/jenkins_agent_rsa ]; then\n    ssh-keygen -t rsa -b 4096 -f ~/.ssh/jenkins_agent_rsa -N \"\" -C \"jenkins-agent-key\"\nfi\n\n# Copy public key to agent\nssh-copy-id -i ~/.ssh/jenkins_agent_rsa.pub jenkins@$AGENT_HOST\n\n# Install Java on agent\nssh $AGENT_HOST \"sudo apt update && sudo apt install -y openjdk-17-jre\"\n\n# Create agent via Jenkins CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n  create-node $AGENT_NAME <<XML\n<slave>\n  <name>$AGENT_NAME</name>\n  <description>Secure Jenkins Agent</description>\n  <remoteFS>/var/lib/jenkins</remoteFS>\n  <numExecutors>2</numExecutors>\n  <mode>NORMAL</mode>\n  <retentionStrategy class=\"hudson.slaves.RetentionStrategy\\$Always\"/>\n  <launcher class=\"hudson.plugins.sshslaves.SSHLauncher\">\n    <host>$AGENT_HOST</host>\n    <port>22</port>\n    <credentialsId>ssh-agent-key</credentialsId>\n    <launchTimeoutSeconds>60</launchTimeoutSeconds>\n    <maxNumRetries>3</maxNumRetries>\n    <retryWaitTime>15</retryWaitTime>\n    <sshHostKeyVerificationStrategy class=\"hudson.plugins.sshslaves.verifiers.ManuallyTrustedKeyVerificationStrategy\"/>\n  </launcher>\n  <label>linux docker</label>\n  <nodeProperties>\n    <hudson.slaves.EnvironmentVariablesNodeProperty>\n      <envVars serialization=\"custom\">\n        <unserializable-parents/>\n        <tree-map>\n          <default>\n            <comparator class=\"hudson.util.CaseInsensitiveComparator\"/>\n          </default>\n          <int>1</int>\n          <string>JAVA_HOME</string>\n          <string>/usr/lib/jvm/java-17-openjdk</string>\n        </tree-map>\n      </envVars>\n    </hudson.slaves.EnvironmentVariablesNodeProperty>\n  </nodeProperties>\n</slave>\nXML\n\necho \"Jenkins agent $AGENT_NAME configured for host $AGENT_HOST\"\nEOF\n\nsudo chmod +x /usr/local/bin/jenkins-agent-setup.sh\n```\n\n### Pipeline Security Best Practices\n```bash\n# Create secure pipeline templates\nsudo mkdir -p /var/lib/jenkins/pipeline-templates\n\nsudo tee /var/lib/jenkins/pipeline-templates/secure-pipeline.groovy > /dev/null <<'EOF'\n// Secure Jenkins Pipeline Template\n@Library('shared-pipeline-library') _\n\npipeline {\n    agent {\n        label 'docker && linux'\n    }\n    \n    options {\n        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '5'))\n        timeout(time: 60, unit: 'MINUTES')\n        timestamps()\n        skipDefaultCheckout(true)\n        disableConcurrentBuilds()\n        ansiColor('xterm')\n    }\n    \n    environment {\n        // Use Jenkins credentials securely\n        DOCKER_REGISTRY = credentials('docker-registry-url')\n        SONAR_TOKEN = credentials('sonarqube-token')\n        \n        // Security scanning tools\n        TRIVY_VERSION = '0.47.0'\n        CLAIR_VERSION = '4.7.1'\n    }\n    \n    stages {\n        stage('Checkout') {\n            steps {\n                checkout scm\n                script {\n                    env.GIT_COMMIT_SHORT = env.GIT_COMMIT.take(8)\n                    env.BUILD_VERSION = \"${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}\"\n                }\n            }\n        }\n        \n        stage('Security Scan - Code') {\n            parallel {\n                stage('SAST') {\n                    steps {\n                        script {\n                            try {\n                                sh '''\n                                    # Static Application Security Testing\n                                    docker run --rm -v $(pwd):/app \\\n                                        -w /app \\\n                                        securecodewarrior/semgrep:latest \\\n                                        --config=auto --json --output=sast-results.json\n                                '''\n                                \n                                publishHTML([\n                                    allowMissing: false,\n                                    alwaysLinkToLastBuild: true,\n                                    keepAll: true,\n                                    reportDir: '.',\n                                    reportFiles: 'sast-results.json',\n                                    reportName: 'SAST Report'\n                                ])\n                            } catch (Exception e) {\n                                echo \"SAST scan failed: ${e.getMessage()}\"\n                                currentBuild.result = 'UNSTABLE'\n                            }\n                        }\n                    }\n                }\n                \n                stage('Secrets Scan') {\n                    steps {\n                        script {\n                            try {\n                                sh '''\n                                    # Secret scanning with TruffleHog\n                                    docker run --rm -v $(pwd):/repo \\\n                                        trufflesecurity/trufflehog:latest \\\n                                        git file:///repo --json > secrets-scan.json\n                                    \n                                    # Fail if secrets found\n                                    if [ -s secrets-scan.json ]; then\n                                        echo \"Secrets detected in code!\"\n                                        cat secrets-scan.json\n                                        exit 1\n                                    fi\n                                '''\n                            } catch (Exception e) {\n                                error \"Secrets detected in repository!\"\n                            }\n                        }\n                    }\n                }\n                \n                stage('Dependency Check') {\n                    steps {\n                        dependencyCheck additionalArguments: '''\n                            --enableRetired\n                            --enableExperimental\n                            --scan ./\n                            --format JSON\n                            --format HTML\n                        ''', odcInstallation: 'dependency-check'\n                        \n                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'\n                    }\n                }\n            }\n        }\n        \n        stage('Build') {\n            steps {\n                script {\n                    try {\n                        sh '''\n                            # Secure Docker build\n                            docker build \\\n                                --no-cache \\\n                                --pull \\\n                                --tag ${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                --tag ${DOCKER_REGISTRY}/${JOB_NAME}:latest \\\n                                --build-arg BUILD_VERSION=${BUILD_VERSION} \\\n                                --build-arg BUILD_DATE=$(date -u +\"%Y-%m-%dT%H:%M:%SZ\") \\\n                                --build-arg VCS_REF=${GIT_COMMIT} \\\n                                .\n                        '''\n                    } catch (Exception e) {\n                        error \"Docker build failed: ${e.getMessage()}\"\n                    }\n                }\n            }\n        }\n        \n        stage('Security Scan - Container') {\n            steps {\n                script {\n                    try {\n                        sh '''\n                            # Container vulnerability scanning with Trivy\n                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                                aquasec/trivy:latest image \\\n                                --format table \\\n                                --severity HIGH,CRITICAL \\\n                                --exit-code 1 \\\n                                ${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION}\n                        '''\n                    } catch (Exception e) {\n                        echo \"Container vulnerabilities found: ${e.getMessage()}\"\n                        currentBuild.result = 'UNSTABLE'\n                    }\n                }\n            }\n        }\n        \n        stage('Test') {\n            parallel {\n                stage('Unit Tests') {\n                    steps {\n                        sh '''\n                            # Run unit tests\n                            docker run --rm \\\n                                -v $(pwd):/workspace \\\n                                -w /workspace \\\n                                ${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                npm test\n                        '''\n                        \n                        publishTestResults testResultsPattern: 'test-results.xml'\n                        publishCoverage adapters: [jacocoAdapter('coverage.xml')], sourceFileResolver: sourceFiles('STORE_LAST_BUILD')\n                    }\n                }\n                \n                stage('Integration Tests') {\n                    steps {\n                        sh '''\n                            # Run integration tests in isolated environment\n                            docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit\n                            docker-compose -f docker-compose.test.yml down -v\n                        '''\n                    }\n                }\n            }\n        }\n        \n        stage('Deploy') {\n            when {\n                anyOf {\n                    branch 'main'\n                    branch 'release/*'\n                }\n            }\n            steps {\n                script {\n                    try {\n                        sh '''\n                            # Secure deployment with credential binding\n                            echo \"Deploying ${BUILD_VERSION} to production\"\n                            \n                            # Push to registry\n                            docker push ${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION}\n                            docker push ${DOCKER_REGISTRY}/${JOB_NAME}:latest\n                            \n                            # Deploy via secure method (kubectl, ansible, etc.)\n                            kubectl set image deployment/${JOB_NAME} \\\n                                ${JOB_NAME}=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION}\n                        '''\n                    } catch (Exception e) {\n                        error \"Deployment failed: ${e.getMessage()}\"\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            // Clean workspace\n            cleanWs()\n            \n            // Archive artifacts securely\n            archiveArtifacts artifacts: 'target/*.jar,**/test-reports/**', allowEmptyArchive: true\n            \n            // Send notifications\n            emailext(\n                subject: \"Build ${currentBuild.result}: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Build ${currentBuild.result} for ${env.JOB_NAME} build number ${env.BUILD_NUMBER}\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL ?: 'jenkins@example.com'}\"\n            )\n        }\n        \n        failure {\n            // Alert on build failures\n            slackSend(\n                channel: '#ci-cd-alerts',\n                color: 'danger',\n                message: \"Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)\"\n            )\n        }\n        \n        success {\n            // Success notifications\n            slackSend(\n                channel: '#deployments',\n                color: 'good',\n                message: \"Deployment Successful: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\"\n            )\n        }\n    }\n}\nEOF\n\nsudo chown jenkins:jenkins /var/lib/jenkins/casc_configs/jenkins.yaml\n```\n\n### SSL/TLS Configuration\n```bash\n# Configure NGINX reverse proxy for Jenkins with SSL\nsudo tee /etc/nginx/sites-available/jenkins > /dev/null <<EOF\n# Jenkins NGINX Configuration with Security Headers\n\nupstream jenkins {\n    server 127.0.0.1:8080 fail_timeout=0;\n    keepalive 32;\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name jenkins.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name jenkins.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/jenkins.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n\n    # Jenkins-specific settings\n    client_max_body_size 50M;\n    \n    location / {\n        proxy_pass http://jenkins;\n        proxy_redirect default;\n        proxy_http_version 1.1;\n\n        # Required headers for Jenkins\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_max_temp_file_size 0;\n\n        # Jenkins WebSocket support\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeout settings\n        proxy_connect_timeout 90;\n        proxy_send_timeout 90;\n        proxy_read_timeout 90;\n        proxy_buffering off;\n        proxy_request_buffering off;\n    }\n}\nEOF\n\n# Install SSL certificate\nsudo certbot --nginx -d jenkins.example.com\n\nsudo ln -s /etc/nginx/sites-available/jenkins /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n## Backup and Disaster Recovery\n\n### Comprehensive Backup Strategy\n```bash\nsudo tee /usr/local/bin/jenkins-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/jenkins\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{config,jobs,plugins,secrets}\n\necho \"Starting Jenkins backup...\"\n\n# Gracefully shutdown Jenkins\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 quiet-down\n\n# Wait for running builds to complete (max 10 minutes)\nfor i in {1..60}; do\n    RUNNING_BUILDS=$(java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 list-builds | grep -c \"RUNNING\" || echo \"0\")\n    if [ \"$RUNNING_BUILDS\" -eq 0 ]; then\n        echo \"All builds completed, proceeding with backup...\"\n        break\n    fi\n    echo \"Waiting for $RUNNING_BUILDS running builds to complete...\"\n    sleep 10\ndone\n\n# Stop Jenkins service\nsystemctl stop jenkins\n\n# Backup Jenkins home directory\ntar --exclude='/var/lib/jenkins/workspace/*' \\\n    --exclude='/var/lib/jenkins/builds/*/archive' \\\n    --exclude='/var/lib/jenkins/.m2/repository' \\\n    --exclude='/var/lib/jenkins/logs/*' \\\n    -czf ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz \\\n    -C /var/lib/jenkins .\n\n# Backup individual job configurations\nmkdir -p ${BACKUP_DIR}/jobs\nfor job in /var/lib/jenkins/jobs/*/config.xml; do\n    if [ -f \"$job\" ]; then\n        job_name=$(basename $(dirname \"$job\"))\n        cp \"$job\" ${BACKUP_DIR}/jobs/${job_name}-config-${DATE}.xml\n    fi\ndone\n\n# Backup plugin list\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n    list-plugins > ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt\n\n# Backup secrets and credentials\nif [ -d \"/var/lib/jenkins/secrets\" ]; then\n    tar -czf ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz \\\n        -C /var/lib/jenkins secrets/\nfi\n\n# Start Jenkins\nsystemctl start jenkins\n\n# Wait for Jenkins to be ready\necho \"Waiting for Jenkins to start...\"\nfor i in {1..30}; do\n    if curl -f http://localhost:8080/login >/dev/null 2>&1; then\n        echo \"Jenkins is ready\"\n        break\n    fi\n    sleep 10\ndone\n\n# Cancel quiet mode\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 cancel-quiet-down\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://jenkins-backups/ --recursive --sse AES256\naz storage blob upload-batch --source ${BACKUP_DIR} --destination jenkins-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://jenkins-backups/\n\n# Test backup integrity\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz | head -1)\nif tar -tzf \"$LATEST_BACKUP\" >/dev/null 2>&1; then\n    echo \"✓ Backup integrity verified\"\nelse\n    echo \"✗ Backup integrity check failed\"\nfi\n\n# Keep only last 14 days of backups\nfind ${BACKUP_DIR} -name \"jenkins-*\" -type f -mtime +14 -delete\n\necho \"Jenkins backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/jenkins-backup.sh\n\n# Schedule daily backups\necho \"0 1 * * * root /usr/local/bin/jenkins-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Jenkins Disaster Recovery\n```bash\nsudo tee /usr/local/bin/jenkins-restore.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_FILE=\"${1}\"\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup_file>\"\n    echo \"Available backups:\"\n    ls -la /backup/jenkins/config/jenkins-home-*.tar.gz\n    exit 1\nfi\n\necho \"Restoring Jenkins from backup: $BACKUP_FILE\"\n\n# Stop Jenkins\nsystemctl stop jenkins\n\n# Backup current installation\nmv /var/lib/jenkins /var/lib/jenkins.backup.$(date +%s)\n\n# Create new Jenkins directory\nmkdir -p /var/lib/jenkins\nchown jenkins:jenkins /var/lib/jenkins\n\n# Restore from backup\ntar -xzf \"$BACKUP_FILE\" -C /var/lib/jenkins\n\n# Set proper ownership\nchown -R jenkins:jenkins /var/lib/jenkins\n\n# Start Jenkins\nsystemctl start jenkins\n\n# Wait for Jenkins to start\necho \"Waiting for Jenkins to start...\"\nfor i in {1..60}; do\n    if curl -f http://localhost:8080/login >/dev/null 2>&1; then\n        echo \"Jenkins restored successfully\"\n        break\n    fi\n    sleep 10\ndone\n\necho \"Jenkins restore completed\"\necho \"Please verify configuration and rebuild any workspace dependencies\"\nEOF\n\nsudo chmod +x /usr/local/bin/jenkins-restore.sh\n```\n\n## Monitoring and Health Checks\n\n### Comprehensive Monitoring\n```bash\nsudo tee /usr/local/bin/jenkins-health-check.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/jenkins-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active jenkins >/dev/null 2>&1; then\n    log_message \"✓ Jenkins service is running\"\nelse\n    log_message \"✗ Jenkins service is not running\"\n    exit 1\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080/login)\nif [ \"${HTTP_STATUS}\" = \"200\" ]; then\n    log_message \"✓ Jenkins web interface is responding\"\nelse\n    log_message \"✗ Jenkins web interface issues (HTTP ${HTTP_STATUS})\"\nfi\n\n# Check agent connectivity\nAGENT_COUNT=$(java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n    list-computers | grep -c \"^agent\" || echo \"0\")\nONLINE_AGENTS=$(java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n    list-computers | grep -c \"online\" || echo \"0\")\n\nlog_message \"ℹ Jenkins agents: ${ONLINE_AGENTS}/${AGENT_COUNT} online\"\n\n# Check disk space\nDISK_USAGE=$(df /var/lib/jenkins | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message \"⚠ High disk usage: ${DISK_USAGE}%\"\nelse\n    log_message \"✓ Disk usage: ${DISK_USAGE}%\"\nfi\n\n# Check for failed builds\nFAILED_JOBS=$(java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n    list-jobs | xargs -I {} java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n    get-job {} | grep -c \"FAILURE\" || echo \"0\")\n\nif [ ${FAILED_JOBS} -gt 0 ]; then\n    log_message \"⚠ ${FAILED_JOBS} jobs with recent failures\"\nfi\n\n# Check Java memory usage\nJAVA_MEMORY=$(ps -o pid,vsz,rss,comm -C java | grep jenkins | awk '{print $3/1024}' | head -1)\nlog_message \"ℹ Jenkins memory usage: ${JAVA_MEMORY}MB\"\n\nlog_message \"Jenkins health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/jenkins-health-check.sh\n\n# Schedule health checks every 15 minutes\necho \"*/15 * * * * root /usr/local/bin/jenkins-health-check.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check Jenkins service status\nsudo systemctl status jenkins\nsudo journalctl -u jenkins -f\n\n# Check Jenkins logs\nsudo tail -f /var/log/jenkins/jenkins.log\n\n# Check Java process\nps aux | grep jenkins\njps -v  # Show Java processes\n\n# Memory issues\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JAVA_OPTS=-Djava.awt.headless=true -Xmx4g -Xms2g\"\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n\n# Plugin issues\n# Access Jenkins web interface\n# Go to Manage Jenkins > Manage Plugins > Advanced\n# Check for plugin conflicts or updates\n\n# Agent connectivity issues\n# Check SSH connectivity\nssh jenkins@agent-host\n\n# Check agent logs\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password \\\n    connect-node agent-name\n\n# Build failures\n# Check workspace permissions\nsudo chown -R jenkins:jenkins /var/lib/jenkins/workspace\n\n# Clear old builds\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password \\\n    delete-builds job-name 1-10\n\n# Performance issues\n# Check system resources\ntop -p $(pgrep java)\nhtop -p $(pgrep java)\n\n# Database cleanup (if using H2)\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password \\\n    groovy = <<GROOVY\nimport jenkins.model.Jenkins\nJenkins.instance.cleanUp()\nGROOVY\n\n# Reset Jenkins configuration (emergency)\nsudo systemctl stop jenkins\nsudo rm /var/lib/jenkins/config.xml\nsudo systemctl start jenkins\n# Reconfigure via setup wizard\n```\n\n## Additional Resources\n\n- [Jenkins Documentation](https://www.jenkins.io/doc/)\n- [Jenkins Security Guide](https://www.jenkins.io/doc/book/security/)\n- [Pipeline Best Practices](https://www.jenkins.io/doc/book/pipeline/pipeline-best-practices/)\n- [Jenkins Configuration as Code](https://jenkins.io/projects/jcasc/)\n- [Jenkins Community](https://www.jenkins.io/community/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"jenkins-installation-guide\" class=\"mobile-header\">Jenkins Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source automation server for building, testing, and deploying applications. Industry-leading CI/CD platform with extensive plugin ecosystem and enterprise-grade security features.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">Java 11 or 17 (LTS versions recommended)</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for production</li>\n<li class=\"mobile-list-item\">50GB+ disk space for builds and artifacts</li>\n<li class=\"mobile-list-item\">Network connectivity for external integrations</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Java 17 (LTS)\nsudo apt install -y openjdk-17-jdk openjdk-17-jre\n\n# Add Jenkins repository and key\nwget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo apt-key add -\necho &quot;deb https://pkg.jenkins.io/debian-stable binary/&quot; | sudo tee /etc/apt/sources.list.d/jenkins.list\n\n# Update package list\nsudo apt update\n\n# Install Jenkins\nsudo apt install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo ufw allow 8080/tcp comment &#039;Jenkins HTTP&#039;\nsudo ufw allow OpenSSH\n\n# Verify installation\nsudo systemctl status jenkins\njava -version\njenkins --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java 17\nsudo yum install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key\n\n# Install Jenkins\nsudo yum install -y jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp  # Agent communication\nsudo firewall-cmd --reload\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Verify installation\nsudo systemctl status jenkins</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java 17\nsudo dnf install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\nsudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo\nsudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key\n\n# Install Jenkins\nsudo dnf install -y jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# Enable and start service\nsudo systemctl enable --now jenkins</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java\nsudo pacman -Syu jdk17-openjdk\n\n# Install Jenkins from AUR\nyay -S jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Verify installation\nsudo systemctl status jenkins</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation-recommended-for-development\" class=\"mobile-header\">Docker Installation (Recommended for Development)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Jenkins directories\nmkdir -p ~/jenkins/{jenkins_home,docker_certs,docker_sock}\n\n# Run Jenkins container with Docker support\ndocker run -d \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  -v ~/jenkins/jenkins_home:/var/jenkins_home \\\n  -v ~/jenkins/docker_certs:/certs/client:ro \\\n  -v ~/jenkins/docker_sock:/var/run/docker.sock \\\n  --group-add $(getent group docker | cut -d: -f3) \\\n  --security-opt no-new-privileges:true \\\n  jenkins/jenkins:lts-jdk17\n\n# Get initial admin password\ndocker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening-2024-best-practices\" class=\"mobile-header\">Security Hardening (2024 Best Practices)</h2>\n<h3 id=\"initial-security-setup\" class=\"mobile-header\">Initial Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n\n# Complete setup via web interface: http://your-server:8080\n# 1. Enter admin password\n# 2. Install suggested plugins\n# 3. Create first admin user\n# 4. Configure Jenkins URL\n\n# Advanced security configuration via Jenkins CLI\n# Download Jenkins CLI\nwget http://localhost:8080/jnlpJars/jenkins-cli.jar\n\n# Create CLI configuration script\ncat &gt; jenkins-security-config.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nJENKINS_URL=&quot;http://localhost:8080&quot;\nADMIN_USER=&quot;admin&quot;\nADMIN_PASS=&quot;secure_admin_password_2024&quot;\n\n# Function to run Jenkins CLI commands\nrun_jenkins_cli() {\n    java -jar jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_USER}:${ADMIN_PASS} &quot;$@&quot;\n}\n\n# Install essential security plugins\nrun_jenkins_cli install-plugin \\\n    authorize-project \\\n    build-timeout \\\n    credentials-binding \\\n    workflow-aggregator \\\n    matrix-auth \\\n    pam-auth \\\n    ldap \\\n    role-strategy \\\n    audit-trail \\\n    job-dsl \\\n    pipeline-stage-view \\\n    blueocean\n\n# Configure global security\nrun_jenkins_cli groovy = &lt;&lt;GROOVY\nimport jenkins.model.*\nimport hudson.security.*\nimport hudson.security.csrf.DefaultCrumbIssuer\n\ndef instance = Jenkins.getInstance()\n\n// Enable CSRF protection\ninstance.setCrumbIssuer(new DefaultCrumbIssuer(true))\n\n// Configure security realm (local users)\ndef hudsonRealm = new HudsonPrivateSecurityRealm(false)\ninstance.setSecurityRealm(hudsonRealm)\n\n// Create admin user\ndef adminUser = hudsonRealm.createAccount(&quot;admin&quot;, &quot;secure_admin_password_2024&quot;)\n\n// Configure authorization strategy\ndef strategy = new FullControlOnceLoggedInAuthorizationStrategy()\nstrategy.setDenyAnonymousReadAccess(true)\ninstance.setAuthorizationStrategy(strategy)\n\n// Disable CLI over remoting\ninstance.getDescriptor(&quot;jenkins.CLI&quot;).get().setEnabled(false)\n\n// Disable agent-to-master access control for security\ninstance.getExtensionList(jenkins.security.s2m.AdminWhitelistRule.class)\n    .get(jenkins.security.s2m.AdminWhitelistRule.class)\n    .setMasterKillSwitch(false)\n\n// Enable slave-to-master access control\ninstance.injector.getInstance(AdminWhitelistRule.class).setMasterKillSwitch(false)\n\n// Save configuration\ninstance.save()\n\nprintln &quot;Security configuration applied&quot;\nGROOVY\n\necho &quot;Jenkins security configuration completed&quot;\nEOF\n\nchmod +x jenkins-security-config.sh\n./jenkins-security-config.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-authentication-setup\" class=\"mobile-header\">Advanced Authentication Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure LDAP authentication\ncat &gt; ldap-config.groovy &lt;&lt;&#039;EOF&#039;\nimport jenkins.model.*\nimport hudson.security.*\nimport hudson.security.LDAPSecurityRealm\n\ndef instance = Jenkins.getInstance()\n\n// LDAP configuration\ndef ldapRealm = new LDAPSecurityRealm(\n    &quot;ldaps://ldap.example.com:636&quot;,  // LDAP server\n    &quot;DC=example,DC=com&quot;,             // Root DN\n    &quot;(&amp;(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))&quot;, // User search filter\n    &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;, // Manager DN\n    &quot;ldap_service_password&quot;,         // Manager password\n    false,                          // Inhibit infer root DN\n    false,                          // Disable email resolution\n    null,                           // Cache configuration\n    null,                           // Environment properties\n    &quot;displayName&quot;,                  // Display name LDAP attribute\n    &quot;mail&quot;,                         // Email LDAP attribute\n    null,                           // Id strategy\n    &quot;(&amp;(objectClass=group)(cn={0}))&quot; // Group search filter\n)\n\n// Set LDAP as security realm\ninstance.setSecurityRealm(ldapRealm)\n\n// Configure matrix-based authorization\ndef authStrategy = new ProjectMatrixAuthorizationStrategy()\n\n// Admin permissions\nauthStrategy.add(Jenkins.ADMINISTER, &quot;admin&quot;)\nauthStrategy.add(Jenkins.ADMINISTER, &quot;jenkins-admins&quot;)\n\n// Developer permissions\nauthStrategy.add(Jenkins.READ, &quot;authenticated&quot;)\nauthStrategy.add(Item.BUILD, &quot;developers&quot;)\nauthStrategy.add(Item.READ, &quot;developers&quot;)\nauthStrategy.add(Item.WORKSPACE, &quot;developers&quot;)\n\ninstance.setAuthorizationStrategy(authStrategy)\ninstance.save()\n\nprintln &quot;LDAP authentication configured&quot;\nEOF\n\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 groovy = &lt; ldap-config.groovy</code></pre>\n      </div>\n    </div>\n<h3 id=\"plugin-security-and-management\" class=\"mobile-header\">Plugin Security and Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create plugin security script\nsudo tee /usr/local/bin/jenkins-plugin-security.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nJENKINS_CLI=&quot;/var/lib/jenkins/jenkins-cli.jar&quot;\nJENKINS_URL=&quot;http://localhost:8080&quot;\nADMIN_USER=&quot;admin&quot;\nADMIN_PASS=&quot;secure_admin_password_2024&quot;\n\n# Function to run Jenkins CLI\njenkins_cli() {\n    java -jar ${JENKINS_CLI} -s ${JENKINS_URL} -auth ${ADMIN_USER}:${ADMIN_PASS} &quot;$@&quot;\n}\n\n# Check for plugin updates\necho &quot;Checking for plugin security updates...&quot;\njenkins_cli list-plugins | grep -E &quot;\\)$&quot; &gt; /tmp/outdated-plugins.txt\n\nif [ -s /tmp/outdated-plugins.txt ]; then\n    echo &quot;Outdated plugins found:&quot;\n    cat /tmp/outdated-plugins.txt\n    \n    # Update all plugins\n    jenkins_cli install-plugin $(awk &#039;{print $1}&#039; /tmp/outdated-plugins.txt | tr &#039;\\n&#039; &#039; &#039;)\n    \n    echo &quot;Restarting Jenkins to apply plugin updates...&quot;\n    jenkins_cli safe-restart\nfi\n\n# Install essential security plugins\nSECURITY_PLUGINS=(\n    &quot;authorize-project&quot;\n    &quot;build-timeout&quot;\n    &quot;credentials-binding&quot;\n    &quot;matrix-auth&quot;\n    &quot;role-strategy&quot;\n    &quot;audit-trail&quot;\n    &quot;configuration-as-code&quot;\n    &quot;job-dsl&quot;\n    &quot;pipeline-stage-view&quot;\n    &quot;workflow-aggregator&quot;\n    &quot;blueocean&quot;\n    &quot;pipeline-utility-steps&quot;\n    &quot;timestamper&quot;\n    &quot;ws-cleanup&quot;\n    &quot;build-name-setter&quot;\n    &quot;description-setter&quot;\n)\n\nfor plugin in &quot;${SECURITY_PLUGINS[@]}&quot;; do\n    if ! jenkins_cli list-plugins | grep -q &quot;^$plugin &quot;; then\n        echo &quot;Installing security plugin: $plugin&quot;\n        jenkins_cli install-plugin &quot;$plugin&quot;\n    fi\ndone\n\necho &quot;Plugin security check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/jenkins-plugin-security.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"jenkins-configuration-as-code-jcasc\" class=\"mobile-header\">Jenkins Configuration as Code (JCasC)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Jenkins Configuration as Code setup\nsudo mkdir -p /var/lib/jenkins/casc_configs\n\nsudo tee /var/lib/jenkins/casc_configs/jenkins.yaml &gt; /dev/null &lt;&lt;EOF\n# Jenkins Configuration as Code (JCasC)\njenkins:\n  systemMessage: &quot;Jenkins managed by Configuration as Code&quot;\n  numExecutors: 0  # Don&#039;t run builds on master\n  mode: EXCLUSIVE\n  scmCheckoutRetryCount: 3\n  \n  securityRealm:\n    ldap:\n      configurations:\n        - server: &quot;ldaps://ldap.example.com:636&quot;\n          rootDN: &quot;DC=example,DC=com&quot;\n          inhibitInferRootDN: false\n          userSearchBase: &quot;OU=Users&quot;\n          userSearch: &quot;(&amp;(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))&quot;\n          groupSearchBase: &quot;OU=Groups&quot;\n          groupSearchFilter: &quot;(&amp;(objectClass=group)(cn={0}))&quot;\n          managerDN: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n          managerPasswordSecret: &quot;ldap-password&quot;\n          displayNameAttributeName: &quot;displayName&quot;\n          mailAddressAttributeName: &quot;mail&quot;\n\n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: &quot;admin&quot;\n            description: &quot;Jenkins administrators&quot;\n            permissions:\n              - &quot;Overall/Administer&quot;\n            assignments:\n              - &quot;jenkins-admins&quot;\n          - name: &quot;developer&quot;\n            description: &quot;Developers&quot;\n            permissions:\n              - &quot;Overall/Read&quot;\n              - &quot;Job/Build&quot;\n              - &quot;Job/Cancel&quot;\n              - &quot;Job/Read&quot;\n              - &quot;Job/Workspace&quot;\n            assignments:\n              - &quot;developers&quot;\n              - &quot;authenticated&quot;\n\n  remotingSecurity:\n    enabled: true\n\n  nodes:\n    - permanent:\n        name: &quot;agent-1&quot;\n        remoteFS: &quot;/var/lib/jenkins&quot;\n        launcher:\n          ssh:\n            host: &quot;jenkins-agent-1.example.com&quot;\n            credentialsId: &quot;ssh-agent-key&quot;\n            sshHostKeyVerificationStrategy: &quot;manuallyTrustedKeyVerificationStrategy&quot;\n\nunclassified:\n  globalLibraries:\n    libraries:\n      - name: &quot;shared-pipeline-library&quot;\n        defaultVersion: &quot;main&quot;\n        retriever:\n          modernSCM:\n            scm:\n              git:\n                remote: &quot;https://github.com/example/jenkins-shared-library.git&quot;\n                credentialsId: &quot;github-token&quot;\n\n  location:\n    adminAddress: &quot;jenkins@example.com&quot;\n    url: &quot;https://jenkins.example.com/&quot;\n\nsecurity:\n  globalJobDslSecurityConfiguration:\n    useScriptSecurity: true\n  \n  scriptApproval:\n    approvedSignatures:\n      - &quot;method java.lang.String trim&quot;\n      - &quot;method java.util.Properties getProperty java.lang.String&quot;\n\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: &quot;github-user&quot;\n              username: &quot;jenkins-bot&quot;\n              password: &quot;{AQAAABAAAAAQhudQr8JjwNNI9pj8oI3L2gE=}&quot;\n              description: &quot;GitHub service account&quot;\n          - basicSSHUserPrivateKey:\n              scope: GLOBAL\n              id: &quot;ssh-agent-key&quot;\n              username: &quot;jenkins&quot;\n              description: &quot;SSH key for Jenkins agents&quot;\n              privateKeySource:\n                directEntry:\n                  privateKey: &quot;{AQAAABAAAAAQhudQr8JjwNNI9pj8oI3L2gE=}&quot;\n\ntool:\n  git:\n    installations:\n      - name: &quot;Default&quot;\n        home: &quot;/usr/bin/git&quot;\n  \n  maven:\n    installations:\n      - name: &quot;Maven 3.9&quot;\n        properties:\n          - installSource:\n              installers:\n                - maven:\n                    id: &quot;3.9.6&quot;\n\n  jdk:\n    installations:\n      - name: &quot;OpenJDK 17&quot;\n        home: &quot;/usr/lib/jvm/java-17-openjdk&quot;\n      - name: &quot;OpenJDK 11&quot;\n        home: &quot;/usr/lib/jvm/java-11-openjdk&quot;\nEOF\n\n# Set environment variable for JCasC\nsudo tee /etc/systemd/system/jenkins.service.d/override.conf &gt; /dev/null &lt;&lt;EOF\n[Service]\nEnvironment=&quot;CASC_JENKINS_CONFIG=/var/lib/jenkins/casc_configs&quot;\nEnvironment=&quot;JAVA_OPTS=-Djava.awt.headless=true -Xmx2g -Xms1g -XX:+UseG1GC&quot;\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins</code></pre>\n      </div>\n    </div>\n<h3 id=\"secure-agent-configuration\" class=\"mobile-header\">Secure Agent Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Jenkins agent setup script\nsudo tee /usr/local/bin/jenkins-agent-setup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nAGENT_NAME=&quot;${1:-agent-1}&quot;\nAGENT_HOST=&quot;${2:-jenkins-agent-1.example.com}&quot;\n\n# Create agent working directory\nssh $AGENT_HOST &quot;sudo mkdir -p /var/lib/jenkins &amp;&amp; sudo useradd -r -d /var/lib/jenkins jenkins&quot;\n\n# Generate SSH key for agent communication\nif [ ! -f ~/.ssh/jenkins_agent_rsa ]; then\n    ssh-keygen -t rsa -b 4096 -f ~/.ssh/jenkins_agent_rsa -N &quot;&quot; -C &quot;jenkins-agent-key&quot;\nfi\n\n# Copy public key to agent\nssh-copy-id -i ~/.ssh/jenkins_agent_rsa.pub jenkins@$AGENT_HOST\n\n# Install Java on agent\nssh $AGENT_HOST &quot;sudo apt update &amp;&amp; sudo apt install -y openjdk-17-jre&quot;\n\n# Create agent via Jenkins CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n  create-node $AGENT_NAME &lt;&lt;XML\n&lt;slave&gt;\n  &lt;name&gt;$AGENT_NAME&lt;/name&gt;\n  &lt;description&gt;Secure Jenkins Agent&lt;/description&gt;\n  &lt;remoteFS&gt;/var/lib/jenkins&lt;/remoteFS&gt;\n  &lt;numExecutors&gt;2&lt;/numExecutors&gt;\n  &lt;mode&gt;NORMAL&lt;/mode&gt;\n  &lt;retentionStrategy class=&quot;hudson.slaves.RetentionStrategy\\$Always&quot;/&gt;\n  &lt;launcher class=&quot;hudson.plugins.sshslaves.SSHLauncher&quot;&gt;\n    &lt;host&gt;$AGENT_HOST&lt;/host&gt;\n    &lt;port&gt;22&lt;/port&gt;\n    &lt;credentialsId&gt;ssh-agent-key&lt;/credentialsId&gt;\n    &lt;launchTimeoutSeconds&gt;60&lt;/launchTimeoutSeconds&gt;\n    &lt;maxNumRetries&gt;3&lt;/maxNumRetries&gt;\n    &lt;retryWaitTime&gt;15&lt;/retryWaitTime&gt;\n    &lt;sshHostKeyVerificationStrategy class=&quot;hudson.plugins.sshslaves.verifiers.ManuallyTrustedKeyVerificationStrategy&quot;/&gt;\n  &lt;/launcher&gt;\n  &lt;label&gt;linux docker&lt;/label&gt;\n  &lt;nodeProperties&gt;\n    &lt;hudson.slaves.EnvironmentVariablesNodeProperty&gt;\n      &lt;envVars serialization=&quot;custom&quot;&gt;\n        &lt;unserializable-parents/&gt;\n        &lt;tree-map&gt;\n          &lt;default&gt;\n            &lt;comparator class=&quot;hudson.util.CaseInsensitiveComparator&quot;/&gt;\n          &lt;/default&gt;\n          &lt;int&gt;1&lt;/int&gt;\n          &lt;string&gt;JAVA_HOME&lt;/string&gt;\n          &lt;string&gt;/usr/lib/jvm/java-17-openjdk&lt;/string&gt;\n        &lt;/tree-map&gt;\n      &lt;/envVars&gt;\n    &lt;/hudson.slaves.EnvironmentVariablesNodeProperty&gt;\n  &lt;/nodeProperties&gt;\n&lt;/slave&gt;\nXML\n\necho &quot;Jenkins agent $AGENT_NAME configured for host $AGENT_HOST&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/jenkins-agent-setup.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"pipeline-security-best-practices\" class=\"mobile-header\">Pipeline Security Best Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure pipeline templates\nsudo mkdir -p /var/lib/jenkins/pipeline-templates\n\nsudo tee /var/lib/jenkins/pipeline-templates/secure-pipeline.groovy &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n// Secure Jenkins Pipeline Template\n@Library(&#039;shared-pipeline-library&#039;) _\n\npipeline {\n    agent {\n        label &#039;docker &amp;&amp; linux&#039;\n    }\n    \n    options {\n        buildDiscarder(logRotator(numToKeepStr: &#039;10&#039;, artifactNumToKeepStr: &#039;5&#039;))\n        timeout(time: 60, unit: &#039;MINUTES&#039;)\n        timestamps()\n        skipDefaultCheckout(true)\n        disableConcurrentBuilds()\n        ansiColor(&#039;xterm&#039;)\n    }\n    \n    environment {\n        // Use Jenkins credentials securely\n        DOCKER_REGISTRY = credentials(&#039;docker-registry-url&#039;)\n        SONAR_TOKEN = credentials(&#039;sonarqube-token&#039;)\n        \n        // Security scanning tools\n        TRIVY_VERSION = &#039;0.47.0&#039;\n        CLAIR_VERSION = &#039;4.7.1&#039;\n    }\n    \n    stages {\n        stage(&#039;Checkout&#039;) {\n            steps {\n                checkout scm\n                script {\n                    env.GIT_COMMIT_SHORT = env.GIT_COMMIT.take(8)\n                    env.BUILD_VERSION = &quot;${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}&quot;\n                }\n            }\n        }\n        \n        stage(&#039;Security Scan - Code&#039;) {\n            parallel {\n                stage(&#039;SAST&#039;) {\n                    steps {\n                        script {\n                            try {\n                                sh &#039;&#039;&#039;\n                                    # Static Application Security Testing\n                                    docker run --rm -v $(pwd):/app \\\n                                        -w /app \\\n                                        securecodewarrior/semgrep:latest \\\n                                        --config=auto --json --output=sast-results.json\n                                &#039;&#039;&#039;\n                                \n                                publishHTML([\n                                    allowMissing: false,\n                                    alwaysLinkToLastBuild: true,\n                                    keepAll: true,\n                                    reportDir: &#039;.&#039;,\n                                    reportFiles: &#039;sast-results.json&#039;,\n                                    reportName: &#039;SAST Report&#039;\n                                ])\n                            } catch (Exception e) {\n                                echo &quot;SAST scan failed: ${e.getMessage()}&quot;\n                                currentBuild.result = &#039;UNSTABLE&#039;\n                            }\n                        }\n                    }\n                }\n                \n                stage(&#039;Secrets Scan&#039;) {\n                    steps {\n                        script {\n                            try {\n                                sh &#039;&#039;&#039;\n                                    # Secret scanning with TruffleHog\n                                    docker run --rm -v $(pwd):/repo \\\n                                        trufflesecurity/trufflehog:latest \\\n                                        git file:///repo --json &gt; secrets-scan.json\n                                    \n                                    # Fail if secrets found\n                                    if [ -s secrets-scan.json ]; then\n                                        echo &quot;Secrets detected in code!&quot;\n                                        cat secrets-scan.json\n                                        exit 1\n                                    fi\n                                &#039;&#039;&#039;\n                            } catch (Exception e) {\n                                error &quot;Secrets detected in repository!&quot;\n                            }\n                        }\n                    }\n                }\n                \n                stage(&#039;Dependency Check&#039;) {\n                    steps {\n                        dependencyCheck additionalArguments: &#039;&#039;&#039;\n                            --enableRetired\n                            --enableExperimental\n                            --scan ./\n                            --format JSON\n                            --format HTML\n                        &#039;&#039;&#039;, odcInstallation: &#039;dependency-check&#039;\n                        \n                        dependencyCheckPublisher pattern: &#039;**/dependency-check-report.xml&#039;\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Build&#039;) {\n            steps {\n                script {\n                    try {\n                        sh &#039;&#039;&#039;\n                            # Secure Docker build\n                            docker build \\\n                                --no-cache \\\n                                --pull \\\n                                --tag ${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                --tag ${DOCKER_REGISTRY}/${JOB_NAME}:latest \\\n                                --build-arg BUILD_VERSION=${BUILD_VERSION} \\\n                                --build-arg BUILD_DATE=$(date -u +&quot;%Y-%m-%dT%H:%M:%SZ&quot;) \\\n                                --build-arg VCS_REF=${GIT_COMMIT} \\\n                                .\n                        &#039;&#039;&#039;\n                    } catch (Exception e) {\n                        error &quot;Docker build failed: ${e.getMessage()}&quot;\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Security Scan - Container&#039;) {\n            steps {\n                script {\n                    try {\n                        sh &#039;&#039;&#039;\n                            # Container vulnerability scanning with Trivy\n                            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                                aquasec/trivy:latest image \\\n                                --format table \\\n                                --severity HIGH,CRITICAL \\\n                                --exit-code 1 \\\n                                ${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION}\n                        &#039;&#039;&#039;\n                    } catch (Exception e) {\n                        echo &quot;Container vulnerabilities found: ${e.getMessage()}&quot;\n                        currentBuild.result = &#039;UNSTABLE&#039;\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Test&#039;) {\n            parallel {\n                stage(&#039;Unit Tests&#039;) {\n                    steps {\n                        sh &#039;&#039;&#039;\n                            # Run unit tests\n                            docker run --rm \\\n                                -v $(pwd):/workspace \\\n                                -w /workspace \\\n                                ${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                npm test\n                        &#039;&#039;&#039;\n                        \n                        publishTestResults testResultsPattern: &#039;test-results.xml&#039;\n                        publishCoverage adapters: [jacocoAdapter(&#039;coverage.xml&#039;)], sourceFileResolver: sourceFiles(&#039;STORE_LAST_BUILD&#039;)\n                    }\n                }\n                \n                stage(&#039;Integration Tests&#039;) {\n                    steps {\n                        sh &#039;&#039;&#039;\n                            # Run integration tests in isolated environment\n                            docker-compose -f docker-compose.test.yml up --build --abort-on-container-exit\n                            docker-compose -f docker-compose.test.yml down -v\n                        &#039;&#039;&#039;\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Deploy&#039;) {\n            when {\n                anyOf {\n                    branch &#039;main&#039;\n                    branch &#039;release/*&#039;\n                }\n            }\n            steps {\n                script {\n                    try {\n                        sh &#039;&#039;&#039;\n                            # Secure deployment with credential binding\n                            echo &quot;Deploying ${BUILD_VERSION} to production&quot;\n                            \n                            # Push to registry\n                            docker push ${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION}\n                            docker push ${DOCKER_REGISTRY}/${JOB_NAME}:latest\n                            \n                            # Deploy via secure method (kubectl, ansible, etc.)\n                            kubectl set image deployment/${JOB_NAME} \\\n                                ${JOB_NAME}=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION}\n                        &#039;&#039;&#039;\n                    } catch (Exception e) {\n                        error &quot;Deployment failed: ${e.getMessage()}&quot;\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            // Clean workspace\n            cleanWs()\n            \n            // Archive artifacts securely\n            archiveArtifacts artifacts: &#039;target/*.jar,**/test-reports/**&#039;, allowEmptyArchive: true\n            \n            // Send notifications\n            emailext(\n                subject: &quot;Build ${currentBuild.result}: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Build ${currentBuild.result} for ${env.JOB_NAME} build number ${env.BUILD_NUMBER}&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL ?: &#039;jenkins@example.com&#039;}&quot;\n            )\n        }\n        \n        failure {\n            // Alert on build failures\n            slackSend(\n                channel: &#039;#ci-cd-alerts&#039;,\n                color: &#039;danger&#039;,\n                message: &quot;Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (&lt;${env.BUILD_URL}|Open&gt;)&quot;\n            )\n        }\n        \n        success {\n            // Success notifications\n            slackSend(\n                channel: &#039;#deployments&#039;,\n                color: &#039;good&#039;,\n                message: &quot;Deployment Successful: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;\n            )\n        }\n    }\n}\nEOF\n\nsudo chown jenkins:jenkins /var/lib/jenkins/casc_configs/jenkins.yaml</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure NGINX reverse proxy for Jenkins with SSL\nsudo tee /etc/nginx/sites-available/jenkins &gt; /dev/null &lt;&lt;EOF\n# Jenkins NGINX Configuration with Security Headers\n\nupstream jenkins {\n    server 127.0.0.1:8080 fail_timeout=0;\n    keepalive 32;\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name jenkins.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name jenkins.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/jenkins.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n\n    # Jenkins-specific settings\n    client_max_body_size 50M;\n    \n    location / {\n        proxy_pass http://jenkins;\n        proxy_redirect default;\n        proxy_http_version 1.1;\n\n        # Required headers for Jenkins\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_max_temp_file_size 0;\n\n        # Jenkins WebSocket support\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeout settings\n        proxy_connect_timeout 90;\n        proxy_send_timeout 90;\n        proxy_read_timeout 90;\n        proxy_buffering off;\n        proxy_request_buffering off;\n    }\n}\nEOF\n\n# Install SSL certificate\nsudo certbot --nginx -d jenkins.example.com\n\nsudo ln -s /etc/nginx/sites-available/jenkins /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"comprehensive-backup-strategy\" class=\"mobile-header\">Comprehensive Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/jenkins-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/jenkins&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{config,jobs,plugins,secrets}\n\necho &quot;Starting Jenkins backup...&quot;\n\n# Gracefully shutdown Jenkins\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 quiet-down\n\n# Wait for running builds to complete (max 10 minutes)\nfor i in {1..60}; do\n    RUNNING_BUILDS=$(java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 list-builds | grep -c &quot;RUNNING&quot; || echo &quot;0&quot;)\n    if [ &quot;$RUNNING_BUILDS&quot; -eq 0 ]; then\n        echo &quot;All builds completed, proceeding with backup...&quot;\n        break\n    fi\n    echo &quot;Waiting for $RUNNING_BUILDS running builds to complete...&quot;\n    sleep 10\ndone\n\n# Stop Jenkins service\nsystemctl stop jenkins\n\n# Backup Jenkins home directory\ntar --exclude=&#039;/var/lib/jenkins/workspace/*&#039; \\\n    --exclude=&#039;/var/lib/jenkins/builds/*/archive&#039; \\\n    --exclude=&#039;/var/lib/jenkins/.m2/repository&#039; \\\n    --exclude=&#039;/var/lib/jenkins/logs/*&#039; \\\n    -czf ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz \\\n    -C /var/lib/jenkins .\n\n# Backup individual job configurations\nmkdir -p ${BACKUP_DIR}/jobs\nfor job in /var/lib/jenkins/jobs/*/config.xml; do\n    if [ -f &quot;$job&quot; ]; then\n        job_name=$(basename $(dirname &quot;$job&quot;))\n        cp &quot;$job&quot; ${BACKUP_DIR}/jobs/${job_name}-config-${DATE}.xml\n    fi\ndone\n\n# Backup plugin list\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n    list-plugins &gt; ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt\n\n# Backup secrets and credentials\nif [ -d &quot;/var/lib/jenkins/secrets&quot; ]; then\n    tar -czf ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz \\\n        -C /var/lib/jenkins secrets/\nfi\n\n# Start Jenkins\nsystemctl start jenkins\n\n# Wait for Jenkins to be ready\necho &quot;Waiting for Jenkins to start...&quot;\nfor i in {1..30}; do\n    if curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;Jenkins is ready&quot;\n        break\n    fi\n    sleep 10\ndone\n\n# Cancel quiet mode\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 cancel-quiet-down\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://jenkins-backups/ --recursive --sse AES256\naz storage blob upload-batch --source ${BACKUP_DIR} --destination jenkins-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://jenkins-backups/\n\n# Test backup integrity\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz | head -1)\nif tar -tzf &quot;$LATEST_BACKUP&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✓ Backup integrity verified&quot;\nelse\n    echo &quot;✗ Backup integrity check failed&quot;\nfi\n\n# Keep only last 14 days of backups\nfind ${BACKUP_DIR} -name &quot;jenkins-*&quot; -type f -mtime +14 -delete\n\necho &quot;Jenkins backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/jenkins-backup.sh\n\n# Schedule daily backups\necho &quot;0 1 * * * root /usr/local/bin/jenkins-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"jenkins-disaster-recovery\" class=\"mobile-header\">Jenkins Disaster Recovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/jenkins-restore.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_FILE=&quot;${1}&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    echo &quot;Available backups:&quot;\n    ls -la /backup/jenkins/config/jenkins-home-*.tar.gz\n    exit 1\nfi\n\necho &quot;Restoring Jenkins from backup: $BACKUP_FILE&quot;\n\n# Stop Jenkins\nsystemctl stop jenkins\n\n# Backup current installation\nmv /var/lib/jenkins /var/lib/jenkins.backup.$(date +%s)\n\n# Create new Jenkins directory\nmkdir -p /var/lib/jenkins\nchown jenkins:jenkins /var/lib/jenkins\n\n# Restore from backup\ntar -xzf &quot;$BACKUP_FILE&quot; -C /var/lib/jenkins\n\n# Set proper ownership\nchown -R jenkins:jenkins /var/lib/jenkins\n\n# Start Jenkins\nsystemctl start jenkins\n\n# Wait for Jenkins to start\necho &quot;Waiting for Jenkins to start...&quot;\nfor i in {1..60}; do\n    if curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;Jenkins restored successfully&quot;\n        break\n    fi\n    sleep 10\ndone\n\necho &quot;Jenkins restore completed&quot;\necho &quot;Please verify configuration and rebuild any workspace dependencies&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/jenkins-restore.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-health-checks\" class=\"mobile-header\">Monitoring and Health Checks</h2>\n<h3 id=\"comprehensive-monitoring\" class=\"mobile-header\">Comprehensive Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/jenkins-health-check.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/jenkins-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active jenkins &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Jenkins service is running&quot;\nelse\n    log_message &quot;✗ Jenkins service is not running&quot;\n    exit 1\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w &quot;%{http_code}&quot; http://localhost:8080/login)\nif [ &quot;${HTTP_STATUS}&quot; = &quot;200&quot; ]; then\n    log_message &quot;✓ Jenkins web interface is responding&quot;\nelse\n    log_message &quot;✗ Jenkins web interface issues (HTTP ${HTTP_STATUS})&quot;\nfi\n\n# Check agent connectivity\nAGENT_COUNT=$(java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n    list-computers | grep -c &quot;^agent&quot; || echo &quot;0&quot;)\nONLINE_AGENTS=$(java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n    list-computers | grep -c &quot;online&quot; || echo &quot;0&quot;)\n\nlog_message &quot;ℹ Jenkins agents: ${ONLINE_AGENTS}/${AGENT_COUNT} online&quot;\n\n# Check disk space\nDISK_USAGE=$(df /var/lib/jenkins | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message &quot;⚠ High disk usage: ${DISK_USAGE}%&quot;\nelse\n    log_message &quot;✓ Disk usage: ${DISK_USAGE}%&quot;\nfi\n\n# Check for failed builds\nFAILED_JOBS=$(java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n    list-jobs | xargs -I {} java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:secure_admin_password_2024 \\\n    get-job {} | grep -c &quot;FAILURE&quot; || echo &quot;0&quot;)\n\nif [ ${FAILED_JOBS} -gt 0 ]; then\n    log_message &quot;⚠ ${FAILED_JOBS} jobs with recent failures&quot;\nfi\n\n# Check Java memory usage\nJAVA_MEMORY=$(ps -o pid,vsz,rss,comm -C java | grep jenkins | awk &#039;{print $3/1024}&#039; | head -1)\nlog_message &quot;ℹ Jenkins memory usage: ${JAVA_MEMORY}MB&quot;\n\nlog_message &quot;Jenkins health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/jenkins-health-check.sh\n\n# Schedule health checks every 15 minutes\necho &quot;*/15 * * * * root /usr/local/bin/jenkins-health-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Jenkins service status\nsudo systemctl status jenkins\nsudo journalctl -u jenkins -f\n\n# Check Jenkins logs\nsudo tail -f /var/log/jenkins/jenkins.log\n\n# Check Java process\nps aux | grep jenkins\njps -v  # Show Java processes\n\n# Memory issues\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JAVA_OPTS=-Djava.awt.headless=true -Xmx4g -Xms2g&quot;\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n\n# Plugin issues\n# Access Jenkins web interface\n# Go to Manage Jenkins &gt; Manage Plugins &gt; Advanced\n# Check for plugin conflicts or updates\n\n# Agent connectivity issues\n# Check SSH connectivity\nssh jenkins@agent-host\n\n# Check agent logs\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password \\\n    connect-node agent-name\n\n# Build failures\n# Check workspace permissions\nsudo chown -R jenkins:jenkins /var/lib/jenkins/workspace\n\n# Clear old builds\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password \\\n    delete-builds job-name 1-10\n\n# Performance issues\n# Check system resources\ntop -p $(pgrep java)\nhtop -p $(pgrep java)\n\n# Database cleanup (if using H2)\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password \\\n    groovy = &lt;&lt;GROOVY\nimport jenkins.model.Jenkins\nJenkins.instance.cleanUp()\nGROOVY\n\n# Reset Jenkins configuration (emergency)\nsudo systemctl stop jenkins\nsudo rm /var/lib/jenkins/config.xml\nsudo systemctl start jenkins\n# Reconfigure via setup wizard</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/book/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/book/pipeline/pipeline-best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Pipeline Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://jenkins.io/projects/jcasc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Configuration as Code</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/community/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Community</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"16 min","wordCount":3118,"lastBuilt":"2025-09-14T01:30:35.048Z"},{"name":"jitsi","displayName":"Jitsi","slug":"jitsi","description":"Repo for jitsi","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jitsi","updatedAt":"2025-09-08T03:09:26Z","createdAt":"2025-09-08T03:09:16Z","readmeRaw":"## 👋 Welcome to jitsi 🚀  \n\njitsi README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-jitsi\" class=\"mobile-header\">👋 Welcome to jitsi 🚀  </h2>\n<p class=\"mobile-paragraph\">jitsi README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:44.912Z"},{"name":"jupyter","displayName":"Jupyter","slug":"jupyter","description":"Repo for jupyter","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jupyter","updatedAt":"2025-09-08T03:09:39Z","createdAt":"2025-09-08T03:09:29Z","readmeRaw":"## 👋 Welcome to jupyter 🚀  \n\njupyter README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-jupyter\" class=\"mobile-header\">👋 Welcome to jupyter 🚀  </h2>\n<p class=\"mobile-paragraph\">jupyter README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:44.773Z"},{"name":"k3s","displayName":"K3s","slug":"k3s","description":"Repo for k3s","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/k3s","updatedAt":"2025-09-08T03:09:53Z","createdAt":"2025-09-08T03:09:43Z","readmeRaw":"## 👋 Welcome to k3s 🚀  \n\nk3s README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-k3s\" class=\"mobile-header\">👋 Welcome to k3s 🚀  </h2>\n<p class=\"mobile-paragraph\">k3s README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:44.620Z"},{"name":"keycloak","displayName":"Keycloak","slug":"keycloak","description":"Repo for keycloak","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/keycloak","updatedAt":"2025-09-08T03:10:05Z","createdAt":"2025-09-08T03:09:55Z","readmeRaw":"## 👋 Welcome to keycloak 🚀  \n\nkeycloak README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-keycloak\" class=\"mobile-header\">👋 Welcome to keycloak 🚀  </h2>\n<p class=\"mobile-paragraph\">keycloak README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:44.485Z"},{"name":"kubernetes","displayName":"Kubernetes","slug":"kubernetes","description":"Repo for kubernetes","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/kubernetes","updatedAt":"2025-09-14T01:30:22Z","createdAt":"2025-09-08T03:10:10Z","readmeRaw":"# Kubernetes Installation Guide\n\nContainer orchestration platform for automating deployment, scaling, and management of containerized applications. Industry standard for container orchestration with enterprise-grade security and scalability.\n\n## Prerequisites\n\n- Linux system (64-bit) with minimum 2GB RAM per node\n- 2 CPU cores minimum per control plane node\n- Container runtime (containerd, Docker, or CRI-O)\n- Network connectivity between all nodes\n- Unique hostname, MAC address, and product_uuid for every node\n- Swap disabled on all nodes\n- Required ports open for cluster communication\n\n## System Preparation (All Distributions)\n\n### Disable Swap (Required)\n```bash\n# Disable swap immediately\nsudo swapoff -a\n\n# Disable swap permanently\nsudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n\n# Verify swap is disabled\nfree -h\nswapon --show\n```\n\n### Configure Kernel Modules\n```bash\n# Load required kernel modules\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# Configure sysctl parameters\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\nsudo sysctl --system\n```\n\n## Container Runtime Installation\n\n### containerd (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt-get update\n\n# Install dependencies\nsudo apt-get install -y ca-certificates curl gnupg lsb-release\n\n# Add Docker repository for containerd\nsudo mkdir -m 0755 -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install containerd\nsudo apt-get update\nsudo apt-get install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install prerequisites\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install containerd\nsudo yum install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n```\n\n#### Fedora\n```bash\n# Install containerd\nsudo dnf install -y containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n```\n\n#### Arch Linux\n```bash\n# Install containerd\nsudo pacman -Syu containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Enable and start containerd\nsudo systemctl enable --now containerd\n```\n\n## Kubernetes Installation\n\n### kubeadm, kubelet, kubectl Installation\n\n#### Ubuntu/Debian\n```bash\n# Update package index and install packages needed for apt to use HTTPS\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\n\n# Download and add the Kubernetes signing key\ncurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n# Add Kubernetes repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n# Update package index and install Kubernetes components\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\n\n# Hold packages to prevent automatic updates\nsudo apt-mark hold kubelet kubeadm kubectl\n\n# Enable kubelet\nsudo systemctl enable --now kubelet\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux/Fedora\n```bash\n# Create Kubernetes repository\ncat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/\nenabled=1\ngpgcheck=1\ngpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\nexclude=kubelet kubeadm kubectl cri-tools kubernetes-cni\nEOF\n\n# Set SELinux to permissive mode (required for cluster communication)\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\n# Install Kubernetes components\nsudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n\n# Enable kubelet\nsudo systemctl enable --now kubelet\n```\n\n#### Arch Linux\n```bash\n# Install from AUR (using yay)\nyay -S kubeadm-bin kubelet-bin kubectl-bin\n\n# Or build from source\ngit clone https://aur.archlinux.org/kubectl-bin.git\ncd kubectl-bin && makepkg -si\n\n# Enable kubelet\nsudo systemctl enable --now kubelet\n```\n\n## Cluster Initialization\n\n### Control Plane Setup (Master Node)\n```bash\n# Initialize cluster with security best practices\nsudo kubeadm init \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --service-cidr=10.96.0.0/12 \\\n  --apiserver-advertise-address=$(hostname -I | awk '{print $1}') \\\n  --node-name=$(hostname) \\\n  --ignore-preflight-errors=NumCPU\n\n# Configure kubectl for regular user\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# Alternative: Root user configuration\nexport KUBECONFIG=/etc/kubernetes/admin.conf\necho 'export KUBECONFIG=/etc/kubernetes/admin.conf' >> ~/.bashrc\n\n# Verify control plane is running\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods --all-namespaces\n```\n\n### Network Plugin Installation\n\n#### Flannel (Simple, recommended for beginners)\n```bash\n# Install Flannel CNI\nkubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n\n# Verify Flannel pods are running\nkubectl get pods -n kube-flannel\n```\n\n#### Calico (Advanced networking and network policies)\n```bash\n# Install Calico CNI\nkubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml\n\n# Download and apply Calico custom resources\ncurl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O\nkubectl create -f custom-resources.yaml\n\n# Verify Calico is running\nkubectl get pods -n calico-system\n```\n\n#### Cilium (eBPF-based networking)\n```bash\n# Install Cilium CLI\nCILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)\nCLI_ARCH=amd64\nif [ \"$(uname -m)\" = \"aarch64\" ]; then CLI_ARCH=arm64; fi\ncurl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\nsha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum\nsudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin\nrm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\n\n# Install Cilium\ncilium install\n\n# Verify installation\ncilium status --wait\n```\n\n### Worker Node Setup\n```bash\n# On worker nodes, use the join command from control plane initialization\n# Example (replace with your actual token and hash):\nsudo kubeadm join 192.168.1.100:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234567890abcdef...\n\n# If you need to get the join command again:\n# On control plane:\nkubeadm token create --print-join-command\n\n# Verify nodes joined successfully\nkubectl get nodes -o wide\n```\n\n## Security Hardening (2024 Best Practices)\n\n### RBAC Configuration\n```bash\n# Create service account with limited permissions\nkubectl create serviceaccount developer-sa -n default\n\n# Create role with specific permissions\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: developer-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\", \"configmaps\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"\"]\n  resources: [\"pods/log\"]\n  verbs: [\"get\", \"list\"]\nEOF\n\n# Create role binding\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: developer-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: developer-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: developer-role\n  apiGroup: rbac.authorization.k8s.io\nEOF\n\n# Test RBAC configuration\nkubectl auth can-i create deployments --as=system:serviceaccount:default:developer-sa\n```\n\n### Pod Security Standards\n```bash\n# Enable Pod Security Standards (baseline level)\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: secure-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: baseline\n    pod-security.kubernetes.io/audit: baseline\n    pod-security.kubernetes.io/warn: baseline\nEOF\n\n# For restricted security (recommended for production)\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: restricted-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\nEOF\n\n# Example secure pod configuration\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secure-pod\n  namespace: restricted-namespace\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    runAsGroup: 3000\n    fsGroup: 2000\n    seccompProfile:\n      type: RuntimeDefault\n  containers:\n  - name: app\n    image: nginx:latest\n    securityContext:\n      allowPrivilegeEscalation: false\n      readOnlyRootFilesystem: true\n      capabilities:\n        drop:\n        - ALL\n    ports:\n    - containerPort: 80\n    volumeMounts:\n    - name: tmp-volume\n      mountPath: /tmp\n    - name: cache-volume\n      mountPath: /var/cache/nginx\n  volumes:\n  - name: tmp-volume\n    emptyDir: {}\n  - name: cache-volume\n    emptyDir: {}\nEOF\n```\n\n### Network Policies\n```bash\n# Default deny all network policy\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\nEOF\n\n# Allow specific communication\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-nginx-ingress\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: nginx\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    ports:\n    - protocol: TCP\n      port: 80\nEOF\n\n# Allow egress for DNS\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-dns-egress\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  - to: []\n    ports:\n    - protocol: UDP\n      port: 53\nEOF\n```\n\n### etcd Security\n```bash\n# Check etcd encryption at rest\nkubectl get secrets --all-namespaces -o json | kubectl replace -f-\n\n# Create encryption configuration\ncat <<EOF | sudo tee /etc/kubernetes/enc.yaml\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  - configmaps\n  - pandas.awesome.bears.example\n  providers:\n  - aescbc:\n      keys:\n      - name: key1\n        secret: $(head -c 32 /dev/urandom | base64)\n  - identity: {}\nEOF\n\n# Update kube-apiserver configuration\nsudo sed -i '/--encryption-provider-config=/d' /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i '/- kube-apiserver/a\\    - --encryption-provider-config=/etc/kubernetes/enc.yaml' /etc/kubernetes/manifests/kube-apiserver.yaml\n\n# Mount encryption config in kube-apiserver\nsudo sed -i '/volumeMounts:/a\\    - mountPath: /etc/kubernetes/enc.yaml\\n      name: encryption-config\\n      readOnly: true' /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i '/volumes:/a\\  - hostPath:\\n      path: /etc/kubernetes/enc.yaml\\n      type: FileOrCreate\\n    name: encryption-config' /etc/kubernetes/manifests/kube-apiserver.yaml\n```\n\n## Alternative Installation Methods\n\n### k3s (Lightweight Kubernetes)\n```bash\n# Install k3s on control plane\ncurl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644\n\n# Get node token for workers\nsudo cat /var/lib/rancher/k3s/server/node-token\n\n# Install on worker nodes\ncurl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\nsudo chown $(id -u):$(id -g) ~/.kube/config\nexport KUBECONFIG=~/.kube/config\n\n# Verify cluster\nkubectl get nodes\n```\n\n### k0s (Zero-deps Kubernetes)\n```bash\n# Download k0s\ncurl -sSLf https://get.k0s.sh | sudo sh\n\n# Initialize controller\nsudo k0s install controller --single\n\n# Start k0s\nsudo systemctl start k0scontroller\n\n# Generate worker join token\nsudo k0s token create --role=worker\n\n# On worker nodes:\nsudo k0s install worker --token-file /path/to/token/file\nsudo systemctl start k0sworker\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo k0s kubeconfig admin > ~/.kube/config\n```\n\n### MicroK8s (Ubuntu/Snap)\n```bash\n# Install MicroK8s\nsudo snap install microk8s --classic\n\n# Add user to microk8s group\nsudo usermod -a -G microk8s $USER\nsudo chown -f -R $USER ~/.kube\nnewgrp microk8s\n\n# Enable essential addons\nmicrok8s enable dns dashboard storage\n\n# Configure kubectl alias\necho 'alias kubectl=\"microk8s kubectl\"' >> ~/.bashrc\nsource ~/.bashrc\n\n# Get cluster info\nmicrok8s kubectl cluster-info\n```\n\n### Minikube (Development)\n```bash\n# Install minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Start cluster with specific configuration\nminikube start \\\n  --driver=containerd \\\n  --cpus=4 \\\n  --memory=8g \\\n  --disk-size=50g \\\n  --kubernetes-version=v1.29.0\n\n# Enable addons\nminikube addons enable dashboard\nminikube addons enable metrics-server\nminikube addons enable ingress\nminikube addons enable registry\n\n# Configure kubectl context\nkubectl config use-context minikube\n\n# Access dashboard\nminikube dashboard\n```\n\n## Essential Add-ons Installation\n\n### Metrics Server\n```bash\n# Install metrics-server for resource monitoring\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\n# For development clusters, may need to add --kubelet-insecure-tls\nkubectl patch deployment metrics-server -n kube-system --type='json' -p='[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/args/-\", \"value\": \"--kubelet-insecure-tls\"}]'\n\n# Verify metrics server\nkubectl top nodes\nkubectl top pods --all-namespaces\n```\n\n### Kubernetes Dashboard\n```bash\n# Install dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n# Create admin service account\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\nEOF\n\n# Get access token\nkubectl -n kubernetes-dashboard create token admin-user\n\n# Access dashboard\nkubectl proxy &\n# Visit: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\n```\n\n### Ingress Controller (NGINX)\n```bash\n# Install NGINX Ingress Controller\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml\n\n# For bare metal installations\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/baremetal/deploy.yaml\n\n# Verify installation\nkubectl get pods -n ingress-nginx\nkubectl get svc -n ingress-nginx\n\n# Create sample ingress\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - example.com\n    secretName: example-tls\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: web-service\n            port:\n              number: 80\nEOF\n```\n\n## Storage Configuration\n\n### Persistent Volumes and Storage Classes\n```bash\n# Create local storage class\ncat <<EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: local-storage\nprovisioner: kubernetes.io/no-provisioner\nvolumeBindingMode: WaitForFirstConsumer\nallowVolumeExpansion: true\nreclaimPolicy: Delete\nEOF\n\n# Create persistent volume\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: local-pv-1\nspec:\n  capacity:\n    storage: 10Gi\n  volumeMode: Filesystem\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Delete\n  storageClassName: local-storage\n  local:\n    path: /mnt/disk1\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/hostname\n          operator: In\n          values:\n          - node-1\nEOF\n\n# Create persistent volume claim\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: app-data-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: local-storage\n  resources:\n    requests:\n      storage: 5Gi\nEOF\n```\n\n### NFS Storage (Shared volumes)\n```bash\n# Install NFS client utilities (all nodes)\n# Ubuntu/Debian\nsudo apt install -y nfs-common\n\n# RHEL/CentOS\nsudo yum install -y nfs-utils\n\n# Create NFS storage class\ncat <<EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: nfs-storage\nprovisioner: example.com/nfs\nparameters:\n  server: 192.168.1.200\n  path: /exported/path\n  readOnly: \"false\"\nreclaimPolicy: Retain\nallowVolumeExpansion: true\nmountOptions:\n  - hard\n  - nfsvers=4.1\nEOF\n```\n\n## Firewall Configuration (Cross-Platform)\n\n### Required Ports\n```bash\n# Control plane ports\nsudo firewall-cmd --permanent --add-port=6443/tcp    # API server\nsudo firewall-cmd --permanent --add-port=2379-2380/tcp  # etcd\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=10259/tcp  # kube-scheduler\nsudo firewall-cmd --permanent --add-port=10257/tcp  # kube-controller-manager\n\n# Worker node ports\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=30000-32767/tcp  # NodePort services\n\n# CNI ports (Flannel)\nsudo firewall-cmd --permanent --add-port=8285/udp   # Flannel\nsudo firewall-cmd --permanent --add-port=8472/udp   # Flannel VXLAN\n\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 6443/tcp\nsudo ufw allow 2379:2380/tcp\nsudo ufw allow 10250/tcp\nsudo ufw allow 10259/tcp\nsudo ufw allow 10257/tcp\nsudo ufw allow 30000:32767/tcp\nsudo ufw allow 8285/udp\nsudo ufw allow 8472/udp\n\n# iptables (manual configuration)\nsudo iptables -A INPUT -p tcp --dport 6443 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 2379:2380 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 10250 -j ACCEPT\n```\n\n### SELinux Configuration (RHEL/CentOS)\n```bash\n# Configure SELinux for Kubernetes\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\n# Alternative: Configure SELinux policies instead of disabling\nsudo setsebool -P container_manage_cgroup true\nsudo setsebool -P container_use_cgroup true\n\n# Install SELinux policies for containers\nsudo yum install -y container-selinux\n\n# Check for denials\nsudo ausearch -m AVC,USER_AVC -ts recent\n```\n\n## High Availability Setup\n\n### Multi-Master Cluster with kubeadm\n```bash\n# On first control plane node\nsudo kubeadm init \\\n  --control-plane-endpoint=\"k8s-cluster.example.com:6443\" \\\n  --upload-certs \\\n  --pod-network-cidr=10.244.0.0/16\n\n# Note the commands to join additional control plane nodes and workers\n\n# On additional control plane nodes:\nsudo kubeadm join k8s-cluster.example.com:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234... \\\n  --control-plane \\\n  --certificate-key 1234...\n\n# Configure load balancer (HAProxy example)\ncat <<EOF | sudo tee /etc/haproxy/haproxy.cfg\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode tcp\n    log global\n    option tcplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend k8s-api\n    bind *:6443\n    mode tcp\n    default_backend k8s-api-backend\n\nbackend k8s-api-backend\n    mode tcp\n    balance roundrobin\n    server k8s-master-1 192.168.1.101:6443 check\n    server k8s-master-2 192.168.1.102:6443 check\n    server k8s-master-3 192.168.1.103:6443 check\nEOF\n\nsudo systemctl restart haproxy\n```\n\n### External etcd Cluster\n```bash\n# Install etcd on dedicated nodes\nETCD_VER=v3.5.9\ncurl -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzf etcd-${ETCD_VER}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VER}-linux-amd64/{etcd,etcdctl} /usr/local/bin/\n\n# Create etcd configuration\nsudo tee /etc/systemd/system/etcd.service > /dev/null <<EOF\n[Unit]\nDescription=etcd\nDocumentation=https://github.com/coreos\n\n[Service]\nType=notify\nUser=etcd\nExecStart=/usr/local/bin/etcd \\\\\n  --name=etcd-1 \\\\\n  --data-dir=/var/lib/etcd \\\\\n  --listen-client-urls=https://192.168.1.201:2379 \\\\\n  --advertise-client-urls=https://192.168.1.201:2379 \\\\\n  --listen-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-advertise-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-cluster=etcd-1=https://192.168.1.201:2380,etcd-2=https://192.168.1.202:2380,etcd-3=https://192.168.1.203:2380 \\\\\n  --initial-cluster-token=etcd-cluster-1 \\\\\n  --initial-cluster-state=new \\\\\n  --cert-file=/etc/etcd/pki/server.crt \\\\\n  --key-file=/etc/etcd/pki/server.key \\\\\n  --peer-cert-file=/etc/etcd/pki/peer.crt \\\\\n  --peer-key-file=/etc/etcd/pki/peer.key \\\\\n  --trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-client-cert-auth \\\\\n  --client-cert-auth\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create etcd user and directories\nsudo useradd -r etcd\nsudo mkdir -p /var/lib/etcd /etc/etcd/pki\nsudo chown etcd:etcd /var/lib/etcd\nsudo systemctl enable --now etcd\n```\n\n## Application Deployment Examples\n\n### Secure Application Deployment\n```bash\n# Create namespace with network policies\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: myapp\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: myapp-sa\n  namespace: myapp\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: myapp\n  name: myapp-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: myapp-rolebinding\n  namespace: myapp\nsubjects:\n- kind: ServiceAccount\n  name: myapp-sa\n  namespace: myapp\nroleRef:\n  kind: Role\n  name: myapp-role\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-deployment\n  namespace: myapp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      serviceAccountName: myapp-sa\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        runAsGroup: 3000\n        fsGroup: 2000\n        seccompProfile:\n          type: RuntimeDefault\n      containers:\n      - name: app\n        image: nginx:alpine\n        ports:\n        - containerPort: 80\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n        resources:\n          requests:\n            memory: \"64Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        volumeMounts:\n        - name: tmp-volume\n          mountPath: /tmp\n        - name: cache-volume\n          mountPath: /var/cache/nginx\n      volumes:\n      - name: tmp-volume\n        emptyDir: {}\n      - name: cache-volume\n        emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-service\n  namespace: myapp\nspec:\n  selector:\n    app: myapp\n  ports:\n  - port: 80\n    targetPort: 80\n  type: ClusterIP\nEOF\n```\n\n### StatefulSet with Persistent Storage\n```bash\n# Deploy StatefulSet application (database example)\ncat <<EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql-statefulset\n  namespace: myapp\nspec:\n  serviceName: mysql-service\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      securityContext:\n        runAsUser: 999\n        runAsGroup: 999\n        fsGroup: 999\n      containers:\n      - name: mysql\n        image: mysql:8.0\n        ports:\n        - containerPort: 3306\n          name: mysql\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: root-password\n        volumeMounts:\n        - name: mysql-storage\n          mountPath: /var/lib/mysql\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n  volumeClaimTemplates:\n  - metadata:\n      name: mysql-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      storageClassName: \"local-storage\"\n      resources:\n        requests:\n          storage: 10Gi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-service\n  namespace: myapp\nspec:\n  clusterIP: None\n  selector:\n    app: mysql\n  ports:\n  - port: 3306\n    targetPort: 3306\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secret\n  namespace: myapp\ntype: Opaque\ndata:\n  root-password: $(echo -n 'secure_mysql_password' | base64)\nEOF\n```\n\n## Backup and Disaster Recovery\n\n### etcd Backup\n```bash\n# Create etcd backup script\nsudo tee /usr/local/bin/etcd-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/etcd\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create etcd snapshot\nETCDCTL_API=3 etcdctl snapshot save ${BACKUP_DIR}/etcd-backup-${DATE}.db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Verify snapshot\nETCDCTL_API=3 etcdctl snapshot status ${BACKUP_DIR}/etcd-backup-${DATE}.db -w table\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"etcd-backup-*.db\" -type f -mtime +7 -delete\n\necho \"etcd backup completed: etcd-backup-${DATE}.db\"\nEOF\n\nsudo chmod +x /usr/local/bin/etcd-backup.sh\n\n# Schedule backup\necho \"0 2 * * * root /usr/local/bin/etcd-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Cluster State Backup\n```bash\n# Backup all cluster resources\nkubectl get all --all-namespaces -o yaml > cluster-backup-$(date +%Y%m%d).yaml\n\n# Backup specific resource types\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml > cluster-data-backup-$(date +%Y%m%d).yaml\n\n# Create backup script for all resources\nsudo tee /usr/local/bin/k8s-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/kubernetes\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup all cluster resources\nkubectl get all --all-namespaces -o yaml > ${BACKUP_DIR}/cluster-all-${DATE}.yaml\n\n# Backup critical resources separately\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml > ${BACKUP_DIR}/cluster-data-${DATE}.yaml\n\n# Backup custom resources\nkubectl get crd -o yaml > ${BACKUP_DIR}/cluster-crd-${DATE}.yaml\n\n# Backup RBAC\nkubectl get clusterroles,clusterrolebindings,roles,rolebindings --all-namespaces -o yaml > ${BACKUP_DIR}/cluster-rbac-${DATE}.yaml\n\n# etcd backup\n/usr/local/bin/etcd-backup.sh\n\n# Compress backups\ntar -czf ${BACKUP_DIR}/k8s-complete-backup-${DATE}.tar.gz ${BACKUP_DIR}/*-${DATE}.yaml\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"*-${DATE:0:8}*\" -type f -mtime +7 -delete\n\necho \"Kubernetes backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/k8s-backup.sh\necho \"0 3 * * * root /usr/local/bin/k8s-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Verification and Testing\n\n### Cluster Health Checks\n```bash\n# Check cluster components\nkubectl get componentstatuses\nkubectl cluster-info\nkubectl get nodes -o wide\n\n# Check all pods in system namespaces\nkubectl get pods --all-namespaces\nkubectl get events --all-namespaces --sort-by=.metadata.creationTimestamp\n\n# Test DNS resolution\nkubectl run test-dns --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default\n\n# Test pod networking\nkubectl run test-pod-1 --image=nginx --port=80\nkubectl expose pod test-pod-1 --port=80 --type=ClusterIP\nkubectl run test-pod-2 --image=busybox --rm -it --restart=Never -- wget -qO- test-pod-1\n\n# Check resource usage\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Verify RBAC\nkubectl auth can-i create deployments\nkubectl auth can-i get secrets --as=system:serviceaccount:default:default\n\n# Test persistent storage\nkubectl apply -f - <<EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: test-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-storage-pod\nspec:\n  containers:\n  - name: app\n    image: busybox\n    command: ['sh', '-c', 'echo \"Storage test\" > /data/test.txt && cat /data/test.txt && sleep 3600']\n    volumeMounts:\n    - name: storage\n      mountPath: /data\n  volumes:\n  - name: storage\n    persistentVolumeClaim:\n      claimName: test-pvc\nEOF\n\nkubectl logs test-storage-pod\nkubectl delete pod test-storage-pod\nkubectl delete pvc test-pvc\n```\n\n### Security Validation\n```bash\n# Run CIS Kubernetes Benchmark\ndocker run --rm -v $(pwd):/tmp aquasec/kube-bench:latest run --targets master,node,etcd,policies\n\n# Check pod security policies\nkubectl get psp  # For older versions\nkubectl get podsecuritypolicies  # For older versions\n\n# Verify network policies are working\nkubectl describe networkpolicy default-deny-all\n\n# Check for privileged containers\nkubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.securityContext.privileged}{\"\\n\"}{end}' | grep true\n\n# Audit security contexts\nkubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\t\"}{.spec.securityContext}{\"\\n\"}{end}'\n\n# Check for containers running as root\nkubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.containers[*].securityContext.runAsUser}{\"\\n\"}{end}' | grep -E '\\t0$|\\t$'\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Node not ready issues\nkubectl describe node <node-name>\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Check kubelet logs\nsudo journalctl -u kubelet -f\n\n# Check container runtime\nsudo systemctl status containerd\nsudo crictl pods\n\n# Network issues\nkubectl get pods -n kube-system\nkubectl describe pod <cni-pod-name> -n kube-system\n\n# Permission issues (SELinux)\nsudo ausearch -m AVC -ts recent\nsudo setsebool -P container_manage_cgroup true\n\n# Certificate issues\nsudo kubeadm certs check-expiration\nopenssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout\n\n# Resource exhaustion\nkubectl describe node <node-name>\nkubectl top nodes\nkubectl top pods --all-namespaces --sort-by=memory\n\n# etcd issues\nsudo etcdctl endpoint health \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Reset cluster (if needed)\nsudo kubeadm reset\nsudo rm -rf /etc/cni/net.d\nsudo rm -rf $HOME/.kube/config\n```\n\n### Debug Pod Issues\n```bash\n# Debug failing pods\nkubectl describe pod <pod-name>\nkubectl logs <pod-name> -c <container-name>\nkubectl get events --field-selector involvedObject.name=<pod-name>\n\n# Debug networking\nkubectl run debug-pod --image=nicolaka/netshoot --rm -it --restart=Never\n\n# Check resource constraints\nkubectl describe resourcequota -n <namespace>\nkubectl describe limitrange -n <namespace>\n\n# Debug storage issues\nkubectl describe pvc <pvc-name>\nkubectl get events --field-selector involvedObject.name=<pvc-name>\n\n# Debug service connectivity\nkubectl run debug --image=busybox --rm -it --restart=Never -- nslookup <service-name>\nkubectl get endpoints <service-name>\n\n# Debug ingress issues\nkubectl describe ingress <ingress-name>\nkubectl get events --field-selector involvedObject.name=<ingress-name>\nkubectl logs -n ingress-nginx deployment/ingress-nginx-controller\n```\n\n## Additional Resources\n\n- [Official Documentation](https://kubernetes.io/docs/)\n- [kubectl Reference](https://kubernetes.io/docs/reference/kubectl/)\n- [Security Best Practices](https://kubernetes.io/docs/concepts/security/)\n- [CIS Kubernetes Benchmark](https://www.cisecurity.org/benchmark/kubernetes)\n- [OWASP Kubernetes Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Kubernetes_Security_Cheat_Sheet.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"kubernetes-installation-guide\" class=\"mobile-header\">Kubernetes Installation Guide</h1>\n<p class=\"mobile-paragraph\">Container orchestration platform for automating deployment, scaling, and management of containerized applications. Industry standard for container orchestration with enterprise-grade security and scalability.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (64-bit) with minimum 2GB RAM per node</li>\n<li class=\"mobile-list-item\">2 CPU cores minimum per control plane node</li>\n<li class=\"mobile-list-item\">Container runtime (containerd, Docker, or CRI-O)</li>\n<li class=\"mobile-list-item\">Network connectivity between all nodes</li>\n<li class=\"mobile-list-item\">Unique hostname, MAC address, and product_uuid for every node</li>\n<li class=\"mobile-list-item\">Swap disabled on all nodes</li>\n<li class=\"mobile-list-item\">Required ports open for cluster communication</li>\n<h2 id=\"system-preparation-all-distributions\" class=\"mobile-header\">System Preparation (All Distributions)</h2>\n<h3 id=\"disable-swap-required\" class=\"mobile-header\">Disable Swap (Required)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Disable swap immediately\nsudo swapoff -a\n\n# Disable swap permanently\nsudo sed -i &#039;/ swap / s/^\\(.*\\)$/#\\1/g&#039; /etc/fstab\n\n# Verify swap is disabled\nfree -h\nswapon --show</code></pre>\n      </div>\n    </div>\n<h3 id=\"configure-kernel-modules\" class=\"mobile-header\">Configure Kernel Modules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Load required kernel modules\ncat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# Configure sysctl parameters\ncat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\nsudo sysctl --system</code></pre>\n      </div>\n    </div>\n<h2 id=\"container-runtime-installation\" class=\"mobile-header\">Container Runtime Installation</h2>\n<h3 id=\"containerd-recommended\" class=\"mobile-header\">containerd (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt-get update\n\n# Install dependencies\nsudo apt-get install -y ca-certificates curl gnupg lsb-release\n\n# Add Docker repository for containerd\nsudo mkdir -m 0755 -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Install containerd\nsudo apt-get update\nsudo apt-get install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install prerequisites\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install containerd\nsudo yum install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install containerd\nsudo dnf install -y containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install containerd\nsudo pacman -Syu containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Enable and start containerd\nsudo systemctl enable --now containerd</code></pre>\n      </div>\n    </div>\n<h2 id=\"kubernetes-installation\" class=\"mobile-header\">Kubernetes Installation</h2>\n<h3 id=\"kubeadm-kubelet-kubectl-installation\" class=\"mobile-header\">kubeadm, kubelet, kubectl Installation</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index and install packages needed for apt to use HTTPS\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\n\n# Download and add the Kubernetes signing key\ncurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n# Add Kubernetes repository\necho &#039;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /&#039; | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n# Update package index and install Kubernetes components\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\n\n# Hold packages to prevent automatic updates\nsudo apt-mark hold kubelet kubeadm kubectl\n\n# Enable kubelet\nsudo systemctl enable --now kubelet</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux/Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Kubernetes repository\ncat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/\nenabled=1\ngpgcheck=1\ngpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\nexclude=kubelet kubeadm kubectl cri-tools kubernetes-cni\nEOF\n\n# Set SELinux to permissive mode (required for cluster communication)\nsudo setenforce 0\nsudo sed -i &#039;s/^SELINUX=enforcing$/SELINUX=permissive/&#039; /etc/selinux/config\n\n# Install Kubernetes components\nsudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n\n# Enable kubelet\nsudo systemctl enable --now kubelet</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from AUR (using yay)\nyay -S kubeadm-bin kubelet-bin kubectl-bin\n\n# Or build from source\ngit clone https://aur.archlinux.org/kubectl-bin.git\ncd kubectl-bin &amp;&amp; makepkg -si\n\n# Enable kubelet\nsudo systemctl enable --now kubelet</code></pre>\n      </div>\n    </div>\n<h2 id=\"cluster-initialization\" class=\"mobile-header\">Cluster Initialization</h2>\n<h3 id=\"control-plane-setup-master-node\" class=\"mobile-header\">Control Plane Setup (Master Node)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize cluster with security best practices\nsudo kubeadm init \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --service-cidr=10.96.0.0/12 \\\n  --apiserver-advertise-address=$(hostname -I | awk &#039;{print $1}&#039;) \\\n  --node-name=$(hostname) \\\n  --ignore-preflight-errors=NumCPU\n\n# Configure kubectl for regular user\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# Alternative: Root user configuration\nexport KUBECONFIG=/etc/kubernetes/admin.conf\necho &#039;export KUBECONFIG=/etc/kubernetes/admin.conf&#039; &gt;&gt; ~/.bashrc\n\n# Verify control plane is running\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods --all-namespaces</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-plugin-installation\" class=\"mobile-header\">Network Plugin Installation</h3>\n<p class=\"mobile-paragraph\">#### Flannel (Simple, recommended for beginners)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Flannel CNI\nkubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n\n# Verify Flannel pods are running\nkubectl get pods -n kube-flannel</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Calico (Advanced networking and network policies)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Calico CNI\nkubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml\n\n# Download and apply Calico custom resources\ncurl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O\nkubectl create -f custom-resources.yaml\n\n# Verify Calico is running\nkubectl get pods -n calico-system</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Cilium (eBPF-based networking)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Cilium CLI\nCILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)\nCLI_ARCH=amd64\nif [ &quot;$(uname -m)&quot; = &quot;aarch64&quot; ]; then CLI_ARCH=arm64; fi\ncurl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\nsha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum\nsudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin\nrm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\n\n# Install Cilium\ncilium install\n\n# Verify installation\ncilium status --wait</code></pre>\n      </div>\n    </div>\n<h3 id=\"worker-node-setup\" class=\"mobile-header\">Worker Node Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># On worker nodes, use the join command from control plane initialization\n# Example (replace with your actual token and hash):\nsudo kubeadm join 192.168.1.100:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234567890abcdef...\n\n# If you need to get the join command again:\n# On control plane:\nkubeadm token create --print-join-command\n\n# Verify nodes joined successfully\nkubectl get nodes -o wide</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening-2024-best-practices\" class=\"mobile-header\">Security Hardening (2024 Best Practices)</h2>\n<h3 id=\"rbac-configuration\" class=\"mobile-header\">RBAC Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create service account with limited permissions\nkubectl create serviceaccount developer-sa -n default\n\n# Create role with specific permissions\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: developer-role\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods&quot;, &quot;services&quot;, &quot;configmaps&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]\n- apiGroups: [&quot;apps&quot;]\n  resources: [&quot;deployments&quot;, &quot;replicasets&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods/log&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;]\nEOF\n\n# Create role binding\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: developer-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: developer-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: developer-role\n  apiGroup: rbac.authorization.k8s.io\nEOF\n\n# Test RBAC configuration\nkubectl auth can-i create deployments --as=system:serviceaccount:default:developer-sa</code></pre>\n      </div>\n    </div>\n<h3 id=\"pod-security-standards\" class=\"mobile-header\">Pod Security Standards</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Pod Security Standards (baseline level)\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: secure-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: baseline\n    pod-security.kubernetes.io/audit: baseline\n    pod-security.kubernetes.io/warn: baseline\nEOF\n\n# For restricted security (recommended for production)\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: restricted-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\nEOF\n\n# Example secure pod configuration\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secure-pod\n  namespace: restricted-namespace\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    runAsGroup: 3000\n    fsGroup: 2000\n    seccompProfile:\n      type: RuntimeDefault\n  containers:\n  - name: app\n    image: nginx:latest\n    securityContext:\n      allowPrivilegeEscalation: false\n      readOnlyRootFilesystem: true\n      capabilities:\n        drop:\n        - ALL\n    ports:\n    - containerPort: 80\n    volumeMounts:\n    - name: tmp-volume\n      mountPath: /tmp\n    - name: cache-volume\n      mountPath: /var/cache/nginx\n  volumes:\n  - name: tmp-volume\n    emptyDir: {}\n  - name: cache-volume\n    emptyDir: {}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-policies\" class=\"mobile-header\">Network Policies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Default deny all network policy\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\nEOF\n\n# Allow specific communication\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-nginx-ingress\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: nginx\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    ports:\n    - protocol: TCP\n      port: 80\nEOF\n\n# Allow egress for DNS\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-dns-egress\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  - to: []\n    ports:\n    - protocol: UDP\n      port: 53\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"etcd-security\" class=\"mobile-header\">etcd Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check etcd encryption at rest\nkubectl get secrets --all-namespaces -o json | kubectl replace -f-\n\n# Create encryption configuration\ncat &lt;&lt;EOF | sudo tee /etc/kubernetes/enc.yaml\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  - configmaps\n  - pandas.awesome.bears.example\n  providers:\n  - aescbc:\n      keys:\n      - name: key1\n        secret: $(head -c 32 /dev/urandom | base64)\n  - identity: {}\nEOF\n\n# Update kube-apiserver configuration\nsudo sed -i &#039;/--encryption-provider-config=/d&#039; /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i &#039;/- kube-apiserver/a\\    - --encryption-provider-config=/etc/kubernetes/enc.yaml&#039; /etc/kubernetes/manifests/kube-apiserver.yaml\n\n# Mount encryption config in kube-apiserver\nsudo sed -i &#039;/volumeMounts:/a\\    - mountPath: /etc/kubernetes/enc.yaml\\n      name: encryption-config\\n      readOnly: true&#039; /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i &#039;/volumes:/a\\  - hostPath:\\n      path: /etc/kubernetes/enc.yaml\\n      type: FileOrCreate\\n    name: encryption-config&#039; /etc/kubernetes/manifests/kube-apiserver.yaml</code></pre>\n      </div>\n    </div>\n<h2 id=\"alternative-installation-methods\" class=\"mobile-header\">Alternative Installation Methods</h2>\n<h3 id=\"k3s-lightweight-kubernetes\" class=\"mobile-header\">k3s (Lightweight Kubernetes)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install k3s on control plane\ncurl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644\n\n# Get node token for workers\nsudo cat /var/lib/rancher/k3s/server/node-token\n\n# Install on worker nodes\ncurl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\nsudo chown $(id -u):$(id -g) ~/.kube/config\nexport KUBECONFIG=~/.kube/config\n\n# Verify cluster\nkubectl get nodes</code></pre>\n      </div>\n    </div>\n<h3 id=\"k0s-zero-deps-kubernetes\" class=\"mobile-header\">k0s (Zero-deps Kubernetes)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download k0s\ncurl -sSLf https://get.k0s.sh | sudo sh\n\n# Initialize controller\nsudo k0s install controller --single\n\n# Start k0s\nsudo systemctl start k0scontroller\n\n# Generate worker join token\nsudo k0s token create --role=worker\n\n# On worker nodes:\nsudo k0s install worker --token-file /path/to/token/file\nsudo systemctl start k0sworker\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo k0s kubeconfig admin &gt; ~/.kube/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"microk8s-ubuntusnap\" class=\"mobile-header\">MicroK8s (Ubuntu/Snap)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MicroK8s\nsudo snap install microk8s --classic\n\n# Add user to microk8s group\nsudo usermod -a -G microk8s $USER\nsudo chown -f -R $USER ~/.kube\nnewgrp microk8s\n\n# Enable essential addons\nmicrok8s enable dns dashboard storage\n\n# Configure kubectl alias\necho &#039;alias kubectl=&quot;microk8s kubectl&quot;&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Get cluster info\nmicrok8s kubectl cluster-info</code></pre>\n      </div>\n    </div>\n<h3 id=\"minikube-development\" class=\"mobile-header\">Minikube (Development)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Start cluster with specific configuration\nminikube start \\\n  --driver=containerd \\\n  --cpus=4 \\\n  --memory=8g \\\n  --disk-size=50g \\\n  --kubernetes-version=v1.29.0\n\n# Enable addons\nminikube addons enable dashboard\nminikube addons enable metrics-server\nminikube addons enable ingress\nminikube addons enable registry\n\n# Configure kubectl context\nkubectl config use-context minikube\n\n# Access dashboard\nminikube dashboard</code></pre>\n      </div>\n    </div>\n<h2 id=\"essential-add-ons-installation\" class=\"mobile-header\">Essential Add-ons Installation</h2>\n<h3 id=\"metrics-server\" class=\"mobile-header\">Metrics Server</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install metrics-server for resource monitoring\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\n# For development clusters, may need to add --kubelet-insecure-tls\nkubectl patch deployment metrics-server -n kube-system --type=&#039;json&#039; -p=&#039;[{&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/args/-&quot;, &quot;value&quot;: &quot;--kubelet-insecure-tls&quot;}]&#039;\n\n# Verify metrics server\nkubectl top nodes\nkubectl top pods --all-namespaces</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-dashboard\" class=\"mobile-header\">Kubernetes Dashboard</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n# Create admin service account\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\nEOF\n\n# Get access token\nkubectl -n kubernetes-dashboard create token admin-user\n\n# Access dashboard\nkubectl proxy &amp;\n# Visit: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code></pre>\n      </div>\n    </div>\n<h3 id=\"ingress-controller-nginx\" class=\"mobile-header\">Ingress Controller (NGINX)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX Ingress Controller\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml\n\n# For bare metal installations\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/baremetal/deploy.yaml\n\n# Verify installation\nkubectl get pods -n ingress-nginx\nkubectl get svc -n ingress-nginx\n\n# Create sample ingress\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: &quot;true&quot;\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - example.com\n    secretName: example-tls\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: web-service\n            port:\n              number: 80\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"storage-configuration\" class=\"mobile-header\">Storage Configuration</h2>\n<h3 id=\"persistent-volumes-and-storage-classes\" class=\"mobile-header\">Persistent Volumes and Storage Classes</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create local storage class\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: local-storage\nprovisioner: kubernetes.io/no-provisioner\nvolumeBindingMode: WaitForFirstConsumer\nallowVolumeExpansion: true\nreclaimPolicy: Delete\nEOF\n\n# Create persistent volume\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: local-pv-1\nspec:\n  capacity:\n    storage: 10Gi\n  volumeMode: Filesystem\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Delete\n  storageClassName: local-storage\n  local:\n    path: /mnt/disk1\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/hostname\n          operator: In\n          values:\n          - node-1\nEOF\n\n# Create persistent volume claim\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: app-data-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: local-storage\n  resources:\n    requests:\n      storage: 5Gi\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"nfs-storage-shared-volumes\" class=\"mobile-header\">NFS Storage (Shared volumes)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NFS client utilities (all nodes)\n# Ubuntu/Debian\nsudo apt install -y nfs-common\n\n# RHEL/CentOS\nsudo yum install -y nfs-utils\n\n# Create NFS storage class\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: nfs-storage\nprovisioner: example.com/nfs\nparameters:\n  server: 192.168.1.200\n  path: /exported/path\n  readOnly: &quot;false&quot;\nreclaimPolicy: Retain\nallowVolumeExpansion: true\nmountOptions:\n  - hard\n  - nfsvers=4.1\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration-cross-platform\" class=\"mobile-header\">Firewall Configuration (Cross-Platform)</h2>\n<h3 id=\"required-ports\" class=\"mobile-header\">Required Ports</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Control plane ports\nsudo firewall-cmd --permanent --add-port=6443/tcp    # API server\nsudo firewall-cmd --permanent --add-port=2379-2380/tcp  # etcd\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=10259/tcp  # kube-scheduler\nsudo firewall-cmd --permanent --add-port=10257/tcp  # kube-controller-manager\n\n# Worker node ports\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=30000-32767/tcp  # NodePort services\n\n# CNI ports (Flannel)\nsudo firewall-cmd --permanent --add-port=8285/udp   # Flannel\nsudo firewall-cmd --permanent --add-port=8472/udp   # Flannel VXLAN\n\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 6443/tcp\nsudo ufw allow 2379:2380/tcp\nsudo ufw allow 10250/tcp\nsudo ufw allow 10259/tcp\nsudo ufw allow 10257/tcp\nsudo ufw allow 30000:32767/tcp\nsudo ufw allow 8285/udp\nsudo ufw allow 8472/udp\n\n# iptables (manual configuration)\nsudo iptables -A INPUT -p tcp --dport 6443 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 2379:2380 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 10250 -j ACCEPT</code></pre>\n      </div>\n    </div>\n<h3 id=\"selinux-configuration-rhelcentos\" class=\"mobile-header\">SELinux Configuration (RHEL/CentOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure SELinux for Kubernetes\nsudo setenforce 0\nsudo sed -i &#039;s/^SELINUX=enforcing$/SELINUX=permissive/&#039; /etc/selinux/config\n\n# Alternative: Configure SELinux policies instead of disabling\nsudo setsebool -P container_manage_cgroup true\nsudo setsebool -P container_use_cgroup true\n\n# Install SELinux policies for containers\nsudo yum install -y container-selinux\n\n# Check for denials\nsudo ausearch -m AVC,USER_AVC -ts recent</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h2>\n<h3 id=\"multi-master-cluster-with-kubeadm\" class=\"mobile-header\">Multi-Master Cluster with kubeadm</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># On first control plane node\nsudo kubeadm init \\\n  --control-plane-endpoint=&quot;k8s-cluster.example.com:6443&quot; \\\n  --upload-certs \\\n  --pod-network-cidr=10.244.0.0/16\n\n# Note the commands to join additional control plane nodes and workers\n\n# On additional control plane nodes:\nsudo kubeadm join k8s-cluster.example.com:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234... \\\n  --control-plane \\\n  --certificate-key 1234...\n\n# Configure load balancer (HAProxy example)\ncat &lt;&lt;EOF | sudo tee /etc/haproxy/haproxy.cfg\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode tcp\n    log global\n    option tcplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend k8s-api\n    bind *:6443\n    mode tcp\n    default_backend k8s-api-backend\n\nbackend k8s-api-backend\n    mode tcp\n    balance roundrobin\n    server k8s-master-1 192.168.1.101:6443 check\n    server k8s-master-2 192.168.1.102:6443 check\n    server k8s-master-3 192.168.1.103:6443 check\nEOF\n\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-etcd-cluster\" class=\"mobile-header\">External etcd Cluster</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install etcd on dedicated nodes\nETCD_VER=v3.5.9\ncurl -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzf etcd-${ETCD_VER}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VER}-linux-amd64/{etcd,etcdctl} /usr/local/bin/\n\n# Create etcd configuration\nsudo tee /etc/systemd/system/etcd.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=etcd\nDocumentation=https://github.com/coreos\n\n[Service]\nType=notify\nUser=etcd\nExecStart=/usr/local/bin/etcd \\\\\n  --name=etcd-1 \\\\\n  --data-dir=/var/lib/etcd \\\\\n  --listen-client-urls=https://192.168.1.201:2379 \\\\\n  --advertise-client-urls=https://192.168.1.201:2379 \\\\\n  --listen-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-advertise-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-cluster=etcd-1=https://192.168.1.201:2380,etcd-2=https://192.168.1.202:2380,etcd-3=https://192.168.1.203:2380 \\\\\n  --initial-cluster-token=etcd-cluster-1 \\\\\n  --initial-cluster-state=new \\\\\n  --cert-file=/etc/etcd/pki/server.crt \\\\\n  --key-file=/etc/etcd/pki/server.key \\\\\n  --peer-cert-file=/etc/etcd/pki/peer.crt \\\\\n  --peer-key-file=/etc/etcd/pki/peer.key \\\\\n  --trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-client-cert-auth \\\\\n  --client-cert-auth\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create etcd user and directories\nsudo useradd -r etcd\nsudo mkdir -p /var/lib/etcd /etc/etcd/pki\nsudo chown etcd:etcd /var/lib/etcd\nsudo systemctl enable --now etcd</code></pre>\n      </div>\n    </div>\n<h2 id=\"application-deployment-examples\" class=\"mobile-header\">Application Deployment Examples</h2>\n<h3 id=\"secure-application-deployment\" class=\"mobile-header\">Secure Application Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create namespace with network policies\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: myapp\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: myapp-sa\n  namespace: myapp\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: myapp\n  name: myapp-role\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;configmaps&quot;, &quot;secrets&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: myapp-rolebinding\n  namespace: myapp\nsubjects:\n- kind: ServiceAccount\n  name: myapp-sa\n  namespace: myapp\nroleRef:\n  kind: Role\n  name: myapp-role\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-deployment\n  namespace: myapp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      serviceAccountName: myapp-sa\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        runAsGroup: 3000\n        fsGroup: 2000\n        seccompProfile:\n          type: RuntimeDefault\n      containers:\n      - name: app\n        image: nginx:alpine\n        ports:\n        - containerPort: 80\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n        resources:\n          requests:\n            memory: &quot;64Mi&quot;\n            cpu: &quot;250m&quot;\n          limits:\n            memory: &quot;128Mi&quot;\n            cpu: &quot;500m&quot;\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        volumeMounts:\n        - name: tmp-volume\n          mountPath: /tmp\n        - name: cache-volume\n          mountPath: /var/cache/nginx\n      volumes:\n      - name: tmp-volume\n        emptyDir: {}\n      - name: cache-volume\n        emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-service\n  namespace: myapp\nspec:\n  selector:\n    app: myapp\n  ports:\n  - port: 80\n    targetPort: 80\n  type: ClusterIP\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"statefulset-with-persistent-storage\" class=\"mobile-header\">StatefulSet with Persistent Storage</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy StatefulSet application (database example)\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql-statefulset\n  namespace: myapp\nspec:\n  serviceName: mysql-service\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      securityContext:\n        runAsUser: 999\n        runAsGroup: 999\n        fsGroup: 999\n      containers:\n      - name: mysql\n        image: mysql:8.0\n        ports:\n        - containerPort: 3306\n          name: mysql\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: root-password\n        volumeMounts:\n        - name: mysql-storage\n          mountPath: /var/lib/mysql\n        resources:\n          requests:\n            memory: &quot;1Gi&quot;\n            cpu: &quot;500m&quot;\n          limits:\n            memory: &quot;2Gi&quot;\n            cpu: &quot;1000m&quot;\n  volumeClaimTemplates:\n  - metadata:\n      name: mysql-storage\n    spec:\n      accessModes: [&quot;ReadWriteOnce&quot;]\n      storageClassName: &quot;local-storage&quot;\n      resources:\n        requests:\n          storage: 10Gi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-service\n  namespace: myapp\nspec:\n  clusterIP: None\n  selector:\n    app: mysql\n  ports:\n  - port: 3306\n    targetPort: 3306\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secret\n  namespace: myapp\ntype: Opaque\ndata:\n  root-password: $(echo -n &#039;secure_mysql_password&#039; | base64)\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"etcd-backup\" class=\"mobile-header\">etcd Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create etcd backup script\nsudo tee /usr/local/bin/etcd-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/etcd&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create etcd snapshot\nETCDCTL_API=3 etcdctl snapshot save ${BACKUP_DIR}/etcd-backup-${DATE}.db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Verify snapshot\nETCDCTL_API=3 etcdctl snapshot status ${BACKUP_DIR}/etcd-backup-${DATE}.db -w table\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;etcd-backup-*.db&quot; -type f -mtime +7 -delete\n\necho &quot;etcd backup completed: etcd-backup-${DATE}.db&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/etcd-backup.sh\n\n# Schedule backup\necho &quot;0 2 * * * root /usr/local/bin/etcd-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"cluster-state-backup\" class=\"mobile-header\">Cluster State Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup all cluster resources\nkubectl get all --all-namespaces -o yaml &gt; cluster-backup-$(date +%Y%m%d).yaml\n\n# Backup specific resource types\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml &gt; cluster-data-backup-$(date +%Y%m%d).yaml\n\n# Create backup script for all resources\nsudo tee /usr/local/bin/k8s-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/kubernetes&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup all cluster resources\nkubectl get all --all-namespaces -o yaml &gt; ${BACKUP_DIR}/cluster-all-${DATE}.yaml\n\n# Backup critical resources separately\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml &gt; ${BACKUP_DIR}/cluster-data-${DATE}.yaml\n\n# Backup custom resources\nkubectl get crd -o yaml &gt; ${BACKUP_DIR}/cluster-crd-${DATE}.yaml\n\n# Backup RBAC\nkubectl get clusterroles,clusterrolebindings,roles,rolebindings --all-namespaces -o yaml &gt; ${BACKUP_DIR}/cluster-rbac-${DATE}.yaml\n\n# etcd backup\n/usr/local/bin/etcd-backup.sh\n\n# Compress backups\ntar -czf ${BACKUP_DIR}/k8s-complete-backup-${DATE}.tar.gz ${BACKUP_DIR}/*-${DATE}.yaml\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;*-${DATE:0:8}*&quot; -type f -mtime +7 -delete\n\necho &quot;Kubernetes backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/k8s-backup.sh\necho &quot;0 3 * * * root /usr/local/bin/k8s-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-testing\" class=\"mobile-header\">Verification and Testing</h2>\n<h3 id=\"cluster-health-checks\" class=\"mobile-header\">Cluster Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check cluster components\nkubectl get componentstatuses\nkubectl cluster-info\nkubectl get nodes -o wide\n\n# Check all pods in system namespaces\nkubectl get pods --all-namespaces\nkubectl get events --all-namespaces --sort-by=.metadata.creationTimestamp\n\n# Test DNS resolution\nkubectl run test-dns --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default\n\n# Test pod networking\nkubectl run test-pod-1 --image=nginx --port=80\nkubectl expose pod test-pod-1 --port=80 --type=ClusterIP\nkubectl run test-pod-2 --image=busybox --rm -it --restart=Never -- wget -qO- test-pod-1\n\n# Check resource usage\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Verify RBAC\nkubectl auth can-i create deployments\nkubectl auth can-i get secrets --as=system:serviceaccount:default:default\n\n# Test persistent storage\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: test-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-storage-pod\nspec:\n  containers:\n  - name: app\n    image: busybox\n    command: [&#039;sh&#039;, &#039;-c&#039;, &#039;echo &quot;Storage test&quot; &gt; /data/test.txt &amp;&amp; cat /data/test.txt &amp;&amp; sleep 3600&#039;]\n    volumeMounts:\n    - name: storage\n      mountPath: /data\n  volumes:\n  - name: storage\n    persistentVolumeClaim:\n      claimName: test-pvc\nEOF\n\nkubectl logs test-storage-pod\nkubectl delete pod test-storage-pod\nkubectl delete pvc test-pvc</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-validation\" class=\"mobile-header\">Security Validation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run CIS Kubernetes Benchmark\ndocker run --rm -v $(pwd):/tmp aquasec/kube-bench:latest run --targets master,node,etcd,policies\n\n# Check pod security policies\nkubectl get psp  # For older versions\nkubectl get podsecuritypolicies  # For older versions\n\n# Verify network policies are working\nkubectl describe networkpolicy default-deny-all\n\n# Check for privileged containers\nkubectl get pods --all-namespaces -o jsonpath=&#039;{range .items[*]}{.metadata.name}{&quot;\\t&quot;}{.spec.securityContext.privileged}{&quot;\\n&quot;}{end}&#039; | grep true\n\n# Audit security contexts\nkubectl get pods --all-namespaces -o jsonpath=&#039;{range .items[*]}{.metadata.namespace}{&quot;\\t&quot;}{.metadata.name}{&quot;\\t&quot;}{.spec.securityContext}{&quot;\\n&quot;}{end}&#039;\n\n# Check for containers running as root\nkubectl get pods --all-namespaces -o jsonpath=&#039;{range .items[*]}{.metadata.name}{&quot;\\t&quot;}{.spec.containers[*].securityContext.runAsUser}{&quot;\\n&quot;}{end}&#039; | grep -E &#039;\\t0$|\\t$&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Node not ready issues\nkubectl describe node &lt;node-name&gt;\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Check kubelet logs\nsudo journalctl -u kubelet -f\n\n# Check container runtime\nsudo systemctl status containerd\nsudo crictl pods\n\n# Network issues\nkubectl get pods -n kube-system\nkubectl describe pod &lt;cni-pod-name&gt; -n kube-system\n\n# Permission issues (SELinux)\nsudo ausearch -m AVC -ts recent\nsudo setsebool -P container_manage_cgroup true\n\n# Certificate issues\nsudo kubeadm certs check-expiration\nopenssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout\n\n# Resource exhaustion\nkubectl describe node &lt;node-name&gt;\nkubectl top nodes\nkubectl top pods --all-namespaces --sort-by=memory\n\n# etcd issues\nsudo etcdctl endpoint health \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Reset cluster (if needed)\nsudo kubeadm reset\nsudo rm -rf /etc/cni/net.d\nsudo rm -rf $HOME/.kube/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-pod-issues\" class=\"mobile-header\">Debug Pod Issues</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug failing pods\nkubectl describe pod &lt;pod-name&gt;\nkubectl logs &lt;pod-name&gt; -c &lt;container-name&gt;\nkubectl get events --field-selector involvedObject.name=&lt;pod-name&gt;\n\n# Debug networking\nkubectl run debug-pod --image=nicolaka/netshoot --rm -it --restart=Never\n\n# Check resource constraints\nkubectl describe resourcequota -n &lt;namespace&gt;\nkubectl describe limitrange -n &lt;namespace&gt;\n\n# Debug storage issues\nkubectl describe pvc &lt;pvc-name&gt;\nkubectl get events --field-selector involvedObject.name=&lt;pvc-name&gt;\n\n# Debug service connectivity\nkubectl run debug --image=busybox --rm -it --restart=Never -- nslookup &lt;service-name&gt;\nkubectl get endpoints &lt;service-name&gt;\n\n# Debug ingress issues\nkubectl describe ingress &lt;ingress-name&gt;\nkubectl get events --field-selector involvedObject.name=&lt;ingress-name&gt;\nkubectl logs -n ingress-nginx deployment/ingress-nginx-controller</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/reference/kubectl/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">kubectl Reference</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/concepts/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.cisecurity.org/benchmark/kubernetes\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">CIS Kubernetes Benchmark</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Kubernetes_Security_Cheat_Sheet.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">OWASP Kubernetes Security Cheat Sheet</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"19 min","wordCount":3696,"lastBuilt":"2025-09-14T01:30:34.830Z"},{"name":"libvirt","displayName":"Libvirt","slug":"libvirt","description":"Repo for libvirt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/libvirt","updatedAt":"2025-09-08T03:10:30Z","createdAt":"2023-08-28T03:48:25Z","readmeRaw":"# libvirt setup\n\n## [Archlinux](./ArchLinux.md)  \n  \n","readmeHtml":"<h1 id=\"libvirt-setup\" class=\"mobile-header\">libvirt setup</h1>\n<h2 id=\"archlinuxarchlinuxmd\" class=\"mobile-header\">[Archlinux](./ArchLinux.md)  </h2>","readTime":"1 min","wordCount":6,"lastBuilt":"2025-09-14T01:30:44.325Z"},{"name":"mastodon","displayName":"Mastodon","slug":"mastodon","description":"Repo for mastodon","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mastodon","updatedAt":"2025-09-08T03:10:44Z","createdAt":"2023-08-28T03:48:35Z","readmeRaw":"## Mastodon Install guide\n\n```shell\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | bash -  \nwget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo  \nrpm -Uvh https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm  \n  \nwget https://github.com/CasjaysDev/packages/raw/main/rhel/mastodon.txt -O /tmp/mastodon.txt  \nyum install -y $(cat /tmp/mastodon.txt)  \n  \n/usr/pgsql-9.6/bin/postgresql96-setup initdb  \n  \nsystemctl start postgresql-9.6 redis  \nsystemctl enable postgresql-9.6 redis  \n  \nvim /var/lib/pgsql/9.6/data/pg_hba.conf  \n  \n# TYPE  DATABASE        USER            ADDRESS                 METHOD  \n  \n# \"local\" is for Unix domain socket connections only  \nlocal   all             all                                     trust  \n# IPv4 local connections:  \nhost    all             all             127.0.0.1/32            md5  \n# IPv6 local connections:  \nhost    all             all             ::1/128                 md5  \n  \nadduser mastodon  \nsu - mastodon  \ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB  \ncurl -sSL https://get.rvm.io | bash -s stable  \nsource /home/mastodon/.rvm/scripts/rvm  \nrvm install 2.5.1  \n  \ngem install bundler  \ncd ~  \ngit clone https://github.com/tootsuite/mastodon.git app  \ncd ~/app  \ngit checkout $(git describe --tags `git rev-list --tags --max-count=1`)  \nbundle config build.pg --with-pg-config=/usr/pgsql-9.6/bin/pg_config  \nbundle install --deployment --without development test  \nexit  \n  \npasswd postgres  \nsu - postgres -c psql  \nCREATE USER mastodon CREATEDB;  \nALTER USER mastodon WITH ENCRYPTED password 'YOURSECUREPASSWORD' CREATEDB;  \n\\q  \n  \nsu - mastodon  \ncd ~/app  \nRAILS_ENV=production bundle exec rake mastodon:setup  \n  \nsu -  \ngit clone https://github.com/casjay-base/howtos /tmp/howtos\ncp -Rfv /tmp/howtos/mastodon/{etc,usr}* /  \n  \nsystemctl daemon-reload  \nsystemctl enable mastodon-web mastodon-queue mastodon-api  \nsystemctl start mastodon-web mastodon-queue mastodon-api  \nsystemctl status mastodon-web mastodon-queue mastodon-api  \n```  \n","readmeHtml":"<h2 id=\"mastodon-install-guide\" class=\"mobile-header\">Mastodon Install guide</h2>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -  \nwget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo  \nrpm -Uvh https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm  \n  \nwget https://github.com/CasjaysDev/packages/raw/main/rhel/mastodon.txt -O /tmp/mastodon.txt  \nyum install -y $(cat /tmp/mastodon.txt)  \n  \n/usr/pgsql-9.6/bin/postgresql96-setup initdb  \n  \nsystemctl start postgresql-9.6 redis  \nsystemctl enable postgresql-9.6 redis  \n  \nvim /var/lib/pgsql/9.6/data/pg_hba.conf  \n  \n# TYPE  DATABASE        USER            ADDRESS                 METHOD  \n  \n# &quot;local&quot; is for Unix domain socket connections only  \nlocal   all             all                                     trust  \n# IPv4 local connections:  \nhost    all             all             127.0.0.1/32            md5  \n# IPv6 local connections:  \nhost    all             all             ::1/128                 md5  \n  \nadduser mastodon  \nsu - mastodon  \ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB  \ncurl -sSL https://get.rvm.io | bash -s stable  \nsource /home/mastodon/.rvm/scripts/rvm  \nrvm install 2.5.1  \n  \ngem install bundler  \ncd ~  \ngit clone https://github.com/tootsuite/mastodon.git app  \ncd ~/app  \ngit checkout $(git describe --tags `git rev-list --tags --max-count=1`)  \nbundle config build.pg --with-pg-config=/usr/pgsql-9.6/bin/pg_config  \nbundle install --deployment --without development test  \nexit  \n  \npasswd postgres  \nsu - postgres -c psql  \nCREATE USER mastodon CREATEDB;  \nALTER USER mastodon WITH ENCRYPTED password &#039;YOURSECUREPASSWORD&#039; CREATEDB;  \n\\q  \n  \nsu - mastodon  \ncd ~/app  \nRAILS_ENV=production bundle exec rake mastodon:setup  \n  \nsu -  \ngit clone https://github.com/casjay-base/howtos /tmp/howtos\ncp -Rfv /tmp/howtos/mastodon/{etc,usr}* /  \n  \nsystemctl daemon-reload  \nsystemctl enable mastodon-web mastodon-queue mastodon-api  \nsystemctl start mastodon-web mastodon-queue mastodon-api  \nsystemctl status mastodon-web mastodon-queue mastodon-api  </code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":190,"lastBuilt":"2025-09-14T01:30:44.146Z"},{"name":"mattermost","displayName":"Mattermost","slug":"mattermost","description":"Repo for mattermost","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mattermost","updatedAt":"2025-09-14T01:30:27Z","createdAt":"2023-08-28T03:48:46Z","readmeRaw":"# Mattermost Installation Guide\n\nOpen-source, self-hosted team communication platform with enterprise-grade security. Complete alternative to Slack with advanced features for secure collaboration, workflow automation, and integrated voice/video calling.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for production\n- PostgreSQL 11+ or MySQL 8.0+ database\n- NGINX reverse proxy (recommended for production)\n- Domain name and SSL certificate for HTTPS\n\n## Installation\n\n### Ubuntu/Debian (Recommended)\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Download latest Mattermost server\nMATTERMOST_VERSION=\"9.2.4\"  # Check for latest at https://mattermost.com/download\nwget https://releases.mattermost.com/${MATTERMOST_VERSION}/mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\n\n# Extract and install\ntar -xzf mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\nsudo mv mattermost /opt/\n\n# Create system user\nsudo useradd --system --user-group mattermost\nsudo chown -R mattermost:mattermost /opt/mattermost\n\n# Create data directory\nsudo mkdir -p /opt/mattermost/data\nsudo chown mattermost:mattermost /opt/mattermost/data\nsudo chmod 755 /opt/mattermost/data\n\n# Set proper permissions\nsudo find /opt/mattermost -type d -exec chmod 755 {} \\;\nsudo find /opt/mattermost -type f -exec chmod 644 {} \\;\nsudo chmod +x /opt/mattermost/bin/mattermost\n\n# Create log directory\nsudo mkdir -p /var/log/mattermost\nsudo chown mattermost:mattermost /var/log/mattermost\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install prerequisites\nsudo yum update -y\nsudo yum install -y wget tar\n\n# Download and install Mattermost\nMATTERMOST_VERSION=\"9.2.4\"\nwget https://releases.mattermost.com/${MATTERMOST_VERSION}/mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\ntar -xzf mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\nsudo mv mattermost /opt/\n\n# Create system user and directories\nsudo useradd --system --user-group mattermost\nsudo chown -R mattermost:mattermost /opt/mattermost\nsudo mkdir -p /opt/mattermost/data /var/log/mattermost\nsudo chown mattermost:mattermost /opt/mattermost/data /var/log/mattermost\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8065/tcp\nsudo firewall-cmd --reload\n```\n\n### Docker Installation (Production Ready)\n```bash\n# Create Mattermost directory structure\nmkdir -p ~/mattermost/{config,data,logs,plugins,client-plugins}\n\n# Create Docker Compose configuration\ncat > ~/mattermost/docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  postgres:\n    image: postgres:15-alpine\n    container_name: mattermost-postgres\n    restart: unless-stopped\n    environment:\n      - POSTGRES_DB=mattermost\n      - POSTGRES_USER=mattermost\n      - POSTGRES_PASSWORD=secure_postgres_password_2024\n      - POSTGRES_INITDB_ARGS=\"--encoding=UTF8 --lc-collate=C --lc-ctype=C\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./postgres-custom.conf:/etc/postgresql/postgresql.conf\n    networks:\n      - mattermost\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n      - /var/run/postgresql\n\n  mattermost:\n    image: mattermost/mattermost-enterprise-edition:latest\n    container_name: mattermost\n    restart: unless-stopped\n    depends_on:\n      - postgres\n    environment:\n      # Database settings\n      - MM_SQLSETTINGS_DRIVERNAME=postgres\n      - MM_SQLSETTINGS_DATASOURCE=postgres://mattermost:secure_postgres_password_2024@postgres:5432/mattermost?sslmode=disable&connect_timeout=10\n      \n      # Server settings\n      - MM_SERVICESETTINGS_SITEURL=https://mattermost.example.com\n      - MM_SERVICESETTINGS_LISTENADDRESS=:8000\n      - MM_SERVICESETTINGS_ENABLELINKPREVIEWS=true\n      - MM_SERVICESETTINGS_ENABLEDEVELOPER=false\n      - MM_SERVICESETTINGS_ENABLESECURITYFIXALERT=true\n      - MM_SERVICESETTINGS_ENABLEINSECUREOUTGOINGCONNECTIONS=false\n      \n      # File settings\n      - MM_FILESETTINGS_MAXFILESIZE=104857600  # 100MB\n      - MM_FILESETTINGS_DRIVERNAME=local\n      - MM_FILESETTINGS_DIRECTORY=/mattermost/data\n      \n      # Email settings (configure SMTP)\n      - MM_EMAILSETTINGS_ENABLESIGNUPWITHEMAIL=false\n      - MM_EMAILSETTINGS_ENABLESIGNINWITHEMAIL=true\n      - MM_EMAILSETTINGS_ENABLESIGNINWITHUSERNAME=true\n      - MM_EMAILSETTINGS_SMTPSERVER=smtp.example.com\n      - MM_EMAILSETTINGS_SMTPPORT=587\n      - MM_EMAILSETTINGS_SMTPUSERNAME=mattermost@example.com\n      - MM_EMAILSETTINGS_SMTPPASSWORD=smtp_secure_password\n      - MM_EMAILSETTINGS_ENABLESMTPAUTH=true\n      - MM_EMAILSETTINGS_CONNECTIONSECURITY=STARTTLS\n      \n      # Security settings\n      - MM_TEAMSETTINGS_ENABLEOPENSERVER=false\n      - MM_TEAMSETTINGS_ENABLEUSERCREATION=false\n      - MM_TEAMSETTINGS_RESTRICTCREATIONTODOMAIN=example.com\n      - MM_PASSWORDSETTINGS_MINIMUMLENGTH=12\n      - MM_PASSWORDSETTINGS_REQUIRELOWERCASE=true\n      - MM_PASSWORDSETTINGS_REQUIREUPPERCASE=true\n      - MM_PASSWORDSETTINGS_REQUIRENUMBER=true\n      - MM_PASSWORDSETTINGS_REQUIRESYMBOL=true\n      \n      # Session settings\n      - MM_SESSIONSETTINGS_SESSIONLENGTHWEBINHOURS=720  # 30 days\n      - MM_SESSIONSETTINGS_SESSIONLENGTHMOBILEINHOURS=720\n      - MM_SESSIONSETTINGS_ENABLEUSERACCESSTOKENS=false\n      \n      # Rate limiting\n      - MM_RATELIMITSETTINGS_ENABLE=true\n      - MM_RATELIMITSETTINGS_PERSEC=10\n      - MM_RATELIMITSETTINGS_MAXBURST=100\n      \n      # Privacy settings\n      - MM_PRIVACYSETTINGS_SHOWEMAILADDRESS=false\n      - MM_PRIVACYSETTINGS_SHOWFULLNAME=false\n      \n      # Logging\n      - MM_LOGSETTINGS_ENABLECONSOLE=true\n      - MM_LOGSETTINGS_CONSOLELEVEL=INFO\n      - MM_LOGSETTINGS_ENABLEFILE=true\n      - MM_LOGSETTINGS_FILELEVEL=INFO\n      - MM_LOGSETTINGS_FILELOCATION=/mattermost/logs/mattermost.log\n      \n    volumes:\n      - ./config:/mattermost/config:rw\n      - ./data:/mattermost/data:rw\n      - ./logs:/mattermost/logs:rw\n      - ./plugins:/mattermost/plugins:rw\n      - ./client-plugins:/mattermost/client/plugins:rw\n    ports:\n      - \"127.0.0.1:8065:8000\"  # Bind to localhost only\n    networks:\n      - mattermost\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n\nnetworks:\n  mattermost:\n    driver: bridge\n\nvolumes:\n  postgres_data:\nEOF\n\n# Start Mattermost stack\ncd ~/mattermost\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f mattermost\n```\n\n### Kubernetes Installation (Enterprise)\n```bash\n# Install Mattermost Operator\nkubectl create namespace mattermost-operator\n\n# Install via Helm\nhelm repo add mattermost https://helm.mattermost.com\nhelm repo update\n\nhelm install mattermost-operator mattermost/mattermost-operator \\\n  --namespace mattermost-operator \\\n  --set image.tag=v2.0.0\n\n# Create Mattermost cluster configuration\ncat > mattermost-cluster.yaml <<EOF\napiVersion: mattermost.com/v1alpha1\nkind: Mattermost\nmetadata:\n  name: mattermost\n  namespace: mattermost\nspec:\n  size: 1000users  # Adjust based on user count\n  ingressName: mattermost.example.com\n  version: v9.2.4\n  \n  database:\n    external:\n      url: \"postgres://mattermost:secure_password@postgres.example.com:5432/mattermost?sslmode=require\"\n  \n  fileStore:\n    external:\n      url: \"s3://mattermost-files\"\n      bucket: \"mattermost-files\"\n      region: \"us-west-2\"\n      \n  elasticSearch:\n    host: \"elasticsearch.example.com:9200\"\n    username: \"mattermost\"\n    password: \"elasticsearch_password\"\n    \n  blueGreen:\n    enable: true\n    productionDeployment: blue\n    \n  resourceRequests:\n    cpu: \"1000m\"\n    memory: \"2Gi\"\n    \n  resourceLimits:\n    cpu: \"2000m\" \n    memory: \"4Gi\"\n    \n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: app\n                operator: In\n                values:\n                  - mattermost\n          topologyKey: kubernetes.io/hostname\n          \n  livenessProbe:\n    httpGet:\n      path: /api/v4/system/ping\n      port: 8000\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    \n  readinessProbe:\n    httpGet:\n      path: /api/v4/system/ping\n      port: 8000\n    initialDelaySeconds: 15\n    periodSeconds: 5\nEOF\n\nkubectl apply -f mattermost-cluster.yaml\n```\n\n## Database Configuration\n\n### PostgreSQL Setup (Recommended)\n```bash\n# Install PostgreSQL 15\nsudo apt install -y postgresql-15 postgresql-client-15\n\n# Create Mattermost database and user\nsudo -u postgres psql <<EOF\nCREATE DATABASE mattermost WITH ENCODING 'UTF8' LC_COLLATE='en_US.UTF-8' LC_CTYPE='en_US.UTF-8' TEMPLATE=template0;\nCREATE USER mattermost WITH ENCRYPTED PASSWORD 'MattermostDBPassword2024!';\nGRANT ALL PRIVILEGES ON DATABASE mattermost TO mattermost;\n\n-- Performance optimization for Mattermost\nALTER SYSTEM SET shared_buffers = '1GB';\nALTER SYSTEM SET effective_cache_size = '3GB';\nALTER SYSTEM SET work_mem = '16MB';\nALTER SYSTEM SET maintenance_work_mem = '256MB';\nALTER SYSTEM SET checkpoint_completion_target = 0.9;\nALTER SYSTEM SET wal_buffers = '16MB';\nALTER SYSTEM SET random_page_cost = 1.1;\n\n-- Mattermost-specific settings\nALTER DATABASE mattermost SET default_text_search_config = 'pg_catalog.english';\n\nSELECT pg_reload_conf();\nEOF\n\n# Configure PostgreSQL for Mattermost\nsudo tee -a /etc/postgresql/15/main/postgresql.conf > /dev/null <<EOF\n\n# Mattermost optimizations\nmax_connections = 300\nshared_preload_libraries = 'pg_stat_statements'\ntrack_activity_query_size = 2048\npg_stat_statements.track = all\nEOF\n\nsudo systemctl restart postgresql\n```\n\n### MySQL 8.0 Setup (Alternative)\n```bash\n# Install MySQL 8.0\nsudo apt install -y mysql-server\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Create Mattermost database\nmysql -u root -p <<EOF\nCREATE DATABASE mattermost CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'mattermost'@'localhost' IDENTIFIED BY 'MattermostDBPassword2024!';\nGRANT ALL PRIVILEGES ON mattermost.* TO 'mattermost'@'localhost';\n\n-- MySQL optimization for Mattermost\nSET GLOBAL innodb_buffer_pool_size = 1073741824;  -- 1GB\nSET GLOBAL max_connections = 300;\nSET GLOBAL wait_timeout = 600;\nSET GLOBAL interactive_timeout = 600;\n\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Production Configuration\n\n### Mattermost Server Configuration\n```bash\n# Create production configuration\nsudo tee /opt/mattermost/config/config.json > /dev/null <<'EOF'\n{\n  \"ServiceSettings\": {\n    \"SiteURL\": \"https://mattermost.example.com\",\n    \"WebsocketURL\": \"\",\n    \"LicenseFileLocation\": \"\",\n    \"ListenAddress\": \":8065\",\n    \"ConnectionSecurity\": \"\",\n    \"TLSCertFile\": \"\",\n    \"TLSKeyFile\": \"\",\n    \"TLSMinVer\": \"1.2\",\n    \"TLSStrictTransport\": false,\n    \"TLSStrictTransportMaxAge\": 63072000,\n    \"TLSOverwriteCiphers\": [],\n    \"UseLetsEncrypt\": false,\n    \"LetsEncryptCertificateCacheFile\": \"./config/letsencrypt.cache\",\n    \"Forward80To443\": false,\n    \"ReadTimeout\": 300,\n    \"WriteTimeout\": 300,\n    \"IdleTimeout\": 60,\n    \"MaximumLoginAttempts\": 10,\n    \"GoroutineHealthThreshold\": -1,\n    \"GoogleDeveloperKey\": \"\",\n    \"EnableBotAccountCreation\": false,\n    \"EnableUserAccessTokens\": false,\n    \"EnableLinkPreviews\": false,\n    \"EnableTesting\": false,\n    \"EnableDeveloper\": false,\n    \"EnableOpenTracing\": false,\n    \"EnableSecurityFixAlert\": true,\n    \"EnableInsecureOutgoingConnections\": false,\n    \"AllowedUntrustedInternalConnections\": \"\",\n    \"EnablePostSearch\": true,\n    \"EnableUserStatuses\": true,\n    \"ExperimentalEnableAuthenticationTransfer\": true,\n    \"ClusterLogTimeoutMilliseconds\": 2000,\n    \"CloseUnusedDirectMessages\": false,\n    \"EnablePreviewFeatures\": true,\n    \"EnableTutorial\": true,\n    \"ExperimentalEnableDefaultChannelLeaveJoinMessages\": true,\n    \"ExperimentalGroupUnreadChannels\": \"disabled\",\n    \"ExperimentalChannelOrganization\": false,\n    \"EnableAPITeamDeletion\": false,\n    \"ExperimentalEnableHardenedMode\": false,\n    \"DisableLegacyMFA\": true,\n    \"ExperimentalStrictCSRFEnforcement\": false,\n    \"EnableEmailInvitations\": false,\n    \"DisableBotsWhenOwnerIsDeactivated\": true,\n    \"EnableBotAccountCreation\": false,\n    \"EnableSVGs\": false,\n    \"EnableLatex\": false,\n    \"EnableLocalMode\": false,\n    \"LocalModeSocketLocation\": \"/var/tmp/mattermost_local.socket\",\n    \"EnableAWSMetering\": false,\n    \"SplitKey\": \"\",\n    \"FeatureFlagSyncIntervalSeconds\": 30,\n    \"DebugSplit\": false,\n    \"ThreadAutoFollow\": true,\n    \"ManagedResourcePaths\": \"\",\n    \"EnableLegacySidebar\": false,\n    \"CollapsedThreads\": \"default_off\"\n  },\n  \n  \"TeamSettings\": {\n    \"SiteName\": \"Mattermost\",\n    \"MaxUsersPerTeam\": 50000,\n    \"EnableTeamCreation\": false,\n    \"EnableUserCreation\": false,\n    \"EnableOpenServer\": false,\n    \"EnableUserDeactivation\": true,\n    \"RestrictCreationToDomains\": \"example.com\",\n    \"EnableCustomBrand\": false,\n    \"CustomBrandText\": \"\",\n    \"CustomDescriptionText\": \"\",\n    \"RestrictDirectMessage\": \"any\",\n    \"RestrictTeamInvite\": \"all\",\n    \"RestrictPublicChannelManagement\": \"all\",\n    \"RestrictPrivateChannelManagement\": \"all\",\n    \"RestrictPublicChannelCreation\": \"all\",\n    \"RestrictPrivateChannelCreation\": \"all\",\n    \"RestrictPublicChannelDeletion\": \"all\",\n    \"RestrictPrivateChannelDeletion\": \"all\",\n    \"RestrictPrivateChannelManageMembers\": \"all\",\n    \"EnableXToLeaveChannelsFromLHS\": false,\n    \"UserStatusAwayTimeout\": 300,\n    \"MaxChannelsPerTeam\": 50000,\n    \"MaxNotificationsPerChannel\": 1000000,\n    \"EnableConfirmNotificationsToChannel\": true,\n    \"TeammateNameDisplay\": \"username\",\n    \"ExperimentalViewArchivedChannels\": false,\n    \"ExperimentalEnableAutomaticReplies\": false,\n    \"ExperimentalHideTownSquareinLHS\": false,\n    \"ExperimentalTownSquareIsReadOnly\": false,\n    \"LockTeammateNameDisplay\": false,\n    \"ExperimentalPrimaryTeam\": \"\",\n    \"ExperimentalDefaultChannels\": []\n  },\n  \n  \"SqlSettings\": {\n    \"DriverName\": \"postgres\",\n    \"DataSource\": \"postgres://mattermost:MattermostDBPassword2024!@localhost:5432/mattermost?sslmode=disable&connect_timeout=10\",\n    \"DataSourceReplicas\": [],\n    \"DataSourceSearchReplicas\": [],\n    \"MaxIdleConns\": 20,\n    \"ConnMaxLifetimeMilliseconds\": 3600000,\n    \"ConnMaxIdleTimeMilliseconds\": 300000,\n    \"MaxOpenConns\": 300,\n    \"Trace\": false,\n    \"AtRestEncryptKey\": \"\",\n    \"QueryTimeout\": 30,\n    \"DisableDatabaseSearch\": false\n  },\n  \n  \"LogSettings\": {\n    \"EnableConsole\": true,\n    \"ConsoleLevel\": \"INFO\",\n    \"ConsoleJson\": true,\n    \"EnableFile\": true,\n    \"FileLevel\": \"INFO\",\n    \"FileJson\": true,\n    \"FileLocation\": \"/mattermost/logs/mattermost.log\",\n    \"EnableWebhookDebugging\": true,\n    \"EnableDiagnostics\": false,\n    \"EnableSentry\": false,\n    \"AdvancedLoggingConfig\": \"\"\n  },\n  \n  \"PasswordSettings\": {\n    \"MinimumLength\": 12,\n    \"Lowercase\": true,\n    \"Number\": true,\n    \"Uppercase\": true,\n    \"Symbol\": true\n  },\n  \n  \"FileSettings\": {\n    \"EnableFileAttachments\": true,\n    \"EnableMobileUpload\": true,\n    \"EnableMobileDownload\": true,\n    \"MaxFileSize\": 104857600,\n    \"DriverName\": \"local\",\n    \"Directory\": \"/opt/mattermost/data/\",\n    \"EnablePublicLink\": false,\n    \"ExtractContent\": true,\n    \"ArchiveRecursion\": false,\n    \"PublicLinkSalt\": \"\",\n    \"InitialFont\": \"nunito-bold.ttf\",\n    \"AmazonS3AccessKeyId\": \"\",\n    \"AmazonS3SecretAccessKey\": \"\",\n    \"AmazonS3Bucket\": \"\",\n    \"AmazonS3PathPrefix\": \"\",\n    \"AmazonS3Region\": \"\",\n    \"AmazonS3Endpoint\": \"\",\n    \"AmazonS3SSL\": true,\n    \"AmazonS3SignV2\": false,\n    \"AmazonS3SSE\": false,\n    \"AmazonS3Trace\": false\n  },\n  \n  \"EmailSettings\": {\n    \"EnableSignUpWithEmail\": false,\n    \"EnableSignInWithEmail\": true,\n    \"EnableSignInWithUsername\": true,\n    \"SendEmailNotifications\": true,\n    \"UseChannelInEmailNotifications\": false,\n    \"RequireEmailVerification\": true,\n    \"FeedbackName\": \"Mattermost\",\n    \"FeedbackEmail\": \"mattermost@example.com\",\n    \"ReplyToAddress\": \"mattermost@example.com\",\n    \"FeedbackOrganization\": \"\",\n    \"EnableSMTPAuth\": true,\n    \"SMTPUsername\": \"mattermost@example.com\",\n    \"SMTPPassword\": \"smtp_secure_password\",\n    \"SMTPServer\": \"smtp.example.com\",\n    \"SMTPPort\": \"587\",\n    \"SMTPServerTimeout\": 10,\n    \"ConnectionSecurity\": \"STARTTLS\",\n    \"SendPushNotifications\": true,\n    \"PushNotificationServer\": \"https://push.mattermost.com\",\n    \"PushNotificationContents\": \"generic\",\n    \"PushNotificationBuffer\": 1000\n  },\n  \n  \"RateLimitSettings\": {\n    \"Enable\": true,\n    \"PerSec\": 10,\n    \"MaxBurst\": 100,\n    \"MemoryStoreSize\": 10000,\n    \"VaryByRemoteAddr\": true,\n    \"VaryByUser\": false,\n    \"VaryByHeader\": \"\"\n  },\n  \n  \"PrivacySettings\": {\n    \"ShowEmailAddress\": false,\n    \"ShowFullName\": false\n  },\n  \n  \"SupportSettings\": {\n    \"TermsOfServiceLink\": \"https://mattermost.org/terms-of-service/\",\n    \"PrivacyPolicyLink\": \"https://mattermost.org/privacy-policy/\",\n    \"AboutLink\": \"https://about.mattermost.com/default-about/\",\n    \"HelpLink\": \"https://about.mattermost.com/default-help/\",\n    \"ReportAProblemLink\": \"https://about.mattermost.com/default-report-a-problem/\",\n    \"SupportEmail\": \"feedback@mattermost.com\",\n    \"CustomTermsOfServiceEnabled\": false,\n    \"CustomTermsOfServiceReAcceptancePeriod\": 365,\n    \"EnableAskCommunityLink\": true\n  },\n  \n  \"AnnouncementSettings\": {\n    \"EnableBanner\": false,\n    \"BannerText\": \"\",\n    \"BannerColor\": \"#f2a93b\",\n    \"BannerTextColor\": \"#333333\",\n    \"AllowBannerDismissal\": true\n  },\n  \n  \"ThemeSettings\": {\n    \"EnableThemeSelection\": true,\n    \"DefaultTheme\": \"default\",\n    \"AllowCustomThemes\": true,\n    \"AllowedThemes\": []\n  },\n  \n  \"GitLabSettings\": {\n    \"Enable\": false,\n    \"Secret\": \"\",\n    \"Id\": \"\",\n    \"Scope\": \"\",\n    \"AuthEndpoint\": \"\",\n    \"TokenEndpoint\": \"\",\n    \"UserApiEndpoint\": \"\"\n  },\n  \n  \"GoogleSettings\": {\n    \"Enable\": false,\n    \"Secret\": \"\",\n    \"Id\": \"\",\n    \"Scope\": \"profile email\",\n    \"AuthEndpoint\": \"https://accounts.google.com/o/oauth2/v2/auth\",\n    \"TokenEndpoint\": \"https://www.googleapis.com/oauth2/v4/token\",\n    \"UserApiEndpoint\": \"https://people.googleapis.com/v1/people/me?personFields=names%2CemailAddresses%2Cnicknames%2Cmetadata\"\n  },\n  \n  \"Office365Settings\": {\n    \"Enable\": false,\n    \"Secret\": \"\",\n    \"Id\": \"\",\n    \"Scope\": \"User.Read\",\n    \"AuthEndpoint\": \"https://login.microsoftonline.com/common/oauth2/v2.0/authorize\",\n    \"TokenEndpoint\": \"https://login.microsoftonline.com/common/oauth2/v2.0/token\",\n    \"UserApiEndpoint\": \"https://graph.microsoft.com/v1.0/me\",\n    \"Directory\": \"\"\n  },\n  \n  \"LdapSettings\": {\n    \"Enable\": false,\n    \"EnableSync\": false,\n    \"LdapServer\": \"ldap.example.com\",\n    \"LdapPort\": 636,\n    \"ConnectionSecurity\": \"TLS\",\n    \"BaseDN\": \"DC=example,DC=com\",\n    \"BindUsername\": \"CN=mattermost,OU=Service Accounts,DC=example,DC=com\",\n    \"BindPassword\": \"ldap_service_password\",\n    \"UserFilter\": \"\",\n    \"GroupFilter\": \"\",\n    \"GuestFilter\": \"\",\n    \"EnableAdminFilter\": true,\n    \"AdminFilter\": \"(memberOf=CN=Mattermost Admins,OU=Groups,DC=example,DC=com)\",\n    \"GroupDisplayNameAttribute\": \"cn\",\n    \"GroupIdAttribute\": \"cn\",\n    \"FirstNameAttribute\": \"givenName\",\n    \"LastNameAttribute\": \"sn\",\n    \"EmailAttribute\": \"mail\",\n    \"UsernameAttribute\": \"sAMAccountName\",\n    \"NicknameAttribute\": \"\",\n    \"IdAttribute\": \"objectGUID\",\n    \"PositionAttribute\": \"title\",\n    \"LoginIdAttribute\": \"sAMAccountName\",\n    \"PictureAttribute\": \"\",\n    \"SyncIntervalMinutes\": 60,\n    \"SkipCertificateVerification\": false,\n    \"PublicCertificateFile\": \"\",\n    \"PrivateKeyFile\": \"\",\n    \"QueryTimeout\": 60,\n    \"MaxPageSize\": 0,\n    \"LoginFieldName\": \"\",\n    \"LoginButtonColor\": \"#0000\",\n    \"LoginButtonBorderColor\": \"#2389D7\",\n    \"LoginButtonTextColor\": \"#2389D7\"\n  }\n}\nEOF\n\nsudo chown mattermost:mattermost /opt/mattermost/config/config.json\nsudo chmod 600 /opt/mattermost/config/config.json\n```\n\n### SystemD Service Configuration\n```bash\n# Create secure systemd service\nsudo tee /etc/systemd/system/mattermost.service > /dev/null <<EOF\n[Unit]\nDescription=Mattermost Team Communication Service\nAfter=network.target postgresql.service mysql.service\nWants=network.target\n\n[Service]\nType=notify\nUser=mattermost\nGroup=mattermost\nExecStart=/opt/mattermost/bin/mattermost\nWorkingDirectory=/opt/mattermost\nLimitNOFILE=49152\nRestart=always\nRestartSec=10\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nPrivateDevices=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/opt/mattermost/data /opt/mattermost/logs /opt/mattermost/config /opt/mattermost/plugins\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\n\n# Resource limits\nMemoryMax=4G\nCPUQuota=200%\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now mattermost\n\n# Verify service status\nsudo systemctl status mattermost\n```\n\n## Security Hardening\n\n### NGINX Reverse Proxy with Security\n```bash\n# Create secure NGINX configuration\nsudo tee /etc/nginx/sites-available/mattermost > /dev/null <<EOF\n# Mattermost NGINX Configuration with Security Headers\n\nupstream mattermost {\n    server 127.0.0.1:8065;\n    keepalive 64;\n}\n\nproxy_cache_path /var/cache/nginx/mattermost levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off;\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name mattermost.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name mattermost.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/mattermost.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/mattermost.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets off;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header Content-Security-Policy \"frame-ancestors 'none'\" always;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=mattermost_ratelimit:10m rate=10r/s;\n    limit_req zone=mattermost_ratelimit burst=20 nodelay;\n\n    # Max upload size for file attachments\n    client_max_body_size 50M;\n\n    location ~ /api/v[0-9]+/(users/)?websocket\\$ {\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        client_max_body_size 50M;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        client_body_timeout 60;\n        send_timeout 300;\n        lingering_timeout 5;\n        proxy_connect_timeout 90;\n        proxy_send_timeout 300;\n        proxy_read_timeout 90s;\n        proxy_pass http://mattermost;\n    }\n\n    location / {\n        client_max_body_size 50M;\n        proxy_set_header Connection \"\";\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        proxy_read_timeout 600s;\n        proxy_cache mattermost_cache;\n        proxy_cache_revalidate on;\n        proxy_cache_min_uses 2;\n        proxy_cache_use_stale timeout;\n        proxy_cache_lock on;\n        proxy_http_version 1.1;\n        proxy_pass http://mattermost;\n    }\n}\nEOF\n\n# Enable site and install SSL\nsudo ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/\nsudo certbot --nginx -d mattermost.example.com\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n### Advanced Security Configuration\n```bash\n# Configure fail2ban for Mattermost\nsudo tee /etc/fail2ban/filter.d/mattermost.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^.*\"level\":\"error\".*\"msg\":\"Invalid login attempt\".*\"user_id\":\"[^\"]*\".*\"ip\":\"<HOST>\"\nignoreregex =\nEOF\n\nsudo tee /etc/fail2ban/jail.d/mattermost.conf > /dev/null <<EOF\n[mattermost]\nenabled = true\nport = http,https\nfilter = mattermost\nlogpath = /opt/mattermost/logs/mattermost.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\naction = iptables-multiport[name=Mattermost, port=\"http,https\", protocol=tcp]\nEOF\n\nsudo systemctl restart fail2ban\n```\n\n## Backup and Monitoring\n\n### Backup Strategy\n```bash\nsudo tee /usr/local/bin/mattermost-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/mattermost\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,config,data,plugins}\n\necho \"Starting Mattermost backup...\"\n\n# Stop Mattermost service\nsystemctl stop mattermost\n\n# Backup database\nsudo -u postgres pg_dump mattermost > ${BACKUP_DIR}/database/mattermost-${DATE}.sql\ngzip ${BACKUP_DIR}/database/mattermost-${DATE}.sql\n\n# Backup configuration\ncp /opt/mattermost/config/config.json ${BACKUP_DIR}/config/config-${DATE}.json\n\n# Backup user data and files\ntar -czf ${BACKUP_DIR}/data/mattermost-data-${DATE}.tar.gz -C /opt/mattermost data/\n\n# Backup plugins\nif [ -d \"/opt/mattermost/plugins\" ]; then\n    tar -czf ${BACKUP_DIR}/plugins/mattermost-plugins-${DATE}.tar.gz -C /opt/mattermost plugins/\nfi\n\n# Start Mattermost\nsystemctl start mattermost\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://mattermost-backups/ --recursive\ngsutil cp -r ${BACKUP_DIR}/* gs://mattermost-backups/\n\n# Keep last 7 backups\nfind ${BACKUP_DIR} -name \"mattermost-*\" -type f -mtime +7 -delete\n\necho \"Mattermost backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/mattermost-backup.sh\necho \"0 2 * * * root /usr/local/bin/mattermost-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Health Monitoring\n```bash\nsudo tee /usr/local/bin/mattermost-health.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/mattermost-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active mattermost >/dev/null 2>&1; then\n    log_message \"✓ Mattermost service is running\"\nelse\n    log_message \"✗ Mattermost service is not running\"\n    exit 1\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8065/api/v4/system/ping)\nif [ \"${HTTP_STATUS}\" = \"200\" ]; then\n    log_message \"✓ Mattermost API is responding\"\nelse\n    log_message \"✗ Mattermost API issues (HTTP ${HTTP_STATUS})\"\nfi\n\n# Check database connectivity\nDB_STATUS=$(curl -s http://localhost:8065/api/v4/database/ping | jq -r '.database_status' 2>/dev/null)\nif [ \"$DB_STATUS\" = \"OK\" ]; then\n    log_message \"✓ Database connection healthy\"\nelse\n    log_message \"⚠ Database connection issues\"\nfi\n\n# Check disk space\nDISK_USAGE=$(df /opt/mattermost | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message \"⚠ High disk usage: ${DISK_USAGE}%\"\nelse\n    log_message \"✓ Disk usage: ${DISK_USAGE}%\"\nfi\n\nlog_message \"Mattermost health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/mattermost-health.sh\necho \"*/15 * * * * root /usr/local/bin/mattermost-health.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check Mattermost service status\nsudo systemctl status mattermost\nsudo journalctl -u mattermost -f\n\n# Check Mattermost logs\nsudo tail -f /opt/mattermost/logs/mattermost.log\n\n# Test API connectivity\ncurl -i http://localhost:8065/api/v4/system/ping\n\n# Check database connection\nsudo -u postgres psql mattermost -c \"SELECT version();\"\n\n# Check file permissions\nls -la /opt/mattermost/\nsudo chown -R mattermost:mattermost /opt/mattermost\n\n# Memory usage\nps aux --sort=-%mem | grep mattermost\npmap -x $(pgrep mattermost)\n\n# Network connectivity\nss -tulpn | grep 8065\nnetstat -tulpn | grep mattermost\n\n# Configuration validation\n/opt/mattermost/bin/mattermost config validate\n\n# Reset admin password (CLI)\nsudo -u mattermost /opt/mattermost/bin/mattermost user password admin new_password\n\n# Check plugin status\nsudo -u mattermost /opt/mattermost/bin/mattermost plugin list\n\n# Database migration (if needed)\nsudo -u mattermost /opt/mattermost/bin/mattermost db migrate\n\n# Clear cache\nsudo rm -rf /opt/mattermost/data/cache/*\nsudo systemctl restart mattermost\n```\n\n## Additional Resources\n\n- [Mattermost Documentation](https://docs.mattermost.com/)\n- [Installation Guide](https://docs.mattermost.com/guides/deployment.html)\n- [Security Guide](https://docs.mattermost.com/overview/security.html)\n- [Admin Guide](https://docs.mattermost.com/guides/administration.html)\n- [Mattermost Community](https://community.mattermost.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"mattermost-installation-guide\" class=\"mobile-header\">Mattermost Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source, self-hosted team communication platform with enterprise-grade security. Complete alternative to Slack with advanced features for secure collaboration, workflow automation, and integrated voice/video calling.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for production</li>\n<li class=\"mobile-list-item\">PostgreSQL 11+ or MySQL 8.0+ database</li>\n<li class=\"mobile-list-item\">NGINX reverse proxy (recommended for production)</li>\n<li class=\"mobile-list-item\">Domain name and SSL certificate for HTTPS</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian-recommended\" class=\"mobile-header\">Ubuntu/Debian (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Download latest Mattermost server\nMATTERMOST_VERSION=&quot;9.2.4&quot;  # Check for latest at https://mattermost.com/download\nwget https://releases.mattermost.com/${MATTERMOST_VERSION}/mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\n\n# Extract and install\ntar -xzf mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\nsudo mv mattermost /opt/\n\n# Create system user\nsudo useradd --system --user-group mattermost\nsudo chown -R mattermost:mattermost /opt/mattermost\n\n# Create data directory\nsudo mkdir -p /opt/mattermost/data\nsudo chown mattermost:mattermost /opt/mattermost/data\nsudo chmod 755 /opt/mattermost/data\n\n# Set proper permissions\nsudo find /opt/mattermost -type d -exec chmod 755 {} \\;\nsudo find /opt/mattermost -type f -exec chmod 644 {} \\;\nsudo chmod +x /opt/mattermost/bin/mattermost\n\n# Create log directory\nsudo mkdir -p /var/log/mattermost\nsudo chown mattermost:mattermost /var/log/mattermost</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install prerequisites\nsudo yum update -y\nsudo yum install -y wget tar\n\n# Download and install Mattermost\nMATTERMOST_VERSION=&quot;9.2.4&quot;\nwget https://releases.mattermost.com/${MATTERMOST_VERSION}/mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\ntar -xzf mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\nsudo mv mattermost /opt/\n\n# Create system user and directories\nsudo useradd --system --user-group mattermost\nsudo chown -R mattermost:mattermost /opt/mattermost\nsudo mkdir -p /opt/mattermost/data /var/log/mattermost\nsudo chown mattermost:mattermost /opt/mattermost/data /var/log/mattermost\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8065/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation-production-ready\" class=\"mobile-header\">Docker Installation (Production Ready)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Mattermost directory structure\nmkdir -p ~/mattermost/{config,data,logs,plugins,client-plugins}\n\n# Create Docker Compose configuration\ncat &gt; ~/mattermost/docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  postgres:\n    image: postgres:15-alpine\n    container_name: mattermost-postgres\n    restart: unless-stopped\n    environment:\n      - POSTGRES_DB=mattermost\n      - POSTGRES_USER=mattermost\n      - POSTGRES_PASSWORD=secure_postgres_password_2024\n      - POSTGRES_INITDB_ARGS=&quot;--encoding=UTF8 --lc-collate=C --lc-ctype=C&quot;\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./postgres-custom.conf:/etc/postgresql/postgresql.conf\n    networks:\n      - mattermost\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n      - /var/run/postgresql\n\n  mattermost:\n    image: mattermost/mattermost-enterprise-edition:latest\n    container_name: mattermost\n    restart: unless-stopped\n    depends_on:\n      - postgres\n    environment:\n      # Database settings\n      - MM_SQLSETTINGS_DRIVERNAME=postgres\n      - MM_SQLSETTINGS_DATASOURCE=postgres://mattermost:secure_postgres_password_2024@postgres:5432/mattermost?sslmode=disable&amp;connect_timeout=10\n      \n      # Server settings\n      - MM_SERVICESETTINGS_SITEURL=https://mattermost.example.com\n      - MM_SERVICESETTINGS_LISTENADDRESS=:8000\n      - MM_SERVICESETTINGS_ENABLELINKPREVIEWS=true\n      - MM_SERVICESETTINGS_ENABLEDEVELOPER=false\n      - MM_SERVICESETTINGS_ENABLESECURITYFIXALERT=true\n      - MM_SERVICESETTINGS_ENABLEINSECUREOUTGOINGCONNECTIONS=false\n      \n      # File settings\n      - MM_FILESETTINGS_MAXFILESIZE=104857600  # 100MB\n      - MM_FILESETTINGS_DRIVERNAME=local\n      - MM_FILESETTINGS_DIRECTORY=/mattermost/data\n      \n      # Email settings (configure SMTP)\n      - MM_EMAILSETTINGS_ENABLESIGNUPWITHEMAIL=false\n      - MM_EMAILSETTINGS_ENABLESIGNINWITHEMAIL=true\n      - MM_EMAILSETTINGS_ENABLESIGNINWITHUSERNAME=true\n      - MM_EMAILSETTINGS_SMTPSERVER=smtp.example.com\n      - MM_EMAILSETTINGS_SMTPPORT=587\n      - MM_EMAILSETTINGS_SMTPUSERNAME=mattermost@example.com\n      - MM_EMAILSETTINGS_SMTPPASSWORD=smtp_secure_password\n      - MM_EMAILSETTINGS_ENABLESMTPAUTH=true\n      - MM_EMAILSETTINGS_CONNECTIONSECURITY=STARTTLS\n      \n      # Security settings\n      - MM_TEAMSETTINGS_ENABLEOPENSERVER=false\n      - MM_TEAMSETTINGS_ENABLEUSERCREATION=false\n      - MM_TEAMSETTINGS_RESTRICTCREATIONTODOMAIN=example.com\n      - MM_PASSWORDSETTINGS_MINIMUMLENGTH=12\n      - MM_PASSWORDSETTINGS_REQUIRELOWERCASE=true\n      - MM_PASSWORDSETTINGS_REQUIREUPPERCASE=true\n      - MM_PASSWORDSETTINGS_REQUIRENUMBER=true\n      - MM_PASSWORDSETTINGS_REQUIRESYMBOL=true\n      \n      # Session settings\n      - MM_SESSIONSETTINGS_SESSIONLENGTHWEBINHOURS=720  # 30 days\n      - MM_SESSIONSETTINGS_SESSIONLENGTHMOBILEINHOURS=720\n      - MM_SESSIONSETTINGS_ENABLEUSERACCESSTOKENS=false\n      \n      # Rate limiting\n      - MM_RATELIMITSETTINGS_ENABLE=true\n      - MM_RATELIMITSETTINGS_PERSEC=10\n      - MM_RATELIMITSETTINGS_MAXBURST=100\n      \n      # Privacy settings\n      - MM_PRIVACYSETTINGS_SHOWEMAILADDRESS=false\n      - MM_PRIVACYSETTINGS_SHOWFULLNAME=false\n      \n      # Logging\n      - MM_LOGSETTINGS_ENABLECONSOLE=true\n      - MM_LOGSETTINGS_CONSOLELEVEL=INFO\n      - MM_LOGSETTINGS_ENABLEFILE=true\n      - MM_LOGSETTINGS_FILELEVEL=INFO\n      - MM_LOGSETTINGS_FILELOCATION=/mattermost/logs/mattermost.log\n      \n    volumes:\n      - ./config:/mattermost/config:rw\n      - ./data:/mattermost/data:rw\n      - ./logs:/mattermost/logs:rw\n      - ./plugins:/mattermost/plugins:rw\n      - ./client-plugins:/mattermost/client/plugins:rw\n    ports:\n      - &quot;127.0.0.1:8065:8000&quot;  # Bind to localhost only\n    networks:\n      - mattermost\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n\nnetworks:\n  mattermost:\n    driver: bridge\n\nvolumes:\n  postgres_data:\nEOF\n\n# Start Mattermost stack\ncd ~/mattermost\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f mattermost</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-installation-enterprise\" class=\"mobile-header\">Kubernetes Installation (Enterprise)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Mattermost Operator\nkubectl create namespace mattermost-operator\n\n# Install via Helm\nhelm repo add mattermost https://helm.mattermost.com\nhelm repo update\n\nhelm install mattermost-operator mattermost/mattermost-operator \\\n  --namespace mattermost-operator \\\n  --set image.tag=v2.0.0\n\n# Create Mattermost cluster configuration\ncat &gt; mattermost-cluster.yaml &lt;&lt;EOF\napiVersion: mattermost.com/v1alpha1\nkind: Mattermost\nmetadata:\n  name: mattermost\n  namespace: mattermost\nspec:\n  size: 1000users  # Adjust based on user count\n  ingressName: mattermost.example.com\n  version: v9.2.4\n  \n  database:\n    external:\n      url: &quot;postgres://mattermost:secure_password@postgres.example.com:5432/mattermost?sslmode=require&quot;\n  \n  fileStore:\n    external:\n      url: &quot;s3://mattermost-files&quot;\n      bucket: &quot;mattermost-files&quot;\n      region: &quot;us-west-2&quot;\n      \n  elasticSearch:\n    host: &quot;elasticsearch.example.com:9200&quot;\n    username: &quot;mattermost&quot;\n    password: &quot;elasticsearch_password&quot;\n    \n  blueGreen:\n    enable: true\n    productionDeployment: blue\n    \n  resourceRequests:\n    cpu: &quot;1000m&quot;\n    memory: &quot;2Gi&quot;\n    \n  resourceLimits:\n    cpu: &quot;2000m&quot; \n    memory: &quot;4Gi&quot;\n    \n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: app\n                operator: In\n                values:\n                  - mattermost\n          topologyKey: kubernetes.io/hostname\n          \n  livenessProbe:\n    httpGet:\n      path: /api/v4/system/ping\n      port: 8000\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    \n  readinessProbe:\n    httpGet:\n      path: /api/v4/system/ping\n      port: 8000\n    initialDelaySeconds: 15\n    periodSeconds: 5\nEOF\n\nkubectl apply -f mattermost-cluster.yaml</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-configuration\" class=\"mobile-header\">Database Configuration</h2>\n<h3 id=\"postgresql-setup-recommended\" class=\"mobile-header\">PostgreSQL Setup (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL 15\nsudo apt install -y postgresql-15 postgresql-client-15\n\n# Create Mattermost database and user\nsudo -u postgres psql &lt;&lt;EOF\nCREATE DATABASE mattermost WITH ENCODING &#039;UTF8&#039; LC_COLLATE=&#039;en_US.UTF-8&#039; LC_CTYPE=&#039;en_US.UTF-8&#039; TEMPLATE=template0;\nCREATE USER mattermost WITH ENCRYPTED PASSWORD &#039;MattermostDBPassword2024!&#039;;\nGRANT ALL PRIVILEGES ON DATABASE mattermost TO mattermost;\n\n-- Performance optimization for Mattermost\nALTER SYSTEM SET shared_buffers = &#039;1GB&#039;;\nALTER SYSTEM SET effective_cache_size = &#039;3GB&#039;;\nALTER SYSTEM SET work_mem = &#039;16MB&#039;;\nALTER SYSTEM SET maintenance_work_mem = &#039;256MB&#039;;\nALTER SYSTEM SET checkpoint_completion_target = 0.9;\nALTER SYSTEM SET wal_buffers = &#039;16MB&#039;;\nALTER SYSTEM SET random_page_cost = 1.1;\n\n-- Mattermost-specific settings\nALTER DATABASE mattermost SET default_text_search_config = &#039;pg_catalog.english&#039;;\n\nSELECT pg_reload_conf();\nEOF\n\n# Configure PostgreSQL for Mattermost\nsudo tee -a /etc/postgresql/15/main/postgresql.conf &gt; /dev/null &lt;&lt;EOF\n\n# Mattermost optimizations\nmax_connections = 300\nshared_preload_libraries = &#039;pg_stat_statements&#039;\ntrack_activity_query_size = 2048\npg_stat_statements.track = all\nEOF\n\nsudo systemctl restart postgresql</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-80-setup-alternative\" class=\"mobile-header\">MySQL 8.0 Setup (Alternative)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MySQL 8.0\nsudo apt install -y mysql-server\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Create Mattermost database\nmysql -u root -p &lt;&lt;EOF\nCREATE DATABASE mattermost CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;mattermost&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;MattermostDBPassword2024!&#039;;\nGRANT ALL PRIVILEGES ON mattermost.* TO &#039;mattermost&#039;@&#039;localhost&#039;;\n\n-- MySQL optimization for Mattermost\nSET GLOBAL innodb_buffer_pool_size = 1073741824;  -- 1GB\nSET GLOBAL max_connections = 300;\nSET GLOBAL wait_timeout = 600;\nSET GLOBAL interactive_timeout = 600;\n\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"production-configuration\" class=\"mobile-header\">Production Configuration</h2>\n<h3 id=\"mattermost-server-configuration\" class=\"mobile-header\">Mattermost Server Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production configuration\nsudo tee /opt/mattermost/config/config.json &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n{\n  &quot;ServiceSettings&quot;: {\n    &quot;SiteURL&quot;: &quot;https://mattermost.example.com&quot;,\n    &quot;WebsocketURL&quot;: &quot;&quot;,\n    &quot;LicenseFileLocation&quot;: &quot;&quot;,\n    &quot;ListenAddress&quot;: &quot;:8065&quot;,\n    &quot;ConnectionSecurity&quot;: &quot;&quot;,\n    &quot;TLSCertFile&quot;: &quot;&quot;,\n    &quot;TLSKeyFile&quot;: &quot;&quot;,\n    &quot;TLSMinVer&quot;: &quot;1.2&quot;,\n    &quot;TLSStrictTransport&quot;: false,\n    &quot;TLSStrictTransportMaxAge&quot;: 63072000,\n    &quot;TLSOverwriteCiphers&quot;: [],\n    &quot;UseLetsEncrypt&quot;: false,\n    &quot;LetsEncryptCertificateCacheFile&quot;: &quot;./config/letsencrypt.cache&quot;,\n    &quot;Forward80To443&quot;: false,\n    &quot;ReadTimeout&quot;: 300,\n    &quot;WriteTimeout&quot;: 300,\n    &quot;IdleTimeout&quot;: 60,\n    &quot;MaximumLoginAttempts&quot;: 10,\n    &quot;GoroutineHealthThreshold&quot;: -1,\n    &quot;GoogleDeveloperKey&quot;: &quot;&quot;,\n    &quot;EnableBotAccountCreation&quot;: false,\n    &quot;EnableUserAccessTokens&quot;: false,\n    &quot;EnableLinkPreviews&quot;: false,\n    &quot;EnableTesting&quot;: false,\n    &quot;EnableDeveloper&quot;: false,\n    &quot;EnableOpenTracing&quot;: false,\n    &quot;EnableSecurityFixAlert&quot;: true,\n    &quot;EnableInsecureOutgoingConnections&quot;: false,\n    &quot;AllowedUntrustedInternalConnections&quot;: &quot;&quot;,\n    &quot;EnablePostSearch&quot;: true,\n    &quot;EnableUserStatuses&quot;: true,\n    &quot;ExperimentalEnableAuthenticationTransfer&quot;: true,\n    &quot;ClusterLogTimeoutMilliseconds&quot;: 2000,\n    &quot;CloseUnusedDirectMessages&quot;: false,\n    &quot;EnablePreviewFeatures&quot;: true,\n    &quot;EnableTutorial&quot;: true,\n    &quot;ExperimentalEnableDefaultChannelLeaveJoinMessages&quot;: true,\n    &quot;ExperimentalGroupUnreadChannels&quot;: &quot;disabled&quot;,\n    &quot;ExperimentalChannelOrganization&quot;: false,\n    &quot;EnableAPITeamDeletion&quot;: false,\n    &quot;ExperimentalEnableHardenedMode&quot;: false,\n    &quot;DisableLegacyMFA&quot;: true,\n    &quot;ExperimentalStrictCSRFEnforcement&quot;: false,\n    &quot;EnableEmailInvitations&quot;: false,\n    &quot;DisableBotsWhenOwnerIsDeactivated&quot;: true,\n    &quot;EnableBotAccountCreation&quot;: false,\n    &quot;EnableSVGs&quot;: false,\n    &quot;EnableLatex&quot;: false,\n    &quot;EnableLocalMode&quot;: false,\n    &quot;LocalModeSocketLocation&quot;: &quot;/var/tmp/mattermost_local.socket&quot;,\n    &quot;EnableAWSMetering&quot;: false,\n    &quot;SplitKey&quot;: &quot;&quot;,\n    &quot;FeatureFlagSyncIntervalSeconds&quot;: 30,\n    &quot;DebugSplit&quot;: false,\n    &quot;ThreadAutoFollow&quot;: true,\n    &quot;ManagedResourcePaths&quot;: &quot;&quot;,\n    &quot;EnableLegacySidebar&quot;: false,\n    &quot;CollapsedThreads&quot;: &quot;default_off&quot;\n  },\n  \n  &quot;TeamSettings&quot;: {\n    &quot;SiteName&quot;: &quot;Mattermost&quot;,\n    &quot;MaxUsersPerTeam&quot;: 50000,\n    &quot;EnableTeamCreation&quot;: false,\n    &quot;EnableUserCreation&quot;: false,\n    &quot;EnableOpenServer&quot;: false,\n    &quot;EnableUserDeactivation&quot;: true,\n    &quot;RestrictCreationToDomains&quot;: &quot;example.com&quot;,\n    &quot;EnableCustomBrand&quot;: false,\n    &quot;CustomBrandText&quot;: &quot;&quot;,\n    &quot;CustomDescriptionText&quot;: &quot;&quot;,\n    &quot;RestrictDirectMessage&quot;: &quot;any&quot;,\n    &quot;RestrictTeamInvite&quot;: &quot;all&quot;,\n    &quot;RestrictPublicChannelManagement&quot;: &quot;all&quot;,\n    &quot;RestrictPrivateChannelManagement&quot;: &quot;all&quot;,\n    &quot;RestrictPublicChannelCreation&quot;: &quot;all&quot;,\n    &quot;RestrictPrivateChannelCreation&quot;: &quot;all&quot;,\n    &quot;RestrictPublicChannelDeletion&quot;: &quot;all&quot;,\n    &quot;RestrictPrivateChannelDeletion&quot;: &quot;all&quot;,\n    &quot;RestrictPrivateChannelManageMembers&quot;: &quot;all&quot;,\n    &quot;EnableXToLeaveChannelsFromLHS&quot;: false,\n    &quot;UserStatusAwayTimeout&quot;: 300,\n    &quot;MaxChannelsPerTeam&quot;: 50000,\n    &quot;MaxNotificationsPerChannel&quot;: 1000000,\n    &quot;EnableConfirmNotificationsToChannel&quot;: true,\n    &quot;TeammateNameDisplay&quot;: &quot;username&quot;,\n    &quot;ExperimentalViewArchivedChannels&quot;: false,\n    &quot;ExperimentalEnableAutomaticReplies&quot;: false,\n    &quot;ExperimentalHideTownSquareinLHS&quot;: false,\n    &quot;ExperimentalTownSquareIsReadOnly&quot;: false,\n    &quot;LockTeammateNameDisplay&quot;: false,\n    &quot;ExperimentalPrimaryTeam&quot;: &quot;&quot;,\n    &quot;ExperimentalDefaultChannels&quot;: []\n  },\n  \n  &quot;SqlSettings&quot;: {\n    &quot;DriverName&quot;: &quot;postgres&quot;,\n    &quot;DataSource&quot;: &quot;postgres://mattermost:MattermostDBPassword2024!@localhost:5432/mattermost?sslmode=disable&amp;connect_timeout=10&quot;,\n    &quot;DataSourceReplicas&quot;: [],\n    &quot;DataSourceSearchReplicas&quot;: [],\n    &quot;MaxIdleConns&quot;: 20,\n    &quot;ConnMaxLifetimeMilliseconds&quot;: 3600000,\n    &quot;ConnMaxIdleTimeMilliseconds&quot;: 300000,\n    &quot;MaxOpenConns&quot;: 300,\n    &quot;Trace&quot;: false,\n    &quot;AtRestEncryptKey&quot;: &quot;&quot;,\n    &quot;QueryTimeout&quot;: 30,\n    &quot;DisableDatabaseSearch&quot;: false\n  },\n  \n  &quot;LogSettings&quot;: {\n    &quot;EnableConsole&quot;: true,\n    &quot;ConsoleLevel&quot;: &quot;INFO&quot;,\n    &quot;ConsoleJson&quot;: true,\n    &quot;EnableFile&quot;: true,\n    &quot;FileLevel&quot;: &quot;INFO&quot;,\n    &quot;FileJson&quot;: true,\n    &quot;FileLocation&quot;: &quot;/mattermost/logs/mattermost.log&quot;,\n    &quot;EnableWebhookDebugging&quot;: true,\n    &quot;EnableDiagnostics&quot;: false,\n    &quot;EnableSentry&quot;: false,\n    &quot;AdvancedLoggingConfig&quot;: &quot;&quot;\n  },\n  \n  &quot;PasswordSettings&quot;: {\n    &quot;MinimumLength&quot;: 12,\n    &quot;Lowercase&quot;: true,\n    &quot;Number&quot;: true,\n    &quot;Uppercase&quot;: true,\n    &quot;Symbol&quot;: true\n  },\n  \n  &quot;FileSettings&quot;: {\n    &quot;EnableFileAttachments&quot;: true,\n    &quot;EnableMobileUpload&quot;: true,\n    &quot;EnableMobileDownload&quot;: true,\n    &quot;MaxFileSize&quot;: 104857600,\n    &quot;DriverName&quot;: &quot;local&quot;,\n    &quot;Directory&quot;: &quot;/opt/mattermost/data/&quot;,\n    &quot;EnablePublicLink&quot;: false,\n    &quot;ExtractContent&quot;: true,\n    &quot;ArchiveRecursion&quot;: false,\n    &quot;PublicLinkSalt&quot;: &quot;&quot;,\n    &quot;InitialFont&quot;: &quot;nunito-bold.ttf&quot;,\n    &quot;AmazonS3AccessKeyId&quot;: &quot;&quot;,\n    &quot;AmazonS3SecretAccessKey&quot;: &quot;&quot;,\n    &quot;AmazonS3Bucket&quot;: &quot;&quot;,\n    &quot;AmazonS3PathPrefix&quot;: &quot;&quot;,\n    &quot;AmazonS3Region&quot;: &quot;&quot;,\n    &quot;AmazonS3Endpoint&quot;: &quot;&quot;,\n    &quot;AmazonS3SSL&quot;: true,\n    &quot;AmazonS3SignV2&quot;: false,\n    &quot;AmazonS3SSE&quot;: false,\n    &quot;AmazonS3Trace&quot;: false\n  },\n  \n  &quot;EmailSettings&quot;: {\n    &quot;EnableSignUpWithEmail&quot;: false,\n    &quot;EnableSignInWithEmail&quot;: true,\n    &quot;EnableSignInWithUsername&quot;: true,\n    &quot;SendEmailNotifications&quot;: true,\n    &quot;UseChannelInEmailNotifications&quot;: false,\n    &quot;RequireEmailVerification&quot;: true,\n    &quot;FeedbackName&quot;: &quot;Mattermost&quot;,\n    &quot;FeedbackEmail&quot;: &quot;mattermost@example.com&quot;,\n    &quot;ReplyToAddress&quot;: &quot;mattermost@example.com&quot;,\n    &quot;FeedbackOrganization&quot;: &quot;&quot;,\n    &quot;EnableSMTPAuth&quot;: true,\n    &quot;SMTPUsername&quot;: &quot;mattermost@example.com&quot;,\n    &quot;SMTPPassword&quot;: &quot;smtp_secure_password&quot;,\n    &quot;SMTPServer&quot;: &quot;smtp.example.com&quot;,\n    &quot;SMTPPort&quot;: &quot;587&quot;,\n    &quot;SMTPServerTimeout&quot;: 10,\n    &quot;ConnectionSecurity&quot;: &quot;STARTTLS&quot;,\n    &quot;SendPushNotifications&quot;: true,\n    &quot;PushNotificationServer&quot;: &quot;https://push.mattermost.com&quot;,\n    &quot;PushNotificationContents&quot;: &quot;generic&quot;,\n    &quot;PushNotificationBuffer&quot;: 1000\n  },\n  \n  &quot;RateLimitSettings&quot;: {\n    &quot;Enable&quot;: true,\n    &quot;PerSec&quot;: 10,\n    &quot;MaxBurst&quot;: 100,\n    &quot;MemoryStoreSize&quot;: 10000,\n    &quot;VaryByRemoteAddr&quot;: true,\n    &quot;VaryByUser&quot;: false,\n    &quot;VaryByHeader&quot;: &quot;&quot;\n  },\n  \n  &quot;PrivacySettings&quot;: {\n    &quot;ShowEmailAddress&quot;: false,\n    &quot;ShowFullName&quot;: false\n  },\n  \n  &quot;SupportSettings&quot;: {\n    &quot;TermsOfServiceLink&quot;: &quot;https://mattermost.org/terms-of-service/&quot;,\n    &quot;PrivacyPolicyLink&quot;: &quot;https://mattermost.org/privacy-policy/&quot;,\n    &quot;AboutLink&quot;: &quot;https://about.mattermost.com/default-about/&quot;,\n    &quot;HelpLink&quot;: &quot;https://about.mattermost.com/default-help/&quot;,\n    &quot;ReportAProblemLink&quot;: &quot;https://about.mattermost.com/default-report-a-problem/&quot;,\n    &quot;SupportEmail&quot;: &quot;feedback@mattermost.com&quot;,\n    &quot;CustomTermsOfServiceEnabled&quot;: false,\n    &quot;CustomTermsOfServiceReAcceptancePeriod&quot;: 365,\n    &quot;EnableAskCommunityLink&quot;: true\n  },\n  \n  &quot;AnnouncementSettings&quot;: {\n    &quot;EnableBanner&quot;: false,\n    &quot;BannerText&quot;: &quot;&quot;,\n    &quot;BannerColor&quot;: &quot;#f2a93b&quot;,\n    &quot;BannerTextColor&quot;: &quot;#333333&quot;,\n    &quot;AllowBannerDismissal&quot;: true\n  },\n  \n  &quot;ThemeSettings&quot;: {\n    &quot;EnableThemeSelection&quot;: true,\n    &quot;DefaultTheme&quot;: &quot;default&quot;,\n    &quot;AllowCustomThemes&quot;: true,\n    &quot;AllowedThemes&quot;: []\n  },\n  \n  &quot;GitLabSettings&quot;: {\n    &quot;Enable&quot;: false,\n    &quot;Secret&quot;: &quot;&quot;,\n    &quot;Id&quot;: &quot;&quot;,\n    &quot;Scope&quot;: &quot;&quot;,\n    &quot;AuthEndpoint&quot;: &quot;&quot;,\n    &quot;TokenEndpoint&quot;: &quot;&quot;,\n    &quot;UserApiEndpoint&quot;: &quot;&quot;\n  },\n  \n  &quot;GoogleSettings&quot;: {\n    &quot;Enable&quot;: false,\n    &quot;Secret&quot;: &quot;&quot;,\n    &quot;Id&quot;: &quot;&quot;,\n    &quot;Scope&quot;: &quot;profile email&quot;,\n    &quot;AuthEndpoint&quot;: &quot;https://accounts.google.com/o/oauth2/v2/auth&quot;,\n    &quot;TokenEndpoint&quot;: &quot;https://www.googleapis.com/oauth2/v4/token&quot;,\n    &quot;UserApiEndpoint&quot;: &quot;https://people.googleapis.com/v1/people/me?personFields=names%2CemailAddresses%2Cnicknames%2Cmetadata&quot;\n  },\n  \n  &quot;Office365Settings&quot;: {\n    &quot;Enable&quot;: false,\n    &quot;Secret&quot;: &quot;&quot;,\n    &quot;Id&quot;: &quot;&quot;,\n    &quot;Scope&quot;: &quot;User.Read&quot;,\n    &quot;AuthEndpoint&quot;: &quot;https://login.microsoftonline.com/common/oauth2/v2.0/authorize&quot;,\n    &quot;TokenEndpoint&quot;: &quot;https://login.microsoftonline.com/common/oauth2/v2.0/token&quot;,\n    &quot;UserApiEndpoint&quot;: &quot;https://graph.microsoft.com/v1.0/me&quot;,\n    &quot;Directory&quot;: &quot;&quot;\n  },\n  \n  &quot;LdapSettings&quot;: {\n    &quot;Enable&quot;: false,\n    &quot;EnableSync&quot;: false,\n    &quot;LdapServer&quot;: &quot;ldap.example.com&quot;,\n    &quot;LdapPort&quot;: 636,\n    &quot;ConnectionSecurity&quot;: &quot;TLS&quot;,\n    &quot;BaseDN&quot;: &quot;DC=example,DC=com&quot;,\n    &quot;BindUsername&quot;: &quot;CN=mattermost,OU=Service Accounts,DC=example,DC=com&quot;,\n    &quot;BindPassword&quot;: &quot;ldap_service_password&quot;,\n    &quot;UserFilter&quot;: &quot;&quot;,\n    &quot;GroupFilter&quot;: &quot;&quot;,\n    &quot;GuestFilter&quot;: &quot;&quot;,\n    &quot;EnableAdminFilter&quot;: true,\n    &quot;AdminFilter&quot;: &quot;(memberOf=CN=Mattermost Admins,OU=Groups,DC=example,DC=com)&quot;,\n    &quot;GroupDisplayNameAttribute&quot;: &quot;cn&quot;,\n    &quot;GroupIdAttribute&quot;: &quot;cn&quot;,\n    &quot;FirstNameAttribute&quot;: &quot;givenName&quot;,\n    &quot;LastNameAttribute&quot;: &quot;sn&quot;,\n    &quot;EmailAttribute&quot;: &quot;mail&quot;,\n    &quot;UsernameAttribute&quot;: &quot;sAMAccountName&quot;,\n    &quot;NicknameAttribute&quot;: &quot;&quot;,\n    &quot;IdAttribute&quot;: &quot;objectGUID&quot;,\n    &quot;PositionAttribute&quot;: &quot;title&quot;,\n    &quot;LoginIdAttribute&quot;: &quot;sAMAccountName&quot;,\n    &quot;PictureAttribute&quot;: &quot;&quot;,\n    &quot;SyncIntervalMinutes&quot;: 60,\n    &quot;SkipCertificateVerification&quot;: false,\n    &quot;PublicCertificateFile&quot;: &quot;&quot;,\n    &quot;PrivateKeyFile&quot;: &quot;&quot;,\n    &quot;QueryTimeout&quot;: 60,\n    &quot;MaxPageSize&quot;: 0,\n    &quot;LoginFieldName&quot;: &quot;&quot;,\n    &quot;LoginButtonColor&quot;: &quot;#0000&quot;,\n    &quot;LoginButtonBorderColor&quot;: &quot;#2389D7&quot;,\n    &quot;LoginButtonTextColor&quot;: &quot;#2389D7&quot;\n  }\n}\nEOF\n\nsudo chown mattermost:mattermost /opt/mattermost/config/config.json\nsudo chmod 600 /opt/mattermost/config/config.json</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service-configuration\" class=\"mobile-header\">SystemD Service Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure systemd service\nsudo tee /etc/systemd/system/mattermost.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Mattermost Team Communication Service\nAfter=network.target postgresql.service mysql.service\nWants=network.target\n\n[Service]\nType=notify\nUser=mattermost\nGroup=mattermost\nExecStart=/opt/mattermost/bin/mattermost\nWorkingDirectory=/opt/mattermost\nLimitNOFILE=49152\nRestart=always\nRestartSec=10\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nPrivateDevices=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/opt/mattermost/data /opt/mattermost/logs /opt/mattermost/config /opt/mattermost/plugins\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\n\n# Resource limits\nMemoryMax=4G\nCPUQuota=200%\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now mattermost\n\n# Verify service status\nsudo systemctl status mattermost</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"nginx-reverse-proxy-with-security\" class=\"mobile-header\">NGINX Reverse Proxy with Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure NGINX configuration\nsudo tee /etc/nginx/sites-available/mattermost &gt; /dev/null &lt;&lt;EOF\n# Mattermost NGINX Configuration with Security Headers\n\nupstream mattermost {\n    server 127.0.0.1:8065;\n    keepalive 64;\n}\n\nproxy_cache_path /var/cache/nginx/mattermost levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off;\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name mattermost.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name mattermost.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/mattermost.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/mattermost.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets off;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n    add_header Content-Security-Policy &quot;frame-ancestors &#039;none&#039;&quot; always;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=mattermost_ratelimit:10m rate=10r/s;\n    limit_req zone=mattermost_ratelimit burst=20 nodelay;\n\n    # Max upload size for file attachments\n    client_max_body_size 50M;\n\n    location ~ /api/v[0-9]+/(users/)?websocket\\$ {\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        client_max_body_size 50M;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        client_body_timeout 60;\n        send_timeout 300;\n        lingering_timeout 5;\n        proxy_connect_timeout 90;\n        proxy_send_timeout 300;\n        proxy_read_timeout 90s;\n        proxy_pass http://mattermost;\n    }\n\n    location / {\n        client_max_body_size 50M;\n        proxy_set_header Connection &quot;&quot;;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        proxy_read_timeout 600s;\n        proxy_cache mattermost_cache;\n        proxy_cache_revalidate on;\n        proxy_cache_min_uses 2;\n        proxy_cache_use_stale timeout;\n        proxy_cache_lock on;\n        proxy_http_version 1.1;\n        proxy_pass http://mattermost;\n    }\n}\nEOF\n\n# Enable site and install SSL\nsudo ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/\nsudo certbot --nginx -d mattermost.example.com\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-configuration\" class=\"mobile-header\">Advanced Security Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure fail2ban for Mattermost\nsudo tee /etc/fail2ban/filter.d/mattermost.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^.*&quot;level&quot;:&quot;error&quot;.*&quot;msg&quot;:&quot;Invalid login attempt&quot;.*&quot;user_id&quot;:&quot;[^&quot;]*&quot;.*&quot;ip&quot;:&quot;&lt;HOST&gt;&quot;\nignoreregex =\nEOF\n\nsudo tee /etc/fail2ban/jail.d/mattermost.conf &gt; /dev/null &lt;&lt;EOF\n[mattermost]\nenabled = true\nport = http,https\nfilter = mattermost\nlogpath = /opt/mattermost/logs/mattermost.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\naction = iptables-multiport[name=Mattermost, port=&quot;http,https&quot;, protocol=tcp]\nEOF\n\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-monitoring\" class=\"mobile-header\">Backup and Monitoring</h2>\n<h3 id=\"backup-strategy\" class=\"mobile-header\">Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/mattermost-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/mattermost&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,config,data,plugins}\n\necho &quot;Starting Mattermost backup...&quot;\n\n# Stop Mattermost service\nsystemctl stop mattermost\n\n# Backup database\nsudo -u postgres pg_dump mattermost &gt; ${BACKUP_DIR}/database/mattermost-${DATE}.sql\ngzip ${BACKUP_DIR}/database/mattermost-${DATE}.sql\n\n# Backup configuration\ncp /opt/mattermost/config/config.json ${BACKUP_DIR}/config/config-${DATE}.json\n\n# Backup user data and files\ntar -czf ${BACKUP_DIR}/data/mattermost-data-${DATE}.tar.gz -C /opt/mattermost data/\n\n# Backup plugins\nif [ -d &quot;/opt/mattermost/plugins&quot; ]; then\n    tar -czf ${BACKUP_DIR}/plugins/mattermost-plugins-${DATE}.tar.gz -C /opt/mattermost plugins/\nfi\n\n# Start Mattermost\nsystemctl start mattermost\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://mattermost-backups/ --recursive\ngsutil cp -r ${BACKUP_DIR}/* gs://mattermost-backups/\n\n# Keep last 7 backups\nfind ${BACKUP_DIR} -name &quot;mattermost-*&quot; -type f -mtime +7 -delete\n\necho &quot;Mattermost backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/mattermost-backup.sh\necho &quot;0 2 * * * root /usr/local/bin/mattermost-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/mattermost-health.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/mattermost-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active mattermost &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Mattermost service is running&quot;\nelse\n    log_message &quot;✗ Mattermost service is not running&quot;\n    exit 1\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w &quot;%{http_code}&quot; http://localhost:8065/api/v4/system/ping)\nif [ &quot;${HTTP_STATUS}&quot; = &quot;200&quot; ]; then\n    log_message &quot;✓ Mattermost API is responding&quot;\nelse\n    log_message &quot;✗ Mattermost API issues (HTTP ${HTTP_STATUS})&quot;\nfi\n\n# Check database connectivity\nDB_STATUS=$(curl -s http://localhost:8065/api/v4/database/ping | jq -r &#039;.database_status&#039; 2&gt;/dev/null)\nif [ &quot;$DB_STATUS&quot; = &quot;OK&quot; ]; then\n    log_message &quot;✓ Database connection healthy&quot;\nelse\n    log_message &quot;⚠ Database connection issues&quot;\nfi\n\n# Check disk space\nDISK_USAGE=$(df /opt/mattermost | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message &quot;⚠ High disk usage: ${DISK_USAGE}%&quot;\nelse\n    log_message &quot;✓ Disk usage: ${DISK_USAGE}%&quot;\nfi\n\nlog_message &quot;Mattermost health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/mattermost-health.sh\necho &quot;*/15 * * * * root /usr/local/bin/mattermost-health.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Mattermost service status\nsudo systemctl status mattermost\nsudo journalctl -u mattermost -f\n\n# Check Mattermost logs\nsudo tail -f /opt/mattermost/logs/mattermost.log\n\n# Test API connectivity\ncurl -i http://localhost:8065/api/v4/system/ping\n\n# Check database connection\nsudo -u postgres psql mattermost -c &quot;SELECT version();&quot;\n\n# Check file permissions\nls -la /opt/mattermost/\nsudo chown -R mattermost:mattermost /opt/mattermost\n\n# Memory usage\nps aux --sort=-%mem | grep mattermost\npmap -x $(pgrep mattermost)\n\n# Network connectivity\nss -tulpn | grep 8065\nnetstat -tulpn | grep mattermost\n\n# Configuration validation\n/opt/mattermost/bin/mattermost config validate\n\n# Reset admin password (CLI)\nsudo -u mattermost /opt/mattermost/bin/mattermost user password admin new_password\n\n# Check plugin status\nsudo -u mattermost /opt/mattermost/bin/mattermost plugin list\n\n# Database migration (if needed)\nsudo -u mattermost /opt/mattermost/bin/mattermost db migrate\n\n# Clear cache\nsudo rm -rf /opt/mattermost/data/cache/*\nsudo systemctl restart mattermost</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mattermost.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Mattermost Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mattermost.com/guides/deployment.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mattermost.com/overview/security.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mattermost.com/guides/administration.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Admin Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://community.mattermost.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Mattermost Community</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"12 min","wordCount":2308,"lastBuilt":"2025-09-14T01:30:34.611Z"},{"name":"mce","displayName":"Mce","slug":"mce","description":"Repo for mce","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mce","updatedAt":"2025-09-08T03:10:56Z","createdAt":"2023-08-28T03:48:56Z","readmeRaw":"# CouchPotato/HeadPhones/SickRage/Plex/Emby install\n\n## CentOS/RedHat/SL 7\n\n```bash\nyum groupinstall -y \"Development Tools\"\nyum -y install curl gcc gettext git libmediainfo libzen mediainfo p7zip par2cmdline python-configobj sqlite tar unzip wget unrar\n\nmkdir -p /mnt/media /mnt/torrents\necho \"\n10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\n10.0.254.1:/mnt/Volume_1/torrents        /mnt/torrents                nfs defaults,rw 0 0\n\" >> /etc/fstab\nmount -a\n```\n\n### CouchPotato\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/couchpotato.git /var/lib/couchpotato\ngit clone https://git.casjay.in/systems/couchpotato.git /tmp/couchpotato\n\nmkdir -p /var/lib/couchpotato && cd /var/lib/couchpotato\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/couchpotato/bin/activate\n/var/lib/couchpotato/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/couchpotato/bin/python -m pip install -r /tmp/couchpotato/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/couchpotato/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable couchpotato couchpotato-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/couchpotato/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### HeadPhones\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/headphones.git /var/lib/headphones\ngit clone https://git.casjay.in/systems/headphones.git /tmp/headphones\n\nmkdir -p /var/lib/headphones && cd /var/lib/headphones\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/headphones/bin/activate\n/var/lib/headphones/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/headphones/bin/python -m pip install -r /tmp/headphones/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/headphones/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable headphones headphones-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/headphones/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### SickRage\n\n```bash\nyum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\n\ngit clone https://git.casjay.in/mirrors/sickrage.git /var/lib/sickrage\ngit clone https://git.casjay.in/systems/sickrage.git /tmp/sickrage\n\nmkdir -p /var/lib/sickrage && cd /var/lib/sickrage\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/sickrage/bin/activate\n/var/lib/sickrage/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/sickrage/bin/python -m pip install -r /tmp/sickrage/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/sickrage/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable sickrage sickrage-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/sickrage/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c && history -w && exit\n\n```\n\n### Plex\n\n```bash\nyum install ffmpeg\nyum install -y https://downloads.plex.tv/plex-media-server/1.14.0.5470-9d51fdfaa/plexmediaserver-1.14.0.5470-9d51fdfaa.x86_64.rpm \ngo to http://yourserverip:32400/ and configure it\n\nOptional stats for plex [Tautulli]\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 && ./build.sh && cd\ngit clone https://git.casjay.in/mirrors/Plex-Tautulli.git /var/lib/tautulli\ngit clone https://git.casjay.in/mirrors/plex.git /tmp/plex\ncp -Rf /tmp/plex/{etc,root,var}* /\n```\n\n### Emby\n\n```bash\nyum install ffmpeg\nyum install -y https://github.com/MediaBrowser/Emby.Releases/releases/download/3.5.3.0/emby-server-rpm_3.5.3.0_x86_64.rpm\ngo to http://yourserverip:8096/ and configure it\n\n```\n\n### Airsonic\n\n```bash\nmkdir -p /var/airsonic\nyum install java-1.8.0-openjdk-headless -y\nwget https://github.com/airsonic/airsonic/raw/main/contrib/airsonic.service -O /etc/systemd/system/airsonic.service\nwget https://github.com/airsonic/airsonic/releases/download/v10.1.2/airsonic.war -O /var/airsonic/airsonic.war\nmkdir -p /mnt/media\necho \" 10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\" >> /etc/fstab\nmount -a\n\n```\n","readmeHtml":"<h1 id=\"couchpotatoheadphonessickrageplexemby-install\" class=\"mobile-header\">CouchPotato/HeadPhones/SickRage/Plex/Emby install</h1>\n<h2 id=\"centosredhatsl-7\" class=\"mobile-header\">CentOS/RedHat/SL 7</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum groupinstall -y &quot;Development Tools&quot;\nyum -y install curl gcc gettext git libmediainfo libzen mediainfo p7zip par2cmdline python-configobj sqlite tar unzip wget unrar\n\nmkdir -p /mnt/media /mnt/torrents\necho &quot;\n10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0\n10.0.254.1:/mnt/Volume_1/torrents        /mnt/torrents                nfs defaults,rw 0 0\n&quot; &gt;&gt; /etc/fstab\nmount -a</code></pre>\n      </div>\n    </div>\n<h3 id=\"couchpotato\" class=\"mobile-header\">CouchPotato</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/couchpotato.git /var/lib/couchpotato\ngit clone https://git.casjay.in/systems/couchpotato.git /tmp/couchpotato\n\nmkdir -p /var/lib/couchpotato &amp;&amp; cd /var/lib/couchpotato\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/couchpotato/bin/activate\n/var/lib/couchpotato/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/couchpotato/bin/python -m pip install -r /tmp/couchpotato/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/couchpotato/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable couchpotato couchpotato-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/couchpotato/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"headphones\" class=\"mobile-header\">HeadPhones</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/headphones.git /var/lib/headphones\ngit clone https://git.casjay.in/systems/headphones.git /tmp/headphones\n\nmkdir -p /var/lib/headphones &amp;&amp; cd /var/lib/headphones\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/headphones/bin/activate\n/var/lib/headphones/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/headphones/bin/python -m pip install -r /tmp/headphones/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/headphones/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable headphones headphones-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/headphones/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"sickrage\" class=\"mobile-header\">SickRage</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install -y transmission-daemon\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\n\ngit clone https://git.casjay.in/mirrors/sickrage.git /var/lib/sickrage\ngit clone https://git.casjay.in/systems/sickrage.git /tmp/sickrage\n\nmkdir -p /var/lib/sickrage &amp;&amp; cd /var/lib/sickrage\n/usr/local/bin/python2.7 -m virtualenv .\nsource /var/lib/sickrage/bin/activate\n/var/lib/sickrage/bin/python -m pip install cheetah cryptography sabyenc --upgrade\n/var/lib/sickrage/bin/python -m pip install -r /tmp/sickrage/requirements.txt\ndeactivate\n\ncd ~\n\ncp -Rfv /tmp/sickrage/{etc,root,var}* /\nsystemctl disable transmission-daemon --now\nsystemctl enable sickrage sickrage-bt httpd nginx smb nmb --now\n\nrm -Rf /usr/src/python2 /usr/src/python3 /tmp/sickrage/ \n\nmunin-node-configure --remove-also --shell | sh\nsystemctl restart munin-node httpd nginx\nhistory -c &amp;&amp; history -w &amp;&amp; exit\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"plex\" class=\"mobile-header\">Plex</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install ffmpeg\nyum install -y https://downloads.plex.tv/plex-media-server/1.14.0.5470-9d51fdfaa/plexmediaserver-1.14.0.5470-9d51fdfaa.x86_64.rpm \ngo to http://yourserverip:32400/ and configure it\n\nOptional stats for plex [Tautulli]\nrm -Rf /usr/src/python2 /usr/src/python3\ngit clone https://git.casjay.in/interpreters/python2.git /usr/src/python2\ncd /usr/src/python2 &amp;&amp; ./build.sh &amp;&amp; cd\ngit clone https://git.casjay.in/mirrors/Plex-Tautulli.git /var/lib/tautulli\ngit clone https://git.casjay.in/mirrors/plex.git /tmp/plex\ncp -Rf /tmp/plex/{etc,root,var}* /</code></pre>\n      </div>\n    </div>\n<h3 id=\"emby\" class=\"mobile-header\">Emby</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum install ffmpeg\nyum install -y https://github.com/MediaBrowser/Emby.Releases/releases/download/3.5.3.0/emby-server-rpm_3.5.3.0_x86_64.rpm\ngo to http://yourserverip:8096/ and configure it\n</code></pre>\n      </div>\n    </div>\n<h3 id=\"airsonic\" class=\"mobile-header\">Airsonic</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">mkdir -p /var/airsonic\nyum install java-1.8.0-openjdk-headless -y\nwget https://github.com/airsonic/airsonic/raw/main/contrib/airsonic.service -O /etc/systemd/system/airsonic.service\nwget https://github.com/airsonic/airsonic/releases/download/v10.1.2/airsonic.war -O /var/airsonic/airsonic.war\nmkdir -p /mnt/media\necho &quot; 10.0.254.1:/mnt/Volume_1/media           /mnt/media                   nfs defaults,rw 0 0&quot; &gt;&gt; /etc/fstab\nmount -a\n</code></pre>\n      </div>\n    </div>","readTime":"3 min","wordCount":448,"lastBuilt":"2025-09-14T01:30:43.995Z"},{"name":"minecraft-server","displayName":"Minecraft Server","slug":"minecraft-server","description":"Repo for minecraft-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minecraft-server","updatedAt":"2025-09-08T03:11:10Z","createdAt":"2025-09-08T03:10:59Z","readmeRaw":"## 👋 Welcome to minecraft-server 🚀  \n\nminecraft-server README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-minecraft-server\" class=\"mobile-header\">👋 Welcome to minecraft-server 🚀  </h2>\n<p class=\"mobile-paragraph\">minecraft-server README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:43.834Z"},{"name":"minikube","displayName":"Minikube","slug":"minikube","description":"Repo for minikube","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minikube","updatedAt":"2025-09-08T03:11:25Z","createdAt":"2025-09-08T03:11:15Z","readmeRaw":"## 👋 Welcome to minikube 🚀  \n\nminikube README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-minikube\" class=\"mobile-header\">👋 Welcome to minikube 🚀  </h2>\n<p class=\"mobile-paragraph\">minikube README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:43.680Z"},{"name":"minio","displayName":"Minio","slug":"minio","description":"Repo for minio","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minio","updatedAt":"2025-09-14T01:30:32Z","createdAt":"2025-09-08T03:11:29Z","readmeRaw":"# MinIO Installation Guide\n\nHigh-performance S3-compatible object storage server designed for cloud-native applications. Essential for modern data infrastructure with enterprise-grade security and multi-cloud compatibility.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for production\n- Multiple drives/volumes for distributed deployment\n- Network connectivity for cluster configuration\n\n## Installation\n\n### Single Node Deployment\n```bash\n# Create MinIO user\nsudo useradd --system --shell /bin/false minio\n\n# Create data directories\nsudo mkdir -p /opt/minio/{bin,data,certs}\nsudo chown -R minio:minio /opt/minio\n\n# Download MinIO server\ncd /tmp\nwget https://dl.min.io/server/minio/release/linux-amd64/minio\nchmod +x minio\nsudo mv minio /opt/minio/bin/\n\n# Create MinIO configuration\nsudo tee /etc/default/minio > /dev/null <<EOF\n# MinIO Configuration\nMINIO_ROOT_USER=admin\nMINIO_ROOT_PASSWORD=MinIOSecurePassword2024!\nMINIO_VOLUMES=\"/opt/minio/data\"\nMINIO_OPTS=\"--certs-dir /opt/minio/certs --console-address :9001\"\nMINIO_SERVER_URL=\"https://minio.example.com:9000\"\nMINIO_BROWSER_REDIRECT_URL=\"https://minio.example.com:9001\"\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/minio.service > /dev/null <<EOF\n[Unit]\nDescription=MinIO Object Storage Server\nDocumentation=https://docs.min.io\nWants=network-online.target\nAfter=network-online.target\nAssertFileIsExecutable=/opt/minio/bin/minio\n\n[Service]\nType=notify\nUser=minio\nGroup=minio\nEnvironmentFile=/etc/default/minio\nExecStart=/opt/minio/bin/minio server \\$MINIO_OPTS \\$MINIO_VOLUMES\nRestart=always\nLimitNOFILE=65536\nTasksMax=infinity\nTimeoutStopSec=infinity\nSendSIGKILL=no\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nReadWritePaths=/opt/minio\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now minio\n```\n\n### Distributed Deployment (4 Nodes)\n```bash\n# Configure for distributed deployment\n# Run on each node (adjust IP addresses):\n\nsudo tee /etc/default/minio > /dev/null <<EOF\nMINIO_ROOT_USER=admin\nMINIO_ROOT_PASSWORD=MinIOSecurePassword2024!\nMINIO_VOLUMES=\"https://minio-{1...4}.example.com:9000/opt/minio/data{1...4}\"\nMINIO_OPTS=\"--certs-dir /opt/minio/certs --console-address :9001\"\nMINIO_SERVER_URL=\"https://minio.example.com:9000\"\nEOF\n\n# Create multiple data directories on each node\nsudo mkdir -p /opt/minio/data{1..4}\nsudo chown -R minio:minio /opt/minio/data*\n\nsudo systemctl restart minio\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n```bash\n# Generate SSL certificates\nsudo mkdir -p /opt/minio/certs\n\n# Self-signed certificate for testing\nsudo openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=minio.example.com\" \\\n  -keyout /opt/minio/certs/private.key \\\n  -out /opt/minio/certs/public.crt\n\n# Production: Use Let's Encrypt or proper CA certificates\nsudo cp /etc/letsencrypt/live/minio.example.com/fullchain.pem /opt/minio/certs/public.crt\nsudo cp /etc/letsencrypt/live/minio.example.com/privkey.pem /opt/minio/certs/private.key\n\nsudo chown -R minio:minio /opt/minio/certs\nsudo chmod 600 /opt/minio/certs/private.key\n```\n\n### Access Control and Policies\n```bash\n# Install MinIO Client (mc)\nwget https://dl.min.io/client/mc/release/linux-amd64/mc\nchmod +x mc\nsudo mv mc /usr/local/bin/\n\n# Configure MinIO client\nmc alias set local https://localhost:9000 admin MinIOSecurePassword2024!\n\n# Create users and policies\ncat > /tmp/readonly-policy.json <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:GetObject\",\n        \"s3:ListBucket\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::*/*\",\n        \"arn:aws:s3:::*\"\n      ]\n    }\n  ]\n}\nEOF\n\ncat > /tmp/readwrite-policy.json <<EOF\n{\n  \"Version\": \"2012-10-17\", \n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:*\"\n      ],\n      \"Resource\": [\n        \"arn:aws:s3:::app-data/*\",\n        \"arn:aws:s3:::app-data\"\n      ]\n    }\n  ]\n}\nEOF\n\n# Create policies\nmc admin policy create local readonly /tmp/readonly-policy.json\nmc admin policy create local readwrite /tmp/readwrite-policy.json\n\n# Create users\nmc admin user add local appuser AppUserSecurePassword2024!\nmc admin policy attach local readwrite --user appuser\n\nmc admin user add local readonly ReadOnlyUserPassword2024!\nmc admin policy attach local readonly --user readonly\n```\n\n## Backup and Monitoring\n\n### Health Monitoring\n```bash\nsudo tee /usr/local/bin/minio-health.sh > /dev/null <<'EOF'\n#!/bin/bash\nLOG=\"/var/log/minio-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active minio >/dev/null; then\n    log_message \"✓ MinIO service running\"\nelse\n    log_message \"✗ MinIO service not running\"\nfi\n\n# Check API health\nif curl -f https://localhost:9000/minio/health/live >/dev/null 2>&1; then\n    log_message \"✓ MinIO API responding\"\nelse\n    log_message \"✗ MinIO API not responding\"\nfi\n\n# Check cluster status (if distributed)\nmc admin info local >/dev/null 2>&1\nif [ $? -eq 0 ]; then\n    log_message \"✓ MinIO cluster healthy\"\nelse\n    log_message \"⚠ MinIO cluster issues\"\nfi\n\nlog_message \"MinIO health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/minio-health.sh\necho \"*/10 * * * * root /usr/local/bin/minio-health.sh\" | sudo tee -a /etc/crontab\n```\n\n## Additional Resources\n\n- [MinIO Documentation](https://docs.min.io/)\n- [MinIO Administration Guide](https://docs.min.io/minio/baremetal/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"minio-installation-guide\" class=\"mobile-header\">MinIO Installation Guide</h1>\n<p class=\"mobile-paragraph\">High-performance S3-compatible object storage server designed for cloud-native applications. Essential for modern data infrastructure with enterprise-grade security and multi-cloud compatibility.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for production</li>\n<li class=\"mobile-list-item\">Multiple drives/volumes for distributed deployment</li>\n<li class=\"mobile-list-item\">Network connectivity for cluster configuration</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"single-node-deployment\" class=\"mobile-header\">Single Node Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create MinIO user\nsudo useradd --system --shell /bin/false minio\n\n# Create data directories\nsudo mkdir -p /opt/minio/{bin,data,certs}\nsudo chown -R minio:minio /opt/minio\n\n# Download MinIO server\ncd /tmp\nwget https://dl.min.io/server/minio/release/linux-amd64/minio\nchmod +x minio\nsudo mv minio /opt/minio/bin/\n\n# Create MinIO configuration\nsudo tee /etc/default/minio &gt; /dev/null &lt;&lt;EOF\n# MinIO Configuration\nMINIO_ROOT_USER=admin\nMINIO_ROOT_PASSWORD=MinIOSecurePassword2024!\nMINIO_VOLUMES=&quot;/opt/minio/data&quot;\nMINIO_OPTS=&quot;--certs-dir /opt/minio/certs --console-address :9001&quot;\nMINIO_SERVER_URL=&quot;https://minio.example.com:9000&quot;\nMINIO_BROWSER_REDIRECT_URL=&quot;https://minio.example.com:9001&quot;\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/minio.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=MinIO Object Storage Server\nDocumentation=https://docs.min.io\nWants=network-online.target\nAfter=network-online.target\nAssertFileIsExecutable=/opt/minio/bin/minio\n\n[Service]\nType=notify\nUser=minio\nGroup=minio\nEnvironmentFile=/etc/default/minio\nExecStart=/opt/minio/bin/minio server \\$MINIO_OPTS \\$MINIO_VOLUMES\nRestart=always\nLimitNOFILE=65536\nTasksMax=infinity\nTimeoutStopSec=infinity\nSendSIGKILL=no\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nReadWritePaths=/opt/minio\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now minio</code></pre>\n      </div>\n    </div>\n<h3 id=\"distributed-deployment-4-nodes\" class=\"mobile-header\">Distributed Deployment (4 Nodes)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure for distributed deployment\n# Run on each node (adjust IP addresses):\n\nsudo tee /etc/default/minio &gt; /dev/null &lt;&lt;EOF\nMINIO_ROOT_USER=admin\nMINIO_ROOT_PASSWORD=MinIOSecurePassword2024!\nMINIO_VOLUMES=&quot;https://minio-{1...4}.example.com:9000/opt/minio/data{1...4}&quot;\nMINIO_OPTS=&quot;--certs-dir /opt/minio/certs --console-address :9001&quot;\nMINIO_SERVER_URL=&quot;https://minio.example.com:9000&quot;\nEOF\n\n# Create multiple data directories on each node\nsudo mkdir -p /opt/minio/data{1..4}\nsudo chown -R minio:minio /opt/minio/data*\n\nsudo systemctl restart minio</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo mkdir -p /opt/minio/certs\n\n# Self-signed certificate for testing\nsudo openssl req -new -newkey rsa:4096 -days 365 -nodes -x509 \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=minio.example.com&quot; \\\n  -keyout /opt/minio/certs/private.key \\\n  -out /opt/minio/certs/public.crt\n\n# Production: Use Let&#039;s Encrypt or proper CA certificates\nsudo cp /etc/letsencrypt/live/minio.example.com/fullchain.pem /opt/minio/certs/public.crt\nsudo cp /etc/letsencrypt/live/minio.example.com/privkey.pem /opt/minio/certs/private.key\n\nsudo chown -R minio:minio /opt/minio/certs\nsudo chmod 600 /opt/minio/certs/private.key</code></pre>\n      </div>\n    </div>\n<h3 id=\"access-control-and-policies\" class=\"mobile-header\">Access Control and Policies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MinIO Client (mc)\nwget https://dl.min.io/client/mc/release/linux-amd64/mc\nchmod +x mc\nsudo mv mc /usr/local/bin/\n\n# Configure MinIO client\nmc alias set local https://localhost:9000 admin MinIOSecurePassword2024!\n\n# Create users and policies\ncat &gt; /tmp/readonly-policy.json &lt;&lt;EOF\n{\n  &quot;Version&quot;: &quot;2012-10-17&quot;,\n  &quot;Statement&quot;: [\n    {\n      &quot;Effect&quot;: &quot;Allow&quot;,\n      &quot;Action&quot;: [\n        &quot;s3:GetObject&quot;,\n        &quot;s3:ListBucket&quot;\n      ],\n      &quot;Resource&quot;: [\n        &quot;arn:aws:s3:::*/*&quot;,\n        &quot;arn:aws:s3:::*&quot;\n      ]\n    }\n  ]\n}\nEOF\n\ncat &gt; /tmp/readwrite-policy.json &lt;&lt;EOF\n{\n  &quot;Version&quot;: &quot;2012-10-17&quot;, \n  &quot;Statement&quot;: [\n    {\n      &quot;Effect&quot;: &quot;Allow&quot;,\n      &quot;Action&quot;: [\n        &quot;s3:*&quot;\n      ],\n      &quot;Resource&quot;: [\n        &quot;arn:aws:s3:::app-data/*&quot;,\n        &quot;arn:aws:s3:::app-data&quot;\n      ]\n    }\n  ]\n}\nEOF\n\n# Create policies\nmc admin policy create local readonly /tmp/readonly-policy.json\nmc admin policy create local readwrite /tmp/readwrite-policy.json\n\n# Create users\nmc admin user add local appuser AppUserSecurePassword2024!\nmc admin policy attach local readwrite --user appuser\n\nmc admin user add local readonly ReadOnlyUserPassword2024!\nmc admin policy attach local readonly --user readonly</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-monitoring\" class=\"mobile-header\">Backup and Monitoring</h2>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/minio-health.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOG=&quot;/var/log/minio-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active minio &gt;/dev/null; then\n    log_message &quot;✓ MinIO service running&quot;\nelse\n    log_message &quot;✗ MinIO service not running&quot;\nfi\n\n# Check API health\nif curl -f https://localhost:9000/minio/health/live &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ MinIO API responding&quot;\nelse\n    log_message &quot;✗ MinIO API not responding&quot;\nfi\n\n# Check cluster status (if distributed)\nmc admin info local &gt;/dev/null 2&gt;&amp;1\nif [ $? -eq 0 ]; then\n    log_message &quot;✓ MinIO cluster healthy&quot;\nelse\n    log_message &quot;⚠ MinIO cluster issues&quot;\nfi\n\nlog_message &quot;MinIO health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/minio-health.sh\necho &quot;*/10 * * * * root /usr/local/bin/minio-health.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.min.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MinIO Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.min.io/minio/baremetal/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MinIO Administration Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"3 min","wordCount":587,"lastBuilt":"2025-09-14T01:30:34.415Z"},{"name":"mongodb","displayName":"MongoDB","slug":"mongodb","description":"Repo for mongodb","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mongodb","updatedAt":"2025-09-08T03:11:46Z","createdAt":"2023-08-28T03:49:06Z","readmeRaw":"# MongoDB Installation Guide\n\nMongoDB is a free and open-source document-oriented NoSQL database. Originally developed by 10gen (now MongoDB Inc.), MongoDB uses JSON-like documents with optional schemas instead of traditional table-based relational database structure. It serves as a FOSS alternative to commercial document databases like Amazon DocumentDB, Azure Cosmos DB, or Oracle NoSQL Database, offering enterprise-grade features including horizontal scaling, replica sets, and sharding without licensing costs, with features like ACID transactions, aggregation pipelines, and full-text search.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended for production)\n  - RAM: 2GB minimum (8GB+ recommended for production)\n  - Storage: 10GB minimum (SSD strongly recommended for performance)\n  - Network: Stable connectivity for replica sets and sharding\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: Not officially supported by MongoDB Inc.\n- **Network Requirements**:\n  - Port 27017 (default MongoDB port)\n  - Port 27018 (default shard port)\n  - Port 27019 (default config server port)\n  - Additional ports for replica set members\n- **Dependencies**:\n  - OpenSSL, PCRE, zlib (usually included in distributions)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Create MongoDB 7.0 repository\nsudo tee /etc/yum.repos.d/mongodb-org-7.0.repo <<EOF\n[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/7.0/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\nEOF\n\n# Install MongoDB\nsudo yum install -y mongodb-org mongodb-org-tools mongodb-mongosh\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27017/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmongosh --eval 'db.runCommand(\"connectionStatus\")'\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y wget gnupg software-properties-common\n\n# Import MongoDB GPG key\nwget -qO /tmp/mongodb-server-7.0.asc https://www.mongodb.org/static/pgp/server-7.0.asc\nsudo mv /tmp/mongodb-server-7.0.asc /etc/apt/trusted.gpg.d/mongodb-server-7.0.asc\n\n# Add MongoDB repository\necho \"deb [arch=amd64,arm64] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n# Update package index\nsudo apt update\n\n# Install MongoDB\nsudo apt install -y mongodb-org mongodb-org-tools mongodb-mongosh\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo ufw allow 27017\n```\n\n### Arch Linux\n\n```bash\n# MongoDB is available in AUR\nyay -S mongodb-bin mongodb-tools-bin mongosh-bin\n\n# Alternative: Install from AUR with makepkg\ngit clone https://aur.archlinux.org/mongodb-bin.git\ncd mongodb-bin\nmakepkg -si\n\n# Create mongodb user and group\nsudo useradd -r -s /sbin/nologin mongodb\n\n# Create necessary directories\nsudo mkdir -p /var/lib/mongodb /var/log/mongodb\nsudo chown mongodb:mongodb /var/lib/mongodb /var/log/mongodb\n\n# Enable and start service\nsudo systemctl enable --now mongodb\n\n# Configuration location: /etc/mongodb.conf\n```\n\n### Alpine Linux\n\n```bash\n# MongoDB is not officially supported on Alpine Linux\n# Use Docker for MongoDB on Alpine:\n\n# Install Docker\napk add --no-cache docker docker-compose\n\n# Enable and start Docker\nrc-update add docker default\nrc-service docker start\n\n# Run MongoDB container\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0\n\n# Verify installation\ndocker exec mongodb mongosh --eval 'db.runCommand(\"connectionStatus\")'\n```\n\n### openSUSE/SLES\n\n```bash\n# MongoDB is not officially packaged for openSUSE/SLES\n# Use Docker or manual installation:\n\n# Method 1: Docker installation\nsudo zypper install -y docker docker-compose\nsudo systemctl enable --now docker\n\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0\n\n# Method 2: Manual installation from tarball\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-7.0.4.tgz\ntar -xzf mongodb-linux-x86_64-rhel80-7.0.4.tgz\nsudo cp mongodb-linux-x86_64-rhel80-7.0.4/bin/* /usr/local/bin/\n\n# Create mongodb user and directories\nsudo useradd -r mongodb\nsudo mkdir -p /var/lib/mongodb /var/log/mongodb\nsudo chown mongodb:mongodb /var/lib/mongodb /var/log/mongodb\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew tap mongodb/brew\nbrew install mongodb-community@7.0 mongodb-database-tools mongosh\n\n# Start MongoDB service\nbrew services start mongodb/brew/mongodb-community@7.0\n\n# Or run manually\nmongod --config /usr/local/etc/mongod.conf\n\n# Configuration location: /usr/local/etc/mongod.conf\n# Alternative: /opt/homebrew/etc/mongod.conf (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# MongoDB is not officially supported on FreeBSD\n# Use Docker or compile from source:\n\n# Install Docker\npkg install docker\necho 'docker_enable=\"YES\"' >> /etc/rc.conf\nservice docker start\n\n# Run MongoDB container\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install mongodb mongodb-shell\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install mongodb mongodb-shell\n\n# Method 3: Manual installation\n# Download from https://www.mongodb.com/download-center/community\n# Run mongodb-windows-x86_64-*.msi\n\n# Install as Windows service\n\"C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.exe\" --config \"C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg\" --install\n\n# Start service\nnet start MongoDB\n\n# Configuration location: C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create mongodb user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/mongodb -s /sbin/nologin -c \"MongoDB Server\" mongodb\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/mongod.conf`\n- Debian/Ubuntu: `/etc/mongod.conf`\n- Arch Linux: `/etc/mongodb.conf`\n- Alpine Linux: Docker container configuration\n- openSUSE/SLES: `/etc/mongod.conf` (manual installation)\n- macOS: `/usr/local/etc/mongod.conf`\n- FreeBSD: Docker container configuration\n- Windows: `C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg`\n\n3. **Essential settings to change**:\n\n```yaml\n# /etc/mongod.conf\nstorage:\n  dbPath: /var/lib/mongodb\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 2\n      journalCompressor: snappy\n\nsystemLog:\n  destination: file\n  path: /var/log/mongodb/mongod.log\n  logAppend: true\n  logRotate: rename\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n  maxIncomingConnections: 200\n\nsecurity:\n  authorization: enabled\n  javascriptEnabled: false\n\noperationProfiling:\n  slowOpThresholdMs: 100\n\nreplication:\n  replSetName: rs0\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid\n```\n\n### Testing Initial Setup\n\n```bash\n# Check if MongoDB is running\nsudo systemctl status mongod\n\n# Test connection\nmongosh --eval 'db.runCommand(\"connectionStatus\")'\n\n# Check database status\nmongosh --eval 'db.runCommand(\"serverStatus\")'\n\n# Check configuration\nmongosh --eval 'db.runCommand(\"getCmdLineOpts\")'\n\n# Test basic operations\nmongosh --eval 'use test; db.testCollection.insertOne({test: \"document\"}); db.testCollection.findOne()'\n```\n\n**WARNING:** Enable authentication and create admin users immediately after installation!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable MongoDB to start on boot\nsudo systemctl enable mongod\n\n# Start MongoDB\nsudo systemctl start mongod\n\n# Stop MongoDB\nsudo systemctl stop mongod\n\n# Restart MongoDB\nsudo systemctl restart mongod\n\n# Reload configuration (graceful restart)\nsudo systemctl reload mongod\n\n# Check status\nsudo systemctl status mongod\n\n# View logs\nsudo journalctl -u mongod -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# MongoDB runs in Docker container on Alpine\ndocker start mongodb\ndocker stop mongodb\ndocker restart mongodb\n\n# Check status\ndocker ps | grep mongodb\n\n# View logs\ndocker logs -f mongodb\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# MongoDB runs in Docker container on FreeBSD\nservice docker start\n\ndocker start mongodb\ndocker stop mongodb\ndocker restart mongodb\n\n# Check status\ndocker ps | grep mongodb\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start mongodb/brew/mongodb-community@7.0\nbrew services stop mongodb/brew/mongodb-community@7.0\nbrew services restart mongodb/brew/mongodb-community@7.0\n\n# Check status\nbrew services list | grep mongodb\n\n# Manual control\nmongod --config /usr/local/etc/mongod.conf\n```\n\n### Windows Service Manager\n\n```powershell\n# Start MongoDB service\nnet start MongoDB\n\n# Stop MongoDB service\nnet stop MongoDB\n\n# Using PowerShell\nStart-Service MongoDB\nStop-Service MongoDB\nRestart-Service MongoDB\n\n# Check status\nGet-Service MongoDB\n\n# View logs\nGet-EventLog -LogName Application -Source MongoDB\n```\n\n## Advanced Configuration\n\n### Replica Set Configuration\n\n```yaml\n# Replica set configuration\nreplication:\n  replSetName: rs0\n\n# Sharding configuration (config server)\nsharding:\n  clusterRole: configsvr\n\nreplication:\n  replSetName: configReplSet\n\n# Sharding configuration (shard)\nsharding:\n  clusterRole: shardsvr\n\nreplication:\n  replSetName: shardReplSet\n```\n\n### Sharding Setup\n\n```javascript\n// Initialize config server replica set\nrs.initiate({\n  _id: \"configReplSet\",\n  configsvr: true,\n  members: [\n    { _id: 0, host: \"config1.example.com:27019\" },\n    { _id: 1, host: \"config2.example.com:27019\" },\n    { _id: 2, host: \"config3.example.com:27019\" }\n  ]\n})\n\n// Initialize shard replica sets\nrs.initiate({\n  _id: \"shard1ReplSet\",\n  members: [\n    { _id: 0, host: \"shard1-a.example.com:27018\" },\n    { _id: 1, host: \"shard1-b.example.com:27018\" },\n    { _id: 2, host: \"shard1-c.example.com:27018\" }\n  ]\n})\n\n// Add shards to cluster (from mongos)\nsh.addShard(\"shard1ReplSet/shard1-a.example.com:27018,shard1-b.example.com:27018,shard1-c.example.com:27018\")\n```\n\n### Advanced Security Settings\n\n```yaml\n# Security configuration\nsecurity:\n  authorization: enabled\n  clusterAuthMode: keyFile\n  keyFile: /etc/mongodb/mongodb-keyfile\n  javascriptEnabled: false\n  \nnet:\n  tls:\n    mode: requireTLS\n    certificateKeyFile: /etc/mongodb/ssl/mongodb.pem\n    CAFile: /etc/mongodb/ssl/ca.pem\n    allowInvalidHostnames: false\n    allowInvalidCertificates: false\n\nauditLog:\n  destination: file\n  format: JSON\n  path: /var/log/mongodb/audit.log\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/mongodb\nupstream mongodb_backend {\n    server 127.0.0.1:27017 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:27018 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 27017;\n    proxy_pass mongodb_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/mongodb.log;\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend mongodb_frontend\n    bind *:27017\n    mode tcp\n    option tcplog\n    default_backend mongodb_servers\n\nbackend mongodb_servers\n    mode tcp\n    balance roundrobin\n    option tcp-check\n    tcp-check connect\n    server mongodb1 127.0.0.1:27017 check\n    server mongodb2 127.0.0.1:27018 check backup\n```\n\n### Connection Pooling with mongos\n\n```yaml\n# mongos configuration\nsharding:\n  configDB: configReplSet/config1.example.com:27019,config2.example.com:27019,config3.example.com:27019\n\nnet:\n  port: 27017\n  bindIp: 0.0.0.0\n  maxIncomingConnections: 1000\n\nsystemLog:\n  destination: file\n  path: /var/log/mongodb/mongos.log\n  logAppend: true\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate SSL certificates for MongoDB\nsudo mkdir -p /etc/mongodb/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out /etc/mongodb/ssl/ca-key.pem 4096\nsudo openssl req -new -x509 -days 3650 -key /etc/mongodb/ssl/ca-key.pem -out /etc/mongodb/ssl/ca.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=MongoDB-CA\"\n\n# Create server certificate\nsudo openssl genrsa -out /etc/mongodb/ssl/mongodb-key.pem 4096\nsudo openssl req -new -key /etc/mongodb/ssl/mongodb-key.pem -out /etc/mongodb/ssl/mongodb-req.pem -subj \"/C=US/ST=State/L=City/O=Organization/CN=mongodb.example.com\"\nsudo openssl x509 -req -in /etc/mongodb/ssl/mongodb-req.pem -CA /etc/mongodb/ssl/ca.pem -CAkey /etc/mongodb/ssl/ca-key.pem -CAcreateserial -out /etc/mongodb/ssl/mongodb-cert.pem -days 365\n\n# Combine certificate and key\nsudo cat /etc/mongodb/ssl/mongodb-cert.pem /etc/mongodb/ssl/mongodb-key.pem > /etc/mongodb/ssl/mongodb.pem\n\n# Set permissions\nsudo chown -R mongodb:mongodb /etc/mongodb/ssl\nsudo chmod 600 /etc/mongodb/ssl/*.pem\nsudo chmod 644 /etc/mongodb/ssl/ca.pem\n```\n\n### User Security and Authentication\n\n```javascript\n// Create admin user\nuse admin\ndb.createUser({\n  user: \"admin\",\n  pwd: \"SecureAdminPassword123!\",\n  roles: [\n    { role: \"userAdminAnyDatabase\", db: \"admin\" },\n    { role: \"readWriteAnyDatabase\", db: \"admin\" },\n    { role: \"dbAdminAnyDatabase\", db: \"admin\" },\n    { role: \"clusterAdmin\", db: \"admin\" }\n  ]\n})\n\n// Create application user\nuse myapp\ndb.createUser({\n  user: \"appuser\",\n  pwd: \"SecureAppPassword123!\",\n  roles: [\n    { role: \"readWrite\", db: \"myapp\" }\n  ]\n})\n\n// Create backup user\nuse admin\ndb.createUser({\n  user: \"backup\",\n  pwd: \"BackupPassword123!\",\n  roles: [\n    { role: \"backup\", db: \"admin\" },\n    { role: \"clusterMonitor\", db: \"admin\" }\n  ]\n})\n\n// Create monitoring user\ndb.createUser({\n  user: \"monitor\",\n  pwd: \"MonitorPassword123!\",\n  roles: [\n    { role: \"clusterMonitor\", db: \"admin\" },\n    { role: \"read\", db: \"local\" }\n  ]\n})\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 27017\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=mongodb\nsudo firewall-cmd --permanent --zone=mongodb --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=mongodb --add-port=27017/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 27017 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 27017\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"MongoDB\" -Direction Inbound -Protocol TCP -LocalPort 27017 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### Database Creation and Management\n\n```javascript\n// Create application database\nuse myapp\n\n// Create collections with validation\ndb.createCollection(\"users\", {\n  validator: {\n    $jsonSchema: {\n      bsonType: \"object\",\n      required: [\"username\", \"email\"],\n      properties: {\n        username: {\n          bsonType: \"string\",\n          description: \"must be a string and is required\"\n        },\n        email: {\n          bsonType: \"string\",\n          pattern: \"^.+@.+$\",\n          description: \"must be a valid email address\"\n        }\n      }\n    }\n  }\n})\n\n// Create indexes for performance\ndb.users.createIndex({ username: 1 }, { unique: true })\ndb.users.createIndex({ email: 1 }, { unique: true })\ndb.users.createIndex({ created_at: 1 })\n\n// Create time-series collection (MongoDB 5.0+)\ndb.createCollection(\"logs\", {\n  timeseries: {\n    timeField: \"timestamp\",\n    metaField: \"source\",\n    granularity: \"minutes\"\n  }\n})\n```\n\n### Database Optimization\n\n```javascript\n// Analyze collection statistics\ndb.stats()\ndb.users.stats()\n\n// Check index usage\ndb.users.aggregate([{ $indexStats: {} }])\n\n// Optimize queries with explain\ndb.users.find({ username: \"john\" }).explain(\"executionStats\")\n\n// Create compound indexes\ndb.orders.createIndex({ user_id: 1, created_at: -1 })\n\n// Text search index\ndb.products.createIndex({ name: \"text\", description: \"text\" })\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# MongoDB-specific system optimizations\nsudo tee -a /etc/sysctl.conf <<EOF\n# MongoDB optimizations\nvm.swappiness = 1\nvm.max_map_count = 262144\nnet.core.somaxconn = 4096\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_keepalive_time = 120\nnet.ipv4.tcp_max_syn_backlog = 4096\nEOF\n\nsudo sysctl -p\n\n# Disable Transparent Huge Pages\necho 'never' | sudo tee /sys/kernel/mm/transparent_hugepage/enabled\necho 'never' | sudo tee /sys/kernel/mm/transparent_hugepage/defrag\n\n# Make THP disable permanent\nsudo tee /etc/systemd/system/disable-thp.service <<EOF\n[Unit]\nDescription=Disable Transparent Huge Pages (THP)\nDefaultDependencies=no\nAfter=sysinit.target local-fs.target\nBefore=mongod.service\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c 'echo never | tee /sys/kernel/mm/transparent_hugepage/enabled > /dev/null'\nExecStart=/bin/sh -c 'echo never | tee /sys/kernel/mm/transparent_hugepage/defrag > /dev/null'\n\n[Install]\nWantedBy=basic.target\nEOF\n\nsudo systemctl enable --now disable-thp\n```\n\n### MongoDB Performance Tuning\n\n```yaml\n# High-performance MongoDB configuration\nstorage:\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 8  # 50% of available RAM\n      journalCompressor: snappy\n      directoryForIndexes: true\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\noperationProfiling:\n  mode: slowOp\n  slowOpThresholdMs: 100\n  slowOpSampleRate: 1.0\n\nnet:\n  maxIncomingConnections: 1000\n  serviceExecutor: adaptive\n\nsetParameter:\n  cursorTimeoutMillis: 600000\n  failIndexKeyTooLong: false\n  maxIndexBuildDrainBatchSize: 128\n  wiredTigerConcurrentReadTransactions: 128\n  wiredTigerConcurrentWriteTransactions: 128\n```\n\n### Query Optimization\n\n```javascript\n// Enable profiler for slow operations\ndb.setProfilingLevel(2, { slowms: 100 })\n\n// Analyze slow queries\ndb.system.profile.find().limit(5).sort({ ts: -1 }).pretty()\n\n// Index optimization\ndb.collection.getIndexes()\ndb.collection.dropIndex(\"index_name\")\n\n// Use aggregation pipeline optimization\ndb.collection.aggregate([\n  { $match: { status: \"active\" } },\n  { $sort: { created_at: -1 } },\n  { $limit: 100 }\n], { allowDiskUse: true })\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```javascript\n// Server status and statistics\ndb.runCommand(\"serverStatus\")\ndb.runCommand(\"dbStats\")\ndb.runCommand(\"collStats\", \"collection_name\")\n\n// Connection and operation monitoring\ndb.runCommand(\"currentOp\")\ndb.runCommand(\"top\")\n\n// Replica set monitoring\nrs.status()\nrs.printReplicationInfo()\nrs.printSlaveReplicationInfo()\n\n// Sharding monitoring\nsh.status()\ndb.printShardingStatus()\n```\n\n### External Monitoring Setup\n\n```bash\n# Install MongoDB Exporter for Prometheus\nwget https://github.com/percona/mongodb_exporter/releases/download/v0.39.0/mongodb_exporter-0.39.0.linux-amd64.tar.gz\ntar xzf mongodb_exporter-*.tar.gz\nsudo cp mongodb_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/mongodb_exporter.service <<EOF\n[Unit]\nDescription=MongoDB Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=mongodb\nEnvironment=MONGODB_URI=\"mongodb://monitor:MonitorPassword123!@localhost:27017/admin\"\nExecStart=/usr/local/bin/mongodb_exporter --mongodb.uri=\\$MONGODB_URI\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now mongodb_exporter\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# mongodb-health-check.sh\n\n# Check MongoDB service\nif ! systemctl is-active mongod >/dev/null 2>&1; then\n    echo \"CRITICAL: MongoDB service is not running\"\n    exit 2\nfi\n\n# Check connectivity\nif ! mongosh --quiet --eval \"db.runCommand('ping')\" >/dev/null 2>&1; then\n    echo \"CRITICAL: Cannot connect to MongoDB\"\n    exit 2\nfi\n\n# Check replica set status (if configured)\nREPLICA_STATUS=$(mongosh --quiet --eval \"rs.status().ok\" 2>/dev/null)\nif [ \"$REPLICA_STATUS\" = \"1\" ]; then\n    PRIMARY_COUNT=$(mongosh --quiet --eval \"rs.status().members.filter(m => m.stateStr === 'PRIMARY').length\" 2>/dev/null)\n    if [ \"$PRIMARY_COUNT\" != \"1\" ]; then\n        echo \"WARNING: No primary or multiple primaries in replica set\"\n        exit 1\n    fi\nfi\n\n# Check connections\nCONNECTIONS=$(mongosh --quiet --eval \"db.serverStatus().connections.current\" 2>/dev/null)\nMAX_CONNECTIONS=$(mongosh --quiet --eval \"db.serverStatus().connections.available\" 2>/dev/null)\nCONNECTION_USAGE=$((CONNECTIONS * 100 / (CONNECTIONS + MAX_CONNECTIONS)))\n\nif [ $CONNECTION_USAGE -gt 80 ]; then\n    echo \"WARNING: High connection usage: ${CONNECTION_USAGE}%\"\n    exit 1\nfi\n\necho \"OK: MongoDB is healthy\"\nexit 0\n```\n\n## Backup and Restore\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# mongodb-backup.sh\n\nBACKUP_DIR=\"/backup/mongodb/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Full database backup\nmongodump \\\n  --host=\"localhost:27017\" \\\n  --username=backup \\\n  --password=BackupPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --out \"$BACKUP_DIR\"\n\n# Oplog backup for point-in-time recovery\nmongodump \\\n  --host=\"localhost:27017\" \\\n  --username=backup \\\n  --password=BackupPassword123! \\\n  --authenticationDatabase=admin \\\n  --db=local \\\n  --collection=oplog.rs \\\n  --gzip \\\n  --out \"$BACKUP_DIR/oplog\"\n\n# Configuration backup\ncp -r /etc/mongod.conf \"$BACKUP_DIR/\"\n\n# Compress backup\ntar czf \"$BACKUP_DIR.tar.gz\" -C \"$(dirname \"$BACKUP_DIR\")\" \"$(basename \"$BACKUP_DIR\")\"\nrm -rf \"$BACKUP_DIR\"\n\necho \"Backup completed: $BACKUP_DIR.tar.gz\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# mongodb-restore.sh\n\nBACKUP_FILE=\"$1\"\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup-file.tar.gz>\"\n    exit 1\nfi\n\n# Extract backup\nBACKUP_DIR=\"/tmp/mongodb-restore-$(date +%s)\"\nmkdir -p \"$BACKUP_DIR\"\ntar xzf \"$BACKUP_FILE\" -C \"$BACKUP_DIR\" --strip-components=1\n\n# Stop applications using the database\necho \"Stopping applications...\"\n\n# Restore database\necho \"Restoring database from $BACKUP_FILE...\"\nmongorestore \\\n  --host=\"localhost:27017\" \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --drop \\\n  \"$BACKUP_DIR\"\n\n# Cleanup\nrm -rf \"$BACKUP_DIR\"\n\necho \"Restore completed\"\n```\n\n### Point-in-Time Recovery\n\n```bash\n#!/bin/bash\n# mongodb-pitr.sh\n\nBACKUP_FILE=\"$1\"\nRECOVERY_TIME=\"$2\"\n\nif [ -z \"$BACKUP_FILE\" ] || [ -z \"$RECOVERY_TIME\" ]; then\n    echo \"Usage: $0 <backup-file.tar.gz> <recovery-time>\"\n    echo \"Example: $0 backup.tar.gz '2024-01-15T14:30:00.000Z'\"\n    exit 1\nfi\n\n# Extract and restore base backup\nBACKUP_DIR=\"/tmp/mongodb-pitr-$(date +%s)\"\nmkdir -p \"$BACKUP_DIR\"\ntar xzf \"$BACKUP_FILE\" -C \"$BACKUP_DIR\" --strip-components=1\n\n# Restore base backup\nmongorestore \\\n  --host=\"localhost:27017\" \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --drop \\\n  \"$BACKUP_DIR\"\n\n# Apply oplog up to recovery point\nmongorestore \\\n  --host=\"localhost:27017\" \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --oplogReplay \\\n  --oplogLimit=\"$(date -d \"$RECOVERY_TIME\" +%s):1\" \\\n  --gzip \\\n  \"$BACKUP_DIR/oplog\"\n\n# Cleanup\nrm -rf \"$BACKUP_DIR\"\n\necho \"Point-in-time recovery completed to $RECOVERY_TIME\"\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **MongoDB won't start**:\n```bash\n# Check logs\nsudo journalctl -u mongod -f\nsudo tail -f /var/log/mongodb/mongod.log\n\n# Check disk space\ndf -h /var/lib/mongodb\n\n# Check permissions\nls -la /var/lib/mongodb\n\n# Repair database\nmongod --repair --dbpath /var/lib/mongodb\n```\n\n2. **Connection issues**:\n```bash\n# Check if MongoDB is listening\nsudo ss -tlnp | grep :27017\n\n# Test local connection\nmongosh --eval \"db.runCommand('ping')\"\n\n# Check authentication\nmongosh admin --username admin\n\n# Check bind address\nmongosh --eval \"db.runCommand('getCmdLineOpts')\"\n```\n\n3. **Performance issues**:\n```bash\n# Check slow queries\nmongosh --eval \"db.setProfilingLevel(2, {slowms: 100})\"\nmongosh --eval \"db.system.profile.find().sort({ts:-1}).limit(5)\"\n\n# Check index usage\nmongosh --eval \"db.collection.getIndexes()\"\n\n# Check server status\nmongosh --eval \"db.serverStatus()\"\n```\n\n### Debug Mode\n\n```bash\n# Start MongoDB with verbose logging\nsudo systemctl edit mongod\n# Add:\n[Service]\nEnvironment=\"MONGOD_OPTIONS=--verbose\"\n\nsudo systemctl daemon-reload\nsudo systemctl restart mongod\n\n# Enable profiling for all operations\nmongosh --eval \"db.setProfilingLevel(2)\"\n\n# View debug logs\nsudo tail -f /var/log/mongodb/mongod.log\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update mongodb-org\nsudo yum update mongodb-org\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade mongodb-org\n\n# Arch Linux\nyay -Syu mongodb-bin\n\n# macOS\nbrew upgrade mongodb-community@7.0\n\n# Docker (Alpine/FreeBSD)\ndocker pull mongo:7.0\ndocker stop mongodb\ndocker rm mongodb\n# Re-run docker run command with new image\n\n# Always backup before updates\n./mongodb-backup.sh\n\n# Restart after updates\nsudo systemctl restart mongod\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# mongodb-maintenance.sh\n\n# Compact collections\nmongosh admin --username admin --password SecureAdminPassword123! <<EOF\nuse myapp\ndb.runCommand({compact: \"collection_name\"})\nEOF\n\n# Update collection statistics\nmongosh admin --username admin --password SecureAdminPassword123! <<EOF\ndb.runCommand({planCacheClear: \"\"})\nEOF\n\n# Clean up old oplogs (automatically managed but can be tuned)\nmongosh admin --username admin --password SecureAdminPassword123! <<EOF\nuse local\ndb.oplog.rs.find().sort({\\$natural:-1}).limit(1)\nEOF\n\necho \"MongoDB maintenance completed\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"*/5 * * * * /usr/local/bin/mongodb-health-check.sh\" | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/mongodb <<EOF\n/var/log/mongodb/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 644 mongodb mongodb\n    postrotate\n        /bin/kill -SIGUSR1 \\$(cat /var/run/mongodb/mongod.pid 2>/dev/null) 2>/dev/null || true\n    endscript\n}\nEOF\n```\n\n## Integration Examples\n\n### Node.js Integration\n\n```javascript\n// Using MongoDB Node.js driver\nconst { MongoClient } = require('mongodb');\n\nconst client = new MongoClient('mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp', {\n  tls: true,\n  tlsCertificateKeyFile: '/etc/mongodb/ssl/client.pem',\n  tlsCAFile: '/etc/mongodb/ssl/ca.pem',\n  authSource: 'myapp'\n});\n\nasync function connect() {\n  await client.connect();\n  const db = client.db('myapp');\n  return db;\n}\n```\n\n### Python Integration\n\n```python\n# Using PyMongo\nimport pymongo\nfrom pymongo import MongoClient\n\nclient = MongoClient('mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp', \n                    tls=True,\n                    tlsCertificateKeyFile='/etc/mongodb/ssl/client.pem',\n                    tlsCAFile='/etc/mongodb/ssl/ca.pem',\n                    authSource='myapp')\n\ndb = client.myapp\ncollection = db.users\n```\n\n### Java Integration\n\n```java\n// Using MongoDB Java driver\nimport com.mongodb.client.MongoClients;\nimport com.mongodb.client.MongoClient;\nimport com.mongodb.client.MongoDatabase;\nimport com.mongodb.MongoClientSettings;\nimport com.mongodb.ConnectionString;\n\nMongoClientSettings settings = MongoClientSettings.builder()\n    .applyConnectionString(new ConnectionString(\"mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp\"))\n    .applyToSslSettings(builder -> \n        builder.enabled(true)\n               .invalidHostNameAllowed(false))\n    .build();\n\nMongoClient mongoClient = MongoClients.create(settings);\nMongoDatabase database = mongoClient.getDatabase(\"myapp\");\n```\n\n### Express.js Integration\n\n```javascript\n// Using Mongoose ODM\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp', {\n  tls: true,\n  tlsCertificateKeyFile: '/etc/mongodb/ssl/client.pem',\n  tlsCAFile: '/etc/mongodb/ssl/ca.pem',\n  authSource: 'myapp'\n});\n\nconst userSchema = new mongoose.Schema({\n  username: { type: String, required: true, unique: true },\n  email: { type: String, required: true, unique: true },\n  created_at: { type: Date, default: Date.now }\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n```\n\n## Additional Resources\n\n- [Official MongoDB Documentation](https://docs.mongodb.com/)\n- [MongoDB University](https://university.mongodb.com/)\n- [MongoDB Security Checklist](https://docs.mongodb.com/manual/administration/security-checklist/)\n- [MongoDB Performance Best Practices](https://docs.mongodb.com/manual/administration/analyzing-mongodb-performance/)\n- [Replica Set Tutorial](https://docs.mongodb.com/manual/tutorial/deploy-replica-set/)\n- [Sharding Tutorial](https://docs.mongodb.com/manual/tutorial/deploy-shard-cluster/)\n- [MongoDB Community Forum](https://developer.mongodb.com/community/forums/)\n- [MongoDB Blog](https://www.mongodb.com/blog)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"mongodb-installation-guide\" class=\"mobile-header\">MongoDB Installation Guide</h1>\n<p class=\"mobile-paragraph\">MongoDB is a free and open-source document-oriented NoSQL database. Originally developed by 10gen (now MongoDB Inc.), MongoDB uses JSON-like documents with optional schemas instead of traditional table-based relational database structure. It serves as a FOSS alternative to commercial document databases like Amazon DocumentDB, Azure Cosmos DB, or Oracle NoSQL Database, offering enterprise-grade features including horizontal scaling, replica sets, and sharding without licensing costs, with features like ACID transactions, aggregation pipelines, and full-text search.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum (SSD strongly recommended for performance)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for replica sets and sharding</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: Not officially supported by MongoDB Inc.</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 27017 (default MongoDB port)</li>\n<li class=\"mobile-list-item\">Port 27018 (default shard port)</li>\n<li class=\"mobile-list-item\">Port 27019 (default config server port)</li>\n<li class=\"mobile-list-item\">Additional ports for replica set members</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">OpenSSL, PCRE, zlib (usually included in distributions)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create MongoDB 7.0 repository\nsudo tee /etc/yum.repos.d/mongodb-org-7.0.repo &lt;&lt;EOF\n[mongodb-org-7.0]\nname=MongoDB Repository\nbaseurl=https://repo.mongodb.org/yum/redhat/\\$releasever/mongodb-org/7.0/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://www.mongodb.org/static/pgp/server-7.0.asc\nEOF\n\n# Install MongoDB\nsudo yum install -y mongodb-org mongodb-org-tools mongodb-mongosh\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=27017/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmongosh --eval &#039;db.runCommand(&quot;connectionStatus&quot;)&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install prerequisite packages\nsudo apt install -y wget gnupg software-properties-common\n\n# Import MongoDB GPG key\nwget -qO /tmp/mongodb-server-7.0.asc https://www.mongodb.org/static/pgp/server-7.0.asc\nsudo mv /tmp/mongodb-server-7.0.asc /etc/apt/trusted.gpg.d/mongodb-server-7.0.asc\n\n# Add MongoDB repository\necho &quot;deb [arch=amd64,arm64] https://repo.mongodb.org/apt/ubuntu $(lsb_release -cs)/mongodb-org/7.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list\n\n# Update package index\nsudo apt update\n\n# Install MongoDB\nsudo apt install -y mongodb-org mongodb-org-tools mongodb-mongosh\n\n# Enable and start service\nsudo systemctl enable --now mongod\n\n# Configure firewall\nsudo ufw allow 27017</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB is available in AUR\nyay -S mongodb-bin mongodb-tools-bin mongosh-bin\n\n# Alternative: Install from AUR with makepkg\ngit clone https://aur.archlinux.org/mongodb-bin.git\ncd mongodb-bin\nmakepkg -si\n\n# Create mongodb user and group\nsudo useradd -r -s /sbin/nologin mongodb\n\n# Create necessary directories\nsudo mkdir -p /var/lib/mongodb /var/log/mongodb\nsudo chown mongodb:mongodb /var/lib/mongodb /var/log/mongodb\n\n# Enable and start service\nsudo systemctl enable --now mongodb\n\n# Configuration location: /etc/mongodb.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB is not officially supported on Alpine Linux\n# Use Docker for MongoDB on Alpine:\n\n# Install Docker\napk add --no-cache docker docker-compose\n\n# Enable and start Docker\nrc-update add docker default\nrc-service docker start\n\n# Run MongoDB container\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0\n\n# Verify installation\ndocker exec mongodb mongosh --eval &#039;db.runCommand(&quot;connectionStatus&quot;)&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB is not officially packaged for openSUSE/SLES\n# Use Docker or manual installation:\n\n# Method 1: Docker installation\nsudo zypper install -y docker docker-compose\nsudo systemctl enable --now docker\n\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0\n\n# Method 2: Manual installation from tarball\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel80-7.0.4.tgz\ntar -xzf mongodb-linux-x86_64-rhel80-7.0.4.tgz\nsudo cp mongodb-linux-x86_64-rhel80-7.0.4/bin/* /usr/local/bin/\n\n# Create mongodb user and directories\nsudo useradd -r mongodb\nsudo mkdir -p /var/lib/mongodb /var/log/mongodb\nsudo chown mongodb:mongodb /var/lib/mongodb /var/log/mongodb</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew tap mongodb/brew\nbrew install mongodb-community@7.0 mongodb-database-tools mongosh\n\n# Start MongoDB service\nbrew services start mongodb/brew/mongodb-community@7.0\n\n# Or run manually\nmongod --config /usr/local/etc/mongod.conf\n\n# Configuration location: /usr/local/etc/mongod.conf\n# Alternative: /opt/homebrew/etc/mongod.conf (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB is not officially supported on FreeBSD\n# Use Docker or compile from source:\n\n# Install Docker\npkg install docker\necho &#039;docker_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\nservice docker start\n\n# Run MongoDB container\ndocker run -d \\\n  --name mongodb \\\n  --restart unless-stopped \\\n  -p 27017:27017 \\\n  -v /var/lib/mongodb:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=SecurePassword123! \\\n  mongo:7.0</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install mongodb mongodb-shell\n\n# Method 2: Using Scoop\nscoop bucket add main\nscoop install mongodb mongodb-shell\n\n# Method 3: Manual installation\n# Download from https://www.mongodb.com/download-center/community\n# Run mongodb-windows-x86_64-*.msi\n\n# Install as Windows service\n&quot;C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.exe&quot; --config &quot;C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg&quot; --install\n\n# Start service\nnet start MongoDB\n\n# Configuration location: C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create mongodb user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/mongodb -s /sbin/nologin -c &quot;MongoDB Server&quot; mongodb</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/mongod.conf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/mongod.conf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/mongodb.conf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: Docker container configuration</li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/mongod.conf</code> (manual installation)</li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/mongod.conf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: Docker container configuration</li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\Program Files\\MongoDB\\Server\\7.0\\bin\\mongod.cfg</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/mongod.conf\nstorage:\n  dbPath: /var/lib/mongodb\n  journal:\n    enabled: true\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 2\n      journalCompressor: snappy\n\nsystemLog:\n  destination: file\n  path: /var/log/mongodb/mongod.log\n  logAppend: true\n  logRotate: rename\n\nnet:\n  port: 27017\n  bindIp: 127.0.0.1\n  maxIncomingConnections: 200\n\nsecurity:\n  authorization: enabled\n  javascriptEnabled: false\n\noperationProfiling:\n  slowOpThresholdMs: 100\n\nreplication:\n  replSetName: rs0\n\nprocessManagement:\n  fork: true\n  pidFilePath: /var/run/mongodb/mongod.pid</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if MongoDB is running\nsudo systemctl status mongod\n\n# Test connection\nmongosh --eval &#039;db.runCommand(&quot;connectionStatus&quot;)&#039;\n\n# Check database status\nmongosh --eval &#039;db.runCommand(&quot;serverStatus&quot;)&#039;\n\n# Check configuration\nmongosh --eval &#039;db.runCommand(&quot;getCmdLineOpts&quot;)&#039;\n\n# Test basic operations\nmongosh --eval &#039;use test; db.testCollection.insertOne({test: &quot;document&quot;}); db.testCollection.findOne()&#039;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Enable authentication and create admin users immediately after installation!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable MongoDB to start on boot\nsudo systemctl enable mongod\n\n# Start MongoDB\nsudo systemctl start mongod\n\n# Stop MongoDB\nsudo systemctl stop mongod\n\n# Restart MongoDB\nsudo systemctl restart mongod\n\n# Reload configuration (graceful restart)\nsudo systemctl reload mongod\n\n# Check status\nsudo systemctl status mongod\n\n# View logs\nsudo journalctl -u mongod -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB runs in Docker container on Alpine\ndocker start mongodb\ndocker stop mongodb\ndocker restart mongodb\n\n# Check status\ndocker ps | grep mongodb\n\n# View logs\ndocker logs -f mongodb</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB runs in Docker container on FreeBSD\nservice docker start\n\ndocker start mongodb\ndocker stop mongodb\ndocker restart mongodb\n\n# Check status\ndocker ps | grep mongodb</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start mongodb/brew/mongodb-community@7.0\nbrew services stop mongodb/brew/mongodb-community@7.0\nbrew services restart mongodb/brew/mongodb-community@7.0\n\n# Check status\nbrew services list | grep mongodb\n\n# Manual control\nmongod --config /usr/local/etc/mongod.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start MongoDB service\nnet start MongoDB\n\n# Stop MongoDB service\nnet stop MongoDB\n\n# Using PowerShell\nStart-Service MongoDB\nStop-Service MongoDB\nRestart-Service MongoDB\n\n# Check status\nGet-Service MongoDB\n\n# View logs\nGet-EventLog -LogName Application -Source MongoDB</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"replica-set-configuration\" class=\"mobile-header\">Replica Set Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Replica set configuration\nreplication:\n  replSetName: rs0\n\n# Sharding configuration (config server)\nsharding:\n  clusterRole: configsvr\n\nreplication:\n  replSetName: configReplSet\n\n# Sharding configuration (shard)\nsharding:\n  clusterRole: shardsvr\n\nreplication:\n  replSetName: shardReplSet</code></pre>\n      </div>\n    </div>\n<h3 id=\"sharding-setup\" class=\"mobile-header\">Sharding Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Initialize config server replica set\nrs.initiate({\n  _id: &quot;configReplSet&quot;,\n  configsvr: true,\n  members: [\n    { _id: 0, host: &quot;config1.example.com:27019&quot; },\n    { _id: 1, host: &quot;config2.example.com:27019&quot; },\n    { _id: 2, host: &quot;config3.example.com:27019&quot; }\n  ]\n})\n\n// Initialize shard replica sets\nrs.initiate({\n  _id: &quot;shard1ReplSet&quot;,\n  members: [\n    { _id: 0, host: &quot;shard1-a.example.com:27018&quot; },\n    { _id: 1, host: &quot;shard1-b.example.com:27018&quot; },\n    { _id: 2, host: &quot;shard1-c.example.com:27018&quot; }\n  ]\n})\n\n// Add shards to cluster (from mongos)\nsh.addShard(&quot;shard1ReplSet/shard1-a.example.com:27018,shard1-b.example.com:27018,shard1-c.example.com:27018&quot;)</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Security configuration\nsecurity:\n  authorization: enabled\n  clusterAuthMode: keyFile\n  keyFile: /etc/mongodb/mongodb-keyfile\n  javascriptEnabled: false\n  \nnet:\n  tls:\n    mode: requireTLS\n    certificateKeyFile: /etc/mongodb/ssl/mongodb.pem\n    CAFile: /etc/mongodb/ssl/ca.pem\n    allowInvalidHostnames: false\n    allowInvalidCertificates: false\n\nauditLog:\n  destination: file\n  format: JSON\n  path: /var/log/mongodb/audit.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/mongodb\nupstream mongodb_backend {\n    server 127.0.0.1:27017 max_fails=3 fail_timeout=30s;\n    server 127.0.0.1:27018 max_fails=3 fail_timeout=30s backup;\n}\n\nserver {\n    listen 27017;\n    proxy_pass mongodb_backend;\n    proxy_timeout 1s;\n    proxy_responses 1;\n    error_log /var/log/nginx/mongodb.log;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend mongodb_frontend\n    bind *:27017\n    mode tcp\n    option tcplog\n    default_backend mongodb_servers\n\nbackend mongodb_servers\n    mode tcp\n    balance roundrobin\n    option tcp-check\n    tcp-check connect\n    server mongodb1 127.0.0.1:27017 check\n    server mongodb2 127.0.0.1:27018 check backup</code></pre>\n      </div>\n    </div>\n<h3 id=\"connection-pooling-with-mongos\" class=\"mobile-header\">Connection Pooling with mongos</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># mongos configuration\nsharding:\n  configDB: configReplSet/config1.example.com:27019,config2.example.com:27019,config3.example.com:27019\n\nnet:\n  port: 27017\n  bindIp: 0.0.0.0\n  maxIncomingConnections: 1000\n\nsystemLog:\n  destination: file\n  path: /var/log/mongodb/mongos.log\n  logAppend: true</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates for MongoDB\nsudo mkdir -p /etc/mongodb/ssl\n\n# Create CA certificate\nsudo openssl genrsa -out /etc/mongodb/ssl/ca-key.pem 4096\nsudo openssl req -new -x509 -days 3650 -key /etc/mongodb/ssl/ca-key.pem -out /etc/mongodb/ssl/ca.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=MongoDB-CA&quot;\n\n# Create server certificate\nsudo openssl genrsa -out /etc/mongodb/ssl/mongodb-key.pem 4096\nsudo openssl req -new -key /etc/mongodb/ssl/mongodb-key.pem -out /etc/mongodb/ssl/mongodb-req.pem -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=mongodb.example.com&quot;\nsudo openssl x509 -req -in /etc/mongodb/ssl/mongodb-req.pem -CA /etc/mongodb/ssl/ca.pem -CAkey /etc/mongodb/ssl/ca-key.pem -CAcreateserial -out /etc/mongodb/ssl/mongodb-cert.pem -days 365\n\n# Combine certificate and key\nsudo cat /etc/mongodb/ssl/mongodb-cert.pem /etc/mongodb/ssl/mongodb-key.pem &gt; /etc/mongodb/ssl/mongodb.pem\n\n# Set permissions\nsudo chown -R mongodb:mongodb /etc/mongodb/ssl\nsudo chmod 600 /etc/mongodb/ssl/*.pem\nsudo chmod 644 /etc/mongodb/ssl/ca.pem</code></pre>\n      </div>\n    </div>\n<h3 id=\"user-security-and-authentication\" class=\"mobile-header\">User Security and Authentication</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Create admin user\nuse admin\ndb.createUser({\n  user: &quot;admin&quot;,\n  pwd: &quot;SecureAdminPassword123!&quot;,\n  roles: [\n    { role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;readWriteAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;dbAdminAnyDatabase&quot;, db: &quot;admin&quot; },\n    { role: &quot;clusterAdmin&quot;, db: &quot;admin&quot; }\n  ]\n})\n\n// Create application user\nuse myapp\ndb.createUser({\n  user: &quot;appuser&quot;,\n  pwd: &quot;SecureAppPassword123!&quot;,\n  roles: [\n    { role: &quot;readWrite&quot;, db: &quot;myapp&quot; }\n  ]\n})\n\n// Create backup user\nuse admin\ndb.createUser({\n  user: &quot;backup&quot;,\n  pwd: &quot;BackupPassword123!&quot;,\n  roles: [\n    { role: &quot;backup&quot;, db: &quot;admin&quot; },\n    { role: &quot;clusterMonitor&quot;, db: &quot;admin&quot; }\n  ]\n})\n\n// Create monitoring user\ndb.createUser({\n  user: &quot;monitor&quot;,\n  pwd: &quot;MonitorPassword123!&quot;,\n  roles: [\n    { role: &quot;clusterMonitor&quot;, db: &quot;admin&quot; },\n    { role: &quot;read&quot;, db: &quot;local&quot; }\n  ]\n})</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 27017\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=mongodb\nsudo firewall-cmd --permanent --zone=mongodb --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=mongodb --add-port=27017/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 27017 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 27017\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;MongoDB&quot; -Direction Inbound -Protocol TCP -LocalPort 27017 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"database-creation-and-management\" class=\"mobile-header\">Database Creation and Management</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Create application database\nuse myapp\n\n// Create collections with validation\ndb.createCollection(&quot;users&quot;, {\n  validator: {\n    $jsonSchema: {\n      bsonType: &quot;object&quot;,\n      required: [&quot;username&quot;, &quot;email&quot;],\n      properties: {\n        username: {\n          bsonType: &quot;string&quot;,\n          description: &quot;must be a string and is required&quot;\n        },\n        email: {\n          bsonType: &quot;string&quot;,\n          pattern: &quot;^.+@.+$&quot;,\n          description: &quot;must be a valid email address&quot;\n        }\n      }\n    }\n  }\n})\n\n// Create indexes for performance\ndb.users.createIndex({ username: 1 }, { unique: true })\ndb.users.createIndex({ email: 1 }, { unique: true })\ndb.users.createIndex({ created_at: 1 })\n\n// Create time-series collection (MongoDB 5.0+)\ndb.createCollection(&quot;logs&quot;, {\n  timeseries: {\n    timeField: &quot;timestamp&quot;,\n    metaField: &quot;source&quot;,\n    granularity: &quot;minutes&quot;\n  }\n})</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Analyze collection statistics\ndb.stats()\ndb.users.stats()\n\n// Check index usage\ndb.users.aggregate([{ $indexStats: {} }])\n\n// Optimize queries with explain\ndb.users.find({ username: &quot;john&quot; }).explain(&quot;executionStats&quot;)\n\n// Create compound indexes\ndb.orders.createIndex({ user_id: 1, created_at: -1 })\n\n// Text search index\ndb.products.createIndex({ name: &quot;text&quot;, description: &quot;text&quot; })</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB-specific system optimizations\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# MongoDB optimizations\nvm.swappiness = 1\nvm.max_map_count = 262144\nnet.core.somaxconn = 4096\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_keepalive_time = 120\nnet.ipv4.tcp_max_syn_backlog = 4096\nEOF\n\nsudo sysctl -p\n\n# Disable Transparent Huge Pages\necho &#039;never&#039; | sudo tee /sys/kernel/mm/transparent_hugepage/enabled\necho &#039;never&#039; | sudo tee /sys/kernel/mm/transparent_hugepage/defrag\n\n# Make THP disable permanent\nsudo tee /etc/systemd/system/disable-thp.service &lt;&lt;EOF\n[Unit]\nDescription=Disable Transparent Huge Pages (THP)\nDefaultDependencies=no\nAfter=sysinit.target local-fs.target\nBefore=mongod.service\n\n[Service]\nType=oneshot\nExecStart=/bin/sh -c &#039;echo never | tee /sys/kernel/mm/transparent_hugepage/enabled &gt; /dev/null&#039;\nExecStart=/bin/sh -c &#039;echo never | tee /sys/kernel/mm/transparent_hugepage/defrag &gt; /dev/null&#039;\n\n[Install]\nWantedBy=basic.target\nEOF\n\nsudo systemctl enable --now disable-thp</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-performance-tuning\" class=\"mobile-header\">MongoDB Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># High-performance MongoDB configuration\nstorage:\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 8  # 50% of available RAM\n      journalCompressor: snappy\n      directoryForIndexes: true\n    collectionConfig:\n      blockCompressor: snappy\n    indexConfig:\n      prefixCompression: true\n\noperationProfiling:\n  mode: slowOp\n  slowOpThresholdMs: 100\n  slowOpSampleRate: 1.0\n\nnet:\n  maxIncomingConnections: 1000\n  serviceExecutor: adaptive\n\nsetParameter:\n  cursorTimeoutMillis: 600000\n  failIndexKeyTooLong: false\n  maxIndexBuildDrainBatchSize: 128\n  wiredTigerConcurrentReadTransactions: 128\n  wiredTigerConcurrentWriteTransactions: 128</code></pre>\n      </div>\n    </div>\n<h3 id=\"query-optimization\" class=\"mobile-header\">Query Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Enable profiler for slow operations\ndb.setProfilingLevel(2, { slowms: 100 })\n\n// Analyze slow queries\ndb.system.profile.find().limit(5).sort({ ts: -1 }).pretty()\n\n// Index optimization\ndb.collection.getIndexes()\ndb.collection.dropIndex(&quot;index_name&quot;)\n\n// Use aggregation pipeline optimization\ndb.collection.aggregate([\n  { $match: { status: &quot;active&quot; } },\n  { $sort: { created_at: -1 } },\n  { $limit: 100 }\n], { allowDiskUse: true })</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Server status and statistics\ndb.runCommand(&quot;serverStatus&quot;)\ndb.runCommand(&quot;dbStats&quot;)\ndb.runCommand(&quot;collStats&quot;, &quot;collection_name&quot;)\n\n// Connection and operation monitoring\ndb.runCommand(&quot;currentOp&quot;)\ndb.runCommand(&quot;top&quot;)\n\n// Replica set monitoring\nrs.status()\nrs.printReplicationInfo()\nrs.printSlaveReplicationInfo()\n\n// Sharding monitoring\nsh.status()\ndb.printShardingStatus()</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MongoDB Exporter for Prometheus\nwget https://github.com/percona/mongodb_exporter/releases/download/v0.39.0/mongodb_exporter-0.39.0.linux-amd64.tar.gz\ntar xzf mongodb_exporter-*.tar.gz\nsudo cp mongodb_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/mongodb_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=MongoDB Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=mongodb\nEnvironment=MONGODB_URI=&quot;mongodb://monitor:MonitorPassword123!@localhost:27017/admin&quot;\nExecStart=/usr/local/bin/mongodb_exporter --mongodb.uri=\\$MONGODB_URI\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now mongodb_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mongodb-health-check.sh\n\n# Check MongoDB service\nif ! systemctl is-active mongod &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: MongoDB service is not running&quot;\n    exit 2\nfi\n\n# Check connectivity\nif ! mongosh --quiet --eval &quot;db.runCommand(&#039;ping&#039;)&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;CRITICAL: Cannot connect to MongoDB&quot;\n    exit 2\nfi\n\n# Check replica set status (if configured)\nREPLICA_STATUS=$(mongosh --quiet --eval &quot;rs.status().ok&quot; 2&gt;/dev/null)\nif [ &quot;$REPLICA_STATUS&quot; = &quot;1&quot; ]; then\n    PRIMARY_COUNT=$(mongosh --quiet --eval &quot;rs.status().members.filter(m =&gt; m.stateStr === &#039;PRIMARY&#039;).length&quot; 2&gt;/dev/null)\n    if [ &quot;$PRIMARY_COUNT&quot; != &quot;1&quot; ]; then\n        echo &quot;WARNING: No primary or multiple primaries in replica set&quot;\n        exit 1\n    fi\nfi\n\n# Check connections\nCONNECTIONS=$(mongosh --quiet --eval &quot;db.serverStatus().connections.current&quot; 2&gt;/dev/null)\nMAX_CONNECTIONS=$(mongosh --quiet --eval &quot;db.serverStatus().connections.available&quot; 2&gt;/dev/null)\nCONNECTION_USAGE=$((CONNECTIONS * 100 / (CONNECTIONS + MAX_CONNECTIONS)))\n\nif [ $CONNECTION_USAGE -gt 80 ]; then\n    echo &quot;WARNING: High connection usage: ${CONNECTION_USAGE}%&quot;\n    exit 1\nfi\n\necho &quot;OK: MongoDB is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mongodb-backup.sh\n\nBACKUP_DIR=&quot;/backup/mongodb/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Full database backup\nmongodump \\\n  --host=&quot;localhost:27017&quot; \\\n  --username=backup \\\n  --password=BackupPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --out &quot;$BACKUP_DIR&quot;\n\n# Oplog backup for point-in-time recovery\nmongodump \\\n  --host=&quot;localhost:27017&quot; \\\n  --username=backup \\\n  --password=BackupPassword123! \\\n  --authenticationDatabase=admin \\\n  --db=local \\\n  --collection=oplog.rs \\\n  --gzip \\\n  --out &quot;$BACKUP_DIR/oplog&quot;\n\n# Configuration backup\ncp -r /etc/mongod.conf &quot;$BACKUP_DIR/&quot;\n\n# Compress backup\ntar czf &quot;$BACKUP_DIR.tar.gz&quot; -C &quot;$(dirname &quot;$BACKUP_DIR&quot;)&quot; &quot;$(basename &quot;$BACKUP_DIR&quot;)&quot;\nrm -rf &quot;$BACKUP_DIR&quot;\n\necho &quot;Backup completed: $BACKUP_DIR.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mongodb-restore.sh\n\nBACKUP_FILE=&quot;$1&quot;\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.tar.gz&gt;&quot;\n    exit 1\nfi\n\n# Extract backup\nBACKUP_DIR=&quot;/tmp/mongodb-restore-$(date +%s)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar xzf &quot;$BACKUP_FILE&quot; -C &quot;$BACKUP_DIR&quot; --strip-components=1\n\n# Stop applications using the database\necho &quot;Stopping applications...&quot;\n\n# Restore database\necho &quot;Restoring database from $BACKUP_FILE...&quot;\nmongorestore \\\n  --host=&quot;localhost:27017&quot; \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --drop \\\n  &quot;$BACKUP_DIR&quot;\n\n# Cleanup\nrm -rf &quot;$BACKUP_DIR&quot;\n\necho &quot;Restore completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"point-in-time-recovery\" class=\"mobile-header\">Point-in-Time Recovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# mongodb-pitr.sh\n\nBACKUP_FILE=&quot;$1&quot;\nRECOVERY_TIME=&quot;$2&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ] || [ -z &quot;$RECOVERY_TIME&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.tar.gz&gt; &lt;recovery-time&gt;&quot;\n    echo &quot;Example: $0 backup.tar.gz &#039;2024-01-15T14:30:00.000Z&#039;&quot;\n    exit 1\nfi\n\n# Extract and restore base backup\nBACKUP_DIR=&quot;/tmp/mongodb-pitr-$(date +%s)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar xzf &quot;$BACKUP_FILE&quot; -C &quot;$BACKUP_DIR&quot; --strip-components=1\n\n# Restore base backup\nmongorestore \\\n  --host=&quot;localhost:27017&quot; \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --gzip \\\n  --drop \\\n  &quot;$BACKUP_DIR&quot;\n\n# Apply oplog up to recovery point\nmongorestore \\\n  --host=&quot;localhost:27017&quot; \\\n  --username=admin \\\n  --password=SecureAdminPassword123! \\\n  --authenticationDatabase=admin \\\n  --oplogReplay \\\n  --oplogLimit=&quot;$(date -d &quot;$RECOVERY_TIME&quot; +%s):1&quot; \\\n  --gzip \\\n  &quot;$BACKUP_DIR/oplog&quot;\n\n# Cleanup\nrm -rf &quot;$BACKUP_DIR&quot;\n\necho &quot;Point-in-time recovery completed to $RECOVERY_TIME&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>MongoDB won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mongod -f\nsudo tail -f /var/log/mongodb/mongod.log\n\n# Check disk space\ndf -h /var/lib/mongodb\n\n# Check permissions\nls -la /var/lib/mongodb\n\n# Repair database\nmongod --repair --dbpath /var/lib/mongodb</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if MongoDB is listening\nsudo ss -tlnp | grep :27017\n\n# Test local connection\nmongosh --eval &quot;db.runCommand(&#039;ping&#039;)&quot;\n\n# Check authentication\nmongosh admin --username admin\n\n# Check bind address\nmongosh --eval &quot;db.runCommand(&#039;getCmdLineOpts&#039;)&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check slow queries\nmongosh --eval &quot;db.setProfilingLevel(2, {slowms: 100})&quot;\nmongosh --eval &quot;db.system.profile.find().sort({ts:-1}).limit(5)&quot;\n\n# Check index usage\nmongosh --eval &quot;db.collection.getIndexes()&quot;\n\n# Check server status\nmongosh --eval &quot;db.serverStatus()&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start MongoDB with verbose logging\nsudo systemctl edit mongod\n# Add:\n[Service]\nEnvironment=&quot;MONGOD_OPTIONS=--verbose&quot;\n\nsudo systemctl daemon-reload\nsudo systemctl restart mongod\n\n# Enable profiling for all operations\nmongosh --eval &quot;db.setProfilingLevel(2)&quot;\n\n# View debug logs\nsudo tail -f /var/log/mongodb/mongod.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum check-update mongodb-org\nsudo yum update mongodb-org\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade mongodb-org\n\n# Arch Linux\nyay -Syu mongodb-bin\n\n# macOS\nbrew upgrade mongodb-community@7.0\n\n# Docker (Alpine/FreeBSD)\ndocker pull mongo:7.0\ndocker stop mongodb\ndocker rm mongodb\n# Re-run docker run command with new image\n\n# Always backup before updates\n./mongodb-backup.sh\n\n# Restart after updates\nsudo systemctl restart mongod</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# mongodb-maintenance.sh\n\n# Compact collections\nmongosh admin --username admin --password SecureAdminPassword123! &lt;&lt;EOF\nuse myapp\ndb.runCommand({compact: &quot;collection_name&quot;})\nEOF\n\n# Update collection statistics\nmongosh admin --username admin --password SecureAdminPassword123! &lt;&lt;EOF\ndb.runCommand({planCacheClear: &quot;&quot;})\nEOF\n\n# Clean up old oplogs (automatically managed but can be tuned)\nmongosh admin --username admin --password SecureAdminPassword123! &lt;&lt;EOF\nuse local\ndb.oplog.rs.find().sort({\\$natural:-1}).limit(1)\nEOF\n\necho &quot;MongoDB maintenance completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;*/5 * * * * /usr/local/bin/mongodb-health-check.sh&quot; | sudo crontab -\n\n# Log rotation\nsudo tee /etc/logrotate.d/mongodb &lt;&lt;EOF\n/var/log/mongodb/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 644 mongodb mongodb\n    postrotate\n        /bin/kill -SIGUSR1 \\$(cat /var/run/mongodb/mongod.pid 2&gt;/dev/null) 2&gt;/dev/null || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"nodejs-integration\" class=\"mobile-header\">Node.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Using MongoDB Node.js driver\nconst { MongoClient } = require(&#039;mongodb&#039;);\n\nconst client = new MongoClient(&#039;mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp&#039;, {\n  tls: true,\n  tlsCertificateKeyFile: &#039;/etc/mongodb/ssl/client.pem&#039;,\n  tlsCAFile: &#039;/etc/mongodb/ssl/ca.pem&#039;,\n  authSource: &#039;myapp&#039;\n});\n\nasync function connect() {\n  await client.connect();\n  const db = client.db(&#039;myapp&#039;);\n  return db;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"python-integration\" class=\"mobile-header\">Python Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Using PyMongo\nimport pymongo\nfrom pymongo import MongoClient\n\nclient = MongoClient(&#039;mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp&#039;, \n                    tls=True,\n                    tlsCertificateKeyFile=&#039;/etc/mongodb/ssl/client.pem&#039;,\n                    tlsCAFile=&#039;/etc/mongodb/ssl/ca.pem&#039;,\n                    authSource=&#039;myapp&#039;)\n\ndb = client.myapp\ncollection = db.users</code></pre>\n      </div>\n    </div>\n<h3 id=\"java-integration\" class=\"mobile-header\">Java Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"java\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">java</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-java\">// Using MongoDB Java driver\nimport com.mongodb.client.MongoClients;\nimport com.mongodb.client.MongoClient;\nimport com.mongodb.client.MongoDatabase;\nimport com.mongodb.MongoClientSettings;\nimport com.mongodb.ConnectionString;\n\nMongoClientSettings settings = MongoClientSettings.builder()\n    .applyConnectionString(new ConnectionString(&quot;mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp&quot;))\n    .applyToSslSettings(builder -&gt; \n        builder.enabled(true)\n               .invalidHostNameAllowed(false))\n    .build();\n\nMongoClient mongoClient = MongoClients.create(settings);\nMongoDatabase database = mongoClient.getDatabase(&quot;myapp&quot;);</code></pre>\n      </div>\n    </div>\n<h3 id=\"expressjs-integration\" class=\"mobile-header\">Express.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Using Mongoose ODM\nconst mongoose = require(&#039;mongoose&#039;);\n\nmongoose.connect(&#039;mongodb://appuser:SecureAppPassword123!@localhost:27017/myapp&#039;, {\n  tls: true,\n  tlsCertificateKeyFile: &#039;/etc/mongodb/ssl/client.pem&#039;,\n  tlsCAFile: &#039;/etc/mongodb/ssl/ca.pem&#039;,\n  authSource: &#039;myapp&#039;\n});\n\nconst userSchema = new mongoose.Schema({\n  username: { type: String, required: true, unique: true },\n  email: { type: String, required: true, unique: true },\n  created_at: { type: Date, default: Date.now }\n});\n\nmodule.exports = mongoose.model(&#039;User&#039;, userSchema);</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official MongoDB Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://university.mongodb.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB University</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/manual/administration/security-checklist/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Security Checklist</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/manual/administration/analyzing-mongodb-performance/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Performance Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/manual/tutorial/deploy-replica-set/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Replica Set Tutorial</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mongodb.com/manual/tutorial/deploy-shard-cluster/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Sharding Tutorial</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.mongodb.com/community/forums/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.mongodb.com/blog\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">MongoDB Blog</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"16 min","wordCount":3152,"lastBuilt":"2025-09-14T01:30:43.521Z"},{"name":"nagios","displayName":"Nagios","slug":"nagios","description":"Repo for nagios","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nagios","updatedAt":"2025-09-08T03:12:01Z","createdAt":"2025-09-08T03:11:50Z","readmeRaw":"## 👋 Welcome to nagios 🚀  \n\nnagios README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-nagios\" class=\"mobile-header\">👋 Welcome to nagios 🚀  </h2>\n<p class=\"mobile-paragraph\">nagios README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:43.339Z"},{"name":"nextcloud","displayName":"Nextcloud","slug":"nextcloud","description":"Repo for nextcloud","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nextcloud","updatedAt":"2025-09-08T03:12:12Z","createdAt":"2025-09-08T03:12:02Z","readmeRaw":"# Nextcloud Installation Guide\n\nSelf-hosted file sync and share platform with collaboration features, calendar, contacts, and extensive app ecosystem.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Web server (Apache or NGINX)\n- PHP 8.0+ with required extensions\n- Database (MySQL/MariaDB, PostgreSQL, or SQLite)\n- 2GB RAM minimum, 4GB+ recommended\n\n## Installation\n\n### LAMP Stack Setup (Apache + MySQL + PHP)\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# Enable services\nsudo systemctl enable --now apache2 mariadb  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb    # RHEL/CentOS\n```\n\n### Database Setup\n```bash\n# Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create Nextcloud database\nsudo mysql -u root -p <<EOF\nCREATE DATABASE nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE USER 'nextclouduser'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON nextcloud.* TO 'nextclouduser'@'localhost';\nFLUSH PRIVILEGES;\nEXIT\nEOF\n```\n\n### Nextcloud Download and Setup\n```bash\n# Download Nextcloud\ncd /tmp\nwget https://download.nextcloud.com/server/releases/latest.tar.bz2\ntar -xjf latest.tar.bz2\n\n# Move to web directory\nsudo cp -R nextcloud /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/nextcloud  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/nextcloud      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/nextcloud/ -type f -print0 | xargs -0 chmod 0640\nsudo find /var/www/html/nextcloud/ -type d -print0 | xargs -0 chmod 0750\nsudo chmod 750 /var/www/html/nextcloud\nsudo chmod -R 770 /var/www/html/nextcloud/data\nsudo chmod -R 770 /var/www/html/nextcloud/apps\nsudo chmod -R 770 /var/www/html/nextcloud/config\n```\n\n### Using Docker Compose\n```bash\n# Create docker-compose.yml\nmkdir -p ~/nextcloud && cd ~/nextcloud\n\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  nextcloud:\n    image: nextcloud:latest\n    restart: unless-stopped\n    ports:\n      - \"8080:80\"\n    volumes:\n      - nextcloud_data:/var/www/html\n      - ./config:/var/www/html/config\n      - ./custom_apps:/var/www/html/custom_apps\n      - ./data:/var/www/html/data\n    environment:\n      - MYSQL_HOST=db\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=secure_password\n      - NEXTCLOUD_ADMIN_USER=admin\n      - NEXTCLOUD_ADMIN_PASSWORD=admin_password\n      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.example.com\n    depends_on:\n      - db\n      - redis\n    networks:\n      - nextcloud\n\n  db:\n    image: mariadb:10.6\n    restart: unless-stopped\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=root_password\n      - MYSQL_PASSWORD=secure_password\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n    networks:\n      - nextcloud\n\n  redis:\n    image: redis:alpine\n    restart: unless-stopped\n    networks:\n      - nextcloud\n\nvolumes:\n  nextcloud_data:\n  db_data:\n\nnetworks:\n  nextcloud:\n    driver: bridge\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f nextcloud\n```\n\n## Configuration\n\n### Apache Virtual Host\n```bash\n# Create Apache virtual host\nsudo tee /etc/apache2/sites-available/nextcloud.conf > /dev/null <<EOF\n<VirtualHost *:80>\n    ServerName nextcloud.example.com\n    DocumentRoot /var/www/html/nextcloud\n\n    <Directory /var/www/html/nextcloud/>\n        Require all granted\n        AllowOverride All\n        Options FollowSymLinks MultiViews\n        \n        <IfModule mod_dav.c>\n            Dav off\n        </IfModule>\n    </Directory>\n\n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=15552000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options \"SAMEORIGIN\"\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Referrer-Policy \"no-referrer\"\n    Header always set Feature-Policy \"camera 'none'; microphone 'none'\"\n\n    ErrorLog \\${APACHE_LOG_DIR}/nextcloud_error.log\n    CustomLog \\${APACHE_LOG_DIR}/nextcloud_access.log combined\n</VirtualHost>\nEOF\n\n# Enable required modules\nsudo a2enmod rewrite headers env dir mime ssl\nsudo a2ensite nextcloud.conf\nsudo systemctl restart apache2\n```\n\n### NGINX Configuration\n```bash\n# Create NGINX server block\nsudo tee /etc/nginx/sites-available/nextcloud > /dev/null <<EOF\nupstream php-handler {\n    server unix:/var/run/php/php8.0-fpm.sock;\n}\n\nserver {\n    listen 80;\n    server_name nextcloud.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nextcloud.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/ssl/certs/nextcloud.crt;\n    ssl_certificate_key /etc/ssl/private/nextcloud.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=15768000; includeSubDomains; preload\" always;\n    add_header Referrer-Policy \"no-referrer\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-Download-Options \"noopen\" always;\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Permitted-Cross-Domain-Policies \"none\" always;\n    add_header X-Robots-Tag \"none\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n\n    # Remove X-Powered-By\n    fastcgi_hide_header X-Powered-By;\n\n    # Path to the root of your installation\n    root /var/www/html/nextcloud;\n    index index.php index.html /index.php\\$request_uri;\n\n    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients\n    location = / {\n        if ( \\$http_user_agent ~ ^DavClnt ) {\n            return 302 /remote.php/webdav/\\$is_args\\$args;\n        }\n    }\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # Make a regex exception for `/.well-known` so that clients can still\n    # access it despite the existence of the regex rule\n    location ^~ /.well-known {\n        location = /.well-known/carddav { return 301 /remote.php/dav/; }\n        location = /.well-known/caldav  { return 301 /remote.php/dav/; }\n        location /.well-known/acme-challenge    { try_files \\$uri \\$uri/ =404; }\n        location /.well-known/pki-validation    { try_files \\$uri \\$uri/ =404; }\n        return 301 /index.php\\$request_uri;\n    }\n\n    # Rules borrowed from `.htaccess` to hide certain paths.\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:\\$|/)  { return 404; }\n    location ~ ^/(?:\\\\.|autotest|occ|issue|indie|db_|console)                { return 404; }\n\n    # Ensure this block, which passes PHP files to the PHP process, is above the blocks\n    # which handle static assets (as seen below). If this block is not declared first,\n    # then Nginx will encounter an infinite rewriting loop when it prepends\n    # `/index.php` to the URI, resulting in a HTTP 500 error response.\n    location ~ \\\\.php(?:\\$|/) {\n        # Required for legacy support\n        rewrite ^/(?!index|remote|public|cron|core\\\\/ajax\\\\/update|status|ocs\\\\/v[12]|updater\\\\/.+|oc[ms]-provider\\\\/.+|.+\\\\/richdocumentscode\\\\/proxy) /index.php\\$request_uri;\n\n        fastcgi_split_path_info ^(.+?\\\\.php)(/.*)\\$;\n        set \\$path_info \\$fastcgi_path_info;\n\n        try_files \\$fastcgi_script_name =404;\n\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        fastcgi_param PATH_INFO \\$path_info;\n        fastcgi_param HTTPS on;\n\n        fastcgi_param modHeadersAvailable true;\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off;\n    }\n\n    location ~ \\\\.(?:css|js|svg|gif|png|jpg|ico)\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 6M;\n        access_log off;\n    }\n\n    location ~ \\\\.woff2?\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 7d;\n        access_log off;\n    }\n\n    # Rule borrowed from `.htaccess`\n    location /remote {\n        return 301 /remote.php\\$request_uri;\n    }\n\n    location / {\n        try_files \\$uri \\$uri/ /index.php\\$request_uri;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nextcloud /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### PHP Configuration\n```bash\n# Optimize PHP for Nextcloud\nsudo nano /etc/php/8.0/apache2/php.ini  # Apache\nsudo nano /etc/php/8.0/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\nupload_max_filesize = 16G\npost_max_size = 16G\nmax_execution_time = 3600\nmax_input_time = 3600\nmax_input_vars = 3000\ndate.timezone = \"America/New_York\"\n\n# OPcache settings\nopcache.enable = 1\nopcache.interned_strings_buffer = 16\nopcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\n\n# APCu for local cache\napc.enable_cli = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php8.0-fpm  # NGINX\n```\n\n### Command Line Installation\n```bash\n# Install via command line\ncd /var/www/html/nextcloud\nsudo -u www-data php occ maintenance:install \\\n  --database=\"mysql\" \\\n  --database-name=\"nextcloud\" \\\n  --database-user=\"nextclouduser\" \\\n  --database-pass=\"secure_password\" \\\n  --admin-user=\"admin\" \\\n  --admin-pass=\"admin_password\" \\\n  --data-dir=\"/var/www/html/nextcloud/data\"\n\n# Configure trusted domains\nsudo -u www-data php occ config:system:set trusted_domains 0 --value=nextcloud.example.com\nsudo -u www-data php occ config:system:set trusted_domains 1 --value=192.168.1.100\n\n# Configure caching\nsudo -u www-data php occ config:system:set memcache.local --value=\"\\\\OC\\\\Memcache\\\\APCu\"\nsudo -u www-data php occ config:system:set memcache.distributed --value=\"\\\\OC\\\\Memcache\\\\Redis\"\nsudo -u www-data php occ config:system:set redis host --value=\"localhost\"\nsudo -u www-data php occ config:system:set redis port --value=6379\n```\n\n## Performance Optimization\n\n### Redis Caching Setup\n```bash\n# Install Redis\nsudo apt install -y redis-server  # Ubuntu/Debian\nsudo yum install -y redis          # RHEL/CentOS\n\nsudo systemctl enable --now redis\n\n# Configure Redis for Nextcloud\nsudo tee -a /etc/redis/redis.conf > /dev/null <<EOF\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\nEOF\n\nsudo systemctl restart redis\n\n# Install Redis PHP extension\nsudo apt install -y php-redis  # Ubuntu/Debian\nsudo yum install -y php-redis   # RHEL/CentOS\n\n# Configure Nextcloud to use Redis\nsudo -u www-data php occ config:system:set memcache.local --value=\"\\\\OC\\\\Memcache\\\\APCu\"\nsudo -u www-data php occ config:system:set memcache.distributed --value=\"\\\\OC\\\\Memcache\\\\Redis\"\nsudo -u www-data php occ config:system:set redis host --value=\"localhost\"\nsudo -u www-data php occ config:system:set redis port --value=6379\n```\n\n### Database Optimization\n```bash\n# MySQL/MariaDB optimization for Nextcloud\nsudo tee -a /etc/mysql/mysql.conf.d/nextcloud.cnf > /dev/null <<EOF\n[mysqld]\ninnodb_buffer_pool_size = 1G\ninnodb_io_capacity = 4000\ninnodb_log_file_size = 128M\ninnodb_log_buffer_size = 32M\ninnodb_flush_log_at_trx_commit = 1\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\n\nquery_cache_type = 1\nquery_cache_limit = 2M\nquery_cache_size = 64M\n\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\njoin_buffer_size = 262144\nsort_buffer_size = 262144\n\nmax_connections = 100\nmax_connect_errors = 10\nconnect_timeout = 5\nwait_timeout = 600\nmax_allowed_packet = 64M\n\nthread_cache_size = 128\nquery_cache_size = 64M\n\n[mysql.server]\ndefault-table-type = innodb\nEOF\n\nsudo systemctl restart mysql\n\n# Add indexes for better performance\nmysql -u nextclouduser -p nextcloud <<EOF\nALTER TABLE oc_jobs ADD INDEX jobs_class_index (class);\nALTER TABLE oc_filecache ADD INDEX fs_mtime (mtime);\nEOF\n```\n\n### Background Jobs\n```bash\n# Configure cron for background jobs\nsudo crontab -u www-data -e\n# Add: */5 * * * * php /var/www/html/nextcloud/occ system:cron\n\n# Or configure via occ command\nsudo -u www-data php occ background:cron\n\n# Check background job status\nsudo -u www-data php occ status\nsudo -u www-data php occ background:job:list\n```\n\n## Security Hardening\n\n### File Permissions and Security\n```bash\n# Secure file permissions script\nsudo tee /usr/local/bin/nextcloud-permissions.sh > /dev/null <<'EOF'\n#!/bin/bash\nncpath='/var/www/html/nextcloud'\nhtuser='www-data'\nhtgroup='www-data'\nrootuser='root'\n\nprintf \"Creating possible missing Directories\\n\"\nmkdir -p $ncpath/data\nmkdir -p $ncpath/assets\nmkdir -p $ncpath/updater\n\nprintf \"chmod Files and Directories\\n\"\nfind ${ncpath}/ -type f -print0 | xargs -0 chmod 0640\nfind ${ncpath}/ -type d -print0 | xargs -0 chmod 0750\n\nprintf \"chown Directories\\n\"\nchown -R ${rootuser}:${htgroup} ${ncpath}/\nchown -R ${htuser}:${htgroup} ${ncpath}/apps/\nchown -R ${htuser}:${htgroup} ${ncpath}/assets/\nchown -R ${htuser}:${htgroup} ${ncpath}/config/\nchown -R ${htuser}:${htgroup} ${ncpath}/data/\nchown -R ${htuser}:${htgroup} ${ncpath}/themes/\nchown -R ${htuser}:${htgroup} ${ncpath}/updater/\n\nchmod +x ${ncpath}/occ\n\nprintf \"chmod/chown .htaccess\\n\"\nif [ -f ${ncpath}/.htaccess ]; then\n    chmod 0644 ${ncpath}/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/.htaccess\nfi\n\nif [ -f ${ncpath}/data/.htaccess ]; then\n    chmod 0644 ${ncpath}/data/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/data/.htaccess\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-permissions.sh\nsudo /usr/local/bin/nextcloud-permissions.sh\n```\n\n### SSL/TLS Configuration\n```bash\n# Install Let's Encrypt certificate\nsudo apt install -y certbot python3-certbot-apache  # Apache\nsudo apt install -y certbot python3-certbot-nginx   # NGINX\n\n# Obtain certificate\nsudo certbot --apache -d nextcloud.example.com  # Apache\nsudo certbot --nginx -d nextcloud.example.com   # NGINX\n\n# Configure HTTPS redirect in Nextcloud\nsudo -u www-data php occ config:system:set overwrite.cli.url --value=\"https://nextcloud.example.com\"\nsudo -u www-data php occ config:system:set overwriteprotocol --value=\"https\"\n```\n\n### Security Scan and Hardening\n```bash\n# Run Nextcloud security scan\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:reset admin\n\n# Configure rate limiting\nsudo -u www-data php occ config:app:set brute_force_protection delay_increment --value=10\nsudo -u www-data php occ config:app:set brute_force_protection fail_tolerance --value=3\n\n# Enable two-factor authentication\nsudo -u www-data php occ app:enable twofactor_totp\nsudo -u www-data php occ app:enable twofactor_u2f\n\n# Configure file access control\nsudo -u www-data php occ config:system:set default_file_access --value=\"restrict\"\n```\n\n## App Management\n\n### Essential Apps Installation\n```bash\n# Install popular apps via occ\nsudo -u www-data php occ app:install calendar\nsudo -u www-data php occ app:install contacts\nsudo -u www-data php occ app:install mail\nsudo -u www-data php occ app:install notes\nsudo -u www-data php occ app:install tasks\nsudo -u www-data php occ app:install deck\nsudo -u www-data php occ app:install polls\nsudo -u www-data php occ app:install richdocuments  # OnlyOffice integration\n\n# Enable apps\nsudo -u www-data php occ app:enable calendar\nsudo -u www-data php occ app:enable contacts\nsudo -u www-data php occ app:enable mail\n\n# List available apps\nsudo -u www-data php occ app:list\n\n# Update apps\nsudo -u www-data php occ app:update --all\n```\n\n### OnlyOffice Integration\n```bash\n# Install OnlyOffice Document Server\ndocker run -d --name onlyoffice \\\n  -p 8080:80 \\\n  -v onlyoffice_data:/var/www/onlyoffice/Data \\\n  -v onlyoffice_log:/var/log/onlyoffice \\\n  -v onlyoffice_fonts:/usr/share/fonts/truetype/custom \\\n  -v onlyoffice_forgotten:/var/lib/onlyoffice/documentserver/App_Data/cache/files/forgotten \\\n  onlyoffice/documentserver\n\n# Configure Nextcloud to use OnlyOffice\nsudo -u www-data php occ config:app:set richdocuments wopi_url --value=\"http://localhost:8080\"\n```\n\n## Backup and Maintenance\n\n### Backup Script\n```bash\nsudo tee /usr/local/bin/nextcloud-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/nextcloud\"\nNC_DIR=\"/var/www/html/nextcloud\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Enable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --on\n\n# Backup files (exclude data directory for space)\ntar --exclude=\"${NC_DIR}/data\" -czf ${BACKUP_DIR}/files/nextcloud-files-${DATE}.tar.gz -C /var/www/html nextcloud\n\n# Backup database\nmysqldump -u nextclouduser -p'secure_password' nextcloud > ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\n\n# Backup data directory separately (if needed)\n# tar -czf ${BACKUP_DIR}/files/nextcloud-data-${DATE}.tar.gz -C ${NC_DIR} data\n\n# Disable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --off\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"nextcloud-*\" -type f -mtime +7 -delete\n\necho \"Backup completed: nextcloud-${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/nextcloud-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Update and Maintenance\n```bash\n# Create update script\nsudo tee /usr/local/bin/nextcloud-update.sh > /dev/null <<'EOF'\n#!/bin/bash\nNC_DIR=\"/var/www/html/nextcloud\"\n\n# Check for updates\nsudo -u www-data php ${NC_DIR}/occ update:check\n\n# Run updater\nsudo -u www-data php ${NC_DIR}/updater/updater.phar\n\n# Update apps\nsudo -u www-data php ${NC_DIR}/occ app:update --all\n\n# Run database upgrades\nsudo -u www-data php ${NC_DIR}/occ upgrade\n\n# Scan files\nsudo -u www-data php ${NC_DIR}/occ files:scan --all\n\n# Clean up\nsudo -u www-data php ${NC_DIR}/occ files:cleanup\nsudo -u www-data php ${NC_DIR}/occ trashbin:cleanup --all-users\n\necho \"Nextcloud update completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-update.sh\n```\n\n## Verification\n\n```bash\n# Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Test Nextcloud installation\ncurl -I http://localhost/nextcloud\ncurl -I https://nextcloud.example.com\n\n# Check Nextcloud status via occ\ncd /var/www/html/nextcloud\nsudo -u www-data php occ status\nsudo -u www-data php occ check\n\n# Check background jobs\nsudo -u www-data php occ background:job:list\n\n# Check database connectivity\nsudo -u www-data php occ db:check\n\n# Check security status\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:attempts\n\n# Test file operations\nsudo -u www-data php occ files:scan admin\nsudo -u www-data php occ files:scan --all\n\n# Check logs\nsudo tail -f /var/www/html/nextcloud/data/nextcloud.log\nsudo tail -f /var/log/apache2/nextcloud_error.log\n```\n\n## Troubleshooting\n\n```bash\n# Enable debug mode\nsudo -u www-data php occ config:system:set debug --value=true --type=boolean\nsudo -u www-data php occ config:system:set loglevel --value=0\n\n# Check system requirements\nsudo -u www-data php occ check\n\n# Repair installation\nsudo -u www-data php occ maintenance:repair\n\n# Clear cache\nsudo -u www-data php occ files:cleanup\n\n# Fix file permissions\nsudo /usr/local/bin/nextcloud-permissions.sh\n\n# Database repair\nsudo -u www-data php occ db:check-and-repair\n\n# Update file cache\nsudo -u www-data php occ files:scan --all\n\n# Check configuration\nsudo -u www-data php occ config:list system\n\n# Reset user password\nsudo -u www-data php occ user:resetpassword admin\n\n# Check disk usage\ndu -sh /var/www/html/nextcloud/data/\ndf -h /var/www/html/nextcloud/\n\n# Memory usage check\nsudo -u www-data php occ status --output=json\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.nextcloud.com/)\n- [Admin Manual](https://docs.nextcloud.com/server/latest/admin_manual/)\n- [Security Hardening Guide](https://docs.nextcloud.com/server/latest/admin_manual/installation/harden_server.html)\n- [Performance Tuning](https://docs.nextcloud.com/server/latest/admin_manual/installation/server_tuning.html)\n- [Community Forum](https://help.nextcloud.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"nextcloud-installation-guide\" class=\"mobile-header\">Nextcloud Installation Guide</h1>\n<p class=\"mobile-paragraph\">Self-hosted file sync and share platform with collaboration features, calendar, contacts, and extensive app ecosystem.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Web server (Apache or NGINX)</li>\n<li class=\"mobile-list-item\">PHP 8.0+ with required extensions</li>\n<li class=\"mobile-list-item\">Database (MySQL/MariaDB, PostgreSQL, or SQLite)</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"lamp-stack-setup-apache-mysql-php\" class=\"mobile-header\">LAMP Stack Setup (Apache + MySQL + PHP)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-gd php-curl php-mbstring php-intl php-mcrypt php-imagick php-xml php-zip php-bcmath php-gmp\n\n# Enable services\nsudo systemctl enable --now apache2 mariadb  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb    # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-setup\" class=\"mobile-header\">Database Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create Nextcloud database\nsudo mysql -u root -p &lt;&lt;EOF\nCREATE DATABASE nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;\nCREATE USER &#039;nextclouduser&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON nextcloud.* TO &#039;nextclouduser&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEXIT\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"nextcloud-download-and-setup\" class=\"mobile-header\">Nextcloud Download and Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Nextcloud\ncd /tmp\nwget https://download.nextcloud.com/server/releases/latest.tar.bz2\ntar -xjf latest.tar.bz2\n\n# Move to web directory\nsudo cp -R nextcloud /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/nextcloud  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/nextcloud      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/nextcloud/ -type f -print0 | xargs -0 chmod 0640\nsudo find /var/www/html/nextcloud/ -type d -print0 | xargs -0 chmod 0750\nsudo chmod 750 /var/www/html/nextcloud\nsudo chmod -R 770 /var/www/html/nextcloud/data\nsudo chmod -R 770 /var/www/html/nextcloud/apps\nsudo chmod -R 770 /var/www/html/nextcloud/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker-compose\" class=\"mobile-header\">Using Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create docker-compose.yml\nmkdir -p ~/nextcloud &amp;&amp; cd ~/nextcloud\n\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  nextcloud:\n    image: nextcloud:latest\n    restart: unless-stopped\n    ports:\n      - &quot;8080:80&quot;\n    volumes:\n      - nextcloud_data:/var/www/html\n      - ./config:/var/www/html/config\n      - ./custom_apps:/var/www/html/custom_apps\n      - ./data:/var/www/html/data\n    environment:\n      - MYSQL_HOST=db\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n      - MYSQL_PASSWORD=secure_password\n      - NEXTCLOUD_ADMIN_USER=admin\n      - NEXTCLOUD_ADMIN_PASSWORD=admin_password\n      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.example.com\n    depends_on:\n      - db\n      - redis\n    networks:\n      - nextcloud\n\n  db:\n    image: mariadb:10.6\n    restart: unless-stopped\n    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW --innodb-file-per-table=1 --skip-innodb-read-only-compressed\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      - MYSQL_ROOT_PASSWORD=root_password\n      - MYSQL_PASSWORD=secure_password\n      - MYSQL_DATABASE=nextcloud\n      - MYSQL_USER=nextcloud\n    networks:\n      - nextcloud\n\n  redis:\n    image: redis:alpine\n    restart: unless-stopped\n    networks:\n      - nextcloud\n\nvolumes:\n  nextcloud_data:\n  db_data:\n\nnetworks:\n  nextcloud:\n    driver: bridge\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f nextcloud</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"apache-virtual-host\" class=\"mobile-header\">Apache Virtual Host</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Apache virtual host\nsudo tee /etc/apache2/sites-available/nextcloud.conf &gt; /dev/null &lt;&lt;EOF\n&lt;VirtualHost *:80&gt;\n    ServerName nextcloud.example.com\n    DocumentRoot /var/www/html/nextcloud\n\n    &lt;Directory /var/www/html/nextcloud/&gt;\n        Require all granted\n        AllowOverride All\n        Options FollowSymLinks MultiViews\n        \n        &lt;IfModule mod_dav.c&gt;\n            Dav off\n        &lt;/IfModule&gt;\n    &lt;/Directory&gt;\n\n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=15552000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options &quot;SAMEORIGIN&quot;\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Referrer-Policy &quot;no-referrer&quot;\n    Header always set Feature-Policy &quot;camera &#039;none&#039;; microphone &#039;none&#039;&quot;\n\n    ErrorLog \\${APACHE_LOG_DIR}/nextcloud_error.log\n    CustomLog \\${APACHE_LOG_DIR}/nextcloud_access.log combined\n&lt;/VirtualHost&gt;\nEOF\n\n# Enable required modules\nsudo a2enmod rewrite headers env dir mime ssl\nsudo a2ensite nextcloud.conf\nsudo systemctl restart apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">NGINX Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX server block\nsudo tee /etc/nginx/sites-available/nextcloud &gt; /dev/null &lt;&lt;EOF\nupstream php-handler {\n    server unix:/var/run/php/php8.0-fpm.sock;\n}\n\nserver {\n    listen 80;\n    server_name nextcloud.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nextcloud.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/ssl/certs/nextcloud.crt;\n    ssl_certificate_key /etc/ssl/private/nextcloud.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=15768000; includeSubDomains; preload&quot; always;\n    add_header Referrer-Policy &quot;no-referrer&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header X-Download-Options &quot;noopen&quot; always;\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-Permitted-Cross-Domain-Policies &quot;none&quot; always;\n    add_header X-Robots-Tag &quot;none&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n\n    # Remove X-Powered-By\n    fastcgi_hide_header X-Powered-By;\n\n    # Path to the root of your installation\n    root /var/www/html/nextcloud;\n    index index.php index.html /index.php\\$request_uri;\n\n    # Rule borrowed from `.htaccess` to handle Microsoft DAV clients\n    location = / {\n        if ( \\$http_user_agent ~ ^DavClnt ) {\n            return 302 /remote.php/webdav/\\$is_args\\$args;\n        }\n    }\n\n    location = /robots.txt {\n        allow all;\n        log_not_found off;\n        access_log off;\n    }\n\n    # Make a regex exception for `/.well-known` so that clients can still\n    # access it despite the existence of the regex rule\n    location ^~ /.well-known {\n        location = /.well-known/carddav { return 301 /remote.php/dav/; }\n        location = /.well-known/caldav  { return 301 /remote.php/dav/; }\n        location /.well-known/acme-challenge    { try_files \\$uri \\$uri/ =404; }\n        location /.well-known/pki-validation    { try_files \\$uri \\$uri/ =404; }\n        return 301 /index.php\\$request_uri;\n    }\n\n    # Rules borrowed from `.htaccess` to hide certain paths.\n    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:\\$|/)  { return 404; }\n    location ~ ^/(?:\\\\.|autotest|occ|issue|indie|db_|console)                { return 404; }\n\n    # Ensure this block, which passes PHP files to the PHP process, is above the blocks\n    # which handle static assets (as seen below). If this block is not declared first,\n    # then Nginx will encounter an infinite rewriting loop when it prepends\n    # `/index.php` to the URI, resulting in a HTTP 500 error response.\n    location ~ \\\\.php(?:\\$|/) {\n        # Required for legacy support\n        rewrite ^/(?!index|remote|public|cron|core\\\\/ajax\\\\/update|status|ocs\\\\/v[12]|updater\\\\/.+|oc[ms]-provider\\\\/.+|.+\\\\/richdocumentscode\\\\/proxy) /index.php\\$request_uri;\n\n        fastcgi_split_path_info ^(.+?\\\\.php)(/.*)\\$;\n        set \\$path_info \\$fastcgi_path_info;\n\n        try_files \\$fastcgi_script_name =404;\n\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        fastcgi_param PATH_INFO \\$path_info;\n        fastcgi_param HTTPS on;\n\n        fastcgi_param modHeadersAvailable true;\n        fastcgi_param front_controller_active true;\n        fastcgi_pass php-handler;\n\n        fastcgi_intercept_errors on;\n        fastcgi_request_buffering off;\n    }\n\n    location ~ \\\\.(?:css|js|svg|gif|png|jpg|ico)\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 6M;\n        access_log off;\n    }\n\n    location ~ \\\\.woff2?\\$ {\n        try_files \\$uri /index.php\\$request_uri;\n        expires 7d;\n        access_log off;\n    }\n\n    # Rule borrowed from `.htaccess`\n    location /remote {\n        return 301 /remote.php\\$request_uri;\n    }\n\n    location / {\n        try_files \\$uri \\$uri/ /index.php\\$request_uri;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/nextcloud /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"php-configuration\" class=\"mobile-header\">PHP Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize PHP for Nextcloud\nsudo nano /etc/php/8.0/apache2/php.ini  # Apache\nsudo nano /etc/php/8.0/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\nupload_max_filesize = 16G\npost_max_size = 16G\nmax_execution_time = 3600\nmax_input_time = 3600\nmax_input_vars = 3000\ndate.timezone = &quot;America/New_York&quot;\n\n# OPcache settings\nopcache.enable = 1\nopcache.interned_strings_buffer = 16\nopcache.max_accelerated_files = 10000\nopcache.memory_consumption = 128\nopcache.save_comments = 1\nopcache.revalidate_freq = 1\n\n# APCu for local cache\napc.enable_cli = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php8.0-fpm  # NGINX</code></pre>\n      </div>\n    </div>\n<h3 id=\"command-line-installation\" class=\"mobile-header\">Command Line Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install via command line\ncd /var/www/html/nextcloud\nsudo -u www-data php occ maintenance:install \\\n  --database=&quot;mysql&quot; \\\n  --database-name=&quot;nextcloud&quot; \\\n  --database-user=&quot;nextclouduser&quot; \\\n  --database-pass=&quot;secure_password&quot; \\\n  --admin-user=&quot;admin&quot; \\\n  --admin-pass=&quot;admin_password&quot; \\\n  --data-dir=&quot;/var/www/html/nextcloud/data&quot;\n\n# Configure trusted domains\nsudo -u www-data php occ config:system:set trusted_domains 0 --value=nextcloud.example.com\nsudo -u www-data php occ config:system:set trusted_domains 1 --value=192.168.1.100\n\n# Configure caching\nsudo -u www-data php occ config:system:set memcache.local --value=&quot;\\\\OC\\\\Memcache\\\\APCu&quot;\nsudo -u www-data php occ config:system:set memcache.distributed --value=&quot;\\\\OC\\\\Memcache\\\\Redis&quot;\nsudo -u www-data php occ config:system:set redis host --value=&quot;localhost&quot;\nsudo -u www-data php occ config:system:set redis port --value=6379</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"redis-caching-setup\" class=\"mobile-header\">Redis Caching Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis\nsudo apt install -y redis-server  # Ubuntu/Debian\nsudo yum install -y redis          # RHEL/CentOS\n\nsudo systemctl enable --now redis\n\n# Configure Redis for Nextcloud\nsudo tee -a /etc/redis/redis.conf &gt; /dev/null &lt;&lt;EOF\nmaxmemory 512mb\nmaxmemory-policy allkeys-lru\nsave 900 1\nsave 300 10\nsave 60 10000\nEOF\n\nsudo systemctl restart redis\n\n# Install Redis PHP extension\nsudo apt install -y php-redis  # Ubuntu/Debian\nsudo yum install -y php-redis   # RHEL/CentOS\n\n# Configure Nextcloud to use Redis\nsudo -u www-data php occ config:system:set memcache.local --value=&quot;\\\\OC\\\\Memcache\\\\APCu&quot;\nsudo -u www-data php occ config:system:set memcache.distributed --value=&quot;\\\\OC\\\\Memcache\\\\Redis&quot;\nsudo -u www-data php occ config:system:set redis host --value=&quot;localhost&quot;\nsudo -u www-data php occ config:system:set redis port --value=6379</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/MariaDB optimization for Nextcloud\nsudo tee -a /etc/mysql/mysql.conf.d/nextcloud.cnf &gt; /dev/null &lt;&lt;EOF\n[mysqld]\ninnodb_buffer_pool_size = 1G\ninnodb_io_capacity = 4000\ninnodb_log_file_size = 128M\ninnodb_log_buffer_size = 32M\ninnodb_flush_log_at_trx_commit = 1\ninnodb_flush_method = O_DIRECT\ninnodb_file_per_table = 1\n\nquery_cache_type = 1\nquery_cache_limit = 2M\nquery_cache_size = 64M\n\ntmp_table_size = 64M\nmax_heap_table_size = 64M\n\njoin_buffer_size = 262144\nsort_buffer_size = 262144\n\nmax_connections = 100\nmax_connect_errors = 10\nconnect_timeout = 5\nwait_timeout = 600\nmax_allowed_packet = 64M\n\nthread_cache_size = 128\nquery_cache_size = 64M\n\n[mysql.server]\ndefault-table-type = innodb\nEOF\n\nsudo systemctl restart mysql\n\n# Add indexes for better performance\nmysql -u nextclouduser -p nextcloud &lt;&lt;EOF\nALTER TABLE oc_jobs ADD INDEX jobs_class_index (class);\nALTER TABLE oc_filecache ADD INDEX fs_mtime (mtime);\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"background-jobs\" class=\"mobile-header\">Background Jobs</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure cron for background jobs\nsudo crontab -u www-data -e\n# Add: */5 * * * * php /var/www/html/nextcloud/occ system:cron\n\n# Or configure via occ command\nsudo -u www-data php occ background:cron\n\n# Check background job status\nsudo -u www-data php occ status\nsudo -u www-data php occ background:job:list</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"file-permissions-and-security\" class=\"mobile-header\">File Permissions and Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure file permissions script\nsudo tee /usr/local/bin/nextcloud-permissions.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nncpath=&#039;/var/www/html/nextcloud&#039;\nhtuser=&#039;www-data&#039;\nhtgroup=&#039;www-data&#039;\nrootuser=&#039;root&#039;\n\nprintf &quot;Creating possible missing Directories\\n&quot;\nmkdir -p $ncpath/data\nmkdir -p $ncpath/assets\nmkdir -p $ncpath/updater\n\nprintf &quot;chmod Files and Directories\\n&quot;\nfind ${ncpath}/ -type f -print0 | xargs -0 chmod 0640\nfind ${ncpath}/ -type d -print0 | xargs -0 chmod 0750\n\nprintf &quot;chown Directories\\n&quot;\nchown -R ${rootuser}:${htgroup} ${ncpath}/\nchown -R ${htuser}:${htgroup} ${ncpath}/apps/\nchown -R ${htuser}:${htgroup} ${ncpath}/assets/\nchown -R ${htuser}:${htgroup} ${ncpath}/config/\nchown -R ${htuser}:${htgroup} ${ncpath}/data/\nchown -R ${htuser}:${htgroup} ${ncpath}/themes/\nchown -R ${htuser}:${htgroup} ${ncpath}/updater/\n\nchmod +x ${ncpath}/occ\n\nprintf &quot;chmod/chown .htaccess\\n&quot;\nif [ -f ${ncpath}/.htaccess ]; then\n    chmod 0644 ${ncpath}/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/.htaccess\nfi\n\nif [ -f ${ncpath}/data/.htaccess ]; then\n    chmod 0644 ${ncpath}/data/.htaccess\n    chown ${rootuser}:${htgroup} ${ncpath}/data/.htaccess\nfi\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-permissions.sh\nsudo /usr/local/bin/nextcloud-permissions.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Let&#039;s Encrypt certificate\nsudo apt install -y certbot python3-certbot-apache  # Apache\nsudo apt install -y certbot python3-certbot-nginx   # NGINX\n\n# Obtain certificate\nsudo certbot --apache -d nextcloud.example.com  # Apache\nsudo certbot --nginx -d nextcloud.example.com   # NGINX\n\n# Configure HTTPS redirect in Nextcloud\nsudo -u www-data php occ config:system:set overwrite.cli.url --value=&quot;https://nextcloud.example.com&quot;\nsudo -u www-data php occ config:system:set overwriteprotocol --value=&quot;https&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-scan-and-hardening\" class=\"mobile-header\">Security Scan and Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run Nextcloud security scan\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:reset admin\n\n# Configure rate limiting\nsudo -u www-data php occ config:app:set brute_force_protection delay_increment --value=10\nsudo -u www-data php occ config:app:set brute_force_protection fail_tolerance --value=3\n\n# Enable two-factor authentication\nsudo -u www-data php occ app:enable twofactor_totp\nsudo -u www-data php occ app:enable twofactor_u2f\n\n# Configure file access control\nsudo -u www-data php occ config:system:set default_file_access --value=&quot;restrict&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"app-management\" class=\"mobile-header\">App Management</h2>\n<h3 id=\"essential-apps-installation\" class=\"mobile-header\">Essential Apps Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install popular apps via occ\nsudo -u www-data php occ app:install calendar\nsudo -u www-data php occ app:install contacts\nsudo -u www-data php occ app:install mail\nsudo -u www-data php occ app:install notes\nsudo -u www-data php occ app:install tasks\nsudo -u www-data php occ app:install deck\nsudo -u www-data php occ app:install polls\nsudo -u www-data php occ app:install richdocuments  # OnlyOffice integration\n\n# Enable apps\nsudo -u www-data php occ app:enable calendar\nsudo -u www-data php occ app:enable contacts\nsudo -u www-data php occ app:enable mail\n\n# List available apps\nsudo -u www-data php occ app:list\n\n# Update apps\nsudo -u www-data php occ app:update --all</code></pre>\n      </div>\n    </div>\n<h3 id=\"onlyoffice-integration\" class=\"mobile-header\">OnlyOffice Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install OnlyOffice Document Server\ndocker run -d --name onlyoffice \\\n  -p 8080:80 \\\n  -v onlyoffice_data:/var/www/onlyoffice/Data \\\n  -v onlyoffice_log:/var/log/onlyoffice \\\n  -v onlyoffice_fonts:/usr/share/fonts/truetype/custom \\\n  -v onlyoffice_forgotten:/var/lib/onlyoffice/documentserver/App_Data/cache/files/forgotten \\\n  onlyoffice/documentserver\n\n# Configure Nextcloud to use OnlyOffice\nsudo -u www-data php occ config:app:set richdocuments wopi_url --value=&quot;http://localhost:8080&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-maintenance\" class=\"mobile-header\">Backup and Maintenance</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/nextcloud-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/nextcloud&quot;\nNC_DIR=&quot;/var/www/html/nextcloud&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Enable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --on\n\n# Backup files (exclude data directory for space)\ntar --exclude=&quot;${NC_DIR}/data&quot; -czf ${BACKUP_DIR}/files/nextcloud-files-${DATE}.tar.gz -C /var/www/html nextcloud\n\n# Backup database\nmysqldump -u nextclouduser -p&#039;secure_password&#039; nextcloud &gt; ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/nextcloud-db-${DATE}.sql\n\n# Backup data directory separately (if needed)\n# tar -czf ${BACKUP_DIR}/files/nextcloud-data-${DATE}.tar.gz -C ${NC_DIR} data\n\n# Disable maintenance mode\nsudo -u www-data php ${NC_DIR}/occ maintenance:mode --off\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;nextcloud-*&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: nextcloud-${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/nextcloud-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"update-and-maintenance\" class=\"mobile-header\">Update and Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create update script\nsudo tee /usr/local/bin/nextcloud-update.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nNC_DIR=&quot;/var/www/html/nextcloud&quot;\n\n# Check for updates\nsudo -u www-data php ${NC_DIR}/occ update:check\n\n# Run updater\nsudo -u www-data php ${NC_DIR}/updater/updater.phar\n\n# Update apps\nsudo -u www-data php ${NC_DIR}/occ app:update --all\n\n# Run database upgrades\nsudo -u www-data php ${NC_DIR}/occ upgrade\n\n# Scan files\nsudo -u www-data php ${NC_DIR}/occ files:scan --all\n\n# Clean up\nsudo -u www-data php ${NC_DIR}/occ files:cleanup\nsudo -u www-data php ${NC_DIR}/occ trashbin:cleanup --all-users\n\necho &quot;Nextcloud update completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nextcloud-update.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Test Nextcloud installation\ncurl -I http://localhost/nextcloud\ncurl -I https://nextcloud.example.com\n\n# Check Nextcloud status via occ\ncd /var/www/html/nextcloud\nsudo -u www-data php occ status\nsudo -u www-data php occ check\n\n# Check background jobs\nsudo -u www-data php occ background:job:list\n\n# Check database connectivity\nsudo -u www-data php occ db:check\n\n# Check security status\nsudo -u www-data php occ security:certificates\nsudo -u www-data php occ security:bruteforce:attempts\n\n# Test file operations\nsudo -u www-data php occ files:scan admin\nsudo -u www-data php occ files:scan --all\n\n# Check logs\nsudo tail -f /var/www/html/nextcloud/data/nextcloud.log\nsudo tail -f /var/log/apache2/nextcloud_error.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug mode\nsudo -u www-data php occ config:system:set debug --value=true --type=boolean\nsudo -u www-data php occ config:system:set loglevel --value=0\n\n# Check system requirements\nsudo -u www-data php occ check\n\n# Repair installation\nsudo -u www-data php occ maintenance:repair\n\n# Clear cache\nsudo -u www-data php occ files:cleanup\n\n# Fix file permissions\nsudo /usr/local/bin/nextcloud-permissions.sh\n\n# Database repair\nsudo -u www-data php occ db:check-and-repair\n\n# Update file cache\nsudo -u www-data php occ files:scan --all\n\n# Check configuration\nsudo -u www-data php occ config:list system\n\n# Reset user password\nsudo -u www-data php occ user:resetpassword admin\n\n# Check disk usage\ndu -sh /var/www/html/nextcloud/data/\ndf -h /var/www/html/nextcloud/\n\n# Memory usage check\nsudo -u www-data php occ status --output=json</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Admin Manual</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/installation/harden_server.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Hardening Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.nextcloud.com/server/latest/admin_manual/installation/server_tuning.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://help.nextcloud.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"12 min","wordCount":2269,"lastBuilt":"2025-09-14T01:30:43.193Z"},{"name":"nexus","displayName":"Nexus","slug":"nexus","description":"Repo for nexus","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nexus","updatedAt":"2025-09-08T03:12:24Z","createdAt":"2025-09-08T03:12:14Z","readmeRaw":"## 👋 Welcome to nexus 🚀  \n\nnexus README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-nexus\" class=\"mobile-header\">👋 Welcome to nexus 🚀  </h2>\n<p class=\"mobile-paragraph\">nexus README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:43.004Z"},{"name":"nginx","displayName":"NGINX","slug":"nginx","description":"Repo for nginx","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nginx","updatedAt":"2025-09-08T03:12:37Z","createdAt":"2025-09-08T03:12:26Z","readmeRaw":"# NGINX Installation Guide\n\nNGINX is a free and open-source web server, reverse proxy, load balancer, and HTTP cache. Originally written by Igor Sysoev to solve the C10K problem, it's now one of the most popular web servers in the world. NGINX serves as a FOSS alternative to commercial solutions like F5 BIG-IP, Citrix ADC, or proprietary CDNs, offering enterprise-grade performance and reliability without licensing costs.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for high traffic)\n  - RAM: 512MB minimum (2GB+ recommended for production)\n  - Storage: 100MB for installation (more for logs and cache)\n- **Operating System**: Linux, BSD, macOS, or Windows\n- **Network Requirements**:\n  - Port 80 (HTTP) and/or 443 (HTTPS)\n  - Additional ports for specific applications\n- **Dependencies**:\n  - PCRE library (for regular expressions)\n  - zlib library (for gzip compression)\n  - OpenSSL library (for SSL/TLS support)\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# RHEL/CentOS 7\nsudo yum install -y epel-release\nsudo yum install -y nginx\n\n# RHEL/CentOS/Rocky/AlmaLinux 8+\nsudo dnf install -y epel-release\nsudo dnf install -y nginx\n\n# Official NGINX repository (recommended for latest stable)\nsudo tee /etc/yum.repos.d/nginx.repo <<'EOF'\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\n# Install from official repository\nsudo dnf install -y nginx\n\n# Enable and start service\nsudo systemctl enable --now nginx\n```\n\n### Debian/Ubuntu\n\n```bash\n# Distribution packages\nsudo apt update\nsudo apt install -y nginx\n\n# Official NGINX repository (recommended for latest stable)\n# Install prerequisites\nsudo apt install -y curl gnupg2 ca-certificates lsb-release debian-archive-keyring\n\n# Add NGINX signing key\ncurl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n    | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg >/dev/null\n\n# Add repository\necho \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\n    http://nginx.org/packages/ubuntu `lsb_release -cs` nginx\" \\\n    | sudo tee /etc/apt/sources.list.d/nginx.list\n\n# Install nginx\nsudo apt update\nsudo apt install -y nginx\n\n# Enable and start service\nsudo systemctl enable --now nginx\n```\n\n### Arch Linux\n\n```bash\n# Install nginx from official repositories\nsudo pacman -S nginx\n\n# Optional: Install additional modules\nsudo pacman -S nginx-mod-brotli nginx-mod-headers-more nginx-mod-naxsi\n\n# For GeoIP support\nsudo pacman -S nginx-mod-geoip2\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Install mainline version from AUR\nyay -S nginx-mainline\n\n# Configuration location: /etc/nginx/\n```\n\n### Alpine Linux\n\n```bash\n# Install nginx\napk add --no-cache nginx\n\n# Install additional modules\napk add --no-cache nginx-mod-http-lua nginx-mod-stream nginx-mod-http-geoip2\n\n# Create required directories\nmkdir -p /run/nginx /var/lib/nginx/tmp\n\n# Create nginx user if not exists\nadduser -D -H -s /sbin/nologin -G nginx -g nginx nginx\n\n# Enable and start service\nrc-update add nginx default\nrc-service nginx start\n\n# Configuration location: /etc/nginx/\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y nginx\n\n# Install additional modules\nsudo zypper install -y nginx-module-geoip nginx-module-image-filter\n\n# SLES 15\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\nsudo zypper install -y nginx\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configuration location: /etc/nginx/\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install nginx\n\n# Start as service\nbrew services start nginx\n\n# Or run manually\nnginx\n\n# Configuration location: /usr/local/etc/nginx/\n# Alternative: /opt/homebrew/etc/nginx/ (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install nginx\n\n# Enable in rc.conf\necho 'nginx_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice nginx start\n\n# Configuration location: /usr/local/etc/nginx/\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install nginx\n\n# Method 2: Using Scoop\nscoop install nginx\n\n# Method 3: Manual installation\n# Download from http://nginx.org/en/download.html\n# Extract to C:\\nginx\n\n# Start nginx\ncd C:\\nginx\nstart nginx\n\n# Install as Windows service using NSSM\nnssm install nginx C:\\nginx\\nginx.exe\nnssm set nginx AppDirectory C:\\nginx\nnssm start nginx\n\n# Configuration location: C:\\nginx\\conf\\\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create nginx user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/cache/nginx -s /sbin/nologin -c \"nginx user\" nginx\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/nginx/nginx.conf`\n- Debian/Ubuntu: `/etc/nginx/nginx.conf`\n- Arch Linux: `/etc/nginx/nginx.conf`\n- Alpine Linux: `/etc/nginx/nginx.conf`\n- openSUSE/SLES: `/etc/nginx/nginx.conf`\n- macOS: `/usr/local/etc/nginx/nginx.conf`\n- FreeBSD: `/usr/local/etc/nginx/nginx.conf`\n- Windows: `C:\\nginx\\conf\\nginx.conf`\n\n3. **Essential settings to change**:\n\n```nginx\n# /etc/nginx/nginx.conf\nuser nginx;  # Run as non-root user\nworker_processes auto;  # Auto-detect CPU cores\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections 1024;  # Increase for high traffic\n    use epoll;  # Linux only, efficient connection method\n}\n\nhttp {\n    # Hide nginx version\n    server_tokens off;\n    \n    # Basic security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    \n    # Remove default server block\n    # Create site-specific configs in /etc/nginx/conf.d/\n}\n```\n\n### Testing Initial Setup\n\n```bash\n# Test configuration syntax\nsudo nginx -t\n\n# Check nginx version and modules\nnginx -V\n\n# Verify nginx is listening\nsudo ss -tlnp | grep :80\n\n# Test with curl\ncurl -I http://localhost\n```\n\n**WARNING:** Remove or modify the default server block to prevent information disclosure!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable nginx to start on boot\nsudo systemctl enable nginx\n\n# Start nginx\nsudo systemctl start nginx\n\n# Stop nginx\nsudo systemctl stop nginx\n\n# Restart nginx\nsudo systemctl restart nginx\n\n# Reload configuration without downtime\nsudo systemctl reload nginx\n\n# Check status\nsudo systemctl status nginx\n\n# View logs\nsudo journalctl -u nginx -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable nginx to start on boot\nrc-update add nginx default\n\n# Start nginx\nrc-service nginx start\n\n# Stop nginx\nrc-service nginx stop\n\n# Restart nginx\nrc-service nginx restart\n\n# Reload configuration\nrc-service nginx reload\n\n# Check status\nrc-service nginx status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'nginx_enable=\"YES\"' >> /etc/rc.conf\n\n# Start nginx\nservice nginx start\n\n# Stop nginx\nservice nginx stop\n\n# Restart nginx\nservice nginx restart\n\n# Reload configuration\nservice nginx reload\n\n# Check status\nservice nginx status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start nginx\nbrew services stop nginx\nbrew services restart nginx\n\n# Manual launchd control\nsudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.nginx.plist\nsudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.nginx.plist\n```\n\n### Windows Service Manager\n\n```powershell\n# Using NSSM\nnssm start nginx\nnssm stop nginx\nnssm restart nginx\n\n# Using nginx directly\nnginx -s stop\nnginx -s quit  # Graceful shutdown\nnginx -s reload\nnginx -s reopen  # Reopen log files\n```\n\n## Advanced Configuration\n\n### Main Configuration Structure\n\n```nginx\n# /etc/nginx/nginx.conf\nuser nginx;\nworker_processes auto;\nworker_cpu_affinity auto;\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\n# Load dynamic modules\nload_module modules/ngx_http_geoip2_module.so;\n\nevents {\n    worker_connections 4096;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # Logging\n    log_format main '$remote_addr - $remote_user [$time_local] \"$request\" '\n                    '$status $body_bytes_sent \"$http_referer\" '\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    \n    access_log /var/log/nginx/access.log main buffer=16k;\n\n    # Performance\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    client_max_body_size 100M;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types text/plain text/css text/xml text/javascript \n               application/json application/javascript application/xml+rss \n               application/rss+xml application/atom+xml image/svg+xml;\n\n    # SSL configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_session_tickets off;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    # Include server blocks\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\n```\n\n### Virtual Host Example\n\n```nginx\n# /etc/nginx/conf.d/example.com.conf\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n    \n    # Redirect to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com www.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n    add_header X-Frame-Options \"DENY\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n\n    # Logging\n    access_log /var/log/nginx/example.com.access.log;\n    error_log /var/log/nginx/example.com.error.log;\n\n    # Root directory\n    root /var/www/example.com/public;\n    index index.html index.htm index.php;\n\n    # Locations\n    location / {\n        try_files $uri $uri/ =404;\n    }\n\n    # PHP-FPM configuration\n    location ~ \\.php$ {\n        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n\n    # Deny access to hidden files\n    location ~ /\\. {\n        deny all;\n    }\n}\n```\n\n## Reverse Proxy Setup\n\n### Basic Reverse Proxy\n\n```nginx\n# /etc/nginx/conf.d/app.example.com.conf\nupstream backend {\n    server 127.0.0.1:3000;\n    server 127.0.0.1:3001 backup;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name app.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name app.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        \n        # Headers\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n        \n        # Websocket support\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Load Balancing Methods\n\n```nginx\n# Round-robin (default)\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\n# Least connections\nupstream backend {\n    least_conn;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\n# IP hash (session persistence)\nupstream backend {\n    ip_hash;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\n# Weighted distribution\nupstream backend {\n    server backend1.example.com weight=3;\n    server backend2.example.com weight=2;\n    server backend3.example.com weight=1;\n}\n```\n\n## Security Configuration\n\n### Basic Security Hardening\n\n```nginx\n# Global security settings in nginx.conf\nhttp {\n    # Hide nginx version\n    server_tokens off;\n    \n    # Limit request methods\n    if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$) {\n        return 405;\n    }\n    \n    # Limit buffer sizes\n    client_body_buffer_size 1K;\n    client_header_buffer_size 1k;\n    client_max_body_size 1M;\n    large_client_header_buffers 2 1k;\n    \n    # Timeouts\n    client_body_timeout 10;\n    client_header_timeout 10;\n    keepalive_timeout 5 5;\n    send_timeout 10;\n    \n    # Rate limiting zones\n    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;\n    limit_req_zone $binary_remote_addr zone=login:10m rate=3r/m;\n    limit_conn_zone $binary_remote_addr zone=addr:10m;\n}\n```\n\n### SSL/TLS Best Practices\n\n```nginx\n# Modern SSL configuration\nssl_protocols TLSv1.2 TLSv1.3;\nssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\nssl_prefer_server_ciphers off;\n\n# Enable HSTS\nadd_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\" always;\n\n# SSL session caching\nssl_session_cache shared:SSL:50m;\nssl_session_timeout 1d;\nssl_session_tickets off;\n\n# OCSP stapling\nssl_stapling on;\nssl_stapling_verify on;\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\n\n# Diffie-Hellman parameters\nssl_dhparam /etc/nginx/dhparam.pem;\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 'Nginx Full'\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from any to any port {80, 443}\n```\n\n### ModSecurity WAF Integration\n\n```bash\n# Install ModSecurity\n# Debian/Ubuntu\nsudo apt install -y libmodsecurity3 libmodsecurity-nginx\n\n# Build nginx with ModSecurity support\n./configure --add-dynamic-module=/path/to/ModSecurity-nginx\n\n# Load module in nginx.conf\nload_module modules/ngx_http_modsecurity_module.so;\n\n# Enable in server block\nmodsecurity on;\nmodsecurity_rules_file /etc/nginx/modsec/main.conf;\n```\n\n## Database Setup\n\nNot applicable for NGINX as it doesn't require a database. However, NGINX can be configured to work with various database-backed applications through reverse proxy configurations.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# /etc/sysctl.conf\n# Increase system limits\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_keepalive_time = 1200\nnet.ipv4.tcp_max_tw_buckets = 5000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_slow_start_after_idle = 0\n\n# File descriptors\nfs.file-max = 65535\n\n# Apply changes\nsudo sysctl -p\n```\n\n### NGINX Optimization\n\n```nginx\n# Worker configuration\nworker_processes auto;\nworker_cpu_affinity auto;\nworker_rlimit_nofile 65535;\n\nevents {\n    worker_connections 65535;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Caching\n    open_file_cache max=200000 inactive=20s;\n    open_file_cache_valid 30s;\n    open_file_cache_min_uses 2;\n    open_file_cache_errors on;\n\n    # Buffer sizes\n    client_body_buffer_size 128k;\n    client_max_body_size 10m;\n    client_header_buffer_size 1k;\n    large_client_header_buffers 4 16k;\n    output_buffers 1 32k;\n    postpone_output 1460;\n\n    # Compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_min_length 1000;\n    gzip_disable \"msie6\";\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/rss+xml\n        application/atom+xml\n        image/svg+xml;\n}\n```\n\n### Content Caching\n\n```nginx\n# Define cache\nproxy_cache_path /var/cache/nginx levels=1:2 keys_zone=static_cache:10m max_size=1g inactive=60m use_temp_path=off;\n\nserver {\n    location ~* \\.(jpg|jpeg|png|gif|ico|css|js)$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        proxy_cache static_cache;\n        proxy_cache_valid 200 60m;\n        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;\n    }\n}\n```\n\n## Monitoring\n\n### Built-in Status Module\n\n```nginx\n# Enable stub_status\nserver {\n    listen 127.0.0.1:8080;\n    server_name localhost;\n    \n    location /nginx_status {\n        stub_status;\n        allow 127.0.0.1;\n        deny all;\n    }\n}\n```\n\n### Access with curl\n\n```bash\n# Get basic metrics\ncurl http://127.0.0.1:8080/nginx_status\n\n# Sample output:\n# Active connections: 291\n# server accepts handled requests\n#  16630948 16630948 31070465\n# Reading: 6 Writing: 179 Waiting: 106\n```\n\n### Log Analysis\n\n```bash\n# Top 10 IP addresses\nawk '{print $1}' /var/log/nginx/access.log | sort | uniq -c | sort -rn | head -10\n\n# Response codes distribution\nawk '{print $9}' /var/log/nginx/access.log | sort | uniq -c | sort -rn\n\n# Requests per second\ntail -10000 /var/log/nginx/access.log | awk '{print $4}' | uniq -c\n\n# Slow requests (>1s)\nawk '$11 > 1' /var/log/nginx/access.log\n```\n\n### Prometheus Exporter\n\n```bash\n# Install nginx-prometheus-exporter\nwget https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v0.11.0/nginx-prometheus-exporter_0.11.0_linux_amd64.tar.gz\ntar xzf nginx-prometheus-exporter_0.11.0_linux_amd64.tar.gz\nsudo mv nginx-prometheus-exporter /usr/local/bin/\n\n# Run exporter\nnginx-prometheus-exporter -nginx.scrape-uri=http://127.0.0.1:8080/nginx_status\n\n# Add to Prometheus config\nscrape_configs:\n  - job_name: 'nginx'\n    static_configs:\n      - targets: ['localhost:9113']\n```\n\n## Backup and Restore\n\n### What to Backup\n\n1. **Configuration files**:\n```bash\n/etc/nginx/nginx.conf\n/etc/nginx/conf.d/\n/etc/nginx/sites-available/\n/etc/nginx/sites-enabled/\n/etc/nginx/snippets/\n```\n\n2. **SSL certificates**:\n```bash\n/etc/letsencrypt/\n/etc/ssl/certs/\n/etc/ssl/private/\n```\n\n3. **Log files** (if needed):\n```bash\n/var/log/nginx/\n```\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# backup-nginx.sh\n\nBACKUP_DIR=\"/backup/nginx/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Backup nginx configuration\ntar czf \"$BACKUP_DIR/nginx-config.tar.gz\" \\\n    /etc/nginx/ \\\n    --exclude='*.log' \\\n    --exclude='*.pid'\n\n# Backup SSL certificates\nif [ -d /etc/letsencrypt ]; then\n    tar czf \"$BACKUP_DIR/letsencrypt.tar.gz\" /etc/letsencrypt/\nfi\n\n# Save package version\nnginx -v 2>&1 | tee \"$BACKUP_DIR/nginx-version.txt\"\n\n# Test configuration backup\ntar -tzf \"$BACKUP_DIR/nginx-config.tar.gz\" > \"$BACKUP_DIR/backup-contents.txt\"\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# restore-nginx.sh\n\nBACKUP_DIR=\"$1\"\nif [ -z \"$BACKUP_DIR\" ]; then\n    echo \"Usage: $0 <backup-directory>\"\n    exit 1\nfi\n\n# Stop nginx\nsudo systemctl stop nginx\n\n# Restore configuration\nsudo tar xzf \"$BACKUP_DIR/nginx-config.tar.gz\" -C /\n\n# Restore SSL certificates\nif [ -f \"$BACKUP_DIR/letsencrypt.tar.gz\" ]; then\n    sudo tar xzf \"$BACKUP_DIR/letsencrypt.tar.gz\" -C /\nfi\n\n# Test configuration\nsudo nginx -t\n\nif [ $? -eq 0 ]; then\n    # Start nginx if config is valid\n    sudo systemctl start nginx\n    echo \"Restore completed successfully\"\nelse\n    echo \"Configuration test failed! Please check the configuration\"\n    exit 1\nfi\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Port 80/443 already in use**:\n```bash\n# Find process using port\nsudo ss -tlnp | grep :80\nsudo lsof -i :80\n\n# Stop conflicting service (e.g., Apache)\nsudo systemctl stop apache2\nsudo systemctl disable apache2\n```\n\n2. **Permission denied errors**:\n```bash\n# Check nginx user\nps aux | grep nginx\n\n# Fix ownership\nsudo chown -R nginx:nginx /var/cache/nginx\nsudo chown -R nginx:nginx /var/log/nginx\n\n# SELinux issues (RHEL/CentOS)\nsudo semanage port -l | grep http_port_t\nsudo setsebool -P httpd_can_network_connect 1\n```\n\n3. **502 Bad Gateway**:\n```bash\n# Check upstream service\ncurl -I http://localhost:3000\n\n# Check nginx error log\nsudo tail -f /var/log/nginx/error.log\n\n# Verify socket permissions (PHP-FPM example)\nls -la /var/run/php/php8.1-fpm.sock\n```\n\n4. **SSL certificate issues**:\n```bash\n# Test SSL configuration\nopenssl s_client -connect example.com:443\n\n# Verify certificate\nsudo nginx -t\n\n# Check certificate expiry\necho | openssl s_client -servername example.com -connect example.com:443 2>/dev/null | openssl x509 -noout -dates\n```\n\n### Debug Mode\n\n```nginx\n# Enable debug logging\nerror_log /var/log/nginx/error.log debug;\n\n# Debug specific module\nerror_log /var/log/nginx/error.log debug_http;\n\n# Debug rewrite rules\nrewrite_log on;\nerror_log /var/log/nginx/rewrite.log notice;\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update nginx\nsudo dnf update nginx\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade nginx\n\n# Arch Linux\nsudo pacman -Syu nginx\n\n# Alpine Linux\napk update\napk upgrade nginx\n\n# openSUSE\nsudo zypper update nginx\n\n# FreeBSD\npkg update\npkg upgrade nginx\n\n# Always test configuration after update\nsudo nginx -t\nsudo systemctl reload nginx\n```\n\n### Log Rotation\n\n```bash\n# Default logrotate configuration\n# /etc/logrotate.d/nginx\n/var/log/nginx/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 nginx adm\n    sharedscripts\n    prerotate\n        if [ -d /etc/logrotate.d/httpd-prerotate ]; then \\\n            run-parts /etc/logrotate.d/httpd-prerotate; \\\n        fi\n    endscript\n    postrotate\n        invoke-rc.d nginx rotate >/dev/null 2>&1\n    endscript\n}\n```\n\n### Performance Monitoring\n\n```bash\n# Monitor nginx processes\nhtop -p $(pgrep -d, nginx)\n\n# Check memory usage\nps aux | grep nginx | awk '{sum+=$6} END {print \"Total RSS: \" sum/1024 \" MB\"}'\n\n# Monitor connections\nwatch -n 1 'ss -tan | grep :80 | wc -l'\n\n# Check open files\nsudo lsof -u nginx | wc -l\n```\n\n## Integration Examples\n\n### PHP-FPM Integration\n\n```nginx\n# PHP-FPM upstream\nupstream php-fpm {\n    server unix:/var/run/php/php8.1-fpm.sock;\n}\n\nserver {\n    location ~ \\.php$ {\n        try_files $uri =404;\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass php-fpm;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include fastcgi_params;\n        \n        # Performance\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n    }\n}\n```\n\n### Node.js Application\n\n```nginx\nupstream nodejs_app {\n    server 127.0.0.1:3000;\n    keepalive 64;\n}\n\nserver {\n    location / {\n        proxy_pass http://nodejs_app;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Python/Gunicorn Integration\n\n```nginx\nupstream gunicorn_app {\n    server unix:/run/gunicorn.sock fail_timeout=0;\n}\n\nserver {\n    location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_pass http://gunicorn_app;\n    }\n    \n    location /static/ {\n        alias /var/www/app/static/;\n        expires 30d;\n        add_header Cache-Control \"public, immutable\";\n    }\n}\n```\n\n### Ruby on Rails\n\n```nginx\nupstream rails_app {\n    server unix:/var/www/app/shared/sockets/puma.sock fail_timeout=0;\n}\n\nserver {\n    root /var/www/app/current/public;\n    \n    location / {\n        try_files $uri @rails_app;\n    }\n    \n    location @rails_app {\n        proxy_pass http://rails_app;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n    }\n    \n    location ~ ^/(assets|packs)/ {\n        gzip_static on;\n        expires max;\n        add_header Cache-Control public;\n    }\n}\n```\n\n### WebSocket Support\n\n```nginx\nmap $http_upgrade $connection_upgrade {\n    default upgrade;\n    '' close;\n}\n\nupstream websocket {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    location /ws {\n        proxy_pass http://websocket;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Timeouts\n        proxy_connect_timeout 7d;\n        proxy_send_timeout 7d;\n        proxy_read_timeout 7d;\n    }\n}\n```\n\n## Additional Resources\n\n- [Official Documentation](https://nginx.org/en/docs/)\n- [GitHub Repository](https://github.com/nginx/nginx)\n- [NGINX Wiki](https://www.nginx.com/resources/wiki/)\n- [NGINX Config Generator](https://www.digitalocean.com/community/tools/nginx)\n- [Community Forum](https://forum.nginx.org/)\n- [Security Advisories](https://nginx.org/en/security_advisories.html)\n- [Module Registry](https://www.nginx.com/resources/wiki/modules/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"nginx-installation-guide\" class=\"mobile-header\">NGINX Installation Guide</h1>\n<p class=\"mobile-paragraph\">NGINX is a free and open-source web server, reverse proxy, load balancer, and HTTP cache. Originally written by Igor Sysoev to solve the C10K problem, it's now one of the most popular web servers in the world. NGINX serves as a FOSS alternative to commercial solutions like F5 BIG-IP, Citrix ADC, or proprietary CDNs, offering enterprise-grade performance and reliability without licensing costs.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for high traffic)</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum (2GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation (more for logs and cache)</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: Linux, BSD, macOS, or Windows</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (HTTP) and/or 443 (HTTPS)</li>\n<li class=\"mobile-list-item\">Additional ports for specific applications</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">PCRE library (for regular expressions)</li>\n<li class=\"mobile-list-item\">zlib library (for gzip compression)</li>\n<li class=\"mobile-list-item\">OpenSSL library (for SSL/TLS support)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS 7\nsudo yum install -y epel-release\nsudo yum install -y nginx\n\n# RHEL/CentOS/Rocky/AlmaLinux 8+\nsudo dnf install -y epel-release\nsudo dnf install -y nginx\n\n# Official NGINX repository (recommended for latest stable)\nsudo tee /etc/yum.repos.d/nginx.repo &lt;&lt;&#039;EOF&#039;\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/$releasever/$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\n# Install from official repository\nsudo dnf install -y nginx\n\n# Enable and start service\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Distribution packages\nsudo apt update\nsudo apt install -y nginx\n\n# Official NGINX repository (recommended for latest stable)\n# Install prerequisites\nsudo apt install -y curl gnupg2 ca-certificates lsb-release debian-archive-keyring\n\n# Add NGINX signing key\ncurl https://nginx.org/keys/nginx_signing.key | gpg --dearmor \\\n    | sudo tee /usr/share/keyrings/nginx-archive-keyring.gpg &gt;/dev/null\n\n# Add repository\necho &quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] \\\n    http://nginx.org/packages/ubuntu `lsb_release -cs` nginx&quot; \\\n    | sudo tee /etc/apt/sources.list.d/nginx.list\n\n# Install nginx\nsudo apt update\nsudo apt install -y nginx\n\n# Enable and start service\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install nginx from official repositories\nsudo pacman -S nginx\n\n# Optional: Install additional modules\nsudo pacman -S nginx-mod-brotli nginx-mod-headers-more nginx-mod-naxsi\n\n# For GeoIP support\nsudo pacman -S nginx-mod-geoip2\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Install mainline version from AUR\nyay -S nginx-mainline\n\n# Configuration location: /etc/nginx/</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install nginx\napk add --no-cache nginx\n\n# Install additional modules\napk add --no-cache nginx-mod-http-lua nginx-mod-stream nginx-mod-http-geoip2\n\n# Create required directories\nmkdir -p /run/nginx /var/lib/nginx/tmp\n\n# Create nginx user if not exists\nadduser -D -H -s /sbin/nologin -G nginx -g nginx nginx\n\n# Enable and start service\nrc-update add nginx default\nrc-service nginx start\n\n# Configuration location: /etc/nginx/</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y nginx\n\n# Install additional modules\nsudo zypper install -y nginx-module-geoip nginx-module-image-filter\n\n# SLES 15\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\nsudo zypper install -y nginx\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configuration location: /etc/nginx/</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install nginx\n\n# Start as service\nbrew services start nginx\n\n# Or run manually\nnginx\n\n# Configuration location: /usr/local/etc/nginx/\n# Alternative: /opt/homebrew/etc/nginx/ (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install nginx\n\n# Enable in rc.conf\necho &#039;nginx_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice nginx start\n\n# Configuration location: /usr/local/etc/nginx/</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install nginx\n\n# Method 2: Using Scoop\nscoop install nginx\n\n# Method 3: Manual installation\n# Download from http://nginx.org/en/download.html\n# Extract to C:\\nginx\n\n# Start nginx\ncd C:\\nginx\nstart nginx\n\n# Install as Windows service using NSSM\nnssm install nginx C:\\nginx\\nginx.exe\nnssm set nginx AppDirectory C:\\nginx\nnssm start nginx\n\n# Configuration location: C:\\nginx\\conf\\</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create nginx user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/cache/nginx -s /sbin/nologin -c &quot;nginx user&quot; nginx</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/nginx/nginx.conf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/nginx/nginx.conf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/nginx/nginx.conf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/nginx/nginx.conf</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/nginx/nginx.conf</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/nginx/nginx.conf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/nginx/nginx.conf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\nginx\\conf\\nginx.conf</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/nginx.conf\nuser nginx;  # Run as non-root user\nworker_processes auto;  # Auto-detect CPU cores\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections 1024;  # Increase for high traffic\n    use epoll;  # Linux only, efficient connection method\n}\n\nhttp {\n    # Hide nginx version\n    server_tokens off;\n    \n    # Basic security headers\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    \n    # Remove default server block\n    # Create site-specific configs in /etc/nginx/conf.d/\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test configuration syntax\nsudo nginx -t\n\n# Check nginx version and modules\nnginx -V\n\n# Verify nginx is listening\nsudo ss -tlnp | grep :80\n\n# Test with curl\ncurl -I http://localhost</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Remove or modify the default server block to prevent information disclosure!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable nginx to start on boot\nsudo systemctl enable nginx\n\n# Start nginx\nsudo systemctl start nginx\n\n# Stop nginx\nsudo systemctl stop nginx\n\n# Restart nginx\nsudo systemctl restart nginx\n\n# Reload configuration without downtime\nsudo systemctl reload nginx\n\n# Check status\nsudo systemctl status nginx\n\n# View logs\nsudo journalctl -u nginx -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable nginx to start on boot\nrc-update add nginx default\n\n# Start nginx\nrc-service nginx start\n\n# Stop nginx\nrc-service nginx stop\n\n# Restart nginx\nrc-service nginx restart\n\n# Reload configuration\nrc-service nginx reload\n\n# Check status\nrc-service nginx status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;nginx_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start nginx\nservice nginx start\n\n# Stop nginx\nservice nginx stop\n\n# Restart nginx\nservice nginx restart\n\n# Reload configuration\nservice nginx reload\n\n# Check status\nservice nginx status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start nginx\nbrew services stop nginx\nbrew services restart nginx\n\n# Manual launchd control\nsudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.nginx.plist\nsudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.nginx.plist</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using NSSM\nnssm start nginx\nnssm stop nginx\nnssm restart nginx\n\n# Using nginx directly\nnginx -s stop\nnginx -s quit  # Graceful shutdown\nnginx -s reload\nnginx -s reopen  # Reopen log files</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"main-configuration-structure\" class=\"mobile-header\">Main Configuration Structure</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/nginx.conf\nuser nginx;\nworker_processes auto;\nworker_cpu_affinity auto;\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\n# Load dynamic modules\nload_module modules/ngx_http_geoip2_module.so;\n\nevents {\n    worker_connections 4096;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # Logging\n    log_format main &#039;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#039;\n                    &#039;$status $body_bytes_sent &quot;$http_referer&quot; &#039;\n                    &#039;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#039;;\n    \n    access_log /var/log/nginx/access.log main buffer=16k;\n\n    # Performance\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    types_hash_max_size 2048;\n    client_max_body_size 100M;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types text/plain text/css text/xml text/javascript \n               application/json application/javascript application/xml+rss \n               application/rss+xml application/atom+xml image/svg+xml;\n\n    # SSL configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_session_tickets off;\n    ssl_stapling on;\n    ssl_stapling_verify on;\n\n    # Include server blocks\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"virtual-host-example\" class=\"mobile-header\">Virtual Host Example</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/conf.d/example.com.conf\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n    \n    # Redirect to HTTPS\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com www.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;\n    add_header X-Frame-Options &quot;DENY&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot; always;\n    add_header Content-Security-Policy &quot;default-src &#039;self&#039; http: https: data: blob: &#039;unsafe-inline&#039;&quot; always;\n\n    # Logging\n    access_log /var/log/nginx/example.com.access.log;\n    error_log /var/log/nginx/example.com.error.log;\n\n    # Root directory\n    root /var/www/example.com/public;\n    index index.html index.htm index.php;\n\n    # Locations\n    location / {\n        try_files $uri $uri/ =404;\n    }\n\n    # PHP-FPM configuration\n    location ~ \\.php$ {\n        fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        include fastcgi_params;\n    }\n\n    # Deny access to hidden files\n    location ~ /\\. {\n        deny all;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"basic-reverse-proxy\" class=\"mobile-header\">Basic Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/conf.d/app.example.com.conf\nupstream backend {\n    server 127.0.0.1:3000;\n    server 127.0.0.1:3001 backup;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name app.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name app.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        \n        # Headers\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n        \n        # Websocket support\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"load-balancing-methods\" class=\"mobile-header\">Load Balancing Methods</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># Round-robin (default)\nupstream backend {\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\n# Least connections\nupstream backend {\n    least_conn;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\n# IP hash (session persistence)\nupstream backend {\n    ip_hash;\n    server backend1.example.com;\n    server backend2.example.com;\n    server backend3.example.com;\n}\n\n# Weighted distribution\nupstream backend {\n    server backend1.example.com weight=3;\n    server backend2.example.com weight=2;\n    server backend3.example.com weight=1;\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-hardening\" class=\"mobile-header\">Basic Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># Global security settings in nginx.conf\nhttp {\n    # Hide nginx version\n    server_tokens off;\n    \n    # Limit request methods\n    if ($request_method !~ ^(GET|HEAD|POST|PUT|DELETE|OPTIONS)$) {\n        return 405;\n    }\n    \n    # Limit buffer sizes\n    client_body_buffer_size 1K;\n    client_header_buffer_size 1k;\n    client_max_body_size 1M;\n    large_client_header_buffers 2 1k;\n    \n    # Timeouts\n    client_body_timeout 10;\n    client_header_timeout 10;\n    keepalive_timeout 5 5;\n    send_timeout 10;\n    \n    # Rate limiting zones\n    limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;\n    limit_req_zone $binary_remote_addr zone=login:10m rate=3r/m;\n    limit_conn_zone $binary_remote_addr zone=addr:10m;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-best-practices\" class=\"mobile-header\">SSL/TLS Best Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># Modern SSL configuration\nssl_protocols TLSv1.2 TLSv1.3;\nssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\nssl_prefer_server_ciphers off;\n\n# Enable HSTS\nadd_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot; always;\n\n# SSL session caching\nssl_session_cache shared:SSL:50m;\nssl_session_timeout 1d;\nssl_session_tickets off;\n\n# OCSP stapling\nssl_stapling on;\nssl_stapling_verify on;\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\n\n# Diffie-Hellman parameters\nssl_dhparam /etc/nginx/dhparam.pem;</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow &#039;Nginx Full&#039;\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from any to any port {80, 443}</code></pre>\n      </div>\n    </div>\n<h3 id=\"modsecurity-waf-integration\" class=\"mobile-header\">ModSecurity WAF Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ModSecurity\n# Debian/Ubuntu\nsudo apt install -y libmodsecurity3 libmodsecurity-nginx\n\n# Build nginx with ModSecurity support\n./configure --add-dynamic-module=/path/to/ModSecurity-nginx\n\n# Load module in nginx.conf\nload_module modules/ngx_http_modsecurity_module.so;\n\n# Enable in server block\nmodsecurity on;\nmodsecurity_rules_file /etc/nginx/modsec/main.conf;</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">Not applicable for NGINX as it doesn't require a database. However, NGINX can be configured to work with various database-backed applications through reverse proxy configurations.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># /etc/sysctl.conf\n# Increase system limits\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 30\nnet.ipv4.tcp_keepalive_time = 1200\nnet.ipv4.tcp_max_tw_buckets = 5000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_slow_start_after_idle = 0\n\n# File descriptors\nfs.file-max = 65535\n\n# Apply changes\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-optimization\" class=\"mobile-header\">NGINX Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># Worker configuration\nworker_processes auto;\nworker_cpu_affinity auto;\nworker_rlimit_nofile 65535;\n\nevents {\n    worker_connections 65535;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Caching\n    open_file_cache max=200000 inactive=20s;\n    open_file_cache_valid 30s;\n    open_file_cache_min_uses 2;\n    open_file_cache_errors on;\n\n    # Buffer sizes\n    client_body_buffer_size 128k;\n    client_max_body_size 10m;\n    client_header_buffer_size 1k;\n    large_client_header_buffers 4 16k;\n    output_buffers 1 32k;\n    postpone_output 1460;\n\n    # Compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_min_length 1000;\n    gzip_disable &quot;msie6&quot;;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/rss+xml\n        application/atom+xml\n        image/svg+xml;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"content-caching\" class=\"mobile-header\">Content Caching</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># Define cache\nproxy_cache_path /var/cache/nginx levels=1:2 keys_zone=static_cache:10m max_size=1g inactive=60m use_temp_path=off;\n\nserver {\n    location ~* \\.(jpg|jpeg|png|gif|ico|css|js)$ {\n        expires 1y;\n        add_header Cache-Control &quot;public, immutable&quot;;\n        proxy_cache static_cache;\n        proxy_cache_valid 200 60m;\n        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-status-module\" class=\"mobile-header\">Built-in Status Module</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># Enable stub_status\nserver {\n    listen 127.0.0.1:8080;\n    server_name localhost;\n    \n    location /nginx_status {\n        stub_status;\n        allow 127.0.0.1;\n        deny all;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"access-with-curl\" class=\"mobile-header\">Access with curl</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Get basic metrics\ncurl http://127.0.0.1:8080/nginx_status\n\n# Sample output:\n# Active connections: 291\n# server accepts handled requests\n#  16630948 16630948 31070465\n# Reading: 6 Writing: 179 Waiting: 106</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-analysis\" class=\"mobile-header\">Log Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Top 10 IP addresses\nawk &#039;{print $1}&#039; /var/log/nginx/access.log | sort | uniq -c | sort -rn | head -10\n\n# Response codes distribution\nawk &#039;{print $9}&#039; /var/log/nginx/access.log | sort | uniq -c | sort -rn\n\n# Requests per second\ntail -10000 /var/log/nginx/access.log | awk &#039;{print $4}&#039; | uniq -c\n\n# Slow requests (&gt;1s)\nawk &#039;$11 &gt; 1&#039; /var/log/nginx/access.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"prometheus-exporter\" class=\"mobile-header\">Prometheus Exporter</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install nginx-prometheus-exporter\nwget https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v0.11.0/nginx-prometheus-exporter_0.11.0_linux_amd64.tar.gz\ntar xzf nginx-prometheus-exporter_0.11.0_linux_amd64.tar.gz\nsudo mv nginx-prometheus-exporter /usr/local/bin/\n\n# Run exporter\nnginx-prometheus-exporter -nginx.scrape-uri=http://127.0.0.1:8080/nginx_status\n\n# Add to Prometheus config\nscrape_configs:\n  - job_name: &#039;nginx&#039;\n    static_configs:\n      - targets: [&#039;localhost:9113&#039;]</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"what-to-backup\" class=\"mobile-header\">What to Backup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Configuration files</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">/etc/nginx/nginx.conf\n/etc/nginx/conf.d/\n/etc/nginx/sites-available/\n/etc/nginx/sites-enabled/\n/etc/nginx/snippets/</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>SSL certificates</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">/etc/letsencrypt/\n/etc/ssl/certs/\n/etc/ssl/private/</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Log files</strong> (if needed):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">/var/log/nginx/</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-nginx.sh\n\nBACKUP_DIR=&quot;/backup/nginx/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Backup nginx configuration\ntar czf &quot;$BACKUP_DIR/nginx-config.tar.gz&quot; \\\n    /etc/nginx/ \\\n    --exclude=&#039;*.log&#039; \\\n    --exclude=&#039;*.pid&#039;\n\n# Backup SSL certificates\nif [ -d /etc/letsencrypt ]; then\n    tar czf &quot;$BACKUP_DIR/letsencrypt.tar.gz&quot; /etc/letsencrypt/\nfi\n\n# Save package version\nnginx -v 2&gt;&amp;1 | tee &quot;$BACKUP_DIR/nginx-version.txt&quot;\n\n# Test configuration backup\ntar -tzf &quot;$BACKUP_DIR/nginx-config.tar.gz&quot; &gt; &quot;$BACKUP_DIR/backup-contents.txt&quot;\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# restore-nginx.sh\n\nBACKUP_DIR=&quot;$1&quot;\nif [ -z &quot;$BACKUP_DIR&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-directory&gt;&quot;\n    exit 1\nfi\n\n# Stop nginx\nsudo systemctl stop nginx\n\n# Restore configuration\nsudo tar xzf &quot;$BACKUP_DIR/nginx-config.tar.gz&quot; -C /\n\n# Restore SSL certificates\nif [ -f &quot;$BACKUP_DIR/letsencrypt.tar.gz&quot; ]; then\n    sudo tar xzf &quot;$BACKUP_DIR/letsencrypt.tar.gz&quot; -C /\nfi\n\n# Test configuration\nsudo nginx -t\n\nif [ $? -eq 0 ]; then\n    # Start nginx if config is valid\n    sudo systemctl start nginx\n    echo &quot;Restore completed successfully&quot;\nelse\n    echo &quot;Configuration test failed! Please check the configuration&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Port 80/443 already in use</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Find process using port\nsudo ss -tlnp | grep :80\nsudo lsof -i :80\n\n# Stop conflicting service (e.g., Apache)\nsudo systemctl stop apache2\nsudo systemctl disable apache2</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Permission denied errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check nginx user\nps aux | grep nginx\n\n# Fix ownership\nsudo chown -R nginx:nginx /var/cache/nginx\nsudo chown -R nginx:nginx /var/log/nginx\n\n# SELinux issues (RHEL/CentOS)\nsudo semanage port -l | grep http_port_t\nsudo setsebool -P httpd_can_network_connect 1</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>502 Bad Gateway</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check upstream service\ncurl -I http://localhost:3000\n\n# Check nginx error log\nsudo tail -f /var/log/nginx/error.log\n\n# Verify socket permissions (PHP-FPM example)\nls -la /var/run/php/php8.1-fpm.sock</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>SSL certificate issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test SSL configuration\nopenssl s_client -connect example.com:443\n\n# Verify certificate\nsudo nginx -t\n\n# Check certificate expiry\necho | openssl s_client -servername example.com -connect example.com:443 2&gt;/dev/null | openssl x509 -noout -dates</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># Enable debug logging\nerror_log /var/log/nginx/error.log debug;\n\n# Debug specific module\nerror_log /var/log/nginx/error.log debug_http;\n\n# Debug rewrite rules\nrewrite_log on;\nerror_log /var/log/nginx/rewrite.log notice;</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update nginx\nsudo dnf update nginx\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade nginx\n\n# Arch Linux\nsudo pacman -Syu nginx\n\n# Alpine Linux\napk update\napk upgrade nginx\n\n# openSUSE\nsudo zypper update nginx\n\n# FreeBSD\npkg update\npkg upgrade nginx\n\n# Always test configuration after update\nsudo nginx -t\nsudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-rotation\" class=\"mobile-header\">Log Rotation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Default logrotate configuration\n# /etc/logrotate.d/nginx\n/var/log/nginx/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 0640 nginx adm\n    sharedscripts\n    prerotate\n        if [ -d /etc/logrotate.d/httpd-prerotate ]; then \\\n            run-parts /etc/logrotate.d/httpd-prerotate; \\\n        fi\n    endscript\n    postrotate\n        invoke-rc.d nginx rotate &gt;/dev/null 2&gt;&amp;1\n    endscript\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-monitoring\" class=\"mobile-header\">Performance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor nginx processes\nhtop -p $(pgrep -d, nginx)\n\n# Check memory usage\nps aux | grep nginx | awk &#039;{sum+=$6} END {print &quot;Total RSS: &quot; sum/1024 &quot; MB&quot;}&#039;\n\n# Monitor connections\nwatch -n 1 &#039;ss -tan | grep :80 | wc -l&#039;\n\n# Check open files\nsudo lsof -u nginx | wc -l</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"php-fpm-integration\" class=\"mobile-header\">PHP-FPM Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># PHP-FPM upstream\nupstream php-fpm {\n    server unix:/var/run/php/php8.1-fpm.sock;\n}\n\nserver {\n    location ~ \\.php$ {\n        try_files $uri =404;\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass php-fpm;\n        fastcgi_index index.php;\n        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include fastcgi_params;\n        \n        # Performance\n        fastcgi_buffer_size 16k;\n        fastcgi_buffers 4 16k;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-application\" class=\"mobile-header\">Node.js Application</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream nodejs_app {\n    server 127.0.0.1:3000;\n    keepalive 64;\n}\n\nserver {\n    location / {\n        proxy_pass http://nodejs_app;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &#039;upgrade&#039;;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"pythongunicorn-integration\" class=\"mobile-header\">Python/Gunicorn Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream gunicorn_app {\n    server unix:/run/gunicorn.sock fail_timeout=0;\n}\n\nserver {\n    location / {\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n        proxy_pass http://gunicorn_app;\n    }\n    \n    location /static/ {\n        alias /var/www/app/static/;\n        expires 30d;\n        add_header Cache-Control &quot;public, immutable&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"ruby-on-rails\" class=\"mobile-header\">Ruby on Rails</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream rails_app {\n    server unix:/var/www/app/shared/sockets/puma.sock fail_timeout=0;\n}\n\nserver {\n    root /var/www/app/current/public;\n    \n    location / {\n        try_files $uri @rails_app;\n    }\n    \n    location @rails_app {\n        proxy_pass http://rails_app;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_redirect off;\n    }\n    \n    location ~ ^/(assets|packs)/ {\n        gzip_static on;\n        expires max;\n        add_header Cache-Control public;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"websocket-support\" class=\"mobile-header\">WebSocket Support</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">map $http_upgrade $connection_upgrade {\n    default upgrade;\n    &#039;&#039; close;\n}\n\nupstream websocket {\n    server 127.0.0.1:8080;\n}\n\nserver {\n    location /ws {\n        proxy_pass http://websocket;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection $connection_upgrade;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Timeouts\n        proxy_connect_timeout 7d;\n        proxy_send_timeout 7d;\n        proxy_read_timeout 7d;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://nginx.org/en/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/nginx/nginx\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.nginx.com/resources/wiki/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">NGINX Wiki</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.digitalocean.com/community/tools/nginx\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">NGINX Config Generator</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forum.nginx.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://nginx.org/en/security_advisories.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Advisories</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.nginx.com/resources/wiki/modules/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Module Registry</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"15 min","wordCount":2897,"lastBuilt":"2025-09-14T01:30:42.853Z"},{"name":"nodejs","displayName":"Node.js","slug":"nodejs","description":"Repo for nodejs","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nodejs","updatedAt":"2025-09-08T03:12:42Z","createdAt":"2023-08-28T03:49:17Z","readmeRaw":"# Node.js Installation Guide\n\nJavaScript runtime built on Chrome's V8 JavaScript engine. Essential platform for modern web applications, APIs, and microservices with enterprise-grade performance and security features.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 2GB RAM minimum, 4GB+ recommended for production\n- curl or wget for package downloads\n- Git for source code management\n\n## Installation\n\n### Using NVM (Recommended for Development)\n```bash\n# Download and install NVM (Node Version Manager)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n\n# Reload shell profile\nsource ~/.bashrc\n\n# Install latest LTS version (recommended for production)\nnvm install --lts\nnvm use --lts\n\n# Install specific version\nnvm install 20.10.0  # Latest LTS as of 2024\nnvm use 20.10.0\n\n# Set default version\nnvm alias default 20.10.0\n\n# Verify installation\nnode --version\nnpm --version\n\n# List available versions\nnvm list-remote --lts\nnvm list\n```\n\n### Ubuntu/Debian (Package Manager)\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Method 1: Install from Ubuntu repositories (older version)\nsudo apt install -y nodejs npm\n\n# Method 2: Install from NodeSource repository (latest LTS)\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Install build tools for native modules\nsudo apt install -y build-essential python3-dev\n\n# Verify installation\nnode --version\nnpm --version\n\n# Update npm to latest version\nsudo npm install -g npm@latest\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Enable EPEL repository\nsudo yum install -y epel-release\n\n# Method 1: Install from EPEL (may be older)\nsudo yum install -y nodejs npm\n\n# Method 2: Install from NodeSource (recommended)\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo yum install -y nodejs\n\n# Install development tools\nsudo yum groupinstall -y \"Development Tools\"\nsudo yum install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version\n```\n\n### Fedora\n```bash\n# Install Node.js from official repositories\nsudo dnf install -y nodejs npm\n\n# Or install from NodeSource for latest LTS\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo dnf install -y nodejs\n\n# Install development tools\nsudo dnf groupinstall -y \"Development Tools\"\nsudo dnf install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version\n```\n\n### Arch Linux\n```bash\n# Install Node.js and npm\nsudo pacman -Syu nodejs npm\n\n# Install base-devel for building native modules\nsudo pacman -S base-devel python\n\n# Verify installation\nnode --version\nnpm --version\n```\n\n### Docker Installation\n```bash\n# Create Node.js application structure\nmkdir -p ~/nodejs-app/{src,config,logs,node_modules}\ncd ~/nodejs-app\n\n# Create production Dockerfile\ncat > Dockerfile <<EOF\n# Multi-stage build for production\nFROM node:20-alpine AS builder\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies (including dev dependencies)\nRUN npm ci --only=production\n\n# Production stage\nFROM node:20-alpine AS production\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs && \\\n    adduser -S nodejs -u 1001\n\n# Set working directory\nWORKDIR /usr/src/app\n\n# Copy node_modules from builder stage\nCOPY --from=builder /usr/src/app/node_modules ./node_modules\n\n# Copy application code\nCOPY --chown=nodejs:nodejs . .\n\n# Remove unnecessary files\nRUN rm -f .dockerignore Dockerfile* README.md\n\n# Security: Run as non-root user\nUSER nodejs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node healthcheck.js\n\n# Start application\nCMD [\"node\", \"server.js\"]\nEOF\n\n# Create .dockerignore\ncat > .dockerignore <<EOF\nnode_modules\nnpm-debug.log\nDockerfile*\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.npm\n.coverage\n.jest\n.cache\nEOF\n\n# Create production docker-compose.yml\ncat > docker-compose.prod.yml <<EOF\nversion: '3.8'\n\nservices:\n  app:\n    build:\n      context: .\n      target: production\n    restart: unless-stopped\n    ports:\n      - \"127.0.0.1:3000:3000\"\n    environment:\n      - NODE_ENV=production\n      - PORT=3000\n    volumes:\n      - ./logs:/usr/src/app/logs\n    networks:\n      - app-network\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n    healthcheck:\n      test: [\"CMD\", \"node\", \"healthcheck.js\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 30s\n\n  nginx:\n    image: nginx:alpine\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - app\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n    driver: bridge\nEOF\n\ndocker-compose -f docker-compose.prod.yml up -d\n```\n\n## Production Configuration\n\n### PM2 Process Manager (Production Standard)\n```bash\n# Install PM2 globally\nsudo npm install -g pm2\n\n# Create PM2 ecosystem configuration\ncat > ecosystem.config.js <<EOF\nmodule.exports = {\n  apps: [{\n    name: 'node-app',\n    script: './server.js',\n    instances: 'max',  // Use all CPU cores\n    exec_mode: 'cluster',\n    \n    // Performance settings\n    max_memory_restart: '1G',\n    node_args: '--max-old-space-size=1024',\n    \n    // Environment variables\n    env: {\n      NODE_ENV: 'development',\n      PORT: 3000\n    },\n    env_production: {\n      NODE_ENV: 'production',\n      PORT: 3000\n    },\n    \n    // Logging\n    log_file: './logs/app.log',\n    out_file: './logs/out.log',\n    error_file: './logs/error.log',\n    log_date_format: 'YYYY-MM-DD HH:mm:ss Z',\n    merge_logs: true,\n    \n    // Monitoring\n    monitoring: true,\n    pmx: true,\n    \n    // Auto-restart settings\n    autorestart: true,\n    watch: false,  // Disable in production\n    max_restarts: 10,\n    min_uptime: '10s',\n    \n    // Instance settings\n    instance_var: 'INSTANCE_ID',\n    \n    // Source map support\n    source_map_support: true,\n    \n    // Graceful shutdown\n    kill_timeout: 5000,\n    listen_timeout: 8000,\n    \n    // Health checking\n    health_check_grace_period: 3000\n  }],\n  \n  // Deployment configuration\n  deploy: {\n    production: {\n      user: 'nodejs',\n      host: ['app1.example.com', 'app2.example.com'],\n      ref: 'origin/main',\n      repo: 'git@github.com:username/repository.git',\n      path: '/var/www/production',\n      'post-deploy': 'npm install && pm2 reload ecosystem.config.js --env production',\n      'pre-setup': 'apt update -y; apt install git -y'\n    },\n    staging: {\n      user: 'nodejs',\n      host: 'staging.example.com',\n      ref: 'origin/develop',\n      repo: 'git@github.com:username/repository.git',\n      path: '/var/www/staging',\n      'post-deploy': 'npm install && pm2 reload ecosystem.config.js --env staging'\n    }\n  }\n};\nEOF\n\n# Start application with PM2\npm2 start ecosystem.config.js --env production\n\n# Save PM2 configuration\npm2 save\n\n# Generate startup script\npm2 startup\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u $USER --hp $HOME\n\n# Monitor application\npm2 status\npm2 logs\npm2 monit\n```\n\n### NGINX Reverse Proxy Configuration\n```bash\n# Create NGINX configuration for Node.js applications\nsudo tee /etc/nginx/sites-available/nodejs-app > /dev/null <<EOF\n# Node.js Application NGINX Configuration\n\nupstream nodejs_backend {\n    least_conn;\n    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;\n    # Add more servers for load balancing:\n    # server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;\n    # server 127.0.0.1:3002 max_fails=3 fail_timeout=30s;\n    keepalive 64;\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name app.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name app.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=api_limit:10m rate=10r/s;\n    limit_req zone=api_limit burst=20 nodelay;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    location / {\n        proxy_pass http://nodejs_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_cache_bypass \\$http_upgrade;\n        \n        # Timeout settings\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n        \n        # Buffer settings\n        proxy_buffer_size 4k;\n        proxy_buffers 4 4k;\n    }\n\n    # Static assets caching\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)\\$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n        access_log off;\n    }\n\n    # API rate limiting (stricter)\n    location /api/ {\n        limit_req zone=api_limit burst=10 nodelay;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n\n    # Health check endpoint\n    location /health {\n        access_log off;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/nodejs-app /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n### SystemD Service (Alternative to PM2)\n```bash\n# Create systemd service for Node.js application\nsudo tee /etc/systemd/system/nodejs-app.service > /dev/null <<EOF\n[Unit]\nDescription=Node.js Application\nDocumentation=https://nodejs.org/\nAfter=network.target\n\n[Service]\nType=simple\nUser=nodejs\nGroup=nodejs\nWorkingDirectory=/var/www/nodejs-app\nExecStart=/usr/bin/node server.js\nExecReload=/bin/kill -SIGUSR2 \\$MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=nodejs-app\n\n# Environment variables\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nPrivateDevices=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/www/nodejs-app/logs /var/www/nodejs-app/uploads\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\n\n# Resource limits\nMemoryMax=2G\nCPUQuota=200%\nTasksMax=4096\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create nodejs user\nsudo useradd --system --shell /bin/false --home /var/www/nodejs-app nodejs\n\n# Set up application directory\nsudo mkdir -p /var/www/nodejs-app/{logs,uploads}\nsudo chown -R nodejs:nodejs /var/www/nodejs-app\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nodejs-app\n```\n\n## Security Hardening\n\n### Application Security Best Practices\n```bash\n# Create secure application template\nmkdir -p ~/secure-nodejs-app\ncd ~/secure-nodejs-app\n\n# Create package.json with security-focused dependencies\ncat > package.json <<EOF\n{\n  \"name\": \"secure-nodejs-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Secure Node.js application template\",\n  \"main\": \"server.js\",\n  \"scripts\": {\n    \"start\": \"node server.js\",\n    \"dev\": \"nodemon server.js\",\n    \"test\": \"jest\",\n    \"security:audit\": \"npm audit\",\n    \"security:check\": \"nsp check\",\n    \"lint\": \"eslint .\",\n    \"format\": \"prettier --write .\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"helmet\": \"^7.1.0\",\n    \"cors\": \"^2.8.5\",\n    \"express-rate-limit\": \"^7.1.5\",\n    \"express-validator\": \"^7.0.1\",\n    \"bcryptjs\": \"^2.4.3\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"mongoose\": \"^8.0.3\",\n    \"dotenv\": \"^16.3.1\",\n    \"compression\": \"^1.7.4\",\n    \"morgan\": \"^1.10.0\",\n    \"winston\": \"^3.11.0\",\n    \"hpp\": \"^0.2.3\",\n    \"express-mongo-sanitize\": \"^2.2.0\",\n    \"xss\": \"^1.0.14\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\",\n    \"jest\": \"^29.7.0\",\n    \"eslint\": \"^8.55.0\",\n    \"prettier\": \"^3.1.0\",\n    \"nsp\": \"^3.2.1\"\n  },\n  \"engines\": {\n    \"node\": \">=20.0.0\",\n    \"npm\": \">=9.0.0\"\n  }\n}\nEOF\n\n# Create secure server template\ncat > server.js <<'EOF'\n'use strict';\n\nconst express = require('express');\nconst helmet = require('helmet');\nconst cors = require('cors');\nconst rateLimit = require('express-rate-limit');\nconst { body, validationResult } = require('express-validator');\nconst mongoSanitize = require('express-mongo-sanitize');\nconst xss = require('xss');\nconst compression = require('compression');\nconst morgan = require('morgan');\nconst winston = require('winston');\nconst hpp = require('hpp');\nrequire('dotenv').config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      scriptSrc: [\"'self'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"]\n    }\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(',') || ['https://example.com'],\n  methods: ['GET', 'POST', 'PUT', 'DELETE'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: 'Too many requests from this IP, please try again later.',\n  standardHeaders: true,\n  legacyHeaders: false\n});\napp.use(limiter);\n\n// API rate limiting (stricter)\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 50,\n  message: 'Too many API requests from this IP'\n});\napp.use('/api/', apiLimiter);\n\n// Body parsing with size limits\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: true, limit: '10mb' }));\n\n// Security sanitization\napp.use(mongoSanitize());\napp.use(hpp()); // Prevent HTTP Parameter Pollution\n\n// Compression\napp.use(compression());\n\n// Logging\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: 'logs/error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'logs/combined.log' })\n  ]\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\n// Request logging\napp.use(morgan('combined', {\n  stream: { write: message => logger.info(message.trim()) }\n}));\n\n// Input validation middleware\nconst validateInput = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      success: false,\n      errors: errors.array()\n    });\n  }\n  next();\n};\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.status(200).json({\n    status: 'healthy',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    memory: process.memoryUsage(),\n    version: process.version\n  });\n});\n\n// API routes with validation\napp.post('/api/users', [\n  body('email').isEmail().normalizeEmail(),\n  body('name').trim().escape().isLength({ min: 2, max: 50 }),\n  body('password').isLength({ min: 12 }).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])/),\n  validateInput\n], (req, res) => {\n  try {\n    // Sanitize input\n    const sanitizedBody = {\n      email: xss(req.body.email),\n      name: xss(req.body.name),\n      password: req.body.password // Don't sanitize password, just validate\n    };\n    \n    // Process request\n    res.json({ success: true, message: 'User created successfully' });\n  } catch (error) {\n    logger.error('Error creating user:', error);\n    res.status(500).json({ success: false, message: 'Internal server error' });\n  }\n});\n\n// Error handling middleware\napp.use((error, req, res, next) => {\n  logger.error('Unhandled error:', error);\n  \n  res.status(error.status || 500).json({\n    success: false,\n    message: process.env.NODE_ENV === 'production' \n      ? 'Something went wrong!' \n      : error.message\n  });\n});\n\n// 404 handler\napp.use('*', (req, res) => {\n  res.status(404).json({\n    success: false,\n    message: 'Route not found'\n  });\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  logger.info('SIGTERM signal received: closing HTTP server');\n  server.close(() => {\n    logger.info('HTTP server closed');\n    process.exit(0);\n  });\n});\n\nprocess.on('SIGINT', () => {\n  logger.info('SIGINT signal received: closing HTTP server');\n  server.close(() => {\n    logger.info('HTTP server closed');\n    process.exit(0);\n  });\n});\n\n// Unhandled promise rejection handling\nprocess.on('unhandledRejection', (reason, promise) => {\n  logger.error('Unhandled Rejection at:', promise, 'reason:', reason);\n  process.exit(1);\n});\n\n// Uncaught exception handling\nprocess.on('uncaughtException', (error) => {\n  logger.error('Uncaught Exception thrown:', error);\n  process.exit(1);\n});\n\nconst server = app.listen(PORT, '127.0.0.1', () => {\n  logger.info(`Server running on port ${PORT} in ${process.env.NODE_ENV} mode`);\n});\n\nmodule.exports = app;\nEOF\n\n# Create healthcheck script for Docker\ncat > healthcheck.js <<EOF\nconst http = require('http');\n\nconst options = {\n  hostname: 'localhost',\n  port: process.env.PORT || 3000,\n  path: '/health',\n  method: 'GET',\n  timeout: 2000\n};\n\nconst req = http.request(options, (res) => {\n  if (res.statusCode === 200) {\n    process.exit(0);\n  } else {\n    process.exit(1);\n  }\n});\n\nreq.on('error', () => {\n  process.exit(1);\n});\n\nreq.end();\nEOF\n\n# Install dependencies\nnpm install\n```\n\n### Environment Configuration\n```bash\n# Create secure environment configuration\ncat > .env.example <<EOF\n# Node.js Application Environment Configuration\n\n# Application settings\nNODE_ENV=production\nPORT=3000\nHOST=127.0.0.1\n\n# Database connection\nDATABASE_URL=mongodb://username:password@localhost:27017/myapp?authSource=admin\n# Or PostgreSQL: postgresql://username:password@localhost:5432/myapp\n\n# Security keys (generate with: openssl rand -base64 32)\nJWT_SECRET=your_jwt_secret_here_32_characters_minimum\nSESSION_SECRET=your_session_secret_here_32_characters_minimum\nENCRYPTION_KEY=your_encryption_key_here_32_characters\n\n# CORS settings\nALLOWED_ORIGINS=https://example.com,https://app.example.com\n\n# Email configuration (for notifications)\nSMTP_HOST=smtp.example.com\nSMTP_PORT=587\nSMTP_USER=app@example.com\nSMTP_PASS=smtp_password\n\n# Rate limiting\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX=100\n\n# File upload settings\nMAX_FILE_SIZE=10485760\nUPLOAD_PATH=/var/www/nodejs-app/uploads\n\n# Monitoring\nENABLE_MONITORING=true\nLOG_LEVEL=info\n\n# Security settings\nBCRYPT_ROUNDS=12\nJWT_EXPIRY=24h\nSESSION_TIMEOUT=3600000\n\n# External APIs\nEXTERNAL_API_KEY=your_api_key_here\nEXTERNAL_API_URL=https://api.external-service.com\n\n# Redis configuration (for sessions/caching)\nREDIS_URL=redis://localhost:6379\nREDIS_PASSWORD=redis_password\n\n# Health check settings\nHEALTH_CHECK_INTERVAL=30000\nEOF\n\n# Create production environment file\ncp .env.example .env\necho \".env\" >> .gitignore\n\n# Set secure permissions\nchmod 600 .env\n```\n\n## Performance Optimization\n\n### Node.js Performance Tuning\n```bash\n# Create performance optimization script\nsudo tee /usr/local/bin/nodejs-optimize.sh > /dev/null <<'EOF'\n#!/bin/bash\n\necho \"Optimizing Node.js application performance...\"\n\n# System-level optimizations\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf > /dev/null <<LIMITS\nnodejs soft nofile 65535\nnodejs hard nofile 65535\nnodejs soft nproc 65535\nnodejs hard nproc 65535\nLIMITS\n\n# Kernel optimizations for Node.js\nsudo tee -a /etc/sysctl.conf > /dev/null <<SYSCTL\n# Node.js optimizations\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\nvm.swappiness = 1\nSYSCTL\n\nsudo sysctl -p\n\n# PM2 optimization for clustering\nif command -v pm2 >/dev/null 2>&1; then\n    # Update PM2 configuration for performance\n    pm2 delete all 2>/dev/null || true\n    \n    cat > /tmp/ecosystem-optimized.config.js <<PM2CONFIG\nmodule.exports = {\n  apps: [{\n    name: 'nodejs-app-optimized',\n    script: './server.js',\n    instances: 'max',\n    exec_mode: 'cluster',\n    \n    // V8 optimizations\n    node_args: [\n      '--max-old-space-size=2048',\n      '--optimize-for-size',\n      '--gc-interval=100',\n      '--expose-gc'\n    ],\n    \n    // Performance settings\n    max_memory_restart: '2G',\n    min_uptime: '10s',\n    max_restarts: 5,\n    \n    // Environment\n    env_production: {\n      NODE_ENV: 'production',\n      UV_THREADPOOL_SIZE: 16\n    }\n  }]\n};\nPM2CONFIG\n    \n    pm2 start /tmp/ecosystem-optimized.config.js --env production\n    pm2 save\nfi\n\necho \"Node.js optimization completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-optimize.sh\n```\n\n### Monitoring and Logging\n```bash\n# Create Node.js monitoring script\nsudo tee /usr/local/bin/nodejs-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nMONITOR_LOG=\"/var/log/nodejs-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${MONITOR_LOG}\n}\n\n# Check if PM2 is managing processes\nif command -v pm2 >/dev/null 2>&1; then\n    PM2_STATUS=$(pm2 jlist | jq -r '.[].pm2_env.status' 2>/dev/null)\n    if echo \"$PM2_STATUS\" | grep -q \"online\"; then\n        log_message \"✓ PM2 processes are running\"\n        \n        # Check memory usage\n        PM2_MEMORY=$(pm2 jlist | jq -r '.[].monit.memory' 2>/dev/null | awk '{sum += $1} END {print sum/1024/1024}')\n        log_message \"ℹ PM2 total memory usage: ${PM2_MEMORY}MB\"\n        \n        # Check CPU usage\n        PM2_CPU=$(pm2 jlist | jq -r '.[].monit.cpu' 2>/dev/null | awk '{sum += $1} END {print sum}')\n        log_message \"ℹ PM2 total CPU usage: ${PM2_CPU}%\"\n    else\n        log_message \"⚠ PM2 processes not online\"\n    fi\nfi\n\n# Check systemd service (if not using PM2)\nif systemctl is-active nodejs-app >/dev/null 2>&1; then\n    log_message \"✓ Node.js systemd service is running\"\nelse\n    log_message \"ℹ Node.js systemd service not active (may be using PM2)\"\nfi\n\n# Check application health endpoint\nif curl -f http://localhost:3000/health >/dev/null 2>&1; then\n    log_message \"✓ Application health endpoint responding\"\n    \n    # Get detailed health info\n    HEALTH_DATA=$(curl -s http://localhost:3000/health)\n    UPTIME=$(echo \"$HEALTH_DATA\" | jq -r '.uptime' 2>/dev/null)\n    MEMORY_USED=$(echo \"$HEALTH_DATA\" | jq -r '.memory.rss' 2>/dev/null)\n    \n    if [ -n \"$UPTIME\" ]; then\n        log_message \"ℹ Application uptime: ${UPTIME}s\"\n    fi\n    if [ -n \"$MEMORY_USED\" ]; then\n        MEMORY_MB=$((MEMORY_USED / 1024 / 1024))\n        log_message \"ℹ Application memory: ${MEMORY_MB}MB\"\n    fi\nelse\n    log_message \"✗ Application health endpoint not responding\"\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node --version 2>/dev/null)\nif [ -n \"$NODE_VERSION\" ]; then\n    log_message \"ℹ Node.js version: ${NODE_VERSION}\"\nfi\n\n# Check npm security audit\nif [ -f \"package.json\" ]; then\n    AUDIT_RESULT=$(npm audit --audit-level high --json 2>/dev/null)\n    VULNERABILITIES=$(echo \"$AUDIT_RESULT\" | jq -r '.metadata.vulnerabilities.total' 2>/dev/null)\n    if [ -n \"$VULNERABILITIES\" ] && [ \"$VULNERABILITIES\" -gt 0 ]; then\n        log_message \"⚠ ${VULNERABILITIES} security vulnerabilities found\"\n    else\n        log_message \"✓ No high/critical security vulnerabilities\"\n    fi\nfi\n\nlog_message \"Node.js monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho \"*/5 * * * * root /usr/local/bin/nodejs-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n## Backup and Deployment\n\n### Application Backup Strategy\n```bash\nsudo tee /usr/local/bin/nodejs-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/nodejs\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{app,config,logs}\n\necho \"Starting Node.js application backup...\"\n\n# Backup application code and dependencies\ntar --exclude='node_modules' --exclude='logs/*' --exclude='.git' \\\n    -czf ${BACKUP_DIR}/app/nodejs-app-${DATE}.tar.gz \\\n    -C /var/www/nodejs-app .\n\n# Backup PM2 configuration and process list\nif command -v pm2 >/dev/null 2>&1; then\n    pm2 save\n    cp ~/.pm2/dump.pm2 ${BACKUP_DIR}/config/pm2-processes-${DATE}.json\n    cp ecosystem.config.js ${BACKUP_DIR}/config/ecosystem-${DATE}.js 2>/dev/null || true\nfi\n\n# Backup environment configuration\ncp /var/www/nodejs-app/.env ${BACKUP_DIR}/config/env-${DATE}.backup 2>/dev/null || true\n\n# Backup systemd service files\ncp /etc/systemd/system/nodejs-app.service ${BACKUP_DIR}/config/nodejs-app-${DATE}.service 2>/dev/null || true\n\n# Backup logs\ntar -czf ${BACKUP_DIR}/logs/nodejs-logs-${DATE}.tar.gz \\\n    /var/www/nodejs-app/logs/ 2>/dev/null || true\n\n# Backup NGINX configuration\ncp /etc/nginx/sites-available/nodejs-app ${BACKUP_DIR}/config/nginx-${DATE}.conf 2>/dev/null || true\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://nodejs-backups/ --recursive\ngsutil cp -r ${BACKUP_DIR}/* gs://nodejs-backups/\n\n# Keep only last 14 backups\nfind ${BACKUP_DIR} -name \"nodejs-*\" -type f -mtime +14 -delete\n\necho \"Node.js backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-backup.sh\n\n# Schedule daily backups\necho \"0 2 * * * root /usr/local/bin/nodejs-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Zero-Downtime Deployment\n```bash\n# Create deployment script\nsudo tee /usr/local/bin/nodejs-deploy.sh > /dev/null <<'EOF'\n#!/bin/bash\nVERSION=\"${1}\"\nREPO_URL=\"${2:-https://github.com/example/nodejs-app.git}\"\n\nif [ -z \"$VERSION\" ]; then\n    echo \"Usage: $0 <version> [repo_url]\"\n    echo \"Example: $0 v1.2.3\"\n    exit 1\nfi\n\nDEPLOY_DIR=\"/var/www/nodejs-app\"\nRELEASES_DIR=\"${DEPLOY_DIR}/releases\"\nSHARED_DIR=\"${DEPLOY_DIR}/shared\"\nCURRENT_LINK=\"${DEPLOY_DIR}/current\"\nRELEASE_DIR=\"${RELEASES_DIR}/${VERSION}\"\n\necho \"Deploying Node.js application version: ${VERSION}\"\n\n# Create directory structure\nmkdir -p ${RELEASES_DIR} ${SHARED_DIR}/{logs,uploads,config}\n\n# Clone and checkout specific version\ngit clone ${REPO_URL} ${RELEASE_DIR}\ncd ${RELEASE_DIR}\ngit checkout ${VERSION}\n\n# Copy shared configuration\ncp ${SHARED_DIR}/config/.env . 2>/dev/null || true\n\n# Install dependencies (production only)\nnpm ci --only=production\n\n# Run security audit\nnpm audit --audit-level high\n\n# Run tests\nnpm test\n\n# Create symbolic links for shared directories\nln -sfn ${SHARED_DIR}/logs logs\nln -sfn ${SHARED_DIR}/uploads uploads\n\n# Update current symlink (atomic operation)\nln -sfn ${RELEASE_DIR} ${CURRENT_LINK}\n\n# Reload PM2 or systemd service\nif command -v pm2 >/dev/null 2>&1 && pm2 list | grep -q \"nodejs-app\"; then\n    echo \"Reloading PM2 processes...\"\n    cd ${CURRENT_LINK}\n    pm2 reload ecosystem.config.js --env production\nelif systemctl is-active nodejs-app >/dev/null 2>&1; then\n    echo \"Restarting systemd service...\"\n    systemctl restart nodejs-app\nfi\n\n# Wait for application to be ready\necho \"Waiting for application to start...\"\nfor i in {1..30}; do\n    if curl -f http://localhost:3000/health >/dev/null 2>&1; then\n        echo \"✓ Application is healthy\"\n        break\n    fi\n    sleep 2\ndone\n\n# Keep only last 5 releases\ncd ${RELEASES_DIR}\nls -t | tail -n +6 | xargs rm -rf\n\n# Set proper ownership\nchown -R nodejs:nodejs ${DEPLOY_DIR}\n\necho \"Deployment completed successfully: ${VERSION}\"\necho \"Application is available at: http://localhost:3000\"\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-deploy.sh\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check Node.js application status\n# PM2 processes\npm2 status\npm2 logs\npm2 monit\n\n# SystemD service\nsudo systemctl status nodejs-app\nsudo journalctl -u nodejs-app -f\n\n# Check application logs\ntail -f /var/www/nodejs-app/logs/combined.log\ntail -f /var/www/nodejs-app/logs/error.log\n\n# Test application health\ncurl -i http://localhost:3000/health\n\n# Check memory leaks\nnode --inspect server.js\n# Connect Chrome DevTools to memory tab\n\n# Performance profiling\nnode --prof server.js\n# Generate profile: node --prof-process isolate-*.log > profile.txt\n\n# Check for security vulnerabilities\nnpm audit\nnpm audit fix\n\n# Update dependencies\nnpm outdated\nnpm update\n\n# Check package vulnerabilities\nnpx retire\n\n# Memory usage analysis\nps aux --sort=-%mem | grep node\npmap -x $(pgrep node)\n\n# Network connectivity\nss -tulpn | grep 3000\nnetstat -tulpn | grep node\n\n# Process monitoring\nhtop -p $(pgrep node)\ntop -p $(pgrep node)\n\n# Debug mode (development only)\nnode --inspect-brk server.js\n\n# Cluster mode debugging\npm2 logs --lines 1000\npm2 flush  # Clear all logs\n\n# Database connection issues\n# Check MongoDB connection\nmongosh --eval \"db.adminCommand('ping')\"\n\n# Check PostgreSQL connection\npsql -h localhost -U username -d dbname -c \"SELECT version();\"\n\n# SSL/HTTPS issues\nopenssl s_client -connect app.example.com:443\ncurl -I https://app.example.com\n\n# Environment issues\nprintenv | grep NODE\necho $NODE_ENV\n\n# Restart applications\npm2 restart all\n# Or\nsudo systemctl restart nodejs-app\n\n# Clean npm cache\nnpm cache clean --force\n\n# Rebuild native modules\nnpm rebuild\n```\n\n## Additional Resources\n\n- [Node.js Official Documentation](https://nodejs.org/docs/)\n- [Node.js Security Best Practices](https://nodejs.org/en/security/)\n- [PM2 Documentation](https://pm2.keymetrics.io/docs/)\n- [Express.js Security Guide](https://expressjs.com/en/advanced/best-practice-security.html)\n- [Node.js Best Practices](https://github.com/goldbergyoni/nodebestpractices)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"nodejs-installation-guide\" class=\"mobile-header\">Node.js Installation Guide</h1>\n<p class=\"mobile-paragraph\">JavaScript runtime built on Chrome's V8 JavaScript engine. Essential platform for modern web applications, APIs, and microservices with enterprise-grade performance and security features.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for production</li>\n<li class=\"mobile-list-item\">curl or wget for package downloads</li>\n<li class=\"mobile-list-item\">Git for source code management</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-nvm-recommended-for-development\" class=\"mobile-header\">Using NVM (Recommended for Development)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download and install NVM (Node Version Manager)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash\n\n# Reload shell profile\nsource ~/.bashrc\n\n# Install latest LTS version (recommended for production)\nnvm install --lts\nnvm use --lts\n\n# Install specific version\nnvm install 20.10.0  # Latest LTS as of 2024\nnvm use 20.10.0\n\n# Set default version\nnvm alias default 20.10.0\n\n# Verify installation\nnode --version\nnpm --version\n\n# List available versions\nnvm list-remote --lts\nnvm list</code></pre>\n      </div>\n    </div>\n<h3 id=\"ubuntudebian-package-manager\" class=\"mobile-header\">Ubuntu/Debian (Package Manager)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Method 1: Install from Ubuntu repositories (older version)\nsudo apt install -y nodejs npm\n\n# Method 2: Install from NodeSource repository (latest LTS)\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Install build tools for native modules\nsudo apt install -y build-essential python3-dev\n\n# Verify installation\nnode --version\nnpm --version\n\n# Update npm to latest version\nsudo npm install -g npm@latest</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable EPEL repository\nsudo yum install -y epel-release\n\n# Method 1: Install from EPEL (may be older)\nsudo yum install -y nodejs npm\n\n# Method 2: Install from NodeSource (recommended)\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo yum install -y nodejs\n\n# Install development tools\nsudo yum groupinstall -y &quot;Development Tools&quot;\nsudo yum install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js from official repositories\nsudo dnf install -y nodejs npm\n\n# Or install from NodeSource for latest LTS\ncurl -fsSL https://rpm.nodesource.com/setup_lts.x | sudo bash -\nsudo dnf install -y nodejs\n\n# Install development tools\nsudo dnf groupinstall -y &quot;Development Tools&quot;\nsudo dnf install -y python3-devel\n\n# Verify installation\nnode --version\nnpm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js and npm\nsudo pacman -Syu nodejs npm\n\n# Install base-devel for building native modules\nsudo pacman -S base-devel python\n\n# Verify installation\nnode --version\nnpm --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Node.js application structure\nmkdir -p ~/nodejs-app/{src,config,logs,node_modules}\ncd ~/nodejs-app\n\n# Create production Dockerfile\ncat &gt; Dockerfile &lt;&lt;EOF\n# Multi-stage build for production\nFROM node:20-alpine AS builder\n\n# Create app directory\nWORKDIR /usr/src/app\n\n# Copy package files\nCOPY package*.json ./\n\n# Install dependencies (including dev dependencies)\nRUN npm ci --only=production\n\n# Production stage\nFROM node:20-alpine AS production\n\n# Create non-root user\nRUN addgroup -g 1001 -S nodejs &amp;&amp; \\\n    adduser -S nodejs -u 1001\n\n# Set working directory\nWORKDIR /usr/src/app\n\n# Copy node_modules from builder stage\nCOPY --from=builder /usr/src/app/node_modules ./node_modules\n\n# Copy application code\nCOPY --chown=nodejs:nodejs . .\n\n# Remove unnecessary files\nRUN rm -f .dockerignore Dockerfile* README.md\n\n# Security: Run as non-root user\nUSER nodejs\n\n# Expose port\nEXPOSE 3000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD node healthcheck.js\n\n# Start application\nCMD [&quot;node&quot;, &quot;server.js&quot;]\nEOF\n\n# Create .dockerignore\ncat &gt; .dockerignore &lt;&lt;EOF\nnode_modules\nnpm-debug.log\nDockerfile*\n.git\n.gitignore\nREADME.md\n.env\n.nyc_output\ncoverage\n.npm\n.coverage\n.jest\n.cache\nEOF\n\n# Create production docker-compose.yml\ncat &gt; docker-compose.prod.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  app:\n    build:\n      context: .\n      target: production\n    restart: unless-stopped\n    ports:\n      - &quot;127.0.0.1:3000:3000&quot;\n    environment:\n      - NODE_ENV=production\n      - PORT=3000\n    volumes:\n      - ./logs:/usr/src/app/logs\n    networks:\n      - app-network\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;node&quot;, &quot;healthcheck.js&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n      start_period: 30s\n\n  nginx:\n    image: nginx:alpine\n    restart: unless-stopped\n    ports:\n      - &quot;80:80&quot;\n      - &quot;443:443&quot;\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./ssl:/etc/nginx/ssl:ro\n    depends_on:\n      - app\n    networks:\n      - app-network\n\nnetworks:\n  app-network:\n    driver: bridge\nEOF\n\ndocker-compose -f docker-compose.prod.yml up -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"production-configuration\" class=\"mobile-header\">Production Configuration</h2>\n<h3 id=\"pm2-process-manager-production-standard\" class=\"mobile-header\">PM2 Process Manager (Production Standard)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PM2 globally\nsudo npm install -g pm2\n\n# Create PM2 ecosystem configuration\ncat &gt; ecosystem.config.js &lt;&lt;EOF\nmodule.exports = {\n  apps: [{\n    name: &#039;node-app&#039;,\n    script: &#039;./server.js&#039;,\n    instances: &#039;max&#039;,  // Use all CPU cores\n    exec_mode: &#039;cluster&#039;,\n    \n    // Performance settings\n    max_memory_restart: &#039;1G&#039;,\n    node_args: &#039;--max-old-space-size=1024&#039;,\n    \n    // Environment variables\n    env: {\n      NODE_ENV: &#039;development&#039;,\n      PORT: 3000\n    },\n    env_production: {\n      NODE_ENV: &#039;production&#039;,\n      PORT: 3000\n    },\n    \n    // Logging\n    log_file: &#039;./logs/app.log&#039;,\n    out_file: &#039;./logs/out.log&#039;,\n    error_file: &#039;./logs/error.log&#039;,\n    log_date_format: &#039;YYYY-MM-DD HH:mm:ss Z&#039;,\n    merge_logs: true,\n    \n    // Monitoring\n    monitoring: true,\n    pmx: true,\n    \n    // Auto-restart settings\n    autorestart: true,\n    watch: false,  // Disable in production\n    max_restarts: 10,\n    min_uptime: &#039;10s&#039;,\n    \n    // Instance settings\n    instance_var: &#039;INSTANCE_ID&#039;,\n    \n    // Source map support\n    source_map_support: true,\n    \n    // Graceful shutdown\n    kill_timeout: 5000,\n    listen_timeout: 8000,\n    \n    // Health checking\n    health_check_grace_period: 3000\n  }],\n  \n  // Deployment configuration\n  deploy: {\n    production: {\n      user: &#039;nodejs&#039;,\n      host: [&#039;app1.example.com&#039;, &#039;app2.example.com&#039;],\n      ref: &#039;origin/main&#039;,\n      repo: &#039;git@github.com:username/repository.git&#039;,\n      path: &#039;/var/www/production&#039;,\n      &#039;post-deploy&#039;: &#039;npm install &amp;&amp; pm2 reload ecosystem.config.js --env production&#039;,\n      &#039;pre-setup&#039;: &#039;apt update -y; apt install git -y&#039;\n    },\n    staging: {\n      user: &#039;nodejs&#039;,\n      host: &#039;staging.example.com&#039;,\n      ref: &#039;origin/develop&#039;,\n      repo: &#039;git@github.com:username/repository.git&#039;,\n      path: &#039;/var/www/staging&#039;,\n      &#039;post-deploy&#039;: &#039;npm install &amp;&amp; pm2 reload ecosystem.config.js --env staging&#039;\n    }\n  }\n};\nEOF\n\n# Start application with PM2\npm2 start ecosystem.config.js --env production\n\n# Save PM2 configuration\npm2 save\n\n# Generate startup script\npm2 startup\nsudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u $USER --hp $HOME\n\n# Monitor application\npm2 status\npm2 logs\npm2 monit</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy-configuration\" class=\"mobile-header\">NGINX Reverse Proxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration for Node.js applications\nsudo tee /etc/nginx/sites-available/nodejs-app &gt; /dev/null &lt;&lt;EOF\n# Node.js Application NGINX Configuration\n\nupstream nodejs_backend {\n    least_conn;\n    server 127.0.0.1:3000 max_fails=3 fail_timeout=30s;\n    # Add more servers for load balancing:\n    # server 127.0.0.1:3001 max_fails=3 fail_timeout=30s;\n    # server 127.0.0.1:3002 max_fails=3 fail_timeout=30s;\n    keepalive 64;\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name app.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name app.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=api_limit:10m rate=10r/s;\n    limit_req zone=api_limit burst=20 nodelay;\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1024;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        text/plain\n        text/css\n        text/xml\n        text/javascript\n        application/json\n        application/javascript\n        application/xml+rss\n        application/atom+xml\n        image/svg+xml;\n\n    location / {\n        proxy_pass http://nodejs_backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &#039;upgrade&#039;;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_cache_bypass \\$http_upgrade;\n        \n        # Timeout settings\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n        \n        # Buffer settings\n        proxy_buffer_size 4k;\n        proxy_buffers 4 4k;\n    }\n\n    # Static assets caching\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)\\$ {\n        expires 1y;\n        add_header Cache-Control &quot;public, immutable&quot;;\n        access_log off;\n    }\n\n    # API rate limiting (stricter)\n    location /api/ {\n        limit_req zone=api_limit burst=10 nodelay;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n\n    # Health check endpoint\n    location /health {\n        access_log off;\n        proxy_pass http://nodejs_backend;\n        proxy_set_header Host \\$host;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/nodejs-app /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service-alternative-to-pm2\" class=\"mobile-header\">SystemD Service (Alternative to PM2)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service for Node.js application\nsudo tee /etc/systemd/system/nodejs-app.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Node.js Application\nDocumentation=https://nodejs.org/\nAfter=network.target\n\n[Service]\nType=simple\nUser=nodejs\nGroup=nodejs\nWorkingDirectory=/var/www/nodejs-app\nExecStart=/usr/bin/node server.js\nExecReload=/bin/kill -SIGUSR2 \\$MAINPID\nRestart=always\nRestartSec=10\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=nodejs-app\n\n# Environment variables\nEnvironment=NODE_ENV=production\nEnvironment=PORT=3000\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nPrivateDevices=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/www/nodejs-app/logs /var/www/nodejs-app/uploads\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\n\n# Resource limits\nMemoryMax=2G\nCPUQuota=200%\nTasksMax=4096\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create nodejs user\nsudo useradd --system --shell /bin/false --home /var/www/nodejs-app nodejs\n\n# Set up application directory\nsudo mkdir -p /var/www/nodejs-app/{logs,uploads}\nsudo chown -R nodejs:nodejs /var/www/nodejs-app\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nodejs-app</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"application-security-best-practices\" class=\"mobile-header\">Application Security Best Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure application template\nmkdir -p ~/secure-nodejs-app\ncd ~/secure-nodejs-app\n\n# Create package.json with security-focused dependencies\ncat &gt; package.json &lt;&lt;EOF\n{\n  &quot;name&quot;: &quot;secure-nodejs-app&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;description&quot;: &quot;Secure Node.js application template&quot;,\n  &quot;main&quot;: &quot;server.js&quot;,\n  &quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node server.js&quot;,\n    &quot;dev&quot;: &quot;nodemon server.js&quot;,\n    &quot;test&quot;: &quot;jest&quot;,\n    &quot;security:audit&quot;: &quot;npm audit&quot;,\n    &quot;security:check&quot;: &quot;nsp check&quot;,\n    &quot;lint&quot;: &quot;eslint .&quot;,\n    &quot;format&quot;: &quot;prettier --write .&quot;\n  },\n  &quot;dependencies&quot;: {\n    &quot;express&quot;: &quot;^4.18.2&quot;,\n    &quot;helmet&quot;: &quot;^7.1.0&quot;,\n    &quot;cors&quot;: &quot;^2.8.5&quot;,\n    &quot;express-rate-limit&quot;: &quot;^7.1.5&quot;,\n    &quot;express-validator&quot;: &quot;^7.0.1&quot;,\n    &quot;bcryptjs&quot;: &quot;^2.4.3&quot;,\n    &quot;jsonwebtoken&quot;: &quot;^9.0.2&quot;,\n    &quot;mongoose&quot;: &quot;^8.0.3&quot;,\n    &quot;dotenv&quot;: &quot;^16.3.1&quot;,\n    &quot;compression&quot;: &quot;^1.7.4&quot;,\n    &quot;morgan&quot;: &quot;^1.10.0&quot;,\n    &quot;winston&quot;: &quot;^3.11.0&quot;,\n    &quot;hpp&quot;: &quot;^0.2.3&quot;,\n    &quot;express-mongo-sanitize&quot;: &quot;^2.2.0&quot;,\n    &quot;xss&quot;: &quot;^1.0.14&quot;\n  },\n  &quot;devDependencies&quot;: {\n    &quot;nodemon&quot;: &quot;^3.0.2&quot;,\n    &quot;jest&quot;: &quot;^29.7.0&quot;,\n    &quot;eslint&quot;: &quot;^8.55.0&quot;,\n    &quot;prettier&quot;: &quot;^3.1.0&quot;,\n    &quot;nsp&quot;: &quot;^3.2.1&quot;\n  },\n  &quot;engines&quot;: {\n    &quot;node&quot;: &quot;&gt;=20.0.0&quot;,\n    &quot;npm&quot;: &quot;&gt;=9.0.0&quot;\n  }\n}\nEOF\n\n# Create secure server template\ncat &gt; server.js &lt;&lt;&#039;EOF&#039;\n&#039;use strict&#039;;\n\nconst express = require(&#039;express&#039;);\nconst helmet = require(&#039;helmet&#039;);\nconst cors = require(&#039;cors&#039;);\nconst rateLimit = require(&#039;express-rate-limit&#039;);\nconst { body, validationResult } = require(&#039;express-validator&#039;);\nconst mongoSanitize = require(&#039;express-mongo-sanitize&#039;);\nconst xss = require(&#039;xss&#039;);\nconst compression = require(&#039;compression&#039;);\nconst morgan = require(&#039;morgan&#039;);\nconst winston = require(&#039;winston&#039;);\nconst hpp = require(&#039;hpp&#039;);\nrequire(&#039;dotenv&#039;).config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [&quot;&#039;self&#039;&quot;],\n      styleSrc: [&quot;&#039;self&#039;&quot;, &quot;&#039;unsafe-inline&#039;&quot;],\n      scriptSrc: [&quot;&#039;self&#039;&quot;],\n      imgSrc: [&quot;&#039;self&#039;&quot;, &quot;data:&quot;, &quot;https:&quot;]\n    }\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// CORS configuration\napp.use(cors({\n  origin: process.env.ALLOWED_ORIGINS?.split(&#039;,&#039;) || [&#039;https://example.com&#039;],\n  methods: [&#039;GET&#039;, &#039;POST&#039;, &#039;PUT&#039;, &#039;DELETE&#039;],\n  allowedHeaders: [&#039;Content-Type&#039;, &#039;Authorization&#039;],\n  credentials: true\n}));\n\n// Rate limiting\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: &#039;Too many requests from this IP, please try again later.&#039;,\n  standardHeaders: true,\n  legacyHeaders: false\n});\napp.use(limiter);\n\n// API rate limiting (stricter)\nconst apiLimiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 50,\n  message: &#039;Too many API requests from this IP&#039;\n});\napp.use(&#039;/api/&#039;, apiLimiter);\n\n// Body parsing with size limits\napp.use(express.json({ limit: &#039;10mb&#039; }));\napp.use(express.urlencoded({ extended: true, limit: &#039;10mb&#039; }));\n\n// Security sanitization\napp.use(mongoSanitize());\napp.use(hpp()); // Prevent HTTP Parameter Pollution\n\n// Compression\napp.use(compression());\n\n// Logging\nconst logger = winston.createLogger({\n  level: &#039;info&#039;,\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  transports: [\n    new winston.transports.File({ filename: &#039;logs/error.log&#039;, level: &#039;error&#039; }),\n    new winston.transports.File({ filename: &#039;logs/combined.log&#039; })\n  ]\n});\n\nif (process.env.NODE_ENV !== &#039;production&#039;) {\n  logger.add(new winston.transports.Console({\n    format: winston.format.simple()\n  }));\n}\n\n// Request logging\napp.use(morgan(&#039;combined&#039;, {\n  stream: { write: message =&gt; logger.info(message.trim()) }\n}));\n\n// Input validation middleware\nconst validateInput = (req, res, next) =&gt; {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      success: false,\n      errors: errors.array()\n    });\n  }\n  next();\n};\n\n// Health check endpoint\napp.get(&#039;/health&#039;, (req, res) =&gt; {\n  res.status(200).json({\n    status: &#039;healthy&#039;,\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    memory: process.memoryUsage(),\n    version: process.version\n  });\n});\n\n// API routes with validation\napp.post(&#039;/api/users&#039;, [\n  body(&#039;email&#039;).isEmail().normalizeEmail(),\n  body(&#039;name&#039;).trim().escape().isLength({ min: 2, max: 50 }),\n  body(&#039;password&#039;).isLength({ min: 12 }).matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&amp;])/),\n  validateInput\n], (req, res) =&gt; {\n  try {\n    // Sanitize input\n    const sanitizedBody = {\n      email: xss(req.body.email),\n      name: xss(req.body.name),\n      password: req.body.password // Don&#039;t sanitize password, just validate\n    };\n    \n    // Process request\n    res.json({ success: true, message: &#039;User created successfully&#039; });\n  } catch (error) {\n    logger.error(&#039;Error creating user:&#039;, error);\n    res.status(500).json({ success: false, message: &#039;Internal server error&#039; });\n  }\n});\n\n// Error handling middleware\napp.use((error, req, res, next) =&gt; {\n  logger.error(&#039;Unhandled error:&#039;, error);\n  \n  res.status(error.status || 500).json({\n    success: false,\n    message: process.env.NODE_ENV === &#039;production&#039; \n      ? &#039;Something went wrong!&#039; \n      : error.message\n  });\n});\n\n// 404 handler\napp.use(&#039;*&#039;, (req, res) =&gt; {\n  res.status(404).json({\n    success: false,\n    message: &#039;Route not found&#039;\n  });\n});\n\n// Graceful shutdown\nprocess.on(&#039;SIGTERM&#039;, () =&gt; {\n  logger.info(&#039;SIGTERM signal received: closing HTTP server&#039;);\n  server.close(() =&gt; {\n    logger.info(&#039;HTTP server closed&#039;);\n    process.exit(0);\n  });\n});\n\nprocess.on(&#039;SIGINT&#039;, () =&gt; {\n  logger.info(&#039;SIGINT signal received: closing HTTP server&#039;);\n  server.close(() =&gt; {\n    logger.info(&#039;HTTP server closed&#039;);\n    process.exit(0);\n  });\n});\n\n// Unhandled promise rejection handling\nprocess.on(&#039;unhandledRejection&#039;, (reason, promise) =&gt; {\n  logger.error(&#039;Unhandled Rejection at:&#039;, promise, &#039;reason:&#039;, reason);\n  process.exit(1);\n});\n\n// Uncaught exception handling\nprocess.on(&#039;uncaughtException&#039;, (error) =&gt; {\n  logger.error(&#039;Uncaught Exception thrown:&#039;, error);\n  process.exit(1);\n});\n\nconst server = app.listen(PORT, &#039;127.0.0.1&#039;, () =&gt; {\n  logger.info(`Server running on port ${PORT} in ${process.env.NODE_ENV} mode`);\n});\n\nmodule.exports = app;\nEOF\n\n# Create healthcheck script for Docker\ncat &gt; healthcheck.js &lt;&lt;EOF\nconst http = require(&#039;http&#039;);\n\nconst options = {\n  hostname: &#039;localhost&#039;,\n  port: process.env.PORT || 3000,\n  path: &#039;/health&#039;,\n  method: &#039;GET&#039;,\n  timeout: 2000\n};\n\nconst req = http.request(options, (res) =&gt; {\n  if (res.statusCode === 200) {\n    process.exit(0);\n  } else {\n    process.exit(1);\n  }\n});\n\nreq.on(&#039;error&#039;, () =&gt; {\n  process.exit(1);\n});\n\nreq.end();\nEOF\n\n# Install dependencies\nnpm install</code></pre>\n      </div>\n    </div>\n<h3 id=\"environment-configuration\" class=\"mobile-header\">Environment Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure environment configuration\ncat &gt; .env.example &lt;&lt;EOF\n# Node.js Application Environment Configuration\n\n# Application settings\nNODE_ENV=production\nPORT=3000\nHOST=127.0.0.1\n\n# Database connection\nDATABASE_URL=mongodb://username:password@localhost:27017/myapp?authSource=admin\n# Or PostgreSQL: postgresql://username:password@localhost:5432/myapp\n\n# Security keys (generate with: openssl rand -base64 32)\nJWT_SECRET=your_jwt_secret_here_32_characters_minimum\nSESSION_SECRET=your_session_secret_here_32_characters_minimum\nENCRYPTION_KEY=your_encryption_key_here_32_characters\n\n# CORS settings\nALLOWED_ORIGINS=https://example.com,https://app.example.com\n\n# Email configuration (for notifications)\nSMTP_HOST=smtp.example.com\nSMTP_PORT=587\nSMTP_USER=app@example.com\nSMTP_PASS=smtp_password\n\n# Rate limiting\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX=100\n\n# File upload settings\nMAX_FILE_SIZE=10485760\nUPLOAD_PATH=/var/www/nodejs-app/uploads\n\n# Monitoring\nENABLE_MONITORING=true\nLOG_LEVEL=info\n\n# Security settings\nBCRYPT_ROUNDS=12\nJWT_EXPIRY=24h\nSESSION_TIMEOUT=3600000\n\n# External APIs\nEXTERNAL_API_KEY=your_api_key_here\nEXTERNAL_API_URL=https://api.external-service.com\n\n# Redis configuration (for sessions/caching)\nREDIS_URL=redis://localhost:6379\nREDIS_PASSWORD=redis_password\n\n# Health check settings\nHEALTH_CHECK_INTERVAL=30000\nEOF\n\n# Create production environment file\ncp .env.example .env\necho &quot;.env&quot; &gt;&gt; .gitignore\n\n# Set secure permissions\nchmod 600 .env</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"nodejs-performance-tuning\" class=\"mobile-header\">Node.js Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create performance optimization script\nsudo tee /usr/local/bin/nodejs-optimize.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\necho &quot;Optimizing Node.js application performance...&quot;\n\n# System-level optimizations\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;LIMITS\nnodejs soft nofile 65535\nnodejs hard nofile 65535\nnodejs soft nproc 65535\nnodejs hard nproc 65535\nLIMITS\n\n# Kernel optimizations for Node.js\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;SYSCTL\n# Node.js optimizations\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\nvm.swappiness = 1\nSYSCTL\n\nsudo sysctl -p\n\n# PM2 optimization for clustering\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1; then\n    # Update PM2 configuration for performance\n    pm2 delete all 2&gt;/dev/null || true\n    \n    cat &gt; /tmp/ecosystem-optimized.config.js &lt;&lt;PM2CONFIG\nmodule.exports = {\n  apps: [{\n    name: &#039;nodejs-app-optimized&#039;,\n    script: &#039;./server.js&#039;,\n    instances: &#039;max&#039;,\n    exec_mode: &#039;cluster&#039;,\n    \n    // V8 optimizations\n    node_args: [\n      &#039;--max-old-space-size=2048&#039;,\n      &#039;--optimize-for-size&#039;,\n      &#039;--gc-interval=100&#039;,\n      &#039;--expose-gc&#039;\n    ],\n    \n    // Performance settings\n    max_memory_restart: &#039;2G&#039;,\n    min_uptime: &#039;10s&#039;,\n    max_restarts: 5,\n    \n    // Environment\n    env_production: {\n      NODE_ENV: &#039;production&#039;,\n      UV_THREADPOOL_SIZE: 16\n    }\n  }]\n};\nPM2CONFIG\n    \n    pm2 start /tmp/ecosystem-optimized.config.js --env production\n    pm2 save\nfi\n\necho &quot;Node.js optimization completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-optimize.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"monitoring-and-logging\" class=\"mobile-header\">Monitoring and Logging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Node.js monitoring script\nsudo tee /usr/local/bin/nodejs-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMONITOR_LOG=&quot;/var/log/nodejs-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${MONITOR_LOG}\n}\n\n# Check if PM2 is managing processes\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1; then\n    PM2_STATUS=$(pm2 jlist | jq -r &#039;.[].pm2_env.status&#039; 2&gt;/dev/null)\n    if echo &quot;$PM2_STATUS&quot; | grep -q &quot;online&quot;; then\n        log_message &quot;✓ PM2 processes are running&quot;\n        \n        # Check memory usage\n        PM2_MEMORY=$(pm2 jlist | jq -r &#039;.[].monit.memory&#039; 2&gt;/dev/null | awk &#039;{sum += $1} END {print sum/1024/1024}&#039;)\n        log_message &quot;ℹ PM2 total memory usage: ${PM2_MEMORY}MB&quot;\n        \n        # Check CPU usage\n        PM2_CPU=$(pm2 jlist | jq -r &#039;.[].monit.cpu&#039; 2&gt;/dev/null | awk &#039;{sum += $1} END {print sum}&#039;)\n        log_message &quot;ℹ PM2 total CPU usage: ${PM2_CPU}%&quot;\n    else\n        log_message &quot;⚠ PM2 processes not online&quot;\n    fi\nfi\n\n# Check systemd service (if not using PM2)\nif systemctl is-active nodejs-app &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Node.js systemd service is running&quot;\nelse\n    log_message &quot;ℹ Node.js systemd service not active (may be using PM2)&quot;\nfi\n\n# Check application health endpoint\nif curl -f http://localhost:3000/health &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ Application health endpoint responding&quot;\n    \n    # Get detailed health info\n    HEALTH_DATA=$(curl -s http://localhost:3000/health)\n    UPTIME=$(echo &quot;$HEALTH_DATA&quot; | jq -r &#039;.uptime&#039; 2&gt;/dev/null)\n    MEMORY_USED=$(echo &quot;$HEALTH_DATA&quot; | jq -r &#039;.memory.rss&#039; 2&gt;/dev/null)\n    \n    if [ -n &quot;$UPTIME&quot; ]; then\n        log_message &quot;ℹ Application uptime: ${UPTIME}s&quot;\n    fi\n    if [ -n &quot;$MEMORY_USED&quot; ]; then\n        MEMORY_MB=$((MEMORY_USED / 1024 / 1024))\n        log_message &quot;ℹ Application memory: ${MEMORY_MB}MB&quot;\n    fi\nelse\n    log_message &quot;✗ Application health endpoint not responding&quot;\nfi\n\n# Check Node.js version\nNODE_VERSION=$(node --version 2&gt;/dev/null)\nif [ -n &quot;$NODE_VERSION&quot; ]; then\n    log_message &quot;ℹ Node.js version: ${NODE_VERSION}&quot;\nfi\n\n# Check npm security audit\nif [ -f &quot;package.json&quot; ]; then\n    AUDIT_RESULT=$(npm audit --audit-level high --json 2&gt;/dev/null)\n    VULNERABILITIES=$(echo &quot;$AUDIT_RESULT&quot; | jq -r &#039;.metadata.vulnerabilities.total&#039; 2&gt;/dev/null)\n    if [ -n &quot;$VULNERABILITIES&quot; ] &amp;&amp; [ &quot;$VULNERABILITIES&quot; -gt 0 ]; then\n        log_message &quot;⚠ ${VULNERABILITIES} security vulnerabilities found&quot;\n    else\n        log_message &quot;✓ No high/critical security vulnerabilities&quot;\n    fi\nfi\n\nlog_message &quot;Node.js monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-monitor.sh\n\n# Schedule monitoring every 5 minutes\necho &quot;*/5 * * * * root /usr/local/bin/nodejs-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-deployment\" class=\"mobile-header\">Backup and Deployment</h2>\n<h3 id=\"application-backup-strategy\" class=\"mobile-header\">Application Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/nodejs-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/nodejs&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{app,config,logs}\n\necho &quot;Starting Node.js application backup...&quot;\n\n# Backup application code and dependencies\ntar --exclude=&#039;node_modules&#039; --exclude=&#039;logs/*&#039; --exclude=&#039;.git&#039; \\\n    -czf ${BACKUP_DIR}/app/nodejs-app-${DATE}.tar.gz \\\n    -C /var/www/nodejs-app .\n\n# Backup PM2 configuration and process list\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1; then\n    pm2 save\n    cp ~/.pm2/dump.pm2 ${BACKUP_DIR}/config/pm2-processes-${DATE}.json\n    cp ecosystem.config.js ${BACKUP_DIR}/config/ecosystem-${DATE}.js 2&gt;/dev/null || true\nfi\n\n# Backup environment configuration\ncp /var/www/nodejs-app/.env ${BACKUP_DIR}/config/env-${DATE}.backup 2&gt;/dev/null || true\n\n# Backup systemd service files\ncp /etc/systemd/system/nodejs-app.service ${BACKUP_DIR}/config/nodejs-app-${DATE}.service 2&gt;/dev/null || true\n\n# Backup logs\ntar -czf ${BACKUP_DIR}/logs/nodejs-logs-${DATE}.tar.gz \\\n    /var/www/nodejs-app/logs/ 2&gt;/dev/null || true\n\n# Backup NGINX configuration\ncp /etc/nginx/sites-available/nodejs-app ${BACKUP_DIR}/config/nginx-${DATE}.conf 2&gt;/dev/null || true\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://nodejs-backups/ --recursive\ngsutil cp -r ${BACKUP_DIR}/* gs://nodejs-backups/\n\n# Keep only last 14 backups\nfind ${BACKUP_DIR} -name &quot;nodejs-*&quot; -type f -mtime +14 -delete\n\necho &quot;Node.js backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-backup.sh\n\n# Schedule daily backups\necho &quot;0 2 * * * root /usr/local/bin/nodejs-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"zero-downtime-deployment\" class=\"mobile-header\">Zero-Downtime Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create deployment script\nsudo tee /usr/local/bin/nodejs-deploy.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nVERSION=&quot;${1}&quot;\nREPO_URL=&quot;${2:-https://github.com/example/nodejs-app.git}&quot;\n\nif [ -z &quot;$VERSION&quot; ]; then\n    echo &quot;Usage: $0 &lt;version&gt; [repo_url]&quot;\n    echo &quot;Example: $0 v1.2.3&quot;\n    exit 1\nfi\n\nDEPLOY_DIR=&quot;/var/www/nodejs-app&quot;\nRELEASES_DIR=&quot;${DEPLOY_DIR}/releases&quot;\nSHARED_DIR=&quot;${DEPLOY_DIR}/shared&quot;\nCURRENT_LINK=&quot;${DEPLOY_DIR}/current&quot;\nRELEASE_DIR=&quot;${RELEASES_DIR}/${VERSION}&quot;\n\necho &quot;Deploying Node.js application version: ${VERSION}&quot;\n\n# Create directory structure\nmkdir -p ${RELEASES_DIR} ${SHARED_DIR}/{logs,uploads,config}\n\n# Clone and checkout specific version\ngit clone ${REPO_URL} ${RELEASE_DIR}\ncd ${RELEASE_DIR}\ngit checkout ${VERSION}\n\n# Copy shared configuration\ncp ${SHARED_DIR}/config/.env . 2&gt;/dev/null || true\n\n# Install dependencies (production only)\nnpm ci --only=production\n\n# Run security audit\nnpm audit --audit-level high\n\n# Run tests\nnpm test\n\n# Create symbolic links for shared directories\nln -sfn ${SHARED_DIR}/logs logs\nln -sfn ${SHARED_DIR}/uploads uploads\n\n# Update current symlink (atomic operation)\nln -sfn ${RELEASE_DIR} ${CURRENT_LINK}\n\n# Reload PM2 or systemd service\nif command -v pm2 &gt;/dev/null 2&gt;&amp;1 &amp;&amp; pm2 list | grep -q &quot;nodejs-app&quot;; then\n    echo &quot;Reloading PM2 processes...&quot;\n    cd ${CURRENT_LINK}\n    pm2 reload ecosystem.config.js --env production\nelif systemctl is-active nodejs-app &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;Restarting systemd service...&quot;\n    systemctl restart nodejs-app\nfi\n\n# Wait for application to be ready\necho &quot;Waiting for application to start...&quot;\nfor i in {1..30}; do\n    if curl -f http://localhost:3000/health &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;✓ Application is healthy&quot;\n        break\n    fi\n    sleep 2\ndone\n\n# Keep only last 5 releases\ncd ${RELEASES_DIR}\nls -t | tail -n +6 | xargs rm -rf\n\n# Set proper ownership\nchown -R nodejs:nodejs ${DEPLOY_DIR}\n\necho &quot;Deployment completed successfully: ${VERSION}&quot;\necho &quot;Application is available at: http://localhost:3000&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/nodejs-deploy.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Node.js application status\n# PM2 processes\npm2 status\npm2 logs\npm2 monit\n\n# SystemD service\nsudo systemctl status nodejs-app\nsudo journalctl -u nodejs-app -f\n\n# Check application logs\ntail -f /var/www/nodejs-app/logs/combined.log\ntail -f /var/www/nodejs-app/logs/error.log\n\n# Test application health\ncurl -i http://localhost:3000/health\n\n# Check memory leaks\nnode --inspect server.js\n# Connect Chrome DevTools to memory tab\n\n# Performance profiling\nnode --prof server.js\n# Generate profile: node --prof-process isolate-*.log &gt; profile.txt\n\n# Check for security vulnerabilities\nnpm audit\nnpm audit fix\n\n# Update dependencies\nnpm outdated\nnpm update\n\n# Check package vulnerabilities\nnpx retire\n\n# Memory usage analysis\nps aux --sort=-%mem | grep node\npmap -x $(pgrep node)\n\n# Network connectivity\nss -tulpn | grep 3000\nnetstat -tulpn | grep node\n\n# Process monitoring\nhtop -p $(pgrep node)\ntop -p $(pgrep node)\n\n# Debug mode (development only)\nnode --inspect-brk server.js\n\n# Cluster mode debugging\npm2 logs --lines 1000\npm2 flush  # Clear all logs\n\n# Database connection issues\n# Check MongoDB connection\nmongosh --eval &quot;db.adminCommand(&#039;ping&#039;)&quot;\n\n# Check PostgreSQL connection\npsql -h localhost -U username -d dbname -c &quot;SELECT version();&quot;\n\n# SSL/HTTPS issues\nopenssl s_client -connect app.example.com:443\ncurl -I https://app.example.com\n\n# Environment issues\nprintenv | grep NODE\necho $NODE_ENV\n\n# Restart applications\npm2 restart all\n# Or\nsudo systemctl restart nodejs-app\n\n# Clean npm cache\nnpm cache clean --force\n\n# Rebuild native modules\nnpm rebuild</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://nodejs.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Node.js Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://nodejs.org/en/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Node.js Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://pm2.keymetrics.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">PM2 Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://expressjs.com/en/advanced/best-practice-security.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Express.js Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/goldbergyoni/nodebestpractices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Node.js Best Practices</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"17 min","wordCount":3313,"lastBuilt":"2025-09-14T01:30:42.665Z"},{"name":"odoo","displayName":"Odoo","slug":"odoo","description":"Repo for odoo","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/odoo","updatedAt":"2025-09-08T03:12:54Z","createdAt":"2025-09-08T03:12:44Z","readmeRaw":"## 👋 Welcome to odoo 🚀  \n\nodoo README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-odoo\" class=\"mobile-header\">👋 Welcome to odoo 🚀  </h2>\n<p class=\"mobile-paragraph\">odoo README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:42.457Z"},{"name":"openvpn","displayName":"Openvpn","slug":"openvpn","description":"Repo for openvpn","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/openvpn","updatedAt":"2025-09-08T03:13:07Z","createdAt":"2025-09-08T03:12:57Z","readmeRaw":"## 👋 Welcome to openvpn 🚀  \n\nopenvpn README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-openvpn\" class=\"mobile-header\">👋 Welcome to openvpn 🚀  </h2>\n<p class=\"mobile-paragraph\">openvpn README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:42.310Z"},{"name":"opnsense","displayName":"Opnsense","slug":"opnsense","description":"Repo for opnsense","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/opnsense","updatedAt":"2025-09-08T03:13:18Z","createdAt":"2025-09-08T03:13:08Z","readmeRaw":"## 👋 Welcome to opnsense 🚀  \n\nopnsense README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-opnsense\" class=\"mobile-header\">👋 Welcome to opnsense 🚀  </h2>\n<p class=\"mobile-paragraph\">opnsense README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:42.140Z"},{"name":"owncloud","displayName":"Owncloud","slug":"owncloud","description":"Repo for owncloud","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/owncloud","updatedAt":"2025-09-08T03:13:30Z","createdAt":"2025-09-08T03:13:20Z","readmeRaw":"## 👋 Welcome to owncloud 🚀  \n\nowncloud README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-owncloud\" class=\"mobile-header\">👋 Welcome to owncloud 🚀  </h2>\n<p class=\"mobile-paragraph\">owncloud README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:42.000Z"},{"name":"pfsense","displayName":"Pfsense","slug":"pfsense","description":"Repo for pfsense","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pfsense","updatedAt":"2025-09-08T03:13:43Z","createdAt":"2025-09-08T03:13:32Z","readmeRaw":"## 👋 Welcome to pfsense 🚀  \n\npfsense README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-pfsense\" class=\"mobile-header\">👋 Welcome to pfsense 🚀  </h2>\n<p class=\"mobile-paragraph\">pfsense README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:41.838Z"},{"name":"pgadmin","displayName":"Pgadmin","slug":"pgadmin","description":"Repo for pgadmin","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pgadmin","updatedAt":"2025-09-08T03:13:54Z","createdAt":"2025-09-08T03:13:44Z","readmeRaw":"## 👋 Welcome to pgadmin 🚀  \n\npgadmin README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-pgadmin\" class=\"mobile-header\">👋 Welcome to pgadmin 🚀  </h2>\n<p class=\"mobile-paragraph\">pgadmin README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:41.683Z"},{"name":"phpmyadmin","displayName":"Phpmyadmin","slug":"phpmyadmin","description":"Repo for phpmyadmin","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/phpmyadmin","updatedAt":"2025-09-08T03:14:06Z","createdAt":"2025-09-08T03:13:56Z","readmeRaw":"## 👋 Welcome to phpmyadmin 🚀  \n\nphpmyadmin README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-phpmyadmin\" class=\"mobile-header\">👋 Welcome to phpmyadmin 🚀  </h2>\n<p class=\"mobile-paragraph\">phpmyadmin README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:41.510Z"},{"name":"pihole","displayName":"Pi-hole","slug":"pihole","description":"Repo for pihole","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pihole","updatedAt":"2025-09-08T03:14:18Z","createdAt":"2025-09-08T03:14:08Z","readmeRaw":"## 👋 Welcome to pihole 🚀  \n\npihole README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-pihole\" class=\"mobile-header\">👋 Welcome to pihole 🚀  </h2>\n<p class=\"mobile-paragraph\">pihole README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:41.333Z"},{"name":"plex","displayName":"Plex","slug":"plex","description":"Repo for plex","category":"media","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/plex","updatedAt":"2025-09-08T03:14:30Z","createdAt":"2025-09-08T03:14:20Z","readmeRaw":"## 👋 Welcome to plex 🚀  \n\nplex README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-plex\" class=\"mobile-header\">👋 Welcome to plex 🚀  </h2>\n<p class=\"mobile-paragraph\">plex README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:41.170Z"},{"name":"portainer","displayName":"Portainer","slug":"portainer","description":"Repo for portainer","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/portainer","updatedAt":"2025-09-08T03:14:42Z","createdAt":"2025-09-08T03:14:32Z","readmeRaw":"## 👋 Welcome to portainer 🚀  \n\nportainer README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-portainer\" class=\"mobile-header\">👋 Welcome to portainer 🚀  </h2>\n<p class=\"mobile-paragraph\">portainer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:41.006Z"},{"name":"prometheus","displayName":"Prometheus","slug":"prometheus","description":"Repo for prometheus","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prometheus","updatedAt":"2025-09-08T03:14:53Z","createdAt":"2025-09-08T03:14:43Z","readmeRaw":"# Prometheus Installation Guide\n\nOpen-source monitoring and alerting toolkit. Collects and stores metrics as time series data for monitoring system performance.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Root or sudo access\n- 4GB RAM minimum, 8GB recommended for production\n- Persistent storage for time series data\n\n## Installation\n\n### Using Pre-compiled Binaries\n```bash\n# Create prometheus user\nsudo useradd --no-create-home --shell /bin/false prometheus\n\n# Create directories\nsudo mkdir -p /etc/prometheus /var/lib/prometheus\nsudo chown prometheus:prometheus /etc/prometheus /var/lib/prometheus\n\n# Download and install Prometheus\ncd /tmp\nwget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz\ntar xzf prometheus-2.45.0.linux-amd64.tar.gz\ncd prometheus-2.45.0.linux-amd64\n\n# Copy binaries\nsudo cp prometheus promtool /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/prometheus /usr/local/bin/promtool\n\n# Copy configuration files\nsudo cp -r consoles console_libraries /etc/prometheus/\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles /etc/prometheus/console_libraries\n```\n\n### Using Package Manager (Ubuntu/Debian)\n```bash\n# Add Prometheus APT repository\nwget -qO - https://packages.grafana.com/gpg.key | sudo apt-key add -\necho \"deb https://packages.grafana.com/oss/deb stable main\" | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Install Prometheus\nsudo apt update\nsudo apt install -y prometheus\n\n# Start and enable Prometheus\nsudo systemctl enable --now prometheus\n```\n\n### Using Docker\n```bash\n# Create directories for persistent data\nmkdir -p ~/prometheus/data ~/prometheus/config\n\n# Create basic configuration\ncat > ~/prometheus/config/prometheus.yml <<EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  - job_name: 'node'\n    static_configs:\n      - targets: ['localhost:9100']\nEOF\n\n# Run Prometheus container\ndocker run -d \\\n  --name prometheus \\\n  -p 9090:9090 \\\n  -v ~/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml \\\n  -v ~/prometheus/data:/prometheus \\\n  prom/prometheus:latest \\\n  --config.file=/etc/prometheus/prometheus.yml \\\n  --storage.tsdb.path=/prometheus \\\n  --web.console.libraries=/etc/prometheus/console_libraries \\\n  --web.console.templates=/etc/prometheus/consoles \\\n  --storage.tsdb.retention.time=200h \\\n  --web.enable-lifecycle\n```\n\n## Configuration\n\n### Basic Configuration\n```bash\n# Create main configuration file\nsudo tee /etc/prometheus/prometheus.yml > /dev/null <<EOF\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  - \"/etc/prometheus/rules/*.yml\"\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  - job_name: 'node-exporter'\n    static_configs:\n      - targets: \n        - 'localhost:9100'\n        - '192.168.1.10:9100'\n        - '192.168.1.11:9100'\n\n  - job_name: 'blackbox'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://google.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  - job_name: 'nginx-exporter'\n    static_configs:\n      - targets: ['localhost:9113']\n\n  - job_name: 'mysql-exporter'\n    static_configs:\n      - targets: ['localhost:9104']\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml\n```\n\n### Create SystemD Service\n```bash\nsudo tee /etc/systemd/system/prometheus.service > /dev/null <<EOF\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=200h \\\n    --web.enable-lifecycle\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now prometheus\n```\n\n### Install Node Exporter\n```bash\n# Download Node Exporter\ncd /tmp\nwget https://github.com/prometheus/node_exporter/releases/download/v1.6.0/node_exporter-1.6.0.linux-amd64.tar.gz\ntar xzf node_exporter-1.6.0.linux-amd64.tar.gz\n\n# Install Node Exporter\nsudo cp node_exporter-1.6.0.linux-amd64/node_exporter /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/node_exporter\n\n# Create systemd service for Node Exporter\nsudo tee /etc/systemd/system/node_exporter.service > /dev/null <<EOF\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/node_exporter \\\n    --collector.systemd \\\n    --collector.processes \\\n    --collector.interrupts\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now node_exporter\n```\n\n## Alerting Rules\n\n```bash\n# Create rules directory\nsudo mkdir -p /etc/prometheus/rules\nsudo chown prometheus:prometheus /etc/prometheus/rules\n\n# Create basic alerting rules\nsudo tee /etc/prometheus/rules/basic.yml > /dev/null <<EOF\ngroups:\n- name: basic.rules\n  rules:\n  - alert: InstanceDown\n    expr: up == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Instance {{ \\$labels.instance }} down\"\n      description: \"{{ \\$labels.instance }} of job {{ \\$labels.job }} has been down for more than 1 minute.\"\n\n  - alert: HighCpuLoad\n    expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High CPU load (instance {{ \\$labels.instance }})\"\n      description: \"CPU load is > 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}\"\n\n  - alert: HighMemoryLoad\n    expr: (sum(node_memory_MemTotal_bytes) - sum(node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) ) / sum(node_memory_MemTotal_bytes) * 100 > 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High memory load (instance {{ \\$labels.instance }})\"\n      description: \"Memory load is > 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}\"\n\n  - alert: HighDiskLoad\n    expr: 100 - ((node_filesystem_avail_bytes{mountpoint=\"/\",fstype!=\"rootfs\"} * 100) / node_filesystem_size_bytes{mountpoint=\"/\",fstype!=\"rootfs\"}) > 85\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High disk load (instance {{ \\$labels.instance }})\"\n      description: \"Disk load is > 85%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}\"\n\n  - alert: ServiceDown\n    expr: node_systemd_unit_state{state=\"active\"} == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Service {{ \\$labels.name }} down on {{ \\$labels.instance }}\"\n      description: \"Service {{ \\$labels.name }} is down on {{ \\$labels.instance }}\"\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/rules/basic.yml\n```\n\n## Service Discovery\n\n### File-based Service Discovery\n```bash\n# Create service discovery directory\nsudo mkdir -p /etc/prometheus/targets\nsudo chown prometheus:prometheus /etc/prometheus/targets\n\n# Create target files\nsudo tee /etc/prometheus/targets/web-servers.json > /dev/null <<EOF\n[\n  {\n    \"targets\": [\"192.168.1.10:9100\", \"192.168.1.11:9100\"],\n    \"labels\": {\n      \"job\": \"web-servers\",\n      \"environment\": \"production\",\n      \"team\": \"infrastructure\"\n    }\n  },\n  {\n    \"targets\": [\"192.168.1.20:9100\", \"192.168.1.21:9100\"],\n    \"labels\": {\n      \"job\": \"database-servers\",\n      \"environment\": \"production\",\n      \"team\": \"database\"\n    }\n  }\n]\nEOF\n\n# Update prometheus.yml to use file discovery\nsudo tee -a /etc/prometheus/prometheus.yml > /dev/null <<EOF\n\n  - job_name: 'file-discovery'\n    file_sd_configs:\n      - files:\n        - '/etc/prometheus/targets/*.json'\n        refresh_interval: 1m\nEOF\n```\n\n## Firewall Configuration\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 9090/tcp  # Prometheus web UI\nsudo ufw allow 9100/tcp  # Node Exporter\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --permanent --add-port=9100/tcp\nsudo firewall-cmd --reload\n```\n\n## Verification\n\n```bash\n# Check Prometheus status\nsudo systemctl status prometheus\n\n# Check Node Exporter status\nsudo systemctl status node_exporter\n\n# Test Prometheus configuration\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Test alerting rules\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Check if services are listening\nsudo netstat -tulpn | grep -E ':(9090|9100)'\n\n# Test web interface\ncurl http://localhost:9090/metrics\ncurl http://localhost:9100/metrics\n\n# Query Prometheus API\ncurl -G http://localhost:9090/api/v1/query --data-urlencode 'query=up'\n\n# View targets status\ncurl http://localhost:9090/api/v1/targets\n```\n\n## Common Exporters Installation\n\n### NGINX Exporter\n```bash\n# Download and install nginx-exporter\ncd /tmp\nwget https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v0.10.0/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\ntar xzf nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\nsudo cp nginx-prometheus-exporter /usr/local/bin/\n\n# Configure NGINX stub status\necho 'server {\n    listen 127.0.0.1:8080;\n    location /stub_status {\n        stub_status on;\n        allow 127.0.0.1;\n        deny all;\n    }\n}' | sudo tee /etc/nginx/sites-available/stub_status\n\nsudo ln -s /etc/nginx/sites-available/stub_status /etc/nginx/sites-enabled/\nsudo systemctl reload nginx\n\n# Create systemd service\nsudo tee /etc/systemd/system/nginx-exporter.service > /dev/null <<EOF\n[Unit]\nDescription=NGINX Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/nginx-prometheus-exporter -nginx.scrape-uri=http://127.0.0.1:8080/stub_status\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nginx-exporter\n```\n\n### MySQL Exporter\n```bash\n# Create MySQL user for monitoring\nmysql -u root -p <<EOF\nCREATE USER 'exporter'@'localhost' IDENTIFIED BY 'XXXXXXXX' WITH MAX_USER_CONNECTIONS 3;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Download and install mysqld-exporter\ncd /tmp\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-0.14.0.linux-amd64.tar.gz\nsudo cp mysqld_exporter-0.14.0.linux-amd64/mysqld_exporter /usr/local/bin/\n\n# Create configuration file\nsudo tee /etc/prometheus/.my.cnf > /dev/null <<EOF\n[client]\nuser=exporter\npassword=XXXXXXXX\nhost=localhost\nport=3306\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/.my.cnf\nsudo chmod 600 /etc/prometheus/.my.cnf\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysql-exporter.service > /dev/null <<EOF\n[Unit]\nDescription=MySQL Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nEnvironment=DATA_SOURCE_NAME=exporter:XXXXXXXX@(localhost:3306)/\nExecStart=/usr/local/bin/mysqld_exporter --config.my-cnf=/etc/prometheus/.my.cnf\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now mysql-exporter\n```\n\n## Performance Tuning\n\n```bash\n# Update Prometheus configuration for performance\nsudo tee -a /etc/prometheus/prometheus.yml > /dev/null <<EOF\n\nglobal:\n  scrape_interval:     30s\n  evaluation_interval: 30s\n  external_labels:\n    cluster: 'production'\n    replica: 'prometheus-01'\n\n# Performance settings for systemd service\nsudo tee /etc/systemd/system/prometheus.service.d/performance.conf > /dev/null <<EOF\n[Service]\nExecStart=\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=30d \\\n    --storage.tsdb.retention.size=50GB \\\n    --storage.tsdb.wal-compression \\\n    --web.enable-lifecycle \\\n    --web.enable-admin-api\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart prometheus\n```\n\n## Backup and Restore\n\n```bash\n# Create backup script\nsudo tee /usr/local/bin/prometheus-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/prometheus\"\nPROMETHEUS_DATA=\"/var/lib/prometheus\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Stop Prometheus\nsystemctl stop prometheus\n\n# Create backup\ntar -czf ${BACKUP_DIR}/prometheus_backup_${DATE}.tar.gz -C ${PROMETHEUS_DATA} .\n\n# Start Prometheus\nsystemctl start prometheus\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"prometheus_backup_*.tar.gz\" -type f -mtime +7 -delete\n\necho \"Backup completed: prometheus_backup_${DATE}.tar.gz\"\nEOF\n\nsudo chmod +x /usr/local/bin/prometheus-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/prometheus-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting\n\n```bash\n# Check Prometheus logs\nsudo journalctl -u prometheus -f\n\n# Check Node Exporter logs\nsudo journalctl -u node_exporter -f\n\n# Verify configuration syntax\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Check rule syntax\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Test specific target connectivity\ncurl -m 5 http://192.168.1.10:9100/metrics\n\n# Check disk space usage\ndu -sh /var/lib/prometheus/\n\n# View current configuration\ncurl http://localhost:9090/api/v1/status/config\n\n# Reload configuration without restart\ncurl -X POST http://localhost:9090/-/reload\n```\n\n## Additional Resources\n\n- [Official Documentation](https://prometheus.io/docs/)\n- [Prometheus Configuration](https://prometheus.io/docs/prometheus/latest/configuration/configuration/)\n- [Alerting Rules](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/)\n- [Best Practices](https://prometheus.io/docs/practices/rules/)\n- [Exporters and Integrations](https://prometheus.io/docs/instrumenting/exporters/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"prometheus-installation-guide\" class=\"mobile-header\">Prometheus Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source monitoring and alerting toolkit. Collects and stores metrics as time series data for monitoring system performance.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB recommended for production</li>\n<li class=\"mobile-list-item\">Persistent storage for time series data</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-pre-compiled-binaries\" class=\"mobile-header\">Using Pre-compiled Binaries</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create prometheus user\nsudo useradd --no-create-home --shell /bin/false prometheus\n\n# Create directories\nsudo mkdir -p /etc/prometheus /var/lib/prometheus\nsudo chown prometheus:prometheus /etc/prometheus /var/lib/prometheus\n\n# Download and install Prometheus\ncd /tmp\nwget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz\ntar xzf prometheus-2.45.0.linux-amd64.tar.gz\ncd prometheus-2.45.0.linux-amd64\n\n# Copy binaries\nsudo cp prometheus promtool /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/prometheus /usr/local/bin/promtool\n\n# Copy configuration files\nsudo cp -r consoles console_libraries /etc/prometheus/\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles /etc/prometheus/console_libraries</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-package-manager-ubuntudebian\" class=\"mobile-header\">Using Package Manager (Ubuntu/Debian)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Prometheus APT repository\nwget -qO - https://packages.grafana.com/gpg.key | sudo apt-key add -\necho &quot;deb https://packages.grafana.com/oss/deb stable main&quot; | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Install Prometheus\nsudo apt update\nsudo apt install -y prometheus\n\n# Start and enable Prometheus\nsudo systemctl enable --now prometheus</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create directories for persistent data\nmkdir -p ~/prometheus/data ~/prometheus/config\n\n# Create basic configuration\ncat &gt; ~/prometheus/config/prometheus.yml &lt;&lt;EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  # - &quot;first_rules.yml&quot;\n  # - &quot;second_rules.yml&quot;\n\nscrape_configs:\n  - job_name: &#039;prometheus&#039;\n    static_configs:\n      - targets: [&#039;localhost:9090&#039;]\n\n  - job_name: &#039;node&#039;\n    static_configs:\n      - targets: [&#039;localhost:9100&#039;]\nEOF\n\n# Run Prometheus container\ndocker run -d \\\n  --name prometheus \\\n  -p 9090:9090 \\\n  -v ~/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml \\\n  -v ~/prometheus/data:/prometheus \\\n  prom/prometheus:latest \\\n  --config.file=/etc/prometheus/prometheus.yml \\\n  --storage.tsdb.path=/prometheus \\\n  --web.console.libraries=/etc/prometheus/console_libraries \\\n  --web.console.templates=/etc/prometheus/consoles \\\n  --storage.tsdb.retention.time=200h \\\n  --web.enable-lifecycle</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create main configuration file\nsudo tee /etc/prometheus/prometheus.yml &gt; /dev/null &lt;&lt;EOF\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  - &quot;/etc/prometheus/rules/*.yml&quot;\n\nscrape_configs:\n  - job_name: &#039;prometheus&#039;\n    static_configs:\n      - targets: [&#039;localhost:9090&#039;]\n\n  - job_name: &#039;node-exporter&#039;\n    static_configs:\n      - targets: \n        - &#039;localhost:9100&#039;\n        - &#039;192.168.1.10:9100&#039;\n        - &#039;192.168.1.11:9100&#039;\n\n  - job_name: &#039;blackbox&#039;\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://google.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  - job_name: &#039;nginx-exporter&#039;\n    static_configs:\n      - targets: [&#039;localhost:9113&#039;]\n\n  - job_name: &#039;mysql-exporter&#039;\n    static_configs:\n      - targets: [&#039;localhost:9104&#039;]\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"create-systemd-service\" class=\"mobile-header\">Create SystemD Service</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/systemd/system/prometheus.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=200h \\\n    --web.enable-lifecycle\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now prometheus</code></pre>\n      </div>\n    </div>\n<h3 id=\"install-node-exporter\" class=\"mobile-header\">Install Node Exporter</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Node Exporter\ncd /tmp\nwget https://github.com/prometheus/node_exporter/releases/download/v1.6.0/node_exporter-1.6.0.linux-amd64.tar.gz\ntar xzf node_exporter-1.6.0.linux-amd64.tar.gz\n\n# Install Node Exporter\nsudo cp node_exporter-1.6.0.linux-amd64/node_exporter /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/node_exporter\n\n# Create systemd service for Node Exporter\nsudo tee /etc/systemd/system/node_exporter.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/node_exporter \\\n    --collector.systemd \\\n    --collector.processes \\\n    --collector.interrupts\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now node_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"alerting-rules\" class=\"mobile-header\">Alerting Rules</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create rules directory\nsudo mkdir -p /etc/prometheus/rules\nsudo chown prometheus:prometheus /etc/prometheus/rules\n\n# Create basic alerting rules\nsudo tee /etc/prometheus/rules/basic.yml &gt; /dev/null &lt;&lt;EOF\ngroups:\n- name: basic.rules\n  rules:\n  - alert: InstanceDown\n    expr: up == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: &quot;Instance {{ \\$labels.instance }} down&quot;\n      description: &quot;{{ \\$labels.instance }} of job {{ \\$labels.job }} has been down for more than 1 minute.&quot;\n\n  - alert: HighCpuLoad\n    expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=&quot;idle&quot;}[5m])) * 100) &gt; 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: &quot;High CPU load (instance {{ \\$labels.instance }})&quot;\n      description: &quot;CPU load is &gt; 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}&quot;\n\n  - alert: HighMemoryLoad\n    expr: (sum(node_memory_MemTotal_bytes) - sum(node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) ) / sum(node_memory_MemTotal_bytes) * 100 &gt; 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: &quot;High memory load (instance {{ \\$labels.instance }})&quot;\n      description: &quot;Memory load is &gt; 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}&quot;\n\n  - alert: HighDiskLoad\n    expr: 100 - ((node_filesystem_avail_bytes{mountpoint=&quot;/&quot;,fstype!=&quot;rootfs&quot;} * 100) / node_filesystem_size_bytes{mountpoint=&quot;/&quot;,fstype!=&quot;rootfs&quot;}) &gt; 85\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: &quot;High disk load (instance {{ \\$labels.instance }})&quot;\n      description: &quot;Disk load is &gt; 85%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}&quot;\n\n  - alert: ServiceDown\n    expr: node_systemd_unit_state{state=&quot;active&quot;} == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: &quot;Service {{ \\$labels.name }} down on {{ \\$labels.instance }}&quot;\n      description: &quot;Service {{ \\$labels.name }} is down on {{ \\$labels.instance }}&quot;\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/rules/basic.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-discovery\" class=\"mobile-header\">Service Discovery</h2>\n<h3 id=\"file-based-service-discovery\" class=\"mobile-header\">File-based Service Discovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create service discovery directory\nsudo mkdir -p /etc/prometheus/targets\nsudo chown prometheus:prometheus /etc/prometheus/targets\n\n# Create target files\nsudo tee /etc/prometheus/targets/web-servers.json &gt; /dev/null &lt;&lt;EOF\n[\n  {\n    &quot;targets&quot;: [&quot;192.168.1.10:9100&quot;, &quot;192.168.1.11:9100&quot;],\n    &quot;labels&quot;: {\n      &quot;job&quot;: &quot;web-servers&quot;,\n      &quot;environment&quot;: &quot;production&quot;,\n      &quot;team&quot;: &quot;infrastructure&quot;\n    }\n  },\n  {\n    &quot;targets&quot;: [&quot;192.168.1.20:9100&quot;, &quot;192.168.1.21:9100&quot;],\n    &quot;labels&quot;: {\n      &quot;job&quot;: &quot;database-servers&quot;,\n      &quot;environment&quot;: &quot;production&quot;,\n      &quot;team&quot;: &quot;database&quot;\n    }\n  }\n]\nEOF\n\n# Update prometheus.yml to use file discovery\nsudo tee -a /etc/prometheus/prometheus.yml &gt; /dev/null &lt;&lt;EOF\n\n  - job_name: &#039;file-discovery&#039;\n    file_sd_configs:\n      - files:\n        - &#039;/etc/prometheus/targets/*.json&#039;\n        refresh_interval: 1m\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 9090/tcp  # Prometheus web UI\nsudo ufw allow 9100/tcp  # Node Exporter\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --permanent --add-port=9100/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Prometheus status\nsudo systemctl status prometheus\n\n# Check Node Exporter status\nsudo systemctl status node_exporter\n\n# Test Prometheus configuration\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Test alerting rules\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Check if services are listening\nsudo netstat -tulpn | grep -E &#039;:(9090|9100)&#039;\n\n# Test web interface\ncurl http://localhost:9090/metrics\ncurl http://localhost:9100/metrics\n\n# Query Prometheus API\ncurl -G http://localhost:9090/api/v1/query --data-urlencode &#039;query=up&#039;\n\n# View targets status\ncurl http://localhost:9090/api/v1/targets</code></pre>\n      </div>\n    </div>\n<h2 id=\"common-exporters-installation\" class=\"mobile-header\">Common Exporters Installation</h2>\n<h3 id=\"nginx-exporter\" class=\"mobile-header\">NGINX Exporter</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download and install nginx-exporter\ncd /tmp\nwget https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v0.10.0/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\ntar xzf nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\nsudo cp nginx-prometheus-exporter /usr/local/bin/\n\n# Configure NGINX stub status\necho &#039;server {\n    listen 127.0.0.1:8080;\n    location /stub_status {\n        stub_status on;\n        allow 127.0.0.1;\n        deny all;\n    }\n}&#039; | sudo tee /etc/nginx/sites-available/stub_status\n\nsudo ln -s /etc/nginx/sites-available/stub_status /etc/nginx/sites-enabled/\nsudo systemctl reload nginx\n\n# Create systemd service\nsudo tee /etc/systemd/system/nginx-exporter.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=NGINX Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/nginx-prometheus-exporter -nginx.scrape-uri=http://127.0.0.1:8080/stub_status\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nginx-exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-exporter\" class=\"mobile-header\">MySQL Exporter</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create MySQL user for monitoring\nmysql -u root -p &lt;&lt;EOF\nCREATE USER &#039;exporter&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;XXXXXXXX&#039; WITH MAX_USER_CONNECTIONS 3;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#039;exporter&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Download and install mysqld-exporter\ncd /tmp\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-0.14.0.linux-amd64.tar.gz\nsudo cp mysqld_exporter-0.14.0.linux-amd64/mysqld_exporter /usr/local/bin/\n\n# Create configuration file\nsudo tee /etc/prometheus/.my.cnf &gt; /dev/null &lt;&lt;EOF\n[client]\nuser=exporter\npassword=XXXXXXXX\nhost=localhost\nport=3306\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/.my.cnf\nsudo chmod 600 /etc/prometheus/.my.cnf\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysql-exporter.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=MySQL Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nEnvironment=DATA_SOURCE_NAME=exporter:XXXXXXXX@(localhost:3306)/\nExecStart=/usr/local/bin/mysqld_exporter --config.my-cnf=/etc/prometheus/.my.cnf\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now mysql-exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-tuning\" class=\"mobile-header\">Performance Tuning</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update Prometheus configuration for performance\nsudo tee -a /etc/prometheus/prometheus.yml &gt; /dev/null &lt;&lt;EOF\n\nglobal:\n  scrape_interval:     30s\n  evaluation_interval: 30s\n  external_labels:\n    cluster: &#039;production&#039;\n    replica: &#039;prometheus-01&#039;\n\n# Performance settings for systemd service\nsudo tee /etc/systemd/system/prometheus.service.d/performance.conf &gt; /dev/null &lt;&lt;EOF\n[Service]\nExecStart=\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=30d \\\n    --storage.tsdb.retention.size=50GB \\\n    --storage.tsdb.wal-compression \\\n    --web.enable-lifecycle \\\n    --web.enable-admin-api\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart prometheus</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/prometheus-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/prometheus&quot;\nPROMETHEUS_DATA=&quot;/var/lib/prometheus&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Stop Prometheus\nsystemctl stop prometheus\n\n# Create backup\ntar -czf ${BACKUP_DIR}/prometheus_backup_${DATE}.tar.gz -C ${PROMETHEUS_DATA} .\n\n# Start Prometheus\nsystemctl start prometheus\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;prometheus_backup_*.tar.gz&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: prometheus_backup_${DATE}.tar.gz&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/prometheus-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/prometheus-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Prometheus logs\nsudo journalctl -u prometheus -f\n\n# Check Node Exporter logs\nsudo journalctl -u node_exporter -f\n\n# Verify configuration syntax\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Check rule syntax\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Test specific target connectivity\ncurl -m 5 http://192.168.1.10:9100/metrics\n\n# Check disk space usage\ndu -sh /var/lib/prometheus/\n\n# View current configuration\ncurl http://localhost:9090/api/v1/status/config\n\n# Reload configuration without restart\ncurl -X POST http://localhost:9090/-/reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/prometheus/latest/configuration/configuration/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prometheus Configuration</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Alerting Rules</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/practices/rules/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/instrumenting/exporters/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Exporters and Integrations</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"7 min","wordCount":1385,"lastBuilt":"2025-09-14T01:30:40.859Z"},{"name":"prosody","displayName":"Prosody","slug":"prosody","description":"Repo for prosody","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prosody","updatedAt":"2025-09-08T03:14:59Z","createdAt":"2023-08-28T03:49:26Z","readmeRaw":"#### Prosody IM Server\n\n```shell\nmkdir -p /var/lib/docker/storage/prosody && chmod -Rf 777 /var/lib/docker/storage/prosody\ndocker run -d \\\n   -p 82:80\n   -p 5222:5222 \\\n   -p 5269:5269 \\\n   -p 5281:5281\n   -p 5347:5347 \\\n   -e LOCAL=admin \\\n   -e DOMAIN=MYDOMAIN \\\n   -e PASSWORD=juliet4ever \\\n   -v /var/lib/docker/storage/prosody/log:/var/log/prosody \\\n   -v /var/lib/docker/storage/prosody/configuration:/etc/prosody \\\n   -v /var/lib/docker/storage/prosody/modules:/usr/lib/prosody-modules \\\n   prosody/prosody\n```\n","readmeHtml":"<p class=\"mobile-paragraph\">#### Prosody IM Server</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /var/lib/docker/storage/prosody &amp;&amp; chmod -Rf 777 /var/lib/docker/storage/prosody\ndocker run -d \\\n   -p 82:80\n   -p 5222:5222 \\\n   -p 5269:5269 \\\n   -p 5281:5281\n   -p 5347:5347 \\\n   -e LOCAL=admin \\\n   -e DOMAIN=MYDOMAIN \\\n   -e PASSWORD=juliet4ever \\\n   -v /var/lib/docker/storage/prosody/log:/var/log/prosody \\\n   -v /var/lib/docker/storage/prosody/configuration:/etc/prosody \\\n   -v /var/lib/docker/storage/prosody/modules:/usr/lib/prosody-modules \\\n   prosody/prosody</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T01:30:40.682Z"},{"name":"proxmox","displayName":"Proxmox","slug":"proxmox","description":"Repo for proxmox","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/proxmox","updatedAt":"2025-09-08T03:15:04Z","createdAt":"2023-08-28T03:49:36Z","readmeRaw":"# Install docker\n\n### ZFS\n\n```shell\nzfs create -o mountpoint=/var/lib/docker rpool/docker\nmkdir /etc/systemd/system/docker.service.d\ncurl -q -LSs https://github.com/casjay-base/howtos/raw/main/proxmox/storage-driver.conf >/etc/systemd/system/docker.service.d/storage-driver.conf\n```\n\n### Docker\n\n```shell\napt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\ncurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\napt-key fingerprint 0EBFCD88\nadd-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable\"\napt-get update && apt-get install docker-ce -y\n```\n\n### Yacht\n\n```shell\nmkdir -p \"/root/.local/share/srv/docker/yacht/\"\nsudo docker run -d \\\n    --name=\"yacht\" \\\n    --hostname \"yacht\" \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=\"${TZ:-${TIMEZONE:-America/New_York}}\" \\\n    -v \"/root/.local/share/srv/docker/yacht/data\":/data \\\n    -v \"/root/.local/share/srv/docker/yacht/config\":/config \\\n    -p 8000:8000 \\\n    selfhostedpro/yacht 1>/dev/null\n```\n\n### Portainer\n\n```shell\nmkdir -p /root/.local/share/srv/docker/portainer/data\ndocker run -d -p 9000:9000 \\\n    --name portainer \\\n    -v /root/.local/share/srv/docker/portainer/data:/data \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    portainer/portainer-ce\n```\n\n### nginx\n\n```shell\nmkdir -p /root/.local/share/srv/docker/nginx-manager/files/{data,config,letsencrypt}\nsudo docker run -d \\\n    --name=\"nginx-manager\" \\\n    --hostname \"$HOSTNAME\" \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=\"America/New_York\" \\\n    -e DISABLE_IPV6=true \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/data\":/data \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/config\":/app/config \\\n    -v \"/root/.local/share/srv/docker/nginx-manager/letsencrypt\":/etc/letsencrypt \\\n    -p 80:80 \\\n    -p 8888:81 \\\n    -p 443:443 \\\n    jc21/nginx-proxy-manager:2\n```\n","readmeHtml":"<h1 id=\"install-docker\" class=\"mobile-header\">Install docker</h1>\n<h3 id=\"zfs\" class=\"mobile-header\">ZFS</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">zfs create -o mountpoint=/var/lib/docker rpool/docker\nmkdir /etc/systemd/system/docker.service.d\ncurl -q -LSs https://github.com/casjay-base/howtos/raw/main/proxmox/storage-driver.conf &gt;/etc/systemd/system/docker.service.d/storage-driver.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker\" class=\"mobile-header\">Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common\ncurl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -\napt-key fingerprint 0EBFCD88\nadd-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable&quot;\napt-get update &amp;&amp; apt-get install docker-ce -y</code></pre>\n      </div>\n    </div>\n<h3 id=\"yacht\" class=\"mobile-header\">Yacht</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p &quot;/root/.local/share/srv/docker/yacht/&quot;\nsudo docker run -d \\\n    --name=&quot;yacht&quot; \\\n    --hostname &quot;yacht&quot; \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=&quot;${TZ:-${TIMEZONE:-America/New_York}}&quot; \\\n    -v &quot;/root/.local/share/srv/docker/yacht/data&quot;:/data \\\n    -v &quot;/root/.local/share/srv/docker/yacht/config&quot;:/config \\\n    -p 8000:8000 \\\n    selfhostedpro/yacht 1&gt;/dev/null</code></pre>\n      </div>\n    </div>\n<h3 id=\"portainer\" class=\"mobile-header\">Portainer</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /root/.local/share/srv/docker/portainer/data\ndocker run -d -p 9000:9000 \\\n    --name portainer \\\n    -v /root/.local/share/srv/docker/portainer/data:/data \\\n    -v /var/run/docker.sock:/var/run/docker.sock \\\n    portainer/portainer-ce</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx\" class=\"mobile-header\">nginx</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">mkdir -p /root/.local/share/srv/docker/nginx-manager/files/{data,config,letsencrypt}\nsudo docker run -d \\\n    --name=&quot;nginx-manager&quot; \\\n    --hostname &quot;$HOSTNAME&quot; \\\n    --restart=unless-stopped \\\n    --privileged \\\n    -e TZ=&quot;America/New_York&quot; \\\n    -e DISABLE_IPV6=true \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/data&quot;:/data \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/config&quot;:/app/config \\\n    -v &quot;/root/.local/share/srv/docker/nginx-manager/letsencrypt&quot;:/etc/letsencrypt \\\n    -p 80:80 \\\n    -p 8888:81 \\\n    -p 443:443 \\\n    jc21/nginx-proxy-manager:2</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":160,"lastBuilt":"2025-09-14T01:30:40.531Z"},{"name":"rabbitmq","displayName":"Rabbitmq","slug":"rabbitmq","description":"Repo for rabbitmq","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/rabbitmq","updatedAt":"2025-09-08T03:15:23Z","createdAt":"2025-09-08T03:15:11Z","readmeRaw":"## 👋 Welcome to rabbitmq 🚀  \n\nrabbitmq README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-rabbitmq\" class=\"mobile-header\">👋 Welcome to rabbitmq 🚀  </h2>\n<p class=\"mobile-paragraph\">rabbitmq README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:40.367Z"},{"name":"rancher","displayName":"Rancher","slug":"rancher","description":"Repo for rancher","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/rancher","updatedAt":"2025-09-08T03:15:28Z","createdAt":"2023-08-28T03:49:46Z","readmeRaw":"### Docker, Rancher, and Kubernetes  \n  \nDocker\n\n```shell\nsudo groupadd docker; sudo usermod -aG docker $USER; newgrp docker \ncurl -fsSL https://github.com/docker/docker-install/raw/main/install.sh | sudo sh\nsudo systemctl enable --now docker\n```\n  \nRancher  \n\n```shell\nsudo docker run -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:latest\n```\n  \nKubernetes\n\n```shell\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nsudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl\n```\n\nMiniKube\n\n```shell\n curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\n sudo install minikube-linux-amd64 /usr/local/bin/minikube\n minikube start\n```\n\nClean up\n\n```shell\nrm kubectl\nrm minikube\n```\n  \nSources:  \n<https://www.youtube.com/watch?oILc0ywDVTk>  \n<https://rancher.com/docs/rancher/v2.x/en/installation/requirements/installing-docker/>  \n<https://rancher.com/docs/rancher/v2.x/en/installation/other-installation-methods/single-node-docker/>  \n","readmeHtml":"<h3 id=\"docker-rancher-and-kubernetes\" class=\"mobile-header\">Docker, Rancher, and Kubernetes  </h3>\n<p class=\"mobile-paragraph\">Docker</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo groupadd docker; sudo usermod -aG docker $USER; newgrp docker \ncurl -fsSL https://github.com/docker/docker-install/raw/main/install.sh | sudo sh\nsudo systemctl enable --now docker</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Rancher  </p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo docker run -d --restart=unless-stopped -p 80:80 -p 443:443 rancher/rancher:latest</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Kubernetes</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">curl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl&quot;\nsudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">MiniKube</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\"> curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\n sudo install minikube-linux-amd64 /usr/local/bin/minikube\n minikube start</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Clean up</p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">rm kubectl\nrm minikube</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Sources:  </p>\n<p class=\"mobile-paragraph\"><https://www.youtube.com/watch?oILc0ywDVTk>  </p>\n<p class=\"mobile-paragraph\"><https://rancher.com/docs/rancher/v2.x/en/installation/requirements/installing-docker/>  </p>\n<p class=\"mobile-paragraph\"><https://rancher.com/docs/rancher/v2.x/en/installation/other-installation-methods/single-node-docker/>  </p>","readTime":"1 min","wordCount":86,"lastBuilt":"2025-09-14T01:30:40.233Z"},{"name":"raspbian","displayName":"Raspbian","slug":"raspbian","description":"Repo for raspbian","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/raspbian","updatedAt":"2025-09-08T03:15:35Z","createdAt":"2023-08-28T03:49:55Z","readmeRaw":"## My raspbian setup  \n  \nServers:  \n\n```shell\nsudo apt update && sudo apt dist-upgrade -yy -q && sudo reboot || echo \"Update has failed\"\nsudo apt install -yy git curl gnupg python3 vim-nox pass lynx net-tools ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c \"$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)\"\nbash -c \"$(curl -LsS -H \"Authorization: token ${GITHUB_ACCESS_TOKEN}\" ${MYPRIVATEDOTFILES_SERVER}/raw/main/install.sh)\"\n```\n\nDesktops:  \n\n```shell\nsudo apt update && sudo apt dist-upgrade -yy -q && sudo reboot || echo \"Update has failed\"\nsudo apt install -yy git curl gnupg python3 python3-pil libjpeg-dev vim-nox neomutt isync msmtp pass lynx notmuch abook urlview newsboat mplayer mpc mpd pianobar net-tools mpv ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c \"$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)\"\nbash -c \"$(curl -LsS -H \"Authorization: token ${GITHUB_ACCESS_TOKEN}\" ${MYPRIVATEDOTFILES_DESKTOP}/raw/main/install.sh)\"\n```\n  \n  \nResources:  \n<https://willemm.nl/track-aircraft-using-ads-b-groundstation-virtual-radar-server-vrs/>  \n","readmeHtml":"<h2 id=\"my-raspbian-setup\" class=\"mobile-header\">My raspbian setup  </h2>\n<p class=\"mobile-paragraph\">Servers:  </p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo apt update &amp;&amp; sudo apt dist-upgrade -yy -q &amp;&amp; sudo reboot || echo &quot;Update has failed&quot;\nsudo apt install -yy git curl gnupg python3 vim-nox pass lynx net-tools ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c &quot;$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)&quot;\nbash -c &quot;$(curl -LsS -H &quot;Authorization: token ${GITHUB_ACCESS_TOKEN}&quot; ${MYPRIVATEDOTFILES_SERVER}/raw/main/install.sh)&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Desktops:  </p>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo apt update &amp;&amp; sudo apt dist-upgrade -yy -q &amp;&amp; sudo reboot || echo &quot;Update has failed&quot;\nsudo apt install -yy git curl gnupg python3 python3-pil libjpeg-dev vim-nox neomutt isync msmtp pass lynx notmuch abook urlview newsboat mplayer mpc mpd pianobar net-tools mpv ctags build-essential fim emacs-nox x11-xkb-utils x11-session-utils\nsudo GH=casjay bash -c &quot;$(curl -LsS https://github.com/casjay-base/raspbian/raw/main/install.sh)&quot;\nbash -c &quot;$(curl -LsS -H &quot;Authorization: token ${GITHUB_ACCESS_TOKEN}&quot; ${MYPRIVATEDOTFILES_DESKTOP}/raw/main/install.sh)&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Resources:  </p>\n<p class=\"mobile-paragraph\"><https://willemm.nl/track-aircraft-using-ads-b-groundstation-virtual-radar-server-vrs/>  </p>","readTime":"1 min","wordCount":129,"lastBuilt":"2025-09-14T01:30:40.081Z"},{"name":"redis","displayName":"Redis","slug":"redis","description":"Repo for redis","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/redis","updatedAt":"2025-09-08T03:15:49Z","createdAt":"2025-09-08T03:15:38Z","readmeRaw":"## 👋 Welcome to redis 🚀  \n\nredis README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-redis\" class=\"mobile-header\">👋 Welcome to redis 🚀  </h2>\n<p class=\"mobile-paragraph\">redis README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:39.921Z"},{"name":"redis-server","displayName":"Redis Server","slug":"redis-server","description":"Repo for redis-server","category":"database","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/redis-server","updatedAt":"2025-09-08T03:16:02Z","createdAt":"2025-09-08T03:15:51Z","readmeRaw":"## 👋 Welcome to redis-server 🚀  \n\nredis-server README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-redis-server\" class=\"mobile-header\">👋 Welcome to redis-server 🚀  </h2>\n<p class=\"mobile-paragraph\">redis-server README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:39.761Z"},{"name":"rocketchat","displayName":"Rocketchat","slug":"rocketchat","description":"Repo for rocketchat","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/rocketchat","updatedAt":"2025-09-08T03:16:13Z","createdAt":"2025-09-08T03:16:03Z","readmeRaw":"# Rocket.Chat Installation Guide\n\nOpen-source team communication platform with features like real-time messaging, video calls, file sharing, and extensive integrations.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- 4GB RAM minimum, 8GB recommended\n- MongoDB 4.4+ or 5.0+\n- Node.js 14.x\n- Domain name (for SSL setup)\n\n## Installation\n\n### Using Docker Compose (Recommended)\n```bash\n# Create project directory\nmkdir -p ~/rocketchat && cd ~/rocketchat\n\n# Create docker-compose.yml\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  rocketchat:\n    image: registry.rocket.chat/rocketchat/rocket.chat:latest\n    restart: unless-stopped\n    environment:\n      MONGO_URL: \"mongodb://mongo:27017/rocketchat?replicaSet=rs0\"\n      MONGO_OPLOG_URL: \"mongodb://mongo:27017/local?replicaSet=rs0\"\n      ROOT_URL: \"https://chat.example.com\"\n      PORT: 3000\n      DEPLOY_METHOD: docker\n      REG_TOKEN: \\${REG_TOKEN}\n    depends_on:\n      - mongo\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./uploads:/app/uploads\n    networks:\n      - rocketchat\n\n  mongo:\n    image: docker.io/bitnami/mongodb:5.0\n    restart: unless-stopped\n    environment:\n      MONGODB_REPLICA_SET_MODE: primary\n      MONGODB_REPLICA_SET_NAME: rs0\n      MONGODB_PORT_NUMBER: 27017\n      MONGODB_INITIAL_PRIMARY_HOST: mongo\n      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: 27017\n      MONGODB_ADVERTISED_HOSTNAME: mongo\n      MONGODB_ENABLE_JOURNAL: true\n      ALLOW_EMPTY_PASSWORD: yes\n    volumes:\n      - mongodb_data:/bitnami/mongodb\n    networks:\n      - rocketchat\n\n  mongo-express:\n    image: mongo-express\n    restart: unless-stopped\n    environment:\n      ME_CONFIG_MONGODB_URL: \"mongodb://mongo:27017/\"\n      ME_CONFIG_BASICAUTH_USERNAME: admin\n      ME_CONFIG_BASICAUTH_PASSWORD: pass\n    ports:\n      - \"8081:8081\"\n    depends_on:\n      - mongo\n    networks:\n      - rocketchat\n\nnetworks:\n  rocketchat:\n    driver: bridge\n\nvolumes:\n  mongodb_data:\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f rocketchat\n```\n\n### Manual Installation (Ubuntu/Debian)\n\n#### MongoDB Setup\n```bash\n# Install MongoDB\nwget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -\necho \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list\n\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Configure MongoDB as replica set\nsudo systemctl enable --now mongod\n\n# Initialize replica set\nmongo --eval \"rs.initiate({_id: 'rs0', members: [{_id: 0, host: 'localhost:27017'}]})\"\n\n# Create Rocket.Chat database user\nmongo rocketchat --eval \"db.createUser({user: 'rocketchat', pwd: 'secure_password', roles: [{role: 'readWrite', db: 'rocketchat'}]})\"\n```\n\n#### Node.js and Rocket.Chat Setup\n```bash\n# Install Node.js 14.x\ncurl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Create rocketchat user\nsudo useradd -m -s /bin/bash rocketchat\n\n# Download and install Rocket.Chat\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\n\n# Install dependencies\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\n\n# Set environment variables\nsudo tee /etc/systemd/system/rocketchat.service > /dev/null <<EOF\n[Unit]\nDescription=The Rocket.Chat server\nAfter=network.target remote-fs.target nss-lookup.target nginx.service mongod.service\nWants=network.target\n\n[Service]\nExecStart=/usr/local/bin/node /opt/Rocket.Chat/main.js\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=rocketchat\nUser=rocketchat\nGroup=rocketchat\nEnvironment=MONGO_URL=mongodb://rocketchat:secure_password@localhost:27017/rocketchat?authSource=rocketchat&replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://rocketchat:secure_password@localhost:27017/local?authSource=admin&replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now rocketchat\n```\n\n### Snap Installation (Easiest)\n```bash\n# Install Rocket.Chat via snap\nsudo snap install rocketchat-server\n\n# Configure\nsudo snap set rocketchat-server mongodb-url=\"mongodb://localhost:27017/parties\"\nsudo snap set rocketchat-server root-url=\"https://chat.example.com\"\nsudo snap set rocketchat-server port=3000\n\n# Start service\nsudo systemctl enable --now snap.rocketchat-server.rocketchat-server\n```\n\n## Configuration\n\n### NGINX Reverse Proxy\n```bash\n# Create NGINX configuration\nsudo tee /etc/nginx/sites-available/rocketchat > /dev/null <<EOF\n# Upstreams\nupstream backend {\n    server 127.0.0.1:3000;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    server_name chat.example.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/letsencrypt/live/chat.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/chat.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Content-Type-Options \"nosniff\";\n    add_header Referrer-Policy \"no-referrer-when-downgrade\";\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n\n    # Proxy settings\n    location / {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_redirect off;\n    }\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name chat.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/rocketchat /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### SSL Certificate Setup\n```bash\n# Install Certbot\nsudo apt install -y certbot python3-certbot-nginx\n\n# Obtain SSL certificate\nsudo certbot --nginx -d chat.example.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet && systemctl reload nginx\n```\n\n### Database Optimization\n```bash\n# MongoDB tuning for Rocket.Chat\nsudo tee -a /etc/mongod.conf > /dev/null <<EOF\n\n# Performance tuning\nstorage:\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 2\n\n# Replica set configuration\nreplication:\n  replSetName: rs0\n\n# Security\nsecurity:\n  authorization: enabled\n\n# Networking\nnet:\n  bindIp: 127.0.0.1\n  port: 27017\nEOF\n\nsudo systemctl restart mongod\n\n# Create indexes for better performance\nmongo rocketchat --eval \"\ndb.users.createIndex({'username': 1}, {background: true});\ndb.users.createIndex({'emails.address': 1}, {background: true});\ndb.rocketchat_room.createIndex({'name': 1}, {background: true});\ndb.rocketchat_message.createIndex({'rid': 1, 'ts': 1}, {background: true});\n\"\n```\n\n## Administration\n\n### User Management via API\n```bash\n# Get auth token (login as admin first)\ncurl -H \"Content-type:application/json\" \\\n     http://localhost:3000/api/v1/login \\\n     -d '{\"user\":\"admin\", \"password\":\"admin_password\"}'\n\n# Create user via API\ncurl -H \"Content-type:application/json\" \\\n     -H \"X-Auth-Token: AUTH_TOKEN\" \\\n     -H \"X-User-Id: USER_ID\" \\\n     http://localhost:3000/api/v1/users.create \\\n     -d '{\"name\":\"New User\", \"email\":\"user@example.com\", \"password\":\"user_password\", \"username\":\"newuser\"}'\n\n# Create channel\ncurl -H \"Content-type:application/json\" \\\n     -H \"X-Auth-Token: AUTH_TOKEN\" \\\n     -H \"X-User-Id: USER_ID\" \\\n     http://localhost:3000/api/v1/channels.create \\\n     -d '{\"name\":\"general\"}'\n```\n\n### Backup and Restore\n```bash\n# Create backup script\nsudo tee /usr/local/bin/rocketchat-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/rocketchat\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,uploads}\n\n# Backup MongoDB database\nmongodump --host localhost:27017 --db rocketchat --out ${BACKUP_DIR}/database/mongodb-${DATE}\ntar -czf ${BACKUP_DIR}/database/rocketchat-db-${DATE}.tar.gz -C ${BACKUP_DIR}/database mongodb-${DATE}\nrm -rf ${BACKUP_DIR}/database/mongodb-${DATE}\n\n# Backup uploads directory\ntar -czf ${BACKUP_DIR}/uploads/rocketchat-uploads-${DATE}.tar.gz -C /opt/Rocket.Chat uploads\n\n# Docker backup (if using Docker)\nif command -v docker &> /dev/null; then\n    docker-compose exec mongo mongodump --archive=/tmp/rocketchat-backup.archive --db=rocketchat\n    docker cp rocketchat_mongo_1:/tmp/rocketchat-backup.archive ${BACKUP_DIR}/database/rocketchat-docker-${DATE}.archive\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"rocketchat-*\" -type f -mtime +7 -delete\n\necho \"Backup completed: rocketchat-${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/rocketchat-backup.sh\n```\n\n### Performance Optimization\n```bash\n# Configure Node.js for production\nsudo tee -a /etc/systemd/system/rocketchat.service > /dev/null <<EOF\nEnvironment=NODE_ENV=production\nEnvironment=MONGO_URL=mongodb://localhost:27017/rocketchat?replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://localhost:27017/local?replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\nEnvironment=Accounts_AvatarResize=true\nEnvironment=INSTANCE_IP=127.0.0.1\nEOF\n\n# Restart service\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat\n```\n\n## Integrations\n\n### LDAP/Active Directory Integration\n```bash\n# Configure LDAP via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service > /dev/null <<EOF\nEnvironment=LDAP_ENABLE=true\nEnvironment=LDAP_HOST=ldap.example.com\nEnvironment=LDAP_PORT=389\nEnvironment=LDAP_ENCRYPTION=false\nEnvironment=LDAP_AUTHENTICATION=true\nEnvironment=LDAP_AUTHENTICATION_UserDN=cn=admin,dc=example,dc=com\nEnvironment=LDAP_AUTHENTICATION_Password=ldap_password\nEnvironment=LDAP_USER_SEARCH_FILTER=(objectclass=person)\nEnvironment=LDAP_USER_SEARCH_SCOPE=sub\nEnvironment=LDAP_USER_SEARCH_FIELD=sAMAccountName\nEnvironment=LDAP_SEARCH_PAGE_SIZE=250\nEnvironment=LDAP_SEARCH_SIZE_LIMIT=1000\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat\n```\n\n### Webhook Integrations\n```bash\n# Create incoming webhook\ncurl -H \"Content-type:application/json\" \\\n     -H \"X-Auth-Token: AUTH_TOKEN\" \\\n     -H \"X-User-Id: USER_ID\" \\\n     http://localhost:3000/api/v1/integrations.create \\\n     -d '{\n       \"type\": \"webhook-incoming\",\n       \"name\": \"webhook-name\",\n       \"enabled\": true,\n       \"username\": \"webhook\",\n       \"channel\": \"#general\"\n     }'\n\n# Test webhook\ncurl -X POST \\\n     -H \"Content-type:application/json\" \\\n     https://chat.example.com/hooks/WEBHOOK_TOKEN \\\n     -d '{\"text\":\"Hello from external system!\"}'\n```\n\n### Email Configuration\n```bash\n# Configure SMTP settings via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service > /dev/null <<EOF\nEnvironment=MAIL_URL=smtps://smtp.gmail.com:465\nEnvironment=MAIL_FROM=noreply@example.com\nEnvironment=SMTP_Username=your-email@gmail.com\nEnvironment=SMTP_Password=your-app-password\nEnvironment=SMTP_Host=smtp.gmail.com\nEnvironment=SMTP_Port=587\nEnvironment=SMTP_IgnoreTLS=false\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat\n```\n\n## Security Configuration\n\n### Firewall Setup\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 3000/tcp   # Rocket.Chat\nsudo ufw allow 27017/tcp  # MongoDB (restrict to localhost in production)\nsudo ufw allow 'Nginx Full'\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n```\n\n### Security Hardening\n```bash\n# MongoDB security\nsudo tee -a /etc/mongod.conf > /dev/null <<EOF\n\n# Enable authentication\nsecurity:\n  authorization: enabled\n\n# Bind to localhost only\nnet:\n  bindIp: 127.0.0.1\nEOF\n\n# Create MongoDB admin user\nmongo admin --eval \"\ndb.createUser({\n  user: 'admin',\n  pwd: 'secure_password',\n  roles: [{role: 'userAdminAnyDatabase', db: 'admin'}]\n});\n\ndb.createUser({\n  user: 'rocketchat',\n  pwd: 'rocketchat_password',\n  roles: [{role: 'readWrite', db: 'rocketchat'}]\n});\n\"\n\nsudo systemctl restart mongod\n\n# Update Rocket.Chat MongoDB URL with authentication\nsudo sed -i 's|MONGO_URL=.*|MONGO_URL=mongodb://rocketchat:rocketchat_password@localhost:27017/rocketchat?authSource=rocketchat&replicaSet=rs0|' /etc/systemd/system/rocketchat.service\n```\n\n## High Availability Setup\n\n### Load Balancer Configuration\n```bash\n# HAProxy configuration for Rocket.Chat cluster\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\n# Rocket.Chat frontend\nfrontend rocketchat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/chat.example.com.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rocketchat_servers\n\n# Rocket.Chat backend\nbackend rocketchat_servers\n    balance roundrobin\n    option httpchk GET /api/info\n    http-check expect status 200\n    \n    # WebSocket support\n    timeout tunnel 3600s\n    \n    server chat1 192.168.1.10:3000 check\n    server chat2 192.168.1.11:3000 check\n    server chat3 192.168.1.12:3000 check\nEOF\n\nsudo systemctl restart haproxy\n```\n\n### MongoDB Replica Set (Multi-node)\n```bash\n# On each MongoDB node, configure replica set\nsudo tee -a /etc/mongod.conf > /dev/null <<EOF\nreplication:\n  replSetName: rs0\n  \nnet:\n  bindIp: 0.0.0.0  # Allow connections from other nodes\nEOF\n\nsudo systemctl restart mongod\n\n# Initialize replica set (run on primary node only)\nmongo --eval \"\nrs.initiate({\n  _id: 'rs0',\n  members: [\n    {_id: 0, host: 'mongo1.example.com:27017', priority: 2},\n    {_id: 1, host: 'mongo2.example.com:27017', priority: 1},\n    {_id: 2, host: 'mongo3.example.com:27017', priority: 1, arbiterOnly: true}\n  ]\n});\n\"\n\n# Update Rocket.Chat MongoDB URL for replica set\nEnvironment=MONGO_URL=mongodb://mongo1.example.com:27017,mongo2.example.com:27017,mongo3.example.com:27017/rocketchat?replicaSet=rs0\n```\n\n## Verification\n\n```bash\n# Check service status\nsudo systemctl status rocketchat\nsudo systemctl status mongod\n\n# Docker verification\ndocker-compose ps\ndocker-compose logs rocketchat\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check MongoDB connection\nmongo --eval \"db.runCommand('ping')\"\n\n# Test API endpoint\ncurl http://localhost:3000/api/info\n\n# Check logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f  # For Docker installation\n\n# Check memory usage\nps aux | grep -E \"(rocket|mongo)\"\ndocker stats  # For Docker installation\n\n# Test webhooks\ncurl -X POST https://chat.example.com/hooks/YOUR_WEBHOOK_TOKEN \\\n     -H \"Content-type:application/json\" \\\n     -d '{\"text\":\"Test message from API\"}'\n```\n\n## Maintenance and Updates\n\n### Update Rocket.Chat\n```bash\n# Manual installation update\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo systemctl stop rocketchat\nsudo mv Rocket.Chat Rocket.Chat.backup\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\nsudo systemctl start rocketchat\n\n# Docker update\ncd ~/rocketchat\ndocker-compose pull\ndocker-compose up -d\n\n# Snap update\nsudo snap refresh rocketchat-server\n```\n\n### Database Maintenance\n```bash\n# MongoDB maintenance commands\nmongo rocketchat --eval \"db.stats()\"\nmongo rocketchat --eval \"db.runCommand({compact: 'rocketchat_message'})\"\n\n# Clean up old messages (optional)\nmongo rocketchat --eval \"\nvar cutoff = new Date();\ncutoff.setDate(cutoff.getDate() - 90);  // Keep 90 days\ndb.rocketchat_message.deleteMany({'ts': {\\$lt: cutoff}});\n\"\n\n# Repair database if needed\nmongod --repair --dbpath /var/lib/mongodb\n```\n\n## Troubleshooting\n\n```bash\n# Check Rocket.Chat logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f rocketchat  # Docker\n\n# Check MongoDB logs\nsudo journalctl -u mongod -f\ndocker-compose logs -f mongo  # Docker\n\n# Test MongoDB replica set status\nmongo --eval \"rs.status()\"\n\n# Check Node.js processes\nps aux | grep node\n\n# Test database connectivity\nmongo rocketchat --eval \"db.runCommand('ping')\"\n\n# Check disk space\ndf -h /opt/Rocket.Chat\ndf -h /var/lib/mongodb\n\n# Memory usage analysis\nfree -h\ntop -p $(pgrep -d',' node)\n\n# Network connectivity test\ntelnet localhost 3000\ntelnet localhost 27017\n\n# Check environment variables\nsudo systemctl show rocketchat --property=Environment\n\n# Reset admin password (emergency)\nmongo rocketchat --eval \"\ndb.users.update(\n  {username: 'admin'},\n  {\\$set: {'services.password.bcrypt': '\\$2a\\$10\\$n9CM8OgInDlwpvjLKLPML.eizXIzLlRtgCh3GRLafOdR9ldAUh/KG'}}  // password: admin\n);\n\"\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.rocket.chat/)\n- [Administrator Guide](https://docs.rocket.chat/setup-and-configure/environment-configuration)\n- [API Documentation](https://developer.rocket.chat/reference/api)\n- [Community Forum](https://forums.rocket.chat/)\n- [GitHub Repository](https://github.com/RocketChat/Rocket.Chat)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"rocketchat-installation-guide\" class=\"mobile-header\">Rocket.Chat Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source team communication platform with features like real-time messaging, video calls, file sharing, and extensive integrations.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB recommended</li>\n<li class=\"mobile-list-item\">MongoDB 4.4+ or 5.0+</li>\n<li class=\"mobile-list-item\">Node.js 14.x</li>\n<li class=\"mobile-list-item\">Domain name (for SSL setup)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-docker-compose-recommended\" class=\"mobile-header\">Using Docker Compose (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create project directory\nmkdir -p ~/rocketchat &amp;&amp; cd ~/rocketchat\n\n# Create docker-compose.yml\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  rocketchat:\n    image: registry.rocket.chat/rocketchat/rocket.chat:latest\n    restart: unless-stopped\n    environment:\n      MONGO_URL: &quot;mongodb://mongo:27017/rocketchat?replicaSet=rs0&quot;\n      MONGO_OPLOG_URL: &quot;mongodb://mongo:27017/local?replicaSet=rs0&quot;\n      ROOT_URL: &quot;https://chat.example.com&quot;\n      PORT: 3000\n      DEPLOY_METHOD: docker\n      REG_TOKEN: \\${REG_TOKEN}\n    depends_on:\n      - mongo\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - ./uploads:/app/uploads\n    networks:\n      - rocketchat\n\n  mongo:\n    image: docker.io/bitnami/mongodb:5.0\n    restart: unless-stopped\n    environment:\n      MONGODB_REPLICA_SET_MODE: primary\n      MONGODB_REPLICA_SET_NAME: rs0\n      MONGODB_PORT_NUMBER: 27017\n      MONGODB_INITIAL_PRIMARY_HOST: mongo\n      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: 27017\n      MONGODB_ADVERTISED_HOSTNAME: mongo\n      MONGODB_ENABLE_JOURNAL: true\n      ALLOW_EMPTY_PASSWORD: yes\n    volumes:\n      - mongodb_data:/bitnami/mongodb\n    networks:\n      - rocketchat\n\n  mongo-express:\n    image: mongo-express\n    restart: unless-stopped\n    environment:\n      ME_CONFIG_MONGODB_URL: &quot;mongodb://mongo:27017/&quot;\n      ME_CONFIG_BASICAUTH_USERNAME: admin\n      ME_CONFIG_BASICAUTH_PASSWORD: pass\n    ports:\n      - &quot;8081:8081&quot;\n    depends_on:\n      - mongo\n    networks:\n      - rocketchat\n\nnetworks:\n  rocketchat:\n    driver: bridge\n\nvolumes:\n  mongodb_data:\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f rocketchat</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-installation-ubuntudebian\" class=\"mobile-header\">Manual Installation (Ubuntu/Debian)</h3>\n<p class=\"mobile-paragraph\">#### MongoDB Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MongoDB\nwget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -\necho &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list\n\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Configure MongoDB as replica set\nsudo systemctl enable --now mongod\n\n# Initialize replica set\nmongo --eval &quot;rs.initiate({_id: &#039;rs0&#039;, members: [{_id: 0, host: &#039;localhost:27017&#039;}]})&quot;\n\n# Create Rocket.Chat database user\nmongo rocketchat --eval &quot;db.createUser({user: &#039;rocketchat&#039;, pwd: &#039;secure_password&#039;, roles: [{role: &#039;readWrite&#039;, db: &#039;rocketchat&#039;}]})&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Node.js and Rocket.Chat Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js 14.x\ncurl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Create rocketchat user\nsudo useradd -m -s /bin/bash rocketchat\n\n# Download and install Rocket.Chat\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\n\n# Install dependencies\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\n\n# Set environment variables\nsudo tee /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=The Rocket.Chat server\nAfter=network.target remote-fs.target nss-lookup.target nginx.service mongod.service\nWants=network.target\n\n[Service]\nExecStart=/usr/local/bin/node /opt/Rocket.Chat/main.js\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=rocketchat\nUser=rocketchat\nGroup=rocketchat\nEnvironment=MONGO_URL=mongodb://rocketchat:secure_password@localhost:27017/rocketchat?authSource=rocketchat&amp;replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://rocketchat:secure_password@localhost:27017/local?authSource=admin&amp;replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now rocketchat</code></pre>\n      </div>\n    </div>\n<h3 id=\"snap-installation-easiest\" class=\"mobile-header\">Snap Installation (Easiest)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Rocket.Chat via snap\nsudo snap install rocketchat-server\n\n# Configure\nsudo snap set rocketchat-server mongodb-url=&quot;mongodb://localhost:27017/parties&quot;\nsudo snap set rocketchat-server root-url=&quot;https://chat.example.com&quot;\nsudo snap set rocketchat-server port=3000\n\n# Start service\nsudo systemctl enable --now snap.rocketchat-server.rocketchat-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"nginx-reverse-proxy\" class=\"mobile-header\">NGINX Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration\nsudo tee /etc/nginx/sites-available/rocketchat &gt; /dev/null &lt;&lt;EOF\n# Upstreams\nupstream backend {\n    server 127.0.0.1:3000;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    server_name chat.example.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/letsencrypt/live/chat.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/chat.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n    add_header X-Content-Type-Options &quot;nosniff&quot;;\n    add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot;;\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n\n    # Proxy settings\n    location / {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_redirect off;\n    }\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name chat.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/rocketchat /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssl-certificate-setup\" class=\"mobile-header\">SSL Certificate Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot\nsudo apt install -y certbot python3-certbot-nginx\n\n# Obtain SSL certificate\nsudo certbot --nginx -d chat.example.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet &amp;&amp; systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB tuning for Rocket.Chat\nsudo tee -a /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\n\n# Performance tuning\nstorage:\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 2\n\n# Replica set configuration\nreplication:\n  replSetName: rs0\n\n# Security\nsecurity:\n  authorization: enabled\n\n# Networking\nnet:\n  bindIp: 127.0.0.1\n  port: 27017\nEOF\n\nsudo systemctl restart mongod\n\n# Create indexes for better performance\nmongo rocketchat --eval &quot;\ndb.users.createIndex({&#039;username&#039;: 1}, {background: true});\ndb.users.createIndex({&#039;emails.address&#039;: 1}, {background: true});\ndb.rocketchat_room.createIndex({&#039;name&#039;: 1}, {background: true});\ndb.rocketchat_message.createIndex({&#039;rid&#039;: 1, &#039;ts&#039;: 1}, {background: true});\n&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"administration\" class=\"mobile-header\">Administration</h2>\n<h3 id=\"user-management-via-api\" class=\"mobile-header\">User Management via API</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Get auth token (login as admin first)\ncurl -H &quot;Content-type:application/json&quot; \\\n     http://localhost:3000/api/v1/login \\\n     -d &#039;{&quot;user&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;admin_password&quot;}&#039;\n\n# Create user via API\ncurl -H &quot;Content-type:application/json&quot; \\\n     -H &quot;X-Auth-Token: AUTH_TOKEN&quot; \\\n     -H &quot;X-User-Id: USER_ID&quot; \\\n     http://localhost:3000/api/v1/users.create \\\n     -d &#039;{&quot;name&quot;:&quot;New User&quot;, &quot;email&quot;:&quot;user@example.com&quot;, &quot;password&quot;:&quot;user_password&quot;, &quot;username&quot;:&quot;newuser&quot;}&#039;\n\n# Create channel\ncurl -H &quot;Content-type:application/json&quot; \\\n     -H &quot;X-Auth-Token: AUTH_TOKEN&quot; \\\n     -H &quot;X-User-Id: USER_ID&quot; \\\n     http://localhost:3000/api/v1/channels.create \\\n     -d &#039;{&quot;name&quot;:&quot;general&quot;}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/rocketchat-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/rocketchat&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,uploads}\n\n# Backup MongoDB database\nmongodump --host localhost:27017 --db rocketchat --out ${BACKUP_DIR}/database/mongodb-${DATE}\ntar -czf ${BACKUP_DIR}/database/rocketchat-db-${DATE}.tar.gz -C ${BACKUP_DIR}/database mongodb-${DATE}\nrm -rf ${BACKUP_DIR}/database/mongodb-${DATE}\n\n# Backup uploads directory\ntar -czf ${BACKUP_DIR}/uploads/rocketchat-uploads-${DATE}.tar.gz -C /opt/Rocket.Chat uploads\n\n# Docker backup (if using Docker)\nif command -v docker &amp;&gt; /dev/null; then\n    docker-compose exec mongo mongodump --archive=/tmp/rocketchat-backup.archive --db=rocketchat\n    docker cp rocketchat_mongo_1:/tmp/rocketchat-backup.archive ${BACKUP_DIR}/database/rocketchat-docker-${DATE}.archive\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;rocketchat-*&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: rocketchat-${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/rocketchat-backup.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Node.js for production\nsudo tee -a /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\nEnvironment=NODE_ENV=production\nEnvironment=MONGO_URL=mongodb://localhost:27017/rocketchat?replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://localhost:27017/local?replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\nEnvironment=Accounts_AvatarResize=true\nEnvironment=INSTANCE_IP=127.0.0.1\nEOF\n\n# Restart service\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat</code></pre>\n      </div>\n    </div>\n<h2 id=\"integrations\" class=\"mobile-header\">Integrations</h2>\n<h3 id=\"ldapactive-directory-integration\" class=\"mobile-header\">LDAP/Active Directory Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure LDAP via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\nEnvironment=LDAP_ENABLE=true\nEnvironment=LDAP_HOST=ldap.example.com\nEnvironment=LDAP_PORT=389\nEnvironment=LDAP_ENCRYPTION=false\nEnvironment=LDAP_AUTHENTICATION=true\nEnvironment=LDAP_AUTHENTICATION_UserDN=cn=admin,dc=example,dc=com\nEnvironment=LDAP_AUTHENTICATION_Password=ldap_password\nEnvironment=LDAP_USER_SEARCH_FILTER=(objectclass=person)\nEnvironment=LDAP_USER_SEARCH_SCOPE=sub\nEnvironment=LDAP_USER_SEARCH_FIELD=sAMAccountName\nEnvironment=LDAP_SEARCH_PAGE_SIZE=250\nEnvironment=LDAP_SEARCH_SIZE_LIMIT=1000\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat</code></pre>\n      </div>\n    </div>\n<h3 id=\"webhook-integrations\" class=\"mobile-header\">Webhook Integrations</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create incoming webhook\ncurl -H &quot;Content-type:application/json&quot; \\\n     -H &quot;X-Auth-Token: AUTH_TOKEN&quot; \\\n     -H &quot;X-User-Id: USER_ID&quot; \\\n     http://localhost:3000/api/v1/integrations.create \\\n     -d &#039;{\n       &quot;type&quot;: &quot;webhook-incoming&quot;,\n       &quot;name&quot;: &quot;webhook-name&quot;,\n       &quot;enabled&quot;: true,\n       &quot;username&quot;: &quot;webhook&quot;,\n       &quot;channel&quot;: &quot;#general&quot;\n     }&#039;\n\n# Test webhook\ncurl -X POST \\\n     -H &quot;Content-type:application/json&quot; \\\n     https://chat.example.com/hooks/WEBHOOK_TOKEN \\\n     -d &#039;{&quot;text&quot;:&quot;Hello from external system!&quot;}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"email-configuration\" class=\"mobile-header\">Email Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure SMTP settings via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\nEnvironment=MAIL_URL=smtps://smtp.gmail.com:465\nEnvironment=MAIL_FROM=noreply@example.com\nEnvironment=SMTP_Username=your-email@gmail.com\nEnvironment=SMTP_Password=your-app-password\nEnvironment=SMTP_Host=smtp.gmail.com\nEnvironment=SMTP_Port=587\nEnvironment=SMTP_IgnoreTLS=false\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"firewall-setup\" class=\"mobile-header\">Firewall Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 3000/tcp   # Rocket.Chat\nsudo ufw allow 27017/tcp  # MongoDB (restrict to localhost in production)\nsudo ufw allow &#039;Nginx Full&#039;\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB security\nsudo tee -a /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\n\n# Enable authentication\nsecurity:\n  authorization: enabled\n\n# Bind to localhost only\nnet:\n  bindIp: 127.0.0.1\nEOF\n\n# Create MongoDB admin user\nmongo admin --eval &quot;\ndb.createUser({\n  user: &#039;admin&#039;,\n  pwd: &#039;secure_password&#039;,\n  roles: [{role: &#039;userAdminAnyDatabase&#039;, db: &#039;admin&#039;}]\n});\n\ndb.createUser({\n  user: &#039;rocketchat&#039;,\n  pwd: &#039;rocketchat_password&#039;,\n  roles: [{role: &#039;readWrite&#039;, db: &#039;rocketchat&#039;}]\n});\n&quot;\n\nsudo systemctl restart mongod\n\n# Update Rocket.Chat MongoDB URL with authentication\nsudo sed -i &#039;s|MONGO_URL=.*|MONGO_URL=mongodb://rocketchat:rocketchat_password@localhost:27017/rocketchat?authSource=rocketchat&amp;replicaSet=rs0|&#039; /etc/systemd/system/rocketchat.service</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h2>\n<h3 id=\"load-balancer-configuration\" class=\"mobile-header\">Load Balancer Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># HAProxy configuration for Rocket.Chat cluster\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\n# Rocket.Chat frontend\nfrontend rocketchat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/chat.example.com.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rocketchat_servers\n\n# Rocket.Chat backend\nbackend rocketchat_servers\n    balance roundrobin\n    option httpchk GET /api/info\n    http-check expect status 200\n    \n    # WebSocket support\n    timeout tunnel 3600s\n    \n    server chat1 192.168.1.10:3000 check\n    server chat2 192.168.1.11:3000 check\n    server chat3 192.168.1.12:3000 check\nEOF\n\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-replica-set-multi-node\" class=\"mobile-header\">MongoDB Replica Set (Multi-node)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># On each MongoDB node, configure replica set\nsudo tee -a /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\nreplication:\n  replSetName: rs0\n  \nnet:\n  bindIp: 0.0.0.0  # Allow connections from other nodes\nEOF\n\nsudo systemctl restart mongod\n\n# Initialize replica set (run on primary node only)\nmongo --eval &quot;\nrs.initiate({\n  _id: &#039;rs0&#039;,\n  members: [\n    {_id: 0, host: &#039;mongo1.example.com:27017&#039;, priority: 2},\n    {_id: 1, host: &#039;mongo2.example.com:27017&#039;, priority: 1},\n    {_id: 2, host: &#039;mongo3.example.com:27017&#039;, priority: 1, arbiterOnly: true}\n  ]\n});\n&quot;\n\n# Update Rocket.Chat MongoDB URL for replica set\nEnvironment=MONGO_URL=mongodb://mongo1.example.com:27017,mongo2.example.com:27017,mongo3.example.com:27017/rocketchat?replicaSet=rs0</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status rocketchat\nsudo systemctl status mongod\n\n# Docker verification\ndocker-compose ps\ndocker-compose logs rocketchat\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check MongoDB connection\nmongo --eval &quot;db.runCommand(&#039;ping&#039;)&quot;\n\n# Test API endpoint\ncurl http://localhost:3000/api/info\n\n# Check logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f  # For Docker installation\n\n# Check memory usage\nps aux | grep -E &quot;(rocket|mongo)&quot;\ndocker stats  # For Docker installation\n\n# Test webhooks\ncurl -X POST https://chat.example.com/hooks/YOUR_WEBHOOK_TOKEN \\\n     -H &quot;Content-type:application/json&quot; \\\n     -d &#039;{&quot;text&quot;:&quot;Test message from API&quot;}&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance-and-updates\" class=\"mobile-header\">Maintenance and Updates</h2>\n<h3 id=\"update-rocketchat\" class=\"mobile-header\">Update Rocket.Chat</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Manual installation update\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo systemctl stop rocketchat\nsudo mv Rocket.Chat Rocket.Chat.backup\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\nsudo systemctl start rocketchat\n\n# Docker update\ncd ~/rocketchat\ndocker-compose pull\ndocker-compose up -d\n\n# Snap update\nsudo snap refresh rocketchat-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-maintenance\" class=\"mobile-header\">Database Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB maintenance commands\nmongo rocketchat --eval &quot;db.stats()&quot;\nmongo rocketchat --eval &quot;db.runCommand({compact: &#039;rocketchat_message&#039;})&quot;\n\n# Clean up old messages (optional)\nmongo rocketchat --eval &quot;\nvar cutoff = new Date();\ncutoff.setDate(cutoff.getDate() - 90);  // Keep 90 days\ndb.rocketchat_message.deleteMany({&#039;ts&#039;: {\\$lt: cutoff}});\n&quot;\n\n# Repair database if needed\nmongod --repair --dbpath /var/lib/mongodb</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Rocket.Chat logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f rocketchat  # Docker\n\n# Check MongoDB logs\nsudo journalctl -u mongod -f\ndocker-compose logs -f mongo  # Docker\n\n# Test MongoDB replica set status\nmongo --eval &quot;rs.status()&quot;\n\n# Check Node.js processes\nps aux | grep node\n\n# Test database connectivity\nmongo rocketchat --eval &quot;db.runCommand(&#039;ping&#039;)&quot;\n\n# Check disk space\ndf -h /opt/Rocket.Chat\ndf -h /var/lib/mongodb\n\n# Memory usage analysis\nfree -h\ntop -p $(pgrep -d&#039;,&#039; node)\n\n# Network connectivity test\ntelnet localhost 3000\ntelnet localhost 27017\n\n# Check environment variables\nsudo systemctl show rocketchat --property=Environment\n\n# Reset admin password (emergency)\nmongo rocketchat --eval &quot;\ndb.users.update(\n  {username: &#039;admin&#039;},\n  {\\$set: {&#039;services.password.bcrypt&#039;: &#039;\\$2a\\$10\\$n9CM8OgInDlwpvjLKLPML.eizXIzLlRtgCh3GRLafOdR9ldAUh/KG&#039;}}  // password: admin\n);\n&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.rocket.chat/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.rocket.chat/setup-and-configure/environment-configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Administrator Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.rocket.chat/reference/api\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">API Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forums.rocket.chat/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/RocketChat/Rocket.Chat\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"9 min","wordCount":1673,"lastBuilt":"2025-09-14T01:30:39.612Z"},{"name":"shinobi","displayName":"Shinobi","slug":"shinobi","description":"Repo for shinobi","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/shinobi","updatedAt":"2025-09-08T03:16:18Z","createdAt":"2023-08-28T03:50:05Z","readmeRaw":"# CentOS\n\n```bash\nsudo yum install -y ffmpeg gstreamer1-libav x264 x265 git curl gnupg2\nsudo yum install -y nodejs\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/centos.sh && INSTALL/centos.sh\n\n```\n\n# Debian\n\n```bash\nsudo apt update\nsudo apt install ffmpeg libav-tools x264 x265 git curl gnupg2\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt install nodejs -y\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/ubuntu.sh && INSTALL/ubuntu.sh\n```\n","readmeHtml":"<h1 id=\"centos\" class=\"mobile-header\">CentOS</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo yum install -y ffmpeg gstreamer1-libav x264 x265 git curl gnupg2\nsudo yum install -y nodejs\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/centos.sh &amp;&amp; INSTALL/centos.sh\n</code></pre>\n      </div>\n    </div>\n<h1 id=\"debian\" class=\"mobile-header\">Debian</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo apt update\nsudo apt install ffmpeg libav-tools x264 x265 git curl gnupg2\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\nsudo apt install nodejs -y\nln -s /usr/bin/nodejs /usr/bin/node\n\ngit clone https://gitlab.com/Shinobi-Systems/Shinobi.git /usr/local/share/shinobi\ncd /usr/local/share/shinobi\nchmod +x INSTALL/ubuntu.sh &amp;&amp; INSTALL/ubuntu.sh</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":81,"lastBuilt":"2025-09-14T01:30:39.455Z"},{"name":"sonarqube","displayName":"Sonarqube","slug":"sonarqube","description":"Repo for sonarqube","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/sonarqube","updatedAt":"2025-09-08T03:16:32Z","createdAt":"2025-09-08T03:16:21Z","readmeRaw":"## 👋 Welcome to sonarqube 🚀  \n\nsonarqube README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-sonarqube\" class=\"mobile-header\">👋 Welcome to sonarqube 🚀  </h2>\n<p class=\"mobile-paragraph\">sonarqube README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:39.322Z"},{"name":"strapi","displayName":"Strapi","slug":"strapi","description":"Repo for strapi","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/strapi","updatedAt":"2025-09-08T03:16:44Z","createdAt":"2025-09-08T03:16:33Z","readmeRaw":"## 👋 Welcome to strapi 🚀  \n\nstrapi README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-strapi\" class=\"mobile-header\">👋 Welcome to strapi 🚀  </h2>\n<p class=\"mobile-paragraph\">strapi README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:39.171Z"},{"name":"terraform","displayName":"Terraform","slug":"terraform","description":"Repo for terraform","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/terraform","updatedAt":"2025-09-08T03:17:01Z","createdAt":"2025-09-08T03:16:51Z","readmeRaw":"# Terraform Installation Guide\n\nInfrastructure as Code (IaC) tool for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Cloud provider account (AWS, Azure, GCP, etc.)\n- Basic understanding of infrastructure concepts\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y terraform\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform\n```\n\n### Manual Installation\n```bash\n# Download latest version\nTERRAFORM_VERSION=\"1.5.7\"\ncd /tmp\nwget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\nsudo chmod +x /usr/local/bin/terraform\n\n# Clean up\nrm terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n```\n\n### Using Docker\n```bash\n# Create alias for Docker-based Terraform\necho 'alias terraform=\"docker run --rm -it -v $(pwd):/workspace -w /workspace hashicorp/terraform:latest\"' >> ~/.bashrc\nsource ~/.bashrc\n\n# Or create wrapper script\nsudo tee /usr/local/bin/terraform > /dev/null <<'EOF'\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/workspace \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.config/gcloud:/root/.config/gcloud:ro \\\n  -w /workspace \\\n  hashicorp/terraform:latest \"$@\"\nEOF\nsudo chmod +x /usr/local/bin/terraform\n```\n\n## Configuration\n\n### AWS Provider Setup\n```bash\n# Install AWS CLI\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\n\n# Configure AWS credentials\naws configure\n# AWS Access Key ID: YOUR_ACCESS_KEY\n# AWS Secret Access Key: YOUR_SECRET_KEY  \n# Default region name: us-west-2\n# Default output format: json\n\n# Create basic Terraform configuration\nmkdir -p ~/terraform/aws-infrastructure\ncd ~/terraform/aws-infrastructure\n\n# Create main.tf\ncat > main.tf <<EOF\nterraform {\n  required_version = \">= 1.0\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n\n# Variables\nvariable \"aws_region\" {\n  description = \"AWS region\"\n  type        = string\n  default     = \"us-west-2\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  type        = string\n  default     = \"development\"\n}\n\n# VPC\nresource \"aws_vpc\" \"main\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name        = \"\\${var.environment}-vpc\"\n    Environment = var.environment\n  }\n}\n\n# Internet Gateway\nresource \"aws_internet_gateway\" \"main\" {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name        = \"\\${var.environment}-igw\"\n    Environment = var.environment\n  }\n}\n\n# Public Subnet\nresource \"aws_subnet\" \"public\" {\n  count                   = 2\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = \"10.0.\\${count.index + 1}.0/24\"\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name        = \"\\${var.environment}-public-subnet-\\${count.index + 1}\"\n    Environment = var.environment\n  }\n}\n\n# Data source for availability zones\ndata \"aws_availability_zones\" \"available\" {\n  state = \"available\"\n}\n\n# Route table\nresource \"aws_route_table\" \"public\" {\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block = \"0.0.0.0/0\"\n    gateway_id = aws_internet_gateway.main.id\n  }\n\n  tags = {\n    Name        = \"\\${var.environment}-public-rt\"\n    Environment = var.environment\n  }\n}\n\n# Route table associations\nresource \"aws_route_table_association\" \"public\" {\n  count          = length(aws_subnet.public)\n  subnet_id      = aws_subnet.public[count.index].id\n  route_table_id = aws_route_table.public.id\n}\n\n# Security group\nresource \"aws_security_group\" \"web\" {\n  name_prefix = \"\\${var.environment}-web-\"\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = {\n    Name        = \"\\${var.environment}-web-sg\"\n    Environment = var.environment\n  }\n}\n\n# Outputs\noutput \"vpc_id\" {\n  value = aws_vpc.main.id\n}\n\noutput \"public_subnet_ids\" {\n  value = aws_subnet.public[*].id\n}\n\noutput \"security_group_id\" {\n  value = aws_security_group.web.id\n}\nEOF\n\n# Create terraform.tfvars\ncat > terraform.tfvars <<EOF\naws_region  = \"us-west-2\"\nenvironment = \"production\"\nEOF\n```\n\n### Azure Provider Setup\n```bash\n# Install Azure CLI\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Login to Azure\naz login\n\n# Create service principal for Terraform\naz ad sp create-for-rbac --name \"terraform\" --role=\"Contributor\" --scopes=\"/subscriptions/YOUR_SUBSCRIPTION_ID\"\n\n# Set environment variables\nexport ARM_CLIENT_ID=\"your-client-id\"\nexport ARM_CLIENT_SECRET=\"your-client-secret\"  \nexport ARM_SUBSCRIPTION_ID=\"your-subscription-id\"\nexport ARM_TENANT_ID=\"your-tenant-id\"\n\n# Create Azure Terraform configuration\nmkdir -p ~/terraform/azure-infrastructure\ncd ~/terraform/azure-infrastructure\n\ncat > main.tf <<EOF\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n# Resource Group\nresource \"azurerm_resource_group\" \"main\" {\n  name     = \"\\${var.environment}-rg\"\n  location = var.location\n  \n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Virtual Network\nresource \"azurerm_virtual_network\" \"main\" {\n  name                = \"\\${var.environment}-vnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Subnet\nresource \"azurerm_subnet\" \"internal\" {\n  name                 = \"internal\"\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = [\"10.0.2.0/24\"]\n}\n\nvariable \"location\" {\n  description = \"Azure region\"\n  default     = \"East US\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  default     = \"development\"\n}\nEOF\n```\n\n### Google Cloud Provider Setup\n```bash\n# Install Google Cloud SDK\necho \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\nsudo apt-get update && sudo apt-get install -y google-cloud-cli\n\n# Authenticate\ngcloud auth login\ngcloud config set project YOUR_PROJECT_ID\n\n# Create service account for Terraform\ngcloud iam service-accounts create terraform --display-name=\"Terraform Service Account\"\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID --member=\"serviceAccount:terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\" --role=\"roles/editor\"\ngcloud iam service-accounts keys create ~/gcp-terraform-key.json --iam-account=terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\n\n# Set environment variable\nexport GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/gcp-terraform-key.json\"\n```\n\n## Basic Usage\n\n### Initialize and Plan\n```bash\n# Initialize Terraform (run in project directory)\nterraform init\n\n# Format code\nterraform fmt\n\n# Validate configuration\nterraform validate\n\n# Plan changes\nterraform plan\n\n# Apply changes\nterraform apply\n\n# Show current state\nterraform show\n\n# List resources\nterraform state list\n\n# Destroy infrastructure\nterraform destroy\n```\n\n### State Management\n```bash\n# Configure remote state (S3 backend example)\ncat > backend.tf <<EOF\nterraform {\n  backend \"s3\" {\n    bucket = \"your-terraform-state-bucket\"\n    key    = \"infrastructure/terraform.tfstate\"\n    region = \"us-west-2\"\n    \n    # Optional: DynamoDB table for state locking\n    dynamodb_table = \"terraform-state-lock\"\n    encrypt        = true\n  }\n}\nEOF\n\n# Initialize backend\nterraform init -migrate-state\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Move state resources\nterraform state mv aws_instance.example aws_instance.web_server\n```\n\n### Workspace Management\n```bash\n# Create new workspace\nterraform workspace new production\nterraform workspace new staging\n\n# List workspaces\nterraform workspace list\n\n# Switch workspace\nterraform workspace select production\n\n# Show current workspace\nterraform workspace show\n```\n\n## Advanced Configuration\n\n### Modules\n```bash\n# Create reusable module structure\nmkdir -p modules/vpc/{variables.tf,main.tf,outputs.tf}\n\n# modules/vpc/variables.tf\ncat > modules/vpc/variables.tf <<EOF\nvariable \"vpc_cidr\" {\n  description = \"CIDR block for VPC\"\n  type        = string\n  default     = \"10.0.0.0/16\"\n}\n\nvariable \"environment\" {\n  description = \"Environment name\"\n  type        = string\n}\n\nvariable \"availability_zones\" {\n  description = \"List of availability zones\"\n  type        = list(string)\n  default     = [\"us-west-2a\", \"us-west-2b\"]\n}\nEOF\n\n# Use module in main configuration\ncat >> main.tf <<EOF\n\nmodule \"vpc\" {\n  source = \"./modules/vpc\"\n  \n  vpc_cidr           = \"10.0.0.0/16\"\n  environment        = var.environment\n  availability_zones = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]\n}\nEOF\n```\n\n### Variable Files and Environments\n```bash\n# Create environment-specific variable files\ncat > environments/production.tfvars <<EOF\nenvironment = \"production\"\ninstance_type = \"t3.large\"\nmin_size = 3\nmax_size = 10\nEOF\n\ncat > environments/staging.tfvars <<EOF\nenvironment = \"staging\"\ninstance_type = \"t3.small\"\nmin_size = 1\nmax_size = 3\nEOF\n\n# Apply with specific variables\nterraform apply -var-file=\"environments/production.tfvars\"\n```\n\n## Verification\n\n```bash\n# Check Terraform version\nterraform version\n\n# Validate configuration\nterraform validate\n\n# Check formatting\nterraform fmt -check\n\n# Plan with detailed output\nterraform plan -detailed-exitcode\n\n# Show current state\nterraform show\n\n# Check providers\nterraform providers\n\n# Verify remote state\nterraform state pull\n\n# Check for configuration drift\nterraform plan -refresh-only\n```\n\n## Best Practices\n\n### Project Structure\n```bash\n# Recommended directory structure\nmkdir -p terraform-project/{\nenvironments,\nmodules,\n.terraform,\nscripts\n}\n\n# Create .gitignore\ncat > .gitignore <<EOF\n# Terraform files\n*.tfstate\n*.tfstate.*\n.terraform/\n.terraform.lock.hcl\ncrash.log\noverride.tf\noverride.tf.json\n*_override.tf\n*_override.tf.json\n\n# Environment files\n*.tfvars\n.env\n\n# IDE files\n.vscode/\n.idea/\nEOF\n```\n\n### Security Practices\n```bash\n# Use environment variables for sensitive data\nexport TF_VAR_db_password=\"your-secure-password\"\nexport TF_VAR_api_key=\"your-api-key\"\n\n# In terraform configuration:\nvariable \"db_password\" {\n  description = \"Database password\"\n  type        = string\n  sensitive   = true\n}\n\n# Use data sources for existing resources\ndata \"aws_ami\" \"ubuntu\" {\n  most_recent = true\n  owners      = [\"099720109477\"] # Canonical\n\n  filter {\n    name   = \"name\"\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*\"]\n  }\n}\n\n# Tag everything consistently\nlocals {\n  common_tags = {\n    Environment = var.environment\n    Project     = \"infrastructure\"\n    ManagedBy   = \"terraform\"\n    Owner       = \"devops-team\"\n  }\n}\n\nresource \"aws_instance\" \"web\" {\n  # ... other configuration\n  tags = local.common_tags\n}\n```\n\n## Troubleshooting\n\n```bash\n# Debug with detailed logging\nexport TF_LOG=DEBUG\nexport TF_LOG_PATH=\"terraform.log\"\nterraform plan\n\n# Check provider configuration\nterraform providers schema -json\n\n# Inspect state file\nterraform state show aws_instance.web\n\n# Refresh state from real infrastructure\nterraform refresh\n\n# Force unlock state (if locked)\nterraform force-unlock LOCK_ID\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Check for unused variables\nterraform validate\n\n# Fix state inconsistencies\nterraform apply -refresh-only -auto-approve\n```\n\n## Integration with CI/CD\n\n### GitHub Actions\n```bash\n# Create .github/workflows/terraform.yml\nmkdir -p .github/workflows\ncat > .github/workflows/terraform.yml <<EOF\nname: Terraform\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v2\n      with:\n        terraform_version: 1.5.7\n    \n    - name: Terraform Format\n      run: terraform fmt -check\n    \n    - name: Terraform Init\n      run: terraform init\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n    \n    - name: Terraform Plan\n      run: terraform plan\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Apply\n      if: github.ref == 'refs/heads/main' && github.event_name == 'push'\n      run: terraform apply -auto-approve\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\nEOF\n```\n\n### GitLab CI\n```bash\n# Create .gitlab-ci.yml\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - validate\n  - plan\n  - apply\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_IN_AUTOMATION: \"true\"\n\ncache:\n  key: \"\\${TF_ROOT}\"\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform --version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform validate\n    - terraform fmt -check\n  rules:\n    - if: '\\$CI_MERGE_REQUEST_IID'\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\nplan:\n  stage: plan\n  script:\n    - terraform plan -out=\"planfile\"\n  artifacts:\n    paths:\n      - planfile\n  rules:\n    - if: '\\$CI_MERGE_REQUEST_IID'\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\napply:\n  stage: apply\n  script:\n    - terraform apply -input=false \"planfile\"\n  dependencies:\n    - plan\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n      when: manual\nEOF\n```\n\n## Common Patterns\n\n### Multi-Environment Setup\n```bash\n# Create environment-specific configurations\nmkdir -p environments/{dev,staging,prod}\n\n# environments/dev/main.tf\ncat > environments/dev/main.tf <<EOF\nmodule \"infrastructure\" {\n  source = \"../../modules/infrastructure\"\n  \n  environment     = \"development\"\n  instance_type   = \"t3.micro\"\n  min_size       = 1\n  max_size       = 2\n  db_instance_class = \"db.t3.micro\"\n}\nEOF\n\n# Apply for specific environment\ncd environments/dev\nterraform init\nterraform plan\nterraform apply\n```\n\n## Additional Resources\n\n- [Official Documentation](https://developer.hashicorp.com/terraform/docs)\n- [Terraform Registry](https://registry.terraform.io/)\n- [AWS Provider Documentation](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Best Practices Guide](https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html)\n- [Terraform Examples](https://github.com/hashicorp/terraform-provider-aws/tree/main/examples)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"terraform-installation-guide\" class=\"mobile-header\">Terraform Installation Guide</h1>\n<p class=\"mobile-paragraph\">Infrastructure as Code (IaC) tool for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Cloud provider account (AWS, Azure, GCP, etc.)</li>\n<li class=\"mobile-list-item\">Basic understanding of infrastructure concepts</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho &quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y terraform</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-installation\" class=\"mobile-header\">Manual Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest version\nTERRAFORM_VERSION=&quot;1.5.7&quot;\ncd /tmp\nwget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\nsudo chmod +x /usr/local/bin/terraform\n\n# Clean up\nrm terraform_${TERRAFORM_VERSION}_linux_amd64.zip</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create alias for Docker-based Terraform\necho &#039;alias terraform=&quot;docker run --rm -it -v $(pwd):/workspace -w /workspace hashicorp/terraform:latest&quot;&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Or create wrapper script\nsudo tee /usr/local/bin/terraform &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/workspace \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.config/gcloud:/root/.config/gcloud:ro \\\n  -w /workspace \\\n  hashicorp/terraform:latest &quot;$@&quot;\nEOF\nsudo chmod +x /usr/local/bin/terraform</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"aws-provider-setup\" class=\"mobile-header\">AWS Provider Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install AWS CLI\ncurl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot;\nunzip awscliv2.zip\nsudo ./aws/install\n\n# Configure AWS credentials\naws configure\n# AWS Access Key ID: YOUR_ACCESS_KEY\n# AWS Secret Access Key: YOUR_SECRET_KEY  \n# Default region name: us-west-2\n# Default output format: json\n\n# Create basic Terraform configuration\nmkdir -p ~/terraform/aws-infrastructure\ncd ~/terraform/aws-infrastructure\n\n# Create main.tf\ncat &gt; main.tf &lt;&lt;EOF\nterraform {\n  required_version = &quot;&gt;= 1.0&quot;\n  required_providers {\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n  }\n}\n\nprovider &quot;aws&quot; {\n  region = var.aws_region\n}\n\n# Variables\nvariable &quot;aws_region&quot; {\n  description = &quot;AWS region&quot;\n  type        = string\n  default     = &quot;us-west-2&quot;\n}\n\nvariable &quot;environment&quot; {\n  description = &quot;Environment name&quot;\n  type        = string\n  default     = &quot;development&quot;\n}\n\n# VPC\nresource &quot;aws_vpc&quot; &quot;main&quot; {\n  cidr_block           = &quot;10.0.0.0/16&quot;\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name        = &quot;\\${var.environment}-vpc&quot;\n    Environment = var.environment\n  }\n}\n\n# Internet Gateway\nresource &quot;aws_internet_gateway&quot; &quot;main&quot; {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name        = &quot;\\${var.environment}-igw&quot;\n    Environment = var.environment\n  }\n}\n\n# Public Subnet\nresource &quot;aws_subnet&quot; &quot;public&quot; {\n  count                   = 2\n  vpc_id                  = aws_vpc.main.id\n  cidr_block              = &quot;10.0.\\${count.index + 1}.0/24&quot;\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\n  map_public_ip_on_launch = true\n\n  tags = {\n    Name        = &quot;\\${var.environment}-public-subnet-\\${count.index + 1}&quot;\n    Environment = var.environment\n  }\n}\n\n# Data source for availability zones\ndata &quot;aws_availability_zones&quot; &quot;available&quot; {\n  state = &quot;available&quot;\n}\n\n# Route table\nresource &quot;aws_route_table&quot; &quot;public&quot; {\n  vpc_id = aws_vpc.main.id\n\n  route {\n    cidr_block = &quot;0.0.0.0/0&quot;\n    gateway_id = aws_internet_gateway.main.id\n  }\n\n  tags = {\n    Name        = &quot;\\${var.environment}-public-rt&quot;\n    Environment = var.environment\n  }\n}\n\n# Route table associations\nresource &quot;aws_route_table_association&quot; &quot;public&quot; {\n  count          = length(aws_subnet.public)\n  subnet_id      = aws_subnet.public[count.index].id\n  route_table_id = aws_route_table.public.id\n}\n\n# Security group\nresource &quot;aws_security_group&quot; &quot;web&quot; {\n  name_prefix = &quot;\\${var.environment}-web-&quot;\n  vpc_id      = aws_vpc.main.id\n\n  ingress {\n    from_port   = 80\n    to_port     = 80\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  ingress {\n    from_port   = 443\n    to_port     = 443\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  ingress {\n    from_port   = 22\n    to_port     = 22\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  tags = {\n    Name        = &quot;\\${var.environment}-web-sg&quot;\n    Environment = var.environment\n  }\n}\n\n# Outputs\noutput &quot;vpc_id&quot; {\n  value = aws_vpc.main.id\n}\n\noutput &quot;public_subnet_ids&quot; {\n  value = aws_subnet.public[*].id\n}\n\noutput &quot;security_group_id&quot; {\n  value = aws_security_group.web.id\n}\nEOF\n\n# Create terraform.tfvars\ncat &gt; terraform.tfvars &lt;&lt;EOF\naws_region  = &quot;us-west-2&quot;\nenvironment = &quot;production&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"azure-provider-setup\" class=\"mobile-header\">Azure Provider Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Azure CLI\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Login to Azure\naz login\n\n# Create service principal for Terraform\naz ad sp create-for-rbac --name &quot;terraform&quot; --role=&quot;Contributor&quot; --scopes=&quot;/subscriptions/YOUR_SUBSCRIPTION_ID&quot;\n\n# Set environment variables\nexport ARM_CLIENT_ID=&quot;your-client-id&quot;\nexport ARM_CLIENT_SECRET=&quot;your-client-secret&quot;  \nexport ARM_SUBSCRIPTION_ID=&quot;your-subscription-id&quot;\nexport ARM_TENANT_ID=&quot;your-tenant-id&quot;\n\n# Create Azure Terraform configuration\nmkdir -p ~/terraform/azure-infrastructure\ncd ~/terraform/azure-infrastructure\n\ncat &gt; main.tf &lt;&lt;EOF\nterraform {\n  required_providers {\n    azurerm = {\n      source  = &quot;hashicorp/azurerm&quot;\n      version = &quot;~&gt; 3.0&quot;\n    }\n  }\n}\n\nprovider &quot;azurerm&quot; {\n  features {}\n}\n\n# Resource Group\nresource &quot;azurerm_resource_group&quot; &quot;main&quot; {\n  name     = &quot;\\${var.environment}-rg&quot;\n  location = var.location\n  \n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Virtual Network\nresource &quot;azurerm_virtual_network&quot; &quot;main&quot; {\n  name                = &quot;\\${var.environment}-vnet&quot;\n  address_space       = [&quot;10.0.0.0/16&quot;]\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Subnet\nresource &quot;azurerm_subnet&quot; &quot;internal&quot; {\n  name                 = &quot;internal&quot;\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = [&quot;10.0.2.0/24&quot;]\n}\n\nvariable &quot;location&quot; {\n  description = &quot;Azure region&quot;\n  default     = &quot;East US&quot;\n}\n\nvariable &quot;environment&quot; {\n  description = &quot;Environment name&quot;\n  default     = &quot;development&quot;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"google-cloud-provider-setup\" class=\"mobile-header\">Google Cloud Provider Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Google Cloud SDK\necho &quot;deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main&quot; | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\nsudo apt-get update &amp;&amp; sudo apt-get install -y google-cloud-cli\n\n# Authenticate\ngcloud auth login\ngcloud config set project YOUR_PROJECT_ID\n\n# Create service account for Terraform\ngcloud iam service-accounts create terraform --display-name=&quot;Terraform Service Account&quot;\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID --member=&quot;serviceAccount:terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com&quot; --role=&quot;roles/editor&quot;\ngcloud iam service-accounts keys create ~/gcp-terraform-key.json --iam-account=terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\n\n# Set environment variable\nexport GOOGLE_APPLICATION_CREDENTIALS=&quot;$HOME/gcp-terraform-key.json&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"basic-usage\" class=\"mobile-header\">Basic Usage</h2>\n<h3 id=\"initialize-and-plan\" class=\"mobile-header\">Initialize and Plan</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize Terraform (run in project directory)\nterraform init\n\n# Format code\nterraform fmt\n\n# Validate configuration\nterraform validate\n\n# Plan changes\nterraform plan\n\n# Apply changes\nterraform apply\n\n# Show current state\nterraform show\n\n# List resources\nterraform state list\n\n# Destroy infrastructure\nterraform destroy</code></pre>\n      </div>\n    </div>\n<h3 id=\"state-management\" class=\"mobile-header\">State Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure remote state (S3 backend example)\ncat &gt; backend.tf &lt;&lt;EOF\nterraform {\n  backend &quot;s3&quot; {\n    bucket = &quot;your-terraform-state-bucket&quot;\n    key    = &quot;infrastructure/terraform.tfstate&quot;\n    region = &quot;us-west-2&quot;\n    \n    # Optional: DynamoDB table for state locking\n    dynamodb_table = &quot;terraform-state-lock&quot;\n    encrypt        = true\n  }\n}\nEOF\n\n# Initialize backend\nterraform init -migrate-state\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Move state resources\nterraform state mv aws_instance.example aws_instance.web_server</code></pre>\n      </div>\n    </div>\n<h3 id=\"workspace-management\" class=\"mobile-header\">Workspace Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create new workspace\nterraform workspace new production\nterraform workspace new staging\n\n# List workspaces\nterraform workspace list\n\n# Switch workspace\nterraform workspace select production\n\n# Show current workspace\nterraform workspace show</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"modules\" class=\"mobile-header\">Modules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create reusable module structure\nmkdir -p modules/vpc/{variables.tf,main.tf,outputs.tf}\n\n# modules/vpc/variables.tf\ncat &gt; modules/vpc/variables.tf &lt;&lt;EOF\nvariable &quot;vpc_cidr&quot; {\n  description = &quot;CIDR block for VPC&quot;\n  type        = string\n  default     = &quot;10.0.0.0/16&quot;\n}\n\nvariable &quot;environment&quot; {\n  description = &quot;Environment name&quot;\n  type        = string\n}\n\nvariable &quot;availability_zones&quot; {\n  description = &quot;List of availability zones&quot;\n  type        = list(string)\n  default     = [&quot;us-west-2a&quot;, &quot;us-west-2b&quot;]\n}\nEOF\n\n# Use module in main configuration\ncat &gt;&gt; main.tf &lt;&lt;EOF\n\nmodule &quot;vpc&quot; {\n  source = &quot;./modules/vpc&quot;\n  \n  vpc_cidr           = &quot;10.0.0.0/16&quot;\n  environment        = var.environment\n  availability_zones = [&quot;us-west-2a&quot;, &quot;us-west-2b&quot;, &quot;us-west-2c&quot;]\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"variable-files-and-environments\" class=\"mobile-header\">Variable Files and Environments</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create environment-specific variable files\ncat &gt; environments/production.tfvars &lt;&lt;EOF\nenvironment = &quot;production&quot;\ninstance_type = &quot;t3.large&quot;\nmin_size = 3\nmax_size = 10\nEOF\n\ncat &gt; environments/staging.tfvars &lt;&lt;EOF\nenvironment = &quot;staging&quot;\ninstance_type = &quot;t3.small&quot;\nmin_size = 1\nmax_size = 3\nEOF\n\n# Apply with specific variables\nterraform apply -var-file=&quot;environments/production.tfvars&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Terraform version\nterraform version\n\n# Validate configuration\nterraform validate\n\n# Check formatting\nterraform fmt -check\n\n# Plan with detailed output\nterraform plan -detailed-exitcode\n\n# Show current state\nterraform show\n\n# Check providers\nterraform providers\n\n# Verify remote state\nterraform state pull\n\n# Check for configuration drift\nterraform plan -refresh-only</code></pre>\n      </div>\n    </div>\n<h2 id=\"best-practices\" class=\"mobile-header\">Best Practices</h2>\n<h3 id=\"project-structure\" class=\"mobile-header\">Project Structure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Recommended directory structure\nmkdir -p terraform-project/{\nenvironments,\nmodules,\n.terraform,\nscripts\n}\n\n# Create .gitignore\ncat &gt; .gitignore &lt;&lt;EOF\n# Terraform files\n*.tfstate\n*.tfstate.*\n.terraform/\n.terraform.lock.hcl\ncrash.log\noverride.tf\noverride.tf.json\n*_override.tf\n*_override.tf.json\n\n# Environment files\n*.tfvars\n.env\n\n# IDE files\n.vscode/\n.idea/\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-practices\" class=\"mobile-header\">Security Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use environment variables for sensitive data\nexport TF_VAR_db_password=&quot;your-secure-password&quot;\nexport TF_VAR_api_key=&quot;your-api-key&quot;\n\n# In terraform configuration:\nvariable &quot;db_password&quot; {\n  description = &quot;Database password&quot;\n  type        = string\n  sensitive   = true\n}\n\n# Use data sources for existing resources\ndata &quot;aws_ami&quot; &quot;ubuntu&quot; {\n  most_recent = true\n  owners      = [&quot;099720109477&quot;] # Canonical\n\n  filter {\n    name   = &quot;name&quot;\n    values = [&quot;ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*&quot;]\n  }\n}\n\n# Tag everything consistently\nlocals {\n  common_tags = {\n    Environment = var.environment\n    Project     = &quot;infrastructure&quot;\n    ManagedBy   = &quot;terraform&quot;\n    Owner       = &quot;devops-team&quot;\n  }\n}\n\nresource &quot;aws_instance&quot; &quot;web&quot; {\n  # ... other configuration\n  tags = local.common_tags\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug with detailed logging\nexport TF_LOG=DEBUG\nexport TF_LOG_PATH=&quot;terraform.log&quot;\nterraform plan\n\n# Check provider configuration\nterraform providers schema -json\n\n# Inspect state file\nterraform state show aws_instance.web\n\n# Refresh state from real infrastructure\nterraform refresh\n\n# Force unlock state (if locked)\nterraform force-unlock LOCK_ID\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Check for unused variables\nterraform validate\n\n# Fix state inconsistencies\nterraform apply -refresh-only -auto-approve</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-with-cicd\" class=\"mobile-header\">Integration with CI/CD</h2>\n<h3 id=\"github-actions\" class=\"mobile-header\">GitHub Actions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create .github/workflows/terraform.yml\nmkdir -p .github/workflows\ncat &gt; .github/workflows/terraform.yml &lt;&lt;EOF\nname: Terraform\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v2\n      with:\n        terraform_version: 1.5.7\n    \n    - name: Terraform Format\n      run: terraform fmt -check\n    \n    - name: Terraform Init\n      run: terraform init\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n    \n    - name: Terraform Plan\n      run: terraform plan\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n    \n    - name: Terraform Apply\n      if: github.ref == &#039;refs/heads/main&#039; &amp;&amp; github.event_name == &#039;push&#039;\n      run: terraform apply -auto-approve\n      env:\n        AWS_ACCESS_KEY_ID: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci\" class=\"mobile-header\">GitLab CI</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create .gitlab-ci.yml\ncat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - validate\n  - plan\n  - apply\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_IN_AUTOMATION: &quot;true&quot;\n\ncache:\n  key: &quot;\\${TF_ROOT}&quot;\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform --version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform validate\n    - terraform fmt -check\n  rules:\n    - if: &#039;\\$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\nplan:\n  stage: plan\n  script:\n    - terraform plan -out=&quot;planfile&quot;\n  artifacts:\n    paths:\n      - planfile\n  rules:\n    - if: &#039;\\$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\napply:\n  stage: apply\n  script:\n    - terraform apply -input=false &quot;planfile&quot;\n  dependencies:\n    - plan\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n      when: manual\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"common-patterns\" class=\"mobile-header\">Common Patterns</h2>\n<h3 id=\"multi-environment-setup\" class=\"mobile-header\">Multi-Environment Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create environment-specific configurations\nmkdir -p environments/{dev,staging,prod}\n\n# environments/dev/main.tf\ncat &gt; environments/dev/main.tf &lt;&lt;EOF\nmodule &quot;infrastructure&quot; {\n  source = &quot;../../modules/infrastructure&quot;\n  \n  environment     = &quot;development&quot;\n  instance_type   = &quot;t3.micro&quot;\n  min_size       = 1\n  max_size       = 2\n  db_instance_class = &quot;db.t3.micro&quot;\n}\nEOF\n\n# Apply for specific environment\ncd environments/dev\nterraform init\nterraform plan\nterraform apply</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Registry</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">AWS Provider Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.terraform.io/docs/cloud/guides/recommended-practices/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/hashicorp/terraform-provider-aws/tree/main/examples\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Examples</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"9 min","wordCount":1776,"lastBuilt":"2025-09-14T01:30:39.026Z"},{"name":"traefik","displayName":"Traefik","slug":"traefik","description":"Repo for traefik","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/traefik","updatedAt":"2025-09-08T03:17:15Z","createdAt":"2025-09-08T03:17:04Z","readmeRaw":"## 👋 Welcome to traefik 🚀  \n\ntraefik README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-traefik\" class=\"mobile-header\">👋 Welcome to traefik 🚀  </h2>\n<p class=\"mobile-paragraph\">traefik README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:38.870Z"},{"name":"transmission","displayName":"Transmission","slug":"transmission","description":"Repo for transmission","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/transmission","updatedAt":"2025-09-08T03:17:27Z","createdAt":"2025-09-08T03:17:17Z","readmeRaw":"## 👋 Welcome to transmission 🚀  \n\ntransmission README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-transmission\" class=\"mobile-header\">👋 Welcome to transmission 🚀  </h2>\n<p class=\"mobile-paragraph\">transmission README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:38.723Z"},{"name":"truenas-scale","displayName":"Truenas Scale","slug":"truenas-scale","description":"Repo for truenas-scale","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/truenas-scale","updatedAt":"2025-09-08T03:17:40Z","createdAt":"2025-09-08T03:17:30Z","readmeRaw":"## 👋 Welcome to truenas-scale 🚀  \n\ntruenas-scale README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-truenas-scale\" class=\"mobile-header\">👋 Welcome to truenas-scale 🚀  </h2>\n<p class=\"mobile-paragraph\">truenas-scale README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:38.584Z"},{"name":"unifi-controller","displayName":"Unifi Controller","slug":"unifi-controller","description":"Repo for unifi-controller","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/unifi-controller","updatedAt":"2025-09-08T03:17:53Z","createdAt":"2025-09-08T03:17:43Z","readmeRaw":"## 👋 Welcome to unifi-controller 🚀  \n\nunifi-controller README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-unifi-controller\" class=\"mobile-header\">👋 Welcome to unifi-controller 🚀  </h2>\n<p class=\"mobile-paragraph\">unifi-controller README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:38.439Z"},{"name":"vault","displayName":"Vault","slug":"vault","description":"Repo for vault","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/vault","updatedAt":"2025-09-08T03:18:05Z","createdAt":"2025-09-08T03:17:55Z","readmeRaw":"# HashiCorp Vault Installation Guide\n\nSecrets management platform for securely storing and accessing API keys, passwords, certificates, and other sensitive data.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Root or sudo access\n- 2GB RAM minimum, 4GB recommended\n- Persistent storage for Vault data\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y vault\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Vault\nsudo yum install -y vault\n```\n\n### Manual Binary Installation\n```bash\n# Download latest Vault\nVAULT_VERSION=\"1.14.1\"\ncd /tmp\nwget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip vault_${VAULT_VERSION}_linux_amd64.zip\nsudo mv vault /usr/local/bin/\nsudo chmod +x /usr/local/bin/vault\n\n# Create vault user\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\n```\n\n### Using Docker\n```bash\n# Create directories for persistent data\nmkdir -p ~/vault/{data,config,logs}\n\n# Create basic configuration\ncat > ~/vault/config/vault.hcl <<EOF\nui = true\ndisable_mlock = true\n\nstorage \"file\" {\n  path = \"/vault/data\"\n}\n\nlistener \"tcp\" {\n  address     = \"0.0.0.0:8200\"\n  tls_disable = true\n}\n\napi_addr = \"http://0.0.0.0:8200\"\ncluster_addr = \"https://0.0.0.0:8201\"\nEOF\n\n# Run Vault container\ndocker run -d \\\n  --name vault \\\n  --restart unless-stopped \\\n  -p 8200:8200 \\\n  -v ~/vault/data:/vault/data \\\n  -v ~/vault/config:/vault/config \\\n  -v ~/vault/logs:/vault/logs \\\n  --cap-add=IPC_LOCK \\\n  vault:latest server -config=/vault/config/vault.hcl\n```\n\n## Configuration\n\n### Basic Configuration File\n```bash\n# Create Vault configuration directory\nsudo mkdir -p /etc/vault.d\nsudo chown -R vault:vault /etc/vault.d\n\n# Create main configuration\nsudo tee /etc/vault.d/vault.hcl > /dev/null <<EOF\n# Full configuration options: https://www.vaultproject.io/docs/configuration\n\nui = true\ndisable_mlock = true\n\n# Storage backend\nstorage \"file\" {\n  path = \"/opt/vault/data\"\n}\n\n# HTTPS listener\nlistener \"tcp\" {\n  address       = \"0.0.0.0:8200\"\n  tls_cert_file = \"/opt/vault/tls/tls.crt\"\n  tls_key_file  = \"/opt/vault/tls/tls.key\"\n}\n\n# HTTP listener (disable in production)\nlistener \"tcp\" {\n  address     = \"127.0.0.1:8201\"\n  tls_disable = true\n}\n\n# Enterprise license (if applicable)\n# license_path = \"/etc/vault.d/vault.hclic\"\n\n# API address\napi_addr = \"https://127.0.0.1:8200\"\n\n# Cluster address  \ncluster_addr = \"https://127.0.0.1:8201\"\n\n# Logging\nlog_level = \"INFO\"\nlog_file  = \"/var/log/vault/vault.log\"\nEOF\n\n# Create data directory\nsudo mkdir -p /opt/vault/{data,tls}\nsudo chown -R vault:vault /opt/vault\n\n# Create log directory\nsudo mkdir -p /var/log/vault\nsudo chown vault:vault /var/log/vault\n```\n\n### SSL/TLS Certificate Setup\n```bash\n# Generate self-signed certificate for development\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout /opt/vault/tls/tls.key \\\n  -out /opt/vault/tls/tls.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=vault.example.com\"\n\nsudo chown vault:vault /opt/vault/tls/*\nsudo chmod 600 /opt/vault/tls/tls.key\nsudo chmod 644 /opt/vault/tls/tls.crt\n\n# For production, use Let's Encrypt\nsudo apt install -y certbot\nsudo certbot certonly --standalone -d vault.example.com\nsudo cp /etc/letsencrypt/live/vault.example.com/fullchain.pem /opt/vault/tls/tls.crt\nsudo cp /etc/letsencrypt/live/vault.example.com/privkey.pem /opt/vault/tls/tls.key\nsudo chown vault:vault /opt/vault/tls/*\n```\n\n### SystemD Service\n```bash\n# Create systemd service\nsudo tee /etc/systemd/system/vault.service > /dev/null <<EOF\n[Unit]\nDescription=\"HashiCorp Vault - A tool for managing secrets\"\nDocumentation=https://www.vaultproject.io/docs/\nRequires=network-online.target\nAfter=network-online.target\nConditionFileNotEmpty=/etc/vault.d/vault.hcl\nStartLimitIntervalSec=60\nStartLimitBurst=3\n\n[Service]\nType=notify\nUser=vault\nGroup=vault\nProtectSystem=full\nProtectHome=read-only\nPrivateTmp=yes\nPrivateDevices=yes\nSecureBits=keep-caps\nAmbientCapabilities=CAP_IPC_LOCK\nCapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK\nNoNewPrivileges=yes\nExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl\nExecReload=/bin/kill --signal HUP $MAINPID\nKillMode=process\nRestart=on-failure\nRestartSec=5\nTimeoutStopSec=30\nStartLimitInterval=60\nStartLimitBurst=3\nLimitNOFILE=65536\nLimitMEMLOCK=infinity\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start Vault\nsudo systemctl daemon-reload\nsudo systemctl enable --now vault\n```\n\n## Initial Setup and Unsealing\n\n```bash\n# Initialize Vault (one-time setup)\nexport VAULT_ADDR='http://127.0.0.1:8200'\nvault operator init\n\n# Save the unseal keys and root token securely!\n# Example output:\n# Unseal Key 1: key1...\n# Unseal Key 2: key2...\n# Unseal Key 3: key3...\n# Initial Root Token: hvs.token...\n\n# Unseal Vault (required after every restart)\nvault operator unseal KEY1\nvault operator unseal KEY2  \nvault operator unseal KEY3\n\n# Login with root token\nvault auth ROOT_TOKEN\n\n# Check status\nvault status\n```\n\n## Basic Usage\n\n### Authentication Methods\n```bash\n# Enable userpass authentication\nvault auth enable userpass\n\n# Create user\nvault write auth/userpass/users/admin password=secure_password policies=admin\n\n# Enable GitHub authentication\nvault auth enable github\nvault write auth/github/config organization=your-org\n\n# Login with different methods\nvault auth -method=userpass username=admin\nvault auth -method=github token=github_token\n```\n\n### Secrets Management\n```bash\n# Enable KV secrets engine\nvault secrets enable -version=2 kv\n\n# Store secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=secure_password \\\n  api_key=abc123\n\n# Read secrets\nvault kv get secret/myapp/config\nvault kv get -field=password secret/myapp/config\n\n# Update secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=new_password \\\n  api_key=def456\n\n# Delete secrets\nvault kv delete secret/myapp/config\n\n# List secrets\nvault kv list secret/\n```\n\n### Policies\n```bash\n# Create policy file\ncat > admin-policy.hcl <<EOF\n# Admin policy\npath \"*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\nEOF\n\n# Apply policy\nvault policy write admin admin-policy.hcl\n\n# Create read-only policy\ncat > readonly-policy.hcl <<EOF\n# Read-only access to secrets\npath \"secret/data/*\" {\n  capabilities = [\"read\", \"list\"]\n}\nEOF\n\nvault policy write readonly readonly-policy.hcl\n\n# List policies\nvault policy list\nvault policy read admin\n```\n\n### Database Secrets Engine\n```bash\n# Enable database secrets engine\nvault secrets enable database\n\n# Configure MySQL connection\nvault write database/config/mysql \\\n  plugin_name=mysql-database-plugin \\\n  connection_url=\"{{username}}:{{password}}@tcp(mysql.example.com:3306)/\" \\\n  allowed_roles=\"mysql-role\" \\\n  username=\"vault\" \\\n  password=\"vault-password\"\n\n# Create role for dynamic credentials\nvault write database/roles/mysql-role \\\n  db_name=mysql \\\n  creation_statements=\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';GRANT SELECT ON *.* TO '{{name}}'@'%';\" \\\n  default_ttl=\"1h\" \\\n  max_ttl=\"24h\"\n\n# Generate dynamic credentials\nvault read database/creds/mysql-role\n```\n\n## High Availability Setup\n\n### Consul Backend\n```bash\n# Install Consul\nsudo apt install -y consul\n\n# Configure Vault with Consul backend\nsudo tee /etc/vault.d/vault-ha.hcl > /dev/null <<EOF\nui = true\ndisable_mlock = true\n\nstorage \"consul\" {\n  address = \"127.0.0.1:8500\"\n  path    = \"vault/\"\n}\n\nlistener \"tcp\" {\n  address     = \"0.0.0.0:8200\"\n  tls_cert_file = \"/opt/vault/tls/tls.crt\"\n  tls_key_file  = \"/opt/vault/tls/tls.key\"\n}\n\napi_addr = \"https://vault-1.example.com:8200\"\ncluster_addr = \"https://vault-1.example.com:8201\"\nEOF\n```\n\n## Backup and Recovery\n\n```bash\n# Create backup script\nsudo tee /usr/local/bin/vault-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/vault\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create snapshot (Enterprise feature)\n# vault operator raft snapshot save ${BACKUP_DIR}/vault-snapshot-${DATE}.snap\n\n# For OSS version, backup storage backend data\nif [ -d \"/opt/vault/data\" ]; then\n    tar -czf ${BACKUP_DIR}/vault-data-${DATE}.tar.gz -C /opt/vault data\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"vault-*-*.tar.gz\" -type f -mtime +7 -delete\n\necho \"Backup completed: vault-data-${DATE}.tar.gz\"\nEOF\n\nsudo chmod +x /usr/local/bin/vault-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/vault-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Firewall Configuration\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 8200/tcp   # Vault API\nsudo ufw allow 8201/tcp   # Vault cluster communication\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=8200/tcp\nsudo firewall-cmd --permanent --add-port=8201/tcp\nsudo firewall-cmd --reload\n```\n\n## Verification\n\n```bash\n# Check Vault status\nvault status\n\n# Check systemd service\nsudo systemctl status vault\n\n# Test API connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health | jq\n\n# Check authentication methods\nvault auth list\n\n# Check secrets engines\nvault secrets list\n\n# Check policies\nvault policy list\n\n# Check audit devices\nvault audit list\n\n# View server logs\nsudo journalctl -u vault -f\n\n# Check seal status\nvault operator key-status\n```\n\n## Security Best Practices\n\n```bash\n# Enable audit logging\nvault audit enable file file_path=/var/log/vault/audit.log\n\n# Create separate policies for different roles\ncat > developer-policy.hcl <<EOF\n# Developers can read/write to dev secrets\npath \"secret/data/dev/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\n\n# Read-only access to shared secrets\npath \"secret/data/shared/*\" {\n  capabilities = [\"read\", \"list\"]\n}\nEOF\n\nvault policy write developer developer-policy.hcl\n\n# Set up auto-unseal with cloud KMS (production)\n# AWS KMS example\nvault write sys/config/seal/awskms \\\n  region=\"us-west-2\" \\\n  access_key=\"YOUR_ACCESS_KEY\" \\\n  secret_key=\"YOUR_SECRET_KEY\" \\\n  kms_key_id=\"alias/vault-unseal-key\"\n\n# Enable periodic token renewal\nvault write auth/token/roles/auto-renew \\\n  allowed_policies=\"developer\" \\\n  orphan=true \\\n  period=\"24h\" \\\n  renewable=true\n```\n\n## Integration Examples\n\n### Application Integration\n```bash\n# Using Vault Agent for automatic authentication\ncat > /etc/vault-agent.hcl <<EOF\nexit_after_auth = false\npid_file = \"./pidfile\"\n\nauto_auth {\n  method \"aws\" {\n    mount_path = \"auth/aws\"\n    config = {\n      type = \"iam\"\n      role = \"vault-role\"\n    }\n  }\n\n  sink \"file\" {\n    config = {\n      path = \"/tmp/vault-token-via-agent\"\n    }\n  }\n}\n\ncache {\n  use_auto_auth_token = true\n}\n\nlistener \"tcp\" {\n  address = \"127.0.0.1:8100\"\n  tls_disable = true\n}\n\ntemplate {\n  source      = \"/opt/vault/templates/config.json.tpl\"\n  destination = \"/opt/app/config.json\"\n  perms       = 0640\n  command     = \"systemctl reload myapp\"\n}\nEOF\n\n# Start Vault Agent\nvault agent -config=/etc/vault-agent.hcl\n```\n\n### Kubernetes Integration\n```bash\n# Enable Kubernetes auth method\nvault auth enable kubernetes\n\n# Configure Kubernetes auth\nvault write auth/kubernetes/config \\\n  token_reviewer_jwt=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\n  kubernetes_host=https://${KUBERNETES_PORT_443_TCP_ADDR}:443 \\\n  kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\n# Create role for Kubernetes service accounts\nvault write auth/kubernetes/role/myapp \\\n  bound_service_account_names=vault \\\n  bound_service_account_namespaces=default \\\n  policies=myapp-policy \\\n  ttl=24h\n```\n\n## Troubleshooting\n\n```bash\n# Check Vault logs\nsudo journalctl -u vault -f\n\n# Debug mode\nsudo systemctl stop vault\nsudo -u vault vault server -config=/etc/vault.d/vault.hcl -log-level=debug\n\n# Check seal status\nvault operator key-status\n\n# Check storage backend\nvault operator raft list-peers  # For raft storage\nconsul kv get -recurse vault/   # For consul storage\n\n# Test connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health\n\n# Check performance\nvault operator usage\n\n# Rotate encryption key\nvault operator rotate\n\n# Check configuration\nvault operator diagnose -config=/etc/vault.d/vault.hcl\n```\n\n## Additional Resources\n\n- [Official Documentation](https://www.vaultproject.io/docs)\n- [API Documentation](https://www.vaultproject.io/api-docs)\n- [Best Practices](https://learn.hashicorp.com/tutorials/vault/production-hardening)\n- [Vault Guides](https://learn.hashicorp.com/vault)\n- [Community Forum](https://discuss.hashicorp.com/c/vault)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"hashicorp-vault-installation-guide\" class=\"mobile-header\">HashiCorp Vault Installation Guide</h1>\n<p class=\"mobile-paragraph\">Secrets management platform for securely storing and accessing API keys, passwords, certificates, and other sensitive data.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB recommended</li>\n<li class=\"mobile-list-item\">Persistent storage for Vault data</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho &quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y vault</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Vault\nsudo yum install -y vault</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-binary-installation\" class=\"mobile-header\">Manual Binary Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest Vault\nVAULT_VERSION=&quot;1.14.1&quot;\ncd /tmp\nwget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip vault_${VAULT_VERSION}_linux_amd64.zip\nsudo mv vault /usr/local/bin/\nsudo chmod +x /usr/local/bin/vault\n\n# Create vault user\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create directories for persistent data\nmkdir -p ~/vault/{data,config,logs}\n\n# Create basic configuration\ncat &gt; ~/vault/config/vault.hcl &lt;&lt;EOF\nui = true\ndisable_mlock = true\n\nstorage &quot;file&quot; {\n  path = &quot;/vault/data&quot;\n}\n\nlistener &quot;tcp&quot; {\n  address     = &quot;0.0.0.0:8200&quot;\n  tls_disable = true\n}\n\napi_addr = &quot;http://0.0.0.0:8200&quot;\ncluster_addr = &quot;https://0.0.0.0:8201&quot;\nEOF\n\n# Run Vault container\ndocker run -d \\\n  --name vault \\\n  --restart unless-stopped \\\n  -p 8200:8200 \\\n  -v ~/vault/data:/vault/data \\\n  -v ~/vault/config:/vault/config \\\n  -v ~/vault/logs:/vault/logs \\\n  --cap-add=IPC_LOCK \\\n  vault:latest server -config=/vault/config/vault.hcl</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration-file\" class=\"mobile-header\">Basic Configuration File</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Vault configuration directory\nsudo mkdir -p /etc/vault.d\nsudo chown -R vault:vault /etc/vault.d\n\n# Create main configuration\nsudo tee /etc/vault.d/vault.hcl &gt; /dev/null &lt;&lt;EOF\n# Full configuration options: https://www.vaultproject.io/docs/configuration\n\nui = true\ndisable_mlock = true\n\n# Storage backend\nstorage &quot;file&quot; {\n  path = &quot;/opt/vault/data&quot;\n}\n\n# HTTPS listener\nlistener &quot;tcp&quot; {\n  address       = &quot;0.0.0.0:8200&quot;\n  tls_cert_file = &quot;/opt/vault/tls/tls.crt&quot;\n  tls_key_file  = &quot;/opt/vault/tls/tls.key&quot;\n}\n\n# HTTP listener (disable in production)\nlistener &quot;tcp&quot; {\n  address     = &quot;127.0.0.1:8201&quot;\n  tls_disable = true\n}\n\n# Enterprise license (if applicable)\n# license_path = &quot;/etc/vault.d/vault.hclic&quot;\n\n# API address\napi_addr = &quot;https://127.0.0.1:8200&quot;\n\n# Cluster address  \ncluster_addr = &quot;https://127.0.0.1:8201&quot;\n\n# Logging\nlog_level = &quot;INFO&quot;\nlog_file  = &quot;/var/log/vault/vault.log&quot;\nEOF\n\n# Create data directory\nsudo mkdir -p /opt/vault/{data,tls}\nsudo chown -R vault:vault /opt/vault\n\n# Create log directory\nsudo mkdir -p /var/log/vault\nsudo chown vault:vault /var/log/vault</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-certificate-setup\" class=\"mobile-header\">SSL/TLS Certificate Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate for development\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout /opt/vault/tls/tls.key \\\n  -out /opt/vault/tls/tls.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=vault.example.com&quot;\n\nsudo chown vault:vault /opt/vault/tls/*\nsudo chmod 600 /opt/vault/tls/tls.key\nsudo chmod 644 /opt/vault/tls/tls.crt\n\n# For production, use Let&#039;s Encrypt\nsudo apt install -y certbot\nsudo certbot certonly --standalone -d vault.example.com\nsudo cp /etc/letsencrypt/live/vault.example.com/fullchain.pem /opt/vault/tls/tls.crt\nsudo cp /etc/letsencrypt/live/vault.example.com/privkey.pem /opt/vault/tls/tls.key\nsudo chown vault:vault /opt/vault/tls/*</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service\" class=\"mobile-header\">SystemD Service</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service\nsudo tee /etc/systemd/system/vault.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=&quot;HashiCorp Vault - A tool for managing secrets&quot;\nDocumentation=https://www.vaultproject.io/docs/\nRequires=network-online.target\nAfter=network-online.target\nConditionFileNotEmpty=/etc/vault.d/vault.hcl\nStartLimitIntervalSec=60\nStartLimitBurst=3\n\n[Service]\nType=notify\nUser=vault\nGroup=vault\nProtectSystem=full\nProtectHome=read-only\nPrivateTmp=yes\nPrivateDevices=yes\nSecureBits=keep-caps\nAmbientCapabilities=CAP_IPC_LOCK\nCapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK\nNoNewPrivileges=yes\nExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl\nExecReload=/bin/kill --signal HUP $MAINPID\nKillMode=process\nRestart=on-failure\nRestartSec=5\nTimeoutStopSec=30\nStartLimitInterval=60\nStartLimitBurst=3\nLimitNOFILE=65536\nLimitMEMLOCK=infinity\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start Vault\nsudo systemctl daemon-reload\nsudo systemctl enable --now vault</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-setup-and-unsealing\" class=\"mobile-header\">Initial Setup and Unsealing</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize Vault (one-time setup)\nexport VAULT_ADDR=&#039;http://127.0.0.1:8200&#039;\nvault operator init\n\n# Save the unseal keys and root token securely!\n# Example output:\n# Unseal Key 1: key1...\n# Unseal Key 2: key2...\n# Unseal Key 3: key3...\n# Initial Root Token: hvs.token...\n\n# Unseal Vault (required after every restart)\nvault operator unseal KEY1\nvault operator unseal KEY2  \nvault operator unseal KEY3\n\n# Login with root token\nvault auth ROOT_TOKEN\n\n# Check status\nvault status</code></pre>\n      </div>\n    </div>\n<h2 id=\"basic-usage\" class=\"mobile-header\">Basic Usage</h2>\n<h3 id=\"authentication-methods\" class=\"mobile-header\">Authentication Methods</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable userpass authentication\nvault auth enable userpass\n\n# Create user\nvault write auth/userpass/users/admin password=secure_password policies=admin\n\n# Enable GitHub authentication\nvault auth enable github\nvault write auth/github/config organization=your-org\n\n# Login with different methods\nvault auth -method=userpass username=admin\nvault auth -method=github token=github_token</code></pre>\n      </div>\n    </div>\n<h3 id=\"secrets-management\" class=\"mobile-header\">Secrets Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable KV secrets engine\nvault secrets enable -version=2 kv\n\n# Store secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=secure_password \\\n  api_key=abc123\n\n# Read secrets\nvault kv get secret/myapp/config\nvault kv get -field=password secret/myapp/config\n\n# Update secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=new_password \\\n  api_key=def456\n\n# Delete secrets\nvault kv delete secret/myapp/config\n\n# List secrets\nvault kv list secret/</code></pre>\n      </div>\n    </div>\n<h3 id=\"policies\" class=\"mobile-header\">Policies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create policy file\ncat &gt; admin-policy.hcl &lt;&lt;EOF\n# Admin policy\npath &quot;*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;, &quot;sudo&quot;]\n}\nEOF\n\n# Apply policy\nvault policy write admin admin-policy.hcl\n\n# Create read-only policy\ncat &gt; readonly-policy.hcl &lt;&lt;EOF\n# Read-only access to secrets\npath &quot;secret/data/*&quot; {\n  capabilities = [&quot;read&quot;, &quot;list&quot;]\n}\nEOF\n\nvault policy write readonly readonly-policy.hcl\n\n# List policies\nvault policy list\nvault policy read admin</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-secrets-engine\" class=\"mobile-header\">Database Secrets Engine</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable database secrets engine\nvault secrets enable database\n\n# Configure MySQL connection\nvault write database/config/mysql \\\n  plugin_name=mysql-database-plugin \\\n  connection_url=&quot;{{username}}:{{password}}@tcp(mysql.example.com:3306)/&quot; \\\n  allowed_roles=&quot;mysql-role&quot; \\\n  username=&quot;vault&quot; \\\n  password=&quot;vault-password&quot;\n\n# Create role for dynamic credentials\nvault write database/roles/mysql-role \\\n  db_name=mysql \\\n  creation_statements=&quot;CREATE USER &#039;{{name}}&#039;@&#039;%&#039; IDENTIFIED BY &#039;{{password}}&#039;;GRANT SELECT ON *.* TO &#039;{{name}}&#039;@&#039;%&#039;;&quot; \\\n  default_ttl=&quot;1h&quot; \\\n  max_ttl=&quot;24h&quot;\n\n# Generate dynamic credentials\nvault read database/creds/mysql-role</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h2>\n<h3 id=\"consul-backend\" class=\"mobile-header\">Consul Backend</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Consul\nsudo apt install -y consul\n\n# Configure Vault with Consul backend\nsudo tee /etc/vault.d/vault-ha.hcl &gt; /dev/null &lt;&lt;EOF\nui = true\ndisable_mlock = true\n\nstorage &quot;consul&quot; {\n  address = &quot;127.0.0.1:8500&quot;\n  path    = &quot;vault/&quot;\n}\n\nlistener &quot;tcp&quot; {\n  address     = &quot;0.0.0.0:8200&quot;\n  tls_cert_file = &quot;/opt/vault/tls/tls.crt&quot;\n  tls_key_file  = &quot;/opt/vault/tls/tls.key&quot;\n}\n\napi_addr = &quot;https://vault-1.example.com:8200&quot;\ncluster_addr = &quot;https://vault-1.example.com:8201&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-recovery\" class=\"mobile-header\">Backup and Recovery</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/vault-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/vault&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create snapshot (Enterprise feature)\n# vault operator raft snapshot save ${BACKUP_DIR}/vault-snapshot-${DATE}.snap\n\n# For OSS version, backup storage backend data\nif [ -d &quot;/opt/vault/data&quot; ]; then\n    tar -czf ${BACKUP_DIR}/vault-data-${DATE}.tar.gz -C /opt/vault data\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;vault-*-*.tar.gz&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: vault-data-${DATE}.tar.gz&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/vault-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/vault-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 8200/tcp   # Vault API\nsudo ufw allow 8201/tcp   # Vault cluster communication\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=8200/tcp\nsudo firewall-cmd --permanent --add-port=8201/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Vault status\nvault status\n\n# Check systemd service\nsudo systemctl status vault\n\n# Test API connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health | jq\n\n# Check authentication methods\nvault auth list\n\n# Check secrets engines\nvault secrets list\n\n# Check policies\nvault policy list\n\n# Check audit devices\nvault audit list\n\n# View server logs\nsudo journalctl -u vault -f\n\n# Check seal status\nvault operator key-status</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-best-practices\" class=\"mobile-header\">Security Best Practices</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable audit logging\nvault audit enable file file_path=/var/log/vault/audit.log\n\n# Create separate policies for different roles\ncat &gt; developer-policy.hcl &lt;&lt;EOF\n# Developers can read/write to dev secrets\npath &quot;secret/data/dev/*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;]\n}\n\n# Read-only access to shared secrets\npath &quot;secret/data/shared/*&quot; {\n  capabilities = [&quot;read&quot;, &quot;list&quot;]\n}\nEOF\n\nvault policy write developer developer-policy.hcl\n\n# Set up auto-unseal with cloud KMS (production)\n# AWS KMS example\nvault write sys/config/seal/awskms \\\n  region=&quot;us-west-2&quot; \\\n  access_key=&quot;YOUR_ACCESS_KEY&quot; \\\n  secret_key=&quot;YOUR_SECRET_KEY&quot; \\\n  kms_key_id=&quot;alias/vault-unseal-key&quot;\n\n# Enable periodic token renewal\nvault write auth/token/roles/auto-renew \\\n  allowed_policies=&quot;developer&quot; \\\n  orphan=true \\\n  period=&quot;24h&quot; \\\n  renewable=true</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"application-integration\" class=\"mobile-header\">Application Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Vault Agent for automatic authentication\ncat &gt; /etc/vault-agent.hcl &lt;&lt;EOF\nexit_after_auth = false\npid_file = &quot;./pidfile&quot;\n\nauto_auth {\n  method &quot;aws&quot; {\n    mount_path = &quot;auth/aws&quot;\n    config = {\n      type = &quot;iam&quot;\n      role = &quot;vault-role&quot;\n    }\n  }\n\n  sink &quot;file&quot; {\n    config = {\n      path = &quot;/tmp/vault-token-via-agent&quot;\n    }\n  }\n}\n\ncache {\n  use_auto_auth_token = true\n}\n\nlistener &quot;tcp&quot; {\n  address = &quot;127.0.0.1:8100&quot;\n  tls_disable = true\n}\n\ntemplate {\n  source      = &quot;/opt/vault/templates/config.json.tpl&quot;\n  destination = &quot;/opt/app/config.json&quot;\n  perms       = 0640\n  command     = &quot;systemctl reload myapp&quot;\n}\nEOF\n\n# Start Vault Agent\nvault agent -config=/etc/vault-agent.hcl</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-integration\" class=\"mobile-header\">Kubernetes Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Kubernetes auth method\nvault auth enable kubernetes\n\n# Configure Kubernetes auth\nvault write auth/kubernetes/config \\\n  token_reviewer_jwt=&quot;$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)&quot; \\\n  kubernetes_host=https://${KUBERNETES_PORT_443_TCP_ADDR}:443 \\\n  kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\n# Create role for Kubernetes service accounts\nvault write auth/kubernetes/role/myapp \\\n  bound_service_account_names=vault \\\n  bound_service_account_namespaces=default \\\n  policies=myapp-policy \\\n  ttl=24h</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Vault logs\nsudo journalctl -u vault -f\n\n# Debug mode\nsudo systemctl stop vault\nsudo -u vault vault server -config=/etc/vault.d/vault.hcl -log-level=debug\n\n# Check seal status\nvault operator key-status\n\n# Check storage backend\nvault operator raft list-peers  # For raft storage\nconsul kv get -recurse vault/   # For consul storage\n\n# Test connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health\n\n# Check performance\nvault operator usage\n\n# Rotate encryption key\nvault operator rotate\n\n# Check configuration\nvault operator diagnose -config=/etc/vault.d/vault.hcl</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.vaultproject.io/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.vaultproject.io/api-docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">API Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://learn.hashicorp.com/tutorials/vault/production-hardening\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://learn.hashicorp.com/vault\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Vault Guides</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discuss.hashicorp.com/c/vault\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"8 min","wordCount":1506,"lastBuilt":"2025-09-14T01:30:38.287Z"},{"name":"vscode-server","displayName":"Vscode Server","slug":"vscode-server","description":"Repo for vscode-server","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/vscode-server","updatedAt":"2025-09-08T03:18:10Z","createdAt":"2023-08-28T03:50:15Z","readmeRaw":"### VS-Code docker\n\n```shell\nsudo mkdir -p /var/lib/docker/storage/vscode/config\n\nsudo docker run -d \\\n  --name=code-server \\\n  -e PUID=0 \\\n  -e PGID=0 \\\n  -e TZ=America/New_York \\\n  -e PASSWORD=password \\\n  -e SUDO_PASSWORD=password \\\n  -e PROXY_DOMAIN=code-server.casjay.in \\\n  -p 8443:8443 \\\n  -v /var/lib/docker/storage/vscode/config:/config \\\n  --restart always \\\n  linuxserver/code-server\n```\n","readmeHtml":"<h3 id=\"vs-code-docker\" class=\"mobile-header\">VS-Code docker</h3>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">sudo mkdir -p /var/lib/docker/storage/vscode/config\n\nsudo docker run -d \\\n  --name=code-server \\\n  -e PUID=0 \\\n  -e PGID=0 \\\n  -e TZ=America/New_York \\\n  -e PASSWORD=password \\\n  -e SUDO_PASSWORD=password \\\n  -e PROXY_DOMAIN=code-server.casjay.in \\\n  -p 8443:8443 \\\n  -v /var/lib/docker/storage/vscode/config:/config \\\n  --restart always \\\n  linuxserver/code-server</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":45,"lastBuilt":"2025-09-14T01:30:38.077Z"},{"name":"webvirt","displayName":"Webvirt","slug":"webvirt","description":"Repo for webvirt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/webvirt","updatedAt":"2025-09-08T03:18:15Z","createdAt":"2023-08-28T03:50:25Z","readmeRaw":"# CentOS 7 WebVirt\n\n```bash\nyum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx\nyum -y install gcc python-devel\n\npip install --upgrade pip\npip install numpy\n\ngit clone git://github.com/retspen/webvirtmgr.git /usr/share/webvirtmgr\ncd /usr/share/webvirtmgr\npip install -r requirements.txt\n\n./manage.py syncdb\n./manage.py collectstatic\n\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt.supervisord.ini -O  /etc/supervisord.d/webvirtmgr.ini\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt-nginx.conf -O /etc/nginx/conf.d/webvirt.conf\n```\n","readmeHtml":"<h1 id=\"centos-7-webvirt\" class=\"mobile-header\">CentOS 7 WebVirt</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">yum -y install git python-pip libvirt-python libxml2-python python-websockify supervisor nginx\nyum -y install gcc python-devel\n\npip install --upgrade pip\npip install numpy\n\ngit clone git://github.com/retspen/webvirtmgr.git /usr/share/webvirtmgr\ncd /usr/share/webvirtmgr\npip install -r requirements.txt\n\n./manage.py syncdb\n./manage.py collectstatic\n\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt.supervisord.ini -O  /etc/supervisord.d/webvirtmgr.ini\nwget https://github.com/casjay-base/howtos/raw/main/webvirt/webvirt-nginx.conf -O /etc/nginx/conf.d/webvirt.conf</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":51,"lastBuilt":"2025-09-14T01:30:37.932Z"},{"name":"wireguard","displayName":"Wireguard","slug":"wireguard","description":"Repo for wireguard","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/wireguard","updatedAt":"2025-09-08T03:18:27Z","createdAt":"2025-09-08T03:18:17Z","readmeRaw":"## 👋 Welcome to wireguard 🚀  \n\nwireguard README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-wireguard\" class=\"mobile-header\">👋 Welcome to wireguard 🚀  </h2>\n<p class=\"mobile-paragraph\">wireguard README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:37.805Z"},{"name":"wordpress","displayName":"Wordpress","slug":"wordpress","description":"Repo for wordpress","category":"productivity","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/wordpress","updatedAt":"2025-09-08T03:18:39Z","createdAt":"2025-09-08T03:18:29Z","readmeRaw":"# WordPress Installation Guide\n\nPopular content management system (CMS) for creating websites, blogs, and web applications with a user-friendly interface.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Web server (Apache or NGINX)\n- PHP 7.4+ with required extensions\n- MySQL 5.7+ or PostgreSQL 9.6+\n- SSL certificate (recommended)\n\n## Installation\n\n### LAMP Stack Setup (Apache + MySQL + PHP)\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mysql-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now apache2 mysql  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb  # RHEL/CentOS\n```\n\n### LEMP Stack Setup (NGINX + MySQL + PHP)\n```bash\n# Ubuntu/Debian\nsudo apt update\nsudo apt install -y nginx mysql-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS  \nsudo yum install -y nginx mariadb-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now nginx mysql php7.4-fpm  # Ubuntu/Debian\nsudo systemctl enable --now nginx mariadb php-fpm   # RHEL/CentOS\n```\n\n### Database Setup\n```bash\n# Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create WordPress database\nsudo mysql -u root -p <<EOF\nCREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\nCREATE USER 'wordpressuser'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL ON wordpress.* TO 'wordpressuser'@'localhost';\nFLUSH PRIVILEGES;\nEXIT\nEOF\n```\n\n### WordPress Download and Setup\n```bash\n# Download WordPress\ncd /tmp\nwget https://wordpress.org/latest.tar.gz\ntar xzf latest.tar.gz\n\n# Create document root and copy files\nsudo mkdir -p /var/www/html/wordpress\nsudo cp -R /tmp/wordpress/* /var/www/html/wordpress/\nsudo chown -R www-data:www-data /var/www/html/wordpress  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/wordpress      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Create wp-config.php\ncd /var/www/html/wordpress\nsudo cp wp-config-sample.php wp-config.php\n\n# Generate salt keys\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/\n\n# Edit wp-config.php with database details and salt keys\nsudo nano wp-config.php\n```\n\n## Configuration\n\n### Apache Virtual Host\n```bash\n# Create Apache virtual host\nsudo tee /etc/apache2/sites-available/wordpress.conf > /dev/null <<EOF\n<VirtualHost *:80>\n    ServerName wordpress.example.com\n    ServerAlias www.wordpress.example.com\n    DocumentRoot /var/www/html/wordpress\n    \n    <Directory /var/www/html/wordpress/>\n        AllowOverride All\n        Options -Indexes +FollowSymLinks\n        Require all granted\n    </Directory>\n    \n    # Security headers\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"\n    \n    # Hide PHP version\n    Header always unset X-Powered-By\n    \n    # Disable server signature\n    ServerSignature Off\n    \n    ErrorLog \\${APACHE_LOG_DIR}/wordpress_error.log\n    CustomLog \\${APACHE_LOG_DIR}/wordpress_access.log combined\n</VirtualHost>\nEOF\n\n# Enable modules and site\nsudo a2enmod rewrite headers ssl\nsudo a2ensite wordpress.conf\nsudo systemctl restart apache2\n```\n\n### NGINX Configuration\n```bash\n# Create NGINX server block\nsudo tee /etc/nginx/sites-available/wordpress > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name wordpress.example.com www.wordpress.example.com;\n    root /var/www/html/wordpress;\n    index index.php index.html index.htm;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n\n    # Hide nginx version\n    server_tokens off;\n\n    # WordPress specific rules\n    location / {\n        try_files \\$uri \\$uri/ /index.php?\\$args;\n    }\n\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Adjust PHP version\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n    }\n\n    # Security rules\n    location ~* /(?:uploads|files)/.*\\.php\\$ {\n        deny all;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)\\$ {\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n\n    # Deny access to sensitive files\n    location ~* \\.(htaccess|htpasswd|ini|log|sh|inc|bak)\\$ {\n        deny all;\n    }\n\n    # WordPress: deny wp-config.php access\n    location ~* wp-config\\.php {\n        deny all;\n    }\n\n    # WordPress: deny general stuff\n    location ~* ^/(\\.user.ini|php.ini|\\..*)$ {\n        deny all;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### WordPress Configuration (wp-config.php)\n```bash\n# Create secure wp-config.php\nsudo tee /var/www/html/wordpress/wp-config.php > /dev/null <<'EOF'\n<?php\n// Database settings\ndefine('DB_NAME', 'wordpress');\ndefine('DB_USER', 'wordpressuser');\ndefine('DB_PASSWORD', 'secure_password');\ndefine('DB_HOST', 'localhost');\ndefine('DB_CHARSET', 'utf8mb4');\ndefine('DB_COLLATE', '');\n\n// Authentication Unique Keys and Salts\n// Generate these at: https://api.wordpress.org/secret-key/1.1/salt/\ndefine('AUTH_KEY',         'put your unique phrase here');\ndefine('SECURE_AUTH_KEY',  'put your unique phrase here');\ndefine('LOGGED_IN_KEY',    'put your unique phrase here');\ndefine('NONCE_KEY',        'put your unique phrase here');\ndefine('AUTH_SALT',        'put your unique phrase here');\ndefine('SECURE_AUTH_SALT', 'put your unique phrase here');\ndefine('LOGGED_IN_SALT',   'put your unique phrase here');\ndefine('NONCE_SALT',       'put your unique phrase here');\n\n// WordPress Database Table prefix\n$table_prefix = 'wp_';\n\n// WordPress debug mode (disable in production)\ndefine('WP_DEBUG', false);\n\n// Security enhancements\ndefine('DISALLOW_FILE_EDIT', true);\ndefine('DISALLOW_FILE_MODS', true);\ndefine('FORCE_SSL_ADMIN', true);\ndefine('WP_AUTO_UPDATE_CORE', true);\n\n// Increase memory limit\ndefine('WP_MEMORY_LIMIT', '512M');\n\n// Custom content directory (optional)\ndefine('WP_CONTENT_DIR', '/var/www/html/wordpress/wp-content');\ndefine('WP_CONTENT_URL', 'https://wordpress.example.com/wp-content');\n\n// Automatic updates\ndefine('WP_AUTO_UPDATE_CORE', 'minor');\n\n/* That's all, stop editing! Happy publishing. */\nif ( ! defined( 'ABSPATH' ) ) {\n    define( 'ABSPATH', dirname( __FILE__ ) . '/' );\n}\n\nrequire_once ABSPATH . 'wp-settings.php';\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/wp-config.php\nsudo chmod 600 /var/www/html/wordpress/wp-config.php\n```\n\n### SSL Configuration with Let's Encrypt\n```bash\n# Install Certbot\nsudo apt install -y certbot python3-certbot-apache  # For Apache\nsudo apt install -y certbot python3-certbot-nginx   # For NGINX\n\n# Obtain SSL certificate\nsudo certbot --apache -d wordpress.example.com -d www.wordpress.example.com  # Apache\nsudo certbot --nginx -d wordpress.example.com -d www.wordpress.example.com   # NGINX\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet\n```\n\n## Performance Optimization\n\n### PHP Optimization\n```bash\n# Edit PHP configuration\nsudo nano /etc/php/7.4/apache2/php.ini  # Apache\nsudo nano /etc/php/7.4/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\npost_max_size = 128M\nupload_max_filesize = 128M\nmax_execution_time = 300\nmax_input_time = 300\nmax_input_vars = 3000\ndate.timezone = \"America/New_York\"\n\n# Enable OPcache\nopcache.enable = 1\nopcache.memory_consumption = 128\nopcache.interned_strings_buffer = 8\nopcache.max_accelerated_files = 4000\nopcache.revalidate_freq = 2\nopcache.fast_shutdown = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php7.4-fpm nginx  # NGINX\n```\n\n### WordPress Caching\n```bash\n# Install Redis for object caching\nsudo apt install -y redis-server\nsudo systemctl enable --now redis-server\n\n# Configure Redis\nsudo tee -a /etc/redis/redis.conf > /dev/null <<EOF\nmaxmemory 256mb\nmaxmemory-policy allkeys-lru\nEOF\n\nsudo systemctl restart redis-server\n\n# Install WordPress Redis plugin via WP-CLI\ncd /var/www/html/wordpress\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Install and configure Redis plugin\nsudo -u www-data wp plugin install redis-cache --activate\nsudo -u www-data wp redis enable\n\n# Install caching plugins\nsudo -u www-data wp plugin install w3-total-cache --activate\nsudo -u www-data wp plugin install wp-super-cache --activate\n```\n\n### Database Optimization\n```bash\n# Optimize MySQL for WordPress\nsudo tee -a /etc/mysql/mysql.conf.d/mysqld.cnf > /dev/null <<EOF\n\n# WordPress optimizations\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_log_buffer_size = 8M\ninnodb_file_per_table = 1\ninnodb_open_files = 400\ninnodb_io_capacity = 400\ninnodb_flush_method = O_DIRECT\nquery_cache_type = 1\nquery_cache_limit = 1M\nquery_cache_size = 16M\ntmp_table_size = 32M\nmax_heap_table_size = 32M\nmax_connections = 500\nthread_cache_size = 50\nopen_files_limit = 65535\ntable_definition_cache = 4096\ntable_open_cache = 10240\nEOF\n\nsudo systemctl restart mysql\n```\n\n## Security Hardening\n\n### WordPress Security\n```bash\n# Install security plugins\nsudo -u www-data wp plugin install wordfence --activate\nsudo -u www-data wp plugin install sucuri-scanner --activate\nsudo -u www-data wp plugin install all-in-one-wp-security-and-firewall --activate\n\n# Hide WordPress version\necho \"remove_action('wp_head', 'wp_generator');\" | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Disable XML-RPC if not needed\necho \"add_filter('xmlrpc_enabled', '__return_false');\" | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Change WordPress security keys regularly\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/ | sudo tee -a /var/www/html/wordpress/wp-config.php\n\n# Create .htaccess security rules (Apache)\nsudo tee /var/www/html/wordpress/.htaccess > /dev/null <<EOF\n# Block access to wp-config.php\n<Files wp-config.php>\norder allow,deny\ndeny from all\n</Files>\n\n# Block access to readme.html, license.txt\n<FilesMatch \"^(readme\\.html|license\\.txt|wp-config\\.php)\">\norder allow,deny\ndeny from all\n</FilesMatch>\n\n# Protect against script injections\nOptions +FollowSymLinks\nRewriteEngine On\nRewriteCond %{QUERY_STRING} (<|%3C).*script.*(>|%3E) [NC,OR]\nRewriteCond %{QUERY_STRING} GLOBALS(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} _REQUEST(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} ^.*(\\[|\\]|\\(|\\)|<|>|ê|\"|;|\\?|\\*|=$).* [NC,OR]\nRewriteCond %{QUERY_STRING} ^.*(â|á|à|ä|â|ã|å|æ|ç|è|é|ê|ë|ì|í|î|ï|ð|ñ|ò|ó|ô|õ|ö|ø|ù|ú|û|ü|ý|þ|ÿ|À|Á|Â|Ã|Å|Æ|Ç|È|É|Ê|Ë|Ì|Í|Î|Ï|Ð|Ñ|Ò|Ó|Ô|Õ|Ö|Ø|Ù|Ú|Û|Ü|Ý|Þ).* [NC]\nRewriteRule ^(.*)$ index.php [F,L]\n\n# Limit login attempts\n<FilesMatch \"wp-login.php\">\norder allow,deny\nallow from all\n# Add your IP addresses here for admin access\n# allow from 192.168.1.100\n</FilesMatch>\n\n# Disable directory browsing\nOptions -Indexes\n\n# Protect uploads directory\n<Directory \"/var/www/html/wordpress/wp-content/uploads/\">\n    <Files \"*.php\">\n        Order Deny,Allow\n        Deny from All\n    </Files>\n</Directory>\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/.htaccess\n```\n\n### Firewall Configuration\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 'Apache Full'    # or 'Nginx Full'\nsudo ufw allow ssh\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload\n```\n\n## WordPress CLI (WP-CLI) Installation\n\n```bash\n# Install WP-CLI\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Verify installation\nwp --info\n\n# Common WP-CLI commands\ncd /var/www/html/wordpress\n\n# Download WordPress core\nsudo -u www-data wp core download\n\n# Create wp-config.php\nsudo -u www-data wp config create \\\n  --dbname=wordpress \\\n  --dbuser=wordpressuser \\\n  --dbpass=secure_password \\\n  --dbhost=localhost\n\n# Install WordPress\nsudo -u www-data wp core install \\\n  --url=https://wordpress.example.com \\\n  --title=\"My WordPress Site\" \\\n  --admin_user=admin \\\n  --admin_password=secure_admin_password \\\n  --admin_email=admin@example.com\n\n# Update WordPress core\nsudo -u www-data wp core update\n\n# Install and activate plugins\nsudo -u www-data wp plugin install akismet --activate\nsudo -u www-data wp plugin install jetpack --activate\nsudo -u www-data wp plugin install yoast-seo --activate\n\n# Update plugins\nsudo -u www-data wp plugin update --all\n\n# Install themes\nsudo -u www-data wp theme install twentytwentythree --activate\nsudo -u www-data wp theme update --all\n\n# Create users\nsudo -u www-data wp user create editor editor@example.com \\\n  --role=editor --user_pass=secure_password\n\n# Database operations\nsudo -u www-data wp db optimize\nsudo -u www-data wp db repair\nsudo -u www-data wp db check\n```\n\n## Backup and Maintenance\n\n### Automated Backup Script\n```bash\n# Create backup script\nsudo tee /usr/local/bin/wordpress-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/wordpress\"\nWP_DIR=\"/var/www/html/wordpress\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Backup WordPress files\ntar -czf ${BACKUP_DIR}/files/wordpress-files-${DATE}.tar.gz -C ${WP_DIR} .\n\n# Backup database\nmysqldump -u wordpressuser -p'secure_password' wordpress > ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\n\n# Using WP-CLI for database export\ncd ${WP_DIR}\nsudo -u www-data wp db export ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"wordpress-*\" -type f -mtime +7 -delete\n\necho \"Backup completed: wordpress-${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/wordpress-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Maintenance Tasks\n```bash\n# Create maintenance script\nsudo tee /usr/local/bin/wordpress-maintenance.sh > /dev/null <<'EOF'\n#!/bin/bash\nWP_DIR=\"/var/www/html/wordpress\"\ncd ${WP_DIR}\n\n# Update WordPress core, plugins, and themes\nsudo -u www-data wp core update\nsudo -u www-data wp plugin update --all\nsudo -u www-data wp theme update --all\n\n# Database cleanup\nsudo -u www-data wp transient delete --all\nsudo -u www-data wp db optimize\n\n# Clear caches\nif sudo -u www-data wp plugin is-installed w3-total-cache; then\n    sudo -u www-data wp w3-total-cache flush all\nfi\n\nif sudo -u www-data wp plugin is-installed wp-super-cache; then\n    sudo -u www-data wp super-cache flush\nfi\n\necho \"WordPress maintenance completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-maintenance.sh\n\n# Schedule weekly maintenance\necho \"0 3 * * 0 root /usr/local/bin/wordpress-maintenance.sh\" | sudo tee -a /etc/crontab\n```\n\n## Verification\n\n```bash\n# Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Check PHP-FPM (if using NGINX)\nsudo systemctl status php7.4-fpm\n\n# Test database connection\nmysql -u wordpressuser -p -e \"SHOW DATABASES;\"\n\n# Test website\ncurl -I http://wordpress.example.com\n\n# Check WordPress status via WP-CLI\ncd /var/www/html/wordpress\nsudo -u www-data wp core version\nsudo -u www-data wp plugin status\nsudo -u www-data wp theme status\n\n# Check file permissions\nls -la /var/www/html/wordpress/\nls -la /var/www/html/wordpress/wp-content/\n\n# Test uploads directory\nsudo -u www-data wp media regenerate --yes\n\n# Check for WordPress updates\nsudo -u www-data wp core check-update\nsudo -u www-data wp plugin list --update=available\n```\n\n## Troubleshooting\n\n```bash\n# Enable WordPress debug mode\nsudo nano /var/www/html/wordpress/wp-config.php\n# Add: define('WP_DEBUG', true);\n# Add: define('WP_DEBUG_LOG', true);\n\n# Check WordPress debug log\ntail -f /var/www/html/wordpress/wp-content/debug.log\n\n# Check web server logs\nsudo tail -f /var/log/apache2/wordpress_error.log  # Apache\nsudo tail -f /var/log/nginx/error.log              # NGINX\n\n# Check PHP logs\nsudo tail -f /var/log/php7.4-fpm.log\n\n# Database connectivity test\nsudo -u www-data wp db check\n\n# Plugin conflict troubleshooting\nsudo -u www-data wp plugin deactivate --all\nsudo -u www-data wp plugin activate plugin-name\n\n# Theme troubleshooting\nsudo -u www-data wp theme activate twentytwentythree\n\n# Check disk space\ndf -h /var/www/html/wordpress/\n\n# File permission issues\nsudo chown -R www-data:www-data /var/www/html/wordpress/\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Reset user password via WP-CLI\nsudo -u www-data wp user update admin --user_pass=new_password\n```\n\n## Additional Resources\n\n- [WordPress Codex](https://codex.wordpress.org/)\n- [WP-CLI Documentation](https://wp-cli.org/)\n- [WordPress Security Guide](https://wordpress.org/support/article/hardening-wordpress/)\n- [Performance Best Practices](https://wordpress.org/support/article/optimization/)\n- [WordPress Forums](https://wordpress.org/support/forums/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"wordpress-installation-guide\" class=\"mobile-header\">WordPress Installation Guide</h1>\n<p class=\"mobile-paragraph\">Popular content management system (CMS) for creating websites, blogs, and web applications with a user-friendly interface.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Web server (Apache or NGINX)</li>\n<li class=\"mobile-list-item\">PHP 7.4+ with required extensions</li>\n<li class=\"mobile-list-item\">MySQL 5.7+ or PostgreSQL 9.6+</li>\n<li class=\"mobile-list-item\">SSL certificate (recommended)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"lamp-stack-setup-apache-mysql-php\" class=\"mobile-header\">LAMP Stack Setup (Apache + MySQL + PHP)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt update\nsudo apt install -y apache2 mysql-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS\nsudo yum install -y httpd mariadb-server php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now apache2 mysql  # Ubuntu/Debian\nsudo systemctl enable --now httpd mariadb  # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"lemp-stack-setup-nginx-mysql-php\" class=\"mobile-header\">LEMP Stack Setup (NGINX + MySQL + PHP)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt update\nsudo apt install -y nginx mysql-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# RHEL/CentOS  \nsudo yum install -y nginx mariadb-server php-fpm php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip\n\n# Enable services\nsudo systemctl enable --now nginx mysql php7.4-fpm  # Ubuntu/Debian\nsudo systemctl enable --now nginx mariadb php-fpm   # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-setup\" class=\"mobile-header\">Database Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure MySQL installation\nsudo mysql_secure_installation\n\n# Create WordPress database\nsudo mysql -u root -p &lt;&lt;EOF\nCREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\nCREATE USER &#039;wordpressuser&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL ON wordpress.* TO &#039;wordpressuser&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEXIT\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-download-and-setup\" class=\"mobile-header\">WordPress Download and Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download WordPress\ncd /tmp\nwget https://wordpress.org/latest.tar.gz\ntar xzf latest.tar.gz\n\n# Create document root and copy files\nsudo mkdir -p /var/www/html/wordpress\nsudo cp -R /tmp/wordpress/* /var/www/html/wordpress/\nsudo chown -R www-data:www-data /var/www/html/wordpress  # Ubuntu/Debian\nsudo chown -R apache:apache /var/www/html/wordpress      # RHEL/CentOS\n\n# Set proper permissions\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Create wp-config.php\ncd /var/www/html/wordpress\nsudo cp wp-config-sample.php wp-config.php\n\n# Generate salt keys\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/\n\n# Edit wp-config.php with database details and salt keys\nsudo nano wp-config.php</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"apache-virtual-host\" class=\"mobile-header\">Apache Virtual Host</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Apache virtual host\nsudo tee /etc/apache2/sites-available/wordpress.conf &gt; /dev/null &lt;&lt;EOF\n&lt;VirtualHost *:80&gt;\n    ServerName wordpress.example.com\n    ServerAlias www.wordpress.example.com\n    DocumentRoot /var/www/html/wordpress\n    \n    &lt;Directory /var/www/html/wordpress/&gt;\n        AllowOverride All\n        Options -Indexes +FollowSymLinks\n        Require all granted\n    &lt;/Directory&gt;\n    \n    # Security headers\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n    \n    # Hide PHP version\n    Header always unset X-Powered-By\n    \n    # Disable server signature\n    ServerSignature Off\n    \n    ErrorLog \\${APACHE_LOG_DIR}/wordpress_error.log\n    CustomLog \\${APACHE_LOG_DIR}/wordpress_access.log combined\n&lt;/VirtualHost&gt;\nEOF\n\n# Enable modules and site\nsudo a2enmod rewrite headers ssl\nsudo a2ensite wordpress.conf\nsudo systemctl restart apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">NGINX Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX server block\nsudo tee /etc/nginx/sites-available/wordpress &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 80;\n    server_name wordpress.example.com www.wordpress.example.com;\n    root /var/www/html/wordpress;\n    index index.php index.html index.htm;\n\n    # Security headers\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot; always;\n    add_header Content-Security-Policy &quot;default-src &#039;self&#039; http: https: data: blob: &#039;unsafe-inline&#039;&quot; always;\n\n    # Hide nginx version\n    server_tokens off;\n\n    # WordPress specific rules\n    location / {\n        try_files \\$uri \\$uri/ /index.php?\\$args;\n    }\n\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;  # Adjust PHP version\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n    }\n\n    # Security rules\n    location ~* /(?:uploads|files)/.*\\.php\\$ {\n        deny all;\n    }\n\n    location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg)\\$ {\n        expires 1y;\n        add_header Cache-Control &quot;public, immutable&quot;;\n    }\n\n    # Deny access to sensitive files\n    location ~* \\.(htaccess|htpasswd|ini|log|sh|inc|bak)\\$ {\n        deny all;\n    }\n\n    # WordPress: deny wp-config.php access\n    location ~* wp-config\\.php {\n        deny all;\n    }\n\n    # WordPress: deny general stuff\n    location ~* ^/(\\.user.ini|php.ini|\\..*)$ {\n        deny all;\n    }\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-configuration-wp-configphp\" class=\"mobile-header\">WordPress Configuration (wp-config.php)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure wp-config.php\nsudo tee /var/www/html/wordpress/wp-config.php &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n&lt;?php\n// Database settings\ndefine(&#039;DB_NAME&#039;, &#039;wordpress&#039;);\ndefine(&#039;DB_USER&#039;, &#039;wordpressuser&#039;);\ndefine(&#039;DB_PASSWORD&#039;, &#039;secure_password&#039;);\ndefine(&#039;DB_HOST&#039;, &#039;localhost&#039;);\ndefine(&#039;DB_CHARSET&#039;, &#039;utf8mb4&#039;);\ndefine(&#039;DB_COLLATE&#039;, &#039;&#039;);\n\n// Authentication Unique Keys and Salts\n// Generate these at: https://api.wordpress.org/secret-key/1.1/salt/\ndefine(&#039;AUTH_KEY&#039;,         &#039;put your unique phrase here&#039;);\ndefine(&#039;SECURE_AUTH_KEY&#039;,  &#039;put your unique phrase here&#039;);\ndefine(&#039;LOGGED_IN_KEY&#039;,    &#039;put your unique phrase here&#039;);\ndefine(&#039;NONCE_KEY&#039;,        &#039;put your unique phrase here&#039;);\ndefine(&#039;AUTH_SALT&#039;,        &#039;put your unique phrase here&#039;);\ndefine(&#039;SECURE_AUTH_SALT&#039;, &#039;put your unique phrase here&#039;);\ndefine(&#039;LOGGED_IN_SALT&#039;,   &#039;put your unique phrase here&#039;);\ndefine(&#039;NONCE_SALT&#039;,       &#039;put your unique phrase here&#039;);\n\n// WordPress Database Table prefix\n$table_prefix = &#039;wp_&#039;;\n\n// WordPress debug mode (disable in production)\ndefine(&#039;WP_DEBUG&#039;, false);\n\n// Security enhancements\ndefine(&#039;DISALLOW_FILE_EDIT&#039;, true);\ndefine(&#039;DISALLOW_FILE_MODS&#039;, true);\ndefine(&#039;FORCE_SSL_ADMIN&#039;, true);\ndefine(&#039;WP_AUTO_UPDATE_CORE&#039;, true);\n\n// Increase memory limit\ndefine(&#039;WP_MEMORY_LIMIT&#039;, &#039;512M&#039;);\n\n// Custom content directory (optional)\ndefine(&#039;WP_CONTENT_DIR&#039;, &#039;/var/www/html/wordpress/wp-content&#039;);\ndefine(&#039;WP_CONTENT_URL&#039;, &#039;https://wordpress.example.com/wp-content&#039;);\n\n// Automatic updates\ndefine(&#039;WP_AUTO_UPDATE_CORE&#039;, &#039;minor&#039;);\n\n/* That&#039;s all, stop editing! Happy publishing. */\nif ( ! defined( &#039;ABSPATH&#039; ) ) {\n    define( &#039;ABSPATH&#039;, dirname( __FILE__ ) . &#039;/&#039; );\n}\n\nrequire_once ABSPATH . &#039;wp-settings.php&#039;;\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/wp-config.php\nsudo chmod 600 /var/www/html/wordpress/wp-config.php</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssl-configuration-with-lets-encrypt\" class=\"mobile-header\">SSL Configuration with Let's Encrypt</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot\nsudo apt install -y certbot python3-certbot-apache  # For Apache\nsudo apt install -y certbot python3-certbot-nginx   # For NGINX\n\n# Obtain SSL certificate\nsudo certbot --apache -d wordpress.example.com -d www.wordpress.example.com  # Apache\nsudo certbot --nginx -d wordpress.example.com -d www.wordpress.example.com   # NGINX\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"php-optimization\" class=\"mobile-header\">PHP Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit PHP configuration\nsudo nano /etc/php/7.4/apache2/php.ini  # Apache\nsudo nano /etc/php/7.4/fpm/php.ini      # NGINX\n\n# Recommended settings:\nmemory_limit = 512M\npost_max_size = 128M\nupload_max_filesize = 128M\nmax_execution_time = 300\nmax_input_time = 300\nmax_input_vars = 3000\ndate.timezone = &quot;America/New_York&quot;\n\n# Enable OPcache\nopcache.enable = 1\nopcache.memory_consumption = 128\nopcache.interned_strings_buffer = 8\nopcache.max_accelerated_files = 4000\nopcache.revalidate_freq = 2\nopcache.fast_shutdown = 1\n\nsudo systemctl restart apache2  # Apache\nsudo systemctl restart php7.4-fpm nginx  # NGINX</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-caching\" class=\"mobile-header\">WordPress Caching</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Redis for object caching\nsudo apt install -y redis-server\nsudo systemctl enable --now redis-server\n\n# Configure Redis\nsudo tee -a /etc/redis/redis.conf &gt; /dev/null &lt;&lt;EOF\nmaxmemory 256mb\nmaxmemory-policy allkeys-lru\nEOF\n\nsudo systemctl restart redis-server\n\n# Install WordPress Redis plugin via WP-CLI\ncd /var/www/html/wordpress\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Install and configure Redis plugin\nsudo -u www-data wp plugin install redis-cache --activate\nsudo -u www-data wp redis enable\n\n# Install caching plugins\nsudo -u www-data wp plugin install w3-total-cache --activate\nsudo -u www-data wp plugin install wp-super-cache --activate</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize MySQL for WordPress\nsudo tee -a /etc/mysql/mysql.conf.d/mysqld.cnf &gt; /dev/null &lt;&lt;EOF\n\n# WordPress optimizations\ninnodb_buffer_pool_size = 1G\ninnodb_log_file_size = 256M\ninnodb_log_buffer_size = 8M\ninnodb_file_per_table = 1\ninnodb_open_files = 400\ninnodb_io_capacity = 400\ninnodb_flush_method = O_DIRECT\nquery_cache_type = 1\nquery_cache_limit = 1M\nquery_cache_size = 16M\ntmp_table_size = 32M\nmax_heap_table_size = 32M\nmax_connections = 500\nthread_cache_size = 50\nopen_files_limit = 65535\ntable_definition_cache = 4096\ntable_open_cache = 10240\nEOF\n\nsudo systemctl restart mysql</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"wordpress-security\" class=\"mobile-header\">WordPress Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install security plugins\nsudo -u www-data wp plugin install wordfence --activate\nsudo -u www-data wp plugin install sucuri-scanner --activate\nsudo -u www-data wp plugin install all-in-one-wp-security-and-firewall --activate\n\n# Hide WordPress version\necho &quot;remove_action(&#039;wp_head&#039;, &#039;wp_generator&#039;);&quot; | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Disable XML-RPC if not needed\necho &quot;add_filter(&#039;xmlrpc_enabled&#039;, &#039;__return_false&#039;);&quot; | sudo tee -a /var/www/html/wordpress/wp-content/themes/active-theme/functions.php\n\n# Change WordPress security keys regularly\ncurl -s https://api.wordpress.org/secret-key/1.1/salt/ | sudo tee -a /var/www/html/wordpress/wp-config.php\n\n# Create .htaccess security rules (Apache)\nsudo tee /var/www/html/wordpress/.htaccess &gt; /dev/null &lt;&lt;EOF\n# Block access to wp-config.php\n&lt;Files wp-config.php&gt;\norder allow,deny\ndeny from all\n&lt;/Files&gt;\n\n# Block access to readme.html, license.txt\n&lt;FilesMatch &quot;^(readme\\.html|license\\.txt|wp-config\\.php)&quot;&gt;\norder allow,deny\ndeny from all\n&lt;/FilesMatch&gt;\n\n# Protect against script injections\nOptions +FollowSymLinks\nRewriteEngine On\nRewriteCond %{QUERY_STRING} (&lt;|%3C).*script.*(&gt;|%3E) [NC,OR]\nRewriteCond %{QUERY_STRING} GLOBALS(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} _REQUEST(=|[|%[0-9A-Z]{0,2}) [OR]\nRewriteCond %{QUERY_STRING} ^.*(\\[|\\]|\\(|\\)|&lt;|&gt;|ê|&quot;|;|\\?|\\*|=$).* [NC,OR]\nRewriteCond %{QUERY_STRING} ^.*(â|á|à|ä|â|ã|å|æ|ç|è|é|ê|ë|ì|í|î|ï|ð|ñ|ò|ó|ô|õ|ö|ø|ù|ú|û|ü|ý|þ|ÿ|À|Á|Â|Ã|Å|Æ|Ç|È|É|Ê|Ë|Ì|Í|Î|Ï|Ð|Ñ|Ò|Ó|Ô|Õ|Ö|Ø|Ù|Ú|Û|Ü|Ý|Þ).* [NC]\nRewriteRule ^(.*)$ index.php [F,L]\n\n# Limit login attempts\n&lt;FilesMatch &quot;wp-login.php&quot;&gt;\norder allow,deny\nallow from all\n# Add your IP addresses here for admin access\n# allow from 192.168.1.100\n&lt;/FilesMatch&gt;\n\n# Disable directory browsing\nOptions -Indexes\n\n# Protect uploads directory\n&lt;Directory &quot;/var/www/html/wordpress/wp-content/uploads/&quot;&gt;\n    &lt;Files &quot;*.php&quot;&gt;\n        Order Deny,Allow\n        Deny from All\n    &lt;/Files&gt;\n&lt;/Directory&gt;\nEOF\n\nsudo chown www-data:www-data /var/www/html/wordpress/.htaccess</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow &#039;Apache Full&#039;    # or &#039;Nginx Full&#039;\nsudo ufw allow ssh\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-service=ssh\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"wordpress-cli-wp-cli-installation\" class=\"mobile-header\">WordPress CLI (WP-CLI) Installation</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WP-CLI\ncurl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar\nchmod +x wp-cli.phar\nsudo mv wp-cli.phar /usr/local/bin/wp\n\n# Verify installation\nwp --info\n\n# Common WP-CLI commands\ncd /var/www/html/wordpress\n\n# Download WordPress core\nsudo -u www-data wp core download\n\n# Create wp-config.php\nsudo -u www-data wp config create \\\n  --dbname=wordpress \\\n  --dbuser=wordpressuser \\\n  --dbpass=secure_password \\\n  --dbhost=localhost\n\n# Install WordPress\nsudo -u www-data wp core install \\\n  --url=https://wordpress.example.com \\\n  --title=&quot;My WordPress Site&quot; \\\n  --admin_user=admin \\\n  --admin_password=secure_admin_password \\\n  --admin_email=admin@example.com\n\n# Update WordPress core\nsudo -u www-data wp core update\n\n# Install and activate plugins\nsudo -u www-data wp plugin install akismet --activate\nsudo -u www-data wp plugin install jetpack --activate\nsudo -u www-data wp plugin install yoast-seo --activate\n\n# Update plugins\nsudo -u www-data wp plugin update --all\n\n# Install themes\nsudo -u www-data wp theme install twentytwentythree --activate\nsudo -u www-data wp theme update --all\n\n# Create users\nsudo -u www-data wp user create editor editor@example.com \\\n  --role=editor --user_pass=secure_password\n\n# Database operations\nsudo -u www-data wp db optimize\nsudo -u www-data wp db repair\nsudo -u www-data wp db check</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-maintenance\" class=\"mobile-header\">Backup and Maintenance</h2>\n<h3 id=\"automated-backup-script\" class=\"mobile-header\">Automated Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/wordpress-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/wordpress&quot;\nWP_DIR=&quot;/var/www/html/wordpress&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{files,database}\n\n# Backup WordPress files\ntar -czf ${BACKUP_DIR}/files/wordpress-files-${DATE}.tar.gz -C ${WP_DIR} .\n\n# Backup database\nmysqldump -u wordpressuser -p&#039;secure_password&#039; wordpress &gt; ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-db-${DATE}.sql\n\n# Using WP-CLI for database export\ncd ${WP_DIR}\nsudo -u www-data wp db export ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\ngzip ${BACKUP_DIR}/database/wordpress-wpcli-${DATE}.sql\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;wordpress-*&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: wordpress-${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/wordpress-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create maintenance script\nsudo tee /usr/local/bin/wordpress-maintenance.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nWP_DIR=&quot;/var/www/html/wordpress&quot;\ncd ${WP_DIR}\n\n# Update WordPress core, plugins, and themes\nsudo -u www-data wp core update\nsudo -u www-data wp plugin update --all\nsudo -u www-data wp theme update --all\n\n# Database cleanup\nsudo -u www-data wp transient delete --all\nsudo -u www-data wp db optimize\n\n# Clear caches\nif sudo -u www-data wp plugin is-installed w3-total-cache; then\n    sudo -u www-data wp w3-total-cache flush all\nfi\n\nif sudo -u www-data wp plugin is-installed wp-super-cache; then\n    sudo -u www-data wp super-cache flush\nfi\n\necho &quot;WordPress maintenance completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wordpress-maintenance.sh\n\n# Schedule weekly maintenance\necho &quot;0 3 * * 0 root /usr/local/bin/wordpress-maintenance.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check web server status\nsudo systemctl status apache2  # or nginx\nsudo systemctl status mysql\n\n# Check PHP-FPM (if using NGINX)\nsudo systemctl status php7.4-fpm\n\n# Test database connection\nmysql -u wordpressuser -p -e &quot;SHOW DATABASES;&quot;\n\n# Test website\ncurl -I http://wordpress.example.com\n\n# Check WordPress status via WP-CLI\ncd /var/www/html/wordpress\nsudo -u www-data wp core version\nsudo -u www-data wp plugin status\nsudo -u www-data wp theme status\n\n# Check file permissions\nls -la /var/www/html/wordpress/\nls -la /var/www/html/wordpress/wp-content/\n\n# Test uploads directory\nsudo -u www-data wp media regenerate --yes\n\n# Check for WordPress updates\nsudo -u www-data wp core check-update\nsudo -u www-data wp plugin list --update=available</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable WordPress debug mode\nsudo nano /var/www/html/wordpress/wp-config.php\n# Add: define(&#039;WP_DEBUG&#039;, true);\n# Add: define(&#039;WP_DEBUG_LOG&#039;, true);\n\n# Check WordPress debug log\ntail -f /var/www/html/wordpress/wp-content/debug.log\n\n# Check web server logs\nsudo tail -f /var/log/apache2/wordpress_error.log  # Apache\nsudo tail -f /var/log/nginx/error.log              # NGINX\n\n# Check PHP logs\nsudo tail -f /var/log/php7.4-fpm.log\n\n# Database connectivity test\nsudo -u www-data wp db check\n\n# Plugin conflict troubleshooting\nsudo -u www-data wp plugin deactivate --all\nsudo -u www-data wp plugin activate plugin-name\n\n# Theme troubleshooting\nsudo -u www-data wp theme activate twentytwentythree\n\n# Check disk space\ndf -h /var/www/html/wordpress/\n\n# File permission issues\nsudo chown -R www-data:www-data /var/www/html/wordpress/\nsudo find /var/www/html/wordpress/ -type d -exec chmod 755 {} \\;\nsudo find /var/www/html/wordpress/ -type f -exec chmod 644 {} \\;\n\n# Reset user password via WP-CLI\nsudo -u www-data wp user update admin --user_pass=new_password</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://codex.wordpress.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WordPress Codex</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wp-cli.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WP-CLI Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/support/article/hardening-wordpress/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WordPress Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/support/article/optimization/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://wordpress.org/support/forums/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WordPress Forums</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"11 min","wordCount":2044,"lastBuilt":"2025-09-14T01:30:37.654Z"},{"name":"xen-orchestra","displayName":"Xen Orchestra","slug":"xen-orchestra","description":"Repo for xen-orchestra","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/xen-orchestra","updatedAt":"2025-09-08T03:18:43Z","createdAt":"2023-08-28T03:50:35Z","readmeRaw":"# xen-orchestra - CentOS\n\n```bash\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall 'Development Tools'\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## xen-orchestra - Debian\n\n```bash\ncurl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho \"deb https://dl.yarnpkg.com/debian/ stable main\" | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: '/': '../xo-web/dist/'\nyarn start \n```\n\n## xen-orchestra - Updating\n\n```bash\ncd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build\n```\n","readmeHtml":"<h1 id=\"xen-orchestra-centos\" class=\"mobile-header\">xen-orchestra - CentOS</h1>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -\ncurl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo\n\nyum groupinstall &#039;Development Tools&#039;\nyum -y install epel-release gcc gcc-c++ automake libpng-devel git python redis nodejs yarn\nsystemctl enable --now redis\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-debian\" class=\"mobile-header\">xen-orchestra - Debian</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\ncurl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add -\necho &quot;deb https://dl.yarnpkg.com/debian/ stable main&quot; | sudo tee /etc/apt/sources.list.d/yarn.list\nsudo apt update\nsudo apt-get install -y nodejs yarn build-essential redis-server libpng-dev git python-minimal libvhdi-utils lvm2\n\ngit clone -b master http://github.com/vatesfr/xen-orchestra\ncd xen-orchestra\nyarn\nyarn build\ncd packages/xo-server\ncp sample.config.yaml .xo-server.yaml\nvi .xo-server.yaml # mounts: &#039;/&#039;: &#039;../xo-web/dist/&#039;\nyarn start </code></pre>\n      </div>\n    </div>\n<h2 id=\"xen-orchestra-updating\" class=\"mobile-header\">xen-orchestra - Updating</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cd /opt/xen-orchestra/\nsudo git pull --ff-only\nsudo yarn\nsudo yarn build</code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":152,"lastBuilt":"2025-09-14T01:30:37.480Z"},{"name":"yacht","displayName":"Yacht","slug":"yacht","description":"Repo for yacht","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/yacht","updatedAt":"2025-09-08T03:18:56Z","createdAt":"2025-09-08T03:18:45Z","readmeRaw":"## 👋 Welcome to yacht 🚀  \n\nyacht README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-yacht\" class=\"mobile-header\">👋 Welcome to yacht 🚀  </h2>\n<p class=\"mobile-paragraph\">yacht README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:37.306Z"},{"name":"zabbix","displayName":"Zabbix","slug":"zabbix","description":"Repo for zabbix","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/zabbix","updatedAt":"2025-09-08T03:19:09Z","createdAt":"2025-09-08T03:18:59Z","readmeRaw":"## 👋 Welcome to zabbix 🚀  \n\nzabbix README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-zabbix\" class=\"mobile-header\">👋 Welcome to zabbix 🚀  </h2>\n<p class=\"mobile-paragraph\">zabbix README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:37.147Z"},{"name":"zigbee2mqtt","displayName":"Zigbee2mqtt","slug":"zigbee2mqtt","description":"Repo for zigbee2mqtt","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/zigbee2mqtt","updatedAt":"2025-09-08T03:19:22Z","createdAt":"2025-09-08T03:19:12Z","readmeRaw":"## 👋 Welcome to zigbee2mqtt 🚀  \n\nzigbee2mqtt README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-zigbee2mqtt\" class=\"mobile-header\">👋 Welcome to zigbee2mqtt 🚀  </h2>\n<p class=\"mobile-paragraph\">zigbee2mqtt README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T01:30:36.990Z"}],"categories":[{"key":"web-server","name":"Web Servers","description":"High-performance web servers and reverse proxies","icon":"🌐","color":"#50fa7b","keywords":["nginx","apache","haproxy","traefik","caddy"]},{"key":"database","name":"Databases","description":"SQL and NoSQL database installation guides","icon":"🗄️","color":"#8be9fd","keywords":["mysql","postgresql","mongodb","redis","mariadb","databases"]},{"key":"container","name":"Containers","description":"Container platforms and orchestration","icon":"📦","color":"#bd93f9","keywords":["docker","kubernetes","k3s","portainer","rancher","minikube"]},{"key":"security","name":"Security","description":"Security tools and authentication systems","icon":"🔒","color":"#ff5555","keywords":["vault","authelia","keycloak","pihole","fail2ban","wireguard","openvpn"]},{"key":"monitoring","name":"Monitoring","description":"Observability and monitoring solutions","icon":"📊","color":"#ffb86c","keywords":["prometheus","grafana","loki","jaeger","nagios","zabbix"]},{"key":"communication","name":"Communication","description":"Team communication and collaboration platforms","icon":"💬","color":"#f1fa8c","keywords":["mattermost","rocketchat","matrix","mastodon","element","jitsi"]},{"key":"productivity","name":"Productivity","description":"Content management and productivity tools","icon":"⚡","color":"#ff79c6","keywords":["nextcloud","wordpress","ghost","bookstack","outline","bitwarden"]},{"key":"media","name":"Media Servers","description":"Media streaming and entertainment platforms","icon":"🎬","color":"#6272a4","keywords":["plex","jellyfin","sonarr","radarr","lidarr","prowlarr"]},{"key":"infrastructure","name":"Infrastructure","description":"DevOps and infrastructure automation tools","icon":"🏗️","color":"#44475a","keywords":["ansible","terraform","gitlab","jenkins","consul","etcd"]}]},"__N_SSG":true}