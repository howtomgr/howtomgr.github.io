{"pageProps":{"guide":{"name":"ansible","displayName":"Ansible Installation Guide","slug":"ansible","description":"Ansible is a free and open-source agentless automation platform for configuration management, application deployment, and task automation across multiple systems. Originally developed by Michael DeHaan and acquired by Red Hat, Ansible serves as the industry standard for infrastructure automation with enterprise-grade security and scalability. It provides a robust alternative to proprietary solutions like VMware vRealize Automation, Microsoft System Center, or Puppet Enterprise without vendor lock-in or licensing costs.","category":"configuration-management","subcategory":"configuration-management","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[0,8,10,22,80,443,5985,6379,8080,8081,9093,9100],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["configuration-management","containerization","orchestration","observability","data-storage","web-services","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/configuration-management/ansible","documentationUrl":"https://howtomgr.github.io/configuration-management/ansible","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ansible","updatedAt":"2025-09-16T16:57:05Z","createdAt":"2025-09-08T03:04:35Z","readmeRaw":"# Ansible Installation Guide\n\nAnsible is a free and open-source agentless automation platform for configuration management, application deployment, and task automation across multiple systems. Originally developed by Michael DeHaan and acquired by Red Hat, Ansible serves as the industry standard for infrastructure automation with enterprise-grade security and scalability. It provides a robust alternative to proprietary solutions like VMware vRealize Automation, Microsoft System Center, or Puppet Enterprise without vendor lock-in or licensing costs.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores for control machine (4+ cores recommended for large deployments)\n  - RAM: 2GB minimum, 4GB+ recommended for large infrastructures, 8GB+ for enterprise\n  - Storage: 10GB+ available disk space for playbooks, roles, and logs\n  - Network: Stable connectivity to all managed hosts\n- **Operating System** (Control Machine): \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, openSUSE)\n  - macOS: 10.15+ (Catalina or newer)\n  - Windows: WSL2 with Linux distribution (not natively supported)\n  - FreeBSD: 12.0+ (limited support)\n- **Target Hosts**:\n  - Linux: Any distribution with Python 2.7+ or 3.5+\n  - Windows: PowerShell 3.0+ and .NET Framework 4.0+\n  - Network devices: SSH or specialized connection plugins\n- **Network Requirements**:\n  - SSH access to target Linux/Unix hosts (port 22)\n  - WinRM access to Windows hosts (ports 5985/5986)\n  - HTTPS API access for cloud and network devices\n- **Dependencies**:\n  - Python 3.8+ on control machine (3.9+ recommended)\n  - SSH client and key-based authentication setup\n  - Python 2.7+ or 3.5+ on target Linux hosts\n  - PowerShell and .NET Framework on Windows targets\n- **System Access**: SSH key access or password authentication to target hosts\n- **Special Requirements**:\n  - Sudo or root access on target systems for privileged operations\n  - Network connectivity between control machine and all managed hosts\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Fedora\n```bash\n# Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Arch Linux\n```bash\n# Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version\n```\n\n#### Alpine Linux\n```bash\n# Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version\n```\n\n#### openSUSE/SLES\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper refresh\n\n# Install Ansible and dependencies\nsudo zypper install -y ansible python3-pip python3-virtualenv\n\n# SLES 15 (requires additional modules)\nsudo SUSEConnect -p sle-module-python3/15.5/x86_64\nsudo zypper install -y ansible python3-pip\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### macOS\n```bash\n# Method 1: Using Homebrew (recommended)\n# Install Homebrew if not already installed\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install Ansible\nbrew install ansible\n\n# Method 2: Using pip with virtual environment\n# Install Python 3 if needed\nbrew install python3\n\n# Create virtual environment\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages for cloud providers\npip install boto3 azure-cli google-cloud-storage\n\n# Add to shell profile for persistence\necho 'source ~/ansible-venv/bin/activate' >> ~/.zshrc  # or ~/.bash_profile\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\n\n# Verify installation\nansible --version\n```\n\n#### FreeBSD\n```bash\n# Install from ports\ncd /usr/ports/sysutils/ansible && make install clean\n\n# Or install from packages\npkg install py39-ansible\n\n# Install Python dependencies\npkg install python39 py39-pip py39-virtualenv\n\n# Create virtual environment (recommended)\npython3.9 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version\n```\n\n#### Windows (using WSL2)\n```powershell\n# Enable WSL2 first\n# Run in PowerShell as Administrator\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n# Restart computer, then set WSL2 as default\nwsl --set-default-version 2\n\n# Install Ubuntu from Microsoft Store or command line\nwsl --install -d Ubuntu-22.04\n\n# Inside WSL Ubuntu environment:\nsudo apt update\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Create Windows-specific inventory for managing Windows hosts\nmkdir -p ~/ansible-windows\ncd ~/ansible-windows\n\n# Install Windows collections\nansible-galaxy collection install ansible.windows\nansible-galaxy collection install community.windows\nansible-galaxy collection install chocolatey.chocolatey\n\n# Create Windows inventory example\ncat > inventory/windows-hosts.yml <<EOF\nall:\n  children:\n    windows:\n      hosts:\n        win-server-01:\n          ansible_host: 192.168.1.100\n          ansible_user: Administrator\n          ansible_password: \"{{ vault_windows_password }}\"\n          ansible_connection: winrm\n          ansible_winrm_server_cert_validation: ignore\n          ansible_winrm_transport: basic\n          ansible_winrm_port: 5985\n      vars:\n        ansible_shell_type: powershell\n        ansible_become_method: runas\n        ansible_become_user: Administrator\nEOF\n\n# Verify installation\nansible --version\n```\n\n### Using pip (Latest Version)\n```bash\n# Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho 'source ~/ansible-venv/bin/activate' >> ~/.bashrc\n\n# Verify installation\nansible --version\n```\n\n### Using Docker\n```bash\n# Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker > /dev/null <<'EOF'\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest \"$@\"\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho 'alias ansible=\"ansible-docker ansible\"' >> ~/.bashrc\necho 'alias ansible-playbook=\"ansible-docker ansible-playbook\"' >> ~/.bashrc\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **SSH Key Setup**:\n```bash\n# Generate SSH key pair for Ansible\nssh-keygen -t rsa -b 4096 -f ~/.ssh/ansible_key -C \"ansible-automation\"\n\n# Set proper permissions\nchmod 600 ~/.ssh/ansible_key\nchmod 644 ~/.ssh/ansible_key.pub\n\n# Copy public key to target hosts\nssh-copy-id -i ~/.ssh/ansible_key.pub user@target-host\n\n# Or manually copy the key\ncat ~/.ssh/ansible_key.pub | ssh user@target-host \"mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys\"\n```\n\n2. **Basic Ansible Configuration**:\n```bash\n# Create Ansible configuration directory\nmkdir -p ~/.ansible/{facts_cache,inventory_cache,cp,logs}\n\n# Create basic ansible.cfg\ncat > ~/.ansible.cfg <<EOF\n[defaults]\nhost_key_checking = True\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\ndeprecation_warnings = True\ncommand_warnings = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\nEOF\n```\n\n3. **Create Basic Inventory**:\n```bash\n# Create simple inventory file\nmkdir -p ~/ansible-project/inventory\ncat > ~/ansible-project/inventory/hosts.yml <<EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-01:\n          ansible_host: 192.168.1.10\n        web-02:\n          ansible_host: 192.168.1.11\n    databases:\n      hosts:\n        db-01:\n          ansible_host: 192.168.1.20\n  vars:\n    ansible_user: ansible\n    ansible_ssh_private_key_file: ~/.ssh/ansible_key\nEOF\n```\n\n4. **Verify Target Host Python**:\n```bash\n# Check Python availability on target hosts\nansible all -i inventory/hosts.yml -m raw -a \"python3 --version || python --version\"\n\n# Install Python if needed (Ubuntu/Debian example)\nansible all -i inventory/hosts.yml -m raw -a \"apt update && apt install -y python3\" --become\n```\n\n### Testing Initial Setup\n\n```bash\n# Test connectivity to all hosts\nansible all -i inventory/hosts.yml -m ping\n\n# Gather facts from all hosts\nansible all -i inventory/hosts.yml -m setup\n\n# Test privilege escalation\nansible all -i inventory/hosts.yml -m command -a \"whoami\" --become\n\n# Check disk space on all hosts\nansible all -i inventory/hosts.yml -m command -a \"df -h\"\n\n# Verify SSH keys are working\nansible all -i inventory/hosts.yml -m command -a \"uptime\"\n\n# Test basic file operations\nansible all -i inventory/hosts.yml -m file -a \"path=/tmp/ansible-test state=touch\" --become\nansible all -i inventory/hosts.yml -m file -a \"path=/tmp/ansible-test state=absent\" --become\n```\n\n**WARNING:** Ensure SSH key authentication is working and hosts are accessible before proceeding with complex playbooks!\n\n## 5. Service Management\n\n### Ansible Controller Service (systemd)\n\n```bash\n# Create Ansible controller service for scheduled playbooks\nsudo tee /etc/systemd/system/ansible-controller.service > /dev/null <<EOF\n[Unit]\nDescription=Ansible Controller Service\nAfter=network.target\nWants=network-online.target\n\n[Service]\nType=oneshot\nUser=ansible\nGroup=ansible\nWorkingDirectory=/opt/ansible\nExecStart=/usr/local/bin/ansible-playbook -i inventories/production playbooks/maintenance.yml\nStandardOutput=journal\nStandardError=journal\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create timer for regular execution\nsudo tee /etc/systemd/system/ansible-controller.timer > /dev/null <<EOF\n[Unit]\nDescription=Run Ansible Controller Service\nRequires=ansible-controller.service\n\n[Timer]\nOnCalendar=daily\nPersistent=true\nRandomizedDelaySec=300\n\n[Install]\nWantedBy=timers.target\nEOF\n\n# Enable and start the timer\nsudo systemctl daemon-reload\nsudo systemctl enable ansible-controller.timer\nsudo systemctl start ansible-controller.timer\n\n# Check status\nsudo systemctl status ansible-controller.timer\n```\n\n### Ansible Tower/AWX Service Management\n\n```bash\n# AWX service management (Docker-based)\n# Start AWX services\nsudo docker-compose -f /opt/awx/installer/docker-compose.yml up -d\n\n# Stop AWX services\nsudo docker-compose -f /opt/awx/installer/docker-compose.yml down\n\n# Restart AWX services\nsudo docker-compose -f /opt/awx/installer/docker-compose.yml restart\n\n# View AWX logs\nsudo docker-compose -f /opt/awx/installer/docker-compose.yml logs -f\n\n# Check AWX service status\nsudo docker-compose -f /opt/awx/installer/docker-compose.yml ps\n\n# Update AWX\ncd /opt/awx\ngit pull\nsudo docker-compose -f installer/docker-compose.yml down\nsudo docker-compose -f installer/docker-compose.yml build --no-cache\nsudo docker-compose -f installer/docker-compose.yml up -d\n```\n\n### Ansible Pull Service (for Pull-based Configuration)\n\n```bash\n# Create ansible-pull service for decentralized management\nsudo tee /etc/systemd/system/ansible-pull.service > /dev/null <<EOF\n[Unit]\nDescription=Ansible Pull Configuration Management\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=oneshot\nUser=root\nExecStart=/usr/bin/ansible-pull -U https://github.com/company/ansible-config.git -i localhost, local.yml\nStandardOutput=journal\nStandardError=journal\nTimeoutStartSec=600\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create timer for ansible-pull\nsudo tee /etc/systemd/system/ansible-pull.timer > /dev/null <<EOF\n[Unit]\nDescription=Run Ansible Pull every 30 minutes\nRequires=ansible-pull.service\n\n[Timer]\nOnCalendar=*:0/30\nPersistent=true\nRandomizedDelaySec=120\n\n[Install]\nWantedBy=timers.target\nEOF\n\n# Enable ansible-pull timer\nsudo systemctl daemon-reload\nsudo systemctl enable ansible-pull.timer\nsudo systemctl start ansible-pull.timer\n```\n\n### Cross-Platform Service Management\n\n#### macOS (launchd)\n\n```bash\n# Create launchd plist for Ansible automation\nsudo tee /Library/LaunchDaemons/com.company.ansible.plist > /dev/null <<EOF\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>Label</key>\n    <string>com.company.ansible</string>\n    <key>ProgramArguments</key>\n    <array>\n        <string>/usr/local/bin/ansible-playbook</string>\n        <string>-i</string>\n        <string>/opt/ansible/inventory/hosts.yml</string>\n        <string>/opt/ansible/playbooks/maintenance.yml</string>\n    </array>\n    <key>StartCalendarInterval</key>\n    <dict>\n        <key>Hour</key>\n        <integer>2</integer>\n        <key>Minute</key>\n        <integer>0</integer>\n    </dict>\n    <key>StandardOutPath</key>\n    <string>/var/log/ansible.log</string>\n    <key>StandardErrorPath</key>\n    <string>/var/log/ansible.error.log</string>\n    <key>UserName</key>\n    <string>ansible</string>\n    <key>WorkingDirectory</key>\n    <string>/opt/ansible</string>\n</dict>\n</plist>\nEOF\n\n# Load and start the service\nsudo launchctl load /Library/LaunchDaemons/com.company.ansible.plist\nsudo launchctl start com.company.ansible\n```\n\n#### Windows (Task Scheduler via PowerShell)\n\n```powershell\n# Create scheduled task for Ansible in Windows (running in WSL)\n$TaskName = \"Ansible-Configuration-Management\"\n$TaskDescription = \"Run Ansible playbooks for system configuration\"\n\n$Action = New-ScheduledTaskAction -Execute \"wsl\" -Argument \"ansible-playbook -i /home/ansible/inventory/hosts.yml /home/ansible/playbooks/windows-maintenance.yml\"\n\n$Trigger = New-ScheduledTaskTrigger -Daily -At \"02:00AM\"\n\n$Principal = New-ScheduledTaskPrincipal -UserID \"NT AUTHORITY\\SYSTEM\" -LogonType ServiceAccount\n\n$Settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable\n\nRegister-ScheduledTask -TaskName $TaskName -Description $TaskDescription -Action $Action -Trigger $Trigger -Principal $Principal -Settings $Settings\n\n# Start the task\nStart-ScheduledTask -TaskName $TaskName\n\n# Check task status\nGet-ScheduledTask -TaskName $TaskName | Get-ScheduledTaskInfo\n```\n\n## Project Structure and Configuration\n\n### Professional Project Structure\n```bash\n# Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat > ansible.cfg <<EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF\n```\n\n### Advanced Inventory Management\n```bash\n# Create production inventory with groups and variables\ncat > inventories/production/hosts.yml <<EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: \"{{ vault_mysql_root_password }}\"\n        mysql_replication_user: \"{{ vault_mysql_replication_user }}\"\n        mysql_replication_password: \"{{ vault_mysql_replication_password }}\"\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: \"{{ vault_haproxy_stats_password }}\"\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: \"0 2 * * *\"\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: \"0 1 * * *\"\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat > inventories/production/aws_ec2.yml <<EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: \"'web' in tags.Role\"\n  databases: \"'db' in tags.Role\"\n  loadbalancers: \"'lb' in tags.Role\"\n  \n  # Group by environment\n  production: \"tags.Environment == 'production'\"\n  staging: \"tags.Environment == 'staging'\"\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == \"us-west-2a\"\n  us_west_2b: ec2_placement_availability_zone == \"us-west-2b\"\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF\n```\n\n### Ansible Vault Security\n```bash\n# Create strong vault password\nopenssl rand -base64 32 > ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat > group_vars/all/vars.yml <<EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: \"{{ vault_mysql_root_password }}\"\ngrafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: \"{{ vault_ssl_private_key }}\"\n\n# Security settings\nansible_ssh_common_args: '-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts'\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml\n```\n\n## Comprehensive Playbooks\n\n### System Hardening Playbook\n```bash\ncat > playbooks/system-hardening.yml <<EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [\"Debian\", \"RedHat\"]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: \"*\"\n        state: latest\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == \"Debian\"\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: \"{{ security_packages }}\"\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: 'ansible ALL=(ALL) NOPASSWD:ALL'\n        create: yes\n        mode: '0440'\n        validate: 'visudo -cf %s'\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: \"{{ item.regexp }}\"\n        line: \"{{ item.line }}\"\n        backup: yes\n      loop:\n        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }\n        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }\n        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }\n        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }\n        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }\n        - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 0' }\n        - { regexp: '^#?Protocol', line: 'Protocol 2' }\n        - { regexp: '^#?LogLevel', line: 'LogLevel VERBOSE' }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == \"Debian\"\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: 'SSH access'\n      when: ansible_os_family == \"Debian\"\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: \"{{ item }}\"\n        enabled: no\n        state: stopped\n      loop: \"{{ disabled_services }}\"\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: \"{{ item.path }}\"\n        mode: \"{{ item.mode }}\"\n        owner: root\n        group: root\n      loop:\n        - { path: '/etc/passwd', mode: '0644' }\n        - { path: '/etc/shadow', mode: '0640' }\n        - { path: '/etc/group', mode: '0644' }\n        - { path: '/etc/gshadow', mode: '0640' }\n        - { path: '/etc/ssh/sshd_config', mode: '0600' }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'net.ipv4.ip_forward', value: '0' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'kernel.randomize_va_space', value: '2' }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: \"{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}\"\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF\n```\n\n### Application Deployment Playbook\n```bash\ncat > playbooks/web-application-deployment.yml <<EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: \"25%\"  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: \"{{ app_version | default('latest') }}\"\n    app_port: 3000\n    nginx_workers: \"{{ ansible_processor_cores }}\"\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: \"Server is in maintenance mode\"\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: \"{{ app_name }}\"\n        system: yes\n        shell: /bin/false\n        home: \"/opt/{{ app_name }}\"\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: \"{{ item }}\"\n        state: directory\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0755'\n      loop:\n        - \"/opt/{{ app_name }}\"\n        - \"/opt/{{ app_name }}/releases\"\n        - \"/opt/{{ app_name }}/shared\"\n        - \"/var/log/{{ app_name }}\"\n\n    - name: Download application release\n      get_url:\n        url: \"https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        mode: '0644'\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/opt/{{ app_name }}/releases/\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        remote_src: yes\n        creates: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n\n    - name: Create symlink to current release\n      file:\n        src: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n        dest: \"/opt/{{ app_name }}/current\"\n        state: link\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: \"templates/{{ app_name }}.conf.j2\"\n        dest: \"/opt/{{ app_name }}/shared/{{ app_name }}.conf\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0640'\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: \"templates/{{ app_name }}.service.j2\"\n        dest: \"/etc/systemd/system/{{ app_name }}.service\"\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: \"{{ app_name }}\"\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: \"http://localhost:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: \"http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: \"/var/log/{{ app_name }}/deployments.log\"\n        line: \"{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}\"\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF\n```\n\n### Infrastructure as Code Playbook\n```bash\ncat > playbooks/infrastructure-provisioning.yml <<EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: \"{{ inventory_hostname }}\"\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: \"{{ ansible_default_ipv4.address }} {{ inventory_hostname }}\"\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: \"{{ base_packages[ansible_os_family] | default(base_packages['Debian']) }}\"\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chrony' }}\"\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chronyd' }}\"\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: '0644'\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: \"https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz\"\n        dest: /tmp/node_exporter.tar.gz\n        mode: '0644'\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: '0755'\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'kernel.dmesg_restrict', value: '1' }\n        - { key: 'kernel.kptr_restrict', value: '2' }\n        - { key: 'kernel.yama.ptrace_scope', value: '1' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check\"\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF\n```\n\n## Advanced Role Development\n\n### Comprehensive NGINX Role\n```bash\n# Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat > roles/nginx/tasks/main.yml <<EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: \"{{ ansible_os_family }}.yml\"\n\n- name: Install NGINX\n  include_tasks: \"install-{{ ansible_os_family }}.yml\"\n\n- name: Create NGINX directories\n  file:\n    path: \"{{ item }}\"\n    state: directory\n    owner: root\n    group: root\n    mode: '0755'\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: 'nginx -t -c %s'\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    backup: yes\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    dest: \"/etc/nginx/sites-enabled/{{ item.name }}.conf\"\n    state: link\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: '0644'\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat > roles/nginx/tasks/install-Debian.yml <<EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: \"deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx\"\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat > roles/nginx/tasks/install-RedHat.yml <<EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: \"https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/\"\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat > roles/nginx/vars/main.yml <<EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - \"add_header X-Frame-Options SAMEORIGIN always;\"\n  - \"add_header X-Content-Type-Options nosniff always;\"\n  - \"add_header X-XSS-Protection '1; mode=block' always;\"\n  - \"add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains' always;\"\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: \"_\"\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat > roles/nginx/templates/nginx.conf.j2 <<EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                    '\\$status \\$body_bytes_sent \"\\$http_referer\" '\n                    '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat > roles/nginx/handlers/main.yml <<EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF\n```\n\n## Security and Compliance\n\n### Ansible Security Scanner Integration\n```bash\n# Create security scanning playbook\ncat > playbooks/security-scan.yml <<EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: \"/tmp/security-scans\"\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: \"{{ scan_results_dir }}\"\n        state: directory\n        mode: '0755'\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: \"https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip\"\n        dest: \"/tmp/cis-benchmark.zip\"\n        mode: '0644'\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh > {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: \"{{ lynis_result.stdout }}\"\n        dest: \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        mode: '0644'\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == \"Debian\"\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [\"RedHat\", \"Debian\"]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: \"{{ item }}\"\n        dest: \"./security-reports/{{ inventory_hostname }}/\"\n        flat: yes\n      loop:\n        - \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html\"\n        - \"{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json\"\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: \"{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt\"\n        mode: '0644'\nEOF\n```\n\n### Ansible AWX/Tower Integration\n```bash\n# Install Ansible AWX (open source)\ncat > playbooks/install-awx.yml <<EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: \"{{ vault_awx_admin_password }}\"\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: '0644'\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: \"http://localhost:80/api/v2/ping/\"\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: \"http://localhost:80/api/v2/organizations/\"\n        method: POST\n        user: \"{{ awx_admin_user }}\"\n        password: \"{{ awx_admin_password }}\"\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: \"Production\"\n          description: \"Production environment organization\"\n        status_code: [200, 201, 409]\nEOF\n```\n\n## Multi-Cloud Automation\n\n### AWS Infrastructure Automation\n```bash\ncat > playbooks/aws-infrastructure.yml <<EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: \"{{ aws_region | default('us-west-2') }}\"\n    vpc_cidr: \"{{ vpc_cidr | default('10.0.0.0/16') }}\"\n    environment: \"{{ environment | default('production') }}\"\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          \"tag:Name\": \"{{ environment }}-vpc\"\n        region: \"{{ aws_region }}\"\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: \"{{ environment }}-vpc\"\n        cidr_block: \"{{ vpc_cidr }}\"\n        region: \"{{ aws_region }}\"\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: \"{{ environment }}\"\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: \"{{ environment }}-web-sg\"\n        description: \"Security group for web servers\"\n        vpc_id: \"{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}\"\n        region: \"{{ aws_region }}\"\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: \"HTTP and HTTPS access\"\n          - proto: tcp\n            ports:\n              - 22\n            group_id: \"{{ environment }}-bastion-sg\"\n            rule_desc: \"SSH from bastion\"\n        tags:\n          Environment: \"{{ environment }}\"\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: \"{{ environment }}-web-{{ item }}\"\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: \"{{ ec2_key_name }}\"\n        vpc_subnet_id: \"{{ web_subnet_id }}\"\n        security_groups:\n          - \"{{ environment }}-web-sg\"\n        region: \"{{ aws_region }}\"\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: \"{{ environment }}\"\n          Role: webserver\n          Ansible: managed\n      loop: \"{{ range(1, web_server_count + 1) | list }}\"\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: \"{{ item.instances[0].tags.Name }}\"\n        hostname: \"{{ item.instances[0].public_ip_address }}\"\n        groups: webservers\n        ansible_ssh_private_key_file: \"~/.ssh/{{ ec2_key_name }}.pem\"\n        ansible_user: ec2-user\n      loop: \"{{ web_instances.results }}\"\n      changed_when: false\nEOF\n```\n\n### Kubernetes Cluster Management\n```bash\ncat > playbooks/k8s-cluster-management.yml <<EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: \"1.28.2\"\n    containerd_version: \"1.6.24\"\n    cni_version: \"1.3.0\"\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb >= 1700\n          - ansible_processor_cores >= 2\n        fail_msg: \"System doesn't meet minimum requirements\"\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: \"{{ item }}\"\n      loop: \"{{ groups['k8s_all'] }}\"\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: \"{{ containerd_version }}\"\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: \"{{ k8s_version }}\"\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: \"{{ ansible_env.HOME }}/.kube\"\n        state: directory\n        mode: '0755'\n\n    - name: Copy admin.conf to user's kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: \"{{ ansible_env.HOME }}/.kube/config\"\n        owner: \"{{ ansible_user }}\"\n        group: \"{{ ansible_user }}\"\n        mode: '0644'\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Join worker nodes to cluster\n      shell: \"{{ hostvars[groups['k8s_masters'][0]]['join_command'].stdout }}\"\n      when: inventory_hostname in groups['k8s_workers']\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n      register: cluster_status\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups['k8s_masters'][0]\nEOF\n```\n\n## Performance Optimization\n\n### System-Level Tuning\n\n```bash\n# Optimize control machine for Ansible performance\n# Kernel parameters for network performance\nsudo tee -a /etc/sysctl.conf > /dev/null <<EOF\n# Ansible performance optimization\nnet.core.somaxconn = 8192\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.tcp_max_tw_buckets = 400000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 16777216\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 16777216\nfs.file-max = 100000\nEOF\n\nsudo sysctl -p\n\n# Set resource limits for Ansible user\nsudo tee -a /etc/security/limits.conf > /dev/null <<EOF\nansible soft nofile 65536\nansible hard nofile 65536\nansible soft nproc 32768\nansible hard nproc 32768\nEOF\n\n# SSH client optimization\nmkdir -p ~/.ssh\ncat >> ~/.ssh/config <<EOF\nHost *\n    ControlMaster auto\n    ControlPersist 3600\n    ControlPath ~/.ssh/sockets/%r@%h-%p\n    Compression yes\n    ServerAliveInterval 60\n    ServerAliveCountMax 3\n    TCPKeepAlive yes\n    ConnectTimeout 10\n    StrictHostKeyChecking yes\n    UserKnownHostsFile ~/.ssh/known_hosts\nEOF\n\nmkdir -p ~/.ssh/sockets\n```\n\n### Ansible Performance Configuration\n\n```bash\n# High-performance ansible.cfg\ncat > ansible-performance.cfg <<EOF\n[defaults]\n# Core performance settings\nforks = 50\npoll_interval = 1\ninternal_poll_interval = 0.001\ntimeout = 30\nhost_key_checking = True\ngather_timeout = 30\ngathering = smart\nfact_caching = redis\nfact_caching_connection = localhost:6379:0\nfact_caching_timeout = 86400\ncache_plugins = memory\n\n# Callback and display optimization\nstdout_callback = yaml\ncallbacks_enabled = timer, profile_tasks, profile_roles\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\ndisplay_failed_stderr = True\n\n# SSH optimization\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey -o Compression=yes\npipelining = True\ncontrol_path = ~/.ansible/sockets/%%h-%%p-%%r\nretries = 3\nssh_executable = /usr/bin/ssh\n\n# Connection persistence\n[persistent_connection]\nconnect_timeout = 30\nconnect_retry_timeout = 15\ncommand_timeout = 30\n\n# Privilege escalation optimization\n[privilege_escalation]\nbecome_plugins = sudo, su, pbrun, pfexec, doas, dzdo, ksu, runas, machinectl\nbecome_allow_same_user = False\nbecome_ask_pass = False\nEOF\n\n# Use Redis for fact caching (install Redis first)\nsudo apt install -y redis-server  # or relevant package manager\npip install redis\n\n# Create performance monitoring script\ncat > ansible-performance-monitor.sh <<'EOF'\n#!/bin/bash\n# Monitor Ansible performance metrics\n\nPLAYBOOK=\"$1\"\nif [ -z \"$PLAYBOOK\" ]; then\n    echo \"Usage: $0 <playbook>\"\n    exit 1\nfi\n\n# Enable profiling\nexport ANSIBLE_CALLBACK_PLUGINS=\"~/.ansible/plugins/callback\"\nexport ANSIBLE_CALLBACKS_ENABLED=\"timer,profile_tasks,profile_roles\"\n\n# Monitor system resources during playbook execution\n(\n    while pgrep -f ansible-playbook > /dev/null; do\n        echo \"$(date): CPU: $(top -bn1 | grep \"Cpu(s)\" | awk '{print $2}'), Memory: $(free -m | awk 'NR==2{printf \"%.1f%%\", $3*100/$2 }')\"\n        sleep 5\n    done\n) &\n\n# Run playbook with timing\ntime ansible-playbook \"$PLAYBOOK\" --diff\n\n# Kill monitoring\npkill -P $$\nEOF\n\nchmod +x ansible-performance-monitor.sh\n```\n\n### Parallel Execution Strategies\n```bash\n# Create high-performance playbook configuration\ncat > playbooks/high-performance-deployment.yml <<EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: \"30%\"   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk '{print $(NF-2)}' | sed 's/,//'\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float > 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: \"*\"\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: \"{{ item.src }}\"\n        dest: \"{{ item.dest }}\"\n        mode: \"{{ item.mode | default('0644') }}\"\n        backup: yes\n      loop:\n        - { src: \"nginx.conf.j2\", dest: \"/etc/nginx/nginx.conf\" }\n        - { src: \"mysql.cnf.j2\", dest: \"/etc/mysql/my.cnf\" }\n        - { src: \"redis.conf.j2\", dest: \"/etc/redis/redis.conf\" }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: \"{{ item.ansible_job_id }}\"\n      loop: \"{{ config_deployment.results }}\"\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: \"{{ item }}\"\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: \"restart all services\"\nEOF\n\n# Performance monitoring playbook\ncat > playbooks/performance-monitoring.yml <<EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: \"{{ monitoring_tools }}\"\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Enable system statistics collection\n      service:\n        name: \"{{ 'sysstat' if ansible_os_family == 'Debian' else 'sysstat' }}\"\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: '0755'\n\n    - name: Schedule performance monitoring\n      cron:\n        name: \"Performance monitoring\"\n        minute: \"*/5\"\n        job: \"/usr/local/bin/performance-monitor.sh\"\n        user: root\nEOF\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration for Ansible AWX/Tower\n\n```nginx\n# /etc/nginx/sites-available/ansible-awx\nupstream ansible_awx {\n    server 127.0.0.1:8080;\n    server 127.0.0.1:8081 backup;\n}\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name ansible.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name ansible.example.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/ssl/certs/ansible.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ansible.example.com.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\";\n\n    location / {\n        proxy_pass http://ansible_awx;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_buffering off;\n        proxy_request_buffering off;\n    }\n\n    # WebSocket support\n    location /websocket/ {\n        proxy_pass http://ansible_awx;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nglobal\n    daemon\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    log stdout local0 info\n\ndefaults\n    mode http\n    timeout connect 5000ms\n    timeout client 50000ms\n    timeout server 50000ms\n    option httplog\n\nfrontend ansible_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ansible.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ansible_backend\n\nbackend ansible_backend\n    balance roundrobin\n    option httpchk GET /api/v2/ping/\n    server awx1 127.0.0.1:8080 check\n    server awx2 127.0.0.1:8081 check backup\n```\n\n### Apache Configuration\n\n```apache\n# /etc/apache2/sites-available/ansible-awx.conf\n<VirtualHost *:80>\n    ServerName ansible.example.com\n    Redirect permanent / https://ansible.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName ansible.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ansible.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ansible.example.com.key\n    \n    # Security headers\n    Header always set X-Frame-Options DENY\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass /websocket/ ws://127.0.0.1:8080/websocket/\n    ProxyPassReverse /websocket/ ws://127.0.0.1:8080/websocket/\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n</VirtualHost>\n```\n\n## Monitoring\n\n### Built-in Monitoring and Logging\n\n```bash\n# Create comprehensive monitoring playbook\ncat > playbooks/ansible-monitoring.yml <<EOF\n---\n- name: Ansible Infrastructure Monitoring\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - name: prometheus\n        port: 9090\n      - name: grafana\n        port: 3000\n      - name: alertmanager\n        port: 9093\n    \n    log_paths:\n      - /var/log/ansible\n      - /var/log/awx\n      - /var/log/syslog\n      - /var/log/auth.log\n\n  tasks:\n    # Install monitoring agents\n    - name: Install Prometheus Node Exporter\n      get_url:\n        url: https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz\n        dest: /tmp/node_exporter.tar.gz\n        mode: '0644'\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /opt/\n        remote_src: yes\n        creates: /opt/node_exporter-1.6.1.linux-amd64\n\n    - name: Create node_exporter user\n      user:\n        name: node_exporter\n        system: yes\n        shell: /bin/false\n        home: /var/lib/node_exporter\n\n    - name: Install Node Exporter binary\n      copy:\n        src: /opt/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: '0755'\n        owner: node_exporter\n        group: node_exporter\n        remote_src: yes\n\n    - name: Create Node Exporter service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n      notify: restart node_exporter\n\n    - name: Enable and start Node Exporter\n      systemd:\n        name: node_exporter\n        state: started\n        enabled: yes\n        daemon_reload: yes\n\n    # Log monitoring setup\n    - name: Install rsyslog for centralized logging\n      package:\n        name: rsyslog\n        state: present\n\n    - name: Configure rsyslog for Ansible logs\n      template:\n        src: templates/ansible-rsyslog.conf.j2\n        dest: /etc/rsyslog.d/50-ansible.conf\n        backup: yes\n      notify: restart rsyslog\n\n    # Create monitoring scripts\n    - name: Create Ansible health check script\n      template:\n        src: templates/ansible-health-check.sh.j2\n        dest: /usr/local/bin/ansible-health-check.sh\n        mode: '0755'\n\n    - name: Schedule health checks\n      cron:\n        name: \"Ansible health check\"\n        minute: \"*/5\"\n        job: \"/usr/local/bin/ansible-health-check.sh\"\n        user: root\n\n  handlers:\n    - name: restart node_exporter\n      systemd:\n        name: node_exporter\n        state: restarted\n\n    - name: restart rsyslog\n      systemd:\n        name: rsyslog\n        state: restarted\nEOF\n```\n\n### Prometheus Configuration for Ansible\n\n```yaml\n# prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - \"ansible_rules.yml\"\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - alertmanager:9093\n\nscrape_configs:\n  - job_name: 'ansible-nodes'\n    static_configs:\n      - targets:\n        - 'ansible-control:9100'\n        - 'web-01:9100'\n        - 'web-02:9100'\n        - 'db-01:9100'\n\n  - job_name: 'ansible-awx'\n    static_configs:\n      - targets:\n        - 'awx-web:8080'\n        - 'awx-task:8080'\n    metrics_path: '/api/v2/metrics/'\n    scrape_interval: 30s\n\n  - job_name: 'node-exporter'\n    static_configs:\n      - targets:\n        - 'node1:9100'\n        - 'node2:9100'\n        - 'node3:9100'\n```\n\n### Grafana Dashboard Configuration\n\n```json\n{\n  \"dashboard\": {\n    \"title\": \"Ansible Infrastructure Monitoring\",\n    \"panels\": [\n      {\n        \"title\": \"Ansible Job Success Rate\",\n        \"type\": \"stat\",\n        \"targets\": [\n          {\n            \"expr\": \"(ansible_job_successful_total / ansible_job_total) * 100\",\n            \"legendFormat\": \"Success Rate %\"\n          }\n        ]\n      },\n      {\n        \"title\": \"Node Resource Usage\",\n        \"type\": \"graph\",\n        \"targets\": [\n          {\n            \"expr\": \"100 - (avg(rate(node_cpu_seconds_total{mode=\\\"idle\\\"}[5m])) * 100)\",\n            \"legendFormat\": \"CPU Usage %\"\n          },\n          {\n            \"expr\": \"(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100\",\n            \"legendFormat\": \"Memory Usage %\"\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n## Integration Examples\n\n### Python Integration with Ansible\n\n```python\n#!/usr/bin/env python3\n# ansible_integration.py\n\nimport ansible_runner\nimport subprocess\nimport json\nimport os\nfrom pathlib import Path\n\nclass AnsibleManager:\n    def __init__(self, project_dir, inventory_path):\n        self.project_dir = Path(project_dir)\n        self.inventory_path = inventory_path\n        self.private_data_dir = self.project_dir / 'runner_data'\n        \n    def run_playbook(self, playbook_name, extra_vars=None, limit=None):\n        \"\"\"Run an Ansible playbook with error handling\"\"\"\n        try:\n            result = ansible_runner.run(\n                private_data_dir=str(self.private_data_dir),\n                playbook=playbook_name,\n                inventory=self.inventory_path,\n                extravars=extra_vars or {},\n                limit=limit,\n                verbosity=1\n            )\n            \n            return {\n                'status': result.status,\n                'rc': result.rc,\n                'stdout': result.stdout.read() if result.stdout else '',\n                'stats': result.stats\n            }\n        except Exception as e:\n            return {'status': 'failed', 'error': str(e)}\n    \n    def run_ad_hoc_command(self, module, module_args, hosts='all'):\n        \"\"\"Run ad-hoc Ansible commands\"\"\"\n        try:\n            result = ansible_runner.run(\n                private_data_dir=str(self.private_data_dir),\n                inventory=self.inventory_path,\n                module=module,\n                module_args=module_args,\n                host_pattern=hosts\n            )\n            \n            return {\n                'status': result.status,\n                'rc': result.rc,\n                'events': [event for event in result.events if event['event'] == 'runner_on_ok']\n            }\n        except Exception as e:\n            return {'status': 'failed', 'error': str(e)}\n    \n    def get_inventory_info(self):\n        \"\"\"Get inventory information\"\"\"\n        cmd = ['ansible-inventory', '-i', self.inventory_path, '--list']\n        try:\n            result = subprocess.run(cmd, capture_output=True, text=True, check=True)\n            return json.loads(result.stdout)\n        except subprocess.CalledProcessError as e:\n            return {'error': e.stderr}\n\n# Example usage\nif __name__ == '__main__':\n    ansible_mgr = AnsibleManager(\n        project_dir='/home/ansible/infrastructure',\n        inventory_path='inventories/production/hosts.yml'\n    )\n    \n    # Run a playbook\n    result = ansible_mgr.run_playbook(\n        'site.yml',\n        extra_vars={'environment': 'production'},\n        limit='webservers'\n    )\n    print(f\"Playbook execution: {result['status']}\")\n    \n    # Run ad-hoc command\n    ping_result = ansible_mgr.run_ad_hoc_command('ping', '', 'all')\n    print(f\"Ping test: {ping_result['status']}\")\n    \n    # Get inventory info\n    inventory = ansible_mgr.get_inventory_info()\n    print(f\"Managed hosts: {len(inventory.get('_meta', {}).get('hostvars', {}))}\")\n```\n\n### Node.js Integration\n\n```javascript\n// ansible_integration.js\nconst { spawn, exec } = require('child_process');\nconst path = require('path');\nconst fs = require('fs').promises;\n\nclass AnsibleManager {\n    constructor(projectDir, inventoryPath) {\n        this.projectDir = projectDir;\n        this.inventoryPath = inventoryPath;\n    }\n    \n    async runPlaybook(playbookName, options = {}) {\n        return new Promise((resolve, reject) => {\n            const args = [\n                'ansible-playbook',\n                '-i', this.inventoryPath,\n                path.join(this.projectDir, 'playbooks', playbookName)\n            ];\n            \n            if (options.limit) {\n                args.push('--limit', options.limit);\n            }\n            \n            if (options.extraVars) {\n                args.push('--extra-vars', JSON.stringify(options.extraVars));\n            }\n            \n            if (options.check) {\n                args.push('--check');\n            }\n            \n            const process = spawn(args[0], args.slice(1), {\n                cwd: this.projectDir,\n                stdio: ['pipe', 'pipe', 'pipe']\n            });\n            \n            let stdout = '';\n            let stderr = '';\n            \n            process.stdout.on('data', (data) => {\n                stdout += data.toString();\n            });\n            \n            process.stderr.on('data', (data) => {\n                stderr += data.toString();\n            });\n            \n            process.on('close', (code) => {\n                resolve({\n                    exitCode: code,\n                    stdout: stdout,\n                    stderr: stderr,\n                    success: code === 0\n                });\n            });\n            \n            process.on('error', reject);\n        });\n    }\n    \n    async runAdHocCommand(module, args, hosts = 'all') {\n        return new Promise((resolve, reject) => {\n            const command = `ansible ${hosts} -i ${this.inventoryPath} -m ${module} -a \"${args}\"`;\n            \n            exec(command, { cwd: this.projectDir }, (error, stdout, stderr) => {\n                if (error) {\n                    reject({ error, stderr });\n                } else {\n                    resolve({ stdout, stderr });\n                }\n            });\n        });\n    }\n    \n    async getInventoryInfo() {\n        return new Promise((resolve, reject) => {\n            const command = `ansible-inventory -i ${this.inventoryPath} --list`;\n            \n            exec(command, { cwd: this.projectDir }, (error, stdout, stderr) => {\n                if (error) {\n                    reject({ error, stderr });\n                } else {\n                    try {\n                        resolve(JSON.parse(stdout));\n                    } catch (parseError) {\n                        reject({ error: parseError, stdout });\n                    }\n                }\n            });\n        });\n    }\n}\n\n// Example usage\nasync function main() {\n    const ansible = new AnsibleManager('/home/ansible/infrastructure', 'inventories/production/hosts.yml');\n    \n    try {\n        // Run playbook\n        const result = await ansible.runPlaybook('site.yml', {\n            limit: 'webservers',\n            extraVars: { environment: 'production' },\n            check: true\n        });\n        console.log('Playbook check result:', result.success);\n        \n        // Run ad-hoc command\n        const pingResult = await ansible.runAdHocCommand('ping', '', 'all');\n        console.log('Ping result:', pingResult.stdout);\n        \n        // Get inventory\n        const inventory = await ansible.getInventoryInfo();\n        console.log('Inventory hosts:', Object.keys(inventory._meta.hostvars).length);\n        \n    } catch (error) {\n        console.error('Error:', error);\n    }\n}\n\nif (require.main === module) {\n    main();\n}\n\nmodule.exports = AnsibleManager;\n```\n\n### REST API Integration\n\n```python\n#!/usr/bin/env python3\n# ansible_rest_api.py\n\nfrom flask import Flask, request, jsonify\nimport ansible_runner\nimport tempfile\nimport os\nimport yaml\nfrom pathlib import Path\n\napp = Flask(__name__)\n\nclass AnsibleAPI:\n    def __init__(self, base_dir):\n        self.base_dir = Path(base_dir)\n        self.inventory_file = self.base_dir / 'inventory' / 'hosts.yml'\n        \n    def execute_playbook(self, playbook_content, inventory_data, extra_vars=None):\n        \"\"\"Execute a playbook with given inventory and variables\"\"\"\n        with tempfile.TemporaryDirectory() as tmpdir:\n            tmpdir = Path(tmpdir)\n            \n            # Write playbook\n            playbook_file = tmpdir / 'playbook.yml'\n            with open(playbook_file, 'w') as f:\n                yaml.dump(playbook_content, f, default_flow_style=False)\n            \n            # Write inventory\n            inventory_file = tmpdir / 'inventory.yml'\n            with open(inventory_file, 'w') as f:\n                yaml.dump(inventory_data, f, default_flow_style=False)\n            \n            # Run playbook\n            result = ansible_runner.run(\n                private_data_dir=str(tmpdir),\n                playbook='playbook.yml',\n                inventory=str(inventory_file),\n                extravars=extra_vars or {}\n            )\n            \n            return {\n                'status': result.status,\n                'rc': result.rc,\n                'stats': result.stats,\n                'events': [e for e in result.events if e['event'] == 'playbook_on_stats']\n            }\n\nansible_api = AnsibleAPI('/home/ansible')\n\n@app.route('/api/playbook/run', methods=['POST'])\ndef run_playbook():\n    try:\n        data = request.get_json()\n        \n        playbook = data.get('playbook')\n        inventory = data.get('inventory')\n        extra_vars = data.get('extra_vars', {})\n        \n        if not playbook or not inventory:\n            return jsonify({'error': 'playbook and inventory are required'}), 400\n            \n        result = ansible_api.execute_playbook(playbook, inventory, extra_vars)\n        \n        return jsonify({\n            'success': result['status'] == 'successful',\n            'status': result['status'],\n            'return_code': result['rc'],\n            'stats': result['stats']\n        })\n        \n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/inventory', methods=['GET'])\ndef get_inventory():\n    try:\n        with open(ansible_api.inventory_file, 'r') as f:\n            inventory = yaml.safe_load(f)\n        return jsonify(inventory)\n    except Exception as e:\n        return jsonify({'error': str(e)}), 500\n\n@app.route('/api/health', methods=['GET'])\ndef health_check():\n    return jsonify({\n        'status': 'healthy',\n        'ansible_version': '2.15.0',  # This should be dynamic\n        'base_dir': str(ansible_api.base_dir)\n    })\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=False)\n```\n\n## Maintenance\n\n### Regular Maintenance Tasks\n\n```bash\n#!/bin/bash\n# ansible-maintenance.sh - Comprehensive maintenance script\n\n# Set variables\nANSIBLE_HOME=\"/home/ansible\"\nLOG_FILE=\"/var/log/ansible-maintenance.log\"\nBACKUP_DIR=\"/backup/ansible\"\nDATE=$(date +\"%Y%m%d_%H%M%S\")\n\n# Logging function\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\nlog \"Starting Ansible maintenance tasks\"\n\n# 1. Update Ansible and collections\nlog \"Updating Ansible and collections\"\npip install --upgrade ansible ansible-core\nansible-galaxy collection install --upgrade community.general\nansible-galaxy collection install --upgrade ansible.posix\nansible-galaxy collection install --upgrade kubernetes.core\n\n# 2. Clean up old logs\nlog \"Cleaning up old log files\"\nfind \"$ANSIBLE_HOME/logs\" -type f -name \"*.log\" -mtime +30 -delete\nfind /var/log/ansible -type f -name \"*.log\" -mtime +30 -delete\n\n# 3. Update facts cache\nlog \"Refreshing facts cache\"\nansible all -m setup --tree /tmp/facts_cache/\n\n# 4. Validate all playbooks\nlog \"Validating playbooks syntax\"\nfind \"$ANSIBLE_HOME/playbooks\" -name \"*.yml\" -exec ansible-playbook {} --syntax-check \\;\nif [ $? -eq 0 ]; then\n    log \"All playbooks passed syntax validation\"\nelse\n    log \"ERROR: Some playbooks failed syntax validation\"\nfi\n\n# 5. Check inventory health\nlog \"Checking inventory health\"\nansible-inventory --list > /tmp/inventory_check.json\nif [ $? -eq 0 ]; then\n    log \"Inventory syntax is valid\"\nelse\n    log \"ERROR: Inventory has syntax errors\"\nfi\n\n# 6. Test connectivity to all hosts\nlog \"Testing connectivity to managed hosts\"\nansible all -m ping --one-line > \"/tmp/ping_results_$DATE.txt\"\nFAILED_HOSTS=$(grep -c \"FAILED\" \"/tmp/ping_results_$DATE.txt\")\nif [ \"$FAILED_HOSTS\" -gt 0 ]; then\n    log \"WARNING: $FAILED_HOSTS hosts failed connectivity test\"\n    grep \"FAILED\" \"/tmp/ping_results_$DATE.txt\" >> \"$LOG_FILE\"\nelse\n    log \"All hosts are reachable\"\nfi\n\n# 7. Backup configurations\nlog \"Creating configuration backup\"\nmkdir -p \"$BACKUP_DIR/$DATE\"\ntar -czf \"$BACKUP_DIR/$DATE/ansible-config-$DATE.tar.gz\" \\\n    \"$ANSIBLE_HOME\"/{ansible.cfg,inventories,group_vars,host_vars,playbooks,roles}\n\n# 8. Clean up old backups (keep 30 days)\nlog \"Cleaning up old backups\"\nfind \"$BACKUP_DIR\" -type d -mtime +30 -exec rm -rf {} \\; 2>/dev/null\n\n# 9. Update SSH known_hosts\nlog \"Updating SSH known_hosts\"\nfor host in $(ansible all --list-hosts | grep -v hosts); do\n    ssh-keyscan -H \"$host\" >> ~/.ssh/known_hosts 2>/dev/null\ndone\nsort -u ~/.ssh/known_hosts > ~/.ssh/known_hosts.tmp && mv ~/.ssh/known_hosts.tmp ~/.ssh/known_hosts\n\n# 10. Generate maintenance report\nlog \"Generating maintenance report\"\nREPORT_FILE=\"/tmp/ansible-maintenance-report-$DATE.txt\"\ncat > \"$REPORT_FILE\" << EOF\nAnsible Maintenance Report - $DATE\n========================================\n\nAnsible Version: $(ansible --version | head -1)\nPython Version: $(python3 --version)\nSystem: $(uname -a)\n\nInventory Summary:\n$(ansible-inventory --list | jq '.\"_meta\".\"hostvars\" | keys | length') managed hosts\n\nConnectivity Test Results:\n$(wc -l < \"/tmp/ping_results_$DATE.txt\") total hosts tested\n$FAILED_HOSTS hosts failed connectivity\n\nPlaybook Validation: $(find \"$ANSIBLE_HOME/playbooks\" -name \"*.yml\" | wc -l) playbooks checked\n\nDisk Usage:\n$(df -h \"$ANSIBLE_HOME\" | tail -1)\n\nBackup Created: $BACKUP_DIR/$DATE/ansible-config-$DATE.tar.gz\nBackup Size: $(du -sh \"$BACKUP_DIR/$DATE/ansible-config-$DATE.tar.gz\" | cut -f1)\n\nRecent Log Entries (last 10):\n$(tail -10 \"$LOG_FILE\")\nEOF\n\nlog \"Maintenance report created: $REPORT_FILE\"\n\n# 11. Send report via email (optional)\nif command -v mail >/dev/null 2>&1; then\n    mail -s \"Ansible Maintenance Report - $DATE\" admin@example.com < \"$REPORT_FILE\"\n    log \"Maintenance report emailed\"\nfi\n\nlog \"Ansible maintenance tasks completed\"\n\n# Schedule this script to run weekly\n# Add to crontab: 0 2 * * 0 /usr/local/bin/ansible-maintenance.sh\n```\n\n### Ansible Version Management\n\n```bash\n#!/bin/bash\n# ansible-version-manager.sh - Manage multiple Ansible versions\n\nANSIBLE_VERSIONS_DIR=\"/opt/ansible-versions\"\nCURRENT_LINK=\"/opt/ansible/current\"\n\ninstall_ansible_version() {\n    local version=\"$1\"\n    local install_dir=\"$ANSIBLE_VERSIONS_DIR/$version\"\n    \n    if [ -d \"$install_dir\" ]; then\n        echo \"Ansible $version is already installed\"\n        return 0\n    fi\n    \n    echo \"Installing Ansible $version...\"\n    python3 -m venv \"$install_dir\"\n    source \"$install_dir/bin/activate\"\n    \n    pip install --upgrade pip\n    pip install \"ansible-core==$version\"\n    pip install ansible\n    \n    # Install essential collections\n    ansible-galaxy collection install community.general\n    ansible-galaxy collection install ansible.posix\n    ansible-galaxy collection install kubernetes.core\n    \n    deactivate\n    echo \"Ansible $version installed successfully\"\n}\n\nswitch_ansible_version() {\n    local version=\"$1\"\n    local install_dir=\"$ANSIBLE_VERSIONS_DIR/$version\"\n    \n    if [ ! -d \"$install_dir\" ]; then\n        echo \"Ansible $version is not installed\"\n        echo \"Available versions:\"\n        ls -1 \"$ANSIBLE_VERSIONS_DIR\" 2>/dev/null || echo \"No versions installed\"\n        return 1\n    fi\n    \n    rm -f \"$CURRENT_LINK\"\n    ln -s \"$install_dir\" \"$CURRENT_LINK\"\n    \n    echo \"Switched to Ansible $version\"\n    echo \"Current version: $(\"$CURRENT_LINK/bin/ansible\" --version | head -1)\"\n}\n\nlist_versions() {\n    echo \"Installed Ansible versions:\"\n    ls -1 \"$ANSIBLE_VERSIONS_DIR\" 2>/dev/null || echo \"No versions installed\"\n    \n    if [ -L \"$CURRENT_LINK\" ]; then\n        local current=$(readlink \"$CURRENT_LINK\" | basename)\n        echo \"Current version: $current\"\n    else\n        echo \"No current version set\"\n    fi\n}\n\nremove_version() {\n    local version=\"$1\"\n    local install_dir=\"$ANSIBLE_VERSIONS_DIR/$version\"\n    \n    if [ ! -d \"$install_dir\" ]; then\n        echo \"Ansible $version is not installed\"\n        return 1\n    fi\n    \n    if [ \"$(readlink \"$CURRENT_LINK\" 2>/dev/null)\" = \"$install_dir\" ]; then\n        echo \"Cannot remove currently active version\"\n        return 1\n    fi\n    \n    rm -rf \"$install_dir\"\n    echo \"Removed Ansible $version\"\n}\n\ncase \"$1\" in\n    install)\n        install_ansible_version \"$2\"\n        ;;\n    switch)\n        switch_ansible_version \"$2\"\n        ;;\n    list)\n        list_versions\n        ;;\n    remove)\n        remove_version \"$2\"\n        ;;\n    *)\n        echo \"Usage: $0 {install|switch|list|remove} [version]\"\n        echo \"Examples:\"\n        echo \"  $0 install 2.15.0\"\n        echo \"  $0 switch 2.15.0\"\n        echo \"  $0 list\"\n        echo \"  $0 remove 2.14.0\"\n        exit 1\n        ;;\nesac\n```\n\n### Performance Monitoring and Optimization\n\n```bash\n#!/bin/bash\n# ansible-performance-monitor.sh - Monitor and optimize Ansible performance\n\nlog_performance() {\n    local playbook=\"$1\"\n    local start_time=$(date +%s)\n    local log_file=\"/var/log/ansible-performance.log\"\n    \n    # Run playbook with timing\n    /usr/bin/time -v ansible-playbook \"$playbook\" --extra-vars=\"gather_facts=True\" 2>&1 | \\\n    tee \"/tmp/ansible-run-$start_time.log\"\n    \n    local end_time=$(date +%s)\n    local duration=$((end_time - start_time))\n    \n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] Playbook: $playbook, Duration: ${duration}s\" >> \"$log_file\"\n    \n    # Extract performance metrics\n    local max_memory=$(grep \"Maximum resident set size\" \"/tmp/ansible-run-$start_time.log\" | awk '{print $6}')\n    local user_time=$(grep \"User time\" \"/tmp/ansible-run-$start_time.log\" | awk '{print $4}')\n    local system_time=$(grep \"System time\" \"/tmp/ansible-run-$start_time.log\" | awk '{print $4}')\n    \n    echo \"Performance Metrics - Memory: ${max_memory}KB, User: ${user_time}s, System: ${system_time}s\" >> \"$log_file\"\n    \n    # Clean up\n    rm \"/tmp/ansible-run-$start_time.log\"\n}\n\n# Example usage in a wrapper script\nif [ \"$1\" = \"monitor\" ] && [ -n \"$2\" ]; then\n    log_performance \"$2\"\nelse\n    echo \"Usage: $0 monitor <playbook_path>\"\n    exit 1\nfi\n```\n\n## Testing and Validation\n\n### Molecule Testing Framework\n```bash\n# Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat > molecule/default/molecule.yml <<EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat > molecule/default/converge.yml <<EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: \"Include nginx role\"\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat > molecule/default/verify.yml <<EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: \"NGINX is not responding correctly\"\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test\n```\n\n### Ansible Lint and Security Scanning\n```bash\n# Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat > .ansible-lint <<EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: ['true', 'false', 'yes', 'no']\nEOF\n\n# Create security-focused playbook linting\ncat > .yamllint <<EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .\n```\n\n## Backup and Disaster Recovery\n\n### Comprehensive Backup Automation\n```bash\ncat > playbooks/backup-automation.yml <<EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: \"0 2 * * *\"\n      files: \"0 3 * * *\"\n      configs: \"0 4 * * *\"\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: \"{{ backup_root }}/{{ item }}\"\n        state: directory\n        mode: '0755'\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: '0755'\n      when: \"'dbservers' in group_names\"\n\n    - name: Schedule database backups\n      cron:\n        name: \"MySQL backup\"\n        minute: \"0\"\n        hour: \"2\"\n        job: \"/usr/local/bin/mysql-backup.sh\"\n        user: root\n      when: \"'dbservers' in group_names\"\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: '0755'\n\n    - name: Schedule file backups\n      cron:\n        name: \"File system backup\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/local/bin/file-backup.sh\"\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: \"{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz\"\n        mode: '0600'\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: \"{{ backup_root }}/\"\n        dest: \"backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/\"\n        delete: yes\n        rsync_opts:\n          - \"--exclude=*.tmp\"\n          - \"--compress\"\n          - \"--archive\"\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: \"{{ backup_root }}\"\n        age: \"{{ backup_retention_days }}d\"\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: \"{{ item.path }}\"\n        state: absent\n      loop: \"{{ old_backups.files }}\"\nEOF\n```\n\n## Verification and Monitoring\n\n### Cross-Platform System Verification\n```bash\n# Create comprehensive verification playbook\ncat > playbooks/system-verification.yml <<EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - \"ansible_facts.services[item.service + '.service'].state == 'running'\"\n        fail_msg: \"Service {{ item.service }} is not running\"\n        success_msg: \"Service {{ item.service }} is healthy\"\n      loop: \"{{ health_checks }}\"\n      when: \"item.service + '.service' in ansible_facts.services\"\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: \"{{ item.host }}\"\n        port: \"{{ item.port }}\"\n        timeout: 5\n      loop:\n        - { host: \"8.8.8.8\", port: 53 }\n        - { host: \"1.1.1.1\", port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk '$5 > \"85%\" {print $0}'\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != \"\"\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}'\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: \"WARNING: Memory usage is {{ memory_usage.stdout }}%\"\n      when: memory_usage.stdout | int > 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep \"Failed password\" /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw >/dev/null 2>&1; then\n          ufw status\n        elif command -v firewall-cmd >/dev/null 2>&1; then\n          firewall-cmd --state\n        else\n          echo \"No supported firewall found\"\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        mode: '0644'\n\n    - name: Fetch health reports\n      fetch:\n        src: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        dest: \"./reports/\"\n        flat: yes\nEOF\n```\n\n### Continuous Compliance Monitoring\n```bash\ncat > playbooks/compliance-monitoring.yml <<EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: \"{{ 'auditd' if ansible_os_family == 'RedHat' else 'auditd' }}\"\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo \"CIS-CAT not installed, skipping\"\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check | mail -s 'AIDE Report' security@example.com\"\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF\n```\n\n## CI/CD Integration\n\n### Jenkins Pipeline Integration\n```bash\n# Create Jenkinsfile for Ansible automation\ncat > Jenkinsfile <<EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = 'ansible.cfg'\n        ANSIBLE_HOST_KEY_CHECKING = 'False'\n    }\n    \n    stages {\n        stage('Lint') {\n            steps {\n                sh 'ansible-lint playbooks/'\n                sh 'yamllint .'\n            }\n        }\n        \n        stage('Syntax Check') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --syntax-check'\n            }\n        }\n        \n        stage('Dry Run') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --check --diff'\n            }\n        }\n        \n        stage('Deploy to Staging') {\n            when {\n                branch 'develop'\n            }\n            steps {\n                sh 'ansible-playbook -i inventories/staging playbooks/site.yml'\n            }\n        }\n        \n        stage('Deploy to Production') {\n            when {\n                branch 'main'\n            }\n            steps {\n                input 'Deploy to Production?'\n                sh 'ansible-playbook -i inventories/production playbooks/site.yml'\n            }\n        }\n        \n        stage('Verify Deployment') {\n            steps {\n                sh 'ansible-playbook playbooks/system-verification.yml'\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: 'logs/*.log', allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: 'reports',\n                reportFiles: '*.html',\n                reportName: 'Ansible Report'\n            ])\n        }\n        failure {\n            emailext (\n                subject: \"Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Something is wrong with ${env.BUILD_URL}\",\n                to: \"${env.DEFAULT_RECIPIENTS}\"\n            )\n        }\n    }\n}\nEOF\n```\n\n### GitLab CI Integration\n```bash\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: \"False\"\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"develop\"'\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF\n```\n\n## 6. Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a \"uptime\"\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=\"debug=true\" --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a \"path=/tmp/test state=touch\" --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=\"specific task name\"\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a \"var=hostvars\"\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name \"*.yml\" -exec ansible-playbook {} --syntax-check \\;\n```\n\n### Advanced Debugging\n```bash\n# Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=\"profile_tasks_sort_order=none\"\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=\"ansible_python_interpreter=/usr/bin/python3\"\n\n# Network debugging\nansible all -m command -a \"ss -tulpn\"\nansible all -m command -a \"netstat -rn\"\n\n# Process debugging\nansible all -m command -a \"ps aux --sort=-%mem | head -10\"\n\n# Disk usage analysis\nansible all -m command -a \"df -h\"\nansible all -m command -a \"du -sh /var/log/*\"\n\n# Service debugging\nansible all -m systemd -a \"name=nginx\" --become\nansible all -m command -a \"systemctl status nginx\" --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=\"debug_vars=true\" --tags debug_vars\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.ansible.com/)\n- [Ansible Galaxy](https://galaxy.ansible.com/)\n- [Best Practices Guide](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html)\n- [Security Best Practices](https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices)\n- [Ansible Molecule Testing](https://molecule.readthedocs.io/)\n- [Community Collections](https://docs.ansible.com/ansible/latest/collections/index.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<p class=\"mobile-paragraph\">Ansible is a free and open-source agentless automation platform for configuration management, application deployment, and task automation across multiple systems. Originally developed by Michael DeHaan and acquired by Red Hat, Ansible serves as the industry standard for infrastructure automation with enterprise-grade security and scalability. It provides a robust alternative to proprietary solutions like VMware vRealize Automation, Microsoft System Center, or Puppet Enterprise without vendor lock-in or licensing costs.</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores for control machine (4+ cores recommended for large deployments)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum, 4GB+ recommended for large infrastructures, 8GB+ for enterprise</li>\n<li class=\"mobile-list-item\">Storage: 10GB+ available disk space for playbooks, roles, and logs</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity to all managed hosts</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong> (Control Machine): </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.15+ (Catalina or newer)</li>\n<li class=\"mobile-list-item\">Windows: WSL2 with Linux distribution (not natively supported)</li>\n<li class=\"mobile-list-item\">FreeBSD: 12.0+ (limited support)</li>\n<li class=\"mobile-list-item\"><strong>Target Hosts</strong>:</li>\n<li class=\"mobile-list-item\">Linux: Any distribution with Python 2.7+ or 3.5+</li>\n<li class=\"mobile-list-item\">Windows: PowerShell 3.0+ and .NET Framework 4.0+</li>\n<li class=\"mobile-list-item\">Network devices: SSH or specialized connection plugins</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">SSH access to target Linux/Unix hosts (port 22)</li>\n<li class=\"mobile-list-item\">WinRM access to Windows hosts (ports 5985/5986)</li>\n<li class=\"mobile-list-item\">HTTPS API access for cloud and network devices</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Python 3.8+ on control machine (3.9+ recommended)</li>\n<li class=\"mobile-list-item\">SSH client and key-based authentication setup</li>\n<li class=\"mobile-list-item\">Python 2.7+ or 3.5+ on target Linux hosts</li>\n<li class=\"mobile-list-item\">PowerShell and .NET Framework on Windows targets</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: SSH key access or password authentication to target hosts</li>\n<li class=\"mobile-list-item\"><strong>Special Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Sudo or root access on target systems for privileged operations</li>\n<li class=\"mobile-list-item\">Network connectivity between control machine and all managed hosts</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### openSUSE/SLES</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper refresh\n\n# Install Ansible and dependencies\nsudo zypper install -y ansible python3-pip python3-virtualenv\n\n# SLES 15 (requires additional modules)\nsudo SUSEConnect -p sle-module-python3/15.5/x86_64\nsudo zypper install -y ansible python3-pip\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### macOS</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Method 1: Using Homebrew (recommended)\n# Install Homebrew if not already installed\n/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;\n\n# Install Ansible\nbrew install ansible\n\n# Method 2: Using pip with virtual environment\n# Install Python 3 if needed\nbrew install python3\n\n# Create virtual environment\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages for cloud providers\npip install boto3 azure-cli google-cloud-storage\n\n# Add to shell profile for persistence\necho &#039;source ~/ansible-venv/bin/activate&#039; &gt;&gt; ~/.zshrc  # or ~/.bash_profile\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### FreeBSD</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from ports\ncd /usr/ports/sysutils/ansible &amp;&amp; make install clean\n\n# Or install from packages\npkg install py39-ansible\n\n# Install Python dependencies\npkg install python39 py39-pip py39-virtualenv\n\n# Create virtual environment (recommended)\npython3.9 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Windows (using WSL2)</p>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Enable WSL2 first\n# Run in PowerShell as Administrator\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n# Restart computer, then set WSL2 as default\nwsl --set-default-version 2\n\n# Install Ubuntu from Microsoft Store or command line\nwsl --install -d Ubuntu-22.04\n\n# Inside WSL Ubuntu environment:\nsudo apt update\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Create Windows-specific inventory for managing Windows hosts\nmkdir -p ~/ansible-windows\ncd ~/ansible-windows\n\n# Install Windows collections\nansible-galaxy collection install ansible.windows\nansible-galaxy collection install community.windows\nansible-galaxy collection install chocolatey.chocolatey\n\n# Create Windows inventory example\ncat &gt; inventory/windows-hosts.yml &lt;&lt;EOF\nall:\n  children:\n    windows:\n      hosts:\n        win-server-01:\n          ansible_host: 192.168.1.100\n          ansible_user: Administrator\n          ansible_password: &quot;{{ vault_windows_password }}&quot;\n          ansible_connection: winrm\n          ansible_winrm_server_cert_validation: ignore\n          ansible_winrm_transport: basic\n          ansible_winrm_port: 5985\n      vars:\n        ansible_shell_type: powershell\n        ansible_become_method: runas\n        ansible_become_user: Administrator\nEOF\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-pip-latest-version\" class=\"mobile-header\">Using pip (Latest Version)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho &#039;source ~/ansible-venv/bin/activate&#039; &gt;&gt; ~/.bashrc\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest &quot;$@&quot;\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho &#039;alias ansible=&quot;ansible-docker ansible&quot;&#039; &gt;&gt; ~/.bashrc\necho &#039;alias ansible-playbook=&quot;ansible-docker ansible-playbook&quot;&#039; &gt;&gt; ~/.bashrc</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>SSH Key Setup</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSH key pair for Ansible\nssh-keygen -t rsa -b 4096 -f ~/.ssh/ansible_key -C &quot;ansible-automation&quot;\n\n# Set proper permissions\nchmod 600 ~/.ssh/ansible_key\nchmod 644 ~/.ssh/ansible_key.pub\n\n# Copy public key to target hosts\nssh-copy-id -i ~/.ssh/ansible_key.pub user@target-host\n\n# Or manually copy the key\ncat ~/.ssh/ansible_key.pub | ssh user@target-host &quot;mkdir -p ~/.ssh &amp;&amp; cat &gt;&gt; ~/.ssh/authorized_keys&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Basic Ansible Configuration</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Ansible configuration directory\nmkdir -p ~/.ansible/{facts_cache,inventory_cache,cp,logs}\n\n# Create basic ansible.cfg\ncat &gt; ~/.ansible.cfg &lt;&lt;EOF\n[defaults]\nhost_key_checking = True\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\ndeprecation_warnings = True\ncommand_warnings = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\nEOF</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Create Basic Inventory</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create simple inventory file\nmkdir -p ~/ansible-project/inventory\ncat &gt; ~/ansible-project/inventory/hosts.yml &lt;&lt;EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-01:\n          ansible_host: 192.168.1.10\n        web-02:\n          ansible_host: 192.168.1.11\n    databases:\n      hosts:\n        db-01:\n          ansible_host: 192.168.1.20\n  vars:\n    ansible_user: ansible\n    ansible_ssh_private_key_file: ~/.ssh/ansible_key\nEOF</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Verify Target Host Python</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Python availability on target hosts\nansible all -i inventory/hosts.yml -m raw -a &quot;python3 --version || python --version&quot;\n\n# Install Python if needed (Ubuntu/Debian example)\nansible all -i inventory/hosts.yml -m raw -a &quot;apt update &amp;&amp; apt install -y python3&quot; --become</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test connectivity to all hosts\nansible all -i inventory/hosts.yml -m ping\n\n# Gather facts from all hosts\nansible all -i inventory/hosts.yml -m setup\n\n# Test privilege escalation\nansible all -i inventory/hosts.yml -m command -a &quot;whoami&quot; --become\n\n# Check disk space on all hosts\nansible all -i inventory/hosts.yml -m command -a &quot;df -h&quot;\n\n# Verify SSH keys are working\nansible all -i inventory/hosts.yml -m command -a &quot;uptime&quot;\n\n# Test basic file operations\nansible all -i inventory/hosts.yml -m file -a &quot;path=/tmp/ansible-test state=touch&quot; --become\nansible all -i inventory/hosts.yml -m file -a &quot;path=/tmp/ansible-test state=absent&quot; --become</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Ensure SSH key authentication is working and hosts are accessible before proceeding with complex playbooks!</p>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"ansible-controller-service-systemd\" class=\"mobile-header\">Ansible Controller Service (systemd)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Ansible controller service for scheduled playbooks\nsudo tee /etc/systemd/system/ansible-controller.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Ansible Controller Service\nAfter=network.target\nWants=network-online.target\n\n[Service]\nType=oneshot\nUser=ansible\nGroup=ansible\nWorkingDirectory=/opt/ansible\nExecStart=/usr/local/bin/ansible-playbook -i inventories/production playbooks/maintenance.yml\nStandardOutput=journal\nStandardError=journal\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create timer for regular execution\nsudo tee /etc/systemd/system/ansible-controller.timer &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Run Ansible Controller Service\nRequires=ansible-controller.service\n\n[Timer]\nOnCalendar=daily\nPersistent=true\nRandomizedDelaySec=300\n\n[Install]\nWantedBy=timers.target\nEOF\n\n# Enable and start the timer\nsudo systemctl daemon-reload\nsudo systemctl enable ansible-controller.timer\nsudo systemctl start ansible-controller.timer\n\n# Check status\nsudo systemctl status ansible-controller.timer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-towerawx-service-management\" class=\"mobile-header\">Ansible Tower/AWX Service Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># AWX service management (Docker-based)\n# Start AWX services\nsudo docker-compose -f /opt/awx/installer/docker-compose.yml up -d\n\n# Stop AWX services\nsudo docker-compose -f /opt/awx/installer/docker-compose.yml down\n\n# Restart AWX services\nsudo docker-compose -f /opt/awx/installer/docker-compose.yml restart\n\n# View AWX logs\nsudo docker-compose -f /opt/awx/installer/docker-compose.yml logs -f\n\n# Check AWX service status\nsudo docker-compose -f /opt/awx/installer/docker-compose.yml ps\n\n# Update AWX\ncd /opt/awx\ngit pull\nsudo docker-compose -f installer/docker-compose.yml down\nsudo docker-compose -f installer/docker-compose.yml build --no-cache\nsudo docker-compose -f installer/docker-compose.yml up -d</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-pull-service-for-pull-based-configuration\" class=\"mobile-header\">Ansible Pull Service (for Pull-based Configuration)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create ansible-pull service for decentralized management\nsudo tee /etc/systemd/system/ansible-pull.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Ansible Pull Configuration Management\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nType=oneshot\nUser=root\nExecStart=/usr/bin/ansible-pull -U https://github.com/company/ansible-config.git -i localhost, local.yml\nStandardOutput=journal\nStandardError=journal\nTimeoutStartSec=600\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create timer for ansible-pull\nsudo tee /etc/systemd/system/ansible-pull.timer &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Run Ansible Pull every 30 minutes\nRequires=ansible-pull.service\n\n[Timer]\nOnCalendar=*:0/30\nPersistent=true\nRandomizedDelaySec=120\n\n[Install]\nWantedBy=timers.target\nEOF\n\n# Enable ansible-pull timer\nsudo systemctl daemon-reload\nsudo systemctl enable ansible-pull.timer\nsudo systemctl start ansible-pull.timer</code></pre>\n      </div>\n    </div>\n<h3 id=\"cross-platform-service-management\" class=\"mobile-header\">Cross-Platform Service Management</h3>\n<p class=\"mobile-paragraph\">#### macOS (launchd)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create launchd plist for Ansible automation\nsudo tee /Library/LaunchDaemons/com.company.ansible.plist &gt; /dev/null &lt;&lt;EOF\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;\n&lt;plist version=&quot;1.0&quot;&gt;\n&lt;dict&gt;\n    &lt;key&gt;Label&lt;/key&gt;\n    &lt;string&gt;com.company.ansible&lt;/string&gt;\n    &lt;key&gt;ProgramArguments&lt;/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;/usr/local/bin/ansible-playbook&lt;/string&gt;\n        &lt;string&gt;-i&lt;/string&gt;\n        &lt;string&gt;/opt/ansible/inventory/hosts.yml&lt;/string&gt;\n        &lt;string&gt;/opt/ansible/playbooks/maintenance.yml&lt;/string&gt;\n    &lt;/array&gt;\n    &lt;key&gt;StartCalendarInterval&lt;/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;Hour&lt;/key&gt;\n        &lt;integer&gt;2&lt;/integer&gt;\n        &lt;key&gt;Minute&lt;/key&gt;\n        &lt;integer&gt;0&lt;/integer&gt;\n    &lt;/dict&gt;\n    &lt;key&gt;StandardOutPath&lt;/key&gt;\n    &lt;string&gt;/var/log/ansible.log&lt;/string&gt;\n    &lt;key&gt;StandardErrorPath&lt;/key&gt;\n    &lt;string&gt;/var/log/ansible.error.log&lt;/string&gt;\n    &lt;key&gt;UserName&lt;/key&gt;\n    &lt;string&gt;ansible&lt;/string&gt;\n    &lt;key&gt;WorkingDirectory&lt;/key&gt;\n    &lt;string&gt;/opt/ansible&lt;/string&gt;\n&lt;/dict&gt;\n&lt;/plist&gt;\nEOF\n\n# Load and start the service\nsudo launchctl load /Library/LaunchDaemons/com.company.ansible.plist\nsudo launchctl start com.company.ansible</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Windows (Task Scheduler via PowerShell)</p>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Create scheduled task for Ansible in Windows (running in WSL)\n$TaskName = &quot;Ansible-Configuration-Management&quot;\n$TaskDescription = &quot;Run Ansible playbooks for system configuration&quot;\n\n$Action = New-ScheduledTaskAction -Execute &quot;wsl&quot; -Argument &quot;ansible-playbook -i /home/ansible/inventory/hosts.yml /home/ansible/playbooks/windows-maintenance.yml&quot;\n\n$Trigger = New-ScheduledTaskTrigger -Daily -At &quot;02:00AM&quot;\n\n$Principal = New-ScheduledTaskPrincipal -UserID &quot;NT AUTHORITY\\SYSTEM&quot; -LogonType ServiceAccount\n\n$Settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -StartWhenAvailable\n\nRegister-ScheduledTask -TaskName $TaskName -Description $TaskDescription -Action $Action -Trigger $Trigger -Principal $Principal -Settings $Settings\n\n# Start the task\nStart-ScheduledTask -TaskName $TaskName\n\n# Check task status\nGet-ScheduledTask -TaskName $TaskName | Get-ScheduledTaskInfo</code></pre>\n      </div>\n    </div>\n<h2 id=\"project-structure-and-configuration\" class=\"mobile-header\">Project Structure and Configuration</h2>\n<h3 id=\"professional-project-structure\" class=\"mobile-header\">Professional Project Structure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat &gt; ansible.cfg &lt;&lt;EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-inventory-management\" class=\"mobile-header\">Advanced Inventory Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production inventory with groups and variables\ncat &gt; inventories/production/hosts.yml &lt;&lt;EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\n        mysql_replication_user: &quot;{{ vault_mysql_replication_user }}&quot;\n        mysql_replication_password: &quot;{{ vault_mysql_replication_password }}&quot;\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: &quot;{{ vault_haproxy_stats_password }}&quot;\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: &quot;0 2 * * *&quot;\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: &quot;0 1 * * *&quot;\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat &gt; inventories/production/aws_ec2.yml &lt;&lt;EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: &quot;&#039;web&#039; in tags.Role&quot;\n  databases: &quot;&#039;db&#039; in tags.Role&quot;\n  loadbalancers: &quot;&#039;lb&#039; in tags.Role&quot;\n  \n  # Group by environment\n  production: &quot;tags.Environment == &#039;production&#039;&quot;\n  staging: &quot;tags.Environment == &#039;staging&#039;&quot;\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == &quot;us-west-2a&quot;\n  us_west_2b: ec2_placement_availability_zone == &quot;us-west-2b&quot;\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-vault-security\" class=\"mobile-header\">Ansible Vault Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create strong vault password\nopenssl rand -base64 32 &gt; ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat &gt; group_vars/all/vars.yml &lt;&lt;EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\ngrafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: &quot;{{ vault_ssl_private_key }}&quot;\n\n# Security settings\nansible_ssh_common_args: &#039;-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts&#039;\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"comprehensive-playbooks\" class=\"mobile-header\">Comprehensive Playbooks</h2>\n<h3 id=\"system-hardening-playbook\" class=\"mobile-header\">System Hardening Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/system-hardening.yml &lt;&lt;EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [&quot;Debian&quot;, &quot;RedHat&quot;]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: &quot;*&quot;\n        state: latest\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: &quot;{{ security_packages }}&quot;\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: &#039;ansible ALL=(ALL) NOPASSWD:ALL&#039;\n        create: yes\n        mode: &#039;0440&#039;\n        validate: &#039;visudo -cf %s&#039;\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: &quot;{{ item.regexp }}&quot;\n        line: &quot;{{ item.line }}&quot;\n        backup: yes\n      loop:\n        - { regexp: &#039;^#?PermitRootLogin&#039;, line: &#039;PermitRootLogin no&#039; }\n        - { regexp: &#039;^#?PasswordAuthentication&#039;, line: &#039;PasswordAuthentication no&#039; }\n        - { regexp: &#039;^#?X11Forwarding&#039;, line: &#039;X11Forwarding no&#039; }\n        - { regexp: &#039;^#?MaxAuthTries&#039;, line: &#039;MaxAuthTries 3&#039; }\n        - { regexp: &#039;^#?ClientAliveInterval&#039;, line: &#039;ClientAliveInterval 300&#039; }\n        - { regexp: &#039;^#?ClientAliveCountMax&#039;, line: &#039;ClientAliveCountMax 0&#039; }\n        - { regexp: &#039;^#?Protocol&#039;, line: &#039;Protocol 2&#039; }\n        - { regexp: &#039;^#?LogLevel&#039;, line: &#039;LogLevel VERBOSE&#039; }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: &#039;SSH access&#039;\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: &quot;{{ item }}&quot;\n        enabled: no\n        state: stopped\n      loop: &quot;{{ disabled_services }}&quot;\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        mode: &quot;{{ item.mode }}&quot;\n        owner: root\n        group: root\n      loop:\n        - { path: &#039;/etc/passwd&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/shadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/group&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/gshadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/ssh/sshd_config&#039;, mode: &#039;0600&#039; }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;net.ipv4.ip_forward&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.randomize_va_space&#039;, value: &#039;2&#039; }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: &quot;{{ &#039;ssh&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sshd&#039; }}&quot;\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-deployment-playbook\" class=\"mobile-header\">Application Deployment Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/web-application-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: &quot;25%&quot;  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: &quot;{{ app_version | default(&#039;latest&#039;) }}&quot;\n    app_port: 3000\n    nginx_workers: &quot;{{ ansible_processor_cores }}&quot;\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: &quot;Server is in maintenance mode&quot;\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: &quot;{{ app_name }}&quot;\n        system: yes\n        shell: /bin/false\n        home: &quot;/opt/{{ app_name }}&quot;\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: &quot;{{ item }}&quot;\n        state: directory\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0755&#039;\n      loop:\n        - &quot;/opt/{{ app_name }}&quot;\n        - &quot;/opt/{{ app_name }}/releases&quot;\n        - &quot;/opt/{{ app_name }}/shared&quot;\n        - &quot;/var/log/{{ app_name }}&quot;\n\n    - name: Download application release\n      get_url:\n        url: &quot;https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        mode: &#039;0644&#039;\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/opt/{{ app_name }}/releases/&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        remote_src: yes\n        creates: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n\n    - name: Create symlink to current release\n      file:\n        src: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n        dest: &quot;/opt/{{ app_name }}/current&quot;\n        state: link\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: &quot;templates/{{ app_name }}.conf.j2&quot;\n        dest: &quot;/opt/{{ app_name }}/shared/{{ app_name }}.conf&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0640&#039;\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: &quot;templates/{{ app_name }}.service.j2&quot;\n        dest: &quot;/etc/systemd/system/{{ app_name }}.service&quot;\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: &quot;http://localhost:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: &quot;http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: &quot;/var/log/{{ app_name }}/deployments.log&quot;\n        line: &quot;{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}&quot;\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"infrastructure-as-code-playbook\" class=\"mobile-header\">Infrastructure as Code Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/infrastructure-provisioning.yml &lt;&lt;EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: &quot;{{ inventory_hostname }}&quot;\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: &quot;{{ ansible_default_ipv4.address }} {{ inventory_hostname }}&quot;\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: &quot;{{ base_packages[ansible_os_family] | default(base_packages[&#039;Debian&#039;]) }}&quot;\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chrony&#039; }}&quot;\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chronyd&#039; }}&quot;\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: &#039;0644&#039;\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: &quot;https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz&quot;\n        dest: /tmp/node_exporter.tar.gz\n        mode: &#039;0644&#039;\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;kernel.dmesg_restrict&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.kptr_restrict&#039;, value: &#039;2&#039; }\n        - { key: &#039;kernel.yama.ptrace_scope&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check&quot;\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-role-development\" class=\"mobile-header\">Advanced Role Development</h2>\n<h3 id=\"comprehensive-nginx-role\" class=\"mobile-header\">Comprehensive NGINX Role</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat &gt; roles/nginx/tasks/main.yml &lt;&lt;EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: &quot;{{ ansible_os_family }}.yml&quot;\n\n- name: Install NGINX\n  include_tasks: &quot;install-{{ ansible_os_family }}.yml&quot;\n\n- name: Create NGINX directories\n  file:\n    path: &quot;{{ item }}&quot;\n    state: directory\n    owner: root\n    group: root\n    mode: &#039;0755&#039;\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: &#039;nginx -t -c %s&#039;\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    backup: yes\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    dest: &quot;/etc/nginx/sites-enabled/{{ item.name }}.conf&quot;\n    state: link\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: &#039;0644&#039;\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat &gt; roles/nginx/tasks/install-Debian.yml &lt;&lt;EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: &quot;deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx&quot;\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat &gt; roles/nginx/tasks/install-RedHat.yml &lt;&lt;EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: &quot;https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/&quot;\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat &gt; roles/nginx/vars/main.yml &lt;&lt;EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - &quot;add_header X-Frame-Options SAMEORIGIN always;&quot;\n  - &quot;add_header X-Content-Type-Options nosniff always;&quot;\n  - &quot;add_header X-XSS-Protection &#039;1; mode=block&#039; always;&quot;\n  - &quot;add_header Strict-Transport-Security &#039;max-age=31536000; includeSubDomains&#039; always;&quot;\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: &quot;_&quot;\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat &gt; roles/nginx/templates/nginx.conf.j2 &lt;&lt;EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main &#039;\\$remote_addr - \\$remote_user [\\$time_local] &quot;\\$request&quot; &#039;\n                    &#039;\\$status \\$body_bytes_sent &quot;\\$http_referer&quot; &#039;\n                    &#039;&quot;\\$http_user_agent&quot; &quot;\\$http_x_forwarded_for&quot;&#039;;\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat &gt; roles/nginx/handlers/main.yml &lt;&lt;EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-and-compliance\" class=\"mobile-header\">Security and Compliance</h2>\n<h3 id=\"ansible-security-scanner-integration\" class=\"mobile-header\">Ansible Security Scanner Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security scanning playbook\ncat &gt; playbooks/security-scan.yml &lt;&lt;EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: &quot;/tmp/security-scans&quot;\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: &quot;{{ scan_results_dir }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: &quot;https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip&quot;\n        dest: &quot;/tmp/cis-benchmark.zip&quot;\n        mode: &#039;0644&#039;\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh &gt; {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: &quot;{{ lynis_result.stdout }}&quot;\n        dest: &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [&quot;RedHat&quot;, &quot;Debian&quot;]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: &quot;{{ item }}&quot;\n        dest: &quot;./security-reports/{{ inventory_hostname }}/&quot;\n        flat: yes\n      loop:\n        - &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html&quot;\n        - &quot;{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json&quot;\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: &quot;{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-awxtower-integration\" class=\"mobile-header\">Ansible AWX/Tower Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible AWX (open source)\ncat &gt; playbooks/install-awx.yml &lt;&lt;EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: &quot;{{ vault_awx_admin_password }}&quot;\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: &#039;0644&#039;\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: &quot;http://localhost:80/api/v2/ping/&quot;\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: &quot;http://localhost:80/api/v2/organizations/&quot;\n        method: POST\n        user: &quot;{{ awx_admin_user }}&quot;\n        password: &quot;{{ awx_admin_password }}&quot;\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: &quot;Production&quot;\n          description: &quot;Production environment organization&quot;\n        status_code: [200, 201, 409]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"multi-cloud-automation\" class=\"mobile-header\">Multi-Cloud Automation</h2>\n<h3 id=\"aws-infrastructure-automation\" class=\"mobile-header\">AWS Infrastructure Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/aws-infrastructure.yml &lt;&lt;EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: &quot;{{ aws_region | default(&#039;us-west-2&#039;) }}&quot;\n    vpc_cidr: &quot;{{ vpc_cidr | default(&#039;10.0.0.0/16&#039;) }}&quot;\n    environment: &quot;{{ environment | default(&#039;production&#039;) }}&quot;\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          &quot;tag:Name&quot;: &quot;{{ environment }}-vpc&quot;\n        region: &quot;{{ aws_region }}&quot;\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: &quot;{{ environment }}-vpc&quot;\n        cidr_block: &quot;{{ vpc_cidr }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: &quot;{{ environment }}-web-sg&quot;\n        description: &quot;Security group for web servers&quot;\n        vpc_id: &quot;{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: &quot;HTTP and HTTPS access&quot;\n          - proto: tcp\n            ports:\n              - 22\n            group_id: &quot;{{ environment }}-bastion-sg&quot;\n            rule_desc: &quot;SSH from bastion&quot;\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: &quot;{{ environment }}-web-{{ item }}&quot;\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: &quot;{{ ec2_key_name }}&quot;\n        vpc_subnet_id: &quot;{{ web_subnet_id }}&quot;\n        security_groups:\n          - &quot;{{ environment }}-web-sg&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          Role: webserver\n          Ansible: managed\n      loop: &quot;{{ range(1, web_server_count + 1) | list }}&quot;\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: &quot;{{ item.instances[0].tags.Name }}&quot;\n        hostname: &quot;{{ item.instances[0].public_ip_address }}&quot;\n        groups: webservers\n        ansible_ssh_private_key_file: &quot;~/.ssh/{{ ec2_key_name }}.pem&quot;\n        ansible_user: ec2-user\n      loop: &quot;{{ web_instances.results }}&quot;\n      changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-cluster-management\" class=\"mobile-header\">Kubernetes Cluster Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/k8s-cluster-management.yml &lt;&lt;EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: &quot;1.28.2&quot;\n    containerd_version: &quot;1.6.24&quot;\n    cni_version: &quot;1.3.0&quot;\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb &gt;= 1700\n          - ansible_processor_cores &gt;= 2\n        fail_msg: &quot;System doesn&#039;t meet minimum requirements&quot;\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: &quot;{{ item }}&quot;\n      loop: &quot;{{ groups[&#039;k8s_all&#039;] }}&quot;\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: &quot;{{ containerd_version }}&quot;\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: &quot;{{ k8s_version }}&quot;\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: &quot;{{ ansible_env.HOME }}/.kube&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    - name: Copy admin.conf to user&#039;s kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n        owner: &quot;{{ ansible_user }}&quot;\n        group: &quot;{{ ansible_user }}&quot;\n        mode: &#039;0644&#039;\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Join worker nodes to cluster\n      shell: &quot;{{ hostvars[groups[&#039;k8s_masters&#039;][0]][&#039;join_command&#039;].stdout }}&quot;\n      when: inventory_hostname in groups[&#039;k8s_workers&#039;]\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n      register: cluster_status\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-level-tuning\" class=\"mobile-header\">System-Level Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize control machine for Ansible performance\n# Kernel parameters for network performance\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;EOF\n# Ansible performance optimization\nnet.core.somaxconn = 8192\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.tcp_max_tw_buckets = 400000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 16777216\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 16777216\nfs.file-max = 100000\nEOF\n\nsudo sysctl -p\n\n# Set resource limits for Ansible user\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;EOF\nansible soft nofile 65536\nansible hard nofile 65536\nansible soft nproc 32768\nansible hard nproc 32768\nEOF\n\n# SSH client optimization\nmkdir -p ~/.ssh\ncat &gt;&gt; ~/.ssh/config &lt;&lt;EOF\nHost *\n    ControlMaster auto\n    ControlPersist 3600\n    ControlPath ~/.ssh/sockets/%r@%h-%p\n    Compression yes\n    ServerAliveInterval 60\n    ServerAliveCountMax 3\n    TCPKeepAlive yes\n    ConnectTimeout 10\n    StrictHostKeyChecking yes\n    UserKnownHostsFile ~/.ssh/known_hosts\nEOF\n\nmkdir -p ~/.ssh/sockets</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-performance-configuration\" class=\"mobile-header\">Ansible Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># High-performance ansible.cfg\ncat &gt; ansible-performance.cfg &lt;&lt;EOF\n[defaults]\n# Core performance settings\nforks = 50\npoll_interval = 1\ninternal_poll_interval = 0.001\ntimeout = 30\nhost_key_checking = True\ngather_timeout = 30\ngathering = smart\nfact_caching = redis\nfact_caching_connection = localhost:6379:0\nfact_caching_timeout = 86400\ncache_plugins = memory\n\n# Callback and display optimization\nstdout_callback = yaml\ncallbacks_enabled = timer, profile_tasks, profile_roles\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\ndisplay_failed_stderr = True\n\n# SSH optimization\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey -o Compression=yes\npipelining = True\ncontrol_path = ~/.ansible/sockets/%%h-%%p-%%r\nretries = 3\nssh_executable = /usr/bin/ssh\n\n# Connection persistence\n[persistent_connection]\nconnect_timeout = 30\nconnect_retry_timeout = 15\ncommand_timeout = 30\n\n# Privilege escalation optimization\n[privilege_escalation]\nbecome_plugins = sudo, su, pbrun, pfexec, doas, dzdo, ksu, runas, machinectl\nbecome_allow_same_user = False\nbecome_ask_pass = False\nEOF\n\n# Use Redis for fact caching (install Redis first)\nsudo apt install -y redis-server  # or relevant package manager\npip install redis\n\n# Create performance monitoring script\ncat &gt; ansible-performance-monitor.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n# Monitor Ansible performance metrics\n\nPLAYBOOK=&quot;$1&quot;\nif [ -z &quot;$PLAYBOOK&quot; ]; then\n    echo &quot;Usage: $0 &lt;playbook&gt;&quot;\n    exit 1\nfi\n\n# Enable profiling\nexport ANSIBLE_CALLBACK_PLUGINS=&quot;~/.ansible/plugins/callback&quot;\nexport ANSIBLE_CALLBACKS_ENABLED=&quot;timer,profile_tasks,profile_roles&quot;\n\n# Monitor system resources during playbook execution\n(\n    while pgrep -f ansible-playbook &gt; /dev/null; do\n        echo &quot;$(date): CPU: $(top -bn1 | grep &quot;Cpu(s)&quot; | awk &#039;{print $2}&#039;), Memory: $(free -m | awk &#039;NR==2{printf &quot;%.1f%%&quot;, $3*100/$2 }&#039;)&quot;\n        sleep 5\n    done\n) &amp;\n\n# Run playbook with timing\ntime ansible-playbook &quot;$PLAYBOOK&quot; --diff\n\n# Kill monitoring\npkill -P $$\nEOF\n\nchmod +x ansible-performance-monitor.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"parallel-execution-strategies\" class=\"mobile-header\">Parallel Execution Strategies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create high-performance playbook configuration\ncat &gt; playbooks/high-performance-deployment.yml &lt;&lt;EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: &quot;30%&quot;   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk &#039;{print $(NF-2)}&#039; | sed &#039;s/,//&#039;\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float &gt; 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: &quot;*&quot;\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: &quot;{{ item.src }}&quot;\n        dest: &quot;{{ item.dest }}&quot;\n        mode: &quot;{{ item.mode | default(&#039;0644&#039;) }}&quot;\n        backup: yes\n      loop:\n        - { src: &quot;nginx.conf.j2&quot;, dest: &quot;/etc/nginx/nginx.conf&quot; }\n        - { src: &quot;mysql.cnf.j2&quot;, dest: &quot;/etc/mysql/my.cnf&quot; }\n        - { src: &quot;redis.conf.j2&quot;, dest: &quot;/etc/redis/redis.conf&quot; }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: &quot;{{ item.ansible_job_id }}&quot;\n      loop: &quot;{{ config_deployment.results }}&quot;\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: &quot;{{ item }}&quot;\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: &quot;restart all services&quot;\nEOF\n\n# Performance monitoring playbook\ncat &gt; playbooks/performance-monitoring.yml &lt;&lt;EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: &quot;{{ monitoring_tools }}&quot;\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Enable system statistics collection\n      service:\n        name: &quot;{{ &#039;sysstat&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sysstat&#039; }}&quot;\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule performance monitoring\n      cron:\n        name: &quot;Performance monitoring&quot;\n        minute: &quot;*/5&quot;\n        job: &quot;/usr/local/bin/performance-monitor.sh&quot;\n        user: root\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration-for-ansible-awxtower\" class=\"mobile-header\">nginx Configuration for Ansible AWX/Tower</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/ansible-awx\nupstream ansible_awx {\n    server 127.0.0.1:8080;\n    server 127.0.0.1:8081 backup;\n}\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name ansible.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name ansible.example.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/ssl/certs/ansible.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/ansible.example.com.key;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header X-Frame-Options DENY;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n    add_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;;\n\n    location / {\n        proxy_pass http://ansible_awx;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_buffering off;\n        proxy_request_buffering off;\n    }\n\n    # WebSocket support\n    location /websocket/ {\n        proxy_pass http://ansible_awx;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nglobal\n    daemon\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    log stdout local0 info\n\ndefaults\n    mode http\n    timeout connect 5000ms\n    timeout client 50000ms\n    timeout server 50000ms\n    option httplog\n\nfrontend ansible_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/ansible.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend ansible_backend\n\nbackend ansible_backend\n    balance roundrobin\n    option httpchk GET /api/v2/ping/\n    server awx1 127.0.0.1:8080 check\n    server awx2 127.0.0.1:8081 check backup</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/ansible-awx.conf\n&lt;VirtualHost *:80&gt;\n    ServerName ansible.example.com\n    Redirect permanent / https://ansible.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName ansible.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/ansible.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/ansible.example.com.key\n    \n    # Security headers\n    Header always set X-Frame-Options DENY\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass /websocket/ ws://127.0.0.1:8080/websocket/\n    ProxyPassReverse /websocket/ ws://127.0.0.1:8080/websocket/\n    \n    ProxyPass / http://127.0.0.1:8080/\n    ProxyPassReverse / http://127.0.0.1:8080/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring-and-logging\" class=\"mobile-header\">Built-in Monitoring and Logging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive monitoring playbook\ncat &gt; playbooks/ansible-monitoring.yml &lt;&lt;EOF\n---\n- name: Ansible Infrastructure Monitoring\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - name: prometheus\n        port: 9090\n      - name: grafana\n        port: 3000\n      - name: alertmanager\n        port: 9093\n    \n    log_paths:\n      - /var/log/ansible\n      - /var/log/awx\n      - /var/log/syslog\n      - /var/log/auth.log\n\n  tasks:\n    # Install monitoring agents\n    - name: Install Prometheus Node Exporter\n      get_url:\n        url: https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz\n        dest: /tmp/node_exporter.tar.gz\n        mode: &#039;0644&#039;\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /opt/\n        remote_src: yes\n        creates: /opt/node_exporter-1.6.1.linux-amd64\n\n    - name: Create node_exporter user\n      user:\n        name: node_exporter\n        system: yes\n        shell: /bin/false\n        home: /var/lib/node_exporter\n\n    - name: Install Node Exporter binary\n      copy:\n        src: /opt/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: &#039;0755&#039;\n        owner: node_exporter\n        group: node_exporter\n        remote_src: yes\n\n    - name: Create Node Exporter service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n      notify: restart node_exporter\n\n    - name: Enable and start Node Exporter\n      systemd:\n        name: node_exporter\n        state: started\n        enabled: yes\n        daemon_reload: yes\n\n    # Log monitoring setup\n    - name: Install rsyslog for centralized logging\n      package:\n        name: rsyslog\n        state: present\n\n    - name: Configure rsyslog for Ansible logs\n      template:\n        src: templates/ansible-rsyslog.conf.j2\n        dest: /etc/rsyslog.d/50-ansible.conf\n        backup: yes\n      notify: restart rsyslog\n\n    # Create monitoring scripts\n    - name: Create Ansible health check script\n      template:\n        src: templates/ansible-health-check.sh.j2\n        dest: /usr/local/bin/ansible-health-check.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule health checks\n      cron:\n        name: &quot;Ansible health check&quot;\n        minute: &quot;*/5&quot;\n        job: &quot;/usr/local/bin/ansible-health-check.sh&quot;\n        user: root\n\n  handlers:\n    - name: restart node_exporter\n      systemd:\n        name: node_exporter\n        state: restarted\n\n    - name: restart rsyslog\n      systemd:\n        name: rsyslog\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"prometheus-configuration-for-ansible\" class=\"mobile-header\">Prometheus Configuration for Ansible</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - &quot;ansible_rules.yml&quot;\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - alertmanager:9093\n\nscrape_configs:\n  - job_name: &#039;ansible-nodes&#039;\n    static_configs:\n      - targets:\n        - &#039;ansible-control:9100&#039;\n        - &#039;web-01:9100&#039;\n        - &#039;web-02:9100&#039;\n        - &#039;db-01:9100&#039;\n\n  - job_name: &#039;ansible-awx&#039;\n    static_configs:\n      - targets:\n        - &#039;awx-web:8080&#039;\n        - &#039;awx-task:8080&#039;\n    metrics_path: &#039;/api/v2/metrics/&#039;\n    scrape_interval: 30s\n\n  - job_name: &#039;node-exporter&#039;\n    static_configs:\n      - targets:\n        - &#039;node1:9100&#039;\n        - &#039;node2:9100&#039;\n        - &#039;node3:9100&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"grafana-dashboard-configuration\" class=\"mobile-header\">Grafana Dashboard Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"json\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">json</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-json\">{\n  &quot;dashboard&quot;: {\n    &quot;title&quot;: &quot;Ansible Infrastructure Monitoring&quot;,\n    &quot;panels&quot;: [\n      {\n        &quot;title&quot;: &quot;Ansible Job Success Rate&quot;,\n        &quot;type&quot;: &quot;stat&quot;,\n        &quot;targets&quot;: [\n          {\n            &quot;expr&quot;: &quot;(ansible_job_successful_total / ansible_job_total) * 100&quot;,\n            &quot;legendFormat&quot;: &quot;Success Rate %&quot;\n          }\n        ]\n      },\n      {\n        &quot;title&quot;: &quot;Node Resource Usage&quot;,\n        &quot;type&quot;: &quot;graph&quot;,\n        &quot;targets&quot;: [\n          {\n            &quot;expr&quot;: &quot;100 - (avg(rate(node_cpu_seconds_total{mode=\\&quot;idle\\&quot;}[5m])) * 100)&quot;,\n            &quot;legendFormat&quot;: &quot;CPU Usage %&quot;\n          },\n          {\n            &quot;expr&quot;: &quot;(1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100&quot;,\n            &quot;legendFormat&quot;: &quot;Memory Usage %&quot;\n          }\n        ]\n      }\n    ]\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-integration-with-ansible\" class=\"mobile-header\">Python Integration with Ansible</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">#!/usr/bin/env python3\n# ansible_integration.py\n\nimport ansible_runner\nimport subprocess\nimport json\nimport os\nfrom pathlib import Path\n\nclass AnsibleManager:\n    def __init__(self, project_dir, inventory_path):\n        self.project_dir = Path(project_dir)\n        self.inventory_path = inventory_path\n        self.private_data_dir = self.project_dir / &#039;runner_data&#039;\n        \n    def run_playbook(self, playbook_name, extra_vars=None, limit=None):\n        &quot;&quot;&quot;Run an Ansible playbook with error handling&quot;&quot;&quot;\n        try:\n            result = ansible_runner.run(\n                private_data_dir=str(self.private_data_dir),\n                playbook=playbook_name,\n                inventory=self.inventory_path,\n                extravars=extra_vars or {},\n                limit=limit,\n                verbosity=1\n            )\n            \n            return {\n                &#039;status&#039;: result.status,\n                &#039;rc&#039;: result.rc,\n                &#039;stdout&#039;: result.stdout.read() if result.stdout else &#039;&#039;,\n                &#039;stats&#039;: result.stats\n            }\n        except Exception as e:\n            return {&#039;status&#039;: &#039;failed&#039;, &#039;error&#039;: str(e)}\n    \n    def run_ad_hoc_command(self, module, module_args, hosts=&#039;all&#039;):\n        &quot;&quot;&quot;Run ad-hoc Ansible commands&quot;&quot;&quot;\n        try:\n            result = ansible_runner.run(\n                private_data_dir=str(self.private_data_dir),\n                inventory=self.inventory_path,\n                module=module,\n                module_args=module_args,\n                host_pattern=hosts\n            )\n            \n            return {\n                &#039;status&#039;: result.status,\n                &#039;rc&#039;: result.rc,\n                &#039;events&#039;: [event for event in result.events if event[&#039;event&#039;] == &#039;runner_on_ok&#039;]\n            }\n        except Exception as e:\n            return {&#039;status&#039;: &#039;failed&#039;, &#039;error&#039;: str(e)}\n    \n    def get_inventory_info(self):\n        &quot;&quot;&quot;Get inventory information&quot;&quot;&quot;\n        cmd = [&#039;ansible-inventory&#039;, &#039;-i&#039;, self.inventory_path, &#039;--list&#039;]\n        try:\n            result = subprocess.run(cmd, capture_output=True, text=True, check=True)\n            return json.loads(result.stdout)\n        except subprocess.CalledProcessError as e:\n            return {&#039;error&#039;: e.stderr}\n\n# Example usage\nif __name__ == &#039;__main__&#039;:\n    ansible_mgr = AnsibleManager(\n        project_dir=&#039;/home/ansible/infrastructure&#039;,\n        inventory_path=&#039;inventories/production/hosts.yml&#039;\n    )\n    \n    # Run a playbook\n    result = ansible_mgr.run_playbook(\n        &#039;site.yml&#039;,\n        extra_vars={&#039;environment&#039;: &#039;production&#039;},\n        limit=&#039;webservers&#039;\n    )\n    print(f&quot;Playbook execution: {result[&#039;status&#039;]}&quot;)\n    \n    # Run ad-hoc command\n    ping_result = ansible_mgr.run_ad_hoc_command(&#039;ping&#039;, &#039;&#039;, &#039;all&#039;)\n    print(f&quot;Ping test: {ping_result[&#039;status&#039;]}&quot;)\n    \n    # Get inventory info\n    inventory = ansible_mgr.get_inventory_info()\n    print(f&quot;Managed hosts: {len(inventory.get(&#039;_meta&#039;, {}).get(&#039;hostvars&#039;, {}))}&quot;)</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-integration\" class=\"mobile-header\">Node.js Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// ansible_integration.js\nconst { spawn, exec } = require(&#039;child_process&#039;);\nconst path = require(&#039;path&#039;);\nconst fs = require(&#039;fs&#039;).promises;\n\nclass AnsibleManager {\n    constructor(projectDir, inventoryPath) {\n        this.projectDir = projectDir;\n        this.inventoryPath = inventoryPath;\n    }\n    \n    async runPlaybook(playbookName, options = {}) {\n        return new Promise((resolve, reject) =&gt; {\n            const args = [\n                &#039;ansible-playbook&#039;,\n                &#039;-i&#039;, this.inventoryPath,\n                path.join(this.projectDir, &#039;playbooks&#039;, playbookName)\n            ];\n            \n            if (options.limit) {\n                args.push(&#039;--limit&#039;, options.limit);\n            }\n            \n            if (options.extraVars) {\n                args.push(&#039;--extra-vars&#039;, JSON.stringify(options.extraVars));\n            }\n            \n            if (options.check) {\n                args.push(&#039;--check&#039;);\n            }\n            \n            const process = spawn(args[0], args.slice(1), {\n                cwd: this.projectDir,\n                stdio: [&#039;pipe&#039;, &#039;pipe&#039;, &#039;pipe&#039;]\n            });\n            \n            let stdout = &#039;&#039;;\n            let stderr = &#039;&#039;;\n            \n            process.stdout.on(&#039;data&#039;, (data) =&gt; {\n                stdout += data.toString();\n            });\n            \n            process.stderr.on(&#039;data&#039;, (data) =&gt; {\n                stderr += data.toString();\n            });\n            \n            process.on(&#039;close&#039;, (code) =&gt; {\n                resolve({\n                    exitCode: code,\n                    stdout: stdout,\n                    stderr: stderr,\n                    success: code === 0\n                });\n            });\n            \n            process.on(&#039;error&#039;, reject);\n        });\n    }\n    \n    async runAdHocCommand(module, args, hosts = &#039;all&#039;) {\n        return new Promise((resolve, reject) =&gt; {\n            const command = `ansible ${hosts} -i ${this.inventoryPath} -m ${module} -a &quot;${args}&quot;`;\n            \n            exec(command, { cwd: this.projectDir }, (error, stdout, stderr) =&gt; {\n                if (error) {\n                    reject({ error, stderr });\n                } else {\n                    resolve({ stdout, stderr });\n                }\n            });\n        });\n    }\n    \n    async getInventoryInfo() {\n        return new Promise((resolve, reject) =&gt; {\n            const command = `ansible-inventory -i ${this.inventoryPath} --list`;\n            \n            exec(command, { cwd: this.projectDir }, (error, stdout, stderr) =&gt; {\n                if (error) {\n                    reject({ error, stderr });\n                } else {\n                    try {\n                        resolve(JSON.parse(stdout));\n                    } catch (parseError) {\n                        reject({ error: parseError, stdout });\n                    }\n                }\n            });\n        });\n    }\n}\n\n// Example usage\nasync function main() {\n    const ansible = new AnsibleManager(&#039;/home/ansible/infrastructure&#039;, &#039;inventories/production/hosts.yml&#039;);\n    \n    try {\n        // Run playbook\n        const result = await ansible.runPlaybook(&#039;site.yml&#039;, {\n            limit: &#039;webservers&#039;,\n            extraVars: { environment: &#039;production&#039; },\n            check: true\n        });\n        console.log(&#039;Playbook check result:&#039;, result.success);\n        \n        // Run ad-hoc command\n        const pingResult = await ansible.runAdHocCommand(&#039;ping&#039;, &#039;&#039;, &#039;all&#039;);\n        console.log(&#039;Ping result:&#039;, pingResult.stdout);\n        \n        // Get inventory\n        const inventory = await ansible.getInventoryInfo();\n        console.log(&#039;Inventory hosts:&#039;, Object.keys(inventory._meta.hostvars).length);\n        \n    } catch (error) {\n        console.error(&#039;Error:&#039;, error);\n    }\n}\n\nif (require.main === module) {\n    main();\n}\n\nmodule.exports = AnsibleManager;</code></pre>\n      </div>\n    </div>\n<h3 id=\"rest-api-integration\" class=\"mobile-header\">REST API Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">#!/usr/bin/env python3\n# ansible_rest_api.py\n\nfrom flask import Flask, request, jsonify\nimport ansible_runner\nimport tempfile\nimport os\nimport yaml\nfrom pathlib import Path\n\napp = Flask(__name__)\n\nclass AnsibleAPI:\n    def __init__(self, base_dir):\n        self.base_dir = Path(base_dir)\n        self.inventory_file = self.base_dir / &#039;inventory&#039; / &#039;hosts.yml&#039;\n        \n    def execute_playbook(self, playbook_content, inventory_data, extra_vars=None):\n        &quot;&quot;&quot;Execute a playbook with given inventory and variables&quot;&quot;&quot;\n        with tempfile.TemporaryDirectory() as tmpdir:\n            tmpdir = Path(tmpdir)\n            \n            # Write playbook\n            playbook_file = tmpdir / &#039;playbook.yml&#039;\n            with open(playbook_file, &#039;w&#039;) as f:\n                yaml.dump(playbook_content, f, default_flow_style=False)\n            \n            # Write inventory\n            inventory_file = tmpdir / &#039;inventory.yml&#039;\n            with open(inventory_file, &#039;w&#039;) as f:\n                yaml.dump(inventory_data, f, default_flow_style=False)\n            \n            # Run playbook\n            result = ansible_runner.run(\n                private_data_dir=str(tmpdir),\n                playbook=&#039;playbook.yml&#039;,\n                inventory=str(inventory_file),\n                extravars=extra_vars or {}\n            )\n            \n            return {\n                &#039;status&#039;: result.status,\n                &#039;rc&#039;: result.rc,\n                &#039;stats&#039;: result.stats,\n                &#039;events&#039;: [e for e in result.events if e[&#039;event&#039;] == &#039;playbook_on_stats&#039;]\n            }\n\nansible_api = AnsibleAPI(&#039;/home/ansible&#039;)\n\n@app.route(&#039;/api/playbook/run&#039;, methods=[&#039;POST&#039;])\ndef run_playbook():\n    try:\n        data = request.get_json()\n        \n        playbook = data.get(&#039;playbook&#039;)\n        inventory = data.get(&#039;inventory&#039;)\n        extra_vars = data.get(&#039;extra_vars&#039;, {})\n        \n        if not playbook or not inventory:\n            return jsonify({&#039;error&#039;: &#039;playbook and inventory are required&#039;}), 400\n            \n        result = ansible_api.execute_playbook(playbook, inventory, extra_vars)\n        \n        return jsonify({\n            &#039;success&#039;: result[&#039;status&#039;] == &#039;successful&#039;,\n            &#039;status&#039;: result[&#039;status&#039;],\n            &#039;return_code&#039;: result[&#039;rc&#039;],\n            &#039;stats&#039;: result[&#039;stats&#039;]\n        })\n        \n    except Exception as e:\n        return jsonify({&#039;error&#039;: str(e)}), 500\n\n@app.route(&#039;/api/inventory&#039;, methods=[&#039;GET&#039;])\ndef get_inventory():\n    try:\n        with open(ansible_api.inventory_file, &#039;r&#039;) as f:\n            inventory = yaml.safe_load(f)\n        return jsonify(inventory)\n    except Exception as e:\n        return jsonify({&#039;error&#039;: str(e)}), 500\n\n@app.route(&#039;/api/health&#039;, methods=[&#039;GET&#039;])\ndef health_check():\n    return jsonify({\n        &#039;status&#039;: &#039;healthy&#039;,\n        &#039;ansible_version&#039;: &#039;2.15.0&#039;,  # This should be dynamic\n        &#039;base_dir&#039;: str(ansible_api.base_dir)\n    })\n\nif __name__ == &#039;__main__&#039;:\n    app.run(host=&#039;0.0.0.0&#039;, port=5000, debug=False)</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# ansible-maintenance.sh - Comprehensive maintenance script\n\n# Set variables\nANSIBLE_HOME=&quot;/home/ansible&quot;\nLOG_FILE=&quot;/var/log/ansible-maintenance.log&quot;\nBACKUP_DIR=&quot;/backup/ansible&quot;\nDATE=$(date +&quot;%Y%m%d_%H%M%S&quot;)\n\n# Logging function\nlog() {\n    echo &quot;[$(date &#039;+%Y-%m-%d %H:%M:%S&#039;)] $1&quot; | tee -a &quot;$LOG_FILE&quot;\n}\n\nlog &quot;Starting Ansible maintenance tasks&quot;\n\n# 1. Update Ansible and collections\nlog &quot;Updating Ansible and collections&quot;\npip install --upgrade ansible ansible-core\nansible-galaxy collection install --upgrade community.general\nansible-galaxy collection install --upgrade ansible.posix\nansible-galaxy collection install --upgrade kubernetes.core\n\n# 2. Clean up old logs\nlog &quot;Cleaning up old log files&quot;\nfind &quot;$ANSIBLE_HOME/logs&quot; -type f -name &quot;*.log&quot; -mtime +30 -delete\nfind /var/log/ansible -type f -name &quot;*.log&quot; -mtime +30 -delete\n\n# 3. Update facts cache\nlog &quot;Refreshing facts cache&quot;\nansible all -m setup --tree /tmp/facts_cache/\n\n# 4. Validate all playbooks\nlog &quot;Validating playbooks syntax&quot;\nfind &quot;$ANSIBLE_HOME/playbooks&quot; -name &quot;*.yml&quot; -exec ansible-playbook {} --syntax-check \\;\nif [ $? -eq 0 ]; then\n    log &quot;All playbooks passed syntax validation&quot;\nelse\n    log &quot;ERROR: Some playbooks failed syntax validation&quot;\nfi\n\n# 5. Check inventory health\nlog &quot;Checking inventory health&quot;\nansible-inventory --list &gt; /tmp/inventory_check.json\nif [ $? -eq 0 ]; then\n    log &quot;Inventory syntax is valid&quot;\nelse\n    log &quot;ERROR: Inventory has syntax errors&quot;\nfi\n\n# 6. Test connectivity to all hosts\nlog &quot;Testing connectivity to managed hosts&quot;\nansible all -m ping --one-line &gt; &quot;/tmp/ping_results_$DATE.txt&quot;\nFAILED_HOSTS=$(grep -c &quot;FAILED&quot; &quot;/tmp/ping_results_$DATE.txt&quot;)\nif [ &quot;$FAILED_HOSTS&quot; -gt 0 ]; then\n    log &quot;WARNING: $FAILED_HOSTS hosts failed connectivity test&quot;\n    grep &quot;FAILED&quot; &quot;/tmp/ping_results_$DATE.txt&quot; &gt;&gt; &quot;$LOG_FILE&quot;\nelse\n    log &quot;All hosts are reachable&quot;\nfi\n\n# 7. Backup configurations\nlog &quot;Creating configuration backup&quot;\nmkdir -p &quot;$BACKUP_DIR/$DATE&quot;\ntar -czf &quot;$BACKUP_DIR/$DATE/ansible-config-$DATE.tar.gz&quot; \\\n    &quot;$ANSIBLE_HOME&quot;/{ansible.cfg,inventories,group_vars,host_vars,playbooks,roles}\n\n# 8. Clean up old backups (keep 30 days)\nlog &quot;Cleaning up old backups&quot;\nfind &quot;$BACKUP_DIR&quot; -type d -mtime +30 -exec rm -rf {} \\; 2&gt;/dev/null\n\n# 9. Update SSH known_hosts\nlog &quot;Updating SSH known_hosts&quot;\nfor host in $(ansible all --list-hosts | grep -v hosts); do\n    ssh-keyscan -H &quot;$host&quot; &gt;&gt; ~/.ssh/known_hosts 2&gt;/dev/null\ndone\nsort -u ~/.ssh/known_hosts &gt; ~/.ssh/known_hosts.tmp &amp;&amp; mv ~/.ssh/known_hosts.tmp ~/.ssh/known_hosts\n\n# 10. Generate maintenance report\nlog &quot;Generating maintenance report&quot;\nREPORT_FILE=&quot;/tmp/ansible-maintenance-report-$DATE.txt&quot;\ncat &gt; &quot;$REPORT_FILE&quot; &lt;&lt; EOF\nAnsible Maintenance Report - $DATE\n========================================\n\nAnsible Version: $(ansible --version | head -1)\nPython Version: $(python3 --version)\nSystem: $(uname -a)\n\nInventory Summary:\n$(ansible-inventory --list | jq &#039;.&quot;_meta&quot;.&quot;hostvars&quot; | keys | length&#039;) managed hosts\n\nConnectivity Test Results:\n$(wc -l &lt; &quot;/tmp/ping_results_$DATE.txt&quot;) total hosts tested\n$FAILED_HOSTS hosts failed connectivity\n\nPlaybook Validation: $(find &quot;$ANSIBLE_HOME/playbooks&quot; -name &quot;*.yml&quot; | wc -l) playbooks checked\n\nDisk Usage:\n$(df -h &quot;$ANSIBLE_HOME&quot; | tail -1)\n\nBackup Created: $BACKUP_DIR/$DATE/ansible-config-$DATE.tar.gz\nBackup Size: $(du -sh &quot;$BACKUP_DIR/$DATE/ansible-config-$DATE.tar.gz&quot; | cut -f1)\n\nRecent Log Entries (last 10):\n$(tail -10 &quot;$LOG_FILE&quot;)\nEOF\n\nlog &quot;Maintenance report created: $REPORT_FILE&quot;\n\n# 11. Send report via email (optional)\nif command -v mail &gt;/dev/null 2&gt;&amp;1; then\n    mail -s &quot;Ansible Maintenance Report - $DATE&quot; admin@example.com &lt; &quot;$REPORT_FILE&quot;\n    log &quot;Maintenance report emailed&quot;\nfi\n\nlog &quot;Ansible maintenance tasks completed&quot;\n\n# Schedule this script to run weekly\n# Add to crontab: 0 2 * * 0 /usr/local/bin/ansible-maintenance.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-version-management\" class=\"mobile-header\">Ansible Version Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# ansible-version-manager.sh - Manage multiple Ansible versions\n\nANSIBLE_VERSIONS_DIR=&quot;/opt/ansible-versions&quot;\nCURRENT_LINK=&quot;/opt/ansible/current&quot;\n\ninstall_ansible_version() {\n    local version=&quot;$1&quot;\n    local install_dir=&quot;$ANSIBLE_VERSIONS_DIR/$version&quot;\n    \n    if [ -d &quot;$install_dir&quot; ]; then\n        echo &quot;Ansible $version is already installed&quot;\n        return 0\n    fi\n    \n    echo &quot;Installing Ansible $version...&quot;\n    python3 -m venv &quot;$install_dir&quot;\n    source &quot;$install_dir/bin/activate&quot;\n    \n    pip install --upgrade pip\n    pip install &quot;ansible-core==$version&quot;\n    pip install ansible\n    \n    # Install essential collections\n    ansible-galaxy collection install community.general\n    ansible-galaxy collection install ansible.posix\n    ansible-galaxy collection install kubernetes.core\n    \n    deactivate\n    echo &quot;Ansible $version installed successfully&quot;\n}\n\nswitch_ansible_version() {\n    local version=&quot;$1&quot;\n    local install_dir=&quot;$ANSIBLE_VERSIONS_DIR/$version&quot;\n    \n    if [ ! -d &quot;$install_dir&quot; ]; then\n        echo &quot;Ansible $version is not installed&quot;\n        echo &quot;Available versions:&quot;\n        ls -1 &quot;$ANSIBLE_VERSIONS_DIR&quot; 2&gt;/dev/null || echo &quot;No versions installed&quot;\n        return 1\n    fi\n    \n    rm -f &quot;$CURRENT_LINK&quot;\n    ln -s &quot;$install_dir&quot; &quot;$CURRENT_LINK&quot;\n    \n    echo &quot;Switched to Ansible $version&quot;\n    echo &quot;Current version: $(&quot;$CURRENT_LINK/bin/ansible&quot; --version | head -1)&quot;\n}\n\nlist_versions() {\n    echo &quot;Installed Ansible versions:&quot;\n    ls -1 &quot;$ANSIBLE_VERSIONS_DIR&quot; 2&gt;/dev/null || echo &quot;No versions installed&quot;\n    \n    if [ -L &quot;$CURRENT_LINK&quot; ]; then\n        local current=$(readlink &quot;$CURRENT_LINK&quot; | basename)\n        echo &quot;Current version: $current&quot;\n    else\n        echo &quot;No current version set&quot;\n    fi\n}\n\nremove_version() {\n    local version=&quot;$1&quot;\n    local install_dir=&quot;$ANSIBLE_VERSIONS_DIR/$version&quot;\n    \n    if [ ! -d &quot;$install_dir&quot; ]; then\n        echo &quot;Ansible $version is not installed&quot;\n        return 1\n    fi\n    \n    if [ &quot;$(readlink &quot;$CURRENT_LINK&quot; 2&gt;/dev/null)&quot; = &quot;$install_dir&quot; ]; then\n        echo &quot;Cannot remove currently active version&quot;\n        return 1\n    fi\n    \n    rm -rf &quot;$install_dir&quot;\n    echo &quot;Removed Ansible $version&quot;\n}\n\ncase &quot;$1&quot; in\n    install)\n        install_ansible_version &quot;$2&quot;\n        ;;\n    switch)\n        switch_ansible_version &quot;$2&quot;\n        ;;\n    list)\n        list_versions\n        ;;\n    remove)\n        remove_version &quot;$2&quot;\n        ;;\n    *)\n        echo &quot;Usage: $0 {install|switch|list|remove} [version]&quot;\n        echo &quot;Examples:&quot;\n        echo &quot;  $0 install 2.15.0&quot;\n        echo &quot;  $0 switch 2.15.0&quot;\n        echo &quot;  $0 list&quot;\n        echo &quot;  $0 remove 2.14.0&quot;\n        exit 1\n        ;;\nesac</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-monitoring-and-optimization\" class=\"mobile-header\">Performance Monitoring and Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# ansible-performance-monitor.sh - Monitor and optimize Ansible performance\n\nlog_performance() {\n    local playbook=&quot;$1&quot;\n    local start_time=$(date +%s)\n    local log_file=&quot;/var/log/ansible-performance.log&quot;\n    \n    # Run playbook with timing\n    /usr/bin/time -v ansible-playbook &quot;$playbook&quot; --extra-vars=&quot;gather_facts=True&quot; 2&gt;&amp;1 | \\\n    tee &quot;/tmp/ansible-run-$start_time.log&quot;\n    \n    local end_time=$(date +%s)\n    local duration=$((end_time - start_time))\n    \n    echo &quot;[$(date &#039;+%Y-%m-%d %H:%M:%S&#039;)] Playbook: $playbook, Duration: ${duration}s&quot; &gt;&gt; &quot;$log_file&quot;\n    \n    # Extract performance metrics\n    local max_memory=$(grep &quot;Maximum resident set size&quot; &quot;/tmp/ansible-run-$start_time.log&quot; | awk &#039;{print $6}&#039;)\n    local user_time=$(grep &quot;User time&quot; &quot;/tmp/ansible-run-$start_time.log&quot; | awk &#039;{print $4}&#039;)\n    local system_time=$(grep &quot;System time&quot; &quot;/tmp/ansible-run-$start_time.log&quot; | awk &#039;{print $4}&#039;)\n    \n    echo &quot;Performance Metrics - Memory: ${max_memory}KB, User: ${user_time}s, System: ${system_time}s&quot; &gt;&gt; &quot;$log_file&quot;\n    \n    # Clean up\n    rm &quot;/tmp/ansible-run-$start_time.log&quot;\n}\n\n# Example usage in a wrapper script\nif [ &quot;$1&quot; = &quot;monitor&quot; ] &amp;&amp; [ -n &quot;$2&quot; ]; then\n    log_performance &quot;$2&quot;\nelse\n    echo &quot;Usage: $0 monitor &lt;playbook_path&gt;&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h2 id=\"testing-and-validation\" class=\"mobile-header\">Testing and Validation</h2>\n<h3 id=\"molecule-testing-framework\" class=\"mobile-header\">Molecule Testing Framework</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat &gt; molecule/default/molecule.yml &lt;&lt;EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat &gt; molecule/default/converge.yml &lt;&lt;EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: &quot;Include nginx role&quot;\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat &gt; molecule/default/verify.yml &lt;&lt;EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: &quot;NGINX is not responding correctly&quot;\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-lint-and-security-scanning\" class=\"mobile-header\">Ansible Lint and Security Scanning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat &gt; .ansible-lint &lt;&lt;EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: [&#039;true&#039;, &#039;false&#039;, &#039;yes&#039;, &#039;no&#039;]\nEOF\n\n# Create security-focused playbook linting\ncat &gt; .yamllint &lt;&lt;EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"comprehensive-backup-automation\" class=\"mobile-header\">Comprehensive Backup Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/backup-automation.yml &lt;&lt;EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: &quot;0 2 * * *&quot;\n      files: &quot;0 3 * * *&quot;\n      configs: &quot;0 4 * * *&quot;\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: &quot;{{ backup_root }}/{{ item }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: &#039;0755&#039;\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    - name: Schedule database backups\n      cron:\n        name: &quot;MySQL backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;2&quot;\n        job: &quot;/usr/local/bin/mysql-backup.sh&quot;\n        user: root\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule file backups\n      cron:\n        name: &quot;File system backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/local/bin/file-backup.sh&quot;\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: &quot;{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz&quot;\n        mode: &#039;0600&#039;\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: &quot;{{ backup_root }}/&quot;\n        dest: &quot;backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/&quot;\n        delete: yes\n        rsync_opts:\n          - &quot;--exclude=*.tmp&quot;\n          - &quot;--compress&quot;\n          - &quot;--archive&quot;\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: &quot;{{ backup_root }}&quot;\n        age: &quot;{{ backup_retention_days }}d&quot;\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        state: absent\n      loop: &quot;{{ old_backups.files }}&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-monitoring\" class=\"mobile-header\">Verification and Monitoring</h2>\n<h3 id=\"cross-platform-system-verification\" class=\"mobile-header\">Cross-Platform System Verification</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive verification playbook\ncat &gt; playbooks/system-verification.yml &lt;&lt;EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - &quot;ansible_facts.services[item.service + &#039;.service&#039;].state == &#039;running&#039;&quot;\n        fail_msg: &quot;Service {{ item.service }} is not running&quot;\n        success_msg: &quot;Service {{ item.service }} is healthy&quot;\n      loop: &quot;{{ health_checks }}&quot;\n      when: &quot;item.service + &#039;.service&#039; in ansible_facts.services&quot;\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: &quot;{{ item.host }}&quot;\n        port: &quot;{{ item.port }}&quot;\n        timeout: 5\n      loop:\n        - { host: &quot;8.8.8.8&quot;, port: 53 }\n        - { host: &quot;1.1.1.1&quot;, port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk &#039;$5 &gt; &quot;85%&quot; {print $0}&#039;\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != &quot;&quot;\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk &#039;{printf &quot;%.0f&quot;, $3/$2 * 100.0}&#039;\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: &quot;WARNING: Memory usage is {{ memory_usage.stdout }}%&quot;\n      when: memory_usage.stdout | int &gt; 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep &quot;Failed password&quot; /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw &gt;/dev/null 2&gt;&amp;1; then\n          ufw status\n        elif command -v firewall-cmd &gt;/dev/null 2&gt;&amp;1; then\n          firewall-cmd --state\n        else\n          echo &quot;No supported firewall found&quot;\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    - name: Fetch health reports\n      fetch:\n        src: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        dest: &quot;./reports/&quot;\n        flat: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"continuous-compliance-monitoring\" class=\"mobile-header\">Continuous Compliance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/compliance-monitoring.yml &lt;&lt;EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: &quot;{{ &#039;auditd&#039; if ansible_os_family == &#039;RedHat&#039; else &#039;auditd&#039; }}&quot;\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo &quot;CIS-CAT not installed, skipping&quot;\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check | mail -s &#039;AIDE Report&#039; security@example.com&quot;\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-integration\" class=\"mobile-header\">CI/CD Integration</h2>\n<h3 id=\"jenkins-pipeline-integration\" class=\"mobile-header\">Jenkins Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Jenkinsfile for Ansible automation\ncat &gt; Jenkinsfile &lt;&lt;EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = &#039;ansible.cfg&#039;\n        ANSIBLE_HOST_KEY_CHECKING = &#039;False&#039;\n    }\n    \n    stages {\n        stage(&#039;Lint&#039;) {\n            steps {\n                sh &#039;ansible-lint playbooks/&#039;\n                sh &#039;yamllint .&#039;\n            }\n        }\n        \n        stage(&#039;Syntax Check&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --syntax-check&#039;\n            }\n        }\n        \n        stage(&#039;Dry Run&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --check --diff&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Staging&#039;) {\n            when {\n                branch &#039;develop&#039;\n            }\n            steps {\n                sh &#039;ansible-playbook -i inventories/staging playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Production&#039;) {\n            when {\n                branch &#039;main&#039;\n            }\n            steps {\n                input &#039;Deploy to Production?&#039;\n                sh &#039;ansible-playbook -i inventories/production playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Verify Deployment&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/system-verification.yml&#039;\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: &#039;logs/*.log&#039;, allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: &#039;reports&#039;,\n                reportFiles: &#039;*.html&#039;,\n                reportName: &#039;Ansible Report&#039;\n            ])\n        }\n        failure {\n            emailext (\n                subject: &quot;Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Something is wrong with ${env.BUILD_URL}&quot;,\n                to: &quot;${env.DEFAULT_RECIPIENTS}&quot;\n            )\n        }\n    }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci-integration\" class=\"mobile-header\">GitLab CI Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: &quot;False&quot;\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == &quot;develop&quot;&#039;\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting-cross-platform\" class=\"mobile-header\">6. Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a &quot;uptime&quot;\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug=true&quot; --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a &quot;path=/tmp/test state=touch&quot; --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=&quot;specific task name&quot;\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a &quot;var=hostvars&quot;\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name &quot;*.yml&quot; -exec ansible-playbook {} --syntax-check \\;</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=&quot;profile_tasks_sort_order=none&quot;\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=&quot;ansible_python_interpreter=/usr/bin/python3&quot;\n\n# Network debugging\nansible all -m command -a &quot;ss -tulpn&quot;\nansible all -m command -a &quot;netstat -rn&quot;\n\n# Process debugging\nansible all -m command -a &quot;ps aux --sort=-%mem | head -10&quot;\n\n# Disk usage analysis\nansible all -m command -a &quot;df -h&quot;\nansible all -m command -a &quot;du -sh /var/log/*&quot;\n\n# Service debugging\nansible all -m systemd -a &quot;name=nginx&quot; --become\nansible all -m command -a &quot;systemctl status nginx&quot; --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug_vars=true&quot; --tags debug_vars</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://galaxy.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Galaxy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://molecule.readthedocs.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Molecule Testing</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/collections/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Collections</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"52 min","wordCount":10386,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"Using Package Manager (Recommended)","id":"using-package-manager-recommended"},{"level":1,"text":"Update package list","id":"update-package-list"},{"level":1,"text":"Install Ansible and dependencies","id":"install-ansible-and-dependencies"},{"level":1,"text":"Install additional collections","id":"install-additional-collections"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":1,"text":"Install EPEL repository","id":"install-epel-repository"},{"level":1,"text":"Install Ansible","id":"install-ansible"},{"level":1,"text":"For newer distributions","id":"for-newer-distributions"},{"level":1,"text":"Install collections","id":"install-collections"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":1,"text":"Install Ansible","id":"install-ansible"},{"level":1,"text":"Install additional collections","id":"install-additional-collections"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":1,"text":"Install Ansible","id":"install-ansible"},{"level":1,"text":"Install collections","id":"install-collections"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":1,"text":"Install Ansible","id":"install-ansible"},{"level":1,"text":"Install collections","id":"install-collections"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":1,"text":"openSUSE Leap/Tumbleweed","id":"opensuse-leaptumbleweed"},{"level":1,"text":"Install Ansible and dependencies","id":"install-ansible-and-dependencies"},{"level":1,"text":"SLES 15 (requires additional modules)","id":"sles-15-requires-additional-modules"},{"level":1,"text":"Install additional collections","id":"install-additional-collections"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":1,"text":"Method 1: Using Homebrew (recommended)","id":"method-1-using-homebrew-recommended"},{"level":1,"text":"Install Homebrew if not already installed","id":"install-homebrew-if-not-already-installed"},{"level":1,"text":"Install Ansible","id":"install-ansible"},{"level":1,"text":"Method 2: Using pip with virtual environment","id":"method-2-using-pip-with-virtual-environment"},{"level":1,"text":"Install Python 3 if needed","id":"install-python-3-if-needed"},{"level":1,"text":"Create virtual environment","id":"create-virtual-environment"},{"level":1,"text":"Install Ansible","id":"install-ansible"},{"level":1,"text":"Install additional packages for cloud providers","id":"install-additional-packages-for-cloud-providers"},{"level":1,"text":"Add to shell profile for persistence","id":"add-to-shell-profile-for-persistence"},{"level":1,"text":"Install collections","id":"install-collections"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":1,"text":"Install from ports","id":"install-from-ports"},{"level":1,"text":"Or install from packages","id":"or-install-from-packages"},{"level":1,"text":"Install Python dependencies","id":"install-python-dependencies"},{"level":1,"text":"Create virtual environment (recommended)","id":"create-virtual-environment-recommended"},{"level":1,"text":"Install additional packages","id":"install-additional-packages"},{"level":1,"text":"Install collections","id":"install-collections"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":1,"text":"Enable WSL2 first","id":"enable-wsl2-first"},{"level":1,"text":"Run in PowerShell as Administrator","id":"run-in-powershell-as-administrator"},{"level":1,"text":"Restart computer, then set WSL2 as default","id":"restart-computer-then-set-wsl2-as-default"},{"level":1,"text":"Install Ubuntu from Microsoft Store or command line","id":"install-ubuntu-from-microsoft-store-or-command-line"},{"level":1,"text":"Inside WSL Ubuntu environment:","id":"inside-wsl-ubuntu-environment"},{"level":1,"text":"Create Windows-specific inventory for managing Windows hosts","id":"create-windows-specific-inventory-for-managing-windows-hosts"},{"level":1,"text":"Install Windows collections","id":"install-windows-collections"},{"level":1,"text":"Create Windows inventory example","id":"create-windows-inventory-example"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Using pip (Latest Version)","id":"using-pip-latest-version"},{"level":1,"text":"Create virtual environment (recommended)","id":"create-virtual-environment-recommended"},{"level":1,"text":"Install Ansible via pip","id":"install-ansible-via-pip"},{"level":1,"text":"Install additional packages","id":"install-additional-packages"},{"level":1,"text":"Install cloud provider SDKs","id":"install-cloud-provider-sdks"},{"level":1,"text":"Install collections","id":"install-collections"},{"level":1,"text":"Add to PATH permanently","id":"add-to-path-permanently"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Using Docker","id":"using-docker"},{"level":1,"text":"Create Ansible Docker container with mounted volumes","id":"create-ansible-docker-container-with-mounted-volumes"},{"level":1,"text":"Create wrapper script for ease of use","id":"create-wrapper-script-for-ease-of-use"},{"level":1,"text":"Create aliases","id":"create-aliases"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"First-Run Setup","id":"first-run-setup"},{"level":1,"text":"Generate SSH key pair for Ansible","id":"generate-ssh-key-pair-for-ansible"},{"level":1,"text":"Set proper permissions","id":"set-proper-permissions"},{"level":1,"text":"Copy public key to target hosts","id":"copy-public-key-to-target-hosts"},{"level":1,"text":"Or manually copy the key","id":"or-manually-copy-the-key"},{"level":1,"text":"Create Ansible configuration directory","id":"create-ansible-configuration-directory"},{"level":1,"text":"Create basic ansible.cfg","id":"create-basic-ansiblecfg"},{"level":1,"text":"Create simple inventory file","id":"create-simple-inventory-file"},{"level":1,"text":"Check Python availability on target hosts","id":"check-python-availability-on-target-hosts"},{"level":1,"text":"Install Python if needed (Ubuntu/Debian example)","id":"install-python-if-needed-ubuntudebian-example"},{"level":3,"text":"Testing Initial Setup","id":"testing-initial-setup"},{"level":1,"text":"Test connectivity to all hosts","id":"test-connectivity-to-all-hosts"},{"level":1,"text":"Gather facts from all hosts","id":"gather-facts-from-all-hosts"},{"level":1,"text":"Test privilege escalation","id":"test-privilege-escalation"},{"level":1,"text":"Check disk space on all hosts","id":"check-disk-space-on-all-hosts"},{"level":1,"text":"Verify SSH keys are working","id":"verify-ssh-keys-are-working"},{"level":1,"text":"Test basic file operations","id":"test-basic-file-operations"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"Ansible Controller Service (systemd)","id":"ansible-controller-service-systemd"},{"level":1,"text":"Create Ansible controller service for scheduled playbooks","id":"create-ansible-controller-service-for-scheduled-playbooks"},{"level":1,"text":"Create timer for regular execution","id":"create-timer-for-regular-execution"},{"level":1,"text":"Enable and start the timer","id":"enable-and-start-the-timer"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Ansible Tower/AWX Service Management","id":"ansible-towerawx-service-management"},{"level":1,"text":"AWX service management (Docker-based)","id":"awx-service-management-docker-based"},{"level":1,"text":"Start AWX services","id":"start-awx-services"},{"level":1,"text":"Stop AWX services","id":"stop-awx-services"},{"level":1,"text":"Restart AWX services","id":"restart-awx-services"},{"level":1,"text":"View AWX logs","id":"view-awx-logs"},{"level":1,"text":"Check AWX service status","id":"check-awx-service-status"},{"level":1,"text":"Update AWX","id":"update-awx"},{"level":3,"text":"Ansible Pull Service (for Pull-based Configuration)","id":"ansible-pull-service-for-pull-based-configuration"},{"level":1,"text":"Create ansible-pull service for decentralized management","id":"create-ansible-pull-service-for-decentralized-management"},{"level":1,"text":"Create timer for ansible-pull","id":"create-timer-for-ansible-pull"},{"level":1,"text":"Enable ansible-pull timer","id":"enable-ansible-pull-timer"},{"level":3,"text":"Cross-Platform Service Management","id":"cross-platform-service-management"},{"level":1,"text":"Create launchd plist for Ansible automation","id":"create-launchd-plist-for-ansible-automation"},{"level":1,"text":"Load and start the service","id":"load-and-start-the-service"},{"level":1,"text":"Create scheduled task for Ansible in Windows (running in WSL)","id":"create-scheduled-task-for-ansible-in-windows-running-in-wsl"},{"level":1,"text":"Start the task","id":"start-the-task"},{"level":1,"text":"Check task status","id":"check-task-status"},{"level":2,"text":"Project Structure and Configuration","id":"project-structure-and-configuration"},{"level":3,"text":"Professional Project Structure","id":"professional-project-structure"},{"level":1,"text":"Create comprehensive Ansible project structure","id":"create-comprehensive-ansible-project-structure"},{"level":1,"text":"Create ansible.cfg with security best practices","id":"create-ansiblecfg-with-security-best-practices"},{"level":1,"text":"Logging","id":"logging"},{"level":1,"text":"Performance","id":"performance"},{"level":1,"text":"Security","id":"security"},{"level":3,"text":"Advanced Inventory Management","id":"advanced-inventory-management"},{"level":1,"text":"Create production inventory with groups and variables","id":"create-production-inventory-with-groups-and-variables"},{"level":1,"text":"Global variables for all hosts","id":"global-variables-for-all-hosts"},{"level":1,"text":"Create dynamic inventory script for cloud environments","id":"create-dynamic-inventory-script-for-cloud-environments"},{"level":3,"text":"Ansible Vault Security","id":"ansible-vault-security"},{"level":1,"text":"Create strong vault password","id":"create-strong-vault-password"},{"level":1,"text":"Create encrypted vault file for secrets","id":"create-encrypted-vault-file-for-secrets"},{"level":1,"text":"Enter secure passwords and API keys:","id":"enter-secure-passwords-and-api-keys"},{"level":1,"text":"vault_mysql_root_password: your_secure_mysql_password","id":"vault_mysql_root_password-your_secure_mysql_password"},{"level":1,"text":"vault_grafana_admin_password: your_secure_grafana_password","id":"vault_grafana_admin_password-your_secure_grafana_password"},{"level":1,"text":"vault_ssl_private_key: |","id":"vault_ssl_private_key"},{"level":1,"text":"-----BEGIN PRIVATE KEY-----","id":"begin-private-key"},{"level":1,"text":"your_private_key_content","id":"your_private_key_content"},{"level":1,"text":"-----END PRIVATE KEY-----","id":"end-private-key"},{"level":1,"text":"Create non-encrypted variables file","id":"create-non-encrypted-variables-file"},{"level":1,"text":"Non-sensitive variables","id":"non-sensitive-variables"},{"level":1,"text":"Reference vault variables","id":"reference-vault-variables"},{"level":1,"text":"SSL configuration","id":"ssl-configuration"},{"level":1,"text":"Security settings","id":"security-settings"},{"level":1,"text":"Edit vault file","id":"edit-vault-file"},{"level":1,"text":"View vault file (read-only)","id":"view-vault-file-read-only"},{"level":1,"text":"Change vault password","id":"change-vault-password"},{"level":2,"text":"Comprehensive Playbooks","id":"comprehensive-playbooks"},{"level":3,"text":"System Hardening Playbook","id":"system-hardening-playbook"},{"level":3,"text":"Application Deployment Playbook","id":"application-deployment-playbook"},{"level":3,"text":"Infrastructure as Code Playbook","id":"infrastructure-as-code-playbook"},{"level":2,"text":"Advanced Role Development","id":"advanced-role-development"},{"level":3,"text":"Comprehensive NGINX Role","id":"comprehensive-nginx-role"},{"level":1,"text":"Create NGINX role structure","id":"create-nginx-role-structure"},{"level":1,"text":"Main tasks","id":"main-tasks"},{"level":1,"text":"NGINX Installation and Configuration Role","id":"nginx-installation-and-configuration-role"},{"level":1,"text":"OS-specific installation tasks","id":"os-specific-installation-tasks"},{"level":1,"text":"Variables","id":"variables"},{"level":1,"text":"Templates","id":"templates"},{"level":1,"text":"Handlers","id":"handlers"},{"level":2,"text":"Security and Compliance","id":"security-and-compliance"},{"level":3,"text":"Ansible Security Scanner Integration","id":"ansible-security-scanner-integration"},{"level":1,"text":"Create security scanning playbook","id":"create-security-scanning-playbook"},{"level":3,"text":"Ansible AWX/Tower Integration","id":"ansible-awxtower-integration"},{"level":1,"text":"Install Ansible AWX (open source)","id":"install-ansible-awx-open-source"},{"level":2,"text":"Multi-Cloud Automation","id":"multi-cloud-automation"},{"level":3,"text":"AWS Infrastructure Automation","id":"aws-infrastructure-automation"},{"level":3,"text":"Kubernetes Cluster Management","id":"kubernetes-cluster-management"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System-Level Tuning","id":"system-level-tuning"},{"level":1,"text":"Optimize control machine for Ansible performance","id":"optimize-control-machine-for-ansible-performance"},{"level":1,"text":"Kernel parameters for network performance","id":"kernel-parameters-for-network-performance"},{"level":1,"text":"Ansible performance optimization","id":"ansible-performance-optimization"},{"level":1,"text":"Set resource limits for Ansible user","id":"set-resource-limits-for-ansible-user"},{"level":1,"text":"SSH client optimization","id":"ssh-client-optimization"},{"level":3,"text":"Ansible Performance Configuration","id":"ansible-performance-configuration"},{"level":1,"text":"High-performance ansible.cfg","id":"high-performance-ansiblecfg"},{"level":1,"text":"Core performance settings","id":"core-performance-settings"},{"level":1,"text":"Callback and display optimization","id":"callback-and-display-optimization"},{"level":1,"text":"SSH optimization","id":"ssh-optimization"},{"level":1,"text":"Connection persistence","id":"connection-persistence"},{"level":1,"text":"Privilege escalation optimization","id":"privilege-escalation-optimization"},{"level":1,"text":"Use Redis for fact caching (install Redis first)","id":"use-redis-for-fact-caching-install-redis-first"},{"level":1,"text":"Create performance monitoring script","id":"create-performance-monitoring-script"},{"level":1,"text":"Monitor Ansible performance metrics","id":"monitor-ansible-performance-metrics"},{"level":1,"text":"Enable profiling","id":"enable-profiling"},{"level":1,"text":"Monitor system resources during playbook execution","id":"monitor-system-resources-during-playbook-execution"},{"level":1,"text":"Run playbook with timing","id":"run-playbook-with-timing"},{"level":1,"text":"Kill monitoring","id":"kill-monitoring"},{"level":3,"text":"Parallel Execution Strategies","id":"parallel-execution-strategies"},{"level":1,"text":"Create high-performance playbook configuration","id":"create-high-performance-playbook-configuration"},{"level":1,"text":"Performance monitoring playbook","id":"performance-monitoring-playbook"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration for Ansible AWX/Tower","id":"nginx-configuration-for-ansible-awxtower"},{"level":1,"text":"/etc/nginx/sites-available/ansible-awx","id":"etcnginxsites-availableansible-awx"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":1,"text":"/etc/haproxy/haproxy.cfg","id":"etchaproxyhaproxycfg"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":1,"text":"/etc/apache2/sites-available/ansible-awx.conf","id":"etcapache2sites-availableansible-awxconf"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Built-in Monitoring and Logging","id":"built-in-monitoring-and-logging"},{"level":1,"text":"Create comprehensive monitoring playbook","id":"create-comprehensive-monitoring-playbook"},{"level":3,"text":"Prometheus Configuration for Ansible","id":"prometheus-configuration-for-ansible"},{"level":1,"text":"prometheus.yml","id":"prometheusyml"},{"level":3,"text":"Grafana Dashboard Configuration","id":"grafana-dashboard-configuration"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Python Integration with Ansible","id":"python-integration-with-ansible"},{"level":1,"text":"ansible_integration.py","id":"ansible_integrationpy"},{"level":1,"text":"Example usage","id":"example-usage"},{"level":3,"text":"Node.js Integration","id":"nodejs-integration"},{"level":3,"text":"REST API Integration","id":"rest-api-integration"},{"level":1,"text":"ansible_rest_api.py","id":"ansible_rest_apipy"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":1,"text":"ansible-maintenance.sh - Comprehensive maintenance script","id":"ansible-maintenancesh-comprehensive-maintenance-script"},{"level":1,"text":"Set variables","id":"set-variables"},{"level":1,"text":"Logging function","id":"logging-function"},{"level":1,"text":"1. Update Ansible and collections","id":"1-update-ansible-and-collections"},{"level":1,"text":"2. Clean up old logs","id":"2-clean-up-old-logs"},{"level":1,"text":"3. Update facts cache","id":"3-update-facts-cache"},{"level":1,"text":"4. Validate all playbooks","id":"4-validate-all-playbooks"},{"level":1,"text":"5. Check inventory health","id":"5-check-inventory-health"},{"level":1,"text":"6. Test connectivity to all hosts","id":"6-test-connectivity-to-all-hosts"},{"level":1,"text":"7. Backup configurations","id":"7-backup-configurations"},{"level":1,"text":"8. Clean up old backups (keep 30 days)","id":"8-clean-up-old-backups-keep-30-days"},{"level":1,"text":"9. Update SSH known_hosts","id":"9-update-ssh-known_hosts"},{"level":1,"text":"10. Generate maintenance report","id":"10-generate-maintenance-report"},{"level":1,"text":"11. Send report via email (optional)","id":"11-send-report-via-email-optional"},{"level":1,"text":"Schedule this script to run weekly","id":"schedule-this-script-to-run-weekly"},{"level":1,"text":"Add to crontab: 0 2 * * 0 /usr/local/bin/ansible-maintenance.sh","id":"add-to-crontab-0-2-0-usrlocalbinansible-maintenancesh"},{"level":3,"text":"Ansible Version Management","id":"ansible-version-management"},{"level":1,"text":"ansible-version-manager.sh - Manage multiple Ansible versions","id":"ansible-version-managersh-manage-multiple-ansible-versions"},{"level":3,"text":"Performance Monitoring and Optimization","id":"performance-monitoring-and-optimization"},{"level":1,"text":"ansible-performance-monitor.sh - Monitor and optimize Ansible performance","id":"ansible-performance-monitorsh-monitor-and-optimize-ansible-performance"},{"level":1,"text":"Example usage in a wrapper script","id":"example-usage-in-a-wrapper-script"},{"level":2,"text":"Testing and Validation","id":"testing-and-validation"},{"level":3,"text":"Molecule Testing Framework","id":"molecule-testing-framework"},{"level":1,"text":"Install Molecule for role testing","id":"install-molecule-for-role-testing"},{"level":1,"text":"Initialize Molecule in role directory","id":"initialize-molecule-in-role-directory"},{"level":1,"text":"Create molecule configuration","id":"create-molecule-configuration"},{"level":1,"text":"Create test playbook","id":"create-test-playbook"},{"level":1,"text":"Create test verification","id":"create-test-verification"},{"level":1,"text":"Run tests","id":"run-tests"},{"level":3,"text":"Ansible Lint and Security Scanning","id":"ansible-lint-and-security-scanning"},{"level":1,"text":"Install Ansible Lint","id":"install-ansible-lint"},{"level":1,"text":"Create .ansible-lint configuration","id":"create-ansible-lint-configuration"},{"level":1,"text":"Custom rules","id":"custom-rules"},{"level":1,"text":"Create security-focused playbook linting","id":"create-security-focused-playbook-linting"},{"level":1,"text":"Run linting","id":"run-linting"},{"level":2,"text":"Backup and Disaster Recovery","id":"backup-and-disaster-recovery"},{"level":3,"text":"Comprehensive Backup Automation","id":"comprehensive-backup-automation"},{"level":2,"text":"Verification and Monitoring","id":"verification-and-monitoring"},{"level":3,"text":"Cross-Platform System Verification","id":"cross-platform-system-verification"},{"level":1,"text":"Create comprehensive verification playbook","id":"create-comprehensive-verification-playbook"},{"level":3,"text":"Continuous Compliance Monitoring","id":"continuous-compliance-monitoring"},{"level":2,"text":"CI/CD Integration","id":"cicd-integration"},{"level":3,"text":"Jenkins Pipeline Integration","id":"jenkins-pipeline-integration"},{"level":1,"text":"Create Jenkinsfile for Ansible automation","id":"create-jenkinsfile-for-ansible-automation"},{"level":3,"text":"GitLab CI Integration","id":"gitlab-ci-integration"},{"level":2,"text":"6. Troubleshooting (Cross-Platform)","id":"6-troubleshooting-cross-platform"},{"level":3,"text":"Common Issues and Solutions","id":"common-issues-and-solutions"},{"level":1,"text":"Debug connection issues","id":"debug-connection-issues"},{"level":1,"text":"Check SSH connectivity","id":"check-ssh-connectivity"},{"level":1,"text":"Verify inventory","id":"verify-inventory"},{"level":1,"text":"Test specific host","id":"test-specific-host"},{"level":1,"text":"Check syntax without execution","id":"check-syntax-without-execution"},{"level":1,"text":"Dry run with verbose output","id":"dry-run-with-verbose-output"},{"level":1,"text":"Debug variable resolution","id":"debug-variable-resolution"},{"level":1,"text":"Check facts","id":"check-facts"},{"level":1,"text":"Connection troubleshooting","id":"connection-troubleshooting"},{"level":1,"text":"Permission issues","id":"permission-issues"},{"level":1,"text":"Vault issues","id":"vault-issues"},{"level":1,"text":"Performance debugging","id":"performance-debugging"},{"level":1,"text":"Module testing","id":"module-testing"},{"level":1,"text":"Check for syntax errors in roles","id":"check-for-syntax-errors-in-roles"},{"level":3,"text":"Advanced Debugging","id":"advanced-debugging"},{"level":1,"text":"Enable comprehensive logging","id":"enable-comprehensive-logging"},{"level":1,"text":"Profile playbook execution","id":"profile-playbook-execution"},{"level":1,"text":"Memory usage analysis","id":"memory-usage-analysis"},{"level":1,"text":"Network debugging","id":"network-debugging"},{"level":1,"text":"Process debugging","id":"process-debugging"},{"level":1,"text":"Disk usage analysis","id":"disk-usage-analysis"},{"level":1,"text":"Service debugging","id":"service-debugging"},{"level":1,"text":"Variable debugging","id":"variable-debugging"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-21T18:15:21.005Z","metadataVersion":"2.0"},"category":{"key":"configuration-management","name":"Configuration management","description":"Configuration management tools and applications","icon":"🏗️","color":"#44475a"},"relatedGuides":[{"name":"chef","displayName":"chef Installation Guide","slug":"chef","description":"chef is a free and open-source infrastructure automation. Chef provides infrastructure automation platform","category":"configuration-management","subcategory":"configuration-management","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["configuration-management","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/configuration-management/chef","documentationUrl":"https://howtomgr.github.io/configuration-management/chef","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/chef","updatedAt":"2025-09-16T17:03:14Z","createdAt":"2025-09-16T02:25:24Z","readmeRaw":"# chef Installation Guide\n\nchef is a free and open-source infrastructure automation. Chef provides infrastructure automation platform\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores\n  - RAM: 8GB minimum\n  - Storage: 50GB for data\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443 (default chef port)\n  - Various service ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install chef\nsudo dnf install -y chef\n\n# Enable and start service\nsudo systemctl enable --now chef\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nchef --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install chef\nsudo apt install -y chef\n\n# Enable and start service\nsudo systemctl enable --now chef\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nchef --version\n```\n\n### Arch Linux\n\n```bash\n# Install chef\nsudo pacman -S chef\n\n# Enable and start service\nsudo systemctl enable --now chef\n\n# Verify installation\nchef --version\n```\n\n### Alpine Linux\n\n```bash\n# Install chef\napk add --no-cache chef\n\n# Enable and start service\nrc-update add chef default\nrc-service chef start\n\n# Verify installation\nchef --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install chef\nsudo zypper install -y chef\n\n# Enable and start service\nsudo systemctl enable --now chef\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nchef --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install chef\n\n# Start service\nbrew services start chef\n\n# Verify installation\nchef --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install chef\n\n# Enable in rc.conf\necho 'chef_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice chef start\n\n# Verify installation\nchef --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install chef\n\n# Or using Scoop\nscoop install chef\n\n# Verify installation\nchef --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/chef\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nchef --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable chef\n\n# Start service\nsudo systemctl start chef\n\n# Stop service\nsudo systemctl stop chef\n\n# Restart service\nsudo systemctl restart chef\n\n# Check status\nsudo systemctl status chef\n\n# View logs\nsudo journalctl -u chef -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add chef default\n\n# Start service\nrc-service chef start\n\n# Stop service\nrc-service chef stop\n\n# Restart service\nrc-service chef restart\n\n# Check status\nrc-service chef status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'chef_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice chef start\n\n# Stop service\nservice chef stop\n\n# Restart service\nservice chef restart\n\n# Check status\nservice chef status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start chef\nbrew services stop chef\nbrew services restart chef\n\n# Check status\nbrew services list | grep chef\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start chef\n\n# Stop service\nnet stop chef\n\n# Using PowerShell\nStart-Service chef\nStop-Service chef\nRestart-Service chef\n\n# Check status\nGet-Service chef\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream chef_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name chef.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name chef.example.com;\n\n    ssl_certificate /etc/ssl/certs/chef.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/chef.example.com.key;\n\n    location / {\n        proxy_pass http://chef_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName chef.example.com\n    Redirect permanent / https://chef.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName chef.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/chef.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/chef.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend chef_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/chef.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend chef_backend\n\nbackend chef_backend\n    balance roundrobin\n    server chef1 127.0.0.1:443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R chef:chef /etc/chef\nsudo chmod 750 /etc/chef\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status chef\n\n# View logs\nsudo journalctl -u chef -f\n\n# Monitor resource usage\ntop -p $(pgrep chef)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/chef\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/chef-backup-$DATE.tar.gz\" /etc/chef /var/lib/chef\n\necho \"Backup completed: $BACKUP_DIR/chef-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop chef\n\n# Restore from backup\ntar -xzf /backup/chef/chef-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start chef\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u chef -n 100\nsudo tail -f /var/log/chef/chef.log\n\n# Check configuration\nchef --version\n\n# Check permissions\nls -la /etc/chef\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep chef)\n\n# Check disk I/O\niotop -p $(pgrep chef)\n\n# Check connections\nss -an | grep 443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  chef:\n    image: chef:latest\n    ports:\n      - \"443:443\"\n    volumes:\n      - ./config:/etc/chef\n      - ./data:/var/lib/chef\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update chef\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade chef\n\n# Arch Linux\nsudo pacman -Syu chef\n\n# Alpine Linux\napk update && apk upgrade chef\n\n# openSUSE\nsudo zypper update chef\n\n# FreeBSD\npkg update && pkg upgrade chef\n\n# Always backup before updates\ntar -czf /backup/chef-pre-update-$(date +%Y%m%d).tar.gz /etc/chef\n\n# Restart after updates\nsudo systemctl restart chef\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/chef\n\n# Clean old logs\nfind /var/log/chef -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/chef\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.chef.org/\n- GitHub Repository: https://github.com/chef/chef\n- Community Forum: https://forum.chef.org/\n- Best Practices Guide: https://docs.chef.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">chef is a free and open-source infrastructure automation. Chef provides infrastructure automation platform</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores</li>\n<li class=\"mobile-list-item\">RAM: 8GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 50GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443 (default chef port)</li>\n<li class=\"mobile-list-item\">Various service ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install chef\nsudo dnf install -y chef\n\n# Enable and start service\nsudo systemctl enable --now chef\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nchef --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install chef\nsudo apt install -y chef\n\n# Enable and start service\nsudo systemctl enable --now chef\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\nchef --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install chef\nsudo pacman -S chef\n\n# Enable and start service\nsudo systemctl enable --now chef\n\n# Verify installation\nchef --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install chef\napk add --no-cache chef\n\n# Enable and start service\nrc-update add chef default\nrc-service chef start\n\n# Verify installation\nchef --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install chef\nsudo zypper install -y chef\n\n# Enable and start service\nsudo systemctl enable --now chef\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nchef --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install chef\n\n# Start service\nbrew services start chef\n\n# Verify installation\nchef --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install chef\n\n# Enable in rc.conf\necho &#039;chef_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice chef start\n\n# Verify installation\nchef --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install chef\n\n# Or using Scoop\nscoop install chef\n\n# Verify installation\nchef --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/chef\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nchef --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable chef\n\n# Start service\nsudo systemctl start chef\n\n# Stop service\nsudo systemctl stop chef\n\n# Restart service\nsudo systemctl restart chef\n\n# Check status\nsudo systemctl status chef\n\n# View logs\nsudo journalctl -u chef -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add chef default\n\n# Start service\nrc-service chef start\n\n# Stop service\nrc-service chef stop\n\n# Restart service\nrc-service chef restart\n\n# Check status\nrc-service chef status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;chef_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice chef start\n\n# Stop service\nservice chef stop\n\n# Restart service\nservice chef restart\n\n# Check status\nservice chef status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start chef\nbrew services stop chef\nbrew services restart chef\n\n# Check status\nbrew services list | grep chef</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start chef\n\n# Stop service\nnet stop chef\n\n# Using PowerShell\nStart-Service chef\nStop-Service chef\nRestart-Service chef\n\n# Check status\nGet-Service chef</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream chef_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name chef.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name chef.example.com;\n\n    ssl_certificate /etc/ssl/certs/chef.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/chef.example.com.key;\n\n    location / {\n        proxy_pass http://chef_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName chef.example.com\n    Redirect permanent / https://chef.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName chef.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/chef.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/chef.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend chef_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/chef.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend chef_backend\n\nbackend chef_backend\n    balance roundrobin\n    server chef1 127.0.0.1:443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R chef:chef /etc/chef\nsudo chmod 750 /etc/chef\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status chef\n\n# View logs\nsudo journalctl -u chef -f\n\n# Monitor resource usage\ntop -p $(pgrep chef)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/chef&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/chef-backup-$DATE.tar.gz&quot; /etc/chef /var/lib/chef\n\necho &quot;Backup completed: $BACKUP_DIR/chef-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop chef\n\n# Restore from backup\ntar -xzf /backup/chef/chef-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start chef</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u chef -n 100\nsudo tail -f /var/log/chef/chef.log\n\n# Check configuration\nchef --version\n\n# Check permissions\nls -la /etc/chef</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep chef)\n\n# Check disk I/O\niotop -p $(pgrep chef)\n\n# Check connections\nss -an | grep 443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  chef:\n    image: chef:latest\n    ports:\n      - &quot;443:443&quot;\n    volumes:\n      - ./config:/etc/chef\n      - ./data:/var/lib/chef\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update chef\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade chef\n\n# Arch Linux\nsudo pacman -Syu chef\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade chef\n\n# openSUSE\nsudo zypper update chef\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade chef\n\n# Always backup before updates\ntar -czf /backup/chef-pre-update-$(date +%Y%m%d).tar.gz /etc/chef\n\n# Restart after updates\nsudo systemctl restart chef</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/chef\n\n# Clean old logs\nfind /var/log/chef -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/chef</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.chef.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/chef/chef</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.chef.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.chef.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1265,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install chef","id":"install-chef"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install chef","id":"install-chef"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install chef","id":"install-chef"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install chef","id":"install-chef"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install chef","id":"install-chef"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory","id":"create-configuration-directory"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"See official documentation for detailed configuration options","id":"see-official-documentation-for-detailed-configuration-options"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Basic system tuning","id":"basic-system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Monitor resource usage","id":"monitor-resource-usage"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Basic backup script","id":"basic-backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore from backup","id":"restore-from-backup"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Test connectivity","id":"test-connectivity"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check disk I/O","id":"check-disk-io"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":1,"text":"Log rotation","id":"log-rotation"},{"level":1,"text":"Clean old logs","id":"clean-old-logs"},{"level":1,"text":"Check disk usage","id":"check-disk-usage"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-21T18:15:04.927Z","metadataVersion":"2.0"},{"name":"puppet","displayName":"puppet Installation Guide","slug":"puppet","description":"puppet is a free and open-source configuration management. Puppet provides infrastructure automation and delivery","category":"configuration-management","subcategory":"configuration-management","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["configuration-management","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/configuration-management/puppet","documentationUrl":"https://howtomgr.github.io/configuration-management/puppet","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/puppet","updatedAt":"2025-09-16T17:45:31Z","createdAt":"2025-09-16T08:07:38Z","readmeRaw":"# puppet Installation Guide\n\npuppet is a free and open-source configuration management. Puppet provides infrastructure automation and delivery\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 4+ cores\n  - RAM: 8GB minimum\n  - Storage: 50GB for data\n  - Network: HTTP/HTTPS\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 443 (default puppet port)\n  - Various service ports\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install puppet\nsudo dnf install -y puppet\n\n# Enable and start service\nsudo systemctl enable --now puppet\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\npuppet --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install puppet\nsudo apt install -y puppet\n\n# Enable and start service\nsudo systemctl enable --now puppet\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\npuppet --version\n```\n\n### Arch Linux\n\n```bash\n# Install puppet\nsudo pacman -S puppet\n\n# Enable and start service\nsudo systemctl enable --now puppet\n\n# Verify installation\npuppet --version\n```\n\n### Alpine Linux\n\n```bash\n# Install puppet\napk add --no-cache puppet\n\n# Enable and start service\nrc-update add puppet default\nrc-service puppet start\n\n# Verify installation\npuppet --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install puppet\nsudo zypper install -y puppet\n\n# Enable and start service\nsudo systemctl enable --now puppet\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\npuppet --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install puppet\n\n# Start service\nbrew services start puppet\n\n# Verify installation\npuppet --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install puppet\n\n# Enable in rc.conf\necho 'puppet_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice puppet start\n\n# Verify installation\npuppet --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install puppet\n\n# Or using Scoop\nscoop install puppet\n\n# Verify installation\npuppet --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/puppet\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\npuppet --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable puppet\n\n# Start service\nsudo systemctl start puppet\n\n# Stop service\nsudo systemctl stop puppet\n\n# Restart service\nsudo systemctl restart puppet\n\n# Check status\nsudo systemctl status puppet\n\n# View logs\nsudo journalctl -u puppet -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add puppet default\n\n# Start service\nrc-service puppet start\n\n# Stop service\nrc-service puppet stop\n\n# Restart service\nrc-service puppet restart\n\n# Check status\nrc-service puppet status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'puppet_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice puppet start\n\n# Stop service\nservice puppet stop\n\n# Restart service\nservice puppet restart\n\n# Check status\nservice puppet status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start puppet\nbrew services stop puppet\nbrew services restart puppet\n\n# Check status\nbrew services list | grep puppet\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start puppet\n\n# Stop service\nnet stop puppet\n\n# Using PowerShell\nStart-Service puppet\nStop-Service puppet\nRestart-Service puppet\n\n# Check status\nGet-Service puppet\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream puppet_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name puppet.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name puppet.example.com;\n\n    ssl_certificate /etc/ssl/certs/puppet.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/puppet.example.com.key;\n\n    location / {\n        proxy_pass http://puppet_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName puppet.example.com\n    Redirect permanent / https://puppet.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName puppet.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/puppet.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/puppet.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend puppet_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/puppet.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend puppet_backend\n\nbackend puppet_backend\n    balance roundrobin\n    server puppet1 127.0.0.1:443 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R puppet:puppet /etc/puppet\nsudo chmod 750 /etc/puppet\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status puppet\n\n# View logs\nsudo journalctl -u puppet -f\n\n# Monitor resource usage\ntop -p $(pgrep puppet)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/puppet\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/puppet-backup-$DATE.tar.gz\" /etc/puppet /var/lib/puppet\n\necho \"Backup completed: $BACKUP_DIR/puppet-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop puppet\n\n# Restore from backup\ntar -xzf /backup/puppet/puppet-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start puppet\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u puppet -n 100\nsudo tail -f /var/log/puppet/puppet.log\n\n# Check configuration\npuppet --version\n\n# Check permissions\nls -la /etc/puppet\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep puppet)\n\n# Check disk I/O\niotop -p $(pgrep puppet)\n\n# Check connections\nss -an | grep 443\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  puppet:\n    image: puppet:latest\n    ports:\n      - \"443:443\"\n    volumes:\n      - ./config:/etc/puppet\n      - ./data:/var/lib/puppet\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update puppet\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade puppet\n\n# Arch Linux\nsudo pacman -Syu puppet\n\n# Alpine Linux\napk update && apk upgrade puppet\n\n# openSUSE\nsudo zypper update puppet\n\n# FreeBSD\npkg update && pkg upgrade puppet\n\n# Always backup before updates\ntar -czf /backup/puppet-pre-update-$(date +%Y%m%d).tar.gz /etc/puppet\n\n# Restart after updates\nsudo systemctl restart puppet\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/puppet\n\n# Clean old logs\nfind /var/log/puppet -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/puppet\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.puppet.org/\n- GitHub Repository: https://github.com/puppet/puppet\n- Community Forum: https://forum.puppet.org/\n- Best Practices Guide: https://docs.puppet.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">puppet is a free and open-source configuration management. Puppet provides infrastructure automation and delivery</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 4+ cores</li>\n<li class=\"mobile-list-item\">RAM: 8GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 50GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 443 (default puppet port)</li>\n<li class=\"mobile-list-item\">Various service ports</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install puppet\nsudo dnf install -y puppet\n\n# Enable and start service\nsudo systemctl enable --now puppet\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\npuppet --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install puppet\nsudo apt install -y puppet\n\n# Enable and start service\nsudo systemctl enable --now puppet\n\n# Configure firewall\nsudo ufw allow 443\n\n# Verify installation\npuppet --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install puppet\nsudo pacman -S puppet\n\n# Enable and start service\nsudo systemctl enable --now puppet\n\n# Verify installation\npuppet --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install puppet\napk add --no-cache puppet\n\n# Enable and start service\nrc-update add puppet default\nrc-service puppet start\n\n# Verify installation\npuppet --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install puppet\nsudo zypper install -y puppet\n\n# Enable and start service\nsudo systemctl enable --now puppet\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\npuppet --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install puppet\n\n# Start service\nbrew services start puppet\n\n# Verify installation\npuppet --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install puppet\n\n# Enable in rc.conf\necho &#039;puppet_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice puppet start\n\n# Verify installation\npuppet --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install puppet\n\n# Or using Scoop\nscoop install puppet\n\n# Verify installation\npuppet --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/puppet\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\npuppet --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable puppet\n\n# Start service\nsudo systemctl start puppet\n\n# Stop service\nsudo systemctl stop puppet\n\n# Restart service\nsudo systemctl restart puppet\n\n# Check status\nsudo systemctl status puppet\n\n# View logs\nsudo journalctl -u puppet -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add puppet default\n\n# Start service\nrc-service puppet start\n\n# Stop service\nrc-service puppet stop\n\n# Restart service\nrc-service puppet restart\n\n# Check status\nrc-service puppet status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;puppet_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice puppet start\n\n# Stop service\nservice puppet stop\n\n# Restart service\nservice puppet restart\n\n# Check status\nservice puppet status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start puppet\nbrew services stop puppet\nbrew services restart puppet\n\n# Check status\nbrew services list | grep puppet</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start puppet\n\n# Stop service\nnet stop puppet\n\n# Using PowerShell\nStart-Service puppet\nStop-Service puppet\nRestart-Service puppet\n\n# Check status\nGet-Service puppet</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream puppet_backend {\n    server 127.0.0.1:443;\n}\n\nserver {\n    listen 80;\n    server_name puppet.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name puppet.example.com;\n\n    ssl_certificate /etc/ssl/certs/puppet.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/puppet.example.com.key;\n\n    location / {\n        proxy_pass http://puppet_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName puppet.example.com\n    Redirect permanent / https://puppet.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName puppet.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/puppet.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/puppet.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:443/\n    ProxyPassReverse / http://127.0.0.1:443/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend puppet_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/puppet.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend puppet_backend\n\nbackend puppet_backend\n    balance roundrobin\n    server puppet1 127.0.0.1:443 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R puppet:puppet /etc/puppet\nsudo chmod 750 /etc/puppet\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status puppet\n\n# View logs\nsudo journalctl -u puppet -f\n\n# Monitor resource usage\ntop -p $(pgrep puppet)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/puppet&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/puppet-backup-$DATE.tar.gz&quot; /etc/puppet /var/lib/puppet\n\necho &quot;Backup completed: $BACKUP_DIR/puppet-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop puppet\n\n# Restore from backup\ntar -xzf /backup/puppet/puppet-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start puppet</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u puppet -n 100\nsudo tail -f /var/log/puppet/puppet.log\n\n# Check configuration\npuppet --version\n\n# Check permissions\nls -la /etc/puppet</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 443\n\n# Test connectivity\ntelnet localhost 443\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep puppet)\n\n# Check disk I/O\niotop -p $(pgrep puppet)\n\n# Check connections\nss -an | grep 443</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  puppet:\n    image: puppet:latest\n    ports:\n      - &quot;443:443&quot;\n    volumes:\n      - ./config:/etc/puppet\n      - ./data:/var/lib/puppet\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update puppet\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade puppet\n\n# Arch Linux\nsudo pacman -Syu puppet\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade puppet\n\n# openSUSE\nsudo zypper update puppet\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade puppet\n\n# Always backup before updates\ntar -czf /backup/puppet-pre-update-$(date +%Y%m%d).tar.gz /etc/puppet\n\n# Restart after updates\nsudo systemctl restart puppet</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/puppet\n\n# Clean old logs\nfind /var/log/puppet -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/puppet</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.puppet.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/puppet/puppet</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.puppet.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.puppet.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1266,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install puppet","id":"install-puppet"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install puppet","id":"install-puppet"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install puppet","id":"install-puppet"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install puppet","id":"install-puppet"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install puppet","id":"install-puppet"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory","id":"create-configuration-directory"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"See official documentation for detailed configuration options","id":"see-official-documentation-for-detailed-configuration-options"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Basic system tuning","id":"basic-system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Monitor resource usage","id":"monitor-resource-usage"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Basic backup script","id":"basic-backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore from backup","id":"restore-from-backup"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Test connectivity","id":"test-connectivity"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check disk I/O","id":"check-disk-io"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":1,"text":"Log rotation","id":"log-rotation"},{"level":1,"text":"Clean old logs","id":"clean-old-logs"},{"level":1,"text":"Check disk usage","id":"check-disk-usage"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-21T18:13:13.392Z","metadataVersion":"2.0"},{"name":"saltstack","displayName":"saltstack Installation Guide","slug":"saltstack","description":"saltstack is a free and open-source infrastructure automation. SaltStack provides powerful automation for infrastructure management","category":"configuration-management","subcategory":"configuration-management","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,4505],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["configuration-management","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/configuration-management/saltstack","documentationUrl":"https://howtomgr.github.io/configuration-management/saltstack","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/saltstack","updatedAt":"2025-09-16T17:50:09Z","createdAt":"2025-09-16T08:16:24Z","readmeRaw":"# saltstack Installation Guide\n\nsaltstack is a free and open-source infrastructure automation. SaltStack provides powerful automation for infrastructure management\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 10GB for data\n  - Network: ZeroMQ protocol\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 4505 (default saltstack port)\n  - Publish on 4506\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install saltstack\nsudo dnf install -y saltstack\n\n# Enable and start service\nsudo systemctl enable --now saltstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4505/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nsaltstack --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install saltstack\nsudo apt install -y saltstack\n\n# Enable and start service\nsudo systemctl enable --now saltstack\n\n# Configure firewall\nsudo ufw allow 4505\n\n# Verify installation\nsaltstack --version\n```\n\n### Arch Linux\n\n```bash\n# Install saltstack\nsudo pacman -S saltstack\n\n# Enable and start service\nsudo systemctl enable --now saltstack\n\n# Verify installation\nsaltstack --version\n```\n\n### Alpine Linux\n\n```bash\n# Install saltstack\napk add --no-cache saltstack\n\n# Enable and start service\nrc-update add saltstack default\nrc-service saltstack start\n\n# Verify installation\nsaltstack --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install saltstack\nsudo zypper install -y saltstack\n\n# Enable and start service\nsudo systemctl enable --now saltstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4505/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nsaltstack --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install saltstack\n\n# Start service\nbrew services start saltstack\n\n# Verify installation\nsaltstack --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install saltstack\n\n# Enable in rc.conf\necho 'saltstack_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice saltstack start\n\n# Verify installation\nsaltstack --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install saltstack\n\n# Or using Scoop\nscoop install saltstack\n\n# Verify installation\nsaltstack --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/saltstack\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nsaltstack --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable saltstack\n\n# Start service\nsudo systemctl start saltstack\n\n# Stop service\nsudo systemctl stop saltstack\n\n# Restart service\nsudo systemctl restart saltstack\n\n# Check status\nsudo systemctl status saltstack\n\n# View logs\nsudo journalctl -u saltstack -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add saltstack default\n\n# Start service\nrc-service saltstack start\n\n# Stop service\nrc-service saltstack stop\n\n# Restart service\nrc-service saltstack restart\n\n# Check status\nrc-service saltstack status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'saltstack_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice saltstack start\n\n# Stop service\nservice saltstack stop\n\n# Restart service\nservice saltstack restart\n\n# Check status\nservice saltstack status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start saltstack\nbrew services stop saltstack\nbrew services restart saltstack\n\n# Check status\nbrew services list | grep saltstack\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start saltstack\n\n# Stop service\nnet stop saltstack\n\n# Using PowerShell\nStart-Service saltstack\nStop-Service saltstack\nRestart-Service saltstack\n\n# Check status\nGet-Service saltstack\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream saltstack_backend {\n    server 127.0.0.1:4505;\n}\n\nserver {\n    listen 80;\n    server_name saltstack.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name saltstack.example.com;\n\n    ssl_certificate /etc/ssl/certs/saltstack.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/saltstack.example.com.key;\n\n    location / {\n        proxy_pass http://saltstack_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName saltstack.example.com\n    Redirect permanent / https://saltstack.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName saltstack.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/saltstack.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/saltstack.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:4505/\n    ProxyPassReverse / http://127.0.0.1:4505/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend saltstack_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/saltstack.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend saltstack_backend\n\nbackend saltstack_backend\n    balance roundrobin\n    server saltstack1 127.0.0.1:4505 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R saltstack:saltstack /etc/saltstack\nsudo chmod 750 /etc/saltstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4505/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status saltstack\n\n# View logs\nsudo journalctl -u saltstack -f\n\n# Monitor resource usage\ntop -p $(pgrep saltstack)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/saltstack\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/saltstack-backup-$DATE.tar.gz\" /etc/saltstack /var/lib/saltstack\n\necho \"Backup completed: $BACKUP_DIR/saltstack-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop saltstack\n\n# Restore from backup\ntar -xzf /backup/saltstack/saltstack-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start saltstack\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u saltstack -n 100\nsudo tail -f /var/log/saltstack/saltstack.log\n\n# Check configuration\nsaltstack --version\n\n# Check permissions\nls -la /etc/saltstack\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 4505\n\n# Test connectivity\ntelnet localhost 4505\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep saltstack)\n\n# Check disk I/O\niotop -p $(pgrep saltstack)\n\n# Check connections\nss -an | grep 4505\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  saltstack:\n    image: saltstack:latest\n    ports:\n      - \"4505:4505\"\n    volumes:\n      - ./config:/etc/saltstack\n      - ./data:/var/lib/saltstack\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update saltstack\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade saltstack\n\n# Arch Linux\nsudo pacman -Syu saltstack\n\n# Alpine Linux\napk update && apk upgrade saltstack\n\n# openSUSE\nsudo zypper update saltstack\n\n# FreeBSD\npkg update && pkg upgrade saltstack\n\n# Always backup before updates\ntar -czf /backup/saltstack-pre-update-$(date +%Y%m%d).tar.gz /etc/saltstack\n\n# Restart after updates\nsudo systemctl restart saltstack\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/saltstack\n\n# Clean old logs\nfind /var/log/saltstack -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/saltstack\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.saltstack.org/\n- GitHub Repository: https://github.com/saltstack/saltstack\n- Community Forum: https://forum.saltstack.org/\n- Best Practices Guide: https://docs.saltstack.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">saltstack is a free and open-source infrastructure automation. SaltStack provides powerful automation for infrastructure management</p>\n<h2 id=\"table-of-contents\" class=\"mobile-header\">Table of Contents</h2>\n<p class=\"mobile-paragraph\">1. <a href=\"#prerequisites\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prerequisites</a></p>\n<p class=\"mobile-paragraph\">2. <a href=\"#supported-operating-systems\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Supported Operating Systems</a></p>\n<p class=\"mobile-paragraph\">3. <a href=\"#installation\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation</a></p>\n<p class=\"mobile-paragraph\">4. <a href=\"#configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration</a></p>\n<p class=\"mobile-paragraph\">5. <a href=\"#service-management\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Service Management</a></p>\n<p class=\"mobile-paragraph\">6. <a href=\"#troubleshooting\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Troubleshooting</a></p>\n<p class=\"mobile-paragraph\">7. <a href=\"#security-considerations\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Considerations</a></p>\n<p class=\"mobile-paragraph\">8. <a href=\"#performance-tuning\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></p>\n<p class=\"mobile-paragraph\">9. <a href=\"#backup-and-restore\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Backup and Restore</a></p>\n<p class=\"mobile-paragraph\">10. <a href=\"#system-requirements\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">System Requirements</a></p>\n<p class=\"mobile-paragraph\">11. <a href=\"#support\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Support</a></p>\n<p class=\"mobile-paragraph\">12. <a href=\"#contributing\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Contributing</a></p>\n<p class=\"mobile-paragraph\">13. <a href=\"#license\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">License</a></p>\n<p class=\"mobile-paragraph\">14. <a href=\"#acknowledgments\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Acknowledgments</a></p>\n<p class=\"mobile-paragraph\">15. <a href=\"#version-history\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Version History</a></p>\n<p class=\"mobile-paragraph\">16. <a href=\"#appendices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Appendices</a></p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 10GB for data</li>\n<li class=\"mobile-list-item\">Network: ZeroMQ protocol</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 4505 (default saltstack port)</li>\n<li class=\"mobile-list-item\">Publish on 4506</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install saltstack\nsudo dnf install -y saltstack\n\n# Enable and start service\nsudo systemctl enable --now saltstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4505/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nsaltstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install saltstack\nsudo apt install -y saltstack\n\n# Enable and start service\nsudo systemctl enable --now saltstack\n\n# Configure firewall\nsudo ufw allow 4505\n\n# Verify installation\nsaltstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install saltstack\nsudo pacman -S saltstack\n\n# Enable and start service\nsudo systemctl enable --now saltstack\n\n# Verify installation\nsaltstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install saltstack\napk add --no-cache saltstack\n\n# Enable and start service\nrc-update add saltstack default\nrc-service saltstack start\n\n# Verify installation\nsaltstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install saltstack\nsudo zypper install -y saltstack\n\n# Enable and start service\nsudo systemctl enable --now saltstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4505/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nsaltstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install saltstack\n\n# Start service\nbrew services start saltstack\n\n# Verify installation\nsaltstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install saltstack\n\n# Enable in rc.conf\necho &#039;saltstack_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice saltstack start\n\n# Verify installation\nsaltstack --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install saltstack\n\n# Or using Scoop\nscoop install saltstack\n\n# Verify installation\nsaltstack --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/saltstack\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nsaltstack --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable saltstack\n\n# Start service\nsudo systemctl start saltstack\n\n# Stop service\nsudo systemctl stop saltstack\n\n# Restart service\nsudo systemctl restart saltstack\n\n# Check status\nsudo systemctl status saltstack\n\n# View logs\nsudo journalctl -u saltstack -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add saltstack default\n\n# Start service\nrc-service saltstack start\n\n# Stop service\nrc-service saltstack stop\n\n# Restart service\nrc-service saltstack restart\n\n# Check status\nrc-service saltstack status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;saltstack_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice saltstack start\n\n# Stop service\nservice saltstack stop\n\n# Restart service\nservice saltstack restart\n\n# Check status\nservice saltstack status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start saltstack\nbrew services stop saltstack\nbrew services restart saltstack\n\n# Check status\nbrew services list | grep saltstack</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start saltstack\n\n# Stop service\nnet stop saltstack\n\n# Using PowerShell\nStart-Service saltstack\nStop-Service saltstack\nRestart-Service saltstack\n\n# Check status\nGet-Service saltstack</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream saltstack_backend {\n    server 127.0.0.1:4505;\n}\n\nserver {\n    listen 80;\n    server_name saltstack.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name saltstack.example.com;\n\n    ssl_certificate /etc/ssl/certs/saltstack.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/saltstack.example.com.key;\n\n    location / {\n        proxy_pass http://saltstack_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName saltstack.example.com\n    Redirect permanent / https://saltstack.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName saltstack.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/saltstack.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/saltstack.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:4505/\n    ProxyPassReverse / http://127.0.0.1:4505/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend saltstack_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/saltstack.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend saltstack_backend\n\nbackend saltstack_backend\n    balance roundrobin\n    server saltstack1 127.0.0.1:4505 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R saltstack:saltstack /etc/saltstack\nsudo chmod 750 /etc/saltstack\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=4505/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status saltstack\n\n# View logs\nsudo journalctl -u saltstack -f\n\n# Monitor resource usage\ntop -p $(pgrep saltstack)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/saltstack&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/saltstack-backup-$DATE.tar.gz&quot; /etc/saltstack /var/lib/saltstack\n\necho &quot;Backup completed: $BACKUP_DIR/saltstack-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop saltstack\n\n# Restore from backup\ntar -xzf /backup/saltstack/saltstack-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start saltstack</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u saltstack -n 100\nsudo tail -f /var/log/saltstack/saltstack.log\n\n# Check configuration\nsaltstack --version\n\n# Check permissions\nls -la /etc/saltstack</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 4505\n\n# Test connectivity\ntelnet localhost 4505\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep saltstack)\n\n# Check disk I/O\niotop -p $(pgrep saltstack)\n\n# Check connections\nss -an | grep 4505</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  saltstack:\n    image: saltstack:latest\n    ports:\n      - &quot;4505:4505&quot;\n    volumes:\n      - ./config:/etc/saltstack\n      - ./data:/var/lib/saltstack\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update saltstack\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade saltstack\n\n# Arch Linux\nsudo pacman -Syu saltstack\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade saltstack\n\n# openSUSE\nsudo zypper update saltstack\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade saltstack\n\n# Always backup before updates\ntar -czf /backup/saltstack-pre-update-$(date +%Y%m%d).tar.gz /etc/saltstack\n\n# Restart after updates\nsudo systemctl restart saltstack</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/saltstack\n\n# Clean old logs\nfind /var/log/saltstack -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/saltstack</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.saltstack.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/saltstack/saltstack</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.saltstack.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.saltstack.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1268,"tableOfContents":[{"level":2,"text":"Table of Contents","id":"table-of-contents"},{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":1,"text":"Install EPEL repository if needed","id":"install-epel-repository-if-needed"},{"level":1,"text":"Install saltstack","id":"install-saltstack"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Update package index","id":"update-package-index"},{"level":1,"text":"Install saltstack","id":"install-saltstack"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Install saltstack","id":"install-saltstack"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"Install saltstack","id":"install-saltstack"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":1,"text":"Install saltstack","id":"install-saltstack"},{"level":1,"text":"Enable and start service","id":"enable-and-start-service"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"macOS","id":"macos"},{"level":1,"text":"Using Homebrew","id":"using-homebrew"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Using pkg","id":"using-pkg"},{"level":1,"text":"Enable in rc.conf","id":"enable-in-rcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":3,"text":"Windows","id":"windows"},{"level":1,"text":"Using Chocolatey","id":"using-chocolatey"},{"level":1,"text":"Or using Scoop","id":"or-using-scoop"},{"level":1,"text":"Verify installation","id":"verify-installation"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":1,"text":"Create configuration directory","id":"create-configuration-directory"},{"level":1,"text":"Set up basic configuration","id":"set-up-basic-configuration"},{"level":1,"text":"See official documentation for detailed configuration options","id":"see-official-documentation-for-detailed-configuration-options"},{"level":1,"text":"Test configuration","id":"test-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":1,"text":"Enable service","id":"enable-service"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":1,"text":"Enable in /etc/rc.conf","id":"enable-in-etcrcconf"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restart service","id":"restart-service"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":1,"text":"Using Homebrew services","id":"using-homebrew-services"},{"level":1,"text":"Check status","id":"check-status"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":1,"text":"Start service","id":"start-service"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Using PowerShell","id":"using-powershell"},{"level":1,"text":"Check status","id":"check-status"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":1,"text":"Set appropriate permissions","id":"set-appropriate-permissions"},{"level":1,"text":"Configure firewall","id":"configure-firewall"},{"level":1,"text":"Enable SELinux policies (if applicable)","id":"enable-selinux-policies-if-applicable"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":1,"text":"Basic system tuning","id":"basic-system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":1,"text":"Check service status","id":"check-service-status"},{"level":1,"text":"View logs","id":"view-logs"},{"level":1,"text":"Monitor resource usage","id":"monitor-resource-usage"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":1,"text":"Basic backup script","id":"basic-backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":1,"text":"Stop service","id":"stop-service"},{"level":1,"text":"Restore from backup","id":"restore-from-backup"},{"level":1,"text":"Start service","id":"start-service"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":1,"text":"Check logs","id":"check-logs"},{"level":1,"text":"Check configuration","id":"check-configuration"},{"level":1,"text":"Check permissions","id":"check-permissions"},{"level":1,"text":"Check if service is listening","id":"check-if-service-is-listening"},{"level":1,"text":"Test connectivity","id":"test-connectivity"},{"level":1,"text":"Check firewall","id":"check-firewall"},{"level":1,"text":"Check resource usage","id":"check-resource-usage"},{"level":1,"text":"Check disk I/O","id":"check-disk-io"},{"level":1,"text":"Check connections","id":"check-connections"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":1,"text":"RHEL/CentOS/Rocky/AlmaLinux","id":"rhelcentosrockyalmalinux"},{"level":1,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":1,"text":"Arch Linux","id":"arch-linux"},{"level":1,"text":"Alpine Linux","id":"alpine-linux"},{"level":1,"text":"openSUSE","id":"opensuse"},{"level":1,"text":"FreeBSD","id":"freebsd"},{"level":1,"text":"Always backup before updates","id":"always-backup-before-updates"},{"level":1,"text":"Restart after updates","id":"restart-after-updates"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":1,"text":"Log rotation","id":"log-rotation"},{"level":1,"text":"Clean old logs","id":"clean-old-logs"},{"level":1,"text":"Check disk usage","id":"check-disk-usage"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-21T18:13:01.421Z","metadataVersion":"2.0"}]},"__N_SSG":true}