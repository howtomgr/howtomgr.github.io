{"pageProps":{"guide":{"name":"prometheus","displayName":"Prometheus Installation Guide","slug":"prometheus","description":"Prometheus is a free and open-source systems monitoring and alerting toolkit originally built at SoundCloud. Now a standalone project and part of the Cloud Native Computing Foundation, it features a multi-dimensional data model with time series data identified by metric name and key/value pairs, PromQL query language, and powerful alerting capabilities. It serves as a FOSS alternative to commercial monitoring solutions like Datadog, New Relic, or Splunk, offering enterprise-grade monitoring and alerting without licensing costs.","category":"monitoring","subcategory":"monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[443,3000,5001,8080,8086,9009,9090,9093,9094,9100,9201,19291],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["monitoring","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/monitoring/prometheus","documentationUrl":"https://howtomgr.github.io/monitoring/prometheus","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prometheus","updatedAt":"2025-09-16T17:43:45Z","createdAt":"2025-09-08T03:14:43Z","readmeRaw":"# Prometheus Installation Guide\n\nPrometheus is a free and open-source systems monitoring and alerting toolkit originally built at SoundCloud. Now a standalone project and part of the Cloud Native Computing Foundation, it features a multi-dimensional data model with time series data identified by metric name and key/value pairs, PromQL query language, and powerful alerting capabilities. It serves as a FOSS alternative to commercial monitoring solutions like Datadog, New Relic, or Splunk, offering enterprise-grade monitoring and alerting without licensing costs.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended for production)\n  - RAM: 2GB minimum (8GB+ recommended for production)\n  - Storage: 20GB minimum (100GB+ SSD recommended for metrics retention)\n  - Network: Stable connectivity for scraping targets\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 2.6.32+\n  - macOS: 10.12+ (Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9090 (Prometheus web UI and API)\n  - Port 9093 (Alertmanager)\n  - Port 9094 (Alertmanager cluster)\n  - Various ports for exporters (9100 for node_exporter, etc.)\n- **Dependencies**:\n  - No runtime dependencies (Go binary)\n  - Optional: Grafana for visualization\n  - Optional: Alertmanager for alerting\n- **System Access**: root or sudo privileges for installation\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Create prometheus user\nsudo useradd --no-create-home --shell /bin/false prometheus\n\n# Create directories\nsudo mkdir -p /etc/prometheus /var/lib/prometheus\nsudo chown prometheus:prometheus /etc/prometheus /var/lib/prometheus\n\n# Download latest Prometheus\nPROMETHEUS_VERSION=\"2.48.0\"\ncd /tmp\nwget https://github.com/prometheus/prometheus/releases/download/v${PROMETHEUS_VERSION}/prometheus-${PROMETHEUS_VERSION}.linux-amd64.tar.gz\ntar xzf prometheus-${PROMETHEUS_VERSION}.linux-amd64.tar.gz\n\n# Install binaries\ncd prometheus-${PROMETHEUS_VERSION}.linux-amd64\nsudo cp prometheus promtool /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/prometheus /usr/local/bin/promtool\n\n# Copy configuration files\nsudo cp -r consoles console_libraries /etc/prometheus/\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles /etc/prometheus/console_libraries\n\n# Create basic configuration\nsudo tee /etc/prometheus/prometheus.yml > /dev/null <<EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml\n```\n\n### Debian/Ubuntu\n\n```bash\n# Method 1: From official repository\nwget -O prometheus.tar.gz https://github.com/prometheus/prometheus/releases/download/v2.48.0/prometheus-2.48.0.linux-amd64.tar.gz\ntar xzf prometheus.tar.gz\ncd prometheus-*\n\n# Create user and directories\nsudo useradd --no-create-home --shell /bin/false prometheus\nsudo mkdir -p /etc/prometheus /var/lib/prometheus\nsudo cp prometheus promtool /usr/local/bin/\nsudo cp -r consoles console_libraries /etc/prometheus/\nsudo chown -R prometheus:prometheus /etc/prometheus /var/lib/prometheus /usr/local/bin/prometheus /usr/local/bin/promtool\n\n# Method 2: Using snap (simpler but less flexible)\nsudo snap install prometheus\n\n# Method 3: From community packages (older version)\nsudo apt update\nsudo apt install -y prometheus\n```\n\n### Arch Linux\n\n```bash\n# Install from official repositories\nsudo pacman -S prometheus\n\n# Optional: Install exporters\nsudo pacman -S prometheus-node-exporter\nsudo pacman -S prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now prometheus\n\n# For latest version from AUR\nyay -S prometheus-bin\n\n# Configuration location: /etc/prometheus/prometheus.yml\n```\n\n### Alpine Linux\n\n```bash\n# Install Prometheus\napk add --no-cache prometheus prometheus-node-exporter\n\n# Create prometheus user if not exists\nadduser -D -H -s /sbin/nologin prometheus\n\n# Create directories\nmkdir -p /etc/prometheus /var/lib/prometheus\nchown prometheus:prometheus /etc/prometheus /var/lib/prometheus\n\n# Enable and start service\nrc-update add prometheus default\nrc-service prometheus start\n\n# For Alertmanager\napk add --no-cache alertmanager\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y prometheus\n\n# For latest version, build from source\nsudo zypper install -y go\ngo install github.com/prometheus/prometheus/cmd/prometheus@latest\nsudo cp ~/go/bin/prometheus /usr/local/bin/\n\n# SLES 15\n# May need to add monitoring repository\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y prometheus\n\n# Create service user\nsudo useradd --no-create-home --shell /bin/false prometheus\n\n# Enable and start service\nsudo systemctl enable --now prometheus\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install prometheus\n\n# Start as service\nbrew services start prometheus\n\n# Or run manually\nprometheus --config.file=/usr/local/etc/prometheus.yml\n\n# Install exporters\nbrew install prometheus-node-exporter\n\n# Configuration location: /usr/local/etc/prometheus.yml\n# Alternative: /opt/homebrew/etc/prometheus.yml (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install prometheus\npkg install node_exporter\n\n# Using ports\ncd /usr/ports/net-mgmt/prometheus\nmake install clean\n\n# Enable in rc.conf\necho 'prometheus_enable=\"YES\"' >> /etc/rc.conf\necho 'node_exporter_enable=\"YES\"' >> /etc/rc.conf\n\n# Start services\nservice prometheus start\nservice node_exporter start\n\n# Configuration location: /usr/local/etc/prometheus.yml\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install prometheus\n\n# Method 2: Using Scoop\nscoop bucket add extras\nscoop install prometheus\n\n# Method 3: Manual installation\n# Download from https://github.com/prometheus/prometheus/releases\n# Extract to C:\\prometheus\n# Create C:\\prometheus\\prometheus.yml\n\n# Install as Windows service using NSSM\nnssm install prometheus C:\\prometheus\\prometheus.exe\nnssm set prometheus AppParameters \"--config.file=C:\\prometheus\\prometheus.yml --storage.tsdb.path=C:\\prometheus\\data\"\nnssm set prometheus AppDirectory C:\\prometheus\nnssm start prometheus\n\n# Or use Windows Service Wrapper\n# Download WinSW from https://github.com/winsw/winsw/releases\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create Prometheus user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/lib/prometheus -s /sbin/nologin -c \"Prometheus monitoring\" prometheus\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/prometheus/prometheus.yml`\n- Debian/Ubuntu: `/etc/prometheus/prometheus.yml`\n- Arch Linux: `/etc/prometheus/prometheus.yml`\n- Alpine Linux: `/etc/prometheus/prometheus.yml`\n- openSUSE/SLES: `/etc/prometheus/prometheus.yml`\n- macOS: `/usr/local/etc/prometheus.yml`\n- FreeBSD: `/usr/local/etc/prometheus.yml`\n- Windows: `C:\\prometheus\\prometheus.yml`\n\n3. **Essential settings to change**:\n\n```yaml\n# /etc/prometheus/prometheus.yml\nglobal:\n  scrape_interval: 15s       # How often to scrape targets\n  evaluation_interval: 15s   # How often to evaluate rules\n  external_labels:          # Labels to add to all metrics\n    cluster: 'production'\n    replica: 'prometheus-1'\n\n# Alertmanager configuration\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - localhost:9093\n\n# Load rules once and periodically evaluate them\nrule_files:\n  - \"rules/*.yml\"\n\n# Scrape configurations\nscrape_configs:\n  # Prometheus itself\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  # Node exporter for system metrics\n  - job_name: 'node'\n    static_configs:\n      - targets: ['localhost:9100']\n```\n\n### Testing Initial Setup\n\n```bash\n# Test configuration syntax\npromtool check config /etc/prometheus/prometheus.yml\n\n# Start Prometheus (if not using systemd)\nprometheus --config.file=/etc/prometheus/prometheus.yml\n\n# Verify Prometheus is running\ncurl http://localhost:9090/-/healthy\n\n# Check targets\ncurl http://localhost:9090/api/v1/targets\n\n# Run a test query\ncurl http://localhost:9090/api/v1/query?query=up\n```\n\n**WARNING:** Never expose Prometheus to the public internet without authentication!\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Create systemd service file\nsudo tee /etc/systemd/system/prometheus.service <<EOF\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nRestart=always\nRestartSec=5s\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.enable-lifecycle\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Reload systemd and start Prometheus\nsudo systemctl daemon-reload\nsudo systemctl enable prometheus\nsudo systemctl start prometheus\n\n# Management commands\nsudo systemctl stop prometheus\nsudo systemctl restart prometheus\nsudo systemctl status prometheus\n\n# View logs\nsudo journalctl -u prometheus -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Create init script\nsudo tee /etc/init.d/prometheus <<'EOF'\n#!/sbin/openrc-run\n\nname=\"prometheus\"\ndescription=\"Prometheus monitoring system\"\ncommand=\"/usr/bin/prometheus\"\ncommand_args=\"--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/var/lib/prometheus/\"\ncommand_user=\"prometheus:prometheus\"\npidfile=\"/run/${RC_SVCNAME}.pid\"\nstart_stop_daemon_args=\"--background --make-pidfile\"\n\ndepend() {\n    need net\n    after firewall\n}\nEOF\n\nsudo chmod +x /etc/init.d/prometheus\n\n# Enable and start\nrc-update add prometheus default\nrc-service prometheus start\n\n# Management commands\nrc-service prometheus stop\nrc-service prometheus restart\nrc-service prometheus status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'prometheus_enable=\"YES\"' >> /etc/rc.conf\necho 'prometheus_config=\"/usr/local/etc/prometheus.yml\"' >> /etc/rc.conf\necho 'prometheus_data_dir=\"/var/db/prometheus\"' >> /etc/rc.conf\n\n# Start Prometheus\nservice prometheus start\n\n# Management commands\nservice prometheus stop\nservice prometheus restart\nservice prometheus status\nservice prometheus reload\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start prometheus\nbrew services stop prometheus\nbrew services restart prometheus\n\n# Check status\nbrew services list | grep prometheus\n\n# Manual launchd management\nsudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.prometheus.plist\nsudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.prometheus.plist\n```\n\n### Windows Service Manager\n\n```powershell\n# Using NSSM\nnssm start prometheus\nnssm stop prometheus\nnssm restart prometheus\n\n# Using native Windows commands\nStart-Service prometheus\nStop-Service prometheus\nRestart-Service prometheus\n\n# Check status\nGet-Service prometheus\n\n# View logs\nGet-EventLog -LogName Application -Source prometheus -Newest 50\n```\n\n## Advanced Configuration\n\n### Storage Configuration\n\n```yaml\n# Advanced storage settings via command-line flags\n--storage.tsdb.path=/var/lib/prometheus/\n--storage.tsdb.retention.time=30d\n--storage.tsdb.retention.size=50GB\n--storage.tsdb.wal-compression\n--storage.tsdb.max-block-duration=2h\n--storage.tsdb.min-block-duration=2h\n```\n\n### High Availability Setup\n\n```yaml\n# prometheus.yml for HA setup\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n  external_labels:\n    cluster: 'production'\n    replica: '1'  # Different for each replica\n\n# Remote write for long-term storage\nremote_write:\n  - url: \"http://thanos-receive:19291/api/v1/receive\"\n    queue_config:\n      max_samples_per_send: 10000\n      batch_send_deadline: 5s\n      max_retries: 3\n\n# Remote read for querying historical data\nremote_read:\n  - url: \"http://thanos-query:9090/api/v1/read\"\n    read_recent: true\n```\n\n### Service Discovery\n\n```yaml\n# Kubernetes service discovery\nscrape_configs:\n  - job_name: 'kubernetes-pods'\n    kubernetes_sd_configs:\n      - role: pod\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n\n# File-based service discovery\n  - job_name: 'file-sd'\n    file_sd_configs:\n      - files:\n        - '/etc/prometheus/targets/*.yml'\n        refresh_interval: 5m\n\n# DNS service discovery\n  - job_name: 'dns-sd'\n    dns_sd_configs:\n      - names:\n        - '_prometheus._tcp.example.com'\n        type: 'SRV'\n        refresh_interval: 30s\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/prometheus\nupstream prometheus {\n    server 127.0.0.1:9090;\n}\n\nserver {\n    listen 80;\n    server_name prometheus.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prometheus.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/prometheus.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/prometheus.example.com/privkey.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=63072000\" always;\n    add_header X-Frame-Options \"DENY\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n\n    location / {\n        proxy_pass http://prometheus;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Basic authentication\n        auth_basic \"Prometheus\";\n        auth_basic_user_file /etc/nginx/.htpasswd;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n# /etc/apache2/sites-available/prometheus.conf\n<VirtualHost *:443>\n    ServerName prometheus.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/prometheus.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/prometheus.example.com/privkey.pem\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:9090/\n    ProxyPassReverse / http://localhost:9090/\n    \n    <Location />\n        AuthType Basic\n        AuthName \"Prometheus\"\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    </Location>\n</VirtualHost>\n```\n\n### Caddy Configuration\n\n```caddyfile\nprometheus.example.com {\n    reverse_proxy localhost:9090\n    \n    basicauth {\n        admin $2a$14$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    }\n    \n    header {\n        Strict-Transport-Security \"max-age=63072000\"\n        X-Frame-Options \"DENY\"\n        X-Content-Type-Options \"nosniff\"\n    }\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend prometheus_frontend\n    bind *:443 ssl crt /etc/haproxy/certs/prometheus.pem\n    mode http\n    option httplog\n    \n    # Basic auth\n    acl auth_ok http_auth(users)\n    http-request auth realm Prometheus if !auth_ok\n    \n    default_backend prometheus_backend\n\nbackend prometheus_backend\n    mode http\n    balance roundrobin\n    option httpchk GET /-/healthy\n    server prometheus1 127.0.0.1:9090 check\n```\n\n## Security Configuration\n\n### Authentication with Basic Auth\n\n```bash\n# Generate password file\nhtpasswd -c /etc/prometheus/.htpasswd admin\n\n# Configure Prometheus with basic auth\nsudo tee /etc/prometheus/web.yml <<EOF\nbasic_auth_users:\n  admin: $2y$10$hashed_password_here\nEOF\n\n# Update systemd service to use web config\nExecStart=/usr/local/bin/prometheus \\\n    --config.file=/etc/prometheus/prometheus.yml \\\n    --web.config.file=/etc/prometheus/web.yml\n```\n\n### TLS Configuration\n\n```yaml\n# web.yml for TLS\ntls_server_config:\n  cert_file: /etc/prometheus/prometheus.crt\n  key_file: /etc/prometheus/prometheus.key\n  client_auth_type: RequireAndVerifyClientCert\n  client_ca_file: /etc/prometheus/ca.crt\n  min_version: TLS12\n  cipher_suites:\n    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 9090\nsudo ufw allow from 192.168.1.0/24 to any port 9093\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=prometheus\nsudo firewall-cmd --permanent --zone=prometheus --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=prometheus --add-port=9090/tcp\nsudo firewall-cmd --permanent --zone=prometheus --add-port=9093/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9090 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9093 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 9090\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 9093\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"Prometheus\" -Direction Inbound -Protocol TCP -LocalPort 9090 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n### Security Best Practices\n\n```bash\n# Restrict Prometheus data directory permissions\nsudo chmod 700 /var/lib/prometheus\nsudo chown -R prometheus:prometheus /var/lib/prometheus\n\n# Disable admin API endpoints in production\n# Remove --web.enable-admin-api flag\n\n# Enable CORS restrictions\n--web.cors.origin=\"https://grafana.example.com\"\n\n# Set read timeout\n--web.read-timeout=5m\n\n# Limit concurrent queries\n--query.max-concurrency=20\n```\n\n## Database Setup\n\nPrometheus uses its own time-series database (TSDB) and doesn't require external database setup. However, you can configure remote storage:\n\n### Remote Storage Options\n\n```yaml\n# PostgreSQL with TimescaleDB\nremote_write:\n  - url: \"http://prometheus-postgresql-adapter:9201/write\"\nremote_read:\n  - url: \"http://prometheus-postgresql-adapter:9201/read\"\n\n# InfluxDB\nremote_write:\n  - url: \"http://influxdb:8086/api/v1/prom/write?db=prometheus\"\nremote_read:\n  - url: \"http://influxdb:8086/api/v1/prom/read?db=prometheus\"\n\n# Cortex/Thanos\nremote_write:\n  - url: \"http://cortex:9009/api/prom/push\"\n    queue_config:\n      capacity: 10000\n      max_samples_per_send: 3000\n```\n\n### Storage Sizing\n\n```bash\n# Calculate storage requirements\n# Formula: retention_time * ingested_samples_per_second * bytes_per_sample\n# Example: 30 days * 100k samples/sec * 2 bytes = ~520GB\n\n# Monitor storage usage\ncurl http://localhost:9090/api/v1/query?query=prometheus_tsdb_storage_blocks_bytes\n\n# Configure retention\n--storage.tsdb.retention.time=30d\n--storage.tsdb.retention.size=500GB\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\nprometheus soft nofile 65535\nprometheus hard nofile 65535\nEOF\n\n# Kernel parameters for better performance\nsudo tee -a /etc/sysctl.conf <<EOF\n# Prometheus optimizations\nvm.max_map_count = 262144\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nEOF\n\nsudo sysctl -p\n```\n\n### Query Optimization\n\n```yaml\n# Recording rules for expensive queries\ngroups:\n  - name: aggregations\n    interval: 30s\n    rules:\n      - record: node:cpu_utilization:avg1m\n        expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[1m])) * 100)\n      \n      - record: node:memory_utilization:ratio\n        expr: 1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)\n```\n\n### Storage Optimization\n\n```bash\n# Enable compression\n--storage.tsdb.wal-compression\n\n# Optimize block duration for your workload\n--storage.tsdb.max-block-duration=2h\n--storage.tsdb.min-block-duration=2h\n\n# Increase sample buffer\n--storage.tsdb.head-chunks-write-queue-size=1000000\n```\n\n## Monitoring\n\n### Built-in Metrics\n\n```bash\n# Prometheus self-monitoring queries\n# Storage usage\nprometheus_tsdb_storage_blocks_bytes\n\n# Ingestion rate\nrate(prometheus_tsdb_head_samples_appended_total[5m])\n\n# Query performance\nhistogram_quantile(0.99, rate(prometheus_engine_query_duration_seconds_bucket[5m]))\n\n# Active time series\nprometheus_tsdb_head_series\n\n# Memory usage\nprocess_resident_memory_bytes\n```\n\n### Alerting Rules\n\n```yaml\n# /etc/prometheus/rules/prometheus.yml\ngroups:\n  - name: prometheus\n    rules:\n      - alert: PrometheusDown\n        expr: up{job=\"prometheus\"} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Prometheus is down\"\n          \n      - alert: PrometheusStorageSpace\n        expr: prometheus_tsdb_storage_blocks_bytes / 1024 / 1024 / 1024 > 100\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Prometheus storage exceeds 100GB\"\n          \n      - alert: PrometheusHighMemory\n        expr: process_resident_memory_bytes / 1024 / 1024 / 1024 > 8\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Prometheus memory usage exceeds 8GB\"\n```\n\n### External Monitoring\n\n```bash\n# Blackbox exporter configuration for monitoring Prometheus\nmodules:\n  prometheus_health:\n    prober: http\n    timeout: 5s\n    http:\n      valid_status_codes: [200]\n      method: GET\n      path: /-/healthy\n      \n  prometheus_ready:\n    prober: http\n    timeout: 5s\n    http:\n      valid_status_codes: [200]\n      method: GET\n      path: /-/ready\n```\n\n## 9. Backup and Restore\n\n### Backup Procedures\n\n```bash\n#!/bin/bash\n# backup-prometheus.sh\n\nBACKUP_DIR=\"/backup/prometheus/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Option 1: Using snapshots (requires --web.enable-lifecycle)\ncurl -XPOST http://localhost:9090/api/v1/admin/tsdb/snapshot\nSNAPSHOT=$(curl -s http://localhost:9090/api/v1/admin/tsdb/snapshot | jq -r .data.name)\ncp -r /var/lib/prometheus/snapshots/$SNAPSHOT \"$BACKUP_DIR/data\"\n\n# Option 2: Direct file backup (requires stopping Prometheus)\nsystemctl stop prometheus\ntar czf \"$BACKUP_DIR/prometheus-data.tar.gz\" -C /var/lib/prometheus .\nsystemctl start prometheus\n\n# Backup configuration\ntar czf \"$BACKUP_DIR/prometheus-config.tar.gz\" -C /etc prometheus\n\n# Backup to remote storage\n# aws s3 cp \"$BACKUP_DIR\" s3://backups/prometheus/ --recursive\n# rsync -avz \"$BACKUP_DIR\" backup-server:/backups/prometheus/\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# restore-prometheus.sh\n\nBACKUP_DIR=\"$1\"\nif [ -z \"$BACKUP_DIR\" ]; then\n    echo \"Usage: $0 <backup-directory>\"\n    exit 1\nfi\n\n# Stop Prometheus\nsystemctl stop prometheus\n\n# Restore data\nrm -rf /var/lib/prometheus/*\ntar xzf \"$BACKUP_DIR/prometheus-data.tar.gz\" -C /var/lib/prometheus\nchown -R prometheus:prometheus /var/lib/prometheus\n\n# Restore configuration\ntar xzf \"$BACKUP_DIR/prometheus-config.tar.gz\" -C /etc\nchown -R prometheus:prometheus /etc/prometheus\n\n# Start Prometheus\nsystemctl start prometheus\n\necho \"Restore completed from: $BACKUP_DIR\"\n```\n\n### Automated Backup\n\n```bash\n# Create cron job for daily backups\necho \"0 2 * * * /usr/local/bin/backup-prometheus.sh\" | sudo tee -a /etc/crontab\n\n# Backup retention script\nfind /backup/prometheus -type d -mtime +30 -exec rm -rf {} \\; 2>/dev/null\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **High memory usage**:\n```bash\n# Check cardinality\ncurl -s http://localhost:9090/api/v1/label/__name__/values | jq -r '.data[]' | wc -l\n\n# Find high cardinality metrics\ntopk(10, count by (__name__)({__name__=~\".+\"}))\n\n# Reduce memory usage\n--storage.tsdb.retention.time=15d  # Reduce retention\n--query.max-samples=50000000       # Limit query samples\n```\n\n2. **Slow queries**:\n```bash\n# Enable query logging\n--log.queries-longer-than=10s\n\n# Check slow queries\ncurl 'http://localhost:9090/api/v1/query?query=up&stats=all' | jq .stats\n\n# Add recording rules for expensive queries\n```\n\n3. **Storage issues**:\n```bash\n# Check disk space\ndf -h /var/lib/prometheus\n\n# Clean up old blocks\npromtool tsdb clean /var/lib/prometheus\n\n# Analyze TSDB\npromtool tsdb analyze /var/lib/prometheus\n```\n\n4. **Scraping failures**:\n```bash\n# Check target status\ncurl http://localhost:9090/api/v1/targets | jq '.data.activeTargets[] | select(.health != \"up\")'\n\n# Debug specific target\ncurl -v http://target-host:9100/metrics\n\n# Check Prometheus logs\njournalctl -u prometheus -f | grep \"error\"\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\n--log.level=debug\n\n# Enable query logging\n--log.queries-longer-than=0s\n\n# Profile Prometheus\ncurl http://localhost:9090/debug/pprof/profile?seconds=30 > profile.out\ngo tool pprof profile.out\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\n# Download new version\nPROMETHEUS_VERSION=\"2.49.0\"\nwget https://github.com/prometheus/prometheus/releases/download/v${PROMETHEUS_VERSION}/prometheus-${PROMETHEUS_VERSION}.linux-amd64.tar.gz\n\n# Backup current installation\ncp /usr/local/bin/prometheus /usr/local/bin/prometheus.backup\n\n# Update binaries\ntar xzf prometheus-${PROMETHEUS_VERSION}.linux-amd64.tar.gz\ncd prometheus-${PROMETHEUS_VERSION}.linux-amd64\nsudo systemctl stop prometheus\nsudo cp prometheus promtool /usr/local/bin/\nsudo systemctl start prometheus\n\n# Debian/Ubuntu\n# Similar process for manual installation\n# For snap: sudo snap refresh prometheus\n\n# Arch Linux\nsudo pacman -Syu prometheus\n\n# Alpine Linux\napk upgrade prometheus\n\n# openSUSE\nsudo zypper update prometheus\n\n# FreeBSD\npkg upgrade prometheus\n\n# macOS\nbrew upgrade prometheus\n\n# Windows\n# Update using package manager or manual download\n```\n\n### Health Checks\n\n```bash\n#!/bin/bash\n# prometheus-health-check.sh\n\n# Check if Prometheus is healthy\nif ! curl -f -s http://localhost:9090/-/healthy > /dev/null; then\n    echo \"CRITICAL: Prometheus is not healthy\"\n    exit 2\nfi\n\n# Check if Prometheus is ready\nif ! curl -f -s http://localhost:9090/-/ready > /dev/null; then\n    echo \"WARNING: Prometheus is not ready\"\n    exit 1\nfi\n\n# Check storage space\nUSED_PERCENT=$(df /var/lib/prometheus | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ \"$USED_PERCENT\" -gt 85 ]; then\n    echo \"WARNING: Storage usage is ${USED_PERCENT}%\"\n    exit 1\nfi\n\n# Check for failed targets\nFAILED_TARGETS=$(curl -s http://localhost:9090/api/v1/targets | jq '[.data.activeTargets[] | select(.health != \"up\")] | length')\nif [ \"$FAILED_TARGETS\" -gt 0 ]; then\n    echo \"WARNING: $FAILED_TARGETS targets are down\"\n    exit 1\nfi\n\necho \"OK: Prometheus is healthy\"\nexit 0\n```\n\n### Cleanup Tasks\n\n```bash\n# Remove old snapshots\nfind /var/lib/prometheus/snapshots -type d -mtime +7 -exec rm -rf {} \\; 2>/dev/null\n\n# Compact TSDB\npromtool tsdb compact /var/lib/prometheus\n\n# Clean WAL\npromtool tsdb clean /var/lib/prometheus\n\n# Remove old backups\nfind /backup/prometheus -type d -mtime +30 -exec rm -rf {} \\; 2>/dev/null\n```\n\n## Integration Examples\n\n### Grafana Integration\n\n```bash\n# Add Prometheus datasource via API\ncurl -X POST http://admin:admin@localhost:3000/api/datasources \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"name\": \"Prometheus\",\n    \"type\": \"prometheus\",\n    \"url\": \"http://localhost:9090\",\n    \"access\": \"proxy\",\n    \"isDefault\": true\n  }'\n```\n\n### Alertmanager Integration\n\n```yaml\n# alertmanager.yml\nglobal:\n  resolve_timeout: 5m\n\nroute:\n  group_by: ['alertname']\n  group_wait: 10s\n  group_interval: 10s\n  repeat_interval: 1h\n  receiver: 'web.hook'\n\nreceivers:\n  - name: 'web.hook'\n    webhook_configs:\n      - url: 'http://localhost:5001/'\n```\n\n### Application Instrumentation\n\n```python\n# Python example\nfrom prometheus_client import Counter, Histogram, Gauge, start_http_server\nimport time\n\n# Create metrics\nREQUEST_COUNT = Counter('app_requests_total', 'Total requests', ['method', 'endpoint'])\nREQUEST_LATENCY = Histogram('app_request_latency_seconds', 'Request latency')\nACTIVE_USERS = Gauge('app_active_users', 'Active users')\n\n# Use in application\n@REQUEST_LATENCY.time()\ndef process_request():\n    REQUEST_COUNT.labels(method='GET', endpoint='/api').inc()\n    ACTIVE_USERS.set(42)\n    time.sleep(0.1)\n\n# Start metrics server\nstart_http_server(8000)\n```\n\n```javascript\n// Node.js example\nconst prometheus = require('prom-client');\nconst express = require('express');\n\n// Create metrics\nconst httpRequestDuration = new prometheus.Histogram({\n  name: 'http_request_duration_seconds',\n  help: 'Duration of HTTP requests in seconds',\n  labelNames: ['method', 'route', 'status']\n});\n\nconst app = express();\n\n// Middleware to track metrics\napp.use((req, res, next) => {\n  const end = httpRequestDuration.startTimer();\n  res.on('finish', () => {\n    end({ method: req.method, route: req.path, status: res.statusCode });\n  });\n  next();\n});\n\n// Metrics endpoint\napp.get('/metrics', async (req, res) => {\n  res.set('Content-Type', prometheus.register.contentType);\n  res.end(await prometheus.register.metrics());\n});\n```\n\n```go\n// Go example\npackage main\n\nimport (\n    \"net/http\"\n    \"github.com/prometheus/client_golang/prometheus\"\n    \"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\n\nvar (\n    httpRequests = prometheus.NewCounterVec(\n        prometheus.CounterOpts{\n            Name: \"http_requests_total\",\n            Help: \"Total number of HTTP requests\",\n        },\n        []string{\"method\", \"endpoint\"},\n    )\n)\n\nfunc init() {\n    prometheus.MustRegister(httpRequests)\n}\n\nfunc main() {\n    http.Handle(\"/metrics\", promhttp.Handler())\n    http.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n        httpRequests.WithLabelValues(r.Method, r.URL.Path).Inc()\n        w.Write([]byte(\"Hello World\"))\n    })\n    http.ListenAndServe(\":8080\", nil)\n}\n```\n\n## Additional Resources\n\n- [Official Documentation](https://prometheus.io/docs/)\n- [GitHub Repository](https://github.com/prometheus/prometheus)\n- [PromQL Documentation](https://prometheus.io/docs/prometheus/latest/querying/basics/)\n- [Best Practices](https://prometheus.io/docs/practices/)\n- [Awesome Prometheus](https://github.com/roaldnefs/awesome-prometheus)\n- [Prometheus Operator](https://github.com/prometheus-operator/prometheus-operator)\n- [Exporters](https://prometheus.io/docs/instrumenting/exporters/)\n- [Community](https://prometheus.io/community/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">Prometheus is a free and open-source systems monitoring and alerting toolkit originally built at SoundCloud. Now a standalone project and part of the Cloud Native Computing Foundation, it features a multi-dimensional data model with time series data identified by metric name and key/value pairs, PromQL query language, and powerful alerting capabilities. It serves as a FOSS alternative to commercial monitoring solutions like Datadog, New Relic, or Splunk, offering enterprise-grade monitoring and alerting without licensing costs.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 20GB minimum (100GB+ SSD recommended for metrics retention)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for scraping targets</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 2.6.32+</li>\n<li class=\"mobile-list-item\">macOS: 10.12+ (Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9090 (Prometheus web UI and API)</li>\n<li class=\"mobile-list-item\">Port 9093 (Alertmanager)</li>\n<li class=\"mobile-list-item\">Port 9094 (Alertmanager cluster)</li>\n<li class=\"mobile-list-item\">Various ports for exporters (9100 for node_exporter, etc.)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">No runtime dependencies (Go binary)</li>\n<li class=\"mobile-list-item\">Optional: Grafana for visualization</li>\n<li class=\"mobile-list-item\">Optional: Alertmanager for alerting</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges for installation</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create prometheus user\nsudo useradd --no-create-home --shell /bin/false prometheus\n\n# Create directories\nsudo mkdir -p /etc/prometheus /var/lib/prometheus\nsudo chown prometheus:prometheus /etc/prometheus /var/lib/prometheus\n\n# Download latest Prometheus\nPROMETHEUS_VERSION=&quot;2.48.0&quot;\ncd /tmp\nwget https://github.com/prometheus/prometheus/releases/download/v${PROMETHEUS_VERSION}/prometheus-${PROMETHEUS_VERSION}.linux-amd64.tar.gz\ntar xzf prometheus-${PROMETHEUS_VERSION}.linux-amd64.tar.gz\n\n# Install binaries\ncd prometheus-${PROMETHEUS_VERSION}.linux-amd64\nsudo cp prometheus promtool /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/prometheus /usr/local/bin/promtool\n\n# Copy configuration files\nsudo cp -r consoles console_libraries /etc/prometheus/\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles /etc/prometheus/console_libraries\n\n# Create basic configuration\nsudo tee /etc/prometheus/prometheus.yml &gt; /dev/null &lt;&lt;EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nscrape_configs:\n  - job_name: &#039;prometheus&#039;\n    static_configs:\n      - targets: [&#039;localhost:9090&#039;]\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Method 1: From official repository\nwget -O prometheus.tar.gz https://github.com/prometheus/prometheus/releases/download/v2.48.0/prometheus-2.48.0.linux-amd64.tar.gz\ntar xzf prometheus.tar.gz\ncd prometheus-*\n\n# Create user and directories\nsudo useradd --no-create-home --shell /bin/false prometheus\nsudo mkdir -p /etc/prometheus /var/lib/prometheus\nsudo cp prometheus promtool /usr/local/bin/\nsudo cp -r consoles console_libraries /etc/prometheus/\nsudo chown -R prometheus:prometheus /etc/prometheus /var/lib/prometheus /usr/local/bin/prometheus /usr/local/bin/promtool\n\n# Method 2: Using snap (simpler but less flexible)\nsudo snap install prometheus\n\n# Method 3: From community packages (older version)\nsudo apt update\nsudo apt install -y prometheus</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from official repositories\nsudo pacman -S prometheus\n\n# Optional: Install exporters\nsudo pacman -S prometheus-node-exporter\nsudo pacman -S prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now prometheus\n\n# For latest version from AUR\nyay -S prometheus-bin\n\n# Configuration location: /etc/prometheus/prometheus.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Prometheus\napk add --no-cache prometheus prometheus-node-exporter\n\n# Create prometheus user if not exists\nadduser -D -H -s /sbin/nologin prometheus\n\n# Create directories\nmkdir -p /etc/prometheus /var/lib/prometheus\nchown prometheus:prometheus /etc/prometheus /var/lib/prometheus\n\n# Enable and start service\nrc-update add prometheus default\nrc-service prometheus start\n\n# For Alertmanager\napk add --no-cache alertmanager</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y prometheus\n\n# For latest version, build from source\nsudo zypper install -y go\ngo install github.com/prometheus/prometheus/cmd/prometheus@latest\nsudo cp ~/go/bin/prometheus /usr/local/bin/\n\n# SLES 15\n# May need to add monitoring repository\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y prometheus\n\n# Create service user\nsudo useradd --no-create-home --shell /bin/false prometheus\n\n# Enable and start service\nsudo systemctl enable --now prometheus</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install prometheus\n\n# Start as service\nbrew services start prometheus\n\n# Or run manually\nprometheus --config.file=/usr/local/etc/prometheus.yml\n\n# Install exporters\nbrew install prometheus-node-exporter\n\n# Configuration location: /usr/local/etc/prometheus.yml\n# Alternative: /opt/homebrew/etc/prometheus.yml (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install prometheus\npkg install node_exporter\n\n# Using ports\ncd /usr/ports/net-mgmt/prometheus\nmake install clean\n\n# Enable in rc.conf\necho &#039;prometheus_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\necho &#039;node_exporter_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start services\nservice prometheus start\nservice node_exporter start\n\n# Configuration location: /usr/local/etc/prometheus.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install prometheus\n\n# Method 2: Using Scoop\nscoop bucket add extras\nscoop install prometheus\n\n# Method 3: Manual installation\n# Download from https://github.com/prometheus/prometheus/releases\n# Extract to C:\\prometheus\n# Create C:\\prometheus\\prometheus.yml\n\n# Install as Windows service using NSSM\nnssm install prometheus C:\\prometheus\\prometheus.exe\nnssm set prometheus AppParameters &quot;--config.file=C:\\prometheus\\prometheus.yml --storage.tsdb.path=C:\\prometheus\\data&quot;\nnssm set prometheus AppDirectory C:\\prometheus\nnssm start prometheus\n\n# Or use Windows Service Wrapper\n# Download WinSW from https://github.com/winsw/winsw/releases</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create Prometheus user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/lib/prometheus -s /sbin/nologin -c &quot;Prometheus monitoring&quot; prometheus</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/prometheus/prometheus.yml</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/prometheus/prometheus.yml</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/prometheus/prometheus.yml</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/prometheus/prometheus.yml</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/prometheus/prometheus.yml</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/prometheus.yml</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/prometheus.yml</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\prometheus\\prometheus.yml</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/prometheus/prometheus.yml\nglobal:\n  scrape_interval: 15s       # How often to scrape targets\n  evaluation_interval: 15s   # How often to evaluate rules\n  external_labels:          # Labels to add to all metrics\n    cluster: &#039;production&#039;\n    replica: &#039;prometheus-1&#039;\n\n# Alertmanager configuration\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          - localhost:9093\n\n# Load rules once and periodically evaluate them\nrule_files:\n  - &quot;rules/*.yml&quot;\n\n# Scrape configurations\nscrape_configs:\n  # Prometheus itself\n  - job_name: &#039;prometheus&#039;\n    static_configs:\n      - targets: [&#039;localhost:9090&#039;]\n\n  # Node exporter for system metrics\n  - job_name: &#039;node&#039;\n    static_configs:\n      - targets: [&#039;localhost:9100&#039;]</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test configuration syntax\npromtool check config /etc/prometheus/prometheus.yml\n\n# Start Prometheus (if not using systemd)\nprometheus --config.file=/etc/prometheus/prometheus.yml\n\n# Verify Prometheus is running\ncurl http://localhost:9090/-/healthy\n\n# Check targets\ncurl http://localhost:9090/api/v1/targets\n\n# Run a test query\ncurl http://localhost:9090/api/v1/query?query=up</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Never expose Prometheus to the public internet without authentication!</p>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service file\nsudo tee /etc/systemd/system/prometheus.service &lt;&lt;EOF\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nRestart=always\nRestartSec=5s\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --web.enable-lifecycle\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Reload systemd and start Prometheus\nsudo systemctl daemon-reload\nsudo systemctl enable prometheus\nsudo systemctl start prometheus\n\n# Management commands\nsudo systemctl stop prometheus\nsudo systemctl restart prometheus\nsudo systemctl status prometheus\n\n# View logs\nsudo journalctl -u prometheus -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create init script\nsudo tee /etc/init.d/prometheus &lt;&lt;&#039;EOF&#039;\n#!/sbin/openrc-run\n\nname=&quot;prometheus&quot;\ndescription=&quot;Prometheus monitoring system&quot;\ncommand=&quot;/usr/bin/prometheus&quot;\ncommand_args=&quot;--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/var/lib/prometheus/&quot;\ncommand_user=&quot;prometheus:prometheus&quot;\npidfile=&quot;/run/${RC_SVCNAME}.pid&quot;\nstart_stop_daemon_args=&quot;--background --make-pidfile&quot;\n\ndepend() {\n    need net\n    after firewall\n}\nEOF\n\nsudo chmod +x /etc/init.d/prometheus\n\n# Enable and start\nrc-update add prometheus default\nrc-service prometheus start\n\n# Management commands\nrc-service prometheus stop\nrc-service prometheus restart\nrc-service prometheus status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;prometheus_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\necho &#039;prometheus_config=&quot;/usr/local/etc/prometheus.yml&quot;&#039; &gt;&gt; /etc/rc.conf\necho &#039;prometheus_data_dir=&quot;/var/db/prometheus&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Prometheus\nservice prometheus start\n\n# Management commands\nservice prometheus stop\nservice prometheus restart\nservice prometheus status\nservice prometheus reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start prometheus\nbrew services stop prometheus\nbrew services restart prometheus\n\n# Check status\nbrew services list | grep prometheus\n\n# Manual launchd management\nsudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.prometheus.plist\nsudo launchctl unload /Library/LaunchDaemons/homebrew.mxcl.prometheus.plist</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using NSSM\nnssm start prometheus\nnssm stop prometheus\nnssm restart prometheus\n\n# Using native Windows commands\nStart-Service prometheus\nStop-Service prometheus\nRestart-Service prometheus\n\n# Check status\nGet-Service prometheus\n\n# View logs\nGet-EventLog -LogName Application -Source prometheus -Newest 50</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"storage-configuration\" class=\"mobile-header\">Storage Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Advanced storage settings via command-line flags\n--storage.tsdb.path=/var/lib/prometheus/\n--storage.tsdb.retention.time=30d\n--storage.tsdb.retention.size=50GB\n--storage.tsdb.wal-compression\n--storage.tsdb.max-block-duration=2h\n--storage.tsdb.min-block-duration=2h</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml for HA setup\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n  external_labels:\n    cluster: &#039;production&#039;\n    replica: &#039;1&#039;  # Different for each replica\n\n# Remote write for long-term storage\nremote_write:\n  - url: &quot;http://thanos-receive:19291/api/v1/receive&quot;\n    queue_config:\n      max_samples_per_send: 10000\n      batch_send_deadline: 5s\n      max_retries: 3\n\n# Remote read for querying historical data\nremote_read:\n  - url: &quot;http://thanos-query:9090/api/v1/read&quot;\n    read_recent: true</code></pre>\n      </div>\n    </div>\n<h3 id=\"service-discovery\" class=\"mobile-header\">Service Discovery</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Kubernetes service discovery\nscrape_configs:\n  - job_name: &#039;kubernetes-pods&#039;\n    kubernetes_sd_configs:\n      - role: pod\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]\n        action: keep\n        regex: true\n      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]\n        action: replace\n        target_label: __metrics_path__\n        regex: (.+)\n\n# File-based service discovery\n  - job_name: &#039;file-sd&#039;\n    file_sd_configs:\n      - files:\n        - &#039;/etc/prometheus/targets/*.yml&#039;\n        refresh_interval: 5m\n\n# DNS service discovery\n  - job_name: &#039;dns-sd&#039;\n    dns_sd_configs:\n      - names:\n        - &#039;_prometheus._tcp.example.com&#039;\n        type: &#039;SRV&#039;\n        refresh_interval: 30s</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/prometheus\nupstream prometheus {\n    server 127.0.0.1:9090;\n}\n\nserver {\n    listen 80;\n    server_name prometheus.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prometheus.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/prometheus.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/prometheus.example.com/privkey.pem;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=63072000&quot; always;\n    add_header X-Frame-Options &quot;DENY&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n\n    location / {\n        proxy_pass http://prometheus;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Basic authentication\n        auth_basic &quot;Prometheus&quot;;\n        auth_basic_user_file /etc/nginx/.htpasswd;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/prometheus.conf\n&lt;VirtualHost *:443&gt;\n    ServerName prometheus.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/prometheus.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/prometheus.example.com/privkey.pem\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:9090/\n    ProxyPassReverse / http://localhost:9090/\n    \n    &lt;Location /&gt;\n        AuthType Basic\n        AuthName &quot;Prometheus&quot;\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    &lt;/Location&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddyfile\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddyfile</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddyfile\">prometheus.example.com {\n    reverse_proxy localhost:9090\n    \n    basicauth {\n        admin $2a$14$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    }\n    \n    header {\n        Strict-Transport-Security &quot;max-age=63072000&quot;\n        X-Frame-Options &quot;DENY&quot;\n        X-Content-Type-Options &quot;nosniff&quot;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend prometheus_frontend\n    bind *:443 ssl crt /etc/haproxy/certs/prometheus.pem\n    mode http\n    option httplog\n    \n    # Basic auth\n    acl auth_ok http_auth(users)\n    http-request auth realm Prometheus if !auth_ok\n    \n    default_backend prometheus_backend\n\nbackend prometheus_backend\n    mode http\n    balance roundrobin\n    option httpchk GET /-/healthy\n    server prometheus1 127.0.0.1:9090 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"authentication-with-basic-auth\" class=\"mobile-header\">Authentication with Basic Auth</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate password file\nhtpasswd -c /etc/prometheus/.htpasswd admin\n\n# Configure Prometheus with basic auth\nsudo tee /etc/prometheus/web.yml &lt;&lt;EOF\nbasic_auth_users:\n  admin: $2y$10$hashed_password_here\nEOF\n\n# Update systemd service to use web config\nExecStart=/usr/local/bin/prometheus \\\n    --config.file=/etc/prometheus/prometheus.yml \\\n    --web.config.file=/etc/prometheus/web.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"tls-configuration\" class=\"mobile-header\">TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># web.yml for TLS\ntls_server_config:\n  cert_file: /etc/prometheus/prometheus.crt\n  key_file: /etc/prometheus/prometheus.key\n  client_auth_type: RequireAndVerifyClientCert\n  client_ca_file: /etc/prometheus/ca.crt\n  min_version: TLS12\n  cipher_suites:\n    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 9090\nsudo ufw allow from 192.168.1.0/24 to any port 9093\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=prometheus\nsudo firewall-cmd --permanent --zone=prometheus --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=prometheus --add-port=9090/tcp\nsudo firewall-cmd --permanent --zone=prometheus --add-port=9093/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9090 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 9093 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 9090\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port 9093\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;Prometheus&quot; -Direction Inbound -Protocol TCP -LocalPort 9090 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-best-practices\" class=\"mobile-header\">Security Best Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Restrict Prometheus data directory permissions\nsudo chmod 700 /var/lib/prometheus\nsudo chown -R prometheus:prometheus /var/lib/prometheus\n\n# Disable admin API endpoints in production\n# Remove --web.enable-admin-api flag\n\n# Enable CORS restrictions\n--web.cors.origin=&quot;https://grafana.example.com&quot;\n\n# Set read timeout\n--web.read-timeout=5m\n\n# Limit concurrent queries\n--query.max-concurrency=20</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">Prometheus uses its own time-series database (TSDB) and doesn't require external database setup. However, you can configure remote storage:</p>\n<h3 id=\"remote-storage-options\" class=\"mobile-header\">Remote Storage Options</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># PostgreSQL with TimescaleDB\nremote_write:\n  - url: &quot;http://prometheus-postgresql-adapter:9201/write&quot;\nremote_read:\n  - url: &quot;http://prometheus-postgresql-adapter:9201/read&quot;\n\n# InfluxDB\nremote_write:\n  - url: &quot;http://influxdb:8086/api/v1/prom/write?db=prometheus&quot;\nremote_read:\n  - url: &quot;http://influxdb:8086/api/v1/prom/read?db=prometheus&quot;\n\n# Cortex/Thanos\nremote_write:\n  - url: &quot;http://cortex:9009/api/prom/push&quot;\n    queue_config:\n      capacity: 10000\n      max_samples_per_send: 3000</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-sizing\" class=\"mobile-header\">Storage Sizing</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Calculate storage requirements\n# Formula: retention_time * ingested_samples_per_second * bytes_per_sample\n# Example: 30 days * 100k samples/sec * 2 bytes = ~520GB\n\n# Monitor storage usage\ncurl http://localhost:9090/api/v1/query?query=prometheus_tsdb_storage_blocks_bytes\n\n# Configure retention\n--storage.tsdb.retention.time=30d\n--storage.tsdb.retention.size=500GB</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\nprometheus soft nofile 65535\nprometheus hard nofile 65535\nEOF\n\n# Kernel parameters for better performance\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Prometheus optimizations\nvm.max_map_count = 262144\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nEOF\n\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"query-optimization\" class=\"mobile-header\">Query Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Recording rules for expensive queries\ngroups:\n  - name: aggregations\n    interval: 30s\n    rules:\n      - record: node:cpu_utilization:avg1m\n        expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=&quot;idle&quot;}[1m])) * 100)\n      \n      - record: node:memory_utilization:ratio\n        expr: 1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-optimization\" class=\"mobile-header\">Storage Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable compression\n--storage.tsdb.wal-compression\n\n# Optimize block duration for your workload\n--storage.tsdb.max-block-duration=2h\n--storage.tsdb.min-block-duration=2h\n\n# Increase sample buffer\n--storage.tsdb.head-chunks-write-queue-size=1000000</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-metrics\" class=\"mobile-header\">Built-in Metrics</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Prometheus self-monitoring queries\n# Storage usage\nprometheus_tsdb_storage_blocks_bytes\n\n# Ingestion rate\nrate(prometheus_tsdb_head_samples_appended_total[5m])\n\n# Query performance\nhistogram_quantile(0.99, rate(prometheus_engine_query_duration_seconds_bucket[5m]))\n\n# Active time series\nprometheus_tsdb_head_series\n\n# Memory usage\nprocess_resident_memory_bytes</code></pre>\n      </div>\n    </div>\n<h3 id=\"alerting-rules\" class=\"mobile-header\">Alerting Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/prometheus/rules/prometheus.yml\ngroups:\n  - name: prometheus\n    rules:\n      - alert: PrometheusDown\n        expr: up{job=&quot;prometheus&quot;} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;Prometheus is down&quot;\n          \n      - alert: PrometheusStorageSpace\n        expr: prometheus_tsdb_storage_blocks_bytes / 1024 / 1024 / 1024 &gt; 100\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;Prometheus storage exceeds 100GB&quot;\n          \n      - alert: PrometheusHighMemory\n        expr: process_resident_memory_bytes / 1024 / 1024 / 1024 &gt; 8\n        for: 10m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;Prometheus memory usage exceeds 8GB&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring\" class=\"mobile-header\">External Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Blackbox exporter configuration for monitoring Prometheus\nmodules:\n  prometheus_health:\n    prober: http\n    timeout: 5s\n    http:\n      valid_status_codes: [200]\n      method: GET\n      path: /-/healthy\n      \n  prometheus_ready:\n    prober: http\n    timeout: 5s\n    http:\n      valid_status_codes: [200]\n      method: GET\n      path: /-/ready</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-procedures\" class=\"mobile-header\">Backup Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-prometheus.sh\n\nBACKUP_DIR=&quot;/backup/prometheus/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Option 1: Using snapshots (requires --web.enable-lifecycle)\ncurl -XPOST http://localhost:9090/api/v1/admin/tsdb/snapshot\nSNAPSHOT=$(curl -s http://localhost:9090/api/v1/admin/tsdb/snapshot | jq -r .data.name)\ncp -r /var/lib/prometheus/snapshots/$SNAPSHOT &quot;$BACKUP_DIR/data&quot;\n\n# Option 2: Direct file backup (requires stopping Prometheus)\nsystemctl stop prometheus\ntar czf &quot;$BACKUP_DIR/prometheus-data.tar.gz&quot; -C /var/lib/prometheus .\nsystemctl start prometheus\n\n# Backup configuration\ntar czf &quot;$BACKUP_DIR/prometheus-config.tar.gz&quot; -C /etc prometheus\n\n# Backup to remote storage\n# aws s3 cp &quot;$BACKUP_DIR&quot; s3://backups/prometheus/ --recursive\n# rsync -avz &quot;$BACKUP_DIR&quot; backup-server:/backups/prometheus/\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# restore-prometheus.sh\n\nBACKUP_DIR=&quot;$1&quot;\nif [ -z &quot;$BACKUP_DIR&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-directory&gt;&quot;\n    exit 1\nfi\n\n# Stop Prometheus\nsystemctl stop prometheus\n\n# Restore data\nrm -rf /var/lib/prometheus/*\ntar xzf &quot;$BACKUP_DIR/prometheus-data.tar.gz&quot; -C /var/lib/prometheus\nchown -R prometheus:prometheus /var/lib/prometheus\n\n# Restore configuration\ntar xzf &quot;$BACKUP_DIR/prometheus-config.tar.gz&quot; -C /etc\nchown -R prometheus:prometheus /etc/prometheus\n\n# Start Prometheus\nsystemctl start prometheus\n\necho &quot;Restore completed from: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"automated-backup\" class=\"mobile-header\">Automated Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create cron job for daily backups\necho &quot;0 2 * * * /usr/local/bin/backup-prometheus.sh&quot; | sudo tee -a /etc/crontab\n\n# Backup retention script\nfind /backup/prometheus -type d -mtime +30 -exec rm -rf {} \\; 2&gt;/dev/null</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>High memory usage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check cardinality\ncurl -s http://localhost:9090/api/v1/label/__name__/values | jq -r &#039;.data[]&#039; | wc -l\n\n# Find high cardinality metrics\ntopk(10, count by (__name__)({__name__=~&quot;.+&quot;}))\n\n# Reduce memory usage\n--storage.tsdb.retention.time=15d  # Reduce retention\n--query.max-samples=50000000       # Limit query samples</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Slow queries</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable query logging\n--log.queries-longer-than=10s\n\n# Check slow queries\ncurl &#039;http://localhost:9090/api/v1/query?query=up&amp;stats=all&#039; | jq .stats\n\n# Add recording rules for expensive queries</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Storage issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check disk space\ndf -h /var/lib/prometheus\n\n# Clean up old blocks\npromtool tsdb clean /var/lib/prometheus\n\n# Analyze TSDB\npromtool tsdb analyze /var/lib/prometheus</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Scraping failures</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check target status\ncurl http://localhost:9090/api/v1/targets | jq &#039;.data.activeTargets[] | select(.health != &quot;up&quot;)&#039;\n\n# Debug specific target\ncurl -v http://target-host:9100/metrics\n\n# Check Prometheus logs\njournalctl -u prometheus -f | grep &quot;error&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\n--log.level=debug\n\n# Enable query logging\n--log.queries-longer-than=0s\n\n# Profile Prometheus\ncurl http://localhost:9090/debug/pprof/profile?seconds=30 &gt; profile.out\ngo tool pprof profile.out</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\n# Download new version\nPROMETHEUS_VERSION=&quot;2.49.0&quot;\nwget https://github.com/prometheus/prometheus/releases/download/v${PROMETHEUS_VERSION}/prometheus-${PROMETHEUS_VERSION}.linux-amd64.tar.gz\n\n# Backup current installation\ncp /usr/local/bin/prometheus /usr/local/bin/prometheus.backup\n\n# Update binaries\ntar xzf prometheus-${PROMETHEUS_VERSION}.linux-amd64.tar.gz\ncd prometheus-${PROMETHEUS_VERSION}.linux-amd64\nsudo systemctl stop prometheus\nsudo cp prometheus promtool /usr/local/bin/\nsudo systemctl start prometheus\n\n# Debian/Ubuntu\n# Similar process for manual installation\n# For snap: sudo snap refresh prometheus\n\n# Arch Linux\nsudo pacman -Syu prometheus\n\n# Alpine Linux\napk upgrade prometheus\n\n# openSUSE\nsudo zypper update prometheus\n\n# FreeBSD\npkg upgrade prometheus\n\n# macOS\nbrew upgrade prometheus\n\n# Windows\n# Update using package manager or manual download</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# prometheus-health-check.sh\n\n# Check if Prometheus is healthy\nif ! curl -f -s http://localhost:9090/-/healthy &gt; /dev/null; then\n    echo &quot;CRITICAL: Prometheus is not healthy&quot;\n    exit 2\nfi\n\n# Check if Prometheus is ready\nif ! curl -f -s http://localhost:9090/-/ready &gt; /dev/null; then\n    echo &quot;WARNING: Prometheus is not ready&quot;\n    exit 1\nfi\n\n# Check storage space\nUSED_PERCENT=$(df /var/lib/prometheus | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ &quot;$USED_PERCENT&quot; -gt 85 ]; then\n    echo &quot;WARNING: Storage usage is ${USED_PERCENT}%&quot;\n    exit 1\nfi\n\n# Check for failed targets\nFAILED_TARGETS=$(curl -s http://localhost:9090/api/v1/targets | jq &#039;[.data.activeTargets[] | select(.health != &quot;up&quot;)] | length&#039;)\nif [ &quot;$FAILED_TARGETS&quot; -gt 0 ]; then\n    echo &quot;WARNING: $FAILED_TARGETS targets are down&quot;\n    exit 1\nfi\n\necho &quot;OK: Prometheus is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"cleanup-tasks\" class=\"mobile-header\">Cleanup Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Remove old snapshots\nfind /var/lib/prometheus/snapshots -type d -mtime +7 -exec rm -rf {} \\; 2&gt;/dev/null\n\n# Compact TSDB\npromtool tsdb compact /var/lib/prometheus\n\n# Clean WAL\npromtool tsdb clean /var/lib/prometheus\n\n# Remove old backups\nfind /backup/prometheus -type d -mtime +30 -exec rm -rf {} \\; 2&gt;/dev/null</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"grafana-integration\" class=\"mobile-header\">Grafana Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Prometheus datasource via API\ncurl -X POST http://admin:admin@localhost:3000/api/datasources \\\n  -H &#039;Content-Type: application/json&#039; \\\n  -d &#039;{\n    &quot;name&quot;: &quot;Prometheus&quot;,\n    &quot;type&quot;: &quot;prometheus&quot;,\n    &quot;url&quot;: &quot;http://localhost:9090&quot;,\n    &quot;access&quot;: &quot;proxy&quot;,\n    &quot;isDefault&quot;: true\n  }&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"alertmanager-integration\" class=\"mobile-header\">Alertmanager Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># alertmanager.yml\nglobal:\n  resolve_timeout: 5m\n\nroute:\n  group_by: [&#039;alertname&#039;]\n  group_wait: 10s\n  group_interval: 10s\n  repeat_interval: 1h\n  receiver: &#039;web.hook&#039;\n\nreceivers:\n  - name: &#039;web.hook&#039;\n    webhook_configs:\n      - url: &#039;http://localhost:5001/&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-instrumentation\" class=\"mobile-header\">Application Instrumentation</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Python example\nfrom prometheus_client import Counter, Histogram, Gauge, start_http_server\nimport time\n\n# Create metrics\nREQUEST_COUNT = Counter(&#039;app_requests_total&#039;, &#039;Total requests&#039;, [&#039;method&#039;, &#039;endpoint&#039;])\nREQUEST_LATENCY = Histogram(&#039;app_request_latency_seconds&#039;, &#039;Request latency&#039;)\nACTIVE_USERS = Gauge(&#039;app_active_users&#039;, &#039;Active users&#039;)\n\n# Use in application\n@REQUEST_LATENCY.time()\ndef process_request():\n    REQUEST_COUNT.labels(method=&#039;GET&#039;, endpoint=&#039;/api&#039;).inc()\n    ACTIVE_USERS.set(42)\n    time.sleep(0.1)\n\n# Start metrics server\nstart_http_server(8000)</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Node.js example\nconst prometheus = require(&#039;prom-client&#039;);\nconst express = require(&#039;express&#039;);\n\n// Create metrics\nconst httpRequestDuration = new prometheus.Histogram({\n  name: &#039;http_request_duration_seconds&#039;,\n  help: &#039;Duration of HTTP requests in seconds&#039;,\n  labelNames: [&#039;method&#039;, &#039;route&#039;, &#039;status&#039;]\n});\n\nconst app = express();\n\n// Middleware to track metrics\napp.use((req, res, next) =&gt; {\n  const end = httpRequestDuration.startTimer();\n  res.on(&#039;finish&#039;, () =&gt; {\n    end({ method: req.method, route: req.path, status: res.statusCode });\n  });\n  next();\n});\n\n// Metrics endpoint\napp.get(&#039;/metrics&#039;, async (req, res) =&gt; {\n  res.set(&#039;Content-Type&#039;, prometheus.register.contentType);\n  res.end(await prometheus.register.metrics());\n});</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"go\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">go</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-go\">// Go example\npackage main\n\nimport (\n    &quot;net/http&quot;\n    &quot;github.com/prometheus/client_golang/prometheus&quot;\n    &quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;\n)\n\nvar (\n    httpRequests = prometheus.NewCounterVec(\n        prometheus.CounterOpts{\n            Name: &quot;http_requests_total&quot;,\n            Help: &quot;Total number of HTTP requests&quot;,\n        },\n        []string{&quot;method&quot;, &quot;endpoint&quot;},\n    )\n)\n\nfunc init() {\n    prometheus.MustRegister(httpRequests)\n}\n\nfunc main() {\n    http.Handle(&quot;/metrics&quot;, promhttp.Handler())\n    http.HandleFunc(&quot;/&quot;, func(w http.ResponseWriter, r *http.Request) {\n        httpRequests.WithLabelValues(r.Method, r.URL.Path).Inc()\n        w.Write([]byte(&quot;Hello World&quot;))\n    })\n    http.ListenAndServe(&quot;:8080&quot;, nil)\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/prometheus/prometheus\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/prometheus/latest/querying/basics/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">PromQL Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/roaldnefs/awesome-prometheus\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Awesome Prometheus</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/prometheus-operator/prometheus-operator\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prometheus Operator</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/instrumenting/exporters/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Exporters</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/community/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"16 min","wordCount":3186,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"First-Run Setup","id":"first-run-setup"},{"level":3,"text":"Testing Initial Setup","id":"testing-initial-setup"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Storage Configuration","id":"storage-configuration"},{"level":3,"text":"High Availability Setup","id":"high-availability-setup"},{"level":3,"text":"Service Discovery","id":"service-discovery"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"Caddy Configuration","id":"caddy-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Authentication with Basic Auth","id":"authentication-with-basic-auth"},{"level":3,"text":"TLS Configuration","id":"tls-configuration"},{"level":3,"text":"Firewall Rules","id":"firewall-rules"},{"level":3,"text":"Security Best Practices","id":"security-best-practices"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"Remote Storage Options","id":"remote-storage-options"},{"level":3,"text":"Storage Sizing","id":"storage-sizing"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Query Optimization","id":"query-optimization"},{"level":3,"text":"Storage Optimization","id":"storage-optimization"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Built-in Metrics","id":"built-in-metrics"},{"level":3,"text":"Alerting Rules","id":"alerting-rules"},{"level":3,"text":"External Monitoring","id":"external-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Procedures","id":"backup-procedures"},{"level":3,"text":"Restore Procedures","id":"restore-procedures"},{"level":3,"text":"Automated Backup","id":"automated-backup"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Cleanup Tasks","id":"cleanup-tasks"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Grafana Integration","id":"grafana-integration"},{"level":3,"text":"Alertmanager Integration","id":"alertmanager-integration"},{"level":3,"text":"Application Instrumentation","id":"application-instrumentation"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-17T18:15:04.581Z","metadataVersion":"2.0"},"category":{"key":"monitoring","name":"Monitoring","description":"Monitoring tools and applications","icon":"📊","color":"#ffb86c"},"relatedGuides":[{"name":"blackbox-exporter","displayName":"Blackbox Exporter Installation Guide","slug":"blackbox-exporter","description":"Blackbox Exporter is a Prometheus exporter that allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC. It's essential for monitoring external services and endpoints from a user perspective.","category":"monitoring","subcategory":"monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["arch"],"defaultPorts":[5432,5672,6379,8080,9115],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["monitoring","containerization","observability","data-storage","security","networking"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/monitoring/blackbox-exporter","documentationUrl":"https://howtomgr.github.io/monitoring/blackbox-exporter","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/blackbox-exporter","updatedAt":"2025-09-16T17:00:38Z","createdAt":"2025-09-16T02:22:27Z","readmeRaw":"# Blackbox Exporter Installation Guide\n\nBlackbox Exporter is a Prometheus exporter that allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC. It's essential for monitoring external services and endpoints from a user perspective.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- Linux-based operating system\n- Prometheus server installed and configured\n- Basic understanding of Prometheus and monitoring concepts\n- Network access to targets you want to probe\n- For systemd service: systemd-based Linux distribution\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### Binary Installation\n\n1. **Download the latest release**:\n```bash\n# Check latest version at https://github.com/prometheus/blackbox_exporter/releases\nVERSION=\"0.24.0\"\nARCH=\"linux-amd64\"\n\n# Download binary\nwget https://github.com/prometheus/blackbox_exporter/releases/download/v${VERSION}/blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Extract archive\ntar xvfz blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Move binary to system path\nsudo mv blackbox_exporter-${VERSION}.${ARCH}/blackbox_exporter /usr/local/bin/\nsudo chown root:root /usr/local/bin/blackbox_exporter\nsudo chmod +x /usr/local/bin/blackbox_exporter\n```\n\n2. **Create user and directories**:\n```bash\n# Create system user\nsudo useradd --no-create-home --shell /bin/false blackbox_exporter\n\n# Create config directory\nsudo mkdir -p /etc/blackbox_exporter\nsudo chown blackbox_exporter:blackbox_exporter /etc/blackbox_exporter\n```\n\n### Docker Installation\n\n```bash\n# Run with Docker\ndocker run -d \\\n  --name blackbox_exporter \\\n  -p 9115:9115 \\\n  -v /path/to/blackbox.yml:/config/blackbox.yml \\\n  prom/blackbox-exporter:latest \\\n  --config.file=/config/blackbox.yml\n```\n\n### Package Manager Installation\n\n**Ubuntu/Debian**:\n```bash\n# Not available in default repos, use binary installation\n```\n\n**RHEL/CentOS/Fedora**:\n```bash\n# Not available in default repos, use binary installation\n```\n\n**Arch Linux**:\n```bash\nsudo pacman -S prometheus-blackbox-exporter\n```\n\n## 4. Configuration\n\n### Basic Configuration\n\nCreate `/etc/blackbox_exporter/blackbox.yml`:\n```yaml\nmodules:\n  # HTTP/HTTPS probe\n  http_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      preferred_ip_protocol: \"ip4\"\n      ip_protocol_fallback: false\n      valid_http_versions: [\"HTTP/1.1\", \"HTTP/2.0\"]\n      valid_status_codes: []  # Defaults to 2xx\n      method: GET\n      follow_redirects: true\n      fail_if_ssl: false\n      fail_if_not_ssl: false\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTPS with specific status codes\n  http_post_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      method: POST\n      headers:\n        Content-Type: application/json\n      body: '{\"test\": \"data\"}'\n      valid_status_codes: [200, 201, 202]\n\n  # TCP probe\n  tcp_connect:\n    prober: tcp\n    timeout: 5s\n\n  # ICMP ping probe\n  icmp:\n    prober: icmp\n    timeout: 5s\n    icmp:\n      preferred_ip_protocol: \"ip4\"\n\n  # DNS probe\n  dns_udp:\n    prober: dns\n    timeout: 5s\n    dns:\n      preferred_ip_protocol: \"ip4\"\n      query_name: \"www.example.com\"\n      query_type: \"A\"\n      valid_rcodes:\n        - NOERROR\n\n  # SSL certificate check\n  http_ssl_cert:\n    prober: http\n    timeout: 5s\n    http:\n      method: GET\n      fail_if_ssl: false\n      fail_if_not_ssl: true\n      tls_config:\n        insecure_skip_verify: false\n```\n\n### Advanced Modules\n\n```yaml\nmodules:\n  # HTTP with authentication\n  http_basic_auth:\n    prober: http\n    timeout: 5s\n    http:\n      basic_auth:\n        username: \"monitoring\"\n        password: \"secure_password\"\n      valid_status_codes: [200]\n\n  # HTTP with custom headers\n  http_custom_headers:\n    prober: http\n    timeout: 5s\n    http:\n      headers:\n        X-API-Key: \"your-api-key\"\n        Accept: \"application/json\"\n\n  # gRPC probe\n  grpc:\n    prober: grpc\n    timeout: 5s\n    grpc:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # TCP with TLS\n  tcp_tls:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTP with regex matching\n  http_content_match:\n    prober: http\n    timeout: 5s\n    http:\n      valid_status_codes: [200]\n      fail_if_body_not_matches_regexp:\n        - \"Welcome.*\"\n      fail_if_body_matches_regexp:\n        - \"Error.*\"\n\n  # Slow HTTP probe\n  http_slow:\n    prober: http\n    timeout: 30s\n    http:\n      method: GET\n```\n\n### Systemd Service\n\nCreate `/etc/systemd/system/blackbox_exporter.service`:\n```ini\n[Unit]\nDescription=Blackbox Exporter\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=blackbox_exporter\nGroup=blackbox_exporter\nExecStart=/usr/local/bin/blackbox_exporter \\\n  --config.file=/etc/blackbox_exporter/blackbox.yml \\\n  --web.listen-address=:9115\n\nRestart=on-failure\nRestartSec=5s\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/etc/blackbox_exporter\n\n# Required for ICMP probes\nAmbientCapabilities=CAP_NET_RAW\nCapabilityBoundingSet=CAP_NET_RAW\n\n[Install]\nWantedBy=multi-user.target\n```\n\nStart the service:\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable blackbox_exporter\nsudo systemctl start blackbox_exporter\nsudo systemctl status blackbox_exporter\n```\n\n## Prometheus Configuration\n\n### Configure Prometheus Scrape Jobs\n\nAdd to `prometheus.yml`:\n```yaml\nscrape_configs:\n  # Blackbox exporter itself\n  - job_name: 'blackbox'\n    static_configs:\n      - targets: ['localhost:9115']\n\n  # HTTP/HTTPS monitoring\n  - job_name: 'blackbox-http'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://api.example.com/health\n        - http://internal-service:8080\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # TCP port monitoring\n  - job_name: 'blackbox-tcp'\n    metrics_path: /probe\n    params:\n      module: [tcp_connect]\n    static_configs:\n      - targets:\n        - database.example.com:5432\n        - cache.example.com:6379\n        - message-broker.example.com:5672\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # ICMP ping monitoring\n  - job_name: 'blackbox-icmp'\n    metrics_path: /probe\n    params:\n      module: [icmp]\n    static_configs:\n      - targets:\n        - gateway.example.com\n        - dns1.example.com\n        - dns2.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # SSL certificate monitoring\n  - job_name: 'blackbox-ssl'\n    metrics_path: /probe\n    params:\n      module: [http_ssl_cert]\n    static_configs:\n      - targets:\n        - https://secure.example.com\n        - https://api.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n```\n\n### File-based Service Discovery\n\n```yaml\nscrape_configs:\n  - job_name: 'blackbox-http-file-sd'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    file_sd_configs:\n      - files:\n        - '/etc/prometheus/blackbox-targets/*.yml'\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n```\n\nTarget file `/etc/prometheus/blackbox-targets/web.yml`:\n```yaml\n- targets:\n  - https://app1.example.com\n  - https://app2.example.com\n  labels:\n    service: web\n    env: production\n\n- targets:\n  - https://staging.example.com\n  labels:\n    service: web\n    env: staging\n```\n\n## Alert Rules\n\nCreate `/etc/prometheus/alerts/blackbox.yml`:\n```yaml\ngroups:\n  - name: blackbox\n    rules:\n      # Website down\n      - alert: WebsiteDown\n        expr: probe_success{job=\"blackbox-http\"} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Website down (instance {{ $labels.instance }})\"\n          description: \"Website {{ $labels.instance }} has been down for more than 5 minutes.\"\n\n      # SSL certificate expiry\n      - alert: SSLCertificateExpiringSoon\n        expr: probe_ssl_earliest_cert_expiry - time() < 86400 * 30\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"SSL certificate expiring soon (instance {{ $labels.instance }})\"\n          description: \"SSL certificate for {{ $labels.instance }} expires in less than 30 days.\"\n\n      - alert: SSLCertificateExpired\n        expr: probe_ssl_earliest_cert_expiry - time() < 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"SSL certificate expired (instance {{ $labels.instance }})\"\n          description: \"SSL certificate for {{ $labels.instance }} has expired.\"\n\n      # Slow response time\n      - alert: SlowResponseTime\n        expr: probe_http_duration_seconds{job=\"blackbox-http\"} > 2\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Slow HTTP response (instance {{ $labels.instance }})\"\n          description: \"HTTP response time for {{ $labels.instance }} is {{ $value }}s (> 2s).\"\n\n      # TCP port down\n      - alert: TCPPortDown\n        expr: probe_success{job=\"blackbox-tcp\"} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"TCP port down (instance {{ $labels.instance }})\"\n          description: \"TCP port {{ $labels.instance }} has been down for more than 5 minutes.\"\n\n      # High packet loss\n      - alert: HighPacketLoss\n        expr: (1 - avg_over_time(probe_success{job=\"blackbox-icmp\"}[5m])) > 0.1\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High packet loss (instance {{ $labels.instance }})\"\n          description: \"Packet loss for {{ $labels.instance }} is {{ $value | humanizePercentage }}.\"\n```\n\n## Grafana Dashboard\n\nImport dashboard JSON or create custom dashboard with these queries:\n\n```promql\n# Probe success rate\nrate(probe_success{job=~\"blackbox-.*\"}[5m])\n\n# HTTP response time\nprobe_http_duration_seconds{job=\"blackbox-http\"}\n\n# SSL certificate days until expiry\n(probe_ssl_earliest_cert_expiry - time()) / 86400\n\n# DNS lookup time\nprobe_dns_lookup_time_seconds\n\n# TCP connection time\nprobe_tcp_duration_seconds\n\n# Uptime percentage (last 24h)\navg_over_time(probe_success{job=\"blackbox-http\"}[24h]) * 100\n\n# Status code distribution\nsum by (status_code) (probe_http_status_code)\n```\n\n## 7. Security Considerations\n\n### Network Security\n\n```bash\n# Firewall rules\nsudo ufw allow from prometheus_server_ip to any port 9115\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 9115 -s prometheus_server_ip -j ACCEPT\n```\n\n### Authentication\n\nEnable basic auth in blackbox exporter:\n```bash\n# Generate password hash\nhtpasswd -nBC 10 \"\" | tr -d ':\\n'\n\n# Add to blackbox_exporter command\n--web.config=/etc/blackbox_exporter/web.yml\n```\n\nCreate `/etc/blackbox_exporter/web.yml`:\n```yaml\nbasic_auth_users:\n  prometheus: $2b$10$...  # bcrypt hash\n```\n\n### TLS Configuration\n\n```yaml\ntls_server_config:\n  cert_file: /etc/blackbox_exporter/server.crt\n  key_file: /etc/blackbox_exporter/server.key\n```\n\n## 6. Troubleshooting\n\n### Testing Probes\n\n```bash\n# Test HTTP probe\ncurl \"http://localhost:9115/probe?target=https://example.com&module=http_2xx\"\n\n# Test with debug\ncurl \"http://localhost:9115/probe?target=https://example.com&module=http_2xx&debug=true\"\n\n# Check metrics\ncurl http://localhost:9115/metrics\n```\n\n### Common Issues\n\n1. **ICMP permission denied**:\n```bash\n# Set capability\nsudo setcap cap_net_raw+ep /usr/local/bin/blackbox_exporter\n\n# Or run as root (not recommended)\n```\n\n2. **Connection refused**:\n```bash\n# Check service status\nsudo systemctl status blackbox_exporter\n\n# Check logs\nsudo journalctl -u blackbox_exporter -f\n\n# Verify listening port\nsudo netstat -tlnp | grep 9115\n```\n\n3. **SSL verification failures**:\n```yaml\n# Temporarily disable verification (testing only)\ntls_config:\n  insecure_skip_verify: true\n```\n\n## 8. Performance Tuning\n\n### Concurrent Probes\n\n```bash\n# Increase concurrent probes\n--web.max-requests=100\n```\n\n### Timeout Optimization\n\n```yaml\n# Adjust timeouts based on network conditions\nmodules:\n  http_fast:\n    prober: http\n    timeout: 2s\n  http_slow:\n    prober: http\n    timeout: 30s\n```\n\n### Resource Limits\n\n```ini\n# In systemd service file\n[Service]\nLimitNOFILE=65535\nMemoryLimit=256M\nCPUQuota=50%\n```\n\n## Monitoring Best Practices\n\n1. **Probe frequency**: Balance between detection speed and load\n2. **Timeout values**: Set slightly below scrape interval\n3. **Module reuse**: Create specific modules for different use cases\n4. **Geographic distribution**: Deploy multiple blackbox exporters\n5. **Internal vs external**: Separate probes for internal/external services\n\n## Additional Resources\n\n- [Official Documentation](https://github.com/prometheus/blackbox_exporter)\n- [Configuration Examples](https://github.com/prometheus/blackbox_exporter/blob/master/example.yml)\n- [Prometheus Documentation](https://prometheus.io/docs/)\n- [Grafana Dashboards](https://grafana.com/grafana/dashboards?search=blackbox)\n- [Community Forum](https://groups.google.com/forum/#!forum/prometheus-users)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">Blackbox Exporter is a Prometheus exporter that allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC. It's essential for monitoring external services and endpoints from a user perspective.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux-based operating system</li>\n<li class=\"mobile-list-item\">Prometheus server installed and configured</li>\n<li class=\"mobile-list-item\">Basic understanding of Prometheus and monitoring concepts</li>\n<li class=\"mobile-list-item\">Network access to targets you want to probe</li>\n<li class=\"mobile-list-item\">For systemd service: systemd-based Linux distribution</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"binary-installation\" class=\"mobile-header\">Binary Installation</h3>\n<p class=\"mobile-paragraph\">1. <strong>Download the latest release</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check latest version at https://github.com/prometheus/blackbox_exporter/releases\nVERSION=&quot;0.24.0&quot;\nARCH=&quot;linux-amd64&quot;\n\n# Download binary\nwget https://github.com/prometheus/blackbox_exporter/releases/download/v${VERSION}/blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Extract archive\ntar xvfz blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Move binary to system path\nsudo mv blackbox_exporter-${VERSION}.${ARCH}/blackbox_exporter /usr/local/bin/\nsudo chown root:root /usr/local/bin/blackbox_exporter\nsudo chmod +x /usr/local/bin/blackbox_exporter</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Create user and directories</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create system user\nsudo useradd --no-create-home --shell /bin/false blackbox_exporter\n\n# Create config directory\nsudo mkdir -p /etc/blackbox_exporter\nsudo chown blackbox_exporter:blackbox_exporter /etc/blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run with Docker\ndocker run -d \\\n  --name blackbox_exporter \\\n  -p 9115:9115 \\\n  -v /path/to/blackbox.yml:/config/blackbox.yml \\\n  prom/blackbox-exporter:latest \\\n  --config.file=/config/blackbox.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"package-manager-installation\" class=\"mobile-header\">Package Manager Installation</h3>\n<p class=\"mobile-paragraph\"><strong>Ubuntu/Debian</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Not available in default repos, use binary installation</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>RHEL/CentOS/Fedora</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Not available in default repos, use binary installation</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>Arch Linux</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo pacman -S prometheus-blackbox-exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-configuration\" class=\"mobile-header\">4. Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/blackbox_exporter/blackbox.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">modules:\n  # HTTP/HTTPS probe\n  http_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      preferred_ip_protocol: &quot;ip4&quot;\n      ip_protocol_fallback: false\n      valid_http_versions: [&quot;HTTP/1.1&quot;, &quot;HTTP/2.0&quot;]\n      valid_status_codes: []  # Defaults to 2xx\n      method: GET\n      follow_redirects: true\n      fail_if_ssl: false\n      fail_if_not_ssl: false\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTPS with specific status codes\n  http_post_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      method: POST\n      headers:\n        Content-Type: application/json\n      body: &#039;{&quot;test&quot;: &quot;data&quot;}&#039;\n      valid_status_codes: [200, 201, 202]\n\n  # TCP probe\n  tcp_connect:\n    prober: tcp\n    timeout: 5s\n\n  # ICMP ping probe\n  icmp:\n    prober: icmp\n    timeout: 5s\n    icmp:\n      preferred_ip_protocol: &quot;ip4&quot;\n\n  # DNS probe\n  dns_udp:\n    prober: dns\n    timeout: 5s\n    dns:\n      preferred_ip_protocol: &quot;ip4&quot;\n      query_name: &quot;www.example.com&quot;\n      query_type: &quot;A&quot;\n      valid_rcodes:\n        - NOERROR\n\n  # SSL certificate check\n  http_ssl_cert:\n    prober: http\n    timeout: 5s\n    http:\n      method: GET\n      fail_if_ssl: false\n      fail_if_not_ssl: true\n      tls_config:\n        insecure_skip_verify: false</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-modules\" class=\"mobile-header\">Advanced Modules</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">modules:\n  # HTTP with authentication\n  http_basic_auth:\n    prober: http\n    timeout: 5s\n    http:\n      basic_auth:\n        username: &quot;monitoring&quot;\n        password: &quot;secure_password&quot;\n      valid_status_codes: [200]\n\n  # HTTP with custom headers\n  http_custom_headers:\n    prober: http\n    timeout: 5s\n    http:\n      headers:\n        X-API-Key: &quot;your-api-key&quot;\n        Accept: &quot;application/json&quot;\n\n  # gRPC probe\n  grpc:\n    prober: grpc\n    timeout: 5s\n    grpc:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # TCP with TLS\n  tcp_tls:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTP with regex matching\n  http_content_match:\n    prober: http\n    timeout: 5s\n    http:\n      valid_status_codes: [200]\n      fail_if_body_not_matches_regexp:\n        - &quot;Welcome.*&quot;\n      fail_if_body_matches_regexp:\n        - &quot;Error.*&quot;\n\n  # Slow HTTP probe\n  http_slow:\n    prober: http\n    timeout: 30s\n    http:\n      method: GET</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service\" class=\"mobile-header\">Systemd Service</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/systemd/system/blackbox_exporter.service</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[Unit]\nDescription=Blackbox Exporter\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=blackbox_exporter\nGroup=blackbox_exporter\nExecStart=/usr/local/bin/blackbox_exporter \\\n  --config.file=/etc/blackbox_exporter/blackbox.yml \\\n  --web.listen-address=:9115\n\nRestart=on-failure\nRestartSec=5s\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/etc/blackbox_exporter\n\n# Required for ICMP probes\nAmbientCapabilities=CAP_NET_RAW\nCapabilityBoundingSet=CAP_NET_RAW\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Start the service:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo systemctl daemon-reload\nsudo systemctl enable blackbox_exporter\nsudo systemctl start blackbox_exporter\nsudo systemctl status blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"prometheus-configuration\" class=\"mobile-header\">Prometheus Configuration</h2>\n<h3 id=\"configure-prometheus-scrape-jobs\" class=\"mobile-header\">Configure Prometheus Scrape Jobs</h3>\n<p class=\"mobile-paragraph\">Add to <code class=\"mobile-inline-code\">prometheus.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">scrape_configs:\n  # Blackbox exporter itself\n  - job_name: &#039;blackbox&#039;\n    static_configs:\n      - targets: [&#039;localhost:9115&#039;]\n\n  # HTTP/HTTPS monitoring\n  - job_name: &#039;blackbox-http&#039;\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://api.example.com/health\n        - http://internal-service:8080\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # TCP port monitoring\n  - job_name: &#039;blackbox-tcp&#039;\n    metrics_path: /probe\n    params:\n      module: [tcp_connect]\n    static_configs:\n      - targets:\n        - database.example.com:5432\n        - cache.example.com:6379\n        - message-broker.example.com:5672\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # ICMP ping monitoring\n  - job_name: &#039;blackbox-icmp&#039;\n    metrics_path: /probe\n    params:\n      module: [icmp]\n    static_configs:\n      - targets:\n        - gateway.example.com\n        - dns1.example.com\n        - dns2.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # SSL certificate monitoring\n  - job_name: &#039;blackbox-ssl&#039;\n    metrics_path: /probe\n    params:\n      module: [http_ssl_cert]\n    static_configs:\n      - targets:\n        - https://secure.example.com\n        - https://api.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115</code></pre>\n      </div>\n    </div>\n<h3 id=\"file-based-service-discovery\" class=\"mobile-header\">File-based Service Discovery</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">scrape_configs:\n  - job_name: &#039;blackbox-http-file-sd&#039;\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    file_sd_configs:\n      - files:\n        - &#039;/etc/prometheus/blackbox-targets/*.yml&#039;\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Target file <code class=\"mobile-inline-code\">/etc/prometheus/blackbox-targets/web.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">- targets:\n  - https://app1.example.com\n  - https://app2.example.com\n  labels:\n    service: web\n    env: production\n\n- targets:\n  - https://staging.example.com\n  labels:\n    service: web\n    env: staging</code></pre>\n      </div>\n    </div>\n<h2 id=\"alert-rules\" class=\"mobile-header\">Alert Rules</h2>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/prometheus/alerts/blackbox.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">groups:\n  - name: blackbox\n    rules:\n      # Website down\n      - alert: WebsiteDown\n        expr: probe_success{job=&quot;blackbox-http&quot;} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;Website down (instance {{ $labels.instance }})&quot;\n          description: &quot;Website {{ $labels.instance }} has been down for more than 5 minutes.&quot;\n\n      # SSL certificate expiry\n      - alert: SSLCertificateExpiringSoon\n        expr: probe_ssl_earliest_cert_expiry - time() &lt; 86400 * 30\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;SSL certificate expiring soon (instance {{ $labels.instance }})&quot;\n          description: &quot;SSL certificate for {{ $labels.instance }} expires in less than 30 days.&quot;\n\n      - alert: SSLCertificateExpired\n        expr: probe_ssl_earliest_cert_expiry - time() &lt; 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;SSL certificate expired (instance {{ $labels.instance }})&quot;\n          description: &quot;SSL certificate for {{ $labels.instance }} has expired.&quot;\n\n      # Slow response time\n      - alert: SlowResponseTime\n        expr: probe_http_duration_seconds{job=&quot;blackbox-http&quot;} &gt; 2\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;Slow HTTP response (instance {{ $labels.instance }})&quot;\n          description: &quot;HTTP response time for {{ $labels.instance }} is {{ $value }}s (&gt; 2s).&quot;\n\n      # TCP port down\n      - alert: TCPPortDown\n        expr: probe_success{job=&quot;blackbox-tcp&quot;} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;TCP port down (instance {{ $labels.instance }})&quot;\n          description: &quot;TCP port {{ $labels.instance }} has been down for more than 5 minutes.&quot;\n\n      # High packet loss\n      - alert: HighPacketLoss\n        expr: (1 - avg_over_time(probe_success{job=&quot;blackbox-icmp&quot;}[5m])) &gt; 0.1\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;High packet loss (instance {{ $labels.instance }})&quot;\n          description: &quot;Packet loss for {{ $labels.instance }} is {{ $value | humanizePercentage }}.&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"grafana-dashboard\" class=\"mobile-header\">Grafana Dashboard</h2>\n<p class=\"mobile-paragraph\">Import dashboard JSON or create custom dashboard with these queries:</p>\n<div class=\"mobile-code-block\" data-language=\"promql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">promql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-promql\"># Probe success rate\nrate(probe_success{job=~&quot;blackbox-.*&quot;}[5m])\n\n# HTTP response time\nprobe_http_duration_seconds{job=&quot;blackbox-http&quot;}\n\n# SSL certificate days until expiry\n(probe_ssl_earliest_cert_expiry - time()) / 86400\n\n# DNS lookup time\nprobe_dns_lookup_time_seconds\n\n# TCP connection time\nprobe_tcp_duration_seconds\n\n# Uptime percentage (last 24h)\navg_over_time(probe_success{job=&quot;blackbox-http&quot;}[24h]) * 100\n\n# Status code distribution\nsum by (status_code) (probe_http_status_code)</code></pre>\n      </div>\n    </div>\n<h2 id=\"7-security-considerations\" class=\"mobile-header\">7. Security Considerations</h2>\n<h3 id=\"network-security\" class=\"mobile-header\">Network Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Firewall rules\nsudo ufw allow from prometheus_server_ip to any port 9115\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 9115 -s prometheus_server_ip -j ACCEPT</code></pre>\n      </div>\n    </div>\n<h3 id=\"authentication\" class=\"mobile-header\">Authentication</h3>\n<p class=\"mobile-paragraph\">Enable basic auth in blackbox exporter:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate password hash\nhtpasswd -nBC 10 &quot;&quot; | tr -d &#039;:\\n&#039;\n\n# Add to blackbox_exporter command\n--web.config=/etc/blackbox_exporter/web.yml</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/blackbox_exporter/web.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">basic_auth_users:\n  prometheus: $2b$10$...  # bcrypt hash</code></pre>\n      </div>\n    </div>\n<h3 id=\"tls-configuration\" class=\"mobile-header\">TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">tls_server_config:\n  cert_file: /etc/blackbox_exporter/server.crt\n  key_file: /etc/blackbox_exporter/server.key</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"testing-probes\" class=\"mobile-header\">Testing Probes</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test HTTP probe\ncurl &quot;http://localhost:9115/probe?target=https://example.com&amp;module=http_2xx&quot;\n\n# Test with debug\ncurl &quot;http://localhost:9115/probe?target=https://example.com&amp;module=http_2xx&amp;debug=true&quot;\n\n# Check metrics\ncurl http://localhost:9115/metrics</code></pre>\n      </div>\n    </div>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>ICMP permission denied</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set capability\nsudo setcap cap_net_raw+ep /usr/local/bin/blackbox_exporter\n\n# Or run as root (not recommended)</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status blackbox_exporter\n\n# Check logs\nsudo journalctl -u blackbox_exporter -f\n\n# Verify listening port\nsudo netstat -tlnp | grep 9115</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>SSL verification failures</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Temporarily disable verification (testing only)\ntls_config:\n  insecure_skip_verify: true</code></pre>\n      </div>\n    </div>\n<h2 id=\"8-performance-tuning\" class=\"mobile-header\">8. Performance Tuning</h2>\n<h3 id=\"concurrent-probes\" class=\"mobile-header\">Concurrent Probes</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase concurrent probes\n--web.max-requests=100</code></pre>\n      </div>\n    </div>\n<h3 id=\"timeout-optimization\" class=\"mobile-header\">Timeout Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Adjust timeouts based on network conditions\nmodules:\n  http_fast:\n    prober: http\n    timeout: 2s\n  http_slow:\n    prober: http\n    timeout: 30s</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># In systemd service file\n[Service]\nLimitNOFILE=65535\nMemoryLimit=256M\nCPUQuota=50%</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-best-practices\" class=\"mobile-header\">Monitoring Best Practices</h2>\n<p class=\"mobile-paragraph\">1. <strong>Probe frequency</strong>: Balance between detection speed and load</p>\n<p class=\"mobile-paragraph\">2. <strong>Timeout values</strong>: Set slightly below scrape interval</p>\n<p class=\"mobile-paragraph\">3. <strong>Module reuse</strong>: Create specific modules for different use cases</p>\n<p class=\"mobile-paragraph\">4. <strong>Geographic distribution</strong>: Deploy multiple blackbox exporters</p>\n<p class=\"mobile-paragraph\">5. <strong>Internal vs external</strong>: Separate probes for internal/external services</p>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/prometheus/blackbox_exporter\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/prometheus/blackbox_exporter/blob/master/example.yml\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration Examples</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prometheus Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/grafana/dashboards?search=blackbox\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Grafana Dashboards</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://groups.google.com/forum/#!forum/prometheus-users\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"8 min","wordCount":1453,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"Binary Installation","id":"binary-installation"},{"level":3,"text":"Docker Installation","id":"docker-installation"},{"level":3,"text":"Package Manager Installation","id":"package-manager-installation"},{"level":2,"text":"4. Configuration","id":"4-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Advanced Modules","id":"advanced-modules"},{"level":3,"text":"Systemd Service","id":"systemd-service"},{"level":2,"text":"Prometheus Configuration","id":"prometheus-configuration"},{"level":3,"text":"Configure Prometheus Scrape Jobs","id":"configure-prometheus-scrape-jobs"},{"level":3,"text":"File-based Service Discovery","id":"file-based-service-discovery"},{"level":2,"text":"Alert Rules","id":"alert-rules"},{"level":2,"text":"Grafana Dashboard","id":"grafana-dashboard"},{"level":2,"text":"7. Security Considerations","id":"7-security-considerations"},{"level":3,"text":"Network Security","id":"network-security"},{"level":3,"text":"Authentication","id":"authentication"},{"level":3,"text":"TLS Configuration","id":"tls-configuration"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Testing Probes","id":"testing-probes"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"8. Performance Tuning","id":"8-performance-tuning"},{"level":3,"text":"Concurrent Probes","id":"concurrent-probes"},{"level":3,"text":"Timeout Optimization","id":"timeout-optimization"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring Best Practices","id":"monitoring-best-practices"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-17T18:19:07.590Z","metadataVersion":"2.0"},{"name":"prometheus-blackbox-exporter","displayName":"blackbox-exporter Installation Guide","slug":"prometheus-blackbox-exporter","description":"blackbox-exporter is a free and open-source Prometheus exporter for probing endpoints. Blackbox Exporter allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP and ICMP, essential for monitoring external services with Prometheus","category":"monitoring","subcategory":"monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,9115],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["monitoring","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/monitoring/prometheus-blackbox-exporter","documentationUrl":"https://howtomgr.github.io/monitoring/prometheus-blackbox-exporter","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prometheus-blackbox-exporter","updatedAt":"2025-09-16T17:43:52Z","createdAt":"2025-09-16T08:04:40Z","readmeRaw":"# blackbox-exporter Installation Guide\n\nblackbox-exporter is a free and open-source Prometheus exporter for probing endpoints. Blackbox Exporter allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP and ICMP, essential for monitoring external services with Prometheus\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 100MB for installation\n  - Network: Network access to probe targets\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9115 (default blackbox-exporter port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install blackbox-exporter\nsudo dnf install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install blackbox-exporter\nsudo apt install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo ufw allow 9115\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### Arch Linux\n\n```bash\n# Install blackbox-exporter\nsudo pacman -S prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### Alpine Linux\n\n```bash\n# Install blackbox-exporter\napk add --no-cache prometheus-blackbox-exporter\n\n# Enable and start service\nrc-update add blackbox_exporter default\nrc-service blackbox_exporter start\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install blackbox-exporter\nsudo zypper install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install prometheus-blackbox-exporter\n\n# Start service\nbrew services start prometheus-blackbox-exporter\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install prometheus-blackbox-exporter\n\n# Enable in rc.conf\necho 'blackbox_exporter_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice blackbox_exporter start\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install prometheus-blackbox-exporter\n\n# Or using Scoop\nscoop install prometheus-blackbox-exporter\n\n# Verify installation\nblackbox_exporter --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/prometheus-blackbox-exporter\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nblackbox_exporter --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable blackbox_exporter\n\n# Start service\nsudo systemctl start blackbox_exporter\n\n# Stop service\nsudo systemctl stop blackbox_exporter\n\n# Restart service\nsudo systemctl restart blackbox_exporter\n\n# Check status\nsudo systemctl status blackbox_exporter\n\n# View logs\nsudo journalctl -u blackbox_exporter -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add blackbox_exporter default\n\n# Start service\nrc-service blackbox_exporter start\n\n# Stop service\nrc-service blackbox_exporter stop\n\n# Restart service\nrc-service blackbox_exporter restart\n\n# Check status\nrc-service blackbox_exporter status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'blackbox_exporter_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice blackbox_exporter start\n\n# Stop service\nservice blackbox_exporter stop\n\n# Restart service\nservice blackbox_exporter restart\n\n# Check status\nservice blackbox_exporter status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start prometheus-blackbox-exporter\nbrew services stop prometheus-blackbox-exporter\nbrew services restart prometheus-blackbox-exporter\n\n# Check status\nbrew services list | grep prometheus-blackbox-exporter\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start blackbox_exporter\n\n# Stop service\nnet stop blackbox_exporter\n\n# Using PowerShell\nStart-Service blackbox_exporter\nStop-Service blackbox_exporter\nRestart-Service blackbox_exporter\n\n# Check status\nGet-Service blackbox_exporter\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream prometheus-blackbox-exporter_backend {\n    server 127.0.0.1:9115;\n}\n\nserver {\n    listen 80;\n    server_name prometheus-blackbox-exporter.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prometheus-blackbox-exporter.example.com;\n\n    ssl_certificate /etc/ssl/certs/prometheus-blackbox-exporter.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/prometheus-blackbox-exporter.example.com.key;\n\n    location / {\n        proxy_pass http://prometheus-blackbox-exporter_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName prometheus-blackbox-exporter.example.com\n    Redirect permanent / https://prometheus-blackbox-exporter.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName prometheus-blackbox-exporter.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/prometheus-blackbox-exporter.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/prometheus-blackbox-exporter.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9115/\n    ProxyPassReverse / http://127.0.0.1:9115/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend prometheus-blackbox-exporter_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/prometheus-blackbox-exporter.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend prometheus-blackbox-exporter_backend\n\nbackend prometheus-blackbox-exporter_backend\n    balance roundrobin\n    server prometheus-blackbox-exporter1 127.0.0.1:9115 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R prometheus-blackbox-exporter:prometheus-blackbox-exporter /etc/prometheus-blackbox-exporter\nsudo chmod 750 /etc/prometheus-blackbox-exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status blackbox_exporter\n\n# View logs\nsudo journalctl -u blackbox_exporter -f\n\n# Monitor resource usage\ntop -p $(pgrep prometheus-blackbox-exporter)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/prometheus-blackbox-exporter\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/prometheus-blackbox-exporter-backup-$DATE.tar.gz\" /etc/prometheus-blackbox-exporter /var/lib/prometheus-blackbox-exporter\n\necho \"Backup completed: $BACKUP_DIR/prometheus-blackbox-exporter-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop blackbox_exporter\n\n# Restore from backup\ntar -xzf /backup/prometheus-blackbox-exporter/prometheus-blackbox-exporter-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start blackbox_exporter\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u blackbox_exporter -n 100\nsudo tail -f /var/log/prometheus-blackbox-exporter/prometheus-blackbox-exporter.log\n\n# Check configuration\nblackbox_exporter --version\n\n# Check permissions\nls -la /etc/prometheus-blackbox-exporter\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9115\n\n# Test connectivity\ntelnet localhost 9115\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep prometheus-blackbox-exporter)\n\n# Check disk I/O\niotop -p $(pgrep prometheus-blackbox-exporter)\n\n# Check connections\nss -an | grep 9115\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  prometheus-blackbox-exporter:\n    image: prometheus-blackbox-exporter:latest\n    ports:\n      - \"9115:9115\"\n    volumes:\n      - ./config:/etc/prometheus-blackbox-exporter\n      - ./data:/var/lib/prometheus-blackbox-exporter\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update prometheus-blackbox-exporter\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade prometheus-blackbox-exporter\n\n# Arch Linux\nsudo pacman -Syu prometheus-blackbox-exporter\n\n# Alpine Linux\napk update && apk upgrade prometheus-blackbox-exporter\n\n# openSUSE\nsudo zypper update prometheus-blackbox-exporter\n\n# FreeBSD\npkg update && pkg upgrade prometheus-blackbox-exporter\n\n# Always backup before updates\ntar -czf /backup/prometheus-blackbox-exporter-pre-update-$(date +%Y%m%d).tar.gz /etc/prometheus-blackbox-exporter\n\n# Restart after updates\nsudo systemctl restart blackbox_exporter\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/prometheus-blackbox-exporter\n\n# Clean old logs\nfind /var/log/prometheus-blackbox-exporter -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/prometheus-blackbox-exporter\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.prometheus-blackbox-exporter.org/\n- GitHub Repository: https://github.com/prometheus-blackbox-exporter/prometheus-blackbox-exporter\n- Community Forum: https://forum.prometheus-blackbox-exporter.org/\n- Best Practices Guide: https://docs.prometheus-blackbox-exporter.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">blackbox-exporter is a free and open-source Prometheus exporter for probing endpoints. Blackbox Exporter allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP and ICMP, essential for monitoring external services with Prometheus</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: Network access to probe targets</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9115 (default blackbox-exporter port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install blackbox-exporter\nsudo dnf install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install blackbox-exporter\nsudo apt install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo ufw allow 9115\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install blackbox-exporter\nsudo pacman -S prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install blackbox-exporter\napk add --no-cache prometheus-blackbox-exporter\n\n# Enable and start service\nrc-update add blackbox_exporter default\nrc-service blackbox_exporter start\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install blackbox-exporter\nsudo zypper install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install prometheus-blackbox-exporter\n\n# Start service\nbrew services start prometheus-blackbox-exporter\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install prometheus-blackbox-exporter\n\n# Enable in rc.conf\necho &#039;blackbox_exporter_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice blackbox_exporter start\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install prometheus-blackbox-exporter\n\n# Or using Scoop\nscoop install prometheus-blackbox-exporter\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/prometheus-blackbox-exporter\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable blackbox_exporter\n\n# Start service\nsudo systemctl start blackbox_exporter\n\n# Stop service\nsudo systemctl stop blackbox_exporter\n\n# Restart service\nsudo systemctl restart blackbox_exporter\n\n# Check status\nsudo systemctl status blackbox_exporter\n\n# View logs\nsudo journalctl -u blackbox_exporter -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add blackbox_exporter default\n\n# Start service\nrc-service blackbox_exporter start\n\n# Stop service\nrc-service blackbox_exporter stop\n\n# Restart service\nrc-service blackbox_exporter restart\n\n# Check status\nrc-service blackbox_exporter status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;blackbox_exporter_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice blackbox_exporter start\n\n# Stop service\nservice blackbox_exporter stop\n\n# Restart service\nservice blackbox_exporter restart\n\n# Check status\nservice blackbox_exporter status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start prometheus-blackbox-exporter\nbrew services stop prometheus-blackbox-exporter\nbrew services restart prometheus-blackbox-exporter\n\n# Check status\nbrew services list | grep prometheus-blackbox-exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start blackbox_exporter\n\n# Stop service\nnet stop blackbox_exporter\n\n# Using PowerShell\nStart-Service blackbox_exporter\nStop-Service blackbox_exporter\nRestart-Service blackbox_exporter\n\n# Check status\nGet-Service blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream prometheus-blackbox-exporter_backend {\n    server 127.0.0.1:9115;\n}\n\nserver {\n    listen 80;\n    server_name prometheus-blackbox-exporter.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prometheus-blackbox-exporter.example.com;\n\n    ssl_certificate /etc/ssl/certs/prometheus-blackbox-exporter.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/prometheus-blackbox-exporter.example.com.key;\n\n    location / {\n        proxy_pass http://prometheus-blackbox-exporter_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName prometheus-blackbox-exporter.example.com\n    Redirect permanent / https://prometheus-blackbox-exporter.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName prometheus-blackbox-exporter.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/prometheus-blackbox-exporter.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/prometheus-blackbox-exporter.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9115/\n    ProxyPassReverse / http://127.0.0.1:9115/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend prometheus-blackbox-exporter_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/prometheus-blackbox-exporter.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend prometheus-blackbox-exporter_backend\n\nbackend prometheus-blackbox-exporter_backend\n    balance roundrobin\n    server prometheus-blackbox-exporter1 127.0.0.1:9115 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R prometheus-blackbox-exporter:prometheus-blackbox-exporter /etc/prometheus-blackbox-exporter\nsudo chmod 750 /etc/prometheus-blackbox-exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status blackbox_exporter\n\n# View logs\nsudo journalctl -u blackbox_exporter -f\n\n# Monitor resource usage\ntop -p $(pgrep prometheus-blackbox-exporter)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/prometheus-blackbox-exporter&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/prometheus-blackbox-exporter-backup-$DATE.tar.gz&quot; /etc/prometheus-blackbox-exporter /var/lib/prometheus-blackbox-exporter\n\necho &quot;Backup completed: $BACKUP_DIR/prometheus-blackbox-exporter-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop blackbox_exporter\n\n# Restore from backup\ntar -xzf /backup/prometheus-blackbox-exporter/prometheus-blackbox-exporter-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u blackbox_exporter -n 100\nsudo tail -f /var/log/prometheus-blackbox-exporter/prometheus-blackbox-exporter.log\n\n# Check configuration\nblackbox_exporter --version\n\n# Check permissions\nls -la /etc/prometheus-blackbox-exporter</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9115\n\n# Test connectivity\ntelnet localhost 9115\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep prometheus-blackbox-exporter)\n\n# Check disk I/O\niotop -p $(pgrep prometheus-blackbox-exporter)\n\n# Check connections\nss -an | grep 9115</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  prometheus-blackbox-exporter:\n    image: prometheus-blackbox-exporter:latest\n    ports:\n      - &quot;9115:9115&quot;\n    volumes:\n      - ./config:/etc/prometheus-blackbox-exporter\n      - ./data:/var/lib/prometheus-blackbox-exporter\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update prometheus-blackbox-exporter\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade prometheus-blackbox-exporter\n\n# Arch Linux\nsudo pacman -Syu prometheus-blackbox-exporter\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade prometheus-blackbox-exporter\n\n# openSUSE\nsudo zypper update prometheus-blackbox-exporter\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade prometheus-blackbox-exporter\n\n# Always backup before updates\ntar -czf /backup/prometheus-blackbox-exporter-pre-update-$(date +%Y%m%d).tar.gz /etc/prometheus-blackbox-exporter\n\n# Restart after updates\nsudo systemctl restart blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/prometheus-blackbox-exporter\n\n# Clean old logs\nfind /var/log/prometheus-blackbox-exporter -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/prometheus-blackbox-exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.prometheus-blackbox-exporter.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/prometheus-blackbox-exporter/prometheus-blackbox-exporter</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.prometheus-blackbox-exporter.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.prometheus-blackbox-exporter.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1287,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-17T18:15:03.850Z","metadataVersion":"2.0"},{"name":"prometheus-mysqld-exporter","displayName":"mysqld-exporter Installation Guide","slug":"prometheus-mysqld-exporter","description":"mysqld-exporter is a free and open-source Prometheus exporter for MySQL server metrics. MySQL Exporter extracts metrics from MySQL/MariaDB servers for Prometheus monitoring, providing database performance insights","category":"monitoring","subcategory":"monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,9104],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["monitoring","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/monitoring/prometheus-mysqld-exporter","documentationUrl":"https://howtomgr.github.io/monitoring/prometheus-mysqld-exporter","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prometheus-mysqld-exporter","updatedAt":"2025-09-16T17:43:59Z","createdAt":"2025-09-16T08:04:55Z","readmeRaw":"# mysqld-exporter Installation Guide\n\nmysqld-exporter is a free and open-source Prometheus exporter for MySQL server metrics. MySQL Exporter extracts metrics from MySQL/MariaDB servers for Prometheus monitoring, providing database performance insights\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 50MB for installation\n  - Network: MySQL and HTTP access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9104 (default mysqld-exporter port)\n  - MySQL connection\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mysqld-exporter\nsudo dnf install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install mysqld-exporter\nsudo apt install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo ufw allow 9104\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### Arch Linux\n\n```bash\n# Install mysqld-exporter\nsudo pacman -S prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### Alpine Linux\n\n```bash\n# Install mysqld-exporter\napk add --no-cache prometheus-mysqld-exporter\n\n# Enable and start service\nrc-update add mysqld_exporter default\nrc-service mysqld_exporter start\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install mysqld-exporter\nsudo zypper install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install prometheus-mysqld-exporter\n\n# Start service\nbrew services start prometheus-mysqld-exporter\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install prometheus-mysqld-exporter\n\n# Enable in rc.conf\necho 'mysqld_exporter_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mysqld_exporter start\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install prometheus-mysqld-exporter\n\n# Or using Scoop\nscoop install prometheus-mysqld-exporter\n\n# Verify installation\nmysqld_exporter --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/prometheus-mysqld-exporter\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nmysqld_exporter --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable mysqld_exporter\n\n# Start service\nsudo systemctl start mysqld_exporter\n\n# Stop service\nsudo systemctl stop mysqld_exporter\n\n# Restart service\nsudo systemctl restart mysqld_exporter\n\n# Check status\nsudo systemctl status mysqld_exporter\n\n# View logs\nsudo journalctl -u mysqld_exporter -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add mysqld_exporter default\n\n# Start service\nrc-service mysqld_exporter start\n\n# Stop service\nrc-service mysqld_exporter stop\n\n# Restart service\nrc-service mysqld_exporter restart\n\n# Check status\nrc-service mysqld_exporter status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'mysqld_exporter_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mysqld_exporter start\n\n# Stop service\nservice mysqld_exporter stop\n\n# Restart service\nservice mysqld_exporter restart\n\n# Check status\nservice mysqld_exporter status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start prometheus-mysqld-exporter\nbrew services stop prometheus-mysqld-exporter\nbrew services restart prometheus-mysqld-exporter\n\n# Check status\nbrew services list | grep prometheus-mysqld-exporter\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start mysqld_exporter\n\n# Stop service\nnet stop mysqld_exporter\n\n# Using PowerShell\nStart-Service mysqld_exporter\nStop-Service mysqld_exporter\nRestart-Service mysqld_exporter\n\n# Check status\nGet-Service mysqld_exporter\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream prometheus-mysqld-exporter_backend {\n    server 127.0.0.1:9104;\n}\n\nserver {\n    listen 80;\n    server_name prometheus-mysqld-exporter.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prometheus-mysqld-exporter.example.com;\n\n    ssl_certificate /etc/ssl/certs/prometheus-mysqld-exporter.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/prometheus-mysqld-exporter.example.com.key;\n\n    location / {\n        proxy_pass http://prometheus-mysqld-exporter_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName prometheus-mysqld-exporter.example.com\n    Redirect permanent / https://prometheus-mysqld-exporter.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName prometheus-mysqld-exporter.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/prometheus-mysqld-exporter.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/prometheus-mysqld-exporter.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9104/\n    ProxyPassReverse / http://127.0.0.1:9104/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend prometheus-mysqld-exporter_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/prometheus-mysqld-exporter.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend prometheus-mysqld-exporter_backend\n\nbackend prometheus-mysqld-exporter_backend\n    balance roundrobin\n    server prometheus-mysqld-exporter1 127.0.0.1:9104 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R prometheus-mysqld-exporter:prometheus-mysqld-exporter /etc/prometheus-mysqld-exporter\nsudo chmod 750 /etc/prometheus-mysqld-exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status mysqld_exporter\n\n# View logs\nsudo journalctl -u mysqld_exporter -f\n\n# Monitor resource usage\ntop -p $(pgrep prometheus-mysqld-exporter)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/prometheus-mysqld-exporter\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/prometheus-mysqld-exporter-backup-$DATE.tar.gz\" /etc/prometheus-mysqld-exporter /var/lib/prometheus-mysqld-exporter\n\necho \"Backup completed: $BACKUP_DIR/prometheus-mysqld-exporter-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop mysqld_exporter\n\n# Restore from backup\ntar -xzf /backup/prometheus-mysqld-exporter/prometheus-mysqld-exporter-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start mysqld_exporter\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u mysqld_exporter -n 100\nsudo tail -f /var/log/prometheus-mysqld-exporter/prometheus-mysqld-exporter.log\n\n# Check configuration\nmysqld_exporter --version\n\n# Check permissions\nls -la /etc/prometheus-mysqld-exporter\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9104\n\n# Test connectivity\ntelnet localhost 9104\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep prometheus-mysqld-exporter)\n\n# Check disk I/O\niotop -p $(pgrep prometheus-mysqld-exporter)\n\n# Check connections\nss -an | grep 9104\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  prometheus-mysqld-exporter:\n    image: prometheus-mysqld-exporter:latest\n    ports:\n      - \"9104:9104\"\n    volumes:\n      - ./config:/etc/prometheus-mysqld-exporter\n      - ./data:/var/lib/prometheus-mysqld-exporter\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update prometheus-mysqld-exporter\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade prometheus-mysqld-exporter\n\n# Arch Linux\nsudo pacman -Syu prometheus-mysqld-exporter\n\n# Alpine Linux\napk update && apk upgrade prometheus-mysqld-exporter\n\n# openSUSE\nsudo zypper update prometheus-mysqld-exporter\n\n# FreeBSD\npkg update && pkg upgrade prometheus-mysqld-exporter\n\n# Always backup before updates\ntar -czf /backup/prometheus-mysqld-exporter-pre-update-$(date +%Y%m%d).tar.gz /etc/prometheus-mysqld-exporter\n\n# Restart after updates\nsudo systemctl restart mysqld_exporter\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/prometheus-mysqld-exporter\n\n# Clean old logs\nfind /var/log/prometheus-mysqld-exporter -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/prometheus-mysqld-exporter\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.prometheus-mysqld-exporter.org/\n- GitHub Repository: https://github.com/prometheus-mysqld-exporter/prometheus-mysqld-exporter\n- Community Forum: https://forum.prometheus-mysqld-exporter.org/\n- Best Practices Guide: https://docs.prometheus-mysqld-exporter.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">mysqld-exporter is a free and open-source Prometheus exporter for MySQL server metrics. MySQL Exporter extracts metrics from MySQL/MariaDB servers for Prometheus monitoring, providing database performance insights</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 50MB for installation</li>\n<li class=\"mobile-list-item\">Network: MySQL and HTTP access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9104 (default mysqld-exporter port)</li>\n<li class=\"mobile-list-item\">MySQL connection</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mysqld-exporter\nsudo dnf install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install mysqld-exporter\nsudo apt install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo ufw allow 9104\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mysqld-exporter\nsudo pacman -S prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mysqld-exporter\napk add --no-cache prometheus-mysqld-exporter\n\n# Enable and start service\nrc-update add mysqld_exporter default\nrc-service mysqld_exporter start\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mysqld-exporter\nsudo zypper install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install prometheus-mysqld-exporter\n\n# Start service\nbrew services start prometheus-mysqld-exporter\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install prometheus-mysqld-exporter\n\n# Enable in rc.conf\necho &#039;mysqld_exporter_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mysqld_exporter start\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install prometheus-mysqld-exporter\n\n# Or using Scoop\nscoop install prometheus-mysqld-exporter\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/prometheus-mysqld-exporter\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable mysqld_exporter\n\n# Start service\nsudo systemctl start mysqld_exporter\n\n# Stop service\nsudo systemctl stop mysqld_exporter\n\n# Restart service\nsudo systemctl restart mysqld_exporter\n\n# Check status\nsudo systemctl status mysqld_exporter\n\n# View logs\nsudo journalctl -u mysqld_exporter -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add mysqld_exporter default\n\n# Start service\nrc-service mysqld_exporter start\n\n# Stop service\nrc-service mysqld_exporter stop\n\n# Restart service\nrc-service mysqld_exporter restart\n\n# Check status\nrc-service mysqld_exporter status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;mysqld_exporter_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mysqld_exporter start\n\n# Stop service\nservice mysqld_exporter stop\n\n# Restart service\nservice mysqld_exporter restart\n\n# Check status\nservice mysqld_exporter status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start prometheus-mysqld-exporter\nbrew services stop prometheus-mysqld-exporter\nbrew services restart prometheus-mysqld-exporter\n\n# Check status\nbrew services list | grep prometheus-mysqld-exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start mysqld_exporter\n\n# Stop service\nnet stop mysqld_exporter\n\n# Using PowerShell\nStart-Service mysqld_exporter\nStop-Service mysqld_exporter\nRestart-Service mysqld_exporter\n\n# Check status\nGet-Service mysqld_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream prometheus-mysqld-exporter_backend {\n    server 127.0.0.1:9104;\n}\n\nserver {\n    listen 80;\n    server_name prometheus-mysqld-exporter.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prometheus-mysqld-exporter.example.com;\n\n    ssl_certificate /etc/ssl/certs/prometheus-mysqld-exporter.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/prometheus-mysqld-exporter.example.com.key;\n\n    location / {\n        proxy_pass http://prometheus-mysqld-exporter_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName prometheus-mysqld-exporter.example.com\n    Redirect permanent / https://prometheus-mysqld-exporter.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName prometheus-mysqld-exporter.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/prometheus-mysqld-exporter.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/prometheus-mysqld-exporter.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9104/\n    ProxyPassReverse / http://127.0.0.1:9104/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend prometheus-mysqld-exporter_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/prometheus-mysqld-exporter.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend prometheus-mysqld-exporter_backend\n\nbackend prometheus-mysqld-exporter_backend\n    balance roundrobin\n    server prometheus-mysqld-exporter1 127.0.0.1:9104 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R prometheus-mysqld-exporter:prometheus-mysqld-exporter /etc/prometheus-mysqld-exporter\nsudo chmod 750 /etc/prometheus-mysqld-exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status mysqld_exporter\n\n# View logs\nsudo journalctl -u mysqld_exporter -f\n\n# Monitor resource usage\ntop -p $(pgrep prometheus-mysqld-exporter)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/prometheus-mysqld-exporter&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/prometheus-mysqld-exporter-backup-$DATE.tar.gz&quot; /etc/prometheus-mysqld-exporter /var/lib/prometheus-mysqld-exporter\n\necho &quot;Backup completed: $BACKUP_DIR/prometheus-mysqld-exporter-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop mysqld_exporter\n\n# Restore from backup\ntar -xzf /backup/prometheus-mysqld-exporter/prometheus-mysqld-exporter-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start mysqld_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mysqld_exporter -n 100\nsudo tail -f /var/log/prometheus-mysqld-exporter/prometheus-mysqld-exporter.log\n\n# Check configuration\nmysqld_exporter --version\n\n# Check permissions\nls -la /etc/prometheus-mysqld-exporter</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9104\n\n# Test connectivity\ntelnet localhost 9104\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep prometheus-mysqld-exporter)\n\n# Check disk I/O\niotop -p $(pgrep prometheus-mysqld-exporter)\n\n# Check connections\nss -an | grep 9104</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  prometheus-mysqld-exporter:\n    image: prometheus-mysqld-exporter:latest\n    ports:\n      - &quot;9104:9104&quot;\n    volumes:\n      - ./config:/etc/prometheus-mysqld-exporter\n      - ./data:/var/lib/prometheus-mysqld-exporter\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update prometheus-mysqld-exporter\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade prometheus-mysqld-exporter\n\n# Arch Linux\nsudo pacman -Syu prometheus-mysqld-exporter\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade prometheus-mysqld-exporter\n\n# openSUSE\nsudo zypper update prometheus-mysqld-exporter\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade prometheus-mysqld-exporter\n\n# Always backup before updates\ntar -czf /backup/prometheus-mysqld-exporter-pre-update-$(date +%Y%m%d).tar.gz /etc/prometheus-mysqld-exporter\n\n# Restart after updates\nsudo systemctl restart mysqld_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/prometheus-mysqld-exporter\n\n# Clean old logs\nfind /var/log/prometheus-mysqld-exporter -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/prometheus-mysqld-exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.prometheus-mysqld-exporter.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/prometheus-mysqld-exporter/prometheus-mysqld-exporter</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.prometheus-mysqld-exporter.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.prometheus-mysqld-exporter.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1281,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-17T18:15:03.200Z","metadataVersion":"2.0"}]},"__N_SSG":true}