{"pageProps":{"guide":{"name":"incus","displayName":"Incus Installation Guide","slug":"incus","description":"Incus is a free and open-source system container and virtual machine manager. It's a community-driven fork of LXD that maintains true open-source governance, serving as a FOSS alternative to proprietary virtualization platforms like VMware vSphere, Proxmox, or cloud-based container services.","category":"virtualization","subcategory":"container-management","difficultyLevel":"advanced","estimatedSetupTime":"30-60 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","fedora"],"defaultPorts":[8443],"installationMethods":["snap-package","native-packages","source-compilation"],"features":["multi-os-support","system-containers","virtual-machines","clustering","snapshots","live-migration","storage-management","network-management","api-driven","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["containers","virtualization","lxd-fork","system-containers","virtual-machines","clustering","enterprise","lxc","snapshots"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Apache-2.0","websiteUrl":"https://howtomgr.github.io/virtualization/incus","documentationUrl":"https://howtomgr.github.io/virtualization/incus","language":null,"stars":1,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/incus","updatedAt":"2025-09-25T22:02:22Z","createdAt":"2025-09-16T10:31:42Z","readmeRaw":"# Incus Installation Guide\n\nIncus is a free and open-source system container and virtual machine manager. It's a community-driven fork of LXD, created to maintain true open-source governance after Canonical moved LXD development in-house. Incus serves as a FOSS alternative to proprietary virtualization platforms like VMware vSphere, Proxmox (with subscription limitations), or cloud-based container services, providing powerful system containers and VMs with enterprise-grade features.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n### Hardware Requirements\n- **CPU**: Modern 64-bit processor with virtualization support (VT-x/AMD-V)\n- **RAM**: 2GB minimum (4GB+ recommended)\n- **Storage**: 20GB+ available space\n- **Network**: Ethernet interface for bridged networking\n\n### Software Requirements\n- **Kernel**: Linux 5.4+ with namespaces and cgroup support\n- **Storage**: ZFS, LVM, or directory backend support\n- **Network**: Bridge utilities for networking\n\n### Network Requirements\n- **Ports**: \n  - 8443: HTTPS API (default)\n  - Various: Container/VM networking\n- **Bridge**: Network bridge for container connectivity\n\n## 2. Supported Operating Systems\n\nIncus officially supports:\n- RHEL 9+ and derivatives (Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS\n- Arch Linux\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- Fedora 38+\n\n## 3. Installation\n\n### RHEL/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install dependencies\nsudo dnf install -y snapd bridge-utils dnsmasq\n\n# Enable and start snapd\nsudo systemctl enable --now snapd\nsudo ln -sf /var/lib/snapd/snap /snap\n\n# Install Incus via snap\nsudo snap install incus --channel=latest/stable\n\n# Add user to incus group\nsudo usermod -a -G snap_daemon $USER\nnewgrp snap_daemon\n\n# Initialize Incus\nsudo incus admin init\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update system\nsudo apt update\n\n# Install dependencies\nsudo apt install -y snapd bridge-utils dnsmasq-base\n\n# Install Incus via snap\nsudo snap install incus --channel=latest/stable\n\n# Alternative: Install from Zabbly repository (recommended)\ncurl -fsSL https://pkgs.zabbly.com/key.asc | sudo gpg --dearmor -o /etc/apt/keyrings/zabbly.gpg\necho \"deb [signed-by=/etc/apt/keyrings/zabbly.gpg] https://pkgs.zabbly.com/incus/stable $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/zabbly-incus-stable.list\n\nsudo apt update\nsudo apt install -y incus\n\n# Add user to incus group\nsudo usermod -a -G incus $USER\nnewgrp incus\n\n# Initialize Incus\nincus admin init\n```\n\n### Arch Linux\n\n```bash\n# Install from AUR\nyay -S incus\n\n# Or using official repositories (if available)\nsudo pacman -S incus\n\n# Enable and start service\nsudo systemctl enable --now incus\n\n# Add user to incus group\nsudo usermod -a -G incus $USER\nnewgrp incus\n\n# Initialize Incus\nincus admin init\n```\n\n### Alpine Linux\n\n```bash\n# Install from edge repositories\necho \"http://dl-cdn.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories\napk update\n\n# Install Incus\napk add incus\n\n# Enable and start service\nrc-service incus start\nrc-update add incus default\n\n# Add user to incus group\naddgroup $USER incus\n\n# Initialize Incus\nincus admin init\n```\n\n### openSUSE\n\n```bash\n# Install dependencies\nsudo zypper install -y snapd bridge-utils dnsmasq\n\n# Enable snapd\nsudo systemctl enable --now snapd\nsudo ln -sf /var/lib/snapd/snap /snap\n\n# Install Incus\nsudo snap install incus --channel=latest/stable\n\n# Add user to incus group\nsudo usermod -a -G snap_daemon $USER\nnewgrp snap_daemon\n\n# Initialize Incus\nsudo incus admin init\n```\n\n## 4. Configuration\n\n### Initial Setup (incus admin init)\n\n```bash\n# Run interactive initialization\nincus admin init\n\n# Example configuration responses:\n# Would you like to use clustering? (yes/no) [default=no]: no\n# Do you want to configure a new storage pool? (yes/no) [default=yes]: yes\n# Name of the new storage pool [default=default]: default\n# Name of the storage backend to use (dir, lvm, zfs) [default=zfs]: zfs\n# Create a new ZFS pool? (yes/no) [default=yes]: yes\n# Would you like to use an existing empty block device? (yes/no) [default=no]: no\n# Size in GB of the new loop device (1GB minimum) [default=5GB]: 20GB\n# Would you like to connect to a MAAS server? (yes/no) [default=no]: no\n# Would you like to create a new local network bridge? (yes/no) [default=yes]: yes\n# What should the new bridge be called? [default=incusbr0]: incusbr0\n# What IPv4 address should be used? [default=auto]: auto\n# What IPv6 address should be used? [default=auto]: auto\n```\n\n### Storage Configuration\n\n```bash\n# List storage pools\nincus storage list\n\n# Create ZFS storage pool\nincus storage create zfspool zfs size=50GB\n\n# Create directory storage pool\nincus storage create dirpool dir source=/var/lib/incus/storage-pools/dirpool\n\n# Create LVM storage pool\nincus storage create lvmpool lvm source=/dev/sdb\n```\n\n### Network Configuration\n\n```bash\n# List networks\nincus network list\n\n# Create managed network\nincus network create incusbr1 \\\n    ipv4.address=192.168.100.1/24 \\\n    ipv4.nat=true \\\n    ipv6.address=fd00::1/64 \\\n    ipv6.nat=true\n\n# Create macvlan network\nincus network create macvlan1 \\\n    parent=eth0 \\\n    type=macvlan\n```\n\n### Profile Configuration\n\n```bash\n# List profiles\nincus profile list\n\n# Create custom profile\nincus profile create webserver\nincus profile edit webserver\n\n# Example profile configuration:\ncat << 'EOF' | incus profile edit webserver\nconfig:\n  limits.cpu: \"2\"\n  limits.memory: 2GB\n  security.nesting: \"true\"\ndescription: Web server profile\ndevices:\n  eth0:\n    name: eth0\n    network: incusbr0\n    type: nic\n  root:\n    path: /\n    pool: default\n    type: disk\nname: webserver\nEOF\n```\n\n## 5. Service Management\n\n### System Service Management\n\n```bash\n# systemd (most distributions)\nsudo systemctl start incus\nsudo systemctl enable incus\nsudo systemctl status incus\nsudo systemctl restart incus\n\n# Check service logs\nsudo journalctl -u incus -f\n\n# OpenRC (Alpine)\nsudo rc-service incus start\nsudo rc-update add incus default\n```\n\n### Container/VM Management\n\n```bash\n# List instances\nincus list\n\n# Launch container\nincus launch ubuntu:22.04 mycontainer\n\n# Launch VM\nincus launch ubuntu:22.04 myvm --vm\n\n# Start/stop instances\nincus start mycontainer\nincus stop mycontainer\nincus restart mycontainer\n\n# Execute commands in container\nincus exec mycontainer -- bash\nincus exec mycontainer -- apt update\n\n# File operations\nincus file push localfile mycontainer/remote/path/\nincus file pull mycontainer/remote/path/file localfile\n```\n\n### Instance Configuration\n\n```bash\n# Set instance limits\nincus config set mycontainer limits.cpu 2\nincus config set mycontainer limits.memory 1GB\n\n# Add devices\nincus config device add mycontainer homedir disk source=/home path=/mnt/home\n\n# Set environment variables\nincus config set mycontainer environment.MYVAR myvalue\n\n# View instance configuration\nincus config show mycontainer\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Incus daemon not starting**:\n```bash\n# Check system requirements\nsudo incus admin init --dump\n\n# Check logs\nsudo journalctl -u incus -n 50\n\n# Reset configuration\nsudo incus admin init --auto\n```\n\n2. **Network connectivity issues**:\n```bash\n# Check bridge status\nip link show incusbr0\n\n# Test network connectivity\nincus exec mycontainer -- ping 8.8.8.8\n\n# Restart network\nsudo systemctl restart incus\n```\n\n3. **Storage issues**:\n```bash\n# Check storage pools\nincus storage list\nincus storage info default\n\n# Check disk space\ndf -h /var/lib/incus\n\n# Repair ZFS pool\nsudo zpool scrub default\n```\n\n4. **Permission errors**:\n```bash\n# Check user groups\ngroups $USER\n\n# Add user to incus group\nsudo usermod -a -G incus $USER\nnewgrp incus\n\n# Check socket permissions\nls -la /var/lib/incus/unix.socket\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\nincus config set core.https_address :8443\nincus config set core.debug true\n\n# Run daemon in foreground\nsudo incusd --debug --group incus\n\n# Check daemon status\nincus info\n```\n\n## 7. Security Considerations\n\n### Access Control\n\n```bash\n# Set up TLS authentication\nincus config trust add client.crt\n\n# Generate client certificate\nopenssl req -x509 -newkey rsa:4096 -keyout client.key -out client.crt -days 365 -nodes\n\n# Add trust relationship\nincus config trust add client.crt\n```\n\n### Network Security\n\n```bash\n# Configure firewall for API access\nsudo firewall-cmd --permanent --add-port=8443/tcp\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 8443/tcp\nsudo ufw enable\n\n# Bind to specific interface\nincus config set core.https_address 192.168.1.100:8443\n```\n\n### Container Security\n\n```bash\n# Enable security features\nincus profile set default security.nesting false\nincus profile set default security.privileged false\nincus profile set default security.seccomp true\n\n# Set resource limits\nincus profile set default limits.cpu 2\nincus profile set default limits.memory 1GB\nincus profile set default limits.processes 1000\n```\n\n### Storage Security\n\n```bash\n# Enable ZFS encryption\nincus storage create encrypted zfs \\\n    source=/dev/sdb \\\n    zfs.pool_name=encrypted \\\n    zfs.encryption=aes-256-gcm\n\n# Set secure permissions\nsudo chmod 700 /var/lib/incus\nsudo chown -R root:incus /var/lib/incus\n```\n\n## 8. Performance Tuning\n\n### CPU Optimization\n\n```bash\n# Set CPU scheduler for containers\nincus config set mycontainer limits.cpu.allowance 50%\nincus config set mycontainer limits.cpu.priority 5\n\n# Pin to specific CPUs\nincus config set mycontainer limits.cpu 0-3\n```\n\n### Memory Optimization\n\n```bash\n# Configure memory limits\nincus config set mycontainer limits.memory 2GB\nincus config set mycontainer limits.memory.swap false\n\n# Enable memory ballooning for VMs\nincus config set myvm limits.memory.enforce hard\n```\n\n### Storage Performance\n\n```bash\n# Optimize ZFS for SSDs\nsudo zpool set autotrim=on default\n\n# Set ZFS recordsize for databases\nincus storage set default zfs.pool_name default\nincus storage volume set default myvolume zfs.recordsize 8K\n\n# Enable compression\nincus storage set default zfs.compression lz4\n```\n\n### Network Optimization\n\n```bash\n# Increase network buffer sizes\necho 'net.core.rmem_max = 16777216' | sudo tee -a /etc/sysctl.conf\necho 'net.core.wmem_max = 16777216' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Use SR-IOV for VMs (if supported)\nincus config device add myvm eth0 nic \\\n    nictype=sriov \\\n    parent=eth0\n```\n\n## 9. Backup and Restore\n\n### Instance Backup\n\n```bash\n#!/bin/bash\n# backup-incus-instances.sh\n\nBACKUP_DIR=\"/var/backups/incus\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Export all instances\nfor instance in $(incus list -c n --format csv); do\n    echo \"Backing up $instance...\"\n    incus export $instance \"$BACKUP_DIR/${instance}_${DATE}.tar.gz\" \\\n        --instance-only\ndone\n\necho \"Instance backups completed in $BACKUP_DIR\"\n```\n\n### Storage Backup\n\n```bash\n#!/bin/bash\n# backup-incus-storage.sh\n\nBACKUP_DIR=\"/var/backups/incus\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# ZFS snapshot backup\nsudo zfs snapshot default@backup_$DATE\n\n# Export ZFS snapshot\nsudo zfs send default@backup_$DATE | \\\n    gzip > $BACKUP_DIR/zfs_backup_$DATE.gz\n\necho \"Storage backup completed\"\n```\n\n### Configuration Backup\n\n```bash\n#!/bin/bash\n# backup-incus-config.sh\n\nBACKUP_DIR=\"/var/backups/incus\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Backup database\nsudo systemctl stop incus\nsudo cp -r /var/lib/incus/database $BACKUP_DIR/database_$DATE\nsudo systemctl start incus\n\n# Export configuration\nincus admin export > $BACKUP_DIR/incus_config_$DATE.yaml\n\necho \"Configuration backup completed\"\n```\n\n### Restore Procedures\n\n```bash\n# Restore instance\nincus import instance_backup.tar.gz\n\n# Restore from ZFS snapshot\nsudo zfs rollback default@backup_20250916\n\n# Restore configuration\nincus admin import < incus_config_backup.yaml\n```\n\n## 10. System Requirements\n\n### Minimum Requirements\n- **CPU**: 2 cores, 2.0 GHz\n- **RAM**: 2GB\n- **Storage**: 20GB\n- **Network**: 100 Mbps\n\n### Recommended Requirements\n- **CPU**: 4+ cores, 3.0+ GHz\n- **RAM**: 8GB+\n- **Storage**: 100GB+ SSD\n- **Network**: Gigabit Ethernet\n\n### Scaling Guidelines\n- **Per container**: ~100MB RAM overhead\n- **Per VM**: ~512MB RAM overhead\n- **Storage**: Plan for snapshot storage (20-50% overhead)\n\n## 11. Support\n\n### Official Resources\n- **Website**: https://linuxcontainers.org/incus/\n- **GitHub**: https://github.com/lxc/incus\n- **Documentation**: https://linuxcontainers.org/incus/docs/\n- **Forum**: https://discuss.linuxcontainers.org\n\n### Community Support\n- **Matrix**: #incus:matrix.org\n- **IRC**: #lxc on libera.chat\n- **GitHub Issues**: https://github.com/lxc/incus/issues\n\n## 12. Contributing\n\n### How to Contribute\n1. Fork the repository on GitHub\n2. Create a feature branch\n3. Submit pull request\n4. Follow Go coding standards\n5. Include tests and documentation\n\n### Development Setup\n```bash\n# Clone repository\ngit clone https://github.com/lxc/incus.git\ncd incus\n\n# Install Go dependencies\nmake deps\n\n# Build Incus\nmake\n\n# Run tests\nmake check\n```\n\n## 13. License\n\nIncus is licensed under the Apache License 2.0.\n\nKey points:\n- Free to use, modify, and distribute\n- Commercial use allowed\n- No copyleft requirements\n- Patent grant included\n\n## 14. Acknowledgments\n\n### Credits\n- **Incus Team**: Core development team led by Stéphane Graber\n- **LXC Project**: Container runtime foundation\n- **Linux Containers**: Project hosting and governance\n- **Community Contributors**: Feature development and testing\n\n## 15. Version History\n\n### Current Releases\n- **v6.x LTS**: Long-term support until 2029\n- **v0.x**: Monthly feature releases\n\n### Major Features by Version\n- **v6.0**: LTS release with clustering improvements\n- **v0.5**: Enhanced VM support\n- **v0.1**: Initial fork from LXD\n\n## 16. Appendices\n\n### A. Migration from LXD\n\n```bash\n# Install migration tool\nsudo snap install lxd-to-incus\n\n# Stop LXD\nsudo snap stop lxd\n\n# Run migration\nsudo lxd-to-incus\n\n# Verify migration\nincus list\nincus info\n```\n\n### B. Clustering Setup\n\n```bash\n# Initialize cluster on first node\nincus admin init\n\n# Join additional nodes\nincus admin init\n\n# List cluster members\nincus cluster list\n\n# Add node to cluster\nincus cluster add node2\n```\n\n### C. API Examples\n\n```bash\n# Get instance list via API\ncurl -k -H \"Authorization: Bearer $TOKEN\" \\\n    https://localhost:8443/1.0/instances\n\n# Create instance via API\ncurl -k -X POST -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $TOKEN\" \\\n    -d '{\"name\":\"test\",\"source\":{\"type\":\"image\",\"alias\":\"ubuntu/22.04\"}}' \\\n    https://localhost:8443/1.0/instances\n```\n\n### D. Performance Monitoring\n\n```bash\n#!/bin/bash\n# monitor-incus.sh\n\necho \"=== Incus Status ===\"\nincus info\n\necho -e \"\\n=== Instance Status ===\"\nincus list\n\necho -e \"\\n=== Storage Usage ===\"\nincus storage info default\n\necho -e \"\\n=== Network Status ===\"\nincus network list\n\necho -e \"\\n=== System Resources ===\"\nfree -h\ndf -h /var/lib/incus\n```\n\n---\n\nFor more information and updates, visit https://github.com/howtomgr/incus","readmeHtml":"<p class=\"mobile-paragraph\">Incus is a free and open-source system container and virtual machine manager. It's a community-driven fork of LXD, created to maintain true open-source governance after Canonical moved LXD development in-house. Incus serves as a FOSS alternative to proprietary virtualization platforms like VMware vSphere, Proxmox (with subscription limitations), or cloud-based container services, providing powerful system containers and VMs with enterprise-grade features.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<h3 id=\"hardware-requirements\" class=\"mobile-header\">Hardware Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: Modern 64-bit processor with virtualization support (VT-x/AMD-V)</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 20GB+ available space</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Ethernet interface for bridged networking</li>\n<h3 id=\"software-requirements\" class=\"mobile-header\">Software Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Kernel</strong>: Linux 5.4+ with namespaces and cgroup support</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: ZFS, LVM, or directory backend support</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Bridge utilities for networking</li>\n<h3 id=\"network-requirements\" class=\"mobile-header\">Network Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Ports</strong>: </li>\n<li class=\"mobile-list-item\">8443: HTTPS API (default)</li>\n<li class=\"mobile-list-item\">Various: Container/VM networking</li>\n<li class=\"mobile-list-item\"><strong>Bridge</strong>: Network bridge for container connectivity</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">Incus officially supports:</p>\n<li class=\"mobile-list-item\">RHEL 9+ and derivatives (Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">Fedora 38+</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install dependencies\nsudo dnf install -y snapd bridge-utils dnsmasq\n\n# Enable and start snapd\nsudo systemctl enable --now snapd\nsudo ln -sf /var/lib/snapd/snap /snap\n\n# Install Incus via snap\nsudo snap install incus --channel=latest/stable\n\n# Add user to incus group\nsudo usermod -a -G snap_daemon $USER\nnewgrp snap_daemon\n\n# Initialize Incus\nsudo incus admin init</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system\nsudo apt update\n\n# Install dependencies\nsudo apt install -y snapd bridge-utils dnsmasq-base\n\n# Install Incus via snap\nsudo snap install incus --channel=latest/stable\n\n# Alternative: Install from Zabbly repository (recommended)\ncurl -fsSL https://pkgs.zabbly.com/key.asc | sudo gpg --dearmor -o /etc/apt/keyrings/zabbly.gpg\necho &quot;deb [signed-by=/etc/apt/keyrings/zabbly.gpg] https://pkgs.zabbly.com/incus/stable $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/zabbly-incus-stable.list\n\nsudo apt update\nsudo apt install -y incus\n\n# Add user to incus group\nsudo usermod -a -G incus $USER\nnewgrp incus\n\n# Initialize Incus\nincus admin init</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from AUR\nyay -S incus\n\n# Or using official repositories (if available)\nsudo pacman -S incus\n\n# Enable and start service\nsudo systemctl enable --now incus\n\n# Add user to incus group\nsudo usermod -a -G incus $USER\nnewgrp incus\n\n# Initialize Incus\nincus admin init</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from edge repositories\necho &quot;http://dl-cdn.alpinelinux.org/alpine/edge/testing&quot; &gt;&gt; /etc/apk/repositories\napk update\n\n# Install Incus\napk add incus\n\n# Enable and start service\nrc-service incus start\nrc-update add incus default\n\n# Add user to incus group\naddgroup $USER incus\n\n# Initialize Incus\nincus admin init</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensuse\" class=\"mobile-header\">openSUSE</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo zypper install -y snapd bridge-utils dnsmasq\n\n# Enable snapd\nsudo systemctl enable --now snapd\nsudo ln -sf /var/lib/snapd/snap /snap\n\n# Install Incus\nsudo snap install incus --channel=latest/stable\n\n# Add user to incus group\nsudo usermod -a -G snap_daemon $USER\nnewgrp snap_daemon\n\n# Initialize Incus\nsudo incus admin init</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-configuration\" class=\"mobile-header\">4. Configuration</h2>\n<h3 id=\"initial-setup-incus-admin-init\" class=\"mobile-header\">Initial Setup (incus admin init)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run interactive initialization\nincus admin init\n\n# Example configuration responses:\n# Would you like to use clustering? (yes/no) [default=no]: no\n# Do you want to configure a new storage pool? (yes/no) [default=yes]: yes\n# Name of the new storage pool [default=default]: default\n# Name of the storage backend to use (dir, lvm, zfs) [default=zfs]: zfs\n# Create a new ZFS pool? (yes/no) [default=yes]: yes\n# Would you like to use an existing empty block device? (yes/no) [default=no]: no\n# Size in GB of the new loop device (1GB minimum) [default=5GB]: 20GB\n# Would you like to connect to a MAAS server? (yes/no) [default=no]: no\n# Would you like to create a new local network bridge? (yes/no) [default=yes]: yes\n# What should the new bridge be called? [default=incusbr0]: incusbr0\n# What IPv4 address should be used? [default=auto]: auto\n# What IPv6 address should be used? [default=auto]: auto</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-configuration\" class=\"mobile-header\">Storage Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># List storage pools\nincus storage list\n\n# Create ZFS storage pool\nincus storage create zfspool zfs size=50GB\n\n# Create directory storage pool\nincus storage create dirpool dir source=/var/lib/incus/storage-pools/dirpool\n\n# Create LVM storage pool\nincus storage create lvmpool lvm source=/dev/sdb</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-configuration\" class=\"mobile-header\">Network Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># List networks\nincus network list\n\n# Create managed network\nincus network create incusbr1 \\\n    ipv4.address=192.168.100.1/24 \\\n    ipv4.nat=true \\\n    ipv6.address=fd00::1/64 \\\n    ipv6.nat=true\n\n# Create macvlan network\nincus network create macvlan1 \\\n    parent=eth0 \\\n    type=macvlan</code></pre>\n      </div>\n    </div>\n<h3 id=\"profile-configuration\" class=\"mobile-header\">Profile Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># List profiles\nincus profile list\n\n# Create custom profile\nincus profile create webserver\nincus profile edit webserver\n\n# Example profile configuration:\ncat &lt;&lt; &#039;EOF&#039; | incus profile edit webserver\nconfig:\n  limits.cpu: &quot;2&quot;\n  limits.memory: 2GB\n  security.nesting: &quot;true&quot;\ndescription: Web server profile\ndevices:\n  eth0:\n    name: eth0\n    network: incusbr0\n    type: nic\n  root:\n    path: /\n    pool: default\n    type: disk\nname: webserver\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"system-service-management\" class=\"mobile-header\">System Service Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># systemd (most distributions)\nsudo systemctl start incus\nsudo systemctl enable incus\nsudo systemctl status incus\nsudo systemctl restart incus\n\n# Check service logs\nsudo journalctl -u incus -f\n\n# OpenRC (Alpine)\nsudo rc-service incus start\nsudo rc-update add incus default</code></pre>\n      </div>\n    </div>\n<h3 id=\"containervm-management\" class=\"mobile-header\">Container/VM Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># List instances\nincus list\n\n# Launch container\nincus launch ubuntu:22.04 mycontainer\n\n# Launch VM\nincus launch ubuntu:22.04 myvm --vm\n\n# Start/stop instances\nincus start mycontainer\nincus stop mycontainer\nincus restart mycontainer\n\n# Execute commands in container\nincus exec mycontainer -- bash\nincus exec mycontainer -- apt update\n\n# File operations\nincus file push localfile mycontainer/remote/path/\nincus file pull mycontainer/remote/path/file localfile</code></pre>\n      </div>\n    </div>\n<h3 id=\"instance-configuration\" class=\"mobile-header\">Instance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set instance limits\nincus config set mycontainer limits.cpu 2\nincus config set mycontainer limits.memory 1GB\n\n# Add devices\nincus config device add mycontainer homedir disk source=/home path=/mnt/home\n\n# Set environment variables\nincus config set mycontainer environment.MYVAR myvalue\n\n# View instance configuration\nincus config show mycontainer</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Incus daemon not starting</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check system requirements\nsudo incus admin init --dump\n\n# Check logs\nsudo journalctl -u incus -n 50\n\n# Reset configuration\nsudo incus admin init --auto</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Network connectivity issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check bridge status\nip link show incusbr0\n\n# Test network connectivity\nincus exec mycontainer -- ping 8.8.8.8\n\n# Restart network\nsudo systemctl restart incus</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Storage issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check storage pools\nincus storage list\nincus storage info default\n\n# Check disk space\ndf -h /var/lib/incus\n\n# Repair ZFS pool\nsudo zpool scrub default</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Permission errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check user groups\ngroups $USER\n\n# Add user to incus group\nsudo usermod -a -G incus $USER\nnewgrp incus\n\n# Check socket permissions\nls -la /var/lib/incus/unix.socket</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nincus config set core.https_address :8443\nincus config set core.debug true\n\n# Run daemon in foreground\nsudo incusd --debug --group incus\n\n# Check daemon status\nincus info</code></pre>\n      </div>\n    </div>\n<h2 id=\"7-security-considerations\" class=\"mobile-header\">7. Security Considerations</h2>\n<h3 id=\"access-control\" class=\"mobile-header\">Access Control</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set up TLS authentication\nincus config trust add client.crt\n\n# Generate client certificate\nopenssl req -x509 -newkey rsa:4096 -keyout client.key -out client.crt -days 365 -nodes\n\n# Add trust relationship\nincus config trust add client.crt</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-security\" class=\"mobile-header\">Network Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure firewall for API access\nsudo firewall-cmd --permanent --add-port=8443/tcp\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 8443/tcp\nsudo ufw enable\n\n# Bind to specific interface\nincus config set core.https_address 192.168.1.100:8443</code></pre>\n      </div>\n    </div>\n<h3 id=\"container-security\" class=\"mobile-header\">Container Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable security features\nincus profile set default security.nesting false\nincus profile set default security.privileged false\nincus profile set default security.seccomp true\n\n# Set resource limits\nincus profile set default limits.cpu 2\nincus profile set default limits.memory 1GB\nincus profile set default limits.processes 1000</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-security\" class=\"mobile-header\">Storage Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable ZFS encryption\nincus storage create encrypted zfs \\\n    source=/dev/sdb \\\n    zfs.pool_name=encrypted \\\n    zfs.encryption=aes-256-gcm\n\n# Set secure permissions\nsudo chmod 700 /var/lib/incus\nsudo chown -R root:incus /var/lib/incus</code></pre>\n      </div>\n    </div>\n<h2 id=\"8-performance-tuning\" class=\"mobile-header\">8. Performance Tuning</h2>\n<h3 id=\"cpu-optimization\" class=\"mobile-header\">CPU Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set CPU scheduler for containers\nincus config set mycontainer limits.cpu.allowance 50%\nincus config set mycontainer limits.cpu.priority 5\n\n# Pin to specific CPUs\nincus config set mycontainer limits.cpu 0-3</code></pre>\n      </div>\n    </div>\n<h3 id=\"memory-optimization\" class=\"mobile-header\">Memory Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure memory limits\nincus config set mycontainer limits.memory 2GB\nincus config set mycontainer limits.memory.swap false\n\n# Enable memory ballooning for VMs\nincus config set myvm limits.memory.enforce hard</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-performance\" class=\"mobile-header\">Storage Performance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize ZFS for SSDs\nsudo zpool set autotrim=on default\n\n# Set ZFS recordsize for databases\nincus storage set default zfs.pool_name default\nincus storage volume set default myvolume zfs.recordsize 8K\n\n# Enable compression\nincus storage set default zfs.compression lz4</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-optimization\" class=\"mobile-header\">Network Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase network buffer sizes\necho &#039;net.core.rmem_max = 16777216&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.core.wmem_max = 16777216&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Use SR-IOV for VMs (if supported)\nincus config device add myvm eth0 nic \\\n    nictype=sriov \\\n    parent=eth0</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"instance-backup\" class=\"mobile-header\">Instance Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-incus-instances.sh\n\nBACKUP_DIR=&quot;/var/backups/incus&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Export all instances\nfor instance in $(incus list -c n --format csv); do\n    echo &quot;Backing up $instance...&quot;\n    incus export $instance &quot;$BACKUP_DIR/${instance}_${DATE}.tar.gz&quot; \\\n        --instance-only\ndone\n\necho &quot;Instance backups completed in $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-backup\" class=\"mobile-header\">Storage Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-incus-storage.sh\n\nBACKUP_DIR=&quot;/var/backups/incus&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# ZFS snapshot backup\nsudo zfs snapshot default@backup_$DATE\n\n# Export ZFS snapshot\nsudo zfs send default@backup_$DATE | \\\n    gzip &gt; $BACKUP_DIR/zfs_backup_$DATE.gz\n\necho &quot;Storage backup completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"configuration-backup\" class=\"mobile-header\">Configuration Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-incus-config.sh\n\nBACKUP_DIR=&quot;/var/backups/incus&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Backup database\nsudo systemctl stop incus\nsudo cp -r /var/lib/incus/database $BACKUP_DIR/database_$DATE\nsudo systemctl start incus\n\n# Export configuration\nincus admin export &gt; $BACKUP_DIR/incus_config_$DATE.yaml\n\necho &quot;Configuration backup completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Restore instance\nincus import instance_backup.tar.gz\n\n# Restore from ZFS snapshot\nsudo zfs rollback default@backup_20250916\n\n# Restore configuration\nincus admin import &lt; incus_config_backup.yaml</code></pre>\n      </div>\n    </div>\n<h2 id=\"10-system-requirements\" class=\"mobile-header\">10. System Requirements</h2>\n<h3 id=\"minimum-requirements\" class=\"mobile-header\">Minimum Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 2 cores, 2.0 GHz</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 2GB</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 20GB</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: 100 Mbps</li>\n<h3 id=\"recommended-requirements\" class=\"mobile-header\">Recommended Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 4+ cores, 3.0+ GHz</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 8GB+</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 100GB+ SSD</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Gigabit Ethernet</li>\n<h3 id=\"scaling-guidelines\" class=\"mobile-header\">Scaling Guidelines</h3>\n<li class=\"mobile-list-item\"><strong>Per container</strong>: ~100MB RAM overhead</li>\n<li class=\"mobile-list-item\"><strong>Per VM</strong>: ~512MB RAM overhead</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: Plan for snapshot storage (20-50% overhead)</li>\n<h2 id=\"11-support\" class=\"mobile-header\">11. Support</h2>\n<h3 id=\"official-resources\" class=\"mobile-header\">Official Resources</h3>\n<li class=\"mobile-list-item\"><strong>Website</strong>: https://linuxcontainers.org/incus/</li>\n<li class=\"mobile-list-item\"><strong>GitHub</strong>: https://github.com/lxc/incus</li>\n<li class=\"mobile-list-item\"><strong>Documentation</strong>: https://linuxcontainers.org/incus/docs/</li>\n<li class=\"mobile-list-item\"><strong>Forum</strong>: https://discuss.linuxcontainers.org</li>\n<h3 id=\"community-support\" class=\"mobile-header\">Community Support</h3>\n<li class=\"mobile-list-item\"><strong>Matrix</strong>: #incus:matrix.org</li>\n<li class=\"mobile-list-item\"><strong>IRC</strong>: #lxc on libera.chat</li>\n<li class=\"mobile-list-item\"><strong>GitHub Issues</strong>: https://github.com/lxc/incus/issues</li>\n<h2 id=\"12-contributing\" class=\"mobile-header\">12. Contributing</h2>\n<h3 id=\"how-to-contribute\" class=\"mobile-header\">How to Contribute</h3>\n<p class=\"mobile-paragraph\">1. Fork the repository on GitHub</p>\n<p class=\"mobile-paragraph\">2. Create a feature branch</p>\n<p class=\"mobile-paragraph\">3. Submit pull request</p>\n<p class=\"mobile-paragraph\">4. Follow Go coding standards</p>\n<p class=\"mobile-paragraph\">5. Include tests and documentation</p>\n<h3 id=\"development-setup\" class=\"mobile-header\">Development Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clone repository\ngit clone https://github.com/lxc/incus.git\ncd incus\n\n# Install Go dependencies\nmake deps\n\n# Build Incus\nmake\n\n# Run tests\nmake check</code></pre>\n      </div>\n    </div>\n<h2 id=\"13-license\" class=\"mobile-header\">13. License</h2>\n<p class=\"mobile-paragraph\">Incus is licensed under the Apache License 2.0.</p>\n<p class=\"mobile-paragraph\">Key points:</p>\n<li class=\"mobile-list-item\">Free to use, modify, and distribute</li>\n<li class=\"mobile-list-item\">Commercial use allowed</li>\n<li class=\"mobile-list-item\">No copyleft requirements</li>\n<li class=\"mobile-list-item\">Patent grant included</li>\n<h2 id=\"14-acknowledgments\" class=\"mobile-header\">14. Acknowledgments</h2>\n<h3 id=\"credits\" class=\"mobile-header\">Credits</h3>\n<li class=\"mobile-list-item\"><strong>Incus Team</strong>: Core development team led by Stéphane Graber</li>\n<li class=\"mobile-list-item\"><strong>LXC Project</strong>: Container runtime foundation</li>\n<li class=\"mobile-list-item\"><strong>Linux Containers</strong>: Project hosting and governance</li>\n<li class=\"mobile-list-item\"><strong>Community Contributors</strong>: Feature development and testing</li>\n<h2 id=\"15-version-history\" class=\"mobile-header\">15. Version History</h2>\n<h3 id=\"current-releases\" class=\"mobile-header\">Current Releases</h3>\n<li class=\"mobile-list-item\"><strong>v6.x LTS</strong>: Long-term support until 2029</li>\n<li class=\"mobile-list-item\"><strong>v0.x</strong>: Monthly feature releases</li>\n<h3 id=\"major-features-by-version\" class=\"mobile-header\">Major Features by Version</h3>\n<li class=\"mobile-list-item\"><strong>v6.0</strong>: LTS release with clustering improvements</li>\n<li class=\"mobile-list-item\"><strong>v0.5</strong>: Enhanced VM support</li>\n<li class=\"mobile-list-item\"><strong>v0.1</strong>: Initial fork from LXD</li>\n<h2 id=\"16-appendices\" class=\"mobile-header\">16. Appendices</h2>\n<h3 id=\"a-migration-from-lxd\" class=\"mobile-header\">A. Migration from LXD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install migration tool\nsudo snap install lxd-to-incus\n\n# Stop LXD\nsudo snap stop lxd\n\n# Run migration\nsudo lxd-to-incus\n\n# Verify migration\nincus list\nincus info</code></pre>\n      </div>\n    </div>\n<h3 id=\"b-clustering-setup\" class=\"mobile-header\">B. Clustering Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize cluster on first node\nincus admin init\n\n# Join additional nodes\nincus admin init\n\n# List cluster members\nincus cluster list\n\n# Add node to cluster\nincus cluster add node2</code></pre>\n      </div>\n    </div>\n<h3 id=\"c-api-examples\" class=\"mobile-header\">C. API Examples</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Get instance list via API\ncurl -k -H &quot;Authorization: Bearer $TOKEN&quot; \\\n    https://localhost:8443/1.0/instances\n\n# Create instance via API\ncurl -k -X POST -H &quot;Content-Type: application/json&quot; \\\n    -H &quot;Authorization: Bearer $TOKEN&quot; \\\n    -d &#039;{&quot;name&quot;:&quot;test&quot;,&quot;source&quot;:{&quot;type&quot;:&quot;image&quot;,&quot;alias&quot;:&quot;ubuntu/22.04&quot;}}&#039; \\\n    https://localhost:8443/1.0/instances</code></pre>\n      </div>\n    </div>\n<h3 id=\"d-performance-monitoring\" class=\"mobile-header\">D. Performance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# monitor-incus.sh\n\necho &quot;=== Incus Status ===&quot;\nincus info\n\necho -e &quot;\\n=== Instance Status ===&quot;\nincus list\n\necho -e &quot;\\n=== Storage Usage ===&quot;\nincus storage info default\n\necho -e &quot;\\n=== Network Status ===&quot;\nincus network list\n\necho -e &quot;\\n=== System Resources ===&quot;\nfree -h\ndf -h /var/lib/incus</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\">For more information and updates, visit https://github.com/howtomgr/incus</p>","readTime":"11 min","wordCount":2120,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":3,"text":"Hardware Requirements","id":"hardware-requirements"},{"level":3,"text":"Software Requirements","id":"software-requirements"},{"level":3,"text":"Network Requirements","id":"network-requirements"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/Rocky Linux/AlmaLinux","id":"rhelrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE","id":"opensuse"},{"level":2,"text":"4. Configuration","id":"4-configuration"},{"level":3,"text":"Initial Setup (incus admin init)","id":"initial-setup-incus-admin-init"},{"level":3,"text":"Storage Configuration","id":"storage-configuration"},{"level":3,"text":"Network Configuration","id":"network-configuration"},{"level":3,"text":"Profile Configuration","id":"profile-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"System Service Management","id":"system-service-management"},{"level":3,"text":"Container/VM Management","id":"containervm-management"},{"level":3,"text":"Instance Configuration","id":"instance-configuration"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"7. Security Considerations","id":"7-security-considerations"},{"level":3,"text":"Access Control","id":"access-control"},{"level":3,"text":"Network Security","id":"network-security"},{"level":3,"text":"Container Security","id":"container-security"},{"level":3,"text":"Storage Security","id":"storage-security"},{"level":2,"text":"8. Performance Tuning","id":"8-performance-tuning"},{"level":3,"text":"CPU Optimization","id":"cpu-optimization"},{"level":3,"text":"Memory Optimization","id":"memory-optimization"},{"level":3,"text":"Storage Performance","id":"storage-performance"},{"level":3,"text":"Network Optimization","id":"network-optimization"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Instance Backup","id":"instance-backup"},{"level":3,"text":"Storage Backup","id":"storage-backup"},{"level":3,"text":"Configuration Backup","id":"configuration-backup"},{"level":3,"text":"Restore Procedures","id":"restore-procedures"},{"level":2,"text":"10. System Requirements","id":"10-system-requirements"},{"level":3,"text":"Minimum Requirements","id":"minimum-requirements"},{"level":3,"text":"Recommended Requirements","id":"recommended-requirements"},{"level":3,"text":"Scaling Guidelines","id":"scaling-guidelines"},{"level":2,"text":"11. Support","id":"11-support"},{"level":3,"text":"Official Resources","id":"official-resources"},{"level":3,"text":"Community Support","id":"community-support"},{"level":2,"text":"12. Contributing","id":"12-contributing"},{"level":3,"text":"How to Contribute","id":"how-to-contribute"},{"level":3,"text":"Development Setup","id":"development-setup"},{"level":2,"text":"13. License","id":"13-license"},{"level":2,"text":"14. Acknowledgments","id":"14-acknowledgments"},{"level":3,"text":"Credits","id":"credits"},{"level":2,"text":"15. Version History","id":"15-version-history"},{"level":3,"text":"Current Releases","id":"current-releases"},{"level":3,"text":"Major Features by Version","id":"major-features-by-version"},{"level":2,"text":"16. Appendices","id":"16-appendices"},{"level":3,"text":"A. Migration from LXD","id":"a-migration-from-lxd"},{"level":3,"text":"B. Clustering Setup","id":"b-clustering-setup"},{"level":3,"text":"C. API Examples","id":"c-api-examples"},{"level":3,"text":"D. Performance Monitoring","id":"d-performance-monitoring"}],"lastBuilt":"2025-10-21T18:14:23.075Z","metadataVersion":"2.0"},"category":{"key":"virtualization","name":"Virtualization","description":"Virtualization tools and applications","icon":"🔧","color":"#6272a4"},"relatedGuides":[{"name":"webvirt","displayName":"WebVirtMgr Installation Guide","slug":"webvirt","description":"WebVirtMgr is a free and open-source web-based interface for managing virtual machines through libvirt. It provides a complete KVM management solution with an intuitive web interface, serving as a FOSS alternative to proprietary virtualization management platforms like VMware vSphere or Microsoft SCVMM.","category":"virtualization","subcategory":"virtualization","difficultyLevel":"intermediate","estimatedSetupTime":"30-60 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","freebsd"],"defaultPorts":[80,443,8000,6080,16509],"installationMethods":["native-packages","source-installation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["virtualization","kvm","libvirt","vm-management","web-interface"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Apache-2.0","websiteUrl":"https://howtomgr.github.io/virtualization/webvirt","documentationUrl":"https://howtomgr.github.io/virtualization/webvirt","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/webvirt","updatedAt":"2025-09-16T18:02:40Z","createdAt":"2023-08-28T03:50:25Z","readmeRaw":"# WebVirtMgr Installation Guide\n\nWebVirtMgr is a free and open-source web-based interface for managing virtual machines through libvirt. It provides a complete KVM management solution with an intuitive web interface, serving as a FOSS alternative to proprietary virtualization management platforms like VMware vSphere, Microsoft System Center Virtual Machine Manager, or Citrix XenCenter.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n### Hardware Requirements\n- **CPU**: 64-bit processor with virtualization extensions (Intel VT-x or AMD-V)\n- **RAM**: 2GB minimum (4GB+ recommended)\n- **Storage**: 20GB minimum for OS and WebVirtMgr\n- **Network**: Gigabit Ethernet recommended\n\n### Software Requirements\n- **Hypervisor**: KVM/QEMU with libvirt\n- **Python**: 2.7 or 3.6+\n- **Database**: SQLite (default) or MySQL/PostgreSQL\n- **Web Server**: nginx or Apache (nginx recommended)\n\n### Dependencies\n- libvirt-python\n- Django 1.11+\n- python-pip\n- supervisor or systemd\n- novnc (for VM console access)\n\n### System Access\n- root or sudo privileges required\n- libvirt group membership for web user\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (client only - for accessing WebVirtMgr)\n- FreeBSD 13+ (experimental)\n- Windows (client only - for accessing WebVirtMgr)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install required packages\nsudo dnf install -y python3 python3-pip git nginx supervisor \\\n    libvirt-daemon-system libvirt-clients python3-libvirt \\\n    libxml2-python3 python3-websockify novnc\n\n# Install development tools for Python packages\nsudo dnf groupinstall -y \"Development Tools\"\nsudo dnf install -y python3-devel libvirt-devel libxml2-devel \\\n    libxslt-devel mysql-devel\n\n# Clone WebVirtMgr repository\ncd /var/www\nsudo git clone https://github.com/retspen/webvirtmgr.git\ncd webvirtmgr\n\n# Install Python dependencies\nsudo pip3 install -r requirements.txt\nsudo pip3 install gunicorn\n\n# Configure Django\nsudo python3 manage.py syncdb\nsudo python3 manage.py collectstatic\n\n# Create default admin user (follow prompts)\nsudo python3 manage.py createsuperuser\n\n# Set permissions\nsudo chown -R nginx:nginx /var/www/webvirtmgr\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install required packages\nsudo apt install -y python3 python3-pip git nginx supervisor \\\n    libvirt-daemon-system libvirt-clients python3-libvirt \\\n    python3-libxml2 python3-websockify novnc\n\n# Install development packages\nsudo apt install -y build-essential python3-dev libvirt-dev \\\n    libxml2-dev libxslt1-dev zlib1g-dev\n\n# Clone WebVirtMgr repository\ncd /var/www\nsudo git clone https://github.com/retspen/webvirtmgr.git\ncd webvirtmgr\n\n# Install Python dependencies\nsudo pip3 install -r requirements.txt\nsudo pip3 install gunicorn\n\n# Configure Django\nsudo python3 manage.py migrate\nsudo python3 manage.py collectstatic\n\n# Create default admin user\nsudo python3 manage.py createsuperuser\n\n# Set permissions\nsudo chown -R www-data:www-data /var/www/webvirtmgr\n```\n\n### Arch Linux\n\n```bash\n# Install required packages\nsudo pacman -S python python-pip git nginx supervisor \\\n    libvirt qemu python-libvirt python-lxml novnc\n\n# Install from AUR\nyay -S webvirtmgr\n\n# Or manual installation\ncd /var/www\nsudo git clone https://github.com/retspen/webvirtmgr.git\ncd webvirtmgr\n\n# Install Python dependencies\nsudo pip install -r requirements.txt\nsudo pip install gunicorn\n\n# Configure Django\nsudo python manage.py migrate\nsudo python manage.py collectstatic\nsudo python manage.py createsuperuser\n\n# Set permissions\nsudo chown -R http:http /var/www/webvirtmgr\n```\n\n### Alpine Linux\n\n```bash\n# Install required packages\napk add --no-cache python3 py3-pip git nginx supervisor \\\n    libvirt-daemon py3-libvirt py3-lxml novnc\n\n# Install build dependencies\napk add --no-cache --virtual .build-deps \\\n    python3-dev libvirt-dev libxml2-dev libxslt-dev \\\n    gcc musl-dev linux-headers\n\n# Clone WebVirtMgr\ncd /var/www\ngit clone https://github.com/retspen/webvirtmgr.git\ncd webvirtmgr\n\n# Install Python dependencies\npip3 install -r requirements.txt\npip3 install gunicorn\n\n# Configure Django\npython3 manage.py migrate\npython3 manage.py collectstatic\npython3 manage.py createsuperuser\n\n# Clean up build dependencies\napk del .build-deps\n\n# Set permissions\nchown -R nginx:nginx /var/www/webvirtmgr\n```\n\n### openSUSE/SLES\n\n```bash\n# Install required packages\nsudo zypper install -y python3 python3-pip git nginx \\\n    libvirt-daemon python3-libvirt python3-lxml novnc\n\n# Install development packages\nsudo zypper install -y python3-devel libvirt-devel \\\n    libxml2-devel libxslt-devel\n\n# Clone WebVirtMgr\ncd /var/www\nsudo git clone https://github.com/retspen/webvirtmgr.git\ncd webvirtmgr\n\n# Install Python dependencies\nsudo pip3 install -r requirements.txt\nsudo pip3 install gunicorn\n\n# Configure Django\nsudo python3 manage.py migrate\nsudo python3 manage.py collectstatic\nsudo python3 manage.py createsuperuser\n\n# Set permissions\nsudo chown -R wwwrun:www /var/www/webvirtmgr\n```\n\n## 4. Configuration\n\n### nginx Configuration\n\nCreate `/etc/nginx/conf.d/webvirtmgr.conf`:\n\n```nginx\nserver {\n    listen 80;\n    server_name webvirtmgr.example.com;\n    \n    access_log /var/log/nginx/webvirtmgr_access.log;\n    error_log /var/log/nginx/webvirtmgr_error.log;\n\n    location /static/ {\n        root /var/www/webvirtmgr;\n        expires 30d;\n    }\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_redirect off;\n    }\n}\n```\n\n### Gunicorn Configuration\n\nCreate `/etc/supervisor/conf.d/webvirtmgr.conf` (Debian/Ubuntu) or `/etc/supervisord.d/webvirtmgr.ini` (RHEL):\n\n```ini\n[program:webvirtmgr]\ncommand=/usr/local/bin/gunicorn webvirtmgr.wsgi:application -b 0.0.0.0:8000\ndirectory=/var/www/webvirtmgr\nuser=nginx\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/webvirtmgr/gunicorn.log\nstderr_logfile=/var/log/webvirtmgr/gunicorn_error.log\nenvironment=PATH=\"/usr/local/bin:/usr/bin\"\n```\n\n### Console Configuration\n\nCreate `/etc/supervisor/conf.d/webvirtmgr-console.conf`:\n\n```ini\n[program:webvirtmgr-console]\ncommand=/usr/local/bin/python /var/www/webvirtmgr/console/webvirtmgr-console\ndirectory=/var/www/webvirtmgr\nuser=nginx\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/webvirtmgr/console.log\nstderr_logfile=/var/log/webvirtmgr/console_error.log\n```\n\n### libvirt Configuration\n\nConfigure libvirt for TCP access:\n\n```bash\n# Edit /etc/libvirt/libvirtd.conf\nsudo sed -i 's/#listen_tls = 0/listen_tls = 0/g' /etc/libvirt/libvirtd.conf\nsudo sed -i 's/#listen_tcp = 1/listen_tcp = 1/g' /etc/libvirt/libvirtd.conf\nsudo sed -i 's/#tcp_port = \"16509\"/tcp_port = \"16509\"/g' /etc/libvirt/libvirtd.conf\nsudo sed -i 's/#auth_tcp = \"sasl\"/auth_tcp = \"none\"/g' /etc/libvirt/libvirtd.conf\n\n# For systemd-based systems\nsudo systemctl restart libvirtd\n```\n\n### Database Configuration (Optional MySQL/PostgreSQL)\n\nFor MySQL:\n```python\n# In settings.py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'webvirtmgr',\n        'USER': 'webvirtmgr',\n        'PASSWORD': 'your_password',\n        'HOST': 'localhost',\n        'PORT': '3306',\n    }\n}\n```\n\n## 5. Service Management\n\n### systemd (Modern Linux distributions)\n\nCreate `/etc/systemd/system/webvirtmgr.service`:\n\n```ini\n[Unit]\nDescription=WebVirtMgr\nAfter=network.target\n\n[Service]\nType=simple\nUser=nginx\nGroup=nginx\nWorkingDirectory=/var/www/webvirtmgr\nEnvironment=\"PATH=/usr/local/bin:/usr/bin\"\nExecStart=/usr/local/bin/gunicorn webvirtmgr.wsgi:application -b 0.0.0.0:8000\nRestart=on-failure\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n```\n\nCreate `/etc/systemd/system/webvirtmgr-console.service`:\n\n```ini\n[Unit]\nDescription=WebVirtMgr Console\nAfter=network.target\n\n[Service]\nType=simple\nUser=nginx\nGroup=nginx\nWorkingDirectory=/var/www/webvirtmgr\nExecStart=/usr/bin/python3 /var/www/webvirtmgr/console/webvirtmgr-console\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\nManagement commands:\n```bash\n# Enable services\nsudo systemctl enable webvirtmgr webvirtmgr-console nginx\n\n# Start services\nsudo systemctl start webvirtmgr webvirtmgr-console nginx\n\n# Check status\nsudo systemctl status webvirtmgr\n```\n\n### Supervisor (Alternative)\n\n```bash\n# Start supervisor\nsudo systemctl start supervisord\n\n# Reload configuration\nsudo supervisorctl reload\n\n# Check status\nsudo supervisorctl status\n\n# Start/stop services\nsudo supervisorctl start webvirtmgr\nsudo supervisorctl stop webvirtmgr\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Cannot connect to libvirt**:\n```bash\n# Check libvirt service\nsudo systemctl status libvirtd\n\n# Test connection\nvirsh -c qemu:///system list\n\n# Add user to libvirt group\nsudo usermod -a -G libvirt nginx\n```\n\n2. **Console not working**:\n```bash\n# Check novnc service\nsudo systemctl status webvirtmgr-console\n\n# Check WebSocket proxy\nss -tlnp | grep 6080\n\n# Verify novnc installation\nwhich novnc_server\n```\n\n3. **Permission denied errors**:\n```bash\n# Fix ownership\nsudo chown -R nginx:nginx /var/www/webvirtmgr\n\n# Fix SELinux context (RHEL/CentOS)\nsudo semanage fcontext -a -t httpd_sys_content_t \"/var/www/webvirtmgr(/.*)?\"\nsudo restorecon -Rv /var/www/webvirtmgr\n```\n\n4. **Database errors**:\n```bash\n# Reinitialize database\ncd /var/www/webvirtmgr\nsudo python3 manage.py migrate --run-syncdb\n```\n\n### Debug Mode\n\nEnable debug mode in `settings.py`:\n```python\nDEBUG = True\nALLOWED_HOSTS = ['*']\n```\n\nCheck logs:\n```bash\ntail -f /var/log/nginx/webvirtmgr_error.log\ntail -f /var/log/webvirtmgr/gunicorn_error.log\n```\n\n## 7. Security Considerations\n\n### SSL/TLS Configuration\n\nAdd SSL to nginx configuration:\n\n```nginx\nserver {\n    listen 443 ssl http2;\n    server_name webvirtmgr.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/webvirtmgr.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/webvirtmgr.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    # ... rest of configuration\n}\n\nserver {\n    listen 80;\n    server_name webvirtmgr.example.com;\n    return 301 https://$server_name$request_uri;\n}\n```\n\n### Firewall Configuration\n\n```bash\n# firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-port=6080/tcp  # VNC console\nsudo firewall-cmd --reload\n\n# ufw (Ubuntu/Debian)\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw allow 6080/tcp\n```\n\n### Authentication Security\n\n1. **Strong passwords**: Enforce strong password policy\n2. **Session timeout**: Configure in `settings.py`:\n```python\nSESSION_COOKIE_AGE = 3600  # 1 hour\nSESSION_SAVE_EVERY_REQUEST = True\n```\n\n3. **LDAP/AD Integration** (optional):\n```python\n# Install python-ldap\npip install python-ldap django-auth-ldap\n\n# Configure in settings.py\nimport ldap\nfrom django_auth_ldap.config import LDAPSearch\n\nAUTHENTICATION_BACKENDS = (\n    'django_auth_ldap.backend.LDAPBackend',\n    'django.contrib.auth.backends.ModelBackend',\n)\n\nAUTH_LDAP_SERVER_URI = \"ldap://ldap.example.com\"\nAUTH_LDAP_BIND_DN = \"cn=admin,dc=example,dc=com\"\nAUTH_LDAP_BIND_PASSWORD = \"password\"\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\n    \"ou=users,dc=example,dc=com\",\n    ldap.SCOPE_SUBTREE,\n    \"(uid=%(user)s)\"\n)\n```\n\n## 8. Performance Tuning\n\n### Gunicorn Optimization\n\nUpdate gunicorn command for production:\n```bash\ngunicorn webvirtmgr.wsgi:application \\\n    -b 0.0.0.0:8000 \\\n    --workers 4 \\\n    --timeout 60 \\\n    --log-level info \\\n    --access-logfile /var/log/webvirtmgr/access.log\n```\n\n### nginx Optimization\n\n```nginx\n# In nginx.conf\nworker_processes auto;\nworker_rlimit_nofile 65535;\n\nevents {\n    worker_connections 65535;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    \n    # Compression\n    gzip on;\n    gzip_comp_level 6;\n    gzip_types text/plain text/css text/xml text/javascript \n               application/json application/javascript;\n}\n```\n\n### Database Optimization\n\nFor MySQL backend:\n```sql\n-- Optimize tables\nOPTIMIZE TABLE django_session;\nOPTIMIZE TABLE instances_instance;\n\n-- Add indexes\nCREATE INDEX idx_instance_name ON instances_instance(name);\nCREATE INDEX idx_instance_uuid ON instances_instance(uuid);\n```\n\n### System Tuning\n\n```bash\n# Increase file descriptors\necho \"* soft nofile 65535\" >> /etc/security/limits.conf\necho \"* hard nofile 65535\" >> /etc/security/limits.conf\n\n# Network tuning\necho \"net.core.somaxconn = 65535\" >> /etc/sysctl.conf\necho \"net.ipv4.tcp_max_syn_backlog = 65535\" >> /etc/sysctl.conf\nsysctl -p\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\nCreate `/usr/local/bin/backup-webvirtmgr.sh`:\n\n```bash\n#!/bin/bash\nBACKUP_DIR=\"/backup/webvirtmgr\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/webvirtmgr_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Stop services\nsystemctl stop webvirtmgr webvirtmgr-console\n\n# Backup database\ncd /var/www/webvirtmgr\npython3 manage.py dumpdata > $BACKUP_DIR/db_backup_$DATE.json\n\n# Backup files\ntar -czf $BACKUP_FILE \\\n    /var/www/webvirtmgr \\\n    /etc/nginx/conf.d/webvirtmgr.conf \\\n    /etc/systemd/system/webvirtmgr*.service \\\n    $BACKUP_DIR/db_backup_$DATE.json\n\n# Start services\nsystemctl start webvirtmgr webvirtmgr-console\n\n# Remove old backups (keep 7 days)\nfind $BACKUP_DIR -name \"*.tar.gz\" -mtime +7 -delete\n\necho \"Backup completed: $BACKUP_FILE\"\n```\n\n### Restore Procedure\n\n```bash\n#!/bin/bash\nBACKUP_FILE=\"$1\"\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup_file>\"\n    exit 1\nfi\n\n# Stop services\nsystemctl stop webvirtmgr webvirtmgr-console nginx\n\n# Extract backup\ntar -xzf $BACKUP_FILE -C /\n\n# Find and restore database\nDB_BACKUP=$(tar -tf $BACKUP_FILE | grep \"db_backup.*json\")\nif [ -n \"$DB_BACKUP\" ]; then\n    cd /var/www/webvirtmgr\n    python3 manage.py flush --noinput\n    python3 manage.py loaddata /$DB_BACKUP\nfi\n\n# Fix permissions\nchown -R nginx:nginx /var/www/webvirtmgr\n\n# Start services\nsystemctl start webvirtmgr webvirtmgr-console nginx\n\necho \"Restore completed\"\n```\n\n## 10. System Requirements\n\n### Minimum Requirements\n- **CPU**: 2 cores\n- **RAM**: 2GB\n- **Storage**: 20GB\n- **Network**: 100Mbps\n\n### Recommended Requirements\n- **CPU**: 4+ cores\n- **RAM**: 4GB+\n- **Storage**: 50GB+ SSD\n- **Network**: 1Gbps\n\n### Scaling Considerations\n\nFor managing 50+ VMs:\n- **CPU**: 8+ cores\n- **RAM**: 8GB+\n- **Database**: External MySQL/PostgreSQL\n- **Load Balancer**: HAProxy/nginx for multiple WebVirtMgr instances\n\n## 11. Support\n\n### Official Resources\n- **GitHub Repository**: https://github.com/retspen/webvirtmgr\n- **Wiki**: https://github.com/retspen/webvirtmgr/wiki\n- **Issues**: https://github.com/retspen/webvirtmgr/issues\n\n### Community Support\n- **IRC**: #webvirtmgr on Libera.Chat\n- **Forums**: Various Linux distribution forums\n- **Stack Overflow**: Tag `webvirtmgr`\n\n### Professional Support\n- Community-driven project\n- Commercial alternatives: oVirt, Proxmox VE\n\n## 12. Contributing\n\n### How to Contribute\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n### Development Setup\n```bash\n# Clone repository\ngit clone https://github.com/yourusername/webvirtmgr.git\ncd webvirtmgr\n\n# Create virtual environment\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements-dev.txt\n\n# Run development server\npython manage.py runserver 0.0.0.0:8000\n```\n\n## 13. License\n\nWebVirtMgr is licensed under the Apache License 2.0. See LICENSE file for details.\n\nKey points:\n- Free for commercial use\n- Modification allowed\n- Distribution allowed\n- Patent grant included\n- No warranty provided\n\n## 14. Acknowledgments\n\n### Project Credits\n- **Anatoliy Guskov**: Original creator and maintainer\n- **Contributors**: See GitHub contributors page\n- **libvirt Project**: For the virtualization API\n- **Django Project**: Web framework\n- **noVNC Project**: HTML5 VNC client\n\n### Special Thanks\n- KVM/QEMU development team\n- Python community\n- Open source virtualization community\n\n## 15. Version History\n\n### Current Version\n- **Latest Stable**: Check GitHub releases\n- **Development**: master branch\n\n### Major Releases\n- **v4.8.9**: Latest stable release\n- **v4.x**: Django 1.11 support\n- **v3.x**: Python 3 support\n- **v2.x**: Initial stable releases\n\n### Upgrade Path\n```bash\n# Backup before upgrade\n/usr/local/bin/backup-webvirtmgr.sh\n\n# Pull latest code\ncd /var/www/webvirtmgr\ngit pull origin master\n\n# Update dependencies\npip3 install -r requirements.txt --upgrade\n\n# Run migrations\npython3 manage.py migrate\n\n# Restart services\nsystemctl restart webvirtmgr webvirtmgr-console\n```\n\n## 16. Appendices\n\n### A. Port Reference\n\n| Port | Service | Description |\n|------|---------|-------------|\n| 80/443 | nginx | Web interface |\n| 8000 | Gunicorn | Application server |\n| 6080 | NoVNC | VNC console proxy |\n| 16509 | libvirt | libvirt TCP connection |\n| 5900-5999 | VNC | VM console connections |\n\n### B. File Locations\n\n| File/Directory | Purpose |\n|---------------|---------|\n| `/var/www/webvirtmgr/` | Application root |\n| `/etc/nginx/conf.d/webvirtmgr.conf` | nginx configuration |\n| `/var/log/webvirtmgr/` | Application logs |\n| `/var/lib/webvirtmgr/` | Data directory |\n\n### C. Common Commands\n\n```bash\n# Check VM list via CLI\nvirsh list --all\n\n# Restart all services\nsystemctl restart webvirtmgr webvirtmgr-console nginx libvirtd\n\n# Django admin shell\ncd /var/www/webvirtmgr\npython3 manage.py shell\n\n# Create new user\npython3 manage.py createsuperuser\n\n# Collect static files after update\npython3 manage.py collectstatic --noinput\n```\n\n### D. Integration Examples\n\n**API Usage Example**:\n```python\nimport requests\n\n# Login\nsession = requests.Session()\nlogin_data = {'username': 'admin', 'password': 'password'}\nsession.post('http://webvirtmgr.example.com/login/', data=login_data)\n\n# Get instance list\nresponse = session.get('http://webvirtmgr.example.com/instances/')\ninstances = response.json()\n```\n\n---\n\nFor more detailed information and updates, visit https://github.com/howtomgr/webvirt","readmeHtml":"<p class=\"mobile-paragraph\">WebVirtMgr is a free and open-source web-based interface for managing virtual machines through libvirt. It provides a complete KVM management solution with an intuitive web interface, serving as a FOSS alternative to proprietary virtualization management platforms like VMware vSphere, Microsoft System Center Virtual Machine Manager, or Citrix XenCenter.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<h3 id=\"hardware-requirements\" class=\"mobile-header\">Hardware Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 64-bit processor with virtualization extensions (Intel VT-x or AMD-V)</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 20GB minimum for OS and WebVirtMgr</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Gigabit Ethernet recommended</li>\n<h3 id=\"software-requirements\" class=\"mobile-header\">Software Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Hypervisor</strong>: KVM/QEMU with libvirt</li>\n<li class=\"mobile-list-item\"><strong>Python</strong>: 2.7 or 3.6+</li>\n<li class=\"mobile-list-item\"><strong>Database</strong>: SQLite (default) or MySQL/PostgreSQL</li>\n<li class=\"mobile-list-item\"><strong>Web Server</strong>: nginx or Apache (nginx recommended)</li>\n<h3 id=\"dependencies\" class=\"mobile-header\">Dependencies</h3>\n<li class=\"mobile-list-item\">libvirt-python</li>\n<li class=\"mobile-list-item\">Django 1.11+</li>\n<li class=\"mobile-list-item\">python-pip</li>\n<li class=\"mobile-list-item\">supervisor or systemd</li>\n<li class=\"mobile-list-item\">novnc (for VM console access)</li>\n<h3 id=\"system-access\" class=\"mobile-header\">System Access</h3>\n<li class=\"mobile-list-item\">root or sudo privileges required</li>\n<li class=\"mobile-list-item\">libvirt group membership for web user</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (client only - for accessing WebVirtMgr)</li>\n<li class=\"mobile-list-item\">FreeBSD 13+ (experimental)</li>\n<li class=\"mobile-list-item\">Windows (client only - for accessing WebVirtMgr)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install required packages\nsudo dnf install -y python3 python3-pip git nginx supervisor \\\n    libvirt-daemon-system libvirt-clients python3-libvirt \\\n    libxml2-python3 python3-websockify novnc\n\n# Install development tools for Python packages\nsudo dnf groupinstall -y &quot;Development Tools&quot;\nsudo dnf install -y python3-devel libvirt-devel libxml2-devel \\\n    libxslt-devel mysql-devel\n\n# Clone WebVirtMgr repository\ncd /var/www\nsudo git clone https://github.com/retspen/webvirtmgr.git\ncd webvirtmgr\n\n# Install Python dependencies\nsudo pip3 install -r requirements.txt\nsudo pip3 install gunicorn\n\n# Configure Django\nsudo python3 manage.py syncdb\nsudo python3 manage.py collectstatic\n\n# Create default admin user (follow prompts)\nsudo python3 manage.py createsuperuser\n\n# Set permissions\nsudo chown -R nginx:nginx /var/www/webvirtmgr</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install required packages\nsudo apt install -y python3 python3-pip git nginx supervisor \\\n    libvirt-daemon-system libvirt-clients python3-libvirt \\\n    python3-libxml2 python3-websockify novnc\n\n# Install development packages\nsudo apt install -y build-essential python3-dev libvirt-dev \\\n    libxml2-dev libxslt1-dev zlib1g-dev\n\n# Clone WebVirtMgr repository\ncd /var/www\nsudo git clone https://github.com/retspen/webvirtmgr.git\ncd webvirtmgr\n\n# Install Python dependencies\nsudo pip3 install -r requirements.txt\nsudo pip3 install gunicorn\n\n# Configure Django\nsudo python3 manage.py migrate\nsudo python3 manage.py collectstatic\n\n# Create default admin user\nsudo python3 manage.py createsuperuser\n\n# Set permissions\nsudo chown -R www-data:www-data /var/www/webvirtmgr</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install required packages\nsudo pacman -S python python-pip git nginx supervisor \\\n    libvirt qemu python-libvirt python-lxml novnc\n\n# Install from AUR\nyay -S webvirtmgr\n\n# Or manual installation\ncd /var/www\nsudo git clone https://github.com/retspen/webvirtmgr.git\ncd webvirtmgr\n\n# Install Python dependencies\nsudo pip install -r requirements.txt\nsudo pip install gunicorn\n\n# Configure Django\nsudo python manage.py migrate\nsudo python manage.py collectstatic\nsudo python manage.py createsuperuser\n\n# Set permissions\nsudo chown -R http:http /var/www/webvirtmgr</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install required packages\napk add --no-cache python3 py3-pip git nginx supervisor \\\n    libvirt-daemon py3-libvirt py3-lxml novnc\n\n# Install build dependencies\napk add --no-cache --virtual .build-deps \\\n    python3-dev libvirt-dev libxml2-dev libxslt-dev \\\n    gcc musl-dev linux-headers\n\n# Clone WebVirtMgr\ncd /var/www\ngit clone https://github.com/retspen/webvirtmgr.git\ncd webvirtmgr\n\n# Install Python dependencies\npip3 install -r requirements.txt\npip3 install gunicorn\n\n# Configure Django\npython3 manage.py migrate\npython3 manage.py collectstatic\npython3 manage.py createsuperuser\n\n# Clean up build dependencies\napk del .build-deps\n\n# Set permissions\nchown -R nginx:nginx /var/www/webvirtmgr</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install required packages\nsudo zypper install -y python3 python3-pip git nginx \\\n    libvirt-daemon python3-libvirt python3-lxml novnc\n\n# Install development packages\nsudo zypper install -y python3-devel libvirt-devel \\\n    libxml2-devel libxslt-devel\n\n# Clone WebVirtMgr\ncd /var/www\nsudo git clone https://github.com/retspen/webvirtmgr.git\ncd webvirtmgr\n\n# Install Python dependencies\nsudo pip3 install -r requirements.txt\nsudo pip3 install gunicorn\n\n# Configure Django\nsudo python3 manage.py migrate\nsudo python3 manage.py collectstatic\nsudo python3 manage.py createsuperuser\n\n# Set permissions\nsudo chown -R wwwrun:www /var/www/webvirtmgr</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-configuration\" class=\"mobile-header\">4. Configuration</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/nginx/conf.d/webvirtmgr.conf</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">server {\n    listen 80;\n    server_name webvirtmgr.example.com;\n    \n    access_log /var/log/nginx/webvirtmgr_access.log;\n    error_log /var/log/nginx/webvirtmgr_error.log;\n\n    location /static/ {\n        root /var/www/webvirtmgr;\n        expires 30d;\n    }\n\n    location / {\n        proxy_pass http://127.0.0.1:8000;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_redirect off;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"gunicorn-configuration\" class=\"mobile-header\">Gunicorn Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/supervisor/conf.d/webvirtmgr.conf</code> (Debian/Ubuntu) or <code class=\"mobile-inline-code\">/etc/supervisord.d/webvirtmgr.ini</code> (RHEL):</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[program:webvirtmgr]\ncommand=/usr/local/bin/gunicorn webvirtmgr.wsgi:application -b 0.0.0.0:8000\ndirectory=/var/www/webvirtmgr\nuser=nginx\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/webvirtmgr/gunicorn.log\nstderr_logfile=/var/log/webvirtmgr/gunicorn_error.log\nenvironment=PATH=&quot;/usr/local/bin:/usr/bin&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"console-configuration\" class=\"mobile-header\">Console Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/supervisor/conf.d/webvirtmgr-console.conf</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[program:webvirtmgr-console]\ncommand=/usr/local/bin/python /var/www/webvirtmgr/console/webvirtmgr-console\ndirectory=/var/www/webvirtmgr\nuser=nginx\nautostart=true\nautorestart=true\nstdout_logfile=/var/log/webvirtmgr/console.log\nstderr_logfile=/var/log/webvirtmgr/console_error.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"libvirt-configuration\" class=\"mobile-header\">libvirt Configuration</h3>\n<p class=\"mobile-paragraph\">Configure libvirt for TCP access:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit /etc/libvirt/libvirtd.conf\nsudo sed -i &#039;s/#listen_tls = 0/listen_tls = 0/g&#039; /etc/libvirt/libvirtd.conf\nsudo sed -i &#039;s/#listen_tcp = 1/listen_tcp = 1/g&#039; /etc/libvirt/libvirtd.conf\nsudo sed -i &#039;s/#tcp_port = &quot;16509&quot;/tcp_port = &quot;16509&quot;/g&#039; /etc/libvirt/libvirtd.conf\nsudo sed -i &#039;s/#auth_tcp = &quot;sasl&quot;/auth_tcp = &quot;none&quot;/g&#039; /etc/libvirt/libvirtd.conf\n\n# For systemd-based systems\nsudo systemctl restart libvirtd</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-configuration-optional-mysqlpostgresql\" class=\"mobile-header\">Database Configuration (Optional MySQL/PostgreSQL)</h3>\n<p class=\"mobile-paragraph\">For MySQL:</p>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># In settings.py\nDATABASES = {\n    &#039;default&#039;: {\n        &#039;ENGINE&#039;: &#039;django.db.backends.mysql&#039;,\n        &#039;NAME&#039;: &#039;webvirtmgr&#039;,\n        &#039;USER&#039;: &#039;webvirtmgr&#039;,\n        &#039;PASSWORD&#039;: &#039;your_password&#039;,\n        &#039;HOST&#039;: &#039;localhost&#039;,\n        &#039;PORT&#039;: &#039;3306&#039;,\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-modern-linux-distributions\" class=\"mobile-header\">systemd (Modern Linux distributions)</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/systemd/system/webvirtmgr.service</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[Unit]\nDescription=WebVirtMgr\nAfter=network.target\n\n[Service]\nType=simple\nUser=nginx\nGroup=nginx\nWorkingDirectory=/var/www/webvirtmgr\nEnvironment=&quot;PATH=/usr/local/bin:/usr/bin&quot;\nExecStart=/usr/local/bin/gunicorn webvirtmgr.wsgi:application -b 0.0.0.0:8000\nRestart=on-failure\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/systemd/system/webvirtmgr-console.service</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[Unit]\nDescription=WebVirtMgr Console\nAfter=network.target\n\n[Service]\nType=simple\nUser=nginx\nGroup=nginx\nWorkingDirectory=/var/www/webvirtmgr\nExecStart=/usr/bin/python3 /var/www/webvirtmgr/console/webvirtmgr-console\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Management commands:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable services\nsudo systemctl enable webvirtmgr webvirtmgr-console nginx\n\n# Start services\nsudo systemctl start webvirtmgr webvirtmgr-console nginx\n\n# Check status\nsudo systemctl status webvirtmgr</code></pre>\n      </div>\n    </div>\n<h3 id=\"supervisor-alternative\" class=\"mobile-header\">Supervisor (Alternative)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start supervisor\nsudo systemctl start supervisord\n\n# Reload configuration\nsudo supervisorctl reload\n\n# Check status\nsudo supervisorctl status\n\n# Start/stop services\nsudo supervisorctl start webvirtmgr\nsudo supervisorctl stop webvirtmgr</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Cannot connect to libvirt</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check libvirt service\nsudo systemctl status libvirtd\n\n# Test connection\nvirsh -c qemu:///system list\n\n# Add user to libvirt group\nsudo usermod -a -G libvirt nginx</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Console not working</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check novnc service\nsudo systemctl status webvirtmgr-console\n\n# Check WebSocket proxy\nss -tlnp | grep 6080\n\n# Verify novnc installation\nwhich novnc_server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Permission denied errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Fix ownership\nsudo chown -R nginx:nginx /var/www/webvirtmgr\n\n# Fix SELinux context (RHEL/CentOS)\nsudo semanage fcontext -a -t httpd_sys_content_t &quot;/var/www/webvirtmgr(/.*)?&quot;\nsudo restorecon -Rv /var/www/webvirtmgr</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Database errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Reinitialize database\ncd /var/www/webvirtmgr\nsudo python3 manage.py migrate --run-syncdb</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<p class=\"mobile-paragraph\">Enable debug mode in <code class=\"mobile-inline-code\">settings.py</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">DEBUG = True\nALLOWED_HOSTS = [&#039;*&#039;]</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Check logs:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">tail -f /var/log/nginx/webvirtmgr_error.log\ntail -f /var/log/webvirtmgr/gunicorn_error.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"7-security-considerations\" class=\"mobile-header\">7. Security Considerations</h2>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<p class=\"mobile-paragraph\">Add SSL to nginx configuration:</p>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">server {\n    listen 443 ssl http2;\n    server_name webvirtmgr.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/webvirtmgr.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/webvirtmgr.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers HIGH:!aNULL:!MD5;\n\n    # ... rest of configuration\n}\n\nserver {\n    listen 80;\n    server_name webvirtmgr.example.com;\n    return 301 https://$server_name$request_uri;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-port=6080/tcp  # VNC console\nsudo firewall-cmd --reload\n\n# ufw (Ubuntu/Debian)\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw allow 6080/tcp</code></pre>\n      </div>\n    </div>\n<h3 id=\"authentication-security\" class=\"mobile-header\">Authentication Security</h3>\n<p class=\"mobile-paragraph\">1. <strong>Strong passwords</strong>: Enforce strong password policy</p>\n<p class=\"mobile-paragraph\">2. <strong>Session timeout</strong>: Configure in <code class=\"mobile-inline-code\">settings.py</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">SESSION_COOKIE_AGE = 3600  # 1 hour\nSESSION_SAVE_EVERY_REQUEST = True</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>LDAP/AD Integration</strong> (optional):</p>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Install python-ldap\npip install python-ldap django-auth-ldap\n\n# Configure in settings.py\nimport ldap\nfrom django_auth_ldap.config import LDAPSearch\n\nAUTHENTICATION_BACKENDS = (\n    &#039;django_auth_ldap.backend.LDAPBackend&#039;,\n    &#039;django.contrib.auth.backends.ModelBackend&#039;,\n)\n\nAUTH_LDAP_SERVER_URI = &quot;ldap://ldap.example.com&quot;\nAUTH_LDAP_BIND_DN = &quot;cn=admin,dc=example,dc=com&quot;\nAUTH_LDAP_BIND_PASSWORD = &quot;password&quot;\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\n    &quot;ou=users,dc=example,dc=com&quot;,\n    ldap.SCOPE_SUBTREE,\n    &quot;(uid=%(user)s)&quot;\n)</code></pre>\n      </div>\n    </div>\n<h2 id=\"8-performance-tuning\" class=\"mobile-header\">8. Performance Tuning</h2>\n<h3 id=\"gunicorn-optimization\" class=\"mobile-header\">Gunicorn Optimization</h3>\n<p class=\"mobile-paragraph\">Update gunicorn command for production:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">gunicorn webvirtmgr.wsgi:application \\\n    -b 0.0.0.0:8000 \\\n    --workers 4 \\\n    --timeout 60 \\\n    --log-level info \\\n    --access-logfile /var/log/webvirtmgr/access.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-optimization\" class=\"mobile-header\">nginx Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># In nginx.conf\nworker_processes auto;\nworker_rlimit_nofile 65535;\n\nevents {\n    worker_connections 65535;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    \n    # Compression\n    gzip on;\n    gzip_comp_level 6;\n    gzip_types text/plain text/css text/xml text/javascript \n               application/json application/javascript;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<p class=\"mobile-paragraph\">For MySQL backend:</p>\n<div class=\"mobile-code-block\" data-language=\"sql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">sql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-sql\">-- Optimize tables\nOPTIMIZE TABLE django_session;\nOPTIMIZE TABLE instances_instance;\n\n-- Add indexes\nCREATE INDEX idx_instance_name ON instances_instance(name);\nCREATE INDEX idx_instance_uuid ON instances_instance(uuid);</code></pre>\n      </div>\n    </div>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase file descriptors\necho &quot;* soft nofile 65535&quot; &gt;&gt; /etc/security/limits.conf\necho &quot;* hard nofile 65535&quot; &gt;&gt; /etc/security/limits.conf\n\n# Network tuning\necho &quot;net.core.somaxconn = 65535&quot; &gt;&gt; /etc/sysctl.conf\necho &quot;net.ipv4.tcp_max_syn_backlog = 65535&quot; &gt;&gt; /etc/sysctl.conf\nsysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/usr/local/bin/backup-webvirtmgr.sh</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\nBACKUP_DIR=&quot;/backup/webvirtmgr&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/webvirtmgr_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p $BACKUP_DIR\n\n# Stop services\nsystemctl stop webvirtmgr webvirtmgr-console\n\n# Backup database\ncd /var/www/webvirtmgr\npython3 manage.py dumpdata &gt; $BACKUP_DIR/db_backup_$DATE.json\n\n# Backup files\ntar -czf $BACKUP_FILE \\\n    /var/www/webvirtmgr \\\n    /etc/nginx/conf.d/webvirtmgr.conf \\\n    /etc/systemd/system/webvirtmgr*.service \\\n    $BACKUP_DIR/db_backup_$DATE.json\n\n# Start services\nsystemctl start webvirtmgr webvirtmgr-console\n\n# Remove old backups (keep 7 days)\nfind $BACKUP_DIR -name &quot;*.tar.gz&quot; -mtime +7 -delete\n\necho &quot;Backup completed: $BACKUP_FILE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\nBACKUP_FILE=&quot;$1&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    exit 1\nfi\n\n# Stop services\nsystemctl stop webvirtmgr webvirtmgr-console nginx\n\n# Extract backup\ntar -xzf $BACKUP_FILE -C /\n\n# Find and restore database\nDB_BACKUP=$(tar -tf $BACKUP_FILE | grep &quot;db_backup.*json&quot;)\nif [ -n &quot;$DB_BACKUP&quot; ]; then\n    cd /var/www/webvirtmgr\n    python3 manage.py flush --noinput\n    python3 manage.py loaddata /$DB_BACKUP\nfi\n\n# Fix permissions\nchown -R nginx:nginx /var/www/webvirtmgr\n\n# Start services\nsystemctl start webvirtmgr webvirtmgr-console nginx\n\necho &quot;Restore completed&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"10-system-requirements\" class=\"mobile-header\">10. System Requirements</h2>\n<h3 id=\"minimum-requirements\" class=\"mobile-header\">Minimum Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 2 cores</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 2GB</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 20GB</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: 100Mbps</li>\n<h3 id=\"recommended-requirements\" class=\"mobile-header\">Recommended Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 4+ cores</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 4GB+</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 50GB+ SSD</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: 1Gbps</li>\n<h3 id=\"scaling-considerations\" class=\"mobile-header\">Scaling Considerations</h3>\n<p class=\"mobile-paragraph\">For managing 50+ VMs:</p>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 8+ cores</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 8GB+</li>\n<li class=\"mobile-list-item\"><strong>Database</strong>: External MySQL/PostgreSQL</li>\n<li class=\"mobile-list-item\"><strong>Load Balancer</strong>: HAProxy/nginx for multiple WebVirtMgr instances</li>\n<h2 id=\"11-support\" class=\"mobile-header\">11. Support</h2>\n<h3 id=\"official-resources\" class=\"mobile-header\">Official Resources</h3>\n<li class=\"mobile-list-item\"><strong>GitHub Repository</strong>: https://github.com/retspen/webvirtmgr</li>\n<li class=\"mobile-list-item\"><strong>Wiki</strong>: https://github.com/retspen/webvirtmgr/wiki</li>\n<li class=\"mobile-list-item\"><strong>Issues</strong>: https://github.com/retspen/webvirtmgr/issues</li>\n<h3 id=\"community-support\" class=\"mobile-header\">Community Support</h3>\n<li class=\"mobile-list-item\"><strong>IRC</strong>: #webvirtmgr on Libera.Chat</li>\n<li class=\"mobile-list-item\"><strong>Forums</strong>: Various Linux distribution forums</li>\n<li class=\"mobile-list-item\"><strong>Stack Overflow</strong>: Tag <code class=\"mobile-inline-code\">webvirtmgr</code></li>\n<h3 id=\"professional-support\" class=\"mobile-header\">Professional Support</h3>\n<li class=\"mobile-list-item\">Community-driven project</li>\n<li class=\"mobile-list-item\">Commercial alternatives: oVirt, Proxmox VE</li>\n<h2 id=\"12-contributing\" class=\"mobile-header\">12. Contributing</h2>\n<h3 id=\"how-to-contribute\" class=\"mobile-header\">How to Contribute</h3>\n<p class=\"mobile-paragraph\">1. Fork the repository</p>\n<p class=\"mobile-paragraph\">2. Create a feature branch</p>\n<p class=\"mobile-paragraph\">3. Commit your changes</p>\n<p class=\"mobile-paragraph\">4. Push to the branch</p>\n<p class=\"mobile-paragraph\">5. Create a Pull Request</p>\n<h3 id=\"development-setup\" class=\"mobile-header\">Development Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clone repository\ngit clone https://github.com/yourusername/webvirtmgr.git\ncd webvirtmgr\n\n# Create virtual environment\npython3 -m venv venv\nsource venv/bin/activate\n\n# Install dependencies\npip install -r requirements-dev.txt\n\n# Run development server\npython manage.py runserver 0.0.0.0:8000</code></pre>\n      </div>\n    </div>\n<h2 id=\"13-license\" class=\"mobile-header\">13. License</h2>\n<p class=\"mobile-paragraph\">WebVirtMgr is licensed under the Apache License 2.0. See LICENSE file for details.</p>\n<p class=\"mobile-paragraph\">Key points:</p>\n<li class=\"mobile-list-item\">Free for commercial use</li>\n<li class=\"mobile-list-item\">Modification allowed</li>\n<li class=\"mobile-list-item\">Distribution allowed</li>\n<li class=\"mobile-list-item\">Patent grant included</li>\n<li class=\"mobile-list-item\">No warranty provided</li>\n<h2 id=\"14-acknowledgments\" class=\"mobile-header\">14. Acknowledgments</h2>\n<h3 id=\"project-credits\" class=\"mobile-header\">Project Credits</h3>\n<li class=\"mobile-list-item\"><strong>Anatoliy Guskov</strong>: Original creator and maintainer</li>\n<li class=\"mobile-list-item\"><strong>Contributors</strong>: See GitHub contributors page</li>\n<li class=\"mobile-list-item\"><strong>libvirt Project</strong>: For the virtualization API</li>\n<li class=\"mobile-list-item\"><strong>Django Project</strong>: Web framework</li>\n<li class=\"mobile-list-item\"><strong>noVNC Project</strong>: HTML5 VNC client</li>\n<h3 id=\"special-thanks\" class=\"mobile-header\">Special Thanks</h3>\n<li class=\"mobile-list-item\">KVM/QEMU development team</li>\n<li class=\"mobile-list-item\">Python community</li>\n<li class=\"mobile-list-item\">Open source virtualization community</li>\n<h2 id=\"15-version-history\" class=\"mobile-header\">15. Version History</h2>\n<h3 id=\"current-version\" class=\"mobile-header\">Current Version</h3>\n<li class=\"mobile-list-item\"><strong>Latest Stable</strong>: Check GitHub releases</li>\n<li class=\"mobile-list-item\"><strong>Development</strong>: master branch</li>\n<h3 id=\"major-releases\" class=\"mobile-header\">Major Releases</h3>\n<li class=\"mobile-list-item\"><strong>v4.8.9</strong>: Latest stable release</li>\n<li class=\"mobile-list-item\"><strong>v4.x</strong>: Django 1.11 support</li>\n<li class=\"mobile-list-item\"><strong>v3.x</strong>: Python 3 support</li>\n<li class=\"mobile-list-item\"><strong>v2.x</strong>: Initial stable releases</li>\n<h3 id=\"upgrade-path\" class=\"mobile-header\">Upgrade Path</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup before upgrade\n/usr/local/bin/backup-webvirtmgr.sh\n\n# Pull latest code\ncd /var/www/webvirtmgr\ngit pull origin master\n\n# Update dependencies\npip3 install -r requirements.txt --upgrade\n\n# Run migrations\npython3 manage.py migrate\n\n# Restart services\nsystemctl restart webvirtmgr webvirtmgr-console</code></pre>\n      </div>\n    </div>\n<h2 id=\"16-appendices\" class=\"mobile-header\">16. Appendices</h2>\n<h3 id=\"a-port-reference\" class=\"mobile-header\">A. Port Reference</h3>\n<p class=\"mobile-paragraph\">| Port | Service | Description |</p>\n<p class=\"mobile-paragraph\">|------|---------|-------------|</p>\n<p class=\"mobile-paragraph\">| 80/443 | nginx | Web interface |</p>\n<p class=\"mobile-paragraph\">| 8000 | Gunicorn | Application server |</p>\n<p class=\"mobile-paragraph\">| 6080 | NoVNC | VNC console proxy |</p>\n<p class=\"mobile-paragraph\">| 16509 | libvirt | libvirt TCP connection |</p>\n<p class=\"mobile-paragraph\">| 5900-5999 | VNC | VM console connections |</p>\n<h3 id=\"b-file-locations\" class=\"mobile-header\">B. File Locations</h3>\n<p class=\"mobile-paragraph\">| File/Directory | Purpose |</p>\n<p class=\"mobile-paragraph\">|---------------|---------|</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/var/www/webvirtmgr/</code> | Application root |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/etc/nginx/conf.d/webvirtmgr.conf</code> | nginx configuration |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/var/log/webvirtmgr/</code> | Application logs |</p>\n<p class=\"mobile-paragraph\">| <code class=\"mobile-inline-code\">/var/lib/webvirtmgr/</code> | Data directory |</p>\n<h3 id=\"c-common-commands\" class=\"mobile-header\">C. Common Commands</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check VM list via CLI\nvirsh list --all\n\n# Restart all services\nsystemctl restart webvirtmgr webvirtmgr-console nginx libvirtd\n\n# Django admin shell\ncd /var/www/webvirtmgr\npython3 manage.py shell\n\n# Create new user\npython3 manage.py createsuperuser\n\n# Collect static files after update\npython3 manage.py collectstatic --noinput</code></pre>\n      </div>\n    </div>\n<h3 id=\"d-integration-examples\" class=\"mobile-header\">D. Integration Examples</h3>\n<p class=\"mobile-paragraph\"><strong>API Usage Example</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">import requests\n\n# Login\nsession = requests.Session()\nlogin_data = {&#039;username&#039;: &#039;admin&#039;, &#039;password&#039;: &#039;password&#039;}\nsession.post(&#039;http://webvirtmgr.example.com/login/&#039;, data=login_data)\n\n# Get instance list\nresponse = session.get(&#039;http://webvirtmgr.example.com/instances/&#039;)\ninstances = response.json()</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\">For more detailed information and updates, visit https://github.com/howtomgr/webvirt</p>","readTime":"11 min","wordCount":2156,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":3,"text":"Hardware Requirements","id":"hardware-requirements"},{"level":3,"text":"Software Requirements","id":"software-requirements"},{"level":3,"text":"Dependencies","id":"dependencies"},{"level":3,"text":"System Access","id":"system-access"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":2,"text":"4. Configuration","id":"4-configuration"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Gunicorn Configuration","id":"gunicorn-configuration"},{"level":3,"text":"Console Configuration","id":"console-configuration"},{"level":3,"text":"libvirt Configuration","id":"libvirt-configuration"},{"level":3,"text":"Database Configuration (Optional MySQL/PostgreSQL)","id":"database-configuration-optional-mysqlpostgresql"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (Modern Linux distributions)","id":"systemd-modern-linux-distributions"},{"level":3,"text":"Supervisor (Alternative)","id":"supervisor-alternative"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"7. Security Considerations","id":"7-security-considerations"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":3,"text":"Firewall Configuration","id":"firewall-configuration"},{"level":3,"text":"Authentication Security","id":"authentication-security"},{"level":2,"text":"8. Performance Tuning","id":"8-performance-tuning"},{"level":3,"text":"Gunicorn Optimization","id":"gunicorn-optimization"},{"level":3,"text":"nginx Optimization","id":"nginx-optimization"},{"level":3,"text":"Database Optimization","id":"database-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"10. System Requirements","id":"10-system-requirements"},{"level":3,"text":"Minimum Requirements","id":"minimum-requirements"},{"level":3,"text":"Recommended Requirements","id":"recommended-requirements"},{"level":3,"text":"Scaling Considerations","id":"scaling-considerations"},{"level":2,"text":"11. Support","id":"11-support"},{"level":3,"text":"Official Resources","id":"official-resources"},{"level":3,"text":"Community Support","id":"community-support"},{"level":3,"text":"Professional Support","id":"professional-support"},{"level":2,"text":"12. Contributing","id":"12-contributing"},{"level":3,"text":"How to Contribute","id":"how-to-contribute"},{"level":3,"text":"Development Setup","id":"development-setup"},{"level":2,"text":"13. License","id":"13-license"},{"level":2,"text":"14. Acknowledgments","id":"14-acknowledgments"},{"level":3,"text":"Project Credits","id":"project-credits"},{"level":3,"text":"Special Thanks","id":"special-thanks"},{"level":2,"text":"15. Version History","id":"15-version-history"},{"level":3,"text":"Current Version","id":"current-version"},{"level":3,"text":"Major Releases","id":"major-releases"},{"level":3,"text":"Upgrade Path","id":"upgrade-path"},{"level":2,"text":"16. Appendices","id":"16-appendices"},{"level":3,"text":"A. Port Reference","id":"a-port-reference"},{"level":3,"text":"B. File Locations","id":"b-file-locations"},{"level":3,"text":"C. Common Commands","id":"c-common-commands"},{"level":3,"text":"D. Integration Examples","id":"d-integration-examples"}],"lastBuilt":"2025-10-21T18:14:40.347Z","metadataVersion":"2.0"}]},"__N_SSG":true}