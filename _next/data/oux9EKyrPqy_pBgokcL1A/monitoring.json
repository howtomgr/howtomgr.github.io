{"pageProps":{"category":{"key":"monitoring","name":"Monitoring","description":"Observability and monitoring solutions","icon":"ðŸ“Š","color":"#ffb86c","keywords":["prometheus","grafana","loki","jaeger","nagios","zabbix"]},"guides":[{"name":"blackbox-exporter","displayName":"Blackbox Exporter Installation Guide","slug":"blackbox-exporter","description":"Blackbox Exporter is a Prometheus exporter that allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC. It's essential for monitoring external services and endpoints from a user perspective.","category":"monitoring","subcategory":"monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["arch"],"defaultPorts":[5432,5672,6379,8080,9115],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["monitoring","containerization","observability","data-storage","security","networking"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/monitoring/blackbox-exporter","documentationUrl":"https://howtomgr.github.io/monitoring/blackbox-exporter","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/blackbox-exporter","updatedAt":"2025-09-16T02:59:10Z","createdAt":"2025-09-16T02:22:27Z","readmeRaw":"# Blackbox Exporter Installation Guide\n\nBlackbox Exporter is a Prometheus exporter that allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC. It's essential for monitoring external services and endpoints from a user perspective.\n\n## Prerequisites\n\n- Linux-based operating system\n- Prometheus server installed and configured\n- Basic understanding of Prometheus and monitoring concepts\n- Network access to targets you want to probe\n- For systemd service: systemd-based Linux distribution\n\n## Installation\n\n### Binary Installation\n\n1. **Download the latest release**:\n```bash\n# Check latest version at https://github.com/prometheus/blackbox_exporter/releases\nVERSION=\"0.24.0\"\nARCH=\"linux-amd64\"\n\n# Download binary\nwget https://github.com/prometheus/blackbox_exporter/releases/download/v${VERSION}/blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Extract archive\ntar xvfz blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Move binary to system path\nsudo mv blackbox_exporter-${VERSION}.${ARCH}/blackbox_exporter /usr/local/bin/\nsudo chown root:root /usr/local/bin/blackbox_exporter\nsudo chmod +x /usr/local/bin/blackbox_exporter\n```\n\n2. **Create user and directories**:\n```bash\n# Create system user\nsudo useradd --no-create-home --shell /bin/false blackbox_exporter\n\n# Create config directory\nsudo mkdir -p /etc/blackbox_exporter\nsudo chown blackbox_exporter:blackbox_exporter /etc/blackbox_exporter\n```\n\n### Docker Installation\n\n```bash\n# Run with Docker\ndocker run -d \\\n  --name blackbox_exporter \\\n  -p 9115:9115 \\\n  -v /path/to/blackbox.yml:/config/blackbox.yml \\\n  prom/blackbox-exporter:latest \\\n  --config.file=/config/blackbox.yml\n```\n\n### Package Manager Installation\n\n**Ubuntu/Debian**:\n```bash\n# Not available in default repos, use binary installation\n```\n\n**RHEL/CentOS/Fedora**:\n```bash\n# Not available in default repos, use binary installation\n```\n\n**Arch Linux**:\n```bash\nsudo pacman -S prometheus-blackbox-exporter\n```\n\n## Configuration\n\n### Basic Configuration\n\nCreate `/etc/blackbox_exporter/blackbox.yml`:\n```yaml\nmodules:\n  # HTTP/HTTPS probe\n  http_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      preferred_ip_protocol: \"ip4\"\n      ip_protocol_fallback: false\n      valid_http_versions: [\"HTTP/1.1\", \"HTTP/2.0\"]\n      valid_status_codes: []  # Defaults to 2xx\n      method: GET\n      follow_redirects: true\n      fail_if_ssl: false\n      fail_if_not_ssl: false\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTPS with specific status codes\n  http_post_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      method: POST\n      headers:\n        Content-Type: application/json\n      body: '{\"test\": \"data\"}'\n      valid_status_codes: [200, 201, 202]\n\n  # TCP probe\n  tcp_connect:\n    prober: tcp\n    timeout: 5s\n\n  # ICMP ping probe\n  icmp:\n    prober: icmp\n    timeout: 5s\n    icmp:\n      preferred_ip_protocol: \"ip4\"\n\n  # DNS probe\n  dns_udp:\n    prober: dns\n    timeout: 5s\n    dns:\n      preferred_ip_protocol: \"ip4\"\n      query_name: \"www.example.com\"\n      query_type: \"A\"\n      valid_rcodes:\n        - NOERROR\n\n  # SSL certificate check\n  http_ssl_cert:\n    prober: http\n    timeout: 5s\n    http:\n      method: GET\n      fail_if_ssl: false\n      fail_if_not_ssl: true\n      tls_config:\n        insecure_skip_verify: false\n```\n\n### Advanced Modules\n\n```yaml\nmodules:\n  # HTTP with authentication\n  http_basic_auth:\n    prober: http\n    timeout: 5s\n    http:\n      basic_auth:\n        username: \"monitoring\"\n        password: \"secure_password\"\n      valid_status_codes: [200]\n\n  # HTTP with custom headers\n  http_custom_headers:\n    prober: http\n    timeout: 5s\n    http:\n      headers:\n        X-API-Key: \"your-api-key\"\n        Accept: \"application/json\"\n\n  # gRPC probe\n  grpc:\n    prober: grpc\n    timeout: 5s\n    grpc:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # TCP with TLS\n  tcp_tls:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTP with regex matching\n  http_content_match:\n    prober: http\n    timeout: 5s\n    http:\n      valid_status_codes: [200]\n      fail_if_body_not_matches_regexp:\n        - \"Welcome.*\"\n      fail_if_body_matches_regexp:\n        - \"Error.*\"\n\n  # Slow HTTP probe\n  http_slow:\n    prober: http\n    timeout: 30s\n    http:\n      method: GET\n```\n\n### Systemd Service\n\nCreate `/etc/systemd/system/blackbox_exporter.service`:\n```ini\n[Unit]\nDescription=Blackbox Exporter\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=blackbox_exporter\nGroup=blackbox_exporter\nExecStart=/usr/local/bin/blackbox_exporter \\\n  --config.file=/etc/blackbox_exporter/blackbox.yml \\\n  --web.listen-address=:9115\n\nRestart=on-failure\nRestartSec=5s\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/etc/blackbox_exporter\n\n# Required for ICMP probes\nAmbientCapabilities=CAP_NET_RAW\nCapabilityBoundingSet=CAP_NET_RAW\n\n[Install]\nWantedBy=multi-user.target\n```\n\nStart the service:\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable blackbox_exporter\nsudo systemctl start blackbox_exporter\nsudo systemctl status blackbox_exporter\n```\n\n## Prometheus Configuration\n\n### Configure Prometheus Scrape Jobs\n\nAdd to `prometheus.yml`:\n```yaml\nscrape_configs:\n  # Blackbox exporter itself\n  - job_name: 'blackbox'\n    static_configs:\n      - targets: ['localhost:9115']\n\n  # HTTP/HTTPS monitoring\n  - job_name: 'blackbox-http'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://api.example.com/health\n        - http://internal-service:8080\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # TCP port monitoring\n  - job_name: 'blackbox-tcp'\n    metrics_path: /probe\n    params:\n      module: [tcp_connect]\n    static_configs:\n      - targets:\n        - database.example.com:5432\n        - cache.example.com:6379\n        - message-broker.example.com:5672\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # ICMP ping monitoring\n  - job_name: 'blackbox-icmp'\n    metrics_path: /probe\n    params:\n      module: [icmp]\n    static_configs:\n      - targets:\n        - gateway.example.com\n        - dns1.example.com\n        - dns2.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # SSL certificate monitoring\n  - job_name: 'blackbox-ssl'\n    metrics_path: /probe\n    params:\n      module: [http_ssl_cert]\n    static_configs:\n      - targets:\n        - https://secure.example.com\n        - https://api.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n```\n\n### File-based Service Discovery\n\n```yaml\nscrape_configs:\n  - job_name: 'blackbox-http-file-sd'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    file_sd_configs:\n      - files:\n        - '/etc/prometheus/blackbox-targets/*.yml'\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n```\n\nTarget file `/etc/prometheus/blackbox-targets/web.yml`:\n```yaml\n- targets:\n  - https://app1.example.com\n  - https://app2.example.com\n  labels:\n    service: web\n    env: production\n\n- targets:\n  - https://staging.example.com\n  labels:\n    service: web\n    env: staging\n```\n\n## Alert Rules\n\nCreate `/etc/prometheus/alerts/blackbox.yml`:\n```yaml\ngroups:\n  - name: blackbox\n    rules:\n      # Website down\n      - alert: WebsiteDown\n        expr: probe_success{job=\"blackbox-http\"} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Website down (instance {{ $labels.instance }})\"\n          description: \"Website {{ $labels.instance }} has been down for more than 5 minutes.\"\n\n      # SSL certificate expiry\n      - alert: SSLCertificateExpiringSoon\n        expr: probe_ssl_earliest_cert_expiry - time() < 86400 * 30\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"SSL certificate expiring soon (instance {{ $labels.instance }})\"\n          description: \"SSL certificate for {{ $labels.instance }} expires in less than 30 days.\"\n\n      - alert: SSLCertificateExpired\n        expr: probe_ssl_earliest_cert_expiry - time() < 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"SSL certificate expired (instance {{ $labels.instance }})\"\n          description: \"SSL certificate for {{ $labels.instance }} has expired.\"\n\n      # Slow response time\n      - alert: SlowResponseTime\n        expr: probe_http_duration_seconds{job=\"blackbox-http\"} > 2\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Slow HTTP response (instance {{ $labels.instance }})\"\n          description: \"HTTP response time for {{ $labels.instance }} is {{ $value }}s (> 2s).\"\n\n      # TCP port down\n      - alert: TCPPortDown\n        expr: probe_success{job=\"blackbox-tcp\"} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"TCP port down (instance {{ $labels.instance }})\"\n          description: \"TCP port {{ $labels.instance }} has been down for more than 5 minutes.\"\n\n      # High packet loss\n      - alert: HighPacketLoss\n        expr: (1 - avg_over_time(probe_success{job=\"blackbox-icmp\"}[5m])) > 0.1\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High packet loss (instance {{ $labels.instance }})\"\n          description: \"Packet loss for {{ $labels.instance }} is {{ $value | humanizePercentage }}.\"\n```\n\n## Grafana Dashboard\n\nImport dashboard JSON or create custom dashboard with these queries:\n\n```promql\n# Probe success rate\nrate(probe_success{job=~\"blackbox-.*\"}[5m])\n\n# HTTP response time\nprobe_http_duration_seconds{job=\"blackbox-http\"}\n\n# SSL certificate days until expiry\n(probe_ssl_earliest_cert_expiry - time()) / 86400\n\n# DNS lookup time\nprobe_dns_lookup_time_seconds\n\n# TCP connection time\nprobe_tcp_duration_seconds\n\n# Uptime percentage (last 24h)\navg_over_time(probe_success{job=\"blackbox-http\"}[24h]) * 100\n\n# Status code distribution\nsum by (status_code) (probe_http_status_code)\n```\n\n## Security Considerations\n\n### Network Security\n\n```bash\n# Firewall rules\nsudo ufw allow from prometheus_server_ip to any port 9115\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 9115 -s prometheus_server_ip -j ACCEPT\n```\n\n### Authentication\n\nEnable basic auth in blackbox exporter:\n```bash\n# Generate password hash\nhtpasswd -nBC 10 \"\" | tr -d ':\\n'\n\n# Add to blackbox_exporter command\n--web.config=/etc/blackbox_exporter/web.yml\n```\n\nCreate `/etc/blackbox_exporter/web.yml`:\n```yaml\nbasic_auth_users:\n  prometheus: $2b$10$...  # bcrypt hash\n```\n\n### TLS Configuration\n\n```yaml\ntls_server_config:\n  cert_file: /etc/blackbox_exporter/server.crt\n  key_file: /etc/blackbox_exporter/server.key\n```\n\n## Troubleshooting\n\n### Testing Probes\n\n```bash\n# Test HTTP probe\ncurl \"http://localhost:9115/probe?target=https://example.com&module=http_2xx\"\n\n# Test with debug\ncurl \"http://localhost:9115/probe?target=https://example.com&module=http_2xx&debug=true\"\n\n# Check metrics\ncurl http://localhost:9115/metrics\n```\n\n### Common Issues\n\n1. **ICMP permission denied**:\n```bash\n# Set capability\nsudo setcap cap_net_raw+ep /usr/local/bin/blackbox_exporter\n\n# Or run as root (not recommended)\n```\n\n2. **Connection refused**:\n```bash\n# Check service status\nsudo systemctl status blackbox_exporter\n\n# Check logs\nsudo journalctl -u blackbox_exporter -f\n\n# Verify listening port\nsudo netstat -tlnp | grep 9115\n```\n\n3. **SSL verification failures**:\n```yaml\n# Temporarily disable verification (testing only)\ntls_config:\n  insecure_skip_verify: true\n```\n\n## Performance Tuning\n\n### Concurrent Probes\n\n```bash\n# Increase concurrent probes\n--web.max-requests=100\n```\n\n### Timeout Optimization\n\n```yaml\n# Adjust timeouts based on network conditions\nmodules:\n  http_fast:\n    prober: http\n    timeout: 2s\n  http_slow:\n    prober: http\n    timeout: 30s\n```\n\n### Resource Limits\n\n```ini\n# In systemd service file\n[Service]\nLimitNOFILE=65535\nMemoryLimit=256M\nCPUQuota=50%\n```\n\n## Monitoring Best Practices\n\n1. **Probe frequency**: Balance between detection speed and load\n2. **Timeout values**: Set slightly below scrape interval\n3. **Module reuse**: Create specific modules for different use cases\n4. **Geographic distribution**: Deploy multiple blackbox exporters\n5. **Internal vs external**: Separate probes for internal/external services\n\n## Additional Resources\n\n- [Official Documentation](https://github.com/prometheus/blackbox_exporter)\n- [Configuration Examples](https://github.com/prometheus/blackbox_exporter/blob/master/example.yml)\n- [Prometheus Documentation](https://prometheus.io/docs/)\n- [Grafana Dashboards](https://grafana.com/grafana/dashboards?search=blackbox)\n- [Community Forum](https://groups.google.com/forum/#!forum/prometheus-users)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"blackbox-exporter-installation-guide\" class=\"mobile-header\">Blackbox Exporter Installation Guide</h1>\n<p class=\"mobile-paragraph\">Blackbox Exporter is a Prometheus exporter that allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC. It's essential for monitoring external services and endpoints from a user perspective.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux-based operating system</li>\n<li class=\"mobile-list-item\">Prometheus server installed and configured</li>\n<li class=\"mobile-list-item\">Basic understanding of Prometheus and monitoring concepts</li>\n<li class=\"mobile-list-item\">Network access to targets you want to probe</li>\n<li class=\"mobile-list-item\">For systemd service: systemd-based Linux distribution</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"binary-installation\" class=\"mobile-header\">Binary Installation</h3>\n<p class=\"mobile-paragraph\">1. <strong>Download the latest release</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check latest version at https://github.com/prometheus/blackbox_exporter/releases\nVERSION=&quot;0.24.0&quot;\nARCH=&quot;linux-amd64&quot;\n\n# Download binary\nwget https://github.com/prometheus/blackbox_exporter/releases/download/v${VERSION}/blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Extract archive\ntar xvfz blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Move binary to system path\nsudo mv blackbox_exporter-${VERSION}.${ARCH}/blackbox_exporter /usr/local/bin/\nsudo chown root:root /usr/local/bin/blackbox_exporter\nsudo chmod +x /usr/local/bin/blackbox_exporter</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Create user and directories</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create system user\nsudo useradd --no-create-home --shell /bin/false blackbox_exporter\n\n# Create config directory\nsudo mkdir -p /etc/blackbox_exporter\nsudo chown blackbox_exporter:blackbox_exporter /etc/blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run with Docker\ndocker run -d \\\n  --name blackbox_exporter \\\n  -p 9115:9115 \\\n  -v /path/to/blackbox.yml:/config/blackbox.yml \\\n  prom/blackbox-exporter:latest \\\n  --config.file=/config/blackbox.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"package-manager-installation\" class=\"mobile-header\">Package Manager Installation</h3>\n<p class=\"mobile-paragraph\"><strong>Ubuntu/Debian</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Not available in default repos, use binary installation</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>RHEL/CentOS/Fedora</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Not available in default repos, use binary installation</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>Arch Linux</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo pacman -S prometheus-blackbox-exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/blackbox_exporter/blackbox.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">modules:\n  # HTTP/HTTPS probe\n  http_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      preferred_ip_protocol: &quot;ip4&quot;\n      ip_protocol_fallback: false\n      valid_http_versions: [&quot;HTTP/1.1&quot;, &quot;HTTP/2.0&quot;]\n      valid_status_codes: []  # Defaults to 2xx\n      method: GET\n      follow_redirects: true\n      fail_if_ssl: false\n      fail_if_not_ssl: false\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTPS with specific status codes\n  http_post_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      method: POST\n      headers:\n        Content-Type: application/json\n      body: &#039;{&quot;test&quot;: &quot;data&quot;}&#039;\n      valid_status_codes: [200, 201, 202]\n\n  # TCP probe\n  tcp_connect:\n    prober: tcp\n    timeout: 5s\n\n  # ICMP ping probe\n  icmp:\n    prober: icmp\n    timeout: 5s\n    icmp:\n      preferred_ip_protocol: &quot;ip4&quot;\n\n  # DNS probe\n  dns_udp:\n    prober: dns\n    timeout: 5s\n    dns:\n      preferred_ip_protocol: &quot;ip4&quot;\n      query_name: &quot;www.example.com&quot;\n      query_type: &quot;A&quot;\n      valid_rcodes:\n        - NOERROR\n\n  # SSL certificate check\n  http_ssl_cert:\n    prober: http\n    timeout: 5s\n    http:\n      method: GET\n      fail_if_ssl: false\n      fail_if_not_ssl: true\n      tls_config:\n        insecure_skip_verify: false</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-modules\" class=\"mobile-header\">Advanced Modules</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">modules:\n  # HTTP with authentication\n  http_basic_auth:\n    prober: http\n    timeout: 5s\n    http:\n      basic_auth:\n        username: &quot;monitoring&quot;\n        password: &quot;secure_password&quot;\n      valid_status_codes: [200]\n\n  # HTTP with custom headers\n  http_custom_headers:\n    prober: http\n    timeout: 5s\n    http:\n      headers:\n        X-API-Key: &quot;your-api-key&quot;\n        Accept: &quot;application/json&quot;\n\n  # gRPC probe\n  grpc:\n    prober: grpc\n    timeout: 5s\n    grpc:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # TCP with TLS\n  tcp_tls:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTP with regex matching\n  http_content_match:\n    prober: http\n    timeout: 5s\n    http:\n      valid_status_codes: [200]\n      fail_if_body_not_matches_regexp:\n        - &quot;Welcome.*&quot;\n      fail_if_body_matches_regexp:\n        - &quot;Error.*&quot;\n\n  # Slow HTTP probe\n  http_slow:\n    prober: http\n    timeout: 30s\n    http:\n      method: GET</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service\" class=\"mobile-header\">Systemd Service</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/systemd/system/blackbox_exporter.service</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[Unit]\nDescription=Blackbox Exporter\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=blackbox_exporter\nGroup=blackbox_exporter\nExecStart=/usr/local/bin/blackbox_exporter \\\n  --config.file=/etc/blackbox_exporter/blackbox.yml \\\n  --web.listen-address=:9115\n\nRestart=on-failure\nRestartSec=5s\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/etc/blackbox_exporter\n\n# Required for ICMP probes\nAmbientCapabilities=CAP_NET_RAW\nCapabilityBoundingSet=CAP_NET_RAW\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Start the service:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo systemctl daemon-reload\nsudo systemctl enable blackbox_exporter\nsudo systemctl start blackbox_exporter\nsudo systemctl status blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"prometheus-configuration\" class=\"mobile-header\">Prometheus Configuration</h2>\n<h3 id=\"configure-prometheus-scrape-jobs\" class=\"mobile-header\">Configure Prometheus Scrape Jobs</h3>\n<p class=\"mobile-paragraph\">Add to <code class=\"mobile-inline-code\">prometheus.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">scrape_configs:\n  # Blackbox exporter itself\n  - job_name: &#039;blackbox&#039;\n    static_configs:\n      - targets: [&#039;localhost:9115&#039;]\n\n  # HTTP/HTTPS monitoring\n  - job_name: &#039;blackbox-http&#039;\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://api.example.com/health\n        - http://internal-service:8080\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # TCP port monitoring\n  - job_name: &#039;blackbox-tcp&#039;\n    metrics_path: /probe\n    params:\n      module: [tcp_connect]\n    static_configs:\n      - targets:\n        - database.example.com:5432\n        - cache.example.com:6379\n        - message-broker.example.com:5672\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # ICMP ping monitoring\n  - job_name: &#039;blackbox-icmp&#039;\n    metrics_path: /probe\n    params:\n      module: [icmp]\n    static_configs:\n      - targets:\n        - gateway.example.com\n        - dns1.example.com\n        - dns2.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # SSL certificate monitoring\n  - job_name: &#039;blackbox-ssl&#039;\n    metrics_path: /probe\n    params:\n      module: [http_ssl_cert]\n    static_configs:\n      - targets:\n        - https://secure.example.com\n        - https://api.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115</code></pre>\n      </div>\n    </div>\n<h3 id=\"file-based-service-discovery\" class=\"mobile-header\">File-based Service Discovery</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">scrape_configs:\n  - job_name: &#039;blackbox-http-file-sd&#039;\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    file_sd_configs:\n      - files:\n        - &#039;/etc/prometheus/blackbox-targets/*.yml&#039;\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Target file <code class=\"mobile-inline-code\">/etc/prometheus/blackbox-targets/web.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">- targets:\n  - https://app1.example.com\n  - https://app2.example.com\n  labels:\n    service: web\n    env: production\n\n- targets:\n  - https://staging.example.com\n  labels:\n    service: web\n    env: staging</code></pre>\n      </div>\n    </div>\n<h2 id=\"alert-rules\" class=\"mobile-header\">Alert Rules</h2>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/prometheus/alerts/blackbox.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">groups:\n  - name: blackbox\n    rules:\n      # Website down\n      - alert: WebsiteDown\n        expr: probe_success{job=&quot;blackbox-http&quot;} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;Website down (instance {{ $labels.instance }})&quot;\n          description: &quot;Website {{ $labels.instance }} has been down for more than 5 minutes.&quot;\n\n      # SSL certificate expiry\n      - alert: SSLCertificateExpiringSoon\n        expr: probe_ssl_earliest_cert_expiry - time() &lt; 86400 * 30\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;SSL certificate expiring soon (instance {{ $labels.instance }})&quot;\n          description: &quot;SSL certificate for {{ $labels.instance }} expires in less than 30 days.&quot;\n\n      - alert: SSLCertificateExpired\n        expr: probe_ssl_earliest_cert_expiry - time() &lt; 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;SSL certificate expired (instance {{ $labels.instance }})&quot;\n          description: &quot;SSL certificate for {{ $labels.instance }} has expired.&quot;\n\n      # Slow response time\n      - alert: SlowResponseTime\n        expr: probe_http_duration_seconds{job=&quot;blackbox-http&quot;} &gt; 2\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;Slow HTTP response (instance {{ $labels.instance }})&quot;\n          description: &quot;HTTP response time for {{ $labels.instance }} is {{ $value }}s (&gt; 2s).&quot;\n\n      # TCP port down\n      - alert: TCPPortDown\n        expr: probe_success{job=&quot;blackbox-tcp&quot;} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;TCP port down (instance {{ $labels.instance }})&quot;\n          description: &quot;TCP port {{ $labels.instance }} has been down for more than 5 minutes.&quot;\n\n      # High packet loss\n      - alert: HighPacketLoss\n        expr: (1 - avg_over_time(probe_success{job=&quot;blackbox-icmp&quot;}[5m])) &gt; 0.1\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;High packet loss (instance {{ $labels.instance }})&quot;\n          description: &quot;Packet loss for {{ $labels.instance }} is {{ $value | humanizePercentage }}.&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"grafana-dashboard\" class=\"mobile-header\">Grafana Dashboard</h2>\n<p class=\"mobile-paragraph\">Import dashboard JSON or create custom dashboard with these queries:</p>\n<div class=\"mobile-code-block\" data-language=\"promql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">promql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-promql\"># Probe success rate\nrate(probe_success{job=~&quot;blackbox-.*&quot;}[5m])\n\n# HTTP response time\nprobe_http_duration_seconds{job=&quot;blackbox-http&quot;}\n\n# SSL certificate days until expiry\n(probe_ssl_earliest_cert_expiry - time()) / 86400\n\n# DNS lookup time\nprobe_dns_lookup_time_seconds\n\n# TCP connection time\nprobe_tcp_duration_seconds\n\n# Uptime percentage (last 24h)\navg_over_time(probe_success{job=&quot;blackbox-http&quot;}[24h]) * 100\n\n# Status code distribution\nsum by (status_code) (probe_http_status_code)</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-considerations\" class=\"mobile-header\">Security Considerations</h2>\n<h3 id=\"network-security\" class=\"mobile-header\">Network Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Firewall rules\nsudo ufw allow from prometheus_server_ip to any port 9115\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 9115 -s prometheus_server_ip -j ACCEPT</code></pre>\n      </div>\n    </div>\n<h3 id=\"authentication\" class=\"mobile-header\">Authentication</h3>\n<p class=\"mobile-paragraph\">Enable basic auth in blackbox exporter:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate password hash\nhtpasswd -nBC 10 &quot;&quot; | tr -d &#039;:\\n&#039;\n\n# Add to blackbox_exporter command\n--web.config=/etc/blackbox_exporter/web.yml</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/blackbox_exporter/web.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">basic_auth_users:\n  prometheus: $2b$10$...  # bcrypt hash</code></pre>\n      </div>\n    </div>\n<h3 id=\"tls-configuration\" class=\"mobile-header\">TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">tls_server_config:\n  cert_file: /etc/blackbox_exporter/server.crt\n  key_file: /etc/blackbox_exporter/server.key</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"testing-probes\" class=\"mobile-header\">Testing Probes</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test HTTP probe\ncurl &quot;http://localhost:9115/probe?target=https://example.com&amp;module=http_2xx&quot;\n\n# Test with debug\ncurl &quot;http://localhost:9115/probe?target=https://example.com&amp;module=http_2xx&amp;debug=true&quot;\n\n# Check metrics\ncurl http://localhost:9115/metrics</code></pre>\n      </div>\n    </div>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>ICMP permission denied</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set capability\nsudo setcap cap_net_raw+ep /usr/local/bin/blackbox_exporter\n\n# Or run as root (not recommended)</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status blackbox_exporter\n\n# Check logs\nsudo journalctl -u blackbox_exporter -f\n\n# Verify listening port\nsudo netstat -tlnp | grep 9115</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>SSL verification failures</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Temporarily disable verification (testing only)\ntls_config:\n  insecure_skip_verify: true</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-tuning\" class=\"mobile-header\">Performance Tuning</h2>\n<h3 id=\"concurrent-probes\" class=\"mobile-header\">Concurrent Probes</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase concurrent probes\n--web.max-requests=100</code></pre>\n      </div>\n    </div>\n<h3 id=\"timeout-optimization\" class=\"mobile-header\">Timeout Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Adjust timeouts based on network conditions\nmodules:\n  http_fast:\n    prober: http\n    timeout: 2s\n  http_slow:\n    prober: http\n    timeout: 30s</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># In systemd service file\n[Service]\nLimitNOFILE=65535\nMemoryLimit=256M\nCPUQuota=50%</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-best-practices\" class=\"mobile-header\">Monitoring Best Practices</h2>\n<p class=\"mobile-paragraph\">1. <strong>Probe frequency</strong>: Balance between detection speed and load</p>\n<p class=\"mobile-paragraph\">2. <strong>Timeout values</strong>: Set slightly below scrape interval</p>\n<p class=\"mobile-paragraph\">3. <strong>Module reuse</strong>: Create specific modules for different use cases</p>\n<p class=\"mobile-paragraph\">4. <strong>Geographic distribution</strong>: Deploy multiple blackbox exporters</p>\n<p class=\"mobile-paragraph\">5. <strong>Internal vs external</strong>: Separate probes for internal/external services</p>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/prometheus/blackbox_exporter\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/prometheus/blackbox_exporter/blob/master/example.yml\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration Examples</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prometheus Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/grafana/dashboards?search=blackbox\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Grafana Dashboards</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://groups.google.com/forum/#!forum/prometheus-users\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1338,"lastBuilt":"2025-09-16T06:17:15.002Z","metadataVersion":"2.0"},{"name":"nagios","displayName":"nagios Installation Guide","slug":"nagios","description":"nagios is a free and open-source system monitoring. Nagios provides comprehensive IT infrastructure monitoring","category":"monitoring","subcategory":"monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["monitoring","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/monitoring/nagios","documentationUrl":"https://howtomgr.github.io/monitoring/nagios","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nagios","updatedAt":"2025-09-16T03:48:13Z","createdAt":"2025-09-08T03:11:50Z","readmeRaw":"# nagios Installation Guide\n\nnagios is a free and open-source system monitoring. Nagios provides comprehensive IT infrastructure monitoring\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 5GB for data\n  - Network: HTTP/check protocols\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default nagios port)\n  - NRPE on 5666\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install nagios\nsudo dnf install -y nagios\n\n# Enable and start service\nsudo systemctl enable --now nagios\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nnagios --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install nagios\nsudo apt install -y nagios\n\n# Enable and start service\nsudo systemctl enable --now nagios\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nnagios --version\n```\n\n### Arch Linux\n\n```bash\n# Install nagios\nsudo pacman -S nagios\n\n# Enable and start service\nsudo systemctl enable --now nagios\n\n# Verify installation\nnagios --version\n```\n\n### Alpine Linux\n\n```bash\n# Install nagios\napk add --no-cache nagios\n\n# Enable and start service\nrc-update add nagios default\nrc-service nagios start\n\n# Verify installation\nnagios --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install nagios\nsudo zypper install -y nagios\n\n# Enable and start service\nsudo systemctl enable --now nagios\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nnagios --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install nagios\n\n# Start service\nbrew services start nagios\n\n# Verify installation\nnagios --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install nagios\n\n# Enable in rc.conf\necho 'nagios_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice nagios start\n\n# Verify installation\nnagios --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install nagios\n\n# Or using Scoop\nscoop install nagios\n\n# Verify installation\nnagios --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/nagios\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nnagios --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable nagios\n\n# Start service\nsudo systemctl start nagios\n\n# Stop service\nsudo systemctl stop nagios\n\n# Restart service\nsudo systemctl restart nagios\n\n# Check status\nsudo systemctl status nagios\n\n# View logs\nsudo journalctl -u nagios -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add nagios default\n\n# Start service\nrc-service nagios start\n\n# Stop service\nrc-service nagios stop\n\n# Restart service\nrc-service nagios restart\n\n# Check status\nrc-service nagios status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'nagios_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice nagios start\n\n# Stop service\nservice nagios stop\n\n# Restart service\nservice nagios restart\n\n# Check status\nservice nagios status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start nagios\nbrew services stop nagios\nbrew services restart nagios\n\n# Check status\nbrew services list | grep nagios\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start nagios\n\n# Stop service\nnet stop nagios\n\n# Using PowerShell\nStart-Service nagios\nStop-Service nagios\nRestart-Service nagios\n\n# Check status\nGet-Service nagios\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream nagios_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name nagios.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nagios.example.com;\n\n    ssl_certificate /etc/ssl/certs/nagios.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/nagios.example.com.key;\n\n    location / {\n        proxy_pass http://nagios_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName nagios.example.com\n    Redirect permanent / https://nagios.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName nagios.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/nagios.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/nagios.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend nagios_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/nagios.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend nagios_backend\n\nbackend nagios_backend\n    balance roundrobin\n    server nagios1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R nagios:nagios /etc/nagios\nsudo chmod 750 /etc/nagios\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status nagios\n\n# View logs\nsudo journalctl -u nagios -f\n\n# Monitor resource usage\ntop -p $(pgrep nagios)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/nagios\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/nagios-backup-$DATE.tar.gz\" /etc/nagios /var/lib/nagios\n\necho \"Backup completed: $BACKUP_DIR/nagios-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop nagios\n\n# Restore from backup\ntar -xzf /backup/nagios/nagios-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start nagios\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u nagios -n 100\nsudo tail -f /var/log/nagios/nagios.log\n\n# Check configuration\nnagios --version\n\n# Check permissions\nls -la /etc/nagios\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep nagios)\n\n# Check disk I/O\niotop -p $(pgrep nagios)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  nagios:\n    image: nagios:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/nagios\n      - ./data:/var/lib/nagios\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update nagios\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade nagios\n\n# Arch Linux\nsudo pacman -Syu nagios\n\n# Alpine Linux\napk update && apk upgrade nagios\n\n# openSUSE\nsudo zypper update nagios\n\n# FreeBSD\npkg update && pkg upgrade nagios\n\n# Always backup before updates\ntar -czf /backup/nagios-pre-update-$(date +%Y%m%d).tar.gz /etc/nagios\n\n# Restart after updates\nsudo systemctl restart nagios\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/nagios\n\n# Clean old logs\nfind /var/log/nagios -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/nagios\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.nagios.org/\n- GitHub Repository: https://github.com/nagios/nagios\n- Community Forum: https://forum.nagios.org/\n- Best Practices Guide: https://docs.nagios.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"nagios-installation-guide\" class=\"mobile-header\">nagios Installation Guide</h1>\n<p class=\"mobile-paragraph\">nagios is a free and open-source system monitoring. Nagios provides comprehensive IT infrastructure monitoring</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 5GB for data</li>\n<li class=\"mobile-list-item\">Network: HTTP/check protocols</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default nagios port)</li>\n<li class=\"mobile-list-item\">NRPE on 5666</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install nagios\nsudo dnf install -y nagios\n\n# Enable and start service\nsudo systemctl enable --now nagios\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nnagios --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install nagios\nsudo apt install -y nagios\n\n# Enable and start service\nsudo systemctl enable --now nagios\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nnagios --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install nagios\nsudo pacman -S nagios\n\n# Enable and start service\nsudo systemctl enable --now nagios\n\n# Verify installation\nnagios --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install nagios\napk add --no-cache nagios\n\n# Enable and start service\nrc-update add nagios default\nrc-service nagios start\n\n# Verify installation\nnagios --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install nagios\nsudo zypper install -y nagios\n\n# Enable and start service\nsudo systemctl enable --now nagios\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nnagios --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install nagios\n\n# Start service\nbrew services start nagios\n\n# Verify installation\nnagios --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install nagios\n\n# Enable in rc.conf\necho &#039;nagios_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice nagios start\n\n# Verify installation\nnagios --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install nagios\n\n# Or using Scoop\nscoop install nagios\n\n# Verify installation\nnagios --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/nagios\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nnagios --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable nagios\n\n# Start service\nsudo systemctl start nagios\n\n# Stop service\nsudo systemctl stop nagios\n\n# Restart service\nsudo systemctl restart nagios\n\n# Check status\nsudo systemctl status nagios\n\n# View logs\nsudo journalctl -u nagios -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add nagios default\n\n# Start service\nrc-service nagios start\n\n# Stop service\nrc-service nagios stop\n\n# Restart service\nrc-service nagios restart\n\n# Check status\nrc-service nagios status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;nagios_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice nagios start\n\n# Stop service\nservice nagios stop\n\n# Restart service\nservice nagios restart\n\n# Check status\nservice nagios status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start nagios\nbrew services stop nagios\nbrew services restart nagios\n\n# Check status\nbrew services list | grep nagios</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start nagios\n\n# Stop service\nnet stop nagios\n\n# Using PowerShell\nStart-Service nagios\nStop-Service nagios\nRestart-Service nagios\n\n# Check status\nGet-Service nagios</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream nagios_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name nagios.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name nagios.example.com;\n\n    ssl_certificate /etc/ssl/certs/nagios.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/nagios.example.com.key;\n\n    location / {\n        proxy_pass http://nagios_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName nagios.example.com\n    Redirect permanent / https://nagios.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName nagios.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/nagios.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/nagios.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend nagios_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/nagios.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend nagios_backend\n\nbackend nagios_backend\n    balance roundrobin\n    server nagios1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R nagios:nagios /etc/nagios\nsudo chmod 750 /etc/nagios\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status nagios\n\n# View logs\nsudo journalctl -u nagios -f\n\n# Monitor resource usage\ntop -p $(pgrep nagios)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/nagios&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/nagios-backup-$DATE.tar.gz&quot; /etc/nagios /var/lib/nagios\n\necho &quot;Backup completed: $BACKUP_DIR/nagios-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop nagios\n\n# Restore from backup\ntar -xzf /backup/nagios/nagios-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start nagios</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u nagios -n 100\nsudo tail -f /var/log/nagios/nagios.log\n\n# Check configuration\nnagios --version\n\n# Check permissions\nls -la /etc/nagios</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep nagios)\n\n# Check disk I/O\niotop -p $(pgrep nagios)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  nagios:\n    image: nagios:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/nagios\n      - ./data:/var/lib/nagios\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update nagios\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade nagios\n\n# Arch Linux\nsudo pacman -Syu nagios\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade nagios\n\n# openSUSE\nsudo zypper update nagios\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade nagios\n\n# Always backup before updates\ntar -czf /backup/nagios-pre-update-$(date +%Y%m%d).tar.gz /etc/nagios\n\n# Restart after updates\nsudo systemctl restart nagios</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/nagios\n\n# Clean old logs\nfind /var/log/nagios -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/nagios</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.nagios.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/nagios/nagios</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.nagios.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.nagios.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1153,"lastBuilt":"2025-09-16T06:15:32.324Z","metadataVersion":"2.0"}]},"__N_SSG":true}