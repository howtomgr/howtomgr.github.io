{"pageProps":{"guide":{"name":"mlflow","displayName":"mlflow Installation Guide","slug":"mlflow","description":"mlflow is a free and open-source ML lifecycle. MLflow provides open source platform for ML lifecycle","category":"data-science","subcategory":"data-science","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,5000],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["data-science","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/data-science/mlflow","documentationUrl":"https://howtomgr.github.io/data-science/mlflow","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mlflow","updatedAt":"2025-09-16T17:31:58Z","createdAt":"2025-09-16T03:44:27Z","readmeRaw":"# mlflow Installation Guide\n\nmlflow is a free and open-source ML lifecycle. MLflow provides open source platform for ML lifecycle\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 4GB minimum\n  - Storage: 20GB for artifacts\n  - Network: HTTP/REST\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 5000 (default mlflow port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mlflow\nsudo dnf install -y mlflow\n\n# Enable and start service\nsudo systemctl enable --now mlflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmlflow --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install mlflow\nsudo apt install -y mlflow\n\n# Enable and start service\nsudo systemctl enable --now mlflow\n\n# Configure firewall\nsudo ufw allow 5000\n\n# Verify installation\nmlflow --version\n```\n\n### Arch Linux\n\n```bash\n# Install mlflow\nsudo pacman -S mlflow\n\n# Enable and start service\nsudo systemctl enable --now mlflow\n\n# Verify installation\nmlflow --version\n```\n\n### Alpine Linux\n\n```bash\n# Install mlflow\napk add --no-cache mlflow\n\n# Enable and start service\nrc-update add mlflow default\nrc-service mlflow start\n\n# Verify installation\nmlflow --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install mlflow\nsudo zypper install -y mlflow\n\n# Enable and start service\nsudo systemctl enable --now mlflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmlflow --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install mlflow\n\n# Start service\nbrew services start mlflow\n\n# Verify installation\nmlflow --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install mlflow\n\n# Enable in rc.conf\necho 'mlflow_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mlflow start\n\n# Verify installation\nmlflow --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install mlflow\n\n# Or using Scoop\nscoop install mlflow\n\n# Verify installation\nmlflow --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/mlflow\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nmlflow --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable mlflow\n\n# Start service\nsudo systemctl start mlflow\n\n# Stop service\nsudo systemctl stop mlflow\n\n# Restart service\nsudo systemctl restart mlflow\n\n# Check status\nsudo systemctl status mlflow\n\n# View logs\nsudo journalctl -u mlflow -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add mlflow default\n\n# Start service\nrc-service mlflow start\n\n# Stop service\nrc-service mlflow stop\n\n# Restart service\nrc-service mlflow restart\n\n# Check status\nrc-service mlflow status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'mlflow_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mlflow start\n\n# Stop service\nservice mlflow stop\n\n# Restart service\nservice mlflow restart\n\n# Check status\nservice mlflow status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start mlflow\nbrew services stop mlflow\nbrew services restart mlflow\n\n# Check status\nbrew services list | grep mlflow\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start mlflow\n\n# Stop service\nnet stop mlflow\n\n# Using PowerShell\nStart-Service mlflow\nStop-Service mlflow\nRestart-Service mlflow\n\n# Check status\nGet-Service mlflow\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream mlflow_backend {\n    server 127.0.0.1:5000;\n}\n\nserver {\n    listen 80;\n    server_name mlflow.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name mlflow.example.com;\n\n    ssl_certificate /etc/ssl/certs/mlflow.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/mlflow.example.com.key;\n\n    location / {\n        proxy_pass http://mlflow_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName mlflow.example.com\n    Redirect permanent / https://mlflow.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName mlflow.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/mlflow.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/mlflow.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5000/\n    ProxyPassReverse / http://127.0.0.1:5000/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend mlflow_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/mlflow.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend mlflow_backend\n\nbackend mlflow_backend\n    balance roundrobin\n    server mlflow1 127.0.0.1:5000 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R mlflow:mlflow /etc/mlflow\nsudo chmod 750 /etc/mlflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status mlflow\n\n# View logs\nsudo journalctl -u mlflow -f\n\n# Monitor resource usage\ntop -p $(pgrep mlflow)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/mlflow\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/mlflow-backup-$DATE.tar.gz\" /etc/mlflow /var/lib/mlflow\n\necho \"Backup completed: $BACKUP_DIR/mlflow-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop mlflow\n\n# Restore from backup\ntar -xzf /backup/mlflow/mlflow-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start mlflow\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u mlflow -n 100\nsudo tail -f /var/log/mlflow/mlflow.log\n\n# Check configuration\nmlflow --version\n\n# Check permissions\nls -la /etc/mlflow\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 5000\n\n# Test connectivity\ntelnet localhost 5000\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep mlflow)\n\n# Check disk I/O\niotop -p $(pgrep mlflow)\n\n# Check connections\nss -an | grep 5000\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  mlflow:\n    image: mlflow:latest\n    ports:\n      - \"5000:5000\"\n    volumes:\n      - ./config:/etc/mlflow\n      - ./data:/var/lib/mlflow\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update mlflow\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade mlflow\n\n# Arch Linux\nsudo pacman -Syu mlflow\n\n# Alpine Linux\napk update && apk upgrade mlflow\n\n# openSUSE\nsudo zypper update mlflow\n\n# FreeBSD\npkg update && pkg upgrade mlflow\n\n# Always backup before updates\ntar -czf /backup/mlflow-pre-update-$(date +%Y%m%d).tar.gz /etc/mlflow\n\n# Restart after updates\nsudo systemctl restart mlflow\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/mlflow\n\n# Clean old logs\nfind /var/log/mlflow -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/mlflow\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.mlflow.org/\n- GitHub Repository: https://github.com/mlflow/mlflow\n- Community Forum: https://forum.mlflow.org/\n- Best Practices Guide: https://docs.mlflow.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">mlflow is a free and open-source ML lifecycle. MLflow provides open source platform for ML lifecycle</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 4GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 20GB for artifacts</li>\n<li class=\"mobile-list-item\">Network: HTTP/REST</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 5000 (default mlflow port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mlflow\nsudo dnf install -y mlflow\n\n# Enable and start service\nsudo systemctl enable --now mlflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmlflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install mlflow\nsudo apt install -y mlflow\n\n# Enable and start service\nsudo systemctl enable --now mlflow\n\n# Configure firewall\nsudo ufw allow 5000\n\n# Verify installation\nmlflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mlflow\nsudo pacman -S mlflow\n\n# Enable and start service\nsudo systemctl enable --now mlflow\n\n# Verify installation\nmlflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mlflow\napk add --no-cache mlflow\n\n# Enable and start service\nrc-update add mlflow default\nrc-service mlflow start\n\n# Verify installation\nmlflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mlflow\nsudo zypper install -y mlflow\n\n# Enable and start service\nsudo systemctl enable --now mlflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmlflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install mlflow\n\n# Start service\nbrew services start mlflow\n\n# Verify installation\nmlflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install mlflow\n\n# Enable in rc.conf\necho &#039;mlflow_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mlflow start\n\n# Verify installation\nmlflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install mlflow\n\n# Or using Scoop\nscoop install mlflow\n\n# Verify installation\nmlflow --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/mlflow\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nmlflow --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable mlflow\n\n# Start service\nsudo systemctl start mlflow\n\n# Stop service\nsudo systemctl stop mlflow\n\n# Restart service\nsudo systemctl restart mlflow\n\n# Check status\nsudo systemctl status mlflow\n\n# View logs\nsudo journalctl -u mlflow -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add mlflow default\n\n# Start service\nrc-service mlflow start\n\n# Stop service\nrc-service mlflow stop\n\n# Restart service\nrc-service mlflow restart\n\n# Check status\nrc-service mlflow status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;mlflow_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mlflow start\n\n# Stop service\nservice mlflow stop\n\n# Restart service\nservice mlflow restart\n\n# Check status\nservice mlflow status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start mlflow\nbrew services stop mlflow\nbrew services restart mlflow\n\n# Check status\nbrew services list | grep mlflow</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start mlflow\n\n# Stop service\nnet stop mlflow\n\n# Using PowerShell\nStart-Service mlflow\nStop-Service mlflow\nRestart-Service mlflow\n\n# Check status\nGet-Service mlflow</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream mlflow_backend {\n    server 127.0.0.1:5000;\n}\n\nserver {\n    listen 80;\n    server_name mlflow.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name mlflow.example.com;\n\n    ssl_certificate /etc/ssl/certs/mlflow.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/mlflow.example.com.key;\n\n    location / {\n        proxy_pass http://mlflow_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName mlflow.example.com\n    Redirect permanent / https://mlflow.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName mlflow.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/mlflow.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/mlflow.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:5000/\n    ProxyPassReverse / http://127.0.0.1:5000/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend mlflow_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/mlflow.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend mlflow_backend\n\nbackend mlflow_backend\n    balance roundrobin\n    server mlflow1 127.0.0.1:5000 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R mlflow:mlflow /etc/mlflow\nsudo chmod 750 /etc/mlflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=5000/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status mlflow\n\n# View logs\nsudo journalctl -u mlflow -f\n\n# Monitor resource usage\ntop -p $(pgrep mlflow)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/mlflow&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/mlflow-backup-$DATE.tar.gz&quot; /etc/mlflow /var/lib/mlflow\n\necho &quot;Backup completed: $BACKUP_DIR/mlflow-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop mlflow\n\n# Restore from backup\ntar -xzf /backup/mlflow/mlflow-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start mlflow</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mlflow -n 100\nsudo tail -f /var/log/mlflow/mlflow.log\n\n# Check configuration\nmlflow --version\n\n# Check permissions\nls -la /etc/mlflow</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 5000\n\n# Test connectivity\ntelnet localhost 5000\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep mlflow)\n\n# Check disk I/O\niotop -p $(pgrep mlflow)\n\n# Check connections\nss -an | grep 5000</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  mlflow:\n    image: mlflow:latest\n    ports:\n      - &quot;5000:5000&quot;\n    volumes:\n      - ./config:/etc/mlflow\n      - ./data:/var/lib/mlflow\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update mlflow\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade mlflow\n\n# Arch Linux\nsudo pacman -Syu mlflow\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade mlflow\n\n# openSUSE\nsudo zypper update mlflow\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade mlflow\n\n# Always backup before updates\ntar -czf /backup/mlflow-pre-update-$(date +%Y%m%d).tar.gz /etc/mlflow\n\n# Restart after updates\nsudo systemctl restart mlflow</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/mlflow\n\n# Clean old logs\nfind /var/log/mlflow -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/mlflow</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.mlflow.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/mlflow/mlflow</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.mlflow.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.mlflow.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1266,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-27T18:14:23.182Z","metadataVersion":"2.0"},"category":{"key":"data-science","name":"Data science","description":"Data science tools and applications","icon":"🗄️","color":"#8be9fd"},"relatedGuides":[{"name":"dvc","displayName":"dvc Installation Guide","slug":"dvc","description":"dvc is a free and open-source ML version control. DVC provides version control system for ML projects","category":"data-science","subcategory":"data-science","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["data-science","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/data-science/dvc","documentationUrl":"https://howtomgr.github.io/data-science/dvc","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/dvc","updatedAt":"2025-09-16T17:09:26Z","createdAt":"2025-09-16T02:33:21Z","readmeRaw":"# dvc Installation Guide\n\ndvc is a free and open-source ML version control. DVC provides version control system for ML projects\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 2GB minimum\n  - Storage: 50GB for cache\n  - Network: Git-based\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default dvc port)\n  - Studio on 8080\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dvc\nsudo dnf install -y dvc\n\n# Enable and start service\nsudo systemctl enable --now dvc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndvc --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install dvc\nsudo apt install -y dvc\n\n# Enable and start service\nsudo systemctl enable --now dvc\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\ndvc --version\n```\n\n### Arch Linux\n\n```bash\n# Install dvc\nsudo pacman -S dvc\n\n# Enable and start service\nsudo systemctl enable --now dvc\n\n# Verify installation\ndvc --version\n```\n\n### Alpine Linux\n\n```bash\n# Install dvc\napk add --no-cache dvc\n\n# Enable and start service\nrc-update add dvc default\nrc-service dvc start\n\n# Verify installation\ndvc --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install dvc\nsudo zypper install -y dvc\n\n# Enable and start service\nsudo systemctl enable --now dvc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndvc --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install dvc\n\n# Start service\nbrew services start dvc\n\n# Verify installation\ndvc --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install dvc\n\n# Enable in rc.conf\necho 'dvc_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dvc start\n\n# Verify installation\ndvc --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install dvc\n\n# Or using Scoop\nscoop install dvc\n\n# Verify installation\ndvc --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/dvc\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndvc --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable dvc\n\n# Start service\nsudo systemctl start dvc\n\n# Stop service\nsudo systemctl stop dvc\n\n# Restart service\nsudo systemctl restart dvc\n\n# Check status\nsudo systemctl status dvc\n\n# View logs\nsudo journalctl -u dvc -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add dvc default\n\n# Start service\nrc-service dvc start\n\n# Stop service\nrc-service dvc stop\n\n# Restart service\nrc-service dvc restart\n\n# Check status\nrc-service dvc status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'dvc_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dvc start\n\n# Stop service\nservice dvc stop\n\n# Restart service\nservice dvc restart\n\n# Check status\nservice dvc status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start dvc\nbrew services stop dvc\nbrew services restart dvc\n\n# Check status\nbrew services list | grep dvc\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start dvc\n\n# Stop service\nnet stop dvc\n\n# Using PowerShell\nStart-Service dvc\nStop-Service dvc\nRestart-Service dvc\n\n# Check status\nGet-Service dvc\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream dvc_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name dvc.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dvc.example.com;\n\n    ssl_certificate /etc/ssl/certs/dvc.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dvc.example.com.key;\n\n    location / {\n        proxy_pass http://dvc_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName dvc.example.com\n    Redirect permanent / https://dvc.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName dvc.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dvc.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dvc.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend dvc_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dvc.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dvc_backend\n\nbackend dvc_backend\n    balance roundrobin\n    server dvc1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R dvc:dvc /etc/dvc\nsudo chmod 750 /etc/dvc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status dvc\n\n# View logs\nsudo journalctl -u dvc -f\n\n# Monitor resource usage\ntop -p $(pgrep dvc)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/dvc\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/dvc-backup-$DATE.tar.gz\" /etc/dvc /var/lib/dvc\n\necho \"Backup completed: $BACKUP_DIR/dvc-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop dvc\n\n# Restore from backup\ntar -xzf /backup/dvc/dvc-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start dvc\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u dvc -n 100\nsudo tail -f /var/log/dvc/dvc.log\n\n# Check configuration\ndvc --version\n\n# Check permissions\nls -la /etc/dvc\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep dvc)\n\n# Check disk I/O\niotop -p $(pgrep dvc)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  dvc:\n    image: dvc:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/dvc\n      - ./data:/var/lib/dvc\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dvc\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade dvc\n\n# Arch Linux\nsudo pacman -Syu dvc\n\n# Alpine Linux\napk update && apk upgrade dvc\n\n# openSUSE\nsudo zypper update dvc\n\n# FreeBSD\npkg update && pkg upgrade dvc\n\n# Always backup before updates\ntar -czf /backup/dvc-pre-update-$(date +%Y%m%d).tar.gz /etc/dvc\n\n# Restart after updates\nsudo systemctl restart dvc\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/dvc\n\n# Clean old logs\nfind /var/log/dvc -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/dvc\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.dvc.org/\n- GitHub Repository: https://github.com/dvc/dvc\n- Community Forum: https://forum.dvc.org/\n- Best Practices Guide: https://docs.dvc.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">dvc is a free and open-source ML version control. DVC provides version control system for ML projects</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 50GB for cache</li>\n<li class=\"mobile-list-item\">Network: Git-based</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default dvc port)</li>\n<li class=\"mobile-list-item\">Studio on 8080</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dvc\nsudo dnf install -y dvc\n\n# Enable and start service\nsudo systemctl enable --now dvc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndvc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install dvc\nsudo apt install -y dvc\n\n# Enable and start service\nsudo systemctl enable --now dvc\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\ndvc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dvc\nsudo pacman -S dvc\n\n# Enable and start service\nsudo systemctl enable --now dvc\n\n# Verify installation\ndvc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dvc\napk add --no-cache dvc\n\n# Enable and start service\nrc-update add dvc default\nrc-service dvc start\n\n# Verify installation\ndvc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dvc\nsudo zypper install -y dvc\n\n# Enable and start service\nsudo systemctl enable --now dvc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ndvc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install dvc\n\n# Start service\nbrew services start dvc\n\n# Verify installation\ndvc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install dvc\n\n# Enable in rc.conf\necho &#039;dvc_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dvc start\n\n# Verify installation\ndvc --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install dvc\n\n# Or using Scoop\nscoop install dvc\n\n# Verify installation\ndvc --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/dvc\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ndvc --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable dvc\n\n# Start service\nsudo systemctl start dvc\n\n# Stop service\nsudo systemctl stop dvc\n\n# Restart service\nsudo systemctl restart dvc\n\n# Check status\nsudo systemctl status dvc\n\n# View logs\nsudo journalctl -u dvc -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add dvc default\n\n# Start service\nrc-service dvc start\n\n# Stop service\nrc-service dvc stop\n\n# Restart service\nrc-service dvc restart\n\n# Check status\nrc-service dvc status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;dvc_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dvc start\n\n# Stop service\nservice dvc stop\n\n# Restart service\nservice dvc restart\n\n# Check status\nservice dvc status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start dvc\nbrew services stop dvc\nbrew services restart dvc\n\n# Check status\nbrew services list | grep dvc</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start dvc\n\n# Stop service\nnet stop dvc\n\n# Using PowerShell\nStart-Service dvc\nStop-Service dvc\nRestart-Service dvc\n\n# Check status\nGet-Service dvc</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream dvc_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name dvc.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dvc.example.com;\n\n    ssl_certificate /etc/ssl/certs/dvc.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dvc.example.com.key;\n\n    location / {\n        proxy_pass http://dvc_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName dvc.example.com\n    Redirect permanent / https://dvc.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName dvc.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dvc.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dvc.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend dvc_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dvc.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dvc_backend\n\nbackend dvc_backend\n    balance roundrobin\n    server dvc1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R dvc:dvc /etc/dvc\nsudo chmod 750 /etc/dvc\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status dvc\n\n# View logs\nsudo journalctl -u dvc -f\n\n# Monitor resource usage\ntop -p $(pgrep dvc)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/dvc&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/dvc-backup-$DATE.tar.gz&quot; /etc/dvc /var/lib/dvc\n\necho &quot;Backup completed: $BACKUP_DIR/dvc-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop dvc\n\n# Restore from backup\ntar -xzf /backup/dvc/dvc-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start dvc</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u dvc -n 100\nsudo tail -f /var/log/dvc/dvc.log\n\n# Check configuration\ndvc --version\n\n# Check permissions\nls -la /etc/dvc</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep dvc)\n\n# Check disk I/O\niotop -p $(pgrep dvc)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  dvc:\n    image: dvc:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/dvc\n      - ./data:/var/lib/dvc\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dvc\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade dvc\n\n# Arch Linux\nsudo pacman -Syu dvc\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade dvc\n\n# openSUSE\nsudo zypper update dvc\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade dvc\n\n# Always backup before updates\ntar -czf /backup/dvc-pre-update-$(date +%Y%m%d).tar.gz /etc/dvc\n\n# Restart after updates\nsudo systemctl restart dvc</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/dvc\n\n# Clean old logs\nfind /var/log/dvc -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/dvc</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.dvc.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/dvc/dvc</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.dvc.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.dvc.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1270,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-27T18:15:39.425Z","metadataVersion":"2.0"},{"name":"jupyter","displayName":"Jupyter","slug":"jupyter","description":"Jupyter Lab is an interactive development environment for notebooks, code, and data","category":"data-science","subcategory":"data-science","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[8888],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["data-science","notebooks","python","development"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/data-science/jupyter","documentationUrl":"https://howtomgr.github.io/data-science/jupyter","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jupyter","updatedAt":"2025-09-16T17:22:46Z","createdAt":"2025-09-08T03:09:29Z","readmeRaw":"# Jupyter Lab Installation Guide\n\nJupyter Lab is a free and open-source Data Science. An interactive development environment for notebooks, code, and data\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 10GB minimum\n  - Network: 8888 ports required\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10 Pro\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8888 (default jupyter-lab port)\n  - Firewall rules configured\n- **Dependencies**:\n  - python3, python3-pip, nodejs\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install jupyter-lab\nsudo dnf install -y jupyter-lab python3, python3-pip, nodejs\n\n# Enable and start service\nsudo systemctl enable --now jupyter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=jupyter-lab || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\njupyter-lab --version || systemctl status jupyter\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install jupyter-lab\nsudo apt install -y jupyter-lab python3, python3-pip, nodejs\n\n# Enable and start service\nsudo systemctl enable --now jupyter\n\n# Configure firewall\nsudo ufw allow 8888\n\n# Verify installation\njupyter-lab --version || systemctl status jupyter\n```\n\n### Arch Linux\n\n```bash\n# Install jupyter-lab\nsudo pacman -S jupyter-lab\n\n# Enable and start service\nsudo systemctl enable --now jupyter\n\n# Verify installation\njupyter-lab --version || systemctl status jupyter\n```\n\n### Alpine Linux\n\n```bash\n# Install jupyter-lab\napk add --no-cache jupyter-lab\n\n# Enable and start service\nrc-update add jupyter default\nrc-service jupyter start\n\n# Verify installation\njupyter-lab --version || rc-service jupyter status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install jupyter-lab\nsudo zypper install -y jupyter-lab python3, python3-pip, nodejs\n\n# Enable and start service\nsudo systemctl enable --now jupyter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=jupyter-lab || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\njupyter-lab --version || systemctl status jupyter\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install jupyter-lab\n\n# Start service\nbrew services start jupyter-lab\n\n# Verify installation\njupyter-lab --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install jupyter-lab\n\n# Enable in rc.conf\necho 'jupyter_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice jupyter start\n\n# Verify installation\njupyter-lab --version || service jupyter status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install jupyter-lab\n\n# Or using Scoop\nscoop install jupyter-lab\n\n# Verify installation\njupyter-lab --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/jupyter\n\n# Set up basic configuration\nsudo tee /etc/jupyter/jupyter-lab.conf << 'EOF'\n# Jupyter Lab Configuration\nc.NotebookApp.max_buffer_size = 536870912\nEOF\n\n# Set appropriate permissions\nsudo chown -R jupyter-lab:jupyter-lab /etc/jupyter || \\\n  sudo chown -R $(whoami):$(whoami) /etc/jupyter\n\n# Test configuration\nsudo jupyter-lab --test || sudo jupyter configtest\n```\n\n### Security Hardening\n\n```bash\n# Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false jupyter-lab || true\n\n# Secure configuration files\nsudo chmod 750 /etc/jupyter\nsudo chmod 640 /etc/jupyter/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable jupyter\n\n# Start service\nsudo systemctl start jupyter\n\n# Stop service\nsudo systemctl stop jupyter\n\n# Restart service\nsudo systemctl restart jupyter\n\n# Reload configuration\nsudo systemctl reload jupyter\n\n# Check status\nsudo systemctl status jupyter\n\n# View logs\nsudo journalctl -u jupyter -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add jupyter default\n\n# Start service\nrc-service jupyter start\n\n# Stop service\nrc-service jupyter stop\n\n# Restart service\nrc-service jupyter restart\n\n# Check status\nrc-service jupyter status\n\n# View logs\ntail -f /var/log/jupyter/jupyter.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'jupyter_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice jupyter start\n\n# Stop service\nservice jupyter stop\n\n# Restart service\nservice jupyter restart\n\n# Check status\nservice jupyter status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start jupyter-lab\nbrew services stop jupyter-lab\nbrew services restart jupyter-lab\n\n# Check status\nbrew services list | grep jupyter-lab\n\n# View logs\ntail -f $(brew --prefix)/var/log/jupyter-lab.log\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start jupyter\n\n# Stop service\nnet stop jupyter\n\n# Using PowerShell\nStart-Service jupyter\nStop-Service jupyter\nRestart-Service jupyter\n\n# Check status\nGet-Service jupyter\n\n# Set to automatic startup\nSet-Service jupyter -StartupType Automatic\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/jupyter/jupyter-lab.conf << 'EOF'\n# Performance tuning\nc.NotebookApp.max_buffer_size = 536870912\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho \"vm.swappiness=10\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart jupyter\n```\n\n### High Availability Setup\n\n```bash\n# Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream jupyter-lab_backend {\n    server 127.0.0.1:8888;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name jupyter-lab.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jupyter-lab.example.com;\n\n    ssl_certificate /etc/ssl/certs/jupyter-lab.crt;\n    ssl_certificate_key /etc/ssl/private/jupyter-lab.key;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection \"1; mode=block\";\n\n    location / {\n        proxy_pass http://jupyter-lab_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName jupyter-lab.example.com\n    Redirect permanent / https://jupyter-lab.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName jupyter-lab.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/jupyter-lab.crt\n    SSLCertificateKeyFile /etc/ssl/private/jupyter-lab.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    <Location />\n        ProxyPass http://127.0.0.1:8888/\n        ProxyPassReverse http://127.0.0.1:8888/\n    </Location>\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:8888/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nglobal\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend jupyter-lab_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/jupyter-lab.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    \n    default_backend jupyter-lab_backend\n\nbackend jupyter-lab_backend\n    balance roundrobin\n    option httpchk GET /health\n    server jupyter-lab1 127.0.0.1:8888 check\n```\n\n### Caddy Configuration\n\n```caddy\njupyter-lab.example.com {\n    reverse_proxy 127.0.0.1:8888 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection \"1; mode=block\"\n    }\n    \n    encode gzip\n}\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Create dedicated user\nsudo useradd --system --shell /bin/false --home /etc/jupyter jupyter-lab || true\n\n# Set ownership\nsudo chown -R jupyter-lab:jupyter-lab /etc/jupyter\nsudo chown -R jupyter-lab:jupyter-lab /var/log/jupyter\n\n# Set permissions\nsudo chmod 750 /etc/jupyter\nsudo chmod 640 /etc/jupyter/*\nsudo chmod 750 /var/log/jupyter\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 8888 proto tcp comment \"Jupyter Lab\"\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=jupyter-lab\nsudo firewall-cmd --permanent --service=jupyter-lab --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=jupyter-lab\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 8888 || true\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/jupyter-lab.key \\\n    -out /etc/ssl/certs/jupyter-lab.crt \\\n    -subj \"/C=US/ST=State/L=City/O=Organization/CN=jupyter-lab.example.com\"\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/jupyter-lab.key\nsudo chmod 644 /etc/ssl/certs/jupyter-lab.crt\n\n# For production, use Let's Encrypt\nsudo certbot certonly --standalone -d jupyter-lab.example.com\n```\n\n### Fail2ban Configuration\n\n```ini\n# /etc/fail2ban/jail.d/jupyter-lab.conf\n[jupyter-lab]\nenabled = true\nport = 8888\nfilter = jupyter-lab\nlogpath = /var/log/jupyter/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\n```\n\n```ini\n# /etc/fail2ban/filter.d/jupyter-lab.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from <HOST>.*$\n            ^.*Authentication failed.*from <HOST>.*$\n            ^.*Invalid credentials.*from <HOST>.*$\nignoreregex =\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE jupyter-lab_db;\nCREATE USER jupyter-lab_user WITH ENCRYPTED PASSWORD 'secure_password_here';\nGRANT ALL PRIVILEGES ON DATABASE jupyter-lab_db TO jupyter-lab_user;\n\\q\nEOF\n\n# Configure connection in Jupyter Lab\necho \"DATABASE_URL=postgresql://jupyter-lab_user:secure_password_here@localhost/jupyter-lab_db\" | \\\n  sudo tee -a /etc/jupyter/jupyter-lab.env\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE jupyter-lab_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'jupyter-lab_user'@'localhost' IDENTIFIED BY 'secure_password_here';\nGRANT ALL PRIVILEGES ON jupyter-lab_db.* TO 'jupyter-lab_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho \"DATABASE_URL=mysql://jupyter-lab_user:secure_password_here@localhost/jupyter-lab_db\" | \\\n  sudo tee -a /etc/jupyter/jupyter-lab.env\n```\n\n### SQLite Backend (if applicable)\n\n```bash\n# Create database directory\nsudo mkdir -p /var/lib/jupyter-lab\nsudo chown jupyter-lab:jupyter-lab /var/lib/jupyter-lab\n\n# Initialize database\nsudo -u jupyter-lab jupyter-lab init-db\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters for better performance\ncat << 'EOF' | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat << 'EOF' | sudo tee -a /etc/security/limits.conf\njupyter-lab soft nofile 65535\njupyter-lab hard nofile 65535\njupyter-lab soft nproc 32768\njupyter-lab hard nproc 32768\nEOF\n```\n\n### Application Tuning\n\n```bash\n# Configure application-specific performance settings\ncat << 'EOF' | sudo tee -a /etc/jupyter/performance.conf\n# Performance configuration\nc.NotebookApp.max_buffer_size = 536870912\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart jupyter\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: 'jupyter-lab'\n    static_configs:\n      - targets: ['localhost:8888/metrics']\n    metrics_path: '/metrics'\n    scrape_interval: 30s\n```\n\n### Health Check Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/jupyter-lab-health\n\n# Check if service is running\nif ! systemctl is-active --quiet jupyter; then\n    echo \"CRITICAL: Jupyter Lab service is not running\"\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 8888 2>/dev/null; then\n    echo \"CRITICAL: Jupyter Lab is not listening on port 8888\"\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w '%{time_total}' http://localhost:8888/health || echo \"999\")\nif (( $(echo \"$response_time > 5\" | bc -l) )); then\n    echo \"WARNING: Slow response time: ${response_time}s\"\n    exit 1\nfi\n\necho \"OK: Jupyter Lab is healthy (response time: ${response_time}s)\"\nexit 0\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\ncat << 'EOF' | sudo tee /etc/logrotate.d/jupyter-lab\n/var/log/jupyter/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 jupyter-lab jupyter-lab\n    postrotate\n        systemctl reload jupyter > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/jupyter-lab\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/jupyter-lab-backup\n\nBACKUP_DIR=\"/backup/jupyter-lab\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/jupyter-lab_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if needed for consistency)\necho \"Stopping Jupyter Lab service...\"\nsystemctl stop jupyter\n\n# Backup configuration\necho \"Backing up configuration...\"\ntar -czf \"$BACKUP_FILE\" \\\n    /etc/jupyter \\\n    /var/lib/jupyter-lab \\\n    /var/log/jupyter\n\n# Backup database (if applicable)\nif command -v pg_dump &> /dev/null; then\n    echo \"Backing up database...\"\n    sudo -u postgres pg_dump jupyter-lab_db | gzip > \"$BACKUP_DIR/jupyter-lab_db_$DATE.sql.gz\"\nfi\n\n# Start service\necho \"Starting Jupyter Lab service...\"\nsystemctl start jupyter\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\nfind \"$BACKUP_DIR\" -name \"*.sql.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_FILE\"\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# /usr/local/bin/jupyter-lab-restore\n\nif [ $# -ne 1 ]; then\n    echo \"Usage: $0 <backup_file>\"\n    exit 1\nfi\n\nBACKUP_FILE=\"$1\"\n\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"Error: Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\n# Stop service\necho \"Stopping Jupyter Lab service...\"\nsystemctl stop jupyter\n\n# Restore files\necho \"Restoring from backup...\"\ntar -xzf \"$BACKUP_FILE\" -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo \"$BACKUP_FILE\" | sed 's/.tar.gz$/_db.sql.gz/')\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"Restoring database...\"\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql jupyter-lab_db\nfi\n\n# Fix permissions\nchown -R jupyter-lab:jupyter-lab /etc/jupyter\nchown -R jupyter-lab:jupyter-lab /var/lib/jupyter-lab\n\n# Start service\necho \"Starting Jupyter Lab service...\"\nsystemctl start jupyter\n\necho \"Restore completed successfully\"\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check service status and logs\nsudo systemctl status jupyter\nsudo journalctl -u jupyter -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 8888\nsudo lsof -i :8888\n\n# Verify configuration\nsudo jupyter-lab --test || sudo jupyter configtest\n\n# Check permissions\nls -la /etc/jupyter\nls -la /var/log/jupyter\n```\n\n2. **Cannot access web interface**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep jupyter\ncurl -I http://localhost:8888\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 8888\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep jupyter-lab\n```\n\n3. **High memory/CPU usage**:\n```bash\n# Monitor resource usage\ntop -p $(pgrep jupyter-lab)\nhtop -p $(pgrep jupyter-lab)\n\n# Check for memory leaks\nps aux | grep jupyter-lab\ncat /proc/$(pgrep jupyter-lab)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /var/log/jupyter/*.log | tail -50\n```\n\n4. **Database connection errors**:\n```bash\n# Test database connection\npsql -U jupyter-lab_user -d jupyter-lab_db -c \"SELECT 1;\"\nmysql -u jupyter-lab_user -p jupyter-lab_db -e \"SELECT 1;\"\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\necho \"debug = true\" | sudo tee -a /etc/jupyter/jupyter-lab.conf\n\n# Restart with debug mode\nsudo systemctl stop jupyter\nsudo -u jupyter-lab jupyter-lab --debug\n\n# Watch debug logs\ntail -f /var/log/jupyter/debug.log\n```\n\n### Performance Analysis\n\n```bash\n# Profile CPU usage\nsudo perf record -p $(pgrep jupyter-lab) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/jupyter-lab.pcap port 8888\nsudo tcpdump -r /tmp/jupyter-lab.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep jupyter-lab)\n```\n\n## Integration Examples\n\n### Docker Deployment\n\n```yaml\n# docker-compose.yml\nversion: '3.8'\n\nservices:\n  jupyter-lab:\n    image: jupyter-lab:jupyter-lab\n    container_name: jupyter-lab\n    restart: unless-stopped\n    ports:\n      - \"8888:8888\"\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/etc/jupyter\n      - ./data:/var/lib/jupyter-lab\n      - ./logs:/var/log/jupyter\n    networks:\n      - jupyter-lab_network\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8888/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  jupyter-lab_network:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\n# jupyter-lab-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: jupyter-lab\n  labels:\n    app: jupyter-lab\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: jupyter-lab\n  template:\n    metadata:\n      labels:\n        app: jupyter-lab\n    spec:\n      containers:\n      - name: jupyter-lab\n        image: jupyter-lab:jupyter-lab\n        ports:\n        - containerPort: 8888\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /etc/jupyter\n        - name: data\n          mountPath: /var/lib/jupyter-lab\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8888\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8888\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: jupyter-lab-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: jupyter-lab-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: jupyter-lab\nspec:\n  selector:\n    app: jupyter-lab\n  ports:\n  - protocol: TCP\n    port: 8888\n    targetPort: 8888\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: jupyter-lab-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n```\n\n### Ansible Playbook\n\n```yaml\n---\n# jupyter-lab-playbook.yml\n- name: Install and configure Jupyter Lab\n  hosts: all\n  become: yes\n  vars:\n    jupyter-lab_version: latest\n    jupyter-lab_port: 8888\n    jupyter-lab_config_dir: /etc/jupyter\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - python3, python3-pip, nodejs\n        state: present\n    \n    - name: Install Jupyter Lab\n      package:\n        name: jupyter-lab\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: \"{{ jupyter-lab_config_dir }}\"\n        state: directory\n        owner: jupyter-lab\n        group: jupyter-lab\n        mode: '0750'\n    \n    - name: Deploy configuration\n      template:\n        src: jupyter-lab.conf.j2\n        dest: \"{{ jupyter-lab_config_dir }}/jupyter-lab.conf\"\n        owner: jupyter-lab\n        group: jupyter-lab\n        mode: '0640'\n      notify: restart jupyter-lab\n    \n    - name: Start and enable service\n      systemd:\n        name: jupyter\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: \"{{ jupyter-lab_port }}/tcp\"\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart jupyter-lab\n      systemd:\n        name: jupyter\n        state: restarted\n```\n\n### Terraform Configuration\n\n```hcl\n# jupyter-lab.tf\nresource \"aws_instance\" \"jupyter-lab_server\" {\n  ami           = var.ami_id\n  instance_type = \"t3.medium\"\n  \n  vpc_security_group_ids = [aws_security_group.jupyter-lab.id]\n  \n  user_data = <<-EOF\n    #!/bin/bash\n    # Install Jupyter Lab\n    apt-get update\n    apt-get install -y jupyter-lab python3, python3-pip, nodejs\n    \n    # Configure Jupyter Lab\n    systemctl enable jupyter\n    systemctl start jupyter\n  EOF\n  \n  tags = {\n    Name = \"Jupyter Lab Server\"\n    Application = \"Jupyter Lab\"\n  }\n}\n\nresource \"aws_security_group\" \"jupyter-lab\" {\n  name        = \"jupyter-lab-sg\"\n  description = \"Security group for Jupyter Lab\"\n  \n  ingress {\n    from_port   = 8888\n    to_port     = 8888\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n  \n  tags = {\n    Name = \"Jupyter Lab Security Group\"\n  }\n}\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update jupyter-lab\nsudo dnf update jupyter-lab\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade jupyter-lab\n\n# Arch Linux\nsudo pacman -Syu jupyter-lab\n\n# Alpine Linux\napk update\napk upgrade jupyter-lab\n\n# openSUSE\nsudo zypper ref\nsudo zypper update jupyter-lab\n\n# FreeBSD\npkg update\npkg upgrade jupyter-lab\n\n# Always backup before updates\n/usr/local/bin/jupyter-lab-backup\n\n# Restart after updates\nsudo systemctl restart jupyter\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean old logs\nfind /var/log/jupyter -name \"*.log\" -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze jupyter-lab_db\n\n# Check disk usage\ndf -h | grep -E \"(/$|jupyter-lab)\"\ndu -sh /var/lib/jupyter-lab\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u jupyter | grep -i \"error\\|fail\\|deny\"\n```\n\n### Health Monitoring Checklist\n\n- [ ] Service is running and enabled\n- [ ] Web interface is accessible\n- [ ] Database connections are healthy\n- [ ] Disk usage is below 80%\n- [ ] No critical errors in logs\n- [ ] Backups are running successfully\n- [ ] SSL certificates are valid\n- [ ] Security updates are applied\n\n## Additional Resources\n\n- Official Documentation: https://docs.jupyter-lab.org/\n- GitHub Repository: https://github.com/jupyter-lab/jupyter-lab\n- Community Forum: https://forum.jupyter-lab.org/\n- Wiki: https://wiki.jupyter-lab.org/\n- Docker Hub: https://hub.docker.com/r/jupyter-lab/jupyter-lab\n- Security Advisories: https://security.jupyter-lab.org/\n- Best Practices: https://docs.jupyter-lab.org/best-practices\n- API Documentation: https://api.jupyter-lab.org/\n- Comparison with RStudio, VS Code, Google Colab, Spyder: https://docs.jupyter-lab.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Jupyter Lab is a free and open-source Data Science. An interactive development environment for notebooks, code, and data</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 10GB minimum</li>\n<li class=\"mobile-list-item\">Network: 8888 ports required</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10 Pro</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8888 (default jupyter-lab port)</li>\n<li class=\"mobile-list-item\">Firewall rules configured</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">python3, python3-pip, nodejs</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install jupyter-lab\nsudo dnf install -y jupyter-lab python3, python3-pip, nodejs\n\n# Enable and start service\nsudo systemctl enable --now jupyter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=jupyter-lab || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\njupyter-lab --version || systemctl status jupyter</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install jupyter-lab\nsudo apt install -y jupyter-lab python3, python3-pip, nodejs\n\n# Enable and start service\nsudo systemctl enable --now jupyter\n\n# Configure firewall\nsudo ufw allow 8888\n\n# Verify installation\njupyter-lab --version || systemctl status jupyter</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install jupyter-lab\nsudo pacman -S jupyter-lab\n\n# Enable and start service\nsudo systemctl enable --now jupyter\n\n# Verify installation\njupyter-lab --version || systemctl status jupyter</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install jupyter-lab\napk add --no-cache jupyter-lab\n\n# Enable and start service\nrc-update add jupyter default\nrc-service jupyter start\n\n# Verify installation\njupyter-lab --version || rc-service jupyter status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install jupyter-lab\nsudo zypper install -y jupyter-lab python3, python3-pip, nodejs\n\n# Enable and start service\nsudo systemctl enable --now jupyter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=jupyter-lab || \\\n  sudo firewall-cmd --permanent --add-port={default_port}/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\njupyter-lab --version || systemctl status jupyter</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install jupyter-lab\n\n# Start service\nbrew services start jupyter-lab\n\n# Verify installation\njupyter-lab --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install jupyter-lab\n\n# Enable in rc.conf\necho &#039;jupyter_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice jupyter start\n\n# Verify installation\njupyter-lab --version || service jupyter status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install jupyter-lab\n\n# Or using Scoop\nscoop install jupyter-lab\n\n# Verify installation\njupyter-lab --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/jupyter\n\n# Set up basic configuration\nsudo tee /etc/jupyter/jupyter-lab.conf &lt;&lt; &#039;EOF&#039;\n# Jupyter Lab Configuration\nc.NotebookApp.max_buffer_size = 536870912\nEOF\n\n# Set appropriate permissions\nsudo chown -R jupyter-lab:jupyter-lab /etc/jupyter || \\\n  sudo chown -R $(whoami):$(whoami) /etc/jupyter\n\n# Test configuration\nsudo jupyter-lab --test || sudo jupyter configtest</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user (if not created by package)\nsudo useradd --system --shell /bin/false jupyter-lab || true\n\n# Secure configuration files\nsudo chmod 750 /etc/jupyter\nsudo chmod 640 /etc/jupyter/*.conf\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable jupyter\n\n# Start service\nsudo systemctl start jupyter\n\n# Stop service\nsudo systemctl stop jupyter\n\n# Restart service\nsudo systemctl restart jupyter\n\n# Reload configuration\nsudo systemctl reload jupyter\n\n# Check status\nsudo systemctl status jupyter\n\n# View logs\nsudo journalctl -u jupyter -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add jupyter default\n\n# Start service\nrc-service jupyter start\n\n# Stop service\nrc-service jupyter stop\n\n# Restart service\nrc-service jupyter restart\n\n# Check status\nrc-service jupyter status\n\n# View logs\ntail -f /var/log/jupyter/jupyter.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;jupyter_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice jupyter start\n\n# Stop service\nservice jupyter stop\n\n# Restart service\nservice jupyter restart\n\n# Check status\nservice jupyter status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start jupyter-lab\nbrew services stop jupyter-lab\nbrew services restart jupyter-lab\n\n# Check status\nbrew services list | grep jupyter-lab\n\n# View logs\ntail -f $(brew --prefix)/var/log/jupyter-lab.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start jupyter\n\n# Stop service\nnet stop jupyter\n\n# Using PowerShell\nStart-Service jupyter\nStop-Service jupyter\nRestart-Service jupyter\n\n# Check status\nGet-Service jupyter\n\n# Set to automatic startup\nSet-Service jupyter -StartupType Automatic</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/jupyter/jupyter-lab.conf &lt;&lt; &#039;EOF&#039;\n# Performance tuning\nc.NotebookApp.max_buffer_size = 536870912\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\necho &quot;vm.swappiness=10&quot; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# Restart service to apply changes\nsudo systemctl restart jupyter</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering/HA (if supported)\n# This varies greatly by tool - see official documentation\n\n# Example load balancing configuration\n# Configure multiple instances on different ports\n# Use HAProxy or nginx for load balancing</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream jupyter-lab_backend {\n    server 127.0.0.1:8888;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name jupyter-lab.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jupyter-lab.example.com;\n\n    ssl_certificate /etc/ssl/certs/jupyter-lab.crt;\n    ssl_certificate_key /etc/ssl/private/jupyter-lab.key;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff;\n    add_header X-Frame-Options SAMEORIGIN;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n\n    location / {\n        proxy_pass http://jupyter-lab_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeouts\n        proxy_connect_timeout 60s;\n        proxy_send_timeout 60s;\n        proxy_read_timeout 60s;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName jupyter-lab.example.com\n    Redirect permanent / https://jupyter-lab.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName jupyter-lab.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/jupyter-lab.crt\n    SSLCertificateKeyFile /etc/ssl/private/jupyter-lab.key\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options SAMEORIGIN\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    &lt;Location /&gt;\n        ProxyPass http://127.0.0.1:8888/\n        ProxyPassReverse http://127.0.0.1:8888/\n    &lt;/Location&gt;\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:8888/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">global\n    maxconn 4096\n    log /dev/log local0\n    chroot /var/lib/haproxy\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    log global\n    mode http\n    option httplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend jupyter-lab_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/jupyter-lab.pem\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    http-response set-header X-Content-Type-Options nosniff\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    \n    default_backend jupyter-lab_backend\n\nbackend jupyter-lab_backend\n    balance roundrobin\n    option httpchk GET /health\n    server jupyter-lab1 127.0.0.1:8888 check</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddy\">jupyter-lab.example.com {\n    reverse_proxy 127.0.0.1:8888 {\n        header_up Host {upstream_hostport}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    header {\n        Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n        X-Content-Type-Options nosniff\n        X-Frame-Options SAMEORIGIN\n        X-XSS-Protection &quot;1; mode=block&quot;\n    }\n    \n    encode gzip\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dedicated user\nsudo useradd --system --shell /bin/false --home /etc/jupyter jupyter-lab || true\n\n# Set ownership\nsudo chown -R jupyter-lab:jupyter-lab /etc/jupyter\nsudo chown -R jupyter-lab:jupyter-lab /var/log/jupyter\n\n# Set permissions\nsudo chmod 750 /etc/jupyter\nsudo chmod 640 /etc/jupyter/*\nsudo chmod 750 /var/log/jupyter\n\n# Configure firewall (UFW)\nsudo ufw allow from any to any port 8888 proto tcp comment &quot;Jupyter Lab&quot;\n\n# Configure firewall (firewalld)\nsudo firewall-cmd --permanent --new-service=jupyter-lab\nsudo firewall-cmd --permanent --service=jupyter-lab --add-port={default_port}/tcp\nsudo firewall-cmd --permanent --add-service=jupyter-lab\nsudo firewall-cmd --reload\n\n# SELinux configuration (if enabled)\nsudo setsebool -P httpd_can_network_connect on\nsudo semanage port -a -t http_port_t -p tcp 8888 || true</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate (for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/jupyter-lab.key \\\n    -out /etc/ssl/certs/jupyter-lab.crt \\\n    -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=jupyter-lab.example.com&quot;\n\n# Set proper permissions\nsudo chmod 600 /etc/ssl/private/jupyter-lab.key\nsudo chmod 644 /etc/ssl/certs/jupyter-lab.crt\n\n# For production, use Let&#039;s Encrypt\nsudo certbot certonly --standalone -d jupyter-lab.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"fail2ban-configuration\" class=\"mobile-header\">Fail2ban Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/jail.d/jupyter-lab.conf\n[jupyter-lab]\nenabled = true\nport = 8888\nfilter = jupyter-lab\nlogpath = /var/log/jupyter/*.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># /etc/fail2ban/filter.d/jupyter-lab.conf\n[Definition]\nfailregex = ^.*Failed login attempt.*from &lt;HOST&gt;.*$\n            ^.*Authentication failed.*from &lt;HOST&gt;.*$\n            ^.*Invalid credentials.*from &lt;HOST&gt;.*$\nignoreregex =</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE jupyter-lab_db;\nCREATE USER jupyter-lab_user WITH ENCRYPTED PASSWORD &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON DATABASE jupyter-lab_db TO jupyter-lab_user;\n\\q\nEOF\n\n# Configure connection in Jupyter Lab\necho &quot;DATABASE_URL=postgresql://jupyter-lab_user:secure_password_here@localhost/jupyter-lab_db&quot; | \\\n  sudo tee -a /etc/jupyter/jupyter-lab.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE jupyter-lab_db CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;jupyter-lab_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password_here&#039;;\nGRANT ALL PRIVILEGES ON jupyter-lab_db.* TO &#039;jupyter-lab_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Configure connection\necho &quot;DATABASE_URL=mysql://jupyter-lab_user:secure_password_here@localhost/jupyter-lab_db&quot; | \\\n  sudo tee -a /etc/jupyter/jupyter-lab.env</code></pre>\n      </div>\n    </div>\n<h3 id=\"sqlite-backend-if-applicable\" class=\"mobile-header\">SQLite Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database directory\nsudo mkdir -p /var/lib/jupyter-lab\nsudo chown jupyter-lab:jupyter-lab /var/lib/jupyter-lab\n\n# Initialize database\nsudo -u jupyter-lab jupyter-lab init-db</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters for better performance\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/sysctl.conf\n# Network performance tuning\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_tw_reuse = 1\n\n# Memory tuning\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\n# Apply settings\nsudo sysctl -p\n\n# Configure system limits\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/security/limits.conf\njupyter-lab soft nofile 65535\njupyter-lab hard nofile 65535\njupyter-lab soft nproc 32768\njupyter-lab hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-tuning\" class=\"mobile-header\">Application Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure application-specific performance settings\ncat &lt;&lt; &#039;EOF&#039; | sudo tee -a /etc/jupyter/performance.conf\n# Performance configuration\nc.NotebookApp.max_buffer_size = 536870912\n\n# Connection pooling\nmax_connections = 1000\nconnection_timeout = 30\n\n# Cache settings\ncache_size = 256M\ncache_ttl = 3600\n\n# Worker processes\nworkers = 4\nthreads_per_worker = 4\nEOF\n\n# Restart to apply settings\nsudo systemctl restart jupyter</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># /etc/prometheus/prometheus.yml\nscrape_configs:\n  - job_name: &#039;jupyter-lab&#039;\n    static_configs:\n      - targets: [&#039;localhost:8888/metrics&#039;]\n    metrics_path: &#039;/metrics&#039;\n    scrape_interval: 30s</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-script\" class=\"mobile-header\">Health Check Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/jupyter-lab-health\n\n# Check if service is running\nif ! systemctl is-active --quiet jupyter; then\n    echo &quot;CRITICAL: Jupyter Lab service is not running&quot;\n    exit 2\nfi\n\n# Check if port is listening\nif ! nc -z localhost 8888 2&gt;/dev/null; then\n    echo &quot;CRITICAL: Jupyter Lab is not listening on port 8888&quot;\n    exit 2\nfi\n\n# Check response time\nresponse_time=$(curl -o /dev/null -s -w &#039;%{time_total}&#039; http://localhost:8888/health || echo &quot;999&quot;)\nif (( $(echo &quot;$response_time &gt; 5&quot; | bc -l) )); then\n    echo &quot;WARNING: Slow response time: ${response_time}s&quot;\n    exit 1\nfi\n\necho &quot;OK: Jupyter Lab is healthy (response time: ${response_time}s)&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\ncat &lt;&lt; &#039;EOF&#039; | sudo tee /etc/logrotate.d/jupyter-lab\n/var/log/jupyter/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 jupyter-lab jupyter-lab\n    postrotate\n        systemctl reload jupyter &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF\n\n# Test log rotation\nsudo logrotate -d /etc/logrotate.d/jupyter-lab</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/jupyter-lab-backup\n\nBACKUP_DIR=&quot;/backup/jupyter-lab&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/jupyter-lab_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if needed for consistency)\necho &quot;Stopping Jupyter Lab service...&quot;\nsystemctl stop jupyter\n\n# Backup configuration\necho &quot;Backing up configuration...&quot;\ntar -czf &quot;$BACKUP_FILE&quot; \\\n    /etc/jupyter \\\n    /var/lib/jupyter-lab \\\n    /var/log/jupyter\n\n# Backup database (if applicable)\nif command -v pg_dump &amp;&gt; /dev/null; then\n    echo &quot;Backing up database...&quot;\n    sudo -u postgres pg_dump jupyter-lab_db | gzip &gt; &quot;$BACKUP_DIR/jupyter-lab_db_$DATE.sql.gz&quot;\nfi\n\n# Start service\necho &quot;Starting Jupyter Lab service...&quot;\nsystemctl start jupyter\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.sql.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_FILE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# /usr/local/bin/jupyter-lab-restore\n\nif [ $# -ne 1 ]; then\n    echo &quot;Usage: $0 &lt;backup_file&gt;&quot;\n    exit 1\nfi\n\nBACKUP_FILE=&quot;$1&quot;\n\nif [ ! -f &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Error: Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\n# Stop service\necho &quot;Stopping Jupyter Lab service...&quot;\nsystemctl stop jupyter\n\n# Restore files\necho &quot;Restoring from backup...&quot;\ntar -xzf &quot;$BACKUP_FILE&quot; -C /\n\n# Restore database (if applicable)\nDB_BACKUP=$(echo &quot;$BACKUP_FILE&quot; | sed &#039;s/.tar.gz$/_db.sql.gz/&#039;)\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;Restoring database...&quot;\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql jupyter-lab_db\nfi\n\n# Fix permissions\nchown -R jupyter-lab:jupyter-lab /etc/jupyter\nchown -R jupyter-lab:jupyter-lab /var/lib/jupyter-lab\n\n# Start service\necho &quot;Starting Jupyter Lab service...&quot;\nsystemctl start jupyter\n\necho &quot;Restore completed successfully&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status and logs\nsudo systemctl status jupyter\nsudo journalctl -u jupyter -n 100 --no-pager\n\n# Check for port conflicts\nsudo ss -tlnp | grep 8888\nsudo lsof -i :8888\n\n# Verify configuration\nsudo jupyter-lab --test || sudo jupyter configtest\n\n# Check permissions\nls -la /etc/jupyter\nls -la /var/log/jupyter</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Cannot access web interface</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep jupyter\ncurl -I http://localhost:8888\n\n# Check firewall rules\nsudo firewall-cmd --list-all\nsudo iptables -L -n | grep 8888\n\n# Check SELinux (if enabled)\ngetenforce\nsudo ausearch -m avc -ts recent | grep jupyter-lab</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>High memory/CPU usage</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor resource usage\ntop -p $(pgrep jupyter-lab)\nhtop -p $(pgrep jupyter-lab)\n\n# Check for memory leaks\nps aux | grep jupyter-lab\ncat /proc/$(pgrep jupyter-lab)/status | grep -i vm\n\n# Analyze logs for errors\ngrep -i error /var/log/jupyter/*.log | tail -50</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Database connection errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test database connection\npsql -U jupyter-lab_user -d jupyter-lab_db -c &quot;SELECT 1;&quot;\nmysql -u jupyter-lab_user -p jupyter-lab_db -e &quot;SELECT 1;&quot;\n\n# Check database service\nsudo systemctl status postgresql\nsudo systemctl status mariadb</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &quot;debug = true&quot; | sudo tee -a /etc/jupyter/jupyter-lab.conf\n\n# Restart with debug mode\nsudo systemctl stop jupyter\nsudo -u jupyter-lab jupyter-lab --debug\n\n# Watch debug logs\ntail -f /var/log/jupyter/debug.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-analysis\" class=\"mobile-header\">Performance Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Profile CPU usage\nsudo perf record -p $(pgrep jupyter-lab) sleep 30\nsudo perf report\n\n# Analyze network traffic\nsudo tcpdump -i any -w /tmp/jupyter-lab.pcap port 8888\nsudo tcpdump -r /tmp/jupyter-lab.pcap -nn\n\n# Monitor disk I/O\nsudo iotop -p $(pgrep jupyter-lab)</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-deployment\" class=\"mobile-header\">Docker Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml\nversion: &#039;3.8&#039;\n\nservices:\n  jupyter-lab:\n    image: jupyter-lab:jupyter-lab\n    container_name: jupyter-lab\n    restart: unless-stopped\n    ports:\n      - &quot;8888:8888&quot;\n    environment:\n      - TZ=UTC\n      - PUID=1000\n      - PGID=1000\n    volumes:\n      - ./config:/etc/jupyter\n      - ./data:/var/lib/jupyter-lab\n      - ./logs:/var/log/jupyter\n    networks:\n      - jupyter-lab_network\n    healthcheck:\n      test: [&quot;CMD&quot;, &quot;curl&quot;, &quot;-f&quot;, &quot;http://localhost:8888/health&quot;]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\nnetworks:\n  jupyter-lab_network:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># jupyter-lab-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: jupyter-lab\n  labels:\n    app: jupyter-lab\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: jupyter-lab\n  template:\n    metadata:\n      labels:\n        app: jupyter-lab\n    spec:\n      containers:\n      - name: jupyter-lab\n        image: jupyter-lab:jupyter-lab\n        ports:\n        - containerPort: 8888\n        env:\n        - name: TZ\n          value: UTC\n        volumeMounts:\n        - name: config\n          mountPath: /etc/jupyter\n        - name: data\n          mountPath: /var/lib/jupyter-lab\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8888\n          initialDelaySeconds: 30\n          periodSeconds: 30\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8888\n          initialDelaySeconds: 5\n          periodSeconds: 10\n      volumes:\n      - name: config\n        configMap:\n          name: jupyter-lab-config\n      - name: data\n        persistentVolumeClaim:\n          claimName: jupyter-lab-data\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: jupyter-lab\nspec:\n  selector:\n    app: jupyter-lab\n  ports:\n  - protocol: TCP\n    port: 8888\n    targetPort: 8888\n  type: LoadBalancer\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: jupyter-lab-data\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n# jupyter-lab-playbook.yml\n- name: Install and configure Jupyter Lab\n  hosts: all\n  become: yes\n  vars:\n    jupyter-lab_version: latest\n    jupyter-lab_port: 8888\n    jupyter-lab_config_dir: /etc/jupyter\n  \n  tasks:\n    - name: Install dependencies\n      package:\n        name:\n          - python3, python3-pip, nodejs\n        state: present\n    \n    - name: Install Jupyter Lab\n      package:\n        name: jupyter-lab\n        state: present\n    \n    - name: Create configuration directory\n      file:\n        path: &quot;{{ jupyter-lab_config_dir }}&quot;\n        state: directory\n        owner: jupyter-lab\n        group: jupyter-lab\n        mode: &#039;0750&#039;\n    \n    - name: Deploy configuration\n      template:\n        src: jupyter-lab.conf.j2\n        dest: &quot;{{ jupyter-lab_config_dir }}/jupyter-lab.conf&quot;\n        owner: jupyter-lab\n        group: jupyter-lab\n        mode: &#039;0640&#039;\n      notify: restart jupyter-lab\n    \n    - name: Start and enable service\n      systemd:\n        name: jupyter\n        state: started\n        enabled: yes\n        daemon_reload: yes\n    \n    - name: Configure firewall\n      firewalld:\n        port: &quot;{{ jupyter-lab_port }}/tcp&quot;\n        permanent: yes\n        immediate: yes\n        state: enabled\n  \n  handlers:\n    - name: restart jupyter-lab\n      systemd:\n        name: jupyter\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-configuration\" class=\"mobile-header\">Terraform Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"hcl\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">hcl</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-hcl\"># jupyter-lab.tf\nresource &quot;aws_instance&quot; &quot;jupyter-lab_server&quot; {\n  ami           = var.ami_id\n  instance_type = &quot;t3.medium&quot;\n  \n  vpc_security_group_ids = [aws_security_group.jupyter-lab.id]\n  \n  user_data = &lt;&lt;-EOF\n    #!/bin/bash\n    # Install Jupyter Lab\n    apt-get update\n    apt-get install -y jupyter-lab python3, python3-pip, nodejs\n    \n    # Configure Jupyter Lab\n    systemctl enable jupyter\n    systemctl start jupyter\n  EOF\n  \n  tags = {\n    Name = &quot;Jupyter Lab Server&quot;\n    Application = &quot;Jupyter Lab&quot;\n  }\n}\n\nresource &quot;aws_security_group&quot; &quot;jupyter-lab&quot; {\n  name        = &quot;jupyter-lab-sg&quot;\n  description = &quot;Security group for Jupyter Lab&quot;\n  \n  ingress {\n    from_port   = 8888\n    to_port     = 8888\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n  \n  tags = {\n    Name = &quot;Jupyter Lab Security Group&quot;\n  }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update jupyter-lab\nsudo dnf update jupyter-lab\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade jupyter-lab\n\n# Arch Linux\nsudo pacman -Syu jupyter-lab\n\n# Alpine Linux\napk update\napk upgrade jupyter-lab\n\n# openSUSE\nsudo zypper ref\nsudo zypper update jupyter-lab\n\n# FreeBSD\npkg update\npkg upgrade jupyter-lab\n\n# Always backup before updates\n/usr/local/bin/jupyter-lab-backup\n\n# Restart after updates\nsudo systemctl restart jupyter</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean old logs\nfind /var/log/jupyter -name &quot;*.log&quot; -mtime +30 -delete\n\n# Vacuum database (if PostgreSQL)\nsudo -u postgres vacuumdb --analyze jupyter-lab_db\n\n# Check disk usage\ndf -h | grep -E &quot;(/$|jupyter-lab)&quot;\ndu -sh /var/lib/jupyter-lab\n\n# Update security patches\nsudo unattended-upgrade -d\n\n# Review security logs\nsudo aureport --summary\nsudo journalctl -u jupyter | grep -i &quot;error\\|fail\\|deny&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring-checklist\" class=\"mobile-header\">Health Monitoring Checklist</h3>\n<li class=\"mobile-list-item\">[ ] Service is running and enabled</li>\n<li class=\"mobile-list-item\">[ ] Web interface is accessible</li>\n<li class=\"mobile-list-item\">[ ] Database connections are healthy</li>\n<li class=\"mobile-list-item\">[ ] Disk usage is below 80%</li>\n<li class=\"mobile-list-item\">[ ] No critical errors in logs</li>\n<li class=\"mobile-list-item\">[ ] Backups are running successfully</li>\n<li class=\"mobile-list-item\">[ ] SSL certificates are valid</li>\n<li class=\"mobile-list-item\">[ ] Security updates are applied</li>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.jupyter-lab.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/jupyter-lab/jupyter-lab</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.jupyter-lab.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.jupyter-lab.org/</li>\n<li class=\"mobile-list-item\">Docker Hub: https://hub.docker.com/r/jupyter-lab/jupyter-lab</li>\n<li class=\"mobile-list-item\">Security Advisories: https://security.jupyter-lab.org/</li>\n<li class=\"mobile-list-item\">Best Practices: https://docs.jupyter-lab.org/best-practices</li>\n<li class=\"mobile-list-item\">API Documentation: https://api.jupyter-lab.org/</li>\n<li class=\"mobile-list-item\">Comparison with RStudio, VS Code, Google Colab, Spyder: https://docs.jupyter-lab.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"16 min","wordCount":3135,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"High Availability Setup","id":"high-availability-setup"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":3,"text":"Caddy Configuration","id":"caddy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":3,"text":"Fail2ban Configuration","id":"fail2ban-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":3,"text":"SQLite Backend (if applicable)","id":"sqlite-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Application Tuning","id":"application-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Check Script","id":"health-check-script"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Script","id":"restore-script"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":3,"text":"Performance Analysis","id":"performance-analysis"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Deployment","id":"docker-deployment"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":3,"text":"Terraform Configuration","id":"terraform-configuration"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":3,"text":"Health Monitoring Checklist","id":"health-monitoring-checklist"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-27T18:14:55.139Z","metadataVersion":"2.0"},{"name":"kubeflow","displayName":"kubeflow Installation Guide","slug":"kubeflow","description":"kubeflow is a free and open-source ML platform. Kubeflow provides ML workflows on Kubernetes","category":"data-science","subcategory":"data-science","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["data-science","containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/data-science/kubeflow","documentationUrl":"https://howtomgr.github.io/data-science/kubeflow","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/kubeflow","updatedAt":"2025-09-16T17:25:44Z","createdAt":"2025-09-16T03:32:43Z","readmeRaw":"# kubeflow Installation Guide\n\nkubeflow is a free and open-source ML platform. Kubeflow provides ML workflows on Kubernetes\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 8+ cores\n  - RAM: 16GB minimum\n  - Storage: 100GB for models\n  - Network: HTTP/gRPC\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default kubeflow port)\n  - Various services\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install kubeflow\nsudo dnf install -y kubeflow\n\n# Enable and start service\nsudo systemctl enable --now kubeflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nkubeflow --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install kubeflow\nsudo apt install -y kubeflow\n\n# Enable and start service\nsudo systemctl enable --now kubeflow\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nkubeflow --version\n```\n\n### Arch Linux\n\n```bash\n# Install kubeflow\nsudo pacman -S kubeflow\n\n# Enable and start service\nsudo systemctl enable --now kubeflow\n\n# Verify installation\nkubeflow --version\n```\n\n### Alpine Linux\n\n```bash\n# Install kubeflow\napk add --no-cache kubeflow\n\n# Enable and start service\nrc-update add kubeflow default\nrc-service kubeflow start\n\n# Verify installation\nkubeflow --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install kubeflow\nsudo zypper install -y kubeflow\n\n# Enable and start service\nsudo systemctl enable --now kubeflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nkubeflow --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install kubeflow\n\n# Start service\nbrew services start kubeflow\n\n# Verify installation\nkubeflow --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install kubeflow\n\n# Enable in rc.conf\necho 'kubeflow_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice kubeflow start\n\n# Verify installation\nkubeflow --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install kubeflow\n\n# Or using Scoop\nscoop install kubeflow\n\n# Verify installation\nkubeflow --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/kubeflow\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nkubeflow --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable kubeflow\n\n# Start service\nsudo systemctl start kubeflow\n\n# Stop service\nsudo systemctl stop kubeflow\n\n# Restart service\nsudo systemctl restart kubeflow\n\n# Check status\nsudo systemctl status kubeflow\n\n# View logs\nsudo journalctl -u kubeflow -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add kubeflow default\n\n# Start service\nrc-service kubeflow start\n\n# Stop service\nrc-service kubeflow stop\n\n# Restart service\nrc-service kubeflow restart\n\n# Check status\nrc-service kubeflow status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'kubeflow_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice kubeflow start\n\n# Stop service\nservice kubeflow stop\n\n# Restart service\nservice kubeflow restart\n\n# Check status\nservice kubeflow status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start kubeflow\nbrew services stop kubeflow\nbrew services restart kubeflow\n\n# Check status\nbrew services list | grep kubeflow\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start kubeflow\n\n# Stop service\nnet stop kubeflow\n\n# Using PowerShell\nStart-Service kubeflow\nStop-Service kubeflow\nRestart-Service kubeflow\n\n# Check status\nGet-Service kubeflow\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream kubeflow_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name kubeflow.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name kubeflow.example.com;\n\n    ssl_certificate /etc/ssl/certs/kubeflow.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/kubeflow.example.com.key;\n\n    location / {\n        proxy_pass http://kubeflow_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName kubeflow.example.com\n    Redirect permanent / https://kubeflow.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName kubeflow.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/kubeflow.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/kubeflow.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend kubeflow_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/kubeflow.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend kubeflow_backend\n\nbackend kubeflow_backend\n    balance roundrobin\n    server kubeflow1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R kubeflow:kubeflow /etc/kubeflow\nsudo chmod 750 /etc/kubeflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status kubeflow\n\n# View logs\nsudo journalctl -u kubeflow -f\n\n# Monitor resource usage\ntop -p $(pgrep kubeflow)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/kubeflow\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/kubeflow-backup-$DATE.tar.gz\" /etc/kubeflow /var/lib/kubeflow\n\necho \"Backup completed: $BACKUP_DIR/kubeflow-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop kubeflow\n\n# Restore from backup\ntar -xzf /backup/kubeflow/kubeflow-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start kubeflow\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u kubeflow -n 100\nsudo tail -f /var/log/kubeflow/kubeflow.log\n\n# Check configuration\nkubeflow --version\n\n# Check permissions\nls -la /etc/kubeflow\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep kubeflow)\n\n# Check disk I/O\niotop -p $(pgrep kubeflow)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  kubeflow:\n    image: kubeflow:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/kubeflow\n      - ./data:/var/lib/kubeflow\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update kubeflow\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade kubeflow\n\n# Arch Linux\nsudo pacman -Syu kubeflow\n\n# Alpine Linux\napk update && apk upgrade kubeflow\n\n# openSUSE\nsudo zypper update kubeflow\n\n# FreeBSD\npkg update && pkg upgrade kubeflow\n\n# Always backup before updates\ntar -czf /backup/kubeflow-pre-update-$(date +%Y%m%d).tar.gz /etc/kubeflow\n\n# Restart after updates\nsudo systemctl restart kubeflow\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/kubeflow\n\n# Clean old logs\nfind /var/log/kubeflow -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/kubeflow\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.kubeflow.org/\n- GitHub Repository: https://github.com/kubeflow/kubeflow\n- Community Forum: https://forum.kubeflow.org/\n- Best Practices Guide: https://docs.kubeflow.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">kubeflow is a free and open-source ML platform. Kubeflow provides ML workflows on Kubernetes</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 8+ cores</li>\n<li class=\"mobile-list-item\">RAM: 16GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100GB for models</li>\n<li class=\"mobile-list-item\">Network: HTTP/gRPC</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default kubeflow port)</li>\n<li class=\"mobile-list-item\">Various services</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install kubeflow\nsudo dnf install -y kubeflow\n\n# Enable and start service\nsudo systemctl enable --now kubeflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nkubeflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install kubeflow\nsudo apt install -y kubeflow\n\n# Enable and start service\nsudo systemctl enable --now kubeflow\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nkubeflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install kubeflow\nsudo pacman -S kubeflow\n\n# Enable and start service\nsudo systemctl enable --now kubeflow\n\n# Verify installation\nkubeflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install kubeflow\napk add --no-cache kubeflow\n\n# Enable and start service\nrc-update add kubeflow default\nrc-service kubeflow start\n\n# Verify installation\nkubeflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install kubeflow\nsudo zypper install -y kubeflow\n\n# Enable and start service\nsudo systemctl enable --now kubeflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nkubeflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install kubeflow\n\n# Start service\nbrew services start kubeflow\n\n# Verify installation\nkubeflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install kubeflow\n\n# Enable in rc.conf\necho &#039;kubeflow_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice kubeflow start\n\n# Verify installation\nkubeflow --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install kubeflow\n\n# Or using Scoop\nscoop install kubeflow\n\n# Verify installation\nkubeflow --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/kubeflow\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nkubeflow --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable kubeflow\n\n# Start service\nsudo systemctl start kubeflow\n\n# Stop service\nsudo systemctl stop kubeflow\n\n# Restart service\nsudo systemctl restart kubeflow\n\n# Check status\nsudo systemctl status kubeflow\n\n# View logs\nsudo journalctl -u kubeflow -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add kubeflow default\n\n# Start service\nrc-service kubeflow start\n\n# Stop service\nrc-service kubeflow stop\n\n# Restart service\nrc-service kubeflow restart\n\n# Check status\nrc-service kubeflow status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;kubeflow_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice kubeflow start\n\n# Stop service\nservice kubeflow stop\n\n# Restart service\nservice kubeflow restart\n\n# Check status\nservice kubeflow status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start kubeflow\nbrew services stop kubeflow\nbrew services restart kubeflow\n\n# Check status\nbrew services list | grep kubeflow</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start kubeflow\n\n# Stop service\nnet stop kubeflow\n\n# Using PowerShell\nStart-Service kubeflow\nStop-Service kubeflow\nRestart-Service kubeflow\n\n# Check status\nGet-Service kubeflow</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream kubeflow_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name kubeflow.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name kubeflow.example.com;\n\n    ssl_certificate /etc/ssl/certs/kubeflow.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/kubeflow.example.com.key;\n\n    location / {\n        proxy_pass http://kubeflow_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName kubeflow.example.com\n    Redirect permanent / https://kubeflow.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName kubeflow.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/kubeflow.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/kubeflow.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend kubeflow_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/kubeflow.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend kubeflow_backend\n\nbackend kubeflow_backend\n    balance roundrobin\n    server kubeflow1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R kubeflow:kubeflow /etc/kubeflow\nsudo chmod 750 /etc/kubeflow\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status kubeflow\n\n# View logs\nsudo journalctl -u kubeflow -f\n\n# Monitor resource usage\ntop -p $(pgrep kubeflow)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/kubeflow&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/kubeflow-backup-$DATE.tar.gz&quot; /etc/kubeflow /var/lib/kubeflow\n\necho &quot;Backup completed: $BACKUP_DIR/kubeflow-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop kubeflow\n\n# Restore from backup\ntar -xzf /backup/kubeflow/kubeflow-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start kubeflow</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u kubeflow -n 100\nsudo tail -f /var/log/kubeflow/kubeflow.log\n\n# Check configuration\nkubeflow --version\n\n# Check permissions\nls -la /etc/kubeflow</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep kubeflow)\n\n# Check disk I/O\niotop -p $(pgrep kubeflow)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  kubeflow:\n    image: kubeflow:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/kubeflow\n      - ./data:/var/lib/kubeflow\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update kubeflow\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade kubeflow\n\n# Arch Linux\nsudo pacman -Syu kubeflow\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade kubeflow\n\n# openSUSE\nsudo zypper update kubeflow\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade kubeflow\n\n# Always backup before updates\ntar -czf /backup/kubeflow-pre-update-$(date +%Y%m%d).tar.gz /etc/kubeflow\n\n# Restart after updates\nsudo systemctl restart kubeflow</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/kubeflow\n\n# Clean old logs\nfind /var/log/kubeflow -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/kubeflow</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.kubeflow.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/kubeflow/kubeflow</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.kubeflow.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.kubeflow.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1265,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-27T18:14:44.970Z","metadataVersion":"2.0"}]},"__N_SSG":true}