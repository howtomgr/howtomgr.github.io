{"pageProps":{"guide":{"name":"jenkins","displayName":"Jenkins","slug":"jenkins","description":"Repo for jenkins","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jenkins","updatedAt":"2025-09-14T03:45:21Z","createdAt":"2023-08-28T03:48:15Z","readmeRaw":"# Jenkins Installation Guide\n\nJenkins is a free and open-source automation server for building, testing, and deploying applications. Originally developed by Kohsuke Kawaguchi and now maintained by the Jenkins community, Jenkins is the industry-leading CI/CD platform with extensive plugin ecosystem and enterprise-grade features. It serves as a FOSS alternative to commercial CI/CD solutions like TeamCity, GitLab CI Premium, or Azure DevOps Server, offering unlimited build minutes, unlimited private repositories, and advanced pipeline capabilities without licensing costs, with features like distributed builds, Pipeline as Code, and extensive plugin ecosystem.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended for production)\n  - RAM: 2GB minimum (8GB+ recommended for production)\n  - Storage: 50GB minimum (SSD recommended for build performance)\n  - Network: Stable connectivity for agent communication and external integrations\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.2+\n  - macOS: 10.13+ (High Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8080 (default Jenkins HTTP)\n  - Port 50000 (default Jenkins agent communication)\n  - Additional ports for external integrations (webhooks, etc.)\n- **Dependencies**:\n  - Java 11 or 17 LTS (OpenJDK recommended)\n  - systemd or compatible init system (Linux)\n  - Root or administrative access for installation\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install Java 17 LTS\nsudo dnf install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\ncurl -fsSL https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key | sudo tee /etc/yum.repos.d/jenkins.io.key\n\nsudo tee /etc/yum.repos.d/jenkins.repo <<EOF\n[jenkins]\nname=Jenkins-stable\nbaseurl=http://pkg.jenkins.io/redhat-stable\ngpgcheck=1\ngpgkey=file:///etc/yum.repos.d/jenkins.io.key\nenabled=1\nEOF\n\n# Install Jenkins\nsudo dnf install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update system packages\nsudo apt update\n\n# Install Java 17 LTS\nsudo apt install -y openjdk-17-jdk openjdk-17-jre\n\n# Add Jenkins repository\nwget -O /tmp/jenkins-key.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key\nsudo mv /tmp/jenkins-key.asc /etc/apt/trusted.gpg.d/jenkins.asc\n\necho \"deb https://pkg.jenkins.io/debian-stable binary/\" | sudo tee /etc/apt/sources.list.d/jenkins.list\n\n# Update package index\nsudo apt update\n\n# Install Jenkins\nsudo apt install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo ufw allow 8080/tcp\nsudo ufw allow 50000/tcp\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n### Arch Linux\n\n```bash\n# Install Java 17 LTS\nsudo pacman -S jdk17-openjdk\n\n# Install Jenkins from AUR\nyay -S jenkins\n\n# Alternative: Install manually from AUR\ngit clone https://aur.archlinux.org/jenkins.git\ncd jenkins\nmakepkg -si\n\n# Create jenkins user if not created\nsudo useradd -r -d /var/lib/jenkins -s /sbin/nologin jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /etc/jenkins/\n```\n\n### Alpine Linux\n\n```bash\n# Jenkins is not officially packaged for Alpine Linux\n# Use Docker or manual installation\n\n# Method 1: Docker installation\napk add --no-cache docker docker-compose\nrc-update add docker default\nrc-service docker start\n\n# Create Jenkins data directory\nmkdir -p /var/lib/jenkins\n\n# Run Jenkins container\ndocker run -d \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  -v /var/lib/jenkins:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  --group-add $(getent group docker | cut -d: -f3) \\\n  jenkins/jenkins:lts-jdk17\n\n# Get initial admin password\ndocker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n\n# Method 2: Manual installation with OpenJDK\napk add --no-cache openjdk17-jre-headless\nwget https://get.jenkins.io/war-stable/latest/jenkins.war -O /opt/jenkins.war\n\n# Create jenkins user and directories\nadduser -D -s /sbin/nologin jenkins\nmkdir -p /var/lib/jenkins /var/log/jenkins\nchown -R jenkins:jenkins /var/lib/jenkins /var/log/jenkins\n\n# Create init script\ntee /etc/init.d/jenkins <<'EOF'\n#!/sbin/openrc-run\nname=\"Jenkins\"\ncommand=\"java\"\ncommand_args=\"-jar /opt/jenkins.war --httpPort=8080 --ajp13Port=-1\"\ncommand_user=\"jenkins\"\npidfile=\"/run/jenkins.pid\"\ncommand_background=\"yes\"\ndepend() {\n    need net\n}\nEOF\n\nchmod +x /etc/init.d/jenkins\nrc-update add jenkins default\nrc-service jenkins start\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\nsudo zypper addrepo -G https://pkg.jenkins.io/opensuse-stable/ jenkins\nsudo zypper refresh\n\n# Install Jenkins\nsudo zypper install -y jenkins\n\n# SLES 15\nsudo SUSEConnect -p sle-module-development-tools/15.5/x86_64\nsudo zypper install -y java-17-openjdk jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install jenkins-lts\n\n# Start Jenkins service\nbrew services start jenkins-lts\n\n# Or run manually\njenkins-lts\n\n# Alternative: Install specific version\nbrew install jenkins-lts@2.414\n\n# Get initial admin password\ncat ~/.jenkins/secrets/initialAdminPassword\n\n# Configuration location: ~/.jenkins/\n# Alternative: /usr/local/var/jenkins_home/ (Intel Macs)\n# Alternative: /opt/homebrew/var/jenkins_home/ (Apple Silicon)\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install jenkins openjdk17\n\n# Using ports\ncd /usr/ports/devel/jenkins\nmake install clean\n\n# Enable Jenkins\necho 'jenkins_enable=\"YES\"' >> /etc/rc.conf\necho 'jenkins_java_home=\"/usr/local/openjdk17\"' >> /etc/rc.conf\n\n# Create jenkins user and directories\npw useradd jenkins -d /usr/local/jenkins -s /sbin/nologin\nmkdir -p /usr/local/jenkins\nchown jenkins:jenkins /usr/local/jenkins\n\n# Start service\nservice jenkins start\n\n# Get initial admin password\ncat /usr/local/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /usr/local/jenkins/\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install jenkins\n\n# Method 2: Using Scoop\nscoop install jenkins\n\n# Method 3: Manual installation\n# Download from https://www.jenkins.io/download/\n# Run jenkins.msi installer\n\n# Method 4: Windows service installation\n# Download jenkins.war\n# Install as Windows service\njava -jar jenkins.war --httpPort=8080 --install\n\n# Start service\nnet start Jenkins\n\n# Get initial admin password\nGet-Content \"C:\\Program Files\\Jenkins\\secrets\\initialAdminPassword\"\n\n# Configuration location: C:\\Program Files\\Jenkins\\\n# Or: %JENKINS_HOME% (if custom location)\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Java Environment Setup**:\n```bash\n# Set JAVA_HOME (Linux/macOS)\nexport JAVA_HOME=/usr/lib/jvm/java-17-openjdk\necho 'export JAVA_HOME=/usr/lib/jvm/java-17-openjdk' >> ~/.bashrc\n\n# Verify Java installation\njava -version\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/var/lib/jenkins/`, `/etc/sysconfig/jenkins`\n- Debian/Ubuntu: `/var/lib/jenkins/`, `/etc/default/jenkins`\n- Arch Linux: `/var/lib/jenkins/`, `/etc/jenkins/`\n- Alpine Linux: `/var/lib/jenkins/` (Docker) or `/var/lib/jenkins/` (manual)\n- openSUSE/SLES: `/var/lib/jenkins/`, `/etc/sysconfig/jenkins`\n- macOS: `~/.jenkins/` or `/usr/local/var/jenkins_home/`\n- FreeBSD: `/usr/local/jenkins/`\n- Windows: `C:\\Program Files\\Jenkins\\` or `%JENKINS_HOME%`\n\n3. **Essential initial configuration**:\n\n```bash\n# Initial web setup (after accessing http://your-server:8080)\n# 1. Enter admin password from: /var/lib/jenkins/secrets/initialAdminPassword\n# 2. Install suggested plugins or select specific plugins\n# 3. Create first admin user\n# 4. Configure Jenkins URL\n\n# Essential plugins to install:\n# - Pipeline plugins (Pipeline Suite)\n# - Git plugin\n# - Credentials Binding Plugin\n# - Build Timeout Plugin\n# - Timestamper Plugin\n# - Workspace Cleanup Plugin\n# - Blue Ocean (modern UI)\n# - Matrix Authorization Strategy Plugin\n```\n\n### Testing Initial Setup\n\n```bash\n# Check service status\nsudo systemctl status jenkins\n\n# Check web interface\ncurl -I http://localhost:8080\n\n# Test Java version\njava -version\n\n# Check Jenkins process\nps aux | grep jenkins\n\n# Verify Jenkins CLI\nwget http://localhost:8080/jnlpJars/jenkins-cli.jar\njava -jar jenkins-cli.jar -s http://localhost:8080 version\n\n# Check available plugins\njava -jar jenkins-cli.jar -s http://localhost:8080 list-plugins\n```\n\n**WARNING:** Change the default admin password immediately and configure proper authentication!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Jenkins to start on boot\nsudo systemctl enable jenkins\n\n# Start Jenkins\nsudo systemctl start jenkins\n\n# Stop Jenkins\nsudo systemctl stop jenkins\n\n# Restart Jenkins\nsudo systemctl restart jenkins\n\n# Graceful restart (wait for running builds)\nsudo systemctl reload jenkins\n\n# Check status\nsudo systemctl status jenkins\n\n# View logs\nsudo journalctl -u jenkins -f\n\n# Edit service configuration\nsudo systemctl edit jenkins\n# Add custom environment variables or JVM options\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Docker-based installation\ndocker start jenkins\ndocker stop jenkins\ndocker restart jenkins\n\n# Check container status\ndocker ps | grep jenkins\n\n# View logs\ndocker logs -f jenkins\n\n# Manual installation\nrc-update add jenkins default\nrc-service jenkins start\nrc-service jenkins stop\nrc-service jenkins restart\nrc-service jenkins status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'jenkins_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Jenkins\nservice jenkins start\n\n# Stop Jenkins\nservice jenkins stop\n\n# Restart Jenkins\nservice jenkins restart\n\n# Check status\nservice jenkins status\n\n# View logs\ntail -f /var/log/jenkins/jenkins.log\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start jenkins-lts\nbrew services stop jenkins-lts\nbrew services restart jenkins-lts\n\n# Check status\nbrew services list | grep jenkins\n\n# Manual control\njenkins-lts --httpPort=8080\n\n# View logs\ntail -f /usr/local/var/log/jenkins/jenkins.log\n```\n\n### Windows Service Manager\n\n```powershell\n# Start Jenkins service\nnet start Jenkins\n\n# Stop Jenkins service\nnet stop Jenkins\n\n# Using PowerShell\nStart-Service Jenkins\nStop-Service Jenkins\nRestart-Service Jenkins\n\n# Check status\nGet-Service Jenkins\n\n# View logs (Windows Event Log)\nGet-EventLog -LogName Application -Source Jenkins\n\n# Or check Jenkins logs\nGet-Content \"C:\\Program Files\\Jenkins\\logs\\jenkins.log\" -Tail 50 -Wait\n```\n\n## Advanced Configuration\n\n### High Availability Configuration\n\n```bash\n# Multi-master setup with shared storage\n# Method 1: Shared filesystem (NFS, GlusterFS)\nsudo mkdir -p /shared/jenkins\nsudo mount -t nfs nfs-server:/jenkins /shared/jenkins\n\n# Update Jenkins home\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JENKINS_HOME=/shared/jenkins\"\n\n# Method 2: Database-backed configuration\n# Install CloudBees Jenkins Enterprise plugins for HA\n# Configure external database (PostgreSQL recommended)\n\n# Agent configuration for load distribution\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml <<EOF\njenkins:\n  nodes:\n    - permanent:\n        name: \"linux-agent-1\"\n        remoteFS: \"/var/lib/jenkins\"\n        numExecutors: 4\n        launcher:\n          ssh:\n            host: \"agent1.example.com\"\n            credentialsId: \"ssh-agent-key\"\n    - permanent:\n        name: \"windows-agent-1\"\n        remoteFS: \"C:\\\\Jenkins\"\n        numExecutors: 2\n        launcher:\n          command:\n            command: \"java -jar agent.jar\"\nEOF\n```\n\n### Advanced Security Settings\n\n```bash\n# Configure Jenkins Configuration as Code (JCasC) for security\nsudo tee /var/lib/jenkins/casc_configs/security.yaml <<EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: \"ldaps://ldap.example.com:636\"\n          rootDN: \"DC=example,DC=com\"\n          userSearchBase: \"OU=Users\"\n          userSearch: \"(&(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))\"\n          groupSearchBase: \"OU=Groups\"\n          managerDN: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n          managerPasswordSecret: \"ldap-password\"\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: \"admin\"\n            permissions:\n              - \"Overall/Administer\"\n            assignments:\n              - \"jenkins-admins\"\n          - name: \"developer\"\n            permissions:\n              - \"Overall/Read\"\n              - \"Job/Build\"\n              - \"Job/Read\"\n            assignments:\n              - \"developers\"\n\nsecurity:\n  globalJobDslSecurityConfiguration:\n    useScriptSecurity: true\n  scriptApproval:\n    approvedSignatures:\n      - \"method java.lang.String trim\"\n      - \"staticMethod java.lang.System getProperty java.lang.String\"\n\nunclassified:\n  location:\n    adminAddress: \"jenkins@example.com\"\n    url: \"https://jenkins.example.com/\"\n    \n  mailer:\n    smtpHost: \"smtp.example.com\"\n    smtpPort: 587\n    charset: \"UTF-8\"\n    authentication:\n      username: \"jenkins@example.com\"\n      password: \"{AQAAABAAAAAQhudQr8JjwNNI9pj8oI3L2gE=}\"\n    useSsl: false\n    useTls: true\nEOF\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\n# /etc/nginx/sites-available/jenkins\nupstream jenkins {\n    server 127.0.0.1:8080 fail_timeout=0;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name jenkins.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jenkins.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jenkins.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.example.com/privkey.pem;\n    \n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n\n    client_max_body_size 100M;\n    \n    location / {\n        proxy_pass http://jenkins;\n        proxy_redirect default;\n        proxy_http_version 1.1;\n        \n        # Required headers for Jenkins\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        \n        # WebSocket support for Jenkins\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        \n        # Timeout settings\n        proxy_connect_timeout 90;\n        proxy_send_timeout 90;\n        proxy_read_timeout 90;\n        \n        proxy_buffering off;\n        proxy_request_buffering off;\n        proxy_max_temp_file_size 0;\n    }\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nfrontend jenkins_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/jenkins.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend jenkins_servers\n\nbackend jenkins_servers\n    mode http\n    balance roundrobin\n    option httpchk GET /login\n    http-check expect status 200\n    server jenkins1 127.0.0.1:8080 check inter 30s rise 2 fall 3\n    server jenkins2 127.0.0.1:8081 check inter 30s rise 2 fall 3 backup\n\n    # Headers for Jenkins\n    http-request set-header X-Forwarded-Proto https\n    http-request set-header X-Forwarded-Port %[dst_port]\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n```\n\n### Apache HTTP Server Configuration\n\n```apache\n# /etc/apache2/sites-available/jenkins.conf\n<VirtualHost *:80>\n    ServerName jenkins.example.com\n    Redirect permanent / https://jenkins.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName jenkins.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/jenkins.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/jenkins.example.com/privkey.pem\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    ProxyPreserveHost On\n    ProxyRequests Off\n    \n    ProxyPass / http://127.0.0.1:8080/ nocanon\n    ProxyPassReverse / http://127.0.0.1:8080/\n    ProxyPassReverse  /  http://jenkins.example.com/\n    \n    # WebSocket support\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:8080/$1\" [P,L]\n    \n    AllowEncodedSlashes NoDecode\n</VirtualHost>\n```\n\n## Security Configuration\n\n### SSL/TLS Setup\n\n```bash\n# Generate self-signed certificate (development only)\nsudo mkdir -p /etc/jenkins/ssl\nsudo openssl req -x509 -newkey rsa:4096 -keyout /etc/jenkins/ssl/jenkins.key -out /etc/jenkins/ssl/jenkins.crt -days 365 -nodes -subj \"/C=US/ST=State/L=City/O=Organization/CN=jenkins.example.com\"\n\n# Create Java keystore\nsudo keytool -genkey -alias jenkins -keyalg RSA -keystore /etc/jenkins/ssl/jenkins.jks -keysize 2048 -dname \"CN=jenkins.example.com,OU=IT,O=Organization,L=City,ST=State,C=US\" -storepass changeit -keypass changeit\n\n# Configure Jenkins to use HTTPS\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JENKINS_OPTS=--httpPort=-1 --httpsPort=8443 --httpsKeyStore=/etc/jenkins/ssl/jenkins.jks --httpsKeyStorePassword=changeit\"\n\nsudo systemctl restart jenkins\n\n# Or use Let's Encrypt with reverse proxy (recommended)\nsudo certbot --nginx -d jenkins.example.com\n```\n\n### Authentication and Authorization\n\n```bash\n# Configure LDAP authentication via JCasC\nsudo tee /var/lib/jenkins/casc_configs/auth.yaml <<EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: \"ldaps://ldap.example.com:636\"\n          rootDN: \"DC=example,DC=com\"\n          inhibitInferRootDN: false\n          userSearchBase: \"OU=Users\"\n          userSearch: \"(&(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))\"\n          groupSearchBase: \"OU=Groups\"\n          groupSearchFilter: \"(&(objectClass=group)(cn={0}))\"\n          managerDN: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n          managerPasswordSecret: \"ldap-password\"\n          displayNameAttributeName: \"displayName\"\n          mailAddressAttributeName: \"mail\"\n\n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: \"jenkins-admins\"\n            permissions:\n              - \"Overall/Administer\"\n            assignments:\n              - \"Domain Admins\"\n              - \"jenkins-admins\"\n          - name: \"developers\"\n            permissions:\n              - \"Overall/Read\"\n              - \"Job/Build\"\n              - \"Job/Cancel\"\n              - \"Job/Read\"\n              - \"Job/Workspace\"\n              - \"Run/Replay\"\n              - \"Run/Update\"\n            assignments:\n              - \"developers\"\n              - \"authenticated\"\n          - name: \"viewers\"\n            permissions:\n              - \"Overall/Read\"\n              - \"Job/Read\"\n            assignments:\n              - \"viewers\"\n              \ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: \"ldap-password\"\n              username: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n              password: \"{AQAAABAAAAAQSecureEncryptedPassword=}\"\n              description: \"LDAP Service Account\"\n          - basicSSHUserPrivateKey:\n              scope: GLOBAL\n              id: \"ssh-agent-key\"\n              username: \"jenkins\"\n              description: \"SSH key for Jenkins agents\"\n              privateKeySource:\n                directEntry:\n                  privateKey: |\n                    -----BEGIN OPENSSH PRIVATE KEY-----\n                    EncryptedPrivateKeyContentHere\n                    -----END OPENSSH PRIVATE KEY-----\nEOF\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 8080\nsudo ufw allow from 192.168.1.0/24 to any port 50000\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=jenkins\nsudo firewall-cmd --permanent --zone=jenkins --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=jenkins --add-port=8080/tcp\nsudo firewall-cmd --permanent --zone=jenkins --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 8080 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 50000 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port {8080, 50000}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"Jenkins HTTP\" -Direction Inbound -Protocol TCP -LocalPort 8080 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName \"Jenkins Agent\" -Direction Inbound -Protocol TCP -LocalPort 50000 -RemoteAddress 192.168.1.0/24 -Action Allow\n```\n\n## Database Setup\n\n### External Database Configuration (PostgreSQL)\n\n```bash\n# Install PostgreSQL\nsudo apt install -y postgresql postgresql-contrib\n\n# Create Jenkins database\nsudo -u postgres createdb jenkinsdb\nsudo -u postgres createuser jenkinsuser\nsudo -u postgres psql -c \"ALTER USER jenkinsuser WITH PASSWORD 'SecureJenkinsPassword123!';\"\nsudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;\"\n\n# Download PostgreSQL driver\nwget https://jdbc.postgresql.org/download/postgresql-42.6.0.jar -O /var/lib/jenkins/postgresql-connector.jar\n\n# Configure Jenkins to use PostgreSQL\nsudo tee -a /etc/default/jenkins <<EOF\n# PostgreSQL database configuration\nJENKINS_JAVA_OPTIONS=\"-Djenkins.install.runSetupWizard=false -Dhudson.model.DirectoryBrowserSupport.CSP=\\\"sandbox allow-scripts; default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';\\\"\"\nEOF\n\n# Create database configuration\nsudo tee /var/lib/jenkins/database-config.xml <<EOF\n<databaseConfiguration>\n  <database class=\"org.jenkinsci.plugins.database.postgresql.PostgreSQLDatabase\">\n    <hostname>localhost</hostname>\n    <port>5432</port>\n    <database>jenkinsdb</database>\n    <username>jenkinsuser</username>\n    <password>{AQAAABAAAAAQEncryptedPasswordHere=}</password>\n    <properties>sslmode=require</properties>\n  </database>\n</databaseConfiguration>\nEOF\n```\n\n### Backup Database Schema\n\n```bash\n# Create database schema backup\nsudo -u postgres pg_dump jenkinsdb > /backup/jenkins/jenkinsdb-schema-$(date +%Y%m%d).sql\n\n# Create Jenkins jobs and configuration backup\nsudo tee /usr/local/bin/jenkins-db-backup.sh <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/jenkins/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# PostgreSQL backup\nsudo -u postgres pg_dump jenkinsdb | gzip > \"$BACKUP_DIR/jenkinsdb.sql.gz\"\n\n# Jenkins configuration backup\ntar -czf \"$BACKUP_DIR/jenkins-config.tar.gz\" \\\n  --exclude=\"/var/lib/jenkins/workspace/*\" \\\n  --exclude=\"/var/lib/jenkins/builds/*/archive\" \\\n  --exclude=\"/var/lib/jenkins/logs/*\" \\\n  /var/lib/jenkins/\n\necho \"Database backup completed: $BACKUP_DIR\"\nEOF\n\nchmod +x /usr/local/bin/jenkins-db-backup.sh\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Jenkins-specific system optimizations\nsudo tee -a /etc/sysctl.conf <<EOF\n# Jenkins optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf <<EOF\njenkins soft nofile 65535\njenkins hard nofile 65535\njenkins soft nproc 32768\njenkins hard nproc 32768\nEOF\n\n# Optimize Jenkins JVM settings\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+DisableExplicitGC -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\"\nEnvironment=\"JENKINS_OPTS=--sessionTimeout=1440 --sessionEviction=86400\"\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n```\n\n### Jenkins Performance Configuration\n\n```bash\n# Configure Jenkins for high performance\nsudo tee /var/lib/jenkins/casc_configs/performance.yaml <<EOF\njenkins:\n  systemMessage: \"High-Performance Jenkins Instance\"\n  numExecutors: 0  # Don't run builds on controller\n  mode: EXCLUSIVE\n  quietPeriod: 5\n  scmCheckoutRetryCount: 3\n  \n  # Global pipeline libraries for shared code\n  globalLibraries:\n    libraries:\n      - name: \"shared-pipeline-library\"\n        defaultVersion: \"main\"\n        implicit: true\n        retriever:\n          modernSCM:\n            scm:\n              git:\n                remote: \"https://github.com/example/jenkins-shared-library.git\"\n                credentialsId: \"github-token\"\n\n  # Configure build discarders globally\n  buildDiscarders:\n    configuredBuildDiscarders:\n      - \"logRotator\":\n          artifactDaysToKeepStr: \"30\"\n          artifactNumToKeepStr: \"10\"\n          daysToKeepStr: \"30\"\n          numToKeepStr: \"100\"\n\nunclassified:\n  # Configure global timeout\n  buildTimeout:\n    operations:\n      - timeoutMinutes: 60\n      - failBuild: true\n      - writingDescription: true\n      \n  # Workspace cleanup configuration  \n  wsCleanup:\n    deleteDirs: true\n    cleanupMatrixParent: true\n    skipWhenFailed: false\n    \ntool:\n  # Configure tools for performance\n  git:\n    installations:\n      - name: \"Default\"\n        home: \"/usr/bin/git\"\n        \n  maven:\n    installations:\n      - name: \"Maven 3.9\"\n        properties:\n          - installSource:\n              installers:\n                - maven:\n                    id: \"3.9.6\"\n                    \n  gradle:\n    installations:\n      - name: \"Gradle 8\"\n        properties:\n          - installSource:\n              installers:\n                - gradleInstaller:\n                    id: \"8.4\"\n\n  nodejs:\n    installations:\n      - name: \"NodeJS 18\"\n        properties:\n          - installSource:\n              installers:\n                - nodeJSInstaller:\n                    id: \"18.18.2\"\n                    \n  dockerTool:\n    installations:\n      - name: \"Docker\"\n        properties:\n          - installSource:\n              installers:\n                - dockerInstaller:\n                    version: \"latest\"\nEOF\n\n# Configure agent templates for auto-scaling\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml <<EOF\njenkins:\n  clouds:\n    - kubernetes:\n        name: \"kubernetes\"\n        serverUrl: \"https://kubernetes.default.svc.cluster.local\"\n        namespace: \"jenkins\"\n        credentialsId: \"kubernetes-token\"\n        jenkinsUrl: \"http://jenkins.jenkins.svc.cluster.local:8080\"\n        jenkinsTunnel: \"jenkins-agent.jenkins.svc.cluster.local:50000\"\n        connectTimeout: 300\n        readTimeout: 300\n        containerCapStr: 100\n        templates:\n          - name: \"jenkins-agent\"\n            namespace: \"jenkins\"\n            label: \"kubernetes docker\"\n            nodeUsageMode: EXCLUSIVE\n            containers:\n              - name: \"jnlp\"\n                image: \"jenkins/inbound-agent:latest\"\n                alwaysPullImage: true\n                workingDir: \"/home/jenkins/agent\"\n                command: \"\"\n                args: \"\"\n                resourceRequestCpu: \"500m\"\n                resourceRequestMemory: \"1Gi\"\n                resourceLimitCpu: \"2\"\n                resourceLimitMemory: \"4Gi\"\n            volumes:\n              - hostPathVolume:\n                  hostPath: \"/var/run/docker.sock\"\n                  mountPath: \"/var/run/docker.sock\"\nEOF\n```\n\n### Pipeline Optimization\n\n```groovy\n// Optimized Jenkins Pipeline Template\n// /var/lib/jenkins/pipeline-templates/optimized-pipeline.groovy\n@Library('shared-pipeline-library') _\n\npipeline {\n    agent {\n        label 'docker && linux'\n    }\n    \n    options {\n        buildDiscarder(logRotator(numToKeepStr: '50', artifactNumToKeepStr: '10'))\n        timeout(time: 120, unit: 'MINUTES')\n        timestamps()\n        skipDefaultCheckout(true)\n        disableConcurrentBuilds()\n        ansiColor('xterm')\n        parallelsAlwaysFailFast()\n        copyArtifactPermission('*')\n    }\n    \n    environment {\n        DOCKER_REGISTRY = credentials('docker-registry-url')\n        MAVEN_OPTS = '-Xmx2g -XX:+UseG1GC'\n        GRADLE_OPTS = '-Xmx2g -Dorg.gradle.daemon=false'\n        CI = 'true'\n    }\n    \n    stages {\n        stage('Checkout') {\n            steps {\n                checkout scm\n                script {\n                    env.GIT_COMMIT_SHORT = env.GIT_COMMIT.take(8)\n                    env.BUILD_VERSION = \"${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}\"\n                }\n            }\n        }\n        \n        stage('Parallel Analysis') {\n            parallel {\n                stage('Code Quality') {\n                    steps {\n                        script {\n                            // SonarQube analysis\n                            withSonarQubeEnv('SonarQube') {\n                                sh '''\n                                    mvn sonar:sonar \\\n                                        -Dsonar.projectKey=${JOB_NAME} \\\n                                        -Dsonar.projectVersion=${BUILD_VERSION} \\\n                                        -Dsonar.sources=src/main \\\n                                        -Dsonar.tests=src/test \\\n                                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml\n                                '''\n                            }\n                            \n                            timeout(time: 10, unit: 'MINUTES') {\n                                waitForQualityGate abortPipeline: true\n                            }\n                        }\n                    }\n                }\n                \n                stage('Security Scan') {\n                    steps {\n                        // OWASP Dependency Check\n                        dependencyCheck additionalArguments: '''\n                            --enableRetired\n                            --enableExperimental  \n                            --scan ./\n                            --format JSON\n                            --format HTML\n                            --suppression dependency-check-suppressions.xml\n                        ''', odcInstallation: 'dependency-check-8.4.0'\n                        \n                        dependencyCheckPublisher pattern: '**/dependency-check-report.xml'\n                        \n                        // Secret scanning\n                        sh '''\n                            docker run --rm -v $(pwd):/repo \\\n                                trufflesecurity/trufflehog:latest \\\n                                git file:///repo \\\n                                --json \\\n                                --fail > trufflehog-results.json || true\n                        '''\n                    }\n                }\n                \n                stage('Test') {\n                    steps {\n                        sh '''\n                            # Parallel test execution\n                            mvn clean test \\\n                                -Dmaven.test.failure.ignore=true \\\n                                -Dspring.profiles.active=test \\\n                                -Djunit.jupiter.execution.parallel.enabled=true \\\n                                -Djunit.jupiter.execution.parallel.mode.default=concurrent\n                        '''\n                        \n                        publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'\n                        publishCoverage adapters: [jacocoAdapter('target/site/jacoco/jacoco.xml')], \n                                       sourceFileResolver: sourceFiles('STORE_LAST_BUILD')\n                    }\n                    post {\n                        always {\n                            archiveArtifacts artifacts: 'target/surefire-reports/**', allowEmptyArchive: true\n                        }\n                    }\n                }\n            }\n        }\n        \n        stage('Build & Package') {\n            steps {\n                sh '''\n                    # Optimized build with parallel processing\n                    mvn clean package \\\n                        -DskipTests \\\n                        -T 2C \\\n                        -Dspring.profiles.active=production \\\n                        -Dmaven.javadoc.skip=true\n                '''\n                \n                // Docker build with BuildKit\n                script {\n                    def image = docker.build(\"${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}\", \n                                           \"--build-arg BUILD_VERSION=${env.BUILD_VERSION} .\")\n                    \n                    // Security scanning with Trivy\n                    sh \"\"\"\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --format table \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}\n                    \"\"\"\n                    \n                    image.push()\n                    image.push(\"latest\")\n                }\n            }\n        }\n        \n        stage('Deploy') {\n            when {\n                anyOf {\n                    branch 'main'\n                    branch 'develop'\n                    branch 'release/*'\n                }\n            }\n            parallel {\n                stage('Staging') {\n                    when { branch 'develop' }\n                    steps {\n                        script {\n                            // Deploy to staging environment\n                            sh '''\n                                kubectl set image deployment/myapp-staging \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=staging\n                                \n                                kubectl rollout status deployment/myapp-staging \\\n                                    --namespace=staging --timeout=300s\n                            '''\n                            \n                            // Run smoke tests\n                            sh '''\n                                curl -f http://myapp-staging.example.com/health || exit 1\n                                npm run test:e2e -- --base-url http://myapp-staging.example.com\n                            '''\n                        }\n                    }\n                }\n                \n                stage('Production') {\n                    when { \n                        anyOf {\n                            branch 'main'\n                            branch 'release/*'\n                        }\n                    }\n                    steps {\n                        // Manual approval for production\n                        timeout(time: 60, unit: 'MINUTES') {\n                            input message: 'Deploy to production?', \n                                  ok: 'Deploy',\n                                  submitterParameter: 'APPROVER'\n                        }\n                        \n                        script {\n                            sh '''\n                                # Blue-green deployment\n                                kubectl set image deployment/myapp-production \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=production\n                                \n                                kubectl rollout status deployment/myapp-production \\\n                                    --namespace=production --timeout=600s\n                            '''\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            // Cleanup workspace\n            cleanWs()\n            \n            // Archive artifacts\n            archiveArtifacts artifacts: 'target/*.jar,docker-compose.yml', \n                           allowEmptyArchive: true, \n                           fingerprint: true\n                           \n            // Collect build metrics\n            script {\n                def buildDuration = currentBuild.duration / 1000\n                echo \"Build completed in ${buildDuration} seconds\"\n                \n                // Custom metrics collection\n                sh \"\"\"\n                    echo \"build_duration_seconds{job=\\\"${env.JOB_NAME}\\\",build=\\\"${env.BUILD_NUMBER}\\\"} ${buildDuration}\" > build-metrics.txt\n                \"\"\"\n                \n                archiveArtifacts artifacts: 'build-metrics.txt', allowEmptyArchive: true\n            }\n        }\n        \n        success {\n            // Success notifications\n            emailext(\n                subject: \"✅ Build Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"\"\"Build successful for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n                         \n                Build URL: ${env.BUILD_URL}\n                Git Commit: ${env.GIT_COMMIT}\n                Duration: ${currentBuild.durationString}\n                Approver: ${env.APPROVER ?: 'Automatic'}\"\"\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL ?: 'jenkins@example.com'}\"\n            )\n            \n            slackSend(\n                channel: '#deployments',\n                color: 'good',\n                message: \"✅ Deployment Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER} by ${env.APPROVER ?: 'System'}\"\n            )\n        }\n        \n        failure {\n            emailext(\n                subject: \"❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Build failed for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL ?: 'jenkins@example.com'}\"\n            )\n            \n            slackSend(\n                channel: '#ci-cd-alerts',\n                color: 'danger',\n                message: \"❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|View Details>)\"\n            )\n        }\n        \n        unstable {\n            emailext(\n                subject: \"⚠️  Build Unstable: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Build unstable for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}\",\n                to: \"${env.CHANGE_AUTHOR_EMAIL ?: 'jenkins@example.com'}\"\n            )\n        }\n    }\n}\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```bash\n# Jenkins CLI monitoring commands\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password version\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-jobs\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-builds job-name\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password get-build job-name 1\n\n# System information\ncurl -u admin:password http://localhost:8080/systemInfo\n\n# Build queue status\ncurl -u admin:password http://localhost:8080/queue/api/json\n\n# Node status\ncurl -u admin:password http://localhost:8080/computer/api/json\n\n# Plugin information\ncurl -u admin:password http://localhost:8080/pluginManager/api/json?depth=1\n```\n\n### External Monitoring Setup\n\n```bash\n# Install Jenkins Prometheus Plugin and configure metrics\n# Via Jenkins UI: Manage Jenkins > Manage Plugins > Available > Prometheus metrics plugin\n\n# Configure Prometheus to scrape Jenkins metrics\nsudo tee /etc/prometheus/jenkins.yml <<EOF\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'jenkins'\n    static_configs:\n      - targets: ['localhost:8080']\n    metrics_path: /prometheus/\n    scrape_interval: 30s\n    scrape_timeout: 10s\nEOF\n\n# Install Jenkins Exporter (alternative)\nwget https://github.com/lovoo/jenkins_exporter/releases/download/v1.0.0/jenkins_exporter-1.0.0.linux-amd64.tar.gz\ntar xzf jenkins_exporter-*.tar.gz\nsudo cp jenkins_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/jenkins_exporter.service <<EOF\n[Unit]\nDescription=Jenkins Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=jenkins\nExecStart=/usr/local/bin/jenkins_exporter \\\n    --jenkins.address=http://localhost:8080 \\\n    --jenkins.username=monitoring \\\n    --jenkins.password=MonitoringPassword123! \\\n    --web.listen-address=:9118\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now jenkins_exporter\n```\n\n### Health Check Scripts\n\n```bash\n#!/bin/bash\n# jenkins-health-check.sh\n\nJENKINS_URL=\"http://localhost:8080\"\nHEALTH_LOG=\"/var/log/jenkins-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active jenkins >/dev/null 2>&1; then\n    log_message \"✅ Jenkins service is running\"\nelse\n    log_message \"❌ Jenkins service is not running\"\n    exit 2\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" ${JENKINS_URL}/login)\nif [ \"${HTTP_STATUS}\" = \"200\" ]; then\n    log_message \"✅ Jenkins web interface responding (HTTP ${HTTP_STATUS})\"\nelse\n    log_message \"❌ Jenkins web interface issues (HTTP ${HTTP_STATUS})\"\n    exit 2\nfi\n\n# Check disk space\nJENKINS_HOME_USAGE=$(df /var/lib/jenkins | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ ${JENKINS_HOME_USAGE} -gt 85 ]; then\n    log_message \"⚠️  High disk usage: ${JENKINS_HOME_USAGE}%\"\n    exit 1\nelse\n    log_message \"✅ Jenkins home disk usage: ${JENKINS_HOME_USAGE}%\"\nfi\n\n# Check memory usage\nJAVA_MEMORY=$(ps -o pid,vsz,rss,comm -C java | grep jenkins | awk '{rss+=$3} END {print rss/1024}')\nif (( $(echo \"${JAVA_MEMORY} > 6144\" | bc -l) )); then\n    log_message \"⚠️  High memory usage: ${JAVA_MEMORY}MB\"\n    exit 1\nelse\n    log_message \"✅ Jenkins memory usage: ${JAVA_MEMORY}MB\"\nfi\n\n# Check running builds (if Jenkins CLI is available)\nif [ -f /var/lib/jenkins/jenkins-cli.jar ]; then\n    RUNNING_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2>/dev/null | grep -c \"RUNNING\" || echo \"0\")\n    log_message \"ℹ️  Running builds: ${RUNNING_BUILDS}\"\n    \n    # Check for failed builds in last 24 hours\n    FAILED_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2>/dev/null | grep -c \"FAILURE\" || echo \"0\")\n    if [ ${FAILED_BUILDS} -gt 5 ]; then\n        log_message \"⚠️  High number of failed builds: ${FAILED_BUILDS}\"\n        exit 1\n    fi\nfi\n\n# Check plugin health\nPLUGIN_ERRORS=$(curl -s ${JENKINS_URL}/pluginManager/api/json?depth=1 | jq '.plugins[] | select(.hasUpdate==true or .enabled==false) | .shortName' | wc -l)\nif [ ${PLUGIN_ERRORS} -gt 0 ]; then\n    log_message \"⚠️  Plugins need attention: ${PLUGIN_ERRORS}\"\nfi\n\nlog_message \"✅ Jenkins health check completed\"\nexit 0\n```\n\n## Backup and Restore\n\n### Comprehensive Backup Strategy\n\n```bash\n#!/bin/bash\n# jenkins-backup.sh\n\nBACKUP_DIR=\"/backup/jenkins\"\nDATE=$(date +%Y%m%d_%H%M%S)\nJENKINS_HOME=\"/var/lib/jenkins\"\nRETENTION_DAYS=14\n\nmkdir -p ${BACKUP_DIR}/{config,jobs,plugins,secrets,workspace}\n\necho \"Starting Jenkins comprehensive backup...\"\n\n# Function to gracefully shutdown Jenkins\ngraceful_shutdown() {\n    echo \"Putting Jenkins in quiet mode...\"\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! quiet-down\n    \n    # Wait for running builds to complete (max 20 minutes)\n    for i in {1..120}; do\n        RUNNING_BUILDS=$(java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-builds | grep -c \"RUNNING\" || echo \"0\")\n        if [ \"$RUNNING_BUILDS\" -eq 0 ]; then\n            echo \"All builds completed, stopping Jenkins...\"\n            systemctl stop jenkins\n            break\n        fi\n        echo \"Waiting for $RUNNING_BUILDS running builds to complete... (${i}/120)\"\n        sleep 10\n    done\n    \n    if [ \"$RUNNING_BUILDS\" -gt 0 ]; then\n        echo \"Warning: Stopping Jenkins with $RUNNING_BUILDS builds still running\"\n        systemctl stop jenkins\n    fi\n}\n\n# Function to start Jenkins\nstart_jenkins() {\n    echo \"Starting Jenkins...\"\n    systemctl start jenkins\n    \n    # Wait for Jenkins to be ready\n    for i in {1..60}; do\n        if curl -f http://localhost:8080/login >/dev/null 2>&1; then\n            echo \"Jenkins is ready, canceling quiet mode...\"\n            java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! cancel-quiet-down\n            break\n        fi\n        echo \"Waiting for Jenkins to start... (${i}/60)\"\n        sleep 10\n    done\n}\n\n# Gracefully shutdown Jenkins\ngraceful_shutdown\n\n# Full Jenkins home backup (excluding large/temporary directories)\necho \"Creating full Jenkins home backup...\"\ntar --exclude=\"${JENKINS_HOME}/workspace/*\" \\\n    --exclude=\"${JENKINS_HOME}/builds/*/archive\" \\\n    --exclude=\"${JENKINS_HOME}/logs/*\" \\\n    --exclude=\"${JENKINS_HOME}/.m2/repository\" \\\n    --exclude=\"${JENKINS_HOME}/caches\" \\\n    --exclude=\"${JENKINS_HOME}/war\" \\\n    -czf ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz \\\n    -C ${JENKINS_HOME} .\n\n# Job configurations backup\necho \"Backing up job configurations...\"\nmkdir -p ${BACKUP_DIR}/jobs\nfind ${JENKINS_HOME}/jobs -name \"config.xml\" -exec cp {} ${BACKUP_DIR}/jobs/ \\;\ntar -czf ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz -C ${BACKUP_DIR}/jobs .\nrm ${BACKUP_DIR}/jobs/config.xml 2>/dev/null\n\n# Plugins backup\necho \"Backing up installed plugins...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-plugins > ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt\ncp -r ${JENKINS_HOME}/plugins ${BACKUP_DIR}/plugins/plugins-${DATE}/ 2>/dev/null\n\n# Secrets and credentials backup\necho \"Backing up secrets and credentials...\"\nif [ -d \"${JENKINS_HOME}/secrets\" ]; then\n    tar -czf ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz -C ${JENKINS_HOME} secrets/\nfi\n\n# System configuration backup\necho \"Backing up system configuration...\"\ntar -czf ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz \\\n    /etc/default/jenkins \\\n    /etc/sysconfig/jenkins \\\n    /etc/systemd/system/jenkins.service.d/ 2>/dev/null\n\n# Database backup (if using external database)\nif [ -f \"${JENKINS_HOME}/database-config.xml\" ]; then\n    echo \"Backing up external database...\"\n    sudo -u postgres pg_dump jenkinsdb | gzip > ${BACKUP_DIR}/config/jenkinsdb-${DATE}.sql.gz\nfi\n\n# Start Jenkins\nstart_jenkins\n\n# Cloud backup (uncomment and configure as needed)\n# aws s3 cp ${BACKUP_DIR}/ s3://jenkins-backups/${DATE}/ --recursive --sse AES256\n# az storage blob upload-batch --source ${BACKUP_DIR} --destination jenkins-backups --destination-path ${DATE}\n# gsutil cp -r ${BACKUP_DIR}/* gs://jenkins-backups/${DATE}/\n\n# Verify backup integrity\necho \"Verifying backup integrity...\"\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz | head -1)\nif tar -tzf \"$LATEST_BACKUP\" >/dev/null 2>&1; then\n    echo \"✅ Backup integrity verified\"\n    BACKUP_SIZE=$(du -h \"$LATEST_BACKUP\" | cut -f1)\n    echo \"Backup size: $BACKUP_SIZE\"\nelse\n    echo \"❌ Backup integrity check failed\"\n    exit 1\nfi\n\n# Cleanup old backups\necho \"Cleaning up old backups (keeping last $RETENTION_DAYS days)...\"\nfind ${BACKUP_DIR} -name \"jenkins-*\" -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name \"plugin-list-*\" -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name \"*-${DATE}*\" -type d -mtime +${RETENTION_DAYS} -exec rm -rf {} \\;\n\n# Generate backup report\necho \"Generating backup report...\"\ncat > ${BACKUP_DIR}/backup-report-${DATE}.txt <<EOF\nJenkins Backup Report - ${DATE}\n================================\n\nBackup Location: ${BACKUP_DIR}\nJenkins Home: ${JENKINS_HOME}\nBackup Date: $(date)\nServer: $(hostname)\n\nFiles backed up:\n- Jenkins Home: $(ls -lh ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz)\n- Job Configs: $(ls -lh ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz)\n- Plugins: $(ls -lh ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt)\n- Secrets: $(ls -lh ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz 2>/dev/null || echo \"No secrets backup\")\n- System Config: $(ls -lh ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz 2>/dev/null || echo \"No system config backup\")\n\nTotal Backup Size: $(du -h ${BACKUP_DIR} | tail -1 | cut -f1)\n\nVerification: ✅ Passed\nEOF\n\necho \"✅ Jenkins backup completed: ${DATE}\"\necho \"📊 Backup report: ${BACKUP_DIR}/backup-report-${DATE}.txt\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# jenkins-restore.sh\n\nBACKUP_FILE=\"${1}\"\nRESTORE_TYPE=\"${2:-full}\"  # full, config-only, jobs-only\n\nusage() {\n    echo \"Usage: $0 <backup_file> [restore_type]\"\n    echo \"Restore types: full (default), config-only, jobs-only\"\n    echo \"\"\n    echo \"Available backups:\"\n    ls -la /backup/jenkins/config/jenkins-home-*.tar.gz | head -10\n    exit 1\n}\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    usage\nfi\n\nif [ ! -f \"$BACKUP_FILE\" ]; then\n    echo \"❌ Backup file not found: $BACKUP_FILE\"\n    exit 1\nfi\n\necho \"🔄 Starting Jenkins restore from: $BACKUP_FILE\"\necho \"Restore type: $RESTORE_TYPE\"\n\n# Pre-restore backup of current state\nif [ -d \"/var/lib/jenkins\" ]; then\n    echo \"📦 Creating backup of current installation...\"\n    CURRENT_BACKUP=\"/backup/jenkins/pre-restore-$(date +%s)\"\n    mkdir -p \"$CURRENT_BACKUP\"\n    mv /var/lib/jenkins \"$CURRENT_BACKUP/jenkins-$(date +%Y%m%d_%H%M%S)\"\n    echo \"Current installation backed up to: $CURRENT_BACKUP\"\nfi\n\n# Stop Jenkins\necho \"⏹️  Stopping Jenkins...\"\nsystemctl stop jenkins\n\ncase \"$RESTORE_TYPE\" in\n    \"full\")\n        echo \"🔄 Performing full restore...\"\n        \n        # Create new Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Restore from backup\n        echo \"📂 Extracting backup archive...\"\n        tar -xzf \"$BACKUP_FILE\" -C /var/lib/jenkins\n        \n        # Set proper ownership\n        chown -R jenkins:jenkins /var/lib/jenkins\n        chmod -R 755 /var/lib/jenkins\n        \n        # Special permissions for secrets\n        if [ -d \"/var/lib/jenkins/secrets\" ]; then\n            chmod 700 /var/lib/jenkins/secrets\n            chmod 600 /var/lib/jenkins/secrets/*\n        fi\n        ;;\n        \n    \"config-only\")\n        echo \"🔄 Performing configuration-only restore...\"\n        \n        # Create minimal Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Extract only configuration files\n        tar -xzf \"$BACKUP_FILE\" -C /var/lib/jenkins \\\n            --include=\"*/config.xml\" \\\n            --include=\"*/secrets/*\" \\\n            --include=\"*/users/*\" \\\n            --include=\"*/plugins/*\" \\\n            --exclude=\"*/workspace/*\" \\\n            --exclude=\"*/builds/*\"\n            \n        chown -R jenkins:jenkins /var/lib/jenkins\n        ;;\n        \n    \"jobs-only\")\n        echo \"🔄 Performing jobs-only restore...\"\n        \n        if [ ! -d \"/var/lib/jenkins\" ]; then\n            echo \"❌ Jenkins directory not found. Cannot restore jobs only.\"\n            exit 1\n        fi\n        \n        # Backup current jobs\n        if [ -d \"/var/lib/jenkins/jobs\" ]; then\n            mv /var/lib/jenkins/jobs \"/var/lib/jenkins/jobs.backup.$(date +%s)\"\n        fi\n        \n        # Extract only jobs\n        tar -xzf \"$BACKUP_FILE\" -C /var/lib/jenkins jobs/\n        chown -R jenkins:jenkins /var/lib/jenkins/jobs\n        ;;\n        \n    *)\n        echo \"❌ Unknown restore type: $RESTORE_TYPE\"\n        usage\n        ;;\nesac\n\n# Restore system configuration if available\nBACKUP_DIR=$(dirname \"$BACKUP_FILE\")\nBACKUP_DATE=$(basename \"$BACKUP_FILE\" .tar.gz | sed 's/jenkins-home-//')\nSYSTEM_CONFIG=\"${BACKUP_DIR}/../config/system-config-${BACKUP_DATE}.tar.gz\"\n\nif [ -f \"$SYSTEM_CONFIG\" ]; then\n    echo \"🔧 Restoring system configuration...\"\n    tar -xzf \"$SYSTEM_CONFIG\" -C / 2>/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=\"${BACKUP_DIR}/jenkinsdb-${BACKUP_DATE}.sql.gz\"\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"🗄️  Restoring database...\"\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql jenkinsdb\nfi\n\n# Start Jenkins\necho \"▶️  Starting Jenkins...\"\nsystemctl start jenkins\n\n# Wait for Jenkins to start and verify\necho \"⏳ Waiting for Jenkins to start...\"\nfor i in {1..120}; do\n    if curl -f http://localhost:8080/login >/dev/null 2>&1; then\n        echo \"✅ Jenkins started successfully\"\n        break\n    fi\n    echo \"Waiting for Jenkins to start... (${i}/120)\"\n    sleep 10\ndone\n\n# Verify restoration\necho \"🔍 Verifying restoration...\"\nif curl -f http://localhost:8080/login >/dev/null 2>&1; then\n    echo \"✅ Jenkins is responding\"\n    \n    # Check if jobs were restored\n    if [ -d \"/var/lib/jenkins/jobs\" ]; then\n        JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs | wc -l)\n        echo \"📋 Jobs restored: $JOB_COUNT\"\n    fi\n    \n    # Check if plugins were restored\n    if [ -d \"/var/lib/jenkins/plugins\" ]; then\n        PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins | wc -l)\n        echo \"🔌 Plugins restored: $PLUGIN_COUNT\"\n    fi\n    \n    echo \"✅ Jenkins restoration completed successfully\"\n    echo \"\"\n    echo \"📝 Next steps:\"\n    echo \"1. Verify Jenkins configuration via web interface\"\n    echo \"2. Check plugin compatibility and update if needed\"\n    echo \"3. Verify job configurations and test builds\"\n    echo \"4. Update any environment-specific settings\"\n    \nelse\n    echo \"❌ Jenkins restoration failed - service not responding\"\n    echo \"Check logs: journalctl -u jenkins -n 50\"\n    exit 1\nfi\n```\n\n### Disaster Recovery\n\n```bash\n#!/bin/bash\n# jenkins-disaster-recovery.sh\n\necho \"🚨 Jenkins Disaster Recovery Procedure\"\necho \"======================================\"\n\n# Check if Jenkins is running\nif systemctl is-active jenkins >/dev/null 2>&1; then\n    echo \"⚠️  Jenkins is running. This procedure should be run on a failed system.\"\n    read -p \"Continue anyway? (y/N): \" -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        exit 1\n    fi\nfi\n\n# Find latest backup\nBACKUP_DIR=\"/backup/jenkins\"\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz 2>/dev/null | head -1)\n\nif [ -z \"$LATEST_BACKUP\" ]; then\n    echo \"❌ No backups found in ${BACKUP_DIR}\"\n    echo \"Please restore from cloud backup or external storage\"\n    exit 1\nfi\n\necho \"📦 Latest backup found: $LATEST_BACKUP\"\necho \"📅 Backup date: $(basename \"$LATEST_BACKUP\" .tar.gz | sed 's/jenkins-home-//')\"\n\n# Verify backup integrity\necho \"🔍 Verifying backup integrity...\"\nif tar -tzf \"$LATEST_BACKUP\" >/dev/null 2>&1; then\n    echo \"✅ Backup integrity verified\"\nelse\n    echo \"❌ Backup is corrupted. Cannot proceed with recovery.\"\n    exit 1\nfi\n\n# Create disaster recovery log\nDR_LOG=\"/var/log/jenkins-disaster-recovery-$(date +%Y%m%d_%H%M%S).log\"\nexec > >(tee -a \"$DR_LOG\")\nexec 2>&1\n\necho \"📝 Disaster recovery log: $DR_LOG\"\n\n# System preparation\necho \"🔧 Preparing system for recovery...\"\n\n# Install Jenkins if not present\nif ! command -v jenkins >/dev/null 2>&1; then\n    echo \"📦 Installing Jenkins...\"\n    # Add Jenkins repository and install (distribution-specific commands)\n    if [ -f /etc/debian_version ]; then\n        wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -\n        echo \"deb https://pkg.jenkins.io/debian-stable binary/\" > /etc/apt/sources.list.d/jenkins.list\n        apt-get update\n        apt-get install -y openjdk-17-jdk jenkins\n    elif [ -f /etc/redhat-release ]; then\n        yum install -y java-17-openjdk jenkins\n    fi\nfi\n\n# Stop Jenkins service\nsystemctl stop jenkins\n\n# Clear existing Jenkins data\nif [ -d \"/var/lib/jenkins\" ]; then\n    echo \"🗑️  Removing existing Jenkins data...\"\n    rm -rf /var/lib/jenkins.disaster-backup-$(date +%s)\n    mv /var/lib/jenkins /var/lib/jenkins.disaster-backup-$(date +%s)\nfi\n\n# Create new Jenkins directory\nmkdir -p /var/lib/jenkins\n\n# Restore from backup\necho \"🔄 Restoring Jenkins from backup...\"\ntar -xzf \"$LATEST_BACKUP\" -C /var/lib/jenkins\n\n# Set proper permissions\nchown -R jenkins:jenkins /var/lib/jenkins\nchmod -R 755 /var/lib/jenkins\n\n# Special permissions for sensitive files\nif [ -d \"/var/lib/jenkins/secrets\" ]; then\n    chmod 700 /var/lib/jenkins/secrets\n    chmod 600 /var/lib/jenkins/secrets/*\nfi\n\nif [ -d \"/var/lib/jenkins/users\" ]; then\n    chmod 700 /var/lib/jenkins/users\nfi\n\n# Restore system configuration\nBACKUP_DATE=$(basename \"$LATEST_BACKUP\" .tar.gz | sed 's/jenkins-home-//')\nSYSTEM_CONFIG=\"${BACKUP_DIR}/config/system-config-${BACKUP_DATE}.tar.gz\"\n\nif [ -f \"$SYSTEM_CONFIG\" ]; then\n    echo \"🔧 Restoring system configuration...\"\n    tar -xzf \"$SYSTEM_CONFIG\" -C / 2>/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=\"${BACKUP_DIR}/config/jenkinsdb-${BACKUP_DATE}.sql.gz\"\nif [ -f \"$DB_BACKUP\" ]; then\n    echo \"🗄️  Restoring database...\"\n    # Ensure PostgreSQL is running\n    systemctl start postgresql\n    \n    # Drop and recreate database\n    sudo -u postgres psql -c \"DROP DATABASE IF EXISTS jenkinsdb;\"\n    sudo -u postgres psql -c \"CREATE DATABASE jenkinsdb;\"\n    sudo -u postgres psql -c \"GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;\"\n    \n    # Restore database\n    zcat \"$DB_BACKUP\" | sudo -u postgres psql jenkinsdb\nfi\n\n# Configure firewall\necho \"🔥 Configuring firewall...\"\nif command -v ufw >/dev/null 2>&1; then\n    ufw allow 8080/tcp\n    ufw allow 50000/tcp\nelif command -v firewall-cmd >/dev/null 2>&1; then\n    firewall-cmd --permanent --add-port=8080/tcp\n    firewall-cmd --permanent --add-port=50000/tcp\n    firewall-cmd --reload\nfi\n\n# Start Jenkins\necho \"▶️  Starting Jenkins...\"\nsystemctl enable jenkins\nsystemctl start jenkins\n\n# Wait for Jenkins to start\necho \"⏳ Waiting for Jenkins to initialize...\"\nfor i in {1..300}; do\n    if curl -f http://localhost:8080/login >/dev/null 2>&1; then\n        echo \"✅ Jenkins is responding\"\n        break\n    fi\n    echo \"Waiting for Jenkins... (${i}/300)\"\n    sleep 10\ndone\n\n# Verify recovery\necho \"🔍 Verifying disaster recovery...\"\n\n# Check Jenkins status\nif systemctl is-active jenkins >/dev/null 2>&1; then\n    echo \"✅ Jenkins service is running\"\nelse\n    echo \"❌ Jenkins service failed to start\"\n    echo \"Check logs: journalctl -u jenkins -n 50\"\n    exit 1\nfi\n\n# Check web interface\nif curl -f http://localhost:8080/login >/dev/null 2>&1; then\n    echo \"✅ Jenkins web interface is accessible\"\nelse\n    echo \"❌ Jenkins web interface is not responding\"\n    exit 1\nfi\n\n# Check jobs restoration\nif [ -d \"/var/lib/jenkins/jobs\" ]; then\n    JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs 2>/dev/null | wc -l)\n    echo \"📋 Jobs recovered: $JOB_COUNT\"\nelse\n    echo \"⚠️  No jobs directory found\"\nfi\n\n# Check plugins restoration\nif [ -d \"/var/lib/jenkins/plugins\" ]; then\n    PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins 2>/dev/null | wc -l)\n    echo \"🔌 Plugins recovered: $PLUGIN_COUNT\"\nelse\n    echo \"⚠️  No plugins directory found\"\nfi\n\n# Generate recovery report\necho \"📊 Generating disaster recovery report...\"\ncat > \"/var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt\" <<EOF\nJenkins Disaster Recovery Report\n===============================\nRecovery Date: $(date)\nServer: $(hostname)\nBackup Used: $LATEST_BACKUP\nRecovery Log: $DR_LOG\n\nRecovery Summary:\n- Jenkins Service: $(systemctl is-active jenkins)\n- Web Interface: $(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8080/login)\n- Jobs Recovered: $JOB_COUNT\n- Plugins Recovered: $PLUGIN_COUNT\n- Database Restored: $([ -f \"$DB_BACKUP\" ] && echo \"Yes\" || echo \"No\")\n\nNext Steps:\n1. Verify Jenkins configuration via web interface: http://$(hostname):8080\n2. Test critical job configurations\n3. Update any environment-specific settings\n4. Verify agent connections\n5. Test integrations (SCM, notifications, etc.)\n6. Update DNS/load balancer configurations if needed\n7. Notify team of recovery completion\n\nRecovery Status: ✅ COMPLETED\nEOF\n\necho \"\"\necho \"🎉 Jenkins disaster recovery completed successfully!\"\necho \"📝 Recovery report saved to: /var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt\"\necho \"\"\necho \"🔗 Access Jenkins: http://$(hostname):8080\"\necho \"\"\necho \"⚠️  Important post-recovery tasks:\"\necho \"1. Verify all job configurations\"\necho \"2. Test agent connections\"\necho \"3. Verify integrations (GitHub, LDAP, etc.)\"\necho \"4. Update any environment-specific configurations\"\necho \"5. Perform a backup of the recovered system\"\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Jenkins won't start**:\n```bash\n# Check service status and logs\nsudo systemctl status jenkins\nsudo journalctl -u jenkins -f\n\n# Check Java version and JAVA_HOME\njava -version\necho $JAVA_HOME\n\n# Check disk space\ndf -h /var/lib/jenkins\n\n# Check permissions\nls -la /var/lib/jenkins\nsudo chown -R jenkins:jenkins /var/lib/jenkins\n\n# Check memory allocation\nfree -h\nps aux | grep jenkins\n\n# Clear Jenkins cache\nsudo systemctl stop jenkins\nsudo rm -rf /var/lib/jenkins/war\nsudo systemctl start jenkins\n```\n\n2. **Memory issues**:\n```bash\n# Increase JVM memory\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC\"\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n\n# Monitor memory usage\ntop -p $(pgrep java)\njstat -gc $(pgrep java) 5s\n```\n\n3. **Plugin issues**:\n```bash\n# Safe start (disable all plugins)\nsudo systemctl stop jenkins\necho 'jenkins.install.runSetupWizard=false' > /var/lib/jenkins/jenkins.install.runSetupWizard\nsudo systemctl start jenkins\n\n# Clear plugin cache\nsudo rm -rf /var/lib/jenkins/plugins/*.bak\nsudo rm -rf /var/lib/jenkins/plugins/*.hpi.pinned\n\n# Update plugins via CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E \"\\)$\" | awk '{print $1}' | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Check plugin dependencies\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -v \"^$\"\n```\n\n4. **Build failures**:\n```bash\n# Check workspace permissions\nsudo chown -R jenkins:jenkins /var/lib/jenkins/workspace\n\n# Clear old builds\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password delete-builds job-name 1-100\n\n# Check agent connectivity\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-computers\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password connect-node agent-name\n\n# Monitor build resources\nhtop\niostat -x 1\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging for Jenkins\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=\"JAVA_OPTS=-Xmx4g -Djava.util.logging.config.file=/var/lib/jenkins/logging.properties\"\n\n# Create detailed logging configuration\nsudo tee /var/lib/jenkins/logging.properties <<EOF\n.level = INFO\n\n# Root logger\nhandlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler\n\n# Console logging\njava.util.logging.ConsoleHandler.level = INFO\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n\n# File logging\njava.util.logging.FileHandler.pattern = /var/log/jenkins/jenkins-debug.log\njava.util.logging.FileHandler.limit = 50000000\njava.util.logging.FileHandler.count = 5\njava.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter\n\n# Component-specific logging\nhudson.level = FINE\njenkins.level = FINE\nhudson.security.level = FINE\nhudson.plugins.level = FINE\nhudson.model.level = FINE\n\n# Plugin debugging\nhudson.plugins.git.level = FINE\norg.jenkinsci.plugins.workflow.level = FINE\nEOF\n\nsudo systemctl restart jenkins\n\n# View debug logs\nsudo tail -f /var/log/jenkins/jenkins-debug.log\n\n# Enable specific plugin debugging via Jenkins CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password groovy = <<EOF\nimport java.util.logging.Logger\nimport java.util.logging.Level\n\n// Enable debug logging for specific components\nLogger.getLogger(\"hudson.security\").setLevel(Level.FINE)\nLogger.getLogger(\"hudson.plugins.git\").setLevel(Level.FINE)\nLogger.getLogger(\"org.jenkinsci.plugins.workflow\").setLevel(Level.FINE)\n\nprintln \"Debug logging enabled\"\nEOF\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update jenkins\nsudo dnf update jenkins\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade jenkins\n\n# Arch Linux\nyay -Syu jenkins\n\n# Alpine Linux (Docker)\ndocker pull jenkins/jenkins:lts-jdk17\ndocker stop jenkins\ndocker rm jenkins\n# Re-run docker run command with new image\n\n# openSUSE\nsudo zypper update jenkins\n\n# FreeBSD\npkg update\npkg upgrade jenkins\n\n# macOS\nbrew upgrade jenkins-lts\n\n# Always backup before updates\nsudo /usr/local/bin/jenkins-backup.sh\n\n# Update plugins after Jenkins update\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E \"\\)$\" | awk '{print $1}' | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Restart after updates\nsudo systemctl restart jenkins\n```\n\n### Maintenance Tasks\n\n```bash\n#!/bin/bash\n# jenkins-maintenance.sh\n\nJENKINS_HOME=\"/var/lib/jenkins\"\nJENKINS_URL=\"http://localhost:8080\"\nADMIN_CREDENTIALS=\"admin:SecureAdminPassword123!\"\n\necho \"🔧 Starting Jenkins maintenance tasks...\"\n\n# Clean up old builds\necho \"🗑️  Cleaning up old builds...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = <<EOF\nimport jenkins.model.Jenkins\nimport hudson.model.*\n\nJenkins.instance.getAllItems(Job.class).each { job ->\n    if (job.getBuilds().size() > 50) {\n        def buildsToDelete = job.getBuilds().drop(50)\n        println \"Deleting \\${buildsToDelete.size()} old builds for job: \\${job.name}\"\n        buildsToDelete.each { build ->\n            build.delete()\n        }\n    }\n}\nEOF\n\n# Clean up workspace\necho \"🧹 Cleaning up workspaces...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = <<EOF\nimport hudson.model.*\nimport hudson.FilePath\nimport jenkins.model.Jenkins\n\nJenkins.instance.getAllItems(AbstractProject.class).each { job ->\n    def workspace = job.getWorkspace()\n    if (workspace != null && workspace.exists()) {\n        def size = workspace.length()\n        if (size > 1024 * 1024 * 100) { // > 100MB\n            println \"Workspace for \\${job.name} is \\${size / (1024*1024)} MB\"\n            workspace.deleteRecursive()\n            println \"Cleaned workspace for job: \\${job.name}\"\n        }\n    }\n}\nEOF\n\n# Update plugins\necho \"🔌 Checking for plugin updates...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} list-plugins | grep -E \"\\)$\" > /tmp/outdated-plugins.txt\n\nif [ -s /tmp/outdated-plugins.txt ]; then\n    echo \"📦 Updating outdated plugins:\"\n    cat /tmp/outdated-plugins.txt\n    \n    # Update plugins\n    awk '{print $1}' /tmp/outdated-plugins.txt | xargs java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} install-plugin\n    \n    echo \"🔄 Restarting Jenkins to apply plugin updates...\"\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} safe-restart\nfi\n\n# Clean up logs\necho \"📋 Rotating and cleaning logs...\"\nfind ${JENKINS_HOME}/logs -name \"*.log\" -mtime +7 -delete\nfind /var/log/jenkins -name \"*.log.*\" -mtime +7 -delete\n\n# Disk usage check\necho \"💾 Checking disk usage...\"\nDISK_USAGE=$(df ${JENKINS_HOME} | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ ${DISK_USAGE} -gt 80 ]; then\n    echo \"⚠️  High disk usage: ${DISK_USAGE}%\"\n    \n    # Clean up large files\n    find ${JENKINS_HOME}/jobs -name \"*.log\" -size +100M -mtime +3 -delete\n    find ${JENKINS_HOME}/workspace -name \"*\" -size +500M -mtime +1 -delete\nfi\n\n# Backup verification\necho \"🔍 Verifying recent backups...\"\nLATEST_BACKUP=$(ls -t /backup/jenkins/config/jenkins-home-*.tar.gz 2>/dev/null | head -1)\nif [ -n \"$LATEST_BACKUP\" ]; then\n    BACKUP_AGE=$(($(date +%s) - $(stat -c %Y \"$LATEST_BACKUP\")))\n    if [ $BACKUP_AGE -gt 172800 ]; then  # 2 days\n        echo \"⚠️  Latest backup is older than 2 days: $LATEST_BACKUP\"\n        echo \"💾 Running backup now...\"\n        /usr/local/bin/jenkins-backup.sh\n    else\n        echo \"✅ Recent backup found: $LATEST_BACKUP\"\n    fi\nelse\n    echo \"❌ No backups found. Running backup...\"\n    /usr/local/bin/jenkins-backup.sh\nfi\n\n# Security check\necho \"🔒 Running security checks...\"\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = <<EOF\nimport jenkins.security.ApiTokenProperty\nimport hudson.security.SecurityRealm\nimport jenkins.model.Jenkins\n\ndef instance = Jenkins.getInstance()\n\n// Check for default passwords\ndef realm = instance.getSecurityRealm()\nif (realm instanceof hudson.security.HudsonPrivateSecurityRealm) {\n    def users = realm.getAllUsers()\n    users.each { user ->\n        if (user.getId() == \"admin\") {\n            println \"⚠️  Default admin user found. Consider renaming or removing.\"\n        }\n    }\n}\n\n// Check for anonymous access\ndef authStrategy = instance.getAuthorizationStrategy()\nif (authStrategy.hasPermission(org.acegisecurity.Authentication.ANONYMOUS_USER, Jenkins.READ)) {\n    println \"⚠️  Anonymous read access is enabled\"\n}\n\nprintln \"Security check completed\"\nEOF\n\n# Performance check\necho \"📊 Checking performance metrics...\"\nJAVA_PID=$(pgrep java)\nif [ -n \"$JAVA_PID\" ]; then\n    MEMORY_USAGE=$(ps -o pid,vsz,rss,comm -p $JAVA_PID | awk 'NR==2 {print $3/1024}')\n    CPU_USAGE=$(ps -o pid,pcpu,comm -p $JAVA_PID | awk 'NR==2 {print $2}')\n    \n    echo \"Memory usage: ${MEMORY_USAGE}MB\"\n    echo \"CPU usage: ${CPU_USAGE}%\"\n    \n    if (( $(echo \"${MEMORY_USAGE} > 6144\" | bc -l) )); then\n        echo \"⚠️  High memory usage detected\"\n    fi\nfi\n\necho \"✅ Jenkins maintenance completed\"\n\n# Generate maintenance report\ncat > /var/log/jenkins-maintenance-$(date +%Y%m%d).log <<EOF\nJenkins Maintenance Report - $(date)\n===================================\n\nTasks Completed:\n- Old builds cleanup: ✅\n- Workspace cleanup: ✅\n- Plugin updates: $([ -s /tmp/outdated-plugins.txt ] && echo \"✅ Updated\" || echo \"✅ Up to date\")\n- Log rotation: ✅\n- Disk usage check: ✅ (${DISK_USAGE}%)\n- Backup verification: ✅\n- Security check: ✅\n- Performance check: ✅\n\nSystem Status:\n- Memory usage: ${MEMORY_USAGE}MB\n- CPU usage: ${CPU_USAGE}%\n- Disk usage: ${DISK_USAGE}%\n\nNext maintenance: $(date -d \"next week\" +%Y-%m-%d)\nEOF\n\necho \"📊 Maintenance report: /var/log/jenkins-maintenance-$(date +%Y%m%d).log\"\n```\n\n### Health Monitoring\n\n```bash\n# Create monitoring cron job\necho \"0 2 * * * root /usr/local/bin/jenkins-maintenance.sh\" | sudo tee -a /etc/crontab\necho \"*/15 * * * * root /usr/local/bin/jenkins-health-check.sh\" | sudo tee -a /etc/crontab\n\n# Log rotation configuration\nsudo tee /etc/logrotate.d/jenkins <<EOF\n/var/log/jenkins/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins adm\n    postrotate\n        systemctl reload jenkins > /dev/null 2>&1 || true\n    endscript\n}\n\n/var/lib/jenkins/logs/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins jenkins\n}\nEOF\n```\n\n## Integration Examples\n\n### Git Integration with Webhooks\n\n```bash\n# Configure Git webhook for automatic builds\nsudo tee /var/lib/jenkins/casc_configs/git-integration.yaml <<EOF\nunclassified:\n  gitHubPluginConfig:\n    hookUrl: \"https://jenkins.example.com/github-webhook/\"\n    \n  gitLabConnectionConfig:\n    connections:\n      - name: \"GitLab\"\n        url: \"https://gitlab.example.com\"\n        apiTokenId: \"gitlab-api-token\"\n        clientBuilderId: \"autodetect\"\n        connectionTimeout: 10\n        readTimeout: 10\n\njobs:\n  - script: |\n      multibranchPipelineJob('example-app') {\n        branchSources {\n          git {\n            id('github-example')\n            remote('https://github.com/example/app.git')\n            credentialsId('github-credentials')\n            includes('main develop feature/* release/*')\n          }\n        }\n        \n        factory {\n          workflowBranchProjectFactory {\n            scriptPath('Jenkinsfile')\n          }\n        }\n        \n        triggers {\n          periodicFolderTrigger {\n            interval('1d')\n          }\n        }\n        \n        orphanedItemStrategy {\n          discardOldItems {\n            daysToKeep(7)\n            numToKeep(10)\n          }\n        }\n      }\nEOF\n```\n\n### Docker Integration\n\n```groovy\n// Docker pipeline example\npipeline {\n    agent any\n    \n    environment {\n        DOCKER_REGISTRY = credentials('docker-registry')\n        DOCKER_IMAGE = \"${env.JOB_NAME}:${env.BUILD_NUMBER}\"\n    }\n    \n    stages {\n        stage('Build Docker Image') {\n            steps {\n                script {\n                    def image = docker.build(\"${DOCKER_REGISTRY}/${DOCKER_IMAGE}\")\n                    \n                    // Security scan\n                    sh \"\"\"\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}\n                    \"\"\"\n                    \n                    // Push to registry\n                    docker.withRegistry(\"https://${DOCKER_REGISTRY}\", 'docker-registry-credentials') {\n                        image.push()\n                        image.push(\"latest\")\n                    }\n                }\n            }\n        }\n        \n        stage('Deploy') {\n            steps {\n                script {\n                    // Deploy to Kubernetes\n                    sh \"\"\"\n                        kubectl set image deployment/myapp \\\n                            myapp=${DOCKER_REGISTRY}/${DOCKER_IMAGE} \\\n                            --namespace=production\n                        \n                        kubectl rollout status deployment/myapp \\\n                            --namespace=production --timeout=300s\n                    \"\"\"\n                }\n            }\n        }\n    }\n}\n```\n\n### Kubernetes Integration\n\n```yaml\n# Jenkins agent in Kubernetes\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: jenkins\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: jenkins\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\",\"pods/exec\"]\n  verbs: [\"create\",\"delete\",\"get\",\"list\",\"patch\",\"update\",\"watch\"]\n- apiGroups: [\"\"]\n  resources: [\"pods/log\"]\n  verbs: [\"get\",\"list\",\"watch\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: jenkins\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: jenkins\nsubjects:\n- kind: ServiceAccount\n  name: jenkins\n  namespace: jenkins\n---\n# Jenkins Configuration as Code for Kubernetes\njenkins:\n  clouds:\n    - kubernetes:\n        name: \"kubernetes\"\n        serverUrl: \"https://kubernetes.default\"\n        namespace: \"jenkins\"\n        credentialsId: \"kubernetes-token\"\n        jenkinsUrl: \"http://jenkins.jenkins.svc.cluster.local:8080\"\n        containerCapStr: \"10\"\n        templates:\n          - name: \"jenkins-agent\"\n            namespace: \"jenkins\"\n            label: \"kubernetes\"\n            containers:\n              - name: \"jnlp\"\n                image: \"jenkins/inbound-agent:latest\"\n                workingDir: \"/home/jenkins/agent\"\n                resourceRequestCpu: \"100m\"\n                resourceRequestMemory: \"256Mi\"\n                resourceLimitCpu: \"500m\"\n                resourceLimitMemory: \"1Gi\"\n```\n\n### LDAP/Active Directory Integration\n\n```yaml\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: \"ldaps://ad.example.com:636\"\n          rootDN: \"DC=example,DC=com\"\n          inhibitInferRootDN: false\n          userSearchBase: \"OU=Users,OU=Company\"\n          userSearch: \"(&(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))\"\n          groupSearchBase: \"OU=Groups,OU=Company\"\n          groupSearchFilter: \"(&(objectClass=group)(cn={0}))\"\n          managerDN: \"CN=jenkins,OU=Service Accounts,DC=example,DC=com\"\n          managerPasswordSecret: \"ldap-service-password\"\n          displayNameAttributeName: \"displayName\"\n          mailAddressAttributeName: \"mail\"\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: \"administrators\"\n            permissions:\n              - \"Overall/Administer\"\n            assignments:\n              - \"Domain Admins\"\n              - \"Jenkins Admins\"\n        items:\n          - name: \"developers\"\n            pattern: \".*\"\n            permissions:\n              - \"Job/Build\"\n              - \"Job/Cancel\"\n              - \"Job/Read\"\n            assignments:\n              - \"Development Team\"\n```\n\n## Additional Resources\n\n- [Official Jenkins Documentation](https://www.jenkins.io/doc/)\n- [Jenkins Configuration as Code](https://jenkins.io/projects/jcasc/)\n- [Jenkins Pipeline Documentation](https://www.jenkins.io/doc/book/pipeline/)\n- [Jenkins Security Guide](https://www.jenkins.io/doc/book/security/)\n- [Jenkins Plugin Index](https://plugins.jenkins.io/)\n- [Jenkins Community](https://www.jenkins.io/community/)\n- [Jenkins Best Practices](https://www.jenkins.io/doc/book/pipeline/pipeline-best-practices/)\n- [Jenkins GitHub Repository](https://github.com/jenkinsci/jenkins)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"jenkins-installation-guide\" class=\"mobile-header\">Jenkins Installation Guide</h1>\n<p class=\"mobile-paragraph\">Jenkins is a free and open-source automation server for building, testing, and deploying applications. Originally developed by Kohsuke Kawaguchi and now maintained by the Jenkins community, Jenkins is the industry-leading CI/CD platform with extensive plugin ecosystem and enterprise-grade features. It serves as a FOSS alternative to commercial CI/CD solutions like TeamCity, GitLab CI Premium, or Azure DevOps Server, offering unlimited build minutes, unlimited private repositories, and advanced pipeline capabilities without licensing costs, with features like distributed builds, Pipeline as Code, and extensive plugin ecosystem.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (8GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 50GB minimum (SSD recommended for build performance)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for agent communication and external integrations</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.2+</li>\n<li class=\"mobile-list-item\">macOS: 10.13+ (High Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8080 (default Jenkins HTTP)</li>\n<li class=\"mobile-list-item\">Port 50000 (default Jenkins agent communication)</li>\n<li class=\"mobile-list-item\">Additional ports for external integrations (webhooks, etc.)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Java 11 or 17 LTS (OpenJDK recommended)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\">Root or administrative access for installation</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java 17 LTS\nsudo dnf install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\ncurl -fsSL https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key | sudo tee /etc/yum.repos.d/jenkins.io.key\n\nsudo tee /etc/yum.repos.d/jenkins.repo &lt;&lt;EOF\n[jenkins]\nname=Jenkins-stable\nbaseurl=http://pkg.jenkins.io/redhat-stable\ngpgcheck=1\ngpgkey=file:///etc/yum.repos.d/jenkins.io.key\nenabled=1\nEOF\n\n# Install Jenkins\nsudo dnf install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update\n\n# Install Java 17 LTS\nsudo apt install -y openjdk-17-jdk openjdk-17-jre\n\n# Add Jenkins repository\nwget -O /tmp/jenkins-key.asc https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key\nsudo mv /tmp/jenkins-key.asc /etc/apt/trusted.gpg.d/jenkins.asc\n\necho &quot;deb https://pkg.jenkins.io/debian-stable binary/&quot; | sudo tee /etc/apt/sources.list.d/jenkins.list\n\n# Update package index\nsudo apt update\n\n# Install Jenkins\nsudo apt install -y jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo ufw allow 8080/tcp\nsudo ufw allow 50000/tcp\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Java 17 LTS\nsudo pacman -S jdk17-openjdk\n\n# Install Jenkins from AUR\nyay -S jenkins\n\n# Alternative: Install manually from AUR\ngit clone https://aur.archlinux.org/jenkins.git\ncd jenkins\nmakepkg -si\n\n# Create jenkins user if not created\nsudo useradd -r -d /var/lib/jenkins -s /sbin/nologin jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /etc/jenkins/</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Jenkins is not officially packaged for Alpine Linux\n# Use Docker or manual installation\n\n# Method 1: Docker installation\napk add --no-cache docker docker-compose\nrc-update add docker default\nrc-service docker start\n\n# Create Jenkins data directory\nmkdir -p /var/lib/jenkins\n\n# Run Jenkins container\ndocker run -d \\\n  --name jenkins \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -p 50000:50000 \\\n  -v /var/lib/jenkins:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  --group-add $(getent group docker | cut -d: -f3) \\\n  jenkins/jenkins:lts-jdk17\n\n# Get initial admin password\ndocker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n\n# Method 2: Manual installation with OpenJDK\napk add --no-cache openjdk17-jre-headless\nwget https://get.jenkins.io/war-stable/latest/jenkins.war -O /opt/jenkins.war\n\n# Create jenkins user and directories\nadduser -D -s /sbin/nologin jenkins\nmkdir -p /var/lib/jenkins /var/log/jenkins\nchown -R jenkins:jenkins /var/lib/jenkins /var/log/jenkins\n\n# Create init script\ntee /etc/init.d/jenkins &lt;&lt;&#039;EOF&#039;\n#!/sbin/openrc-run\nname=&quot;Jenkins&quot;\ncommand=&quot;java&quot;\ncommand_args=&quot;-jar /opt/jenkins.war --httpPort=8080 --ajp13Port=-1&quot;\ncommand_user=&quot;jenkins&quot;\npidfile=&quot;/run/jenkins.pid&quot;\ncommand_background=&quot;yes&quot;\ndepend() {\n    need net\n}\nEOF\n\nchmod +x /etc/init.d/jenkins\nrc-update add jenkins default\nrc-service jenkins start</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y java-17-openjdk java-17-openjdk-devel\n\n# Add Jenkins repository\nsudo zypper addrepo -G https://pkg.jenkins.io/opensuse-stable/ jenkins\nsudo zypper refresh\n\n# Install Jenkins\nsudo zypper install -y jenkins\n\n# SLES 15\nsudo SUSEConnect -p sle-module-development-tools/15.5/x86_64\nsudo zypper install -y java-17-openjdk jenkins\n\n# Enable and start service\nsudo systemctl enable --now jenkins\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --permanent --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# Get initial admin password\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install jenkins-lts\n\n# Start Jenkins service\nbrew services start jenkins-lts\n\n# Or run manually\njenkins-lts\n\n# Alternative: Install specific version\nbrew install jenkins-lts@2.414\n\n# Get initial admin password\ncat ~/.jenkins/secrets/initialAdminPassword\n\n# Configuration location: ~/.jenkins/\n# Alternative: /usr/local/var/jenkins_home/ (Intel Macs)\n# Alternative: /opt/homebrew/var/jenkins_home/ (Apple Silicon)</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install jenkins openjdk17\n\n# Using ports\ncd /usr/ports/devel/jenkins\nmake install clean\n\n# Enable Jenkins\necho &#039;jenkins_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\necho &#039;jenkins_java_home=&quot;/usr/local/openjdk17&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Create jenkins user and directories\npw useradd jenkins -d /usr/local/jenkins -s /sbin/nologin\nmkdir -p /usr/local/jenkins\nchown jenkins:jenkins /usr/local/jenkins\n\n# Start service\nservice jenkins start\n\n# Get initial admin password\ncat /usr/local/jenkins/secrets/initialAdminPassword\n\n# Configuration location: /usr/local/jenkins/</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install jenkins\n\n# Method 2: Using Scoop\nscoop install jenkins\n\n# Method 3: Manual installation\n# Download from https://www.jenkins.io/download/\n# Run jenkins.msi installer\n\n# Method 4: Windows service installation\n# Download jenkins.war\n# Install as Windows service\njava -jar jenkins.war --httpPort=8080 --install\n\n# Start service\nnet start Jenkins\n\n# Get initial admin password\nGet-Content &quot;C:\\Program Files\\Jenkins\\secrets\\initialAdminPassword&quot;\n\n# Configuration location: C:\\Program Files\\Jenkins\\\n# Or: %JENKINS_HOME% (if custom location)</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Java Environment Setup</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set JAVA_HOME (Linux/macOS)\nexport JAVA_HOME=/usr/lib/jvm/java-17-openjdk\necho &#039;export JAVA_HOME=/usr/lib/jvm/java-17-openjdk&#039; &gt;&gt; ~/.bashrc\n\n# Verify Java installation\njava -version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/sysconfig/jenkins</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/default/jenkins</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/jenkins/</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code> (Docker) or <code class=\"mobile-inline-code\">/var/lib/jenkins/</code> (manual)</li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/var/lib/jenkins/</code>, <code class=\"mobile-inline-code\">/etc/sysconfig/jenkins</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">~/.jenkins/</code> or <code class=\"mobile-inline-code\">/usr/local/var/jenkins_home/</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/jenkins/</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\Program Files\\Jenkins\\</code> or <code class=\"mobile-inline-code\">%JENKINS_HOME%</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential initial configuration</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initial web setup (after accessing http://your-server:8080)\n# 1. Enter admin password from: /var/lib/jenkins/secrets/initialAdminPassword\n# 2. Install suggested plugins or select specific plugins\n# 3. Create first admin user\n# 4. Configure Jenkins URL\n\n# Essential plugins to install:\n# - Pipeline plugins (Pipeline Suite)\n# - Git plugin\n# - Credentials Binding Plugin\n# - Build Timeout Plugin\n# - Timestamper Plugin\n# - Workspace Cleanup Plugin\n# - Blue Ocean (modern UI)\n# - Matrix Authorization Strategy Plugin</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status jenkins\n\n# Check web interface\ncurl -I http://localhost:8080\n\n# Test Java version\njava -version\n\n# Check Jenkins process\nps aux | grep jenkins\n\n# Verify Jenkins CLI\nwget http://localhost:8080/jnlpJars/jenkins-cli.jar\njava -jar jenkins-cli.jar -s http://localhost:8080 version\n\n# Check available plugins\njava -jar jenkins-cli.jar -s http://localhost:8080 list-plugins</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Change the default admin password immediately and configure proper authentication!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Jenkins to start on boot\nsudo systemctl enable jenkins\n\n# Start Jenkins\nsudo systemctl start jenkins\n\n# Stop Jenkins\nsudo systemctl stop jenkins\n\n# Restart Jenkins\nsudo systemctl restart jenkins\n\n# Graceful restart (wait for running builds)\nsudo systemctl reload jenkins\n\n# Check status\nsudo systemctl status jenkins\n\n# View logs\nsudo journalctl -u jenkins -f\n\n# Edit service configuration\nsudo systemctl edit jenkins\n# Add custom environment variables or JVM options</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Docker-based installation\ndocker start jenkins\ndocker stop jenkins\ndocker restart jenkins\n\n# Check container status\ndocker ps | grep jenkins\n\n# View logs\ndocker logs -f jenkins\n\n# Manual installation\nrc-update add jenkins default\nrc-service jenkins start\nrc-service jenkins stop\nrc-service jenkins restart\nrc-service jenkins status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;jenkins_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Jenkins\nservice jenkins start\n\n# Stop Jenkins\nservice jenkins stop\n\n# Restart Jenkins\nservice jenkins restart\n\n# Check status\nservice jenkins status\n\n# View logs\ntail -f /var/log/jenkins/jenkins.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start jenkins-lts\nbrew services stop jenkins-lts\nbrew services restart jenkins-lts\n\n# Check status\nbrew services list | grep jenkins\n\n# Manual control\njenkins-lts --httpPort=8080\n\n# View logs\ntail -f /usr/local/var/log/jenkins/jenkins.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start Jenkins service\nnet start Jenkins\n\n# Stop Jenkins service\nnet stop Jenkins\n\n# Using PowerShell\nStart-Service Jenkins\nStop-Service Jenkins\nRestart-Service Jenkins\n\n# Check status\nGet-Service Jenkins\n\n# View logs (Windows Event Log)\nGet-EventLog -LogName Application -Source Jenkins\n\n# Or check Jenkins logs\nGet-Content &quot;C:\\Program Files\\Jenkins\\logs\\jenkins.log&quot; -Tail 50 -Wait</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"high-availability-configuration\" class=\"mobile-header\">High Availability Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Multi-master setup with shared storage\n# Method 1: Shared filesystem (NFS, GlusterFS)\nsudo mkdir -p /shared/jenkins\nsudo mount -t nfs nfs-server:/jenkins /shared/jenkins\n\n# Update Jenkins home\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JENKINS_HOME=/shared/jenkins&quot;\n\n# Method 2: Database-backed configuration\n# Install CloudBees Jenkins Enterprise plugins for HA\n# Configure external database (PostgreSQL recommended)\n\n# Agent configuration for load distribution\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml &lt;&lt;EOF\njenkins:\n  nodes:\n    - permanent:\n        name: &quot;linux-agent-1&quot;\n        remoteFS: &quot;/var/lib/jenkins&quot;\n        numExecutors: 4\n        launcher:\n          ssh:\n            host: &quot;agent1.example.com&quot;\n            credentialsId: &quot;ssh-agent-key&quot;\n    - permanent:\n        name: &quot;windows-agent-1&quot;\n        remoteFS: &quot;C:\\\\Jenkins&quot;\n        numExecutors: 2\n        launcher:\n          command:\n            command: &quot;java -jar agent.jar&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-settings\" class=\"mobile-header\">Advanced Security Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Jenkins Configuration as Code (JCasC) for security\nsudo tee /var/lib/jenkins/casc_configs/security.yaml &lt;&lt;EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: &quot;ldaps://ldap.example.com:636&quot;\n          rootDN: &quot;DC=example,DC=com&quot;\n          userSearchBase: &quot;OU=Users&quot;\n          userSearch: &quot;(&amp;(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))&quot;\n          groupSearchBase: &quot;OU=Groups&quot;\n          managerDN: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n          managerPasswordSecret: &quot;ldap-password&quot;\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: &quot;admin&quot;\n            permissions:\n              - &quot;Overall/Administer&quot;\n            assignments:\n              - &quot;jenkins-admins&quot;\n          - name: &quot;developer&quot;\n            permissions:\n              - &quot;Overall/Read&quot;\n              - &quot;Job/Build&quot;\n              - &quot;Job/Read&quot;\n            assignments:\n              - &quot;developers&quot;\n\nsecurity:\n  globalJobDslSecurityConfiguration:\n    useScriptSecurity: true\n  scriptApproval:\n    approvedSignatures:\n      - &quot;method java.lang.String trim&quot;\n      - &quot;staticMethod java.lang.System getProperty java.lang.String&quot;\n\nunclassified:\n  location:\n    adminAddress: &quot;jenkins@example.com&quot;\n    url: &quot;https://jenkins.example.com/&quot;\n    \n  mailer:\n    smtpHost: &quot;smtp.example.com&quot;\n    smtpPort: 587\n    charset: &quot;UTF-8&quot;\n    authentication:\n      username: &quot;jenkins@example.com&quot;\n      password: &quot;{AQAAABAAAAAQhudQr8JjwNNI9pj8oI3L2gE=}&quot;\n    useSsl: false\n    useTls: true\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/jenkins\nupstream jenkins {\n    server 127.0.0.1:8080 fail_timeout=0;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name jenkins.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jenkins.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jenkins.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jenkins.example.com/privkey.pem;\n    \n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n\n    client_max_body_size 100M;\n    \n    location / {\n        proxy_pass http://jenkins;\n        proxy_redirect default;\n        proxy_http_version 1.1;\n        \n        # Required headers for Jenkins\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Port $server_port;\n        \n        # WebSocket support for Jenkins\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        \n        # Timeout settings\n        proxy_connect_timeout 90;\n        proxy_send_timeout 90;\n        proxy_read_timeout 90;\n        \n        proxy_buffering off;\n        proxy_request_buffering off;\n        proxy_max_temp_file_size 0;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nfrontend jenkins_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/jenkins.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend jenkins_servers\n\nbackend jenkins_servers\n    mode http\n    balance roundrobin\n    option httpchk GET /login\n    http-check expect status 200\n    server jenkins1 127.0.0.1:8080 check inter 30s rise 2 fall 3\n    server jenkins2 127.0.0.1:8081 check inter 30s rise 2 fall 3 backup\n\n    # Headers for Jenkins\n    http-request set-header X-Forwarded-Proto https\n    http-request set-header X-Forwarded-Port %[dst_port]\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-http-server-configuration\" class=\"mobile-header\">Apache HTTP Server Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/jenkins.conf\n&lt;VirtualHost *:80&gt;\n    ServerName jenkins.example.com\n    Redirect permanent / https://jenkins.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName jenkins.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/jenkins.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/jenkins.example.com/privkey.pem\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot;\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    ProxyPreserveHost On\n    ProxyRequests Off\n    \n    ProxyPass / http://127.0.0.1:8080/ nocanon\n    ProxyPassReverse / http://127.0.0.1:8080/\n    ProxyPassReverse  /  http://jenkins.example.com/\n    \n    # WebSocket support\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:8080/$1&quot; [P,L]\n    \n    AllowEncodedSlashes NoDecode\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate (development only)\nsudo mkdir -p /etc/jenkins/ssl\nsudo openssl req -x509 -newkey rsa:4096 -keyout /etc/jenkins/ssl/jenkins.key -out /etc/jenkins/ssl/jenkins.crt -days 365 -nodes -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=jenkins.example.com&quot;\n\n# Create Java keystore\nsudo keytool -genkey -alias jenkins -keyalg RSA -keystore /etc/jenkins/ssl/jenkins.jks -keysize 2048 -dname &quot;CN=jenkins.example.com,OU=IT,O=Organization,L=City,ST=State,C=US&quot; -storepass changeit -keypass changeit\n\n# Configure Jenkins to use HTTPS\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JENKINS_OPTS=--httpPort=-1 --httpsPort=8443 --httpsKeyStore=/etc/jenkins/ssl/jenkins.jks --httpsKeyStorePassword=changeit&quot;\n\nsudo systemctl restart jenkins\n\n# Or use Let&#039;s Encrypt with reverse proxy (recommended)\nsudo certbot --nginx -d jenkins.example.com</code></pre>\n      </div>\n    </div>\n<h3 id=\"authentication-and-authorization\" class=\"mobile-header\">Authentication and Authorization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure LDAP authentication via JCasC\nsudo tee /var/lib/jenkins/casc_configs/auth.yaml &lt;&lt;EOF\njenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: &quot;ldaps://ldap.example.com:636&quot;\n          rootDN: &quot;DC=example,DC=com&quot;\n          inhibitInferRootDN: false\n          userSearchBase: &quot;OU=Users&quot;\n          userSearch: &quot;(&amp;(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))&quot;\n          groupSearchBase: &quot;OU=Groups&quot;\n          groupSearchFilter: &quot;(&amp;(objectClass=group)(cn={0}))&quot;\n          managerDN: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n          managerPasswordSecret: &quot;ldap-password&quot;\n          displayNameAttributeName: &quot;displayName&quot;\n          mailAddressAttributeName: &quot;mail&quot;\n\n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: &quot;jenkins-admins&quot;\n            permissions:\n              - &quot;Overall/Administer&quot;\n            assignments:\n              - &quot;Domain Admins&quot;\n              - &quot;jenkins-admins&quot;\n          - name: &quot;developers&quot;\n            permissions:\n              - &quot;Overall/Read&quot;\n              - &quot;Job/Build&quot;\n              - &quot;Job/Cancel&quot;\n              - &quot;Job/Read&quot;\n              - &quot;Job/Workspace&quot;\n              - &quot;Run/Replay&quot;\n              - &quot;Run/Update&quot;\n            assignments:\n              - &quot;developers&quot;\n              - &quot;authenticated&quot;\n          - name: &quot;viewers&quot;\n            permissions:\n              - &quot;Overall/Read&quot;\n              - &quot;Job/Read&quot;\n            assignments:\n              - &quot;viewers&quot;\n              \ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - usernamePassword:\n              scope: GLOBAL\n              id: &quot;ldap-password&quot;\n              username: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n              password: &quot;{AQAAABAAAAAQSecureEncryptedPassword=}&quot;\n              description: &quot;LDAP Service Account&quot;\n          - basicSSHUserPrivateKey:\n              scope: GLOBAL\n              id: &quot;ssh-agent-key&quot;\n              username: &quot;jenkins&quot;\n              description: &quot;SSH key for Jenkins agents&quot;\n              privateKeySource:\n                directEntry:\n                  privateKey: |\n                    -----BEGIN OPENSSH PRIVATE KEY-----\n                    EncryptedPrivateKeyContentHere\n                    -----END OPENSSH PRIVATE KEY-----\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 192.168.1.0/24 to any port 8080\nsudo ufw allow from 192.168.1.0/24 to any port 50000\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --new-zone=jenkins\nsudo firewall-cmd --permanent --zone=jenkins --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=jenkins --add-port=8080/tcp\nsudo firewall-cmd --permanent --zone=jenkins --add-port=50000/tcp\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 8080 -j ACCEPT\nsudo iptables -A INPUT -s 192.168.1.0/24 -p tcp --dport 50000 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from 192.168.1.0/24 to any port {8080, 50000}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;Jenkins HTTP&quot; -Direction Inbound -Protocol TCP -LocalPort 8080 -RemoteAddress 192.168.1.0/24 -Action Allow\nNew-NetFirewallRule -DisplayName &quot;Jenkins Agent&quot; -Direction Inbound -Protocol TCP -LocalPort 50000 -RemoteAddress 192.168.1.0/24 -Action Allow</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"external-database-configuration-postgresql\" class=\"mobile-header\">External Database Configuration (PostgreSQL)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL\nsudo apt install -y postgresql postgresql-contrib\n\n# Create Jenkins database\nsudo -u postgres createdb jenkinsdb\nsudo -u postgres createuser jenkinsuser\nsudo -u postgres psql -c &quot;ALTER USER jenkinsuser WITH PASSWORD &#039;SecureJenkinsPassword123!&#039;;&quot;\nsudo -u postgres psql -c &quot;GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;&quot;\n\n# Download PostgreSQL driver\nwget https://jdbc.postgresql.org/download/postgresql-42.6.0.jar -O /var/lib/jenkins/postgresql-connector.jar\n\n# Configure Jenkins to use PostgreSQL\nsudo tee -a /etc/default/jenkins &lt;&lt;EOF\n# PostgreSQL database configuration\nJENKINS_JAVA_OPTIONS=&quot;-Djenkins.install.runSetupWizard=false -Dhudson.model.DirectoryBrowserSupport.CSP=\\&quot;sandbox allow-scripts; default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;;\\&quot;&quot;\nEOF\n\n# Create database configuration\nsudo tee /var/lib/jenkins/database-config.xml &lt;&lt;EOF\n&lt;databaseConfiguration&gt;\n  &lt;database class=&quot;org.jenkinsci.plugins.database.postgresql.PostgreSQLDatabase&quot;&gt;\n    &lt;hostname&gt;localhost&lt;/hostname&gt;\n    &lt;port&gt;5432&lt;/port&gt;\n    &lt;database&gt;jenkinsdb&lt;/database&gt;\n    &lt;username&gt;jenkinsuser&lt;/username&gt;\n    &lt;password&gt;{AQAAABAAAAAQEncryptedPasswordHere=}&lt;/password&gt;\n    &lt;properties&gt;sslmode=require&lt;/properties&gt;\n  &lt;/database&gt;\n&lt;/databaseConfiguration&gt;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-database-schema\" class=\"mobile-header\">Backup Database Schema</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database schema backup\nsudo -u postgres pg_dump jenkinsdb &gt; /backup/jenkins/jenkinsdb-schema-$(date +%Y%m%d).sql\n\n# Create Jenkins jobs and configuration backup\nsudo tee /usr/local/bin/jenkins-db-backup.sh &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/jenkins/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# PostgreSQL backup\nsudo -u postgres pg_dump jenkinsdb | gzip &gt; &quot;$BACKUP_DIR/jenkinsdb.sql.gz&quot;\n\n# Jenkins configuration backup\ntar -czf &quot;$BACKUP_DIR/jenkins-config.tar.gz&quot; \\\n  --exclude=&quot;/var/lib/jenkins/workspace/*&quot; \\\n  --exclude=&quot;/var/lib/jenkins/builds/*/archive&quot; \\\n  --exclude=&quot;/var/lib/jenkins/logs/*&quot; \\\n  /var/lib/jenkins/\n\necho &quot;Database backup completed: $BACKUP_DIR&quot;\nEOF\n\nchmod +x /usr/local/bin/jenkins-db-backup.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Jenkins-specific system optimizations\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Jenkins optimizations\nvm.swappiness = 1\nfs.file-max = 65535\nnet.core.somaxconn = 32768\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.ip_local_port_range = 1024 65535\nEOF\n\nsudo sysctl -p\n\n# Increase file descriptor limits\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\njenkins soft nofile 65535\njenkins hard nofile 65535\njenkins soft nproc 32768\njenkins hard nproc 32768\nEOF\n\n# Optimize Jenkins JVM settings\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC -XX:+UseStringDeduplication -XX:+DisableExplicitGC -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap&quot;\nEnvironment=&quot;JENKINS_OPTS=--sessionTimeout=1440 --sessionEviction=86400&quot;\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins</code></pre>\n      </div>\n    </div>\n<h3 id=\"jenkins-performance-configuration\" class=\"mobile-header\">Jenkins Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Jenkins for high performance\nsudo tee /var/lib/jenkins/casc_configs/performance.yaml &lt;&lt;EOF\njenkins:\n  systemMessage: &quot;High-Performance Jenkins Instance&quot;\n  numExecutors: 0  # Don&#039;t run builds on controller\n  mode: EXCLUSIVE\n  quietPeriod: 5\n  scmCheckoutRetryCount: 3\n  \n  # Global pipeline libraries for shared code\n  globalLibraries:\n    libraries:\n      - name: &quot;shared-pipeline-library&quot;\n        defaultVersion: &quot;main&quot;\n        implicit: true\n        retriever:\n          modernSCM:\n            scm:\n              git:\n                remote: &quot;https://github.com/example/jenkins-shared-library.git&quot;\n                credentialsId: &quot;github-token&quot;\n\n  # Configure build discarders globally\n  buildDiscarders:\n    configuredBuildDiscarders:\n      - &quot;logRotator&quot;:\n          artifactDaysToKeepStr: &quot;30&quot;\n          artifactNumToKeepStr: &quot;10&quot;\n          daysToKeepStr: &quot;30&quot;\n          numToKeepStr: &quot;100&quot;\n\nunclassified:\n  # Configure global timeout\n  buildTimeout:\n    operations:\n      - timeoutMinutes: 60\n      - failBuild: true\n      - writingDescription: true\n      \n  # Workspace cleanup configuration  \n  wsCleanup:\n    deleteDirs: true\n    cleanupMatrixParent: true\n    skipWhenFailed: false\n    \ntool:\n  # Configure tools for performance\n  git:\n    installations:\n      - name: &quot;Default&quot;\n        home: &quot;/usr/bin/git&quot;\n        \n  maven:\n    installations:\n      - name: &quot;Maven 3.9&quot;\n        properties:\n          - installSource:\n              installers:\n                - maven:\n                    id: &quot;3.9.6&quot;\n                    \n  gradle:\n    installations:\n      - name: &quot;Gradle 8&quot;\n        properties:\n          - installSource:\n              installers:\n                - gradleInstaller:\n                    id: &quot;8.4&quot;\n\n  nodejs:\n    installations:\n      - name: &quot;NodeJS 18&quot;\n        properties:\n          - installSource:\n              installers:\n                - nodeJSInstaller:\n                    id: &quot;18.18.2&quot;\n                    \n  dockerTool:\n    installations:\n      - name: &quot;Docker&quot;\n        properties:\n          - installSource:\n              installers:\n                - dockerInstaller:\n                    version: &quot;latest&quot;\nEOF\n\n# Configure agent templates for auto-scaling\nsudo tee /var/lib/jenkins/casc_configs/agents.yaml &lt;&lt;EOF\njenkins:\n  clouds:\n    - kubernetes:\n        name: &quot;kubernetes&quot;\n        serverUrl: &quot;https://kubernetes.default.svc.cluster.local&quot;\n        namespace: &quot;jenkins&quot;\n        credentialsId: &quot;kubernetes-token&quot;\n        jenkinsUrl: &quot;http://jenkins.jenkins.svc.cluster.local:8080&quot;\n        jenkinsTunnel: &quot;jenkins-agent.jenkins.svc.cluster.local:50000&quot;\n        connectTimeout: 300\n        readTimeout: 300\n        containerCapStr: 100\n        templates:\n          - name: &quot;jenkins-agent&quot;\n            namespace: &quot;jenkins&quot;\n            label: &quot;kubernetes docker&quot;\n            nodeUsageMode: EXCLUSIVE\n            containers:\n              - name: &quot;jnlp&quot;\n                image: &quot;jenkins/inbound-agent:latest&quot;\n                alwaysPullImage: true\n                workingDir: &quot;/home/jenkins/agent&quot;\n                command: &quot;&quot;\n                args: &quot;&quot;\n                resourceRequestCpu: &quot;500m&quot;\n                resourceRequestMemory: &quot;1Gi&quot;\n                resourceLimitCpu: &quot;2&quot;\n                resourceLimitMemory: &quot;4Gi&quot;\n            volumes:\n              - hostPathVolume:\n                  hostPath: &quot;/var/run/docker.sock&quot;\n                  mountPath: &quot;/var/run/docker.sock&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"pipeline-optimization\" class=\"mobile-header\">Pipeline Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"groovy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">groovy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-groovy\">// Optimized Jenkins Pipeline Template\n// /var/lib/jenkins/pipeline-templates/optimized-pipeline.groovy\n@Library(&#039;shared-pipeline-library&#039;) _\n\npipeline {\n    agent {\n        label &#039;docker &amp;&amp; linux&#039;\n    }\n    \n    options {\n        buildDiscarder(logRotator(numToKeepStr: &#039;50&#039;, artifactNumToKeepStr: &#039;10&#039;))\n        timeout(time: 120, unit: &#039;MINUTES&#039;)\n        timestamps()\n        skipDefaultCheckout(true)\n        disableConcurrentBuilds()\n        ansiColor(&#039;xterm&#039;)\n        parallelsAlwaysFailFast()\n        copyArtifactPermission(&#039;*&#039;)\n    }\n    \n    environment {\n        DOCKER_REGISTRY = credentials(&#039;docker-registry-url&#039;)\n        MAVEN_OPTS = &#039;-Xmx2g -XX:+UseG1GC&#039;\n        GRADLE_OPTS = &#039;-Xmx2g -Dorg.gradle.daemon=false&#039;\n        CI = &#039;true&#039;\n    }\n    \n    stages {\n        stage(&#039;Checkout&#039;) {\n            steps {\n                checkout scm\n                script {\n                    env.GIT_COMMIT_SHORT = env.GIT_COMMIT.take(8)\n                    env.BUILD_VERSION = &quot;${env.BUILD_NUMBER}-${env.GIT_COMMIT_SHORT}&quot;\n                }\n            }\n        }\n        \n        stage(&#039;Parallel Analysis&#039;) {\n            parallel {\n                stage(&#039;Code Quality&#039;) {\n                    steps {\n                        script {\n                            // SonarQube analysis\n                            withSonarQubeEnv(&#039;SonarQube&#039;) {\n                                sh &#039;&#039;&#039;\n                                    mvn sonar:sonar \\\n                                        -Dsonar.projectKey=${JOB_NAME} \\\n                                        -Dsonar.projectVersion=${BUILD_VERSION} \\\n                                        -Dsonar.sources=src/main \\\n                                        -Dsonar.tests=src/test \\\n                                        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml\n                                &#039;&#039;&#039;\n                            }\n                            \n                            timeout(time: 10, unit: &#039;MINUTES&#039;) {\n                                waitForQualityGate abortPipeline: true\n                            }\n                        }\n                    }\n                }\n                \n                stage(&#039;Security Scan&#039;) {\n                    steps {\n                        // OWASP Dependency Check\n                        dependencyCheck additionalArguments: &#039;&#039;&#039;\n                            --enableRetired\n                            --enableExperimental  \n                            --scan ./\n                            --format JSON\n                            --format HTML\n                            --suppression dependency-check-suppressions.xml\n                        &#039;&#039;&#039;, odcInstallation: &#039;dependency-check-8.4.0&#039;\n                        \n                        dependencyCheckPublisher pattern: &#039;**/dependency-check-report.xml&#039;\n                        \n                        // Secret scanning\n                        sh &#039;&#039;&#039;\n                            docker run --rm -v $(pwd):/repo \\\n                                trufflesecurity/trufflehog:latest \\\n                                git file:///repo \\\n                                --json \\\n                                --fail &gt; trufflehog-results.json || true\n                        &#039;&#039;&#039;\n                    }\n                }\n                \n                stage(&#039;Test&#039;) {\n                    steps {\n                        sh &#039;&#039;&#039;\n                            # Parallel test execution\n                            mvn clean test \\\n                                -Dmaven.test.failure.ignore=true \\\n                                -Dspring.profiles.active=test \\\n                                -Djunit.jupiter.execution.parallel.enabled=true \\\n                                -Djunit.jupiter.execution.parallel.mode.default=concurrent\n                        &#039;&#039;&#039;\n                        \n                        publishTestResults testResultsPattern: &#039;target/surefire-reports/*.xml&#039;\n                        publishCoverage adapters: [jacocoAdapter(&#039;target/site/jacoco/jacoco.xml&#039;)], \n                                       sourceFileResolver: sourceFiles(&#039;STORE_LAST_BUILD&#039;)\n                    }\n                    post {\n                        always {\n                            archiveArtifacts artifacts: &#039;target/surefire-reports/**&#039;, allowEmptyArchive: true\n                        }\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Build &amp; Package&#039;) {\n            steps {\n                sh &#039;&#039;&#039;\n                    # Optimized build with parallel processing\n                    mvn clean package \\\n                        -DskipTests \\\n                        -T 2C \\\n                        -Dspring.profiles.active=production \\\n                        -Dmaven.javadoc.skip=true\n                &#039;&#039;&#039;\n                \n                // Docker build with BuildKit\n                script {\n                    def image = docker.build(&quot;${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}&quot;, \n                                           &quot;--build-arg BUILD_VERSION=${env.BUILD_VERSION} .&quot;)\n                    \n                    // Security scanning with Trivy\n                    sh &quot;&quot;&quot;\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --format table \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${env.DOCKER_REGISTRY}/${env.JOB_NAME}:${env.BUILD_VERSION}\n                    &quot;&quot;&quot;\n                    \n                    image.push()\n                    image.push(&quot;latest&quot;)\n                }\n            }\n        }\n        \n        stage(&#039;Deploy&#039;) {\n            when {\n                anyOf {\n                    branch &#039;main&#039;\n                    branch &#039;develop&#039;\n                    branch &#039;release/*&#039;\n                }\n            }\n            parallel {\n                stage(&#039;Staging&#039;) {\n                    when { branch &#039;develop&#039; }\n                    steps {\n                        script {\n                            // Deploy to staging environment\n                            sh &#039;&#039;&#039;\n                                kubectl set image deployment/myapp-staging \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=staging\n                                \n                                kubectl rollout status deployment/myapp-staging \\\n                                    --namespace=staging --timeout=300s\n                            &#039;&#039;&#039;\n                            \n                            // Run smoke tests\n                            sh &#039;&#039;&#039;\n                                curl -f http://myapp-staging.example.com/health || exit 1\n                                npm run test:e2e -- --base-url http://myapp-staging.example.com\n                            &#039;&#039;&#039;\n                        }\n                    }\n                }\n                \n                stage(&#039;Production&#039;) {\n                    when { \n                        anyOf {\n                            branch &#039;main&#039;\n                            branch &#039;release/*&#039;\n                        }\n                    }\n                    steps {\n                        // Manual approval for production\n                        timeout(time: 60, unit: &#039;MINUTES&#039;) {\n                            input message: &#039;Deploy to production?&#039;, \n                                  ok: &#039;Deploy&#039;,\n                                  submitterParameter: &#039;APPROVER&#039;\n                        }\n                        \n                        script {\n                            sh &#039;&#039;&#039;\n                                # Blue-green deployment\n                                kubectl set image deployment/myapp-production \\\n                                    myapp=${DOCKER_REGISTRY}/${JOB_NAME}:${BUILD_VERSION} \\\n                                    --namespace=production\n                                \n                                kubectl rollout status deployment/myapp-production \\\n                                    --namespace=production --timeout=600s\n                            &#039;&#039;&#039;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    post {\n        always {\n            // Cleanup workspace\n            cleanWs()\n            \n            // Archive artifacts\n            archiveArtifacts artifacts: &#039;target/*.jar,docker-compose.yml&#039;, \n                           allowEmptyArchive: true, \n                           fingerprint: true\n                           \n            // Collect build metrics\n            script {\n                def buildDuration = currentBuild.duration / 1000\n                echo &quot;Build completed in ${buildDuration} seconds&quot;\n                \n                // Custom metrics collection\n                sh &quot;&quot;&quot;\n                    echo &quot;build_duration_seconds{job=\\&quot;${env.JOB_NAME}\\&quot;,build=\\&quot;${env.BUILD_NUMBER}\\&quot;} ${buildDuration}&quot; &gt; build-metrics.txt\n                &quot;&quot;&quot;\n                \n                archiveArtifacts artifacts: &#039;build-metrics.txt&#039;, allowEmptyArchive: true\n            }\n        }\n        \n        success {\n            // Success notifications\n            emailext(\n                subject: &quot;✅ Build Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;&quot;&quot;Build successful for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\n                         \n                Build URL: ${env.BUILD_URL}\n                Git Commit: ${env.GIT_COMMIT}\n                Duration: ${currentBuild.durationString}\n                Approver: ${env.APPROVER ?: &#039;Automatic&#039;}&quot;&quot;&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL ?: &#039;jenkins@example.com&#039;}&quot;\n            )\n            \n            slackSend(\n                channel: &#039;#deployments&#039;,\n                color: &#039;good&#039;,\n                message: &quot;✅ Deployment Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER} by ${env.APPROVER ?: &#039;System&#039;}&quot;\n            )\n        }\n        \n        failure {\n            emailext(\n                subject: &quot;❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Build failed for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL ?: &#039;jenkins@example.com&#039;}&quot;\n            )\n            \n            slackSend(\n                channel: &#039;#ci-cd-alerts&#039;,\n                color: &#039;danger&#039;,\n                message: &quot;❌ Build Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (&lt;${env.BUILD_URL}|View Details&gt;)&quot;\n            )\n        }\n        \n        unstable {\n            emailext(\n                subject: &quot;⚠️  Build Unstable: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Build unstable for ${env.JOB_NAME} build ${env.BUILD_NUMBER}\\n\\nBuild URL: ${env.BUILD_URL}&quot;,\n                to: &quot;${env.CHANGE_AUTHOR_EMAIL ?: &#039;jenkins@example.com&#039;}&quot;\n            )\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Jenkins CLI monitoring commands\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password version\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-jobs\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-builds job-name\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password get-build job-name 1\n\n# System information\ncurl -u admin:password http://localhost:8080/systemInfo\n\n# Build queue status\ncurl -u admin:password http://localhost:8080/queue/api/json\n\n# Node status\ncurl -u admin:password http://localhost:8080/computer/api/json\n\n# Plugin information\ncurl -u admin:password http://localhost:8080/pluginManager/api/json?depth=1</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-setup\" class=\"mobile-header\">External Monitoring Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Jenkins Prometheus Plugin and configure metrics\n# Via Jenkins UI: Manage Jenkins &gt; Manage Plugins &gt; Available &gt; Prometheus metrics plugin\n\n# Configure Prometheus to scrape Jenkins metrics\nsudo tee /etc/prometheus/jenkins.yml &lt;&lt;EOF\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: &#039;jenkins&#039;\n    static_configs:\n      - targets: [&#039;localhost:8080&#039;]\n    metrics_path: /prometheus/\n    scrape_interval: 30s\n    scrape_timeout: 10s\nEOF\n\n# Install Jenkins Exporter (alternative)\nwget https://github.com/lovoo/jenkins_exporter/releases/download/v1.0.0/jenkins_exporter-1.0.0.linux-amd64.tar.gz\ntar xzf jenkins_exporter-*.tar.gz\nsudo cp jenkins_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/jenkins_exporter.service &lt;&lt;EOF\n[Unit]\nDescription=Jenkins Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=jenkins\nExecStart=/usr/local/bin/jenkins_exporter \\\n    --jenkins.address=http://localhost:8080 \\\n    --jenkins.username=monitoring \\\n    --jenkins.password=MonitoringPassword123! \\\n    --web.listen-address=:9118\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now jenkins_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-scripts\" class=\"mobile-header\">Health Check Scripts</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-health-check.sh\n\nJENKINS_URL=&quot;http://localhost:8080&quot;\nHEALTH_LOG=&quot;/var/log/jenkins-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active jenkins &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✅ Jenkins service is running&quot;\nelse\n    log_message &quot;❌ Jenkins service is not running&quot;\n    exit 2\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w &quot;%{http_code}&quot; ${JENKINS_URL}/login)\nif [ &quot;${HTTP_STATUS}&quot; = &quot;200&quot; ]; then\n    log_message &quot;✅ Jenkins web interface responding (HTTP ${HTTP_STATUS})&quot;\nelse\n    log_message &quot;❌ Jenkins web interface issues (HTTP ${HTTP_STATUS})&quot;\n    exit 2\nfi\n\n# Check disk space\nJENKINS_HOME_USAGE=$(df /var/lib/jenkins | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ ${JENKINS_HOME_USAGE} -gt 85 ]; then\n    log_message &quot;⚠️  High disk usage: ${JENKINS_HOME_USAGE}%&quot;\n    exit 1\nelse\n    log_message &quot;✅ Jenkins home disk usage: ${JENKINS_HOME_USAGE}%&quot;\nfi\n\n# Check memory usage\nJAVA_MEMORY=$(ps -o pid,vsz,rss,comm -C java | grep jenkins | awk &#039;{rss+=$3} END {print rss/1024}&#039;)\nif (( $(echo &quot;${JAVA_MEMORY} &gt; 6144&quot; | bc -l) )); then\n    log_message &quot;⚠️  High memory usage: ${JAVA_MEMORY}MB&quot;\n    exit 1\nelse\n    log_message &quot;✅ Jenkins memory usage: ${JAVA_MEMORY}MB&quot;\nfi\n\n# Check running builds (if Jenkins CLI is available)\nif [ -f /var/lib/jenkins/jenkins-cli.jar ]; then\n    RUNNING_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2&gt;/dev/null | grep -c &quot;RUNNING&quot; || echo &quot;0&quot;)\n    log_message &quot;ℹ️  Running builds: ${RUNNING_BUILDS}&quot;\n    \n    # Check for failed builds in last 24 hours\n    FAILED_BUILDS=$(java -jar /var/lib/jenkins/jenkins-cli.jar -s ${JENKINS_URL} -auth monitoring:MonitoringPassword123! list-builds 2&gt;/dev/null | grep -c &quot;FAILURE&quot; || echo &quot;0&quot;)\n    if [ ${FAILED_BUILDS} -gt 5 ]; then\n        log_message &quot;⚠️  High number of failed builds: ${FAILED_BUILDS}&quot;\n        exit 1\n    fi\nfi\n\n# Check plugin health\nPLUGIN_ERRORS=$(curl -s ${JENKINS_URL}/pluginManager/api/json?depth=1 | jq &#039;.plugins[] | select(.hasUpdate==true or .enabled==false) | .shortName&#039; | wc -l)\nif [ ${PLUGIN_ERRORS} -gt 0 ]; then\n    log_message &quot;⚠️  Plugins need attention: ${PLUGIN_ERRORS}&quot;\nfi\n\nlog_message &quot;✅ Jenkins health check completed&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"comprehensive-backup-strategy\" class=\"mobile-header\">Comprehensive Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-backup.sh\n\nBACKUP_DIR=&quot;/backup/jenkins&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nJENKINS_HOME=&quot;/var/lib/jenkins&quot;\nRETENTION_DAYS=14\n\nmkdir -p ${BACKUP_DIR}/{config,jobs,plugins,secrets,workspace}\n\necho &quot;Starting Jenkins comprehensive backup...&quot;\n\n# Function to gracefully shutdown Jenkins\ngraceful_shutdown() {\n    echo &quot;Putting Jenkins in quiet mode...&quot;\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! quiet-down\n    \n    # Wait for running builds to complete (max 20 minutes)\n    for i in {1..120}; do\n        RUNNING_BUILDS=$(java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-builds | grep -c &quot;RUNNING&quot; || echo &quot;0&quot;)\n        if [ &quot;$RUNNING_BUILDS&quot; -eq 0 ]; then\n            echo &quot;All builds completed, stopping Jenkins...&quot;\n            systemctl stop jenkins\n            break\n        fi\n        echo &quot;Waiting for $RUNNING_BUILDS running builds to complete... (${i}/120)&quot;\n        sleep 10\n    done\n    \n    if [ &quot;$RUNNING_BUILDS&quot; -gt 0 ]; then\n        echo &quot;Warning: Stopping Jenkins with $RUNNING_BUILDS builds still running&quot;\n        systemctl stop jenkins\n    fi\n}\n\n# Function to start Jenkins\nstart_jenkins() {\n    echo &quot;Starting Jenkins...&quot;\n    systemctl start jenkins\n    \n    # Wait for Jenkins to be ready\n    for i in {1..60}; do\n        if curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n            echo &quot;Jenkins is ready, canceling quiet mode...&quot;\n            java -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! cancel-quiet-down\n            break\n        fi\n        echo &quot;Waiting for Jenkins to start... (${i}/60)&quot;\n        sleep 10\n    done\n}\n\n# Gracefully shutdown Jenkins\ngraceful_shutdown\n\n# Full Jenkins home backup (excluding large/temporary directories)\necho &quot;Creating full Jenkins home backup...&quot;\ntar --exclude=&quot;${JENKINS_HOME}/workspace/*&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/builds/*/archive&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/logs/*&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/.m2/repository&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/caches&quot; \\\n    --exclude=&quot;${JENKINS_HOME}/war&quot; \\\n    -czf ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz \\\n    -C ${JENKINS_HOME} .\n\n# Job configurations backup\necho &quot;Backing up job configurations...&quot;\nmkdir -p ${BACKUP_DIR}/jobs\nfind ${JENKINS_HOME}/jobs -name &quot;config.xml&quot; -exec cp {} ${BACKUP_DIR}/jobs/ \\;\ntar -czf ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz -C ${BACKUP_DIR}/jobs .\nrm ${BACKUP_DIR}/jobs/config.xml 2&gt;/dev/null\n\n# Plugins backup\necho &quot;Backing up installed plugins...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s http://localhost:8080 -auth admin:SecureAdminPassword123! list-plugins &gt; ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt\ncp -r ${JENKINS_HOME}/plugins ${BACKUP_DIR}/plugins/plugins-${DATE}/ 2&gt;/dev/null\n\n# Secrets and credentials backup\necho &quot;Backing up secrets and credentials...&quot;\nif [ -d &quot;${JENKINS_HOME}/secrets&quot; ]; then\n    tar -czf ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz -C ${JENKINS_HOME} secrets/\nfi\n\n# System configuration backup\necho &quot;Backing up system configuration...&quot;\ntar -czf ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz \\\n    /etc/default/jenkins \\\n    /etc/sysconfig/jenkins \\\n    /etc/systemd/system/jenkins.service.d/ 2&gt;/dev/null\n\n# Database backup (if using external database)\nif [ -f &quot;${JENKINS_HOME}/database-config.xml&quot; ]; then\n    echo &quot;Backing up external database...&quot;\n    sudo -u postgres pg_dump jenkinsdb | gzip &gt; ${BACKUP_DIR}/config/jenkinsdb-${DATE}.sql.gz\nfi\n\n# Start Jenkins\nstart_jenkins\n\n# Cloud backup (uncomment and configure as needed)\n# aws s3 cp ${BACKUP_DIR}/ s3://jenkins-backups/${DATE}/ --recursive --sse AES256\n# az storage blob upload-batch --source ${BACKUP_DIR} --destination jenkins-backups --destination-path ${DATE}\n# gsutil cp -r ${BACKUP_DIR}/* gs://jenkins-backups/${DATE}/\n\n# Verify backup integrity\necho &quot;Verifying backup integrity...&quot;\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz | head -1)\nif tar -tzf &quot;$LATEST_BACKUP&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Backup integrity verified&quot;\n    BACKUP_SIZE=$(du -h &quot;$LATEST_BACKUP&quot; | cut -f1)\n    echo &quot;Backup size: $BACKUP_SIZE&quot;\nelse\n    echo &quot;❌ Backup integrity check failed&quot;\n    exit 1\nfi\n\n# Cleanup old backups\necho &quot;Cleaning up old backups (keeping last $RETENTION_DAYS days)...&quot;\nfind ${BACKUP_DIR} -name &quot;jenkins-*&quot; -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name &quot;plugin-list-*&quot; -type f -mtime +${RETENTION_DAYS} -delete\nfind ${BACKUP_DIR} -name &quot;*-${DATE}*&quot; -type d -mtime +${RETENTION_DAYS} -exec rm -rf {} \\;\n\n# Generate backup report\necho &quot;Generating backup report...&quot;\ncat &gt; ${BACKUP_DIR}/backup-report-${DATE}.txt &lt;&lt;EOF\nJenkins Backup Report - ${DATE}\n================================\n\nBackup Location: ${BACKUP_DIR}\nJenkins Home: ${JENKINS_HOME}\nBackup Date: $(date)\nServer: $(hostname)\n\nFiles backed up:\n- Jenkins Home: $(ls -lh ${BACKUP_DIR}/config/jenkins-home-${DATE}.tar.gz)\n- Job Configs: $(ls -lh ${BACKUP_DIR}/jobs/job-configs-${DATE}.tar.gz)\n- Plugins: $(ls -lh ${BACKUP_DIR}/plugins/plugin-list-${DATE}.txt)\n- Secrets: $(ls -lh ${BACKUP_DIR}/secrets/jenkins-secrets-${DATE}.tar.gz 2&gt;/dev/null || echo &quot;No secrets backup&quot;)\n- System Config: $(ls -lh ${BACKUP_DIR}/config/system-config-${DATE}.tar.gz 2&gt;/dev/null || echo &quot;No system config backup&quot;)\n\nTotal Backup Size: $(du -h ${BACKUP_DIR} | tail -1 | cut -f1)\n\nVerification: ✅ Passed\nEOF\n\necho &quot;✅ Jenkins backup completed: ${DATE}&quot;\necho &quot;📊 Backup report: ${BACKUP_DIR}/backup-report-${DATE}.txt&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-restore.sh\n\nBACKUP_FILE=&quot;${1}&quot;\nRESTORE_TYPE=&quot;${2:-full}&quot;  # full, config-only, jobs-only\n\nusage() {\n    echo &quot;Usage: $0 &lt;backup_file&gt; [restore_type]&quot;\n    echo &quot;Restore types: full (default), config-only, jobs-only&quot;\n    echo &quot;&quot;\n    echo &quot;Available backups:&quot;\n    ls -la /backup/jenkins/config/jenkins-home-*.tar.gz | head -10\n    exit 1\n}\n\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    usage\nfi\n\nif [ ! -f &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;❌ Backup file not found: $BACKUP_FILE&quot;\n    exit 1\nfi\n\necho &quot;🔄 Starting Jenkins restore from: $BACKUP_FILE&quot;\necho &quot;Restore type: $RESTORE_TYPE&quot;\n\n# Pre-restore backup of current state\nif [ -d &quot;/var/lib/jenkins&quot; ]; then\n    echo &quot;📦 Creating backup of current installation...&quot;\n    CURRENT_BACKUP=&quot;/backup/jenkins/pre-restore-$(date +%s)&quot;\n    mkdir -p &quot;$CURRENT_BACKUP&quot;\n    mv /var/lib/jenkins &quot;$CURRENT_BACKUP/jenkins-$(date +%Y%m%d_%H%M%S)&quot;\n    echo &quot;Current installation backed up to: $CURRENT_BACKUP&quot;\nfi\n\n# Stop Jenkins\necho &quot;⏹️  Stopping Jenkins...&quot;\nsystemctl stop jenkins\n\ncase &quot;$RESTORE_TYPE&quot; in\n    &quot;full&quot;)\n        echo &quot;🔄 Performing full restore...&quot;\n        \n        # Create new Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Restore from backup\n        echo &quot;📂 Extracting backup archive...&quot;\n        tar -xzf &quot;$BACKUP_FILE&quot; -C /var/lib/jenkins\n        \n        # Set proper ownership\n        chown -R jenkins:jenkins /var/lib/jenkins\n        chmod -R 755 /var/lib/jenkins\n        \n        # Special permissions for secrets\n        if [ -d &quot;/var/lib/jenkins/secrets&quot; ]; then\n            chmod 700 /var/lib/jenkins/secrets\n            chmod 600 /var/lib/jenkins/secrets/*\n        fi\n        ;;\n        \n    &quot;config-only&quot;)\n        echo &quot;🔄 Performing configuration-only restore...&quot;\n        \n        # Create minimal Jenkins directory\n        mkdir -p /var/lib/jenkins\n        \n        # Extract only configuration files\n        tar -xzf &quot;$BACKUP_FILE&quot; -C /var/lib/jenkins \\\n            --include=&quot;*/config.xml&quot; \\\n            --include=&quot;*/secrets/*&quot; \\\n            --include=&quot;*/users/*&quot; \\\n            --include=&quot;*/plugins/*&quot; \\\n            --exclude=&quot;*/workspace/*&quot; \\\n            --exclude=&quot;*/builds/*&quot;\n            \n        chown -R jenkins:jenkins /var/lib/jenkins\n        ;;\n        \n    &quot;jobs-only&quot;)\n        echo &quot;🔄 Performing jobs-only restore...&quot;\n        \n        if [ ! -d &quot;/var/lib/jenkins&quot; ]; then\n            echo &quot;❌ Jenkins directory not found. Cannot restore jobs only.&quot;\n            exit 1\n        fi\n        \n        # Backup current jobs\n        if [ -d &quot;/var/lib/jenkins/jobs&quot; ]; then\n            mv /var/lib/jenkins/jobs &quot;/var/lib/jenkins/jobs.backup.$(date +%s)&quot;\n        fi\n        \n        # Extract only jobs\n        tar -xzf &quot;$BACKUP_FILE&quot; -C /var/lib/jenkins jobs/\n        chown -R jenkins:jenkins /var/lib/jenkins/jobs\n        ;;\n        \n    *)\n        echo &quot;❌ Unknown restore type: $RESTORE_TYPE&quot;\n        usage\n        ;;\nesac\n\n# Restore system configuration if available\nBACKUP_DIR=$(dirname &quot;$BACKUP_FILE&quot;)\nBACKUP_DATE=$(basename &quot;$BACKUP_FILE&quot; .tar.gz | sed &#039;s/jenkins-home-//&#039;)\nSYSTEM_CONFIG=&quot;${BACKUP_DIR}/../config/system-config-${BACKUP_DATE}.tar.gz&quot;\n\nif [ -f &quot;$SYSTEM_CONFIG&quot; ]; then\n    echo &quot;🔧 Restoring system configuration...&quot;\n    tar -xzf &quot;$SYSTEM_CONFIG&quot; -C / 2&gt;/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=&quot;${BACKUP_DIR}/jenkinsdb-${BACKUP_DATE}.sql.gz&quot;\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;🗄️  Restoring database...&quot;\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql jenkinsdb\nfi\n\n# Start Jenkins\necho &quot;▶️  Starting Jenkins...&quot;\nsystemctl start jenkins\n\n# Wait for Jenkins to start and verify\necho &quot;⏳ Waiting for Jenkins to start...&quot;\nfor i in {1..120}; do\n    if curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;✅ Jenkins started successfully&quot;\n        break\n    fi\n    echo &quot;Waiting for Jenkins to start... (${i}/120)&quot;\n    sleep 10\ndone\n\n# Verify restoration\necho &quot;🔍 Verifying restoration...&quot;\nif curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Jenkins is responding&quot;\n    \n    # Check if jobs were restored\n    if [ -d &quot;/var/lib/jenkins/jobs&quot; ]; then\n        JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs | wc -l)\n        echo &quot;📋 Jobs restored: $JOB_COUNT&quot;\n    fi\n    \n    # Check if plugins were restored\n    if [ -d &quot;/var/lib/jenkins/plugins&quot; ]; then\n        PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins | wc -l)\n        echo &quot;🔌 Plugins restored: $PLUGIN_COUNT&quot;\n    fi\n    \n    echo &quot;✅ Jenkins restoration completed successfully&quot;\n    echo &quot;&quot;\n    echo &quot;📝 Next steps:&quot;\n    echo &quot;1. Verify Jenkins configuration via web interface&quot;\n    echo &quot;2. Check plugin compatibility and update if needed&quot;\n    echo &quot;3. Verify job configurations and test builds&quot;\n    echo &quot;4. Update any environment-specific settings&quot;\n    \nelse\n    echo &quot;❌ Jenkins restoration failed - service not responding&quot;\n    echo &quot;Check logs: journalctl -u jenkins -n 50&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"disaster-recovery\" class=\"mobile-header\">Disaster Recovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-disaster-recovery.sh\n\necho &quot;🚨 Jenkins Disaster Recovery Procedure&quot;\necho &quot;======================================&quot;\n\n# Check if Jenkins is running\nif systemctl is-active jenkins &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;⚠️  Jenkins is running. This procedure should be run on a failed system.&quot;\n    read -p &quot;Continue anyway? (y/N): &quot; -n 1 -r\n    echo\n    if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n        exit 1\n    fi\nfi\n\n# Find latest backup\nBACKUP_DIR=&quot;/backup/jenkins&quot;\nLATEST_BACKUP=$(ls -t ${BACKUP_DIR}/config/jenkins-home-*.tar.gz 2&gt;/dev/null | head -1)\n\nif [ -z &quot;$LATEST_BACKUP&quot; ]; then\n    echo &quot;❌ No backups found in ${BACKUP_DIR}&quot;\n    echo &quot;Please restore from cloud backup or external storage&quot;\n    exit 1\nfi\n\necho &quot;📦 Latest backup found: $LATEST_BACKUP&quot;\necho &quot;📅 Backup date: $(basename &quot;$LATEST_BACKUP&quot; .tar.gz | sed &#039;s/jenkins-home-//&#039;)&quot;\n\n# Verify backup integrity\necho &quot;🔍 Verifying backup integrity...&quot;\nif tar -tzf &quot;$LATEST_BACKUP&quot; &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Backup integrity verified&quot;\nelse\n    echo &quot;❌ Backup is corrupted. Cannot proceed with recovery.&quot;\n    exit 1\nfi\n\n# Create disaster recovery log\nDR_LOG=&quot;/var/log/jenkins-disaster-recovery-$(date +%Y%m%d_%H%M%S).log&quot;\nexec &gt; &gt;(tee -a &quot;$DR_LOG&quot;)\nexec 2&gt;&amp;1\n\necho &quot;📝 Disaster recovery log: $DR_LOG&quot;\n\n# System preparation\necho &quot;🔧 Preparing system for recovery...&quot;\n\n# Install Jenkins if not present\nif ! command -v jenkins &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;📦 Installing Jenkins...&quot;\n    # Add Jenkins repository and install (distribution-specific commands)\n    if [ -f /etc/debian_version ]; then\n        wget -q -O - https://pkg.jenkins.io/debian-stable/jenkins.io.key | apt-key add -\n        echo &quot;deb https://pkg.jenkins.io/debian-stable binary/&quot; &gt; /etc/apt/sources.list.d/jenkins.list\n        apt-get update\n        apt-get install -y openjdk-17-jdk jenkins\n    elif [ -f /etc/redhat-release ]; then\n        yum install -y java-17-openjdk jenkins\n    fi\nfi\n\n# Stop Jenkins service\nsystemctl stop jenkins\n\n# Clear existing Jenkins data\nif [ -d &quot;/var/lib/jenkins&quot; ]; then\n    echo &quot;🗑️  Removing existing Jenkins data...&quot;\n    rm -rf /var/lib/jenkins.disaster-backup-$(date +%s)\n    mv /var/lib/jenkins /var/lib/jenkins.disaster-backup-$(date +%s)\nfi\n\n# Create new Jenkins directory\nmkdir -p /var/lib/jenkins\n\n# Restore from backup\necho &quot;🔄 Restoring Jenkins from backup...&quot;\ntar -xzf &quot;$LATEST_BACKUP&quot; -C /var/lib/jenkins\n\n# Set proper permissions\nchown -R jenkins:jenkins /var/lib/jenkins\nchmod -R 755 /var/lib/jenkins\n\n# Special permissions for sensitive files\nif [ -d &quot;/var/lib/jenkins/secrets&quot; ]; then\n    chmod 700 /var/lib/jenkins/secrets\n    chmod 600 /var/lib/jenkins/secrets/*\nfi\n\nif [ -d &quot;/var/lib/jenkins/users&quot; ]; then\n    chmod 700 /var/lib/jenkins/users\nfi\n\n# Restore system configuration\nBACKUP_DATE=$(basename &quot;$LATEST_BACKUP&quot; .tar.gz | sed &#039;s/jenkins-home-//&#039;)\nSYSTEM_CONFIG=&quot;${BACKUP_DIR}/config/system-config-${BACKUP_DATE}.tar.gz&quot;\n\nif [ -f &quot;$SYSTEM_CONFIG&quot; ]; then\n    echo &quot;🔧 Restoring system configuration...&quot;\n    tar -xzf &quot;$SYSTEM_CONFIG&quot; -C / 2&gt;/dev/null\n    systemctl daemon-reload\nfi\n\n# Restore database if available\nDB_BACKUP=&quot;${BACKUP_DIR}/config/jenkinsdb-${BACKUP_DATE}.sql.gz&quot;\nif [ -f &quot;$DB_BACKUP&quot; ]; then\n    echo &quot;🗄️  Restoring database...&quot;\n    # Ensure PostgreSQL is running\n    systemctl start postgresql\n    \n    # Drop and recreate database\n    sudo -u postgres psql -c &quot;DROP DATABASE IF EXISTS jenkinsdb;&quot;\n    sudo -u postgres psql -c &quot;CREATE DATABASE jenkinsdb;&quot;\n    sudo -u postgres psql -c &quot;GRANT ALL PRIVILEGES ON DATABASE jenkinsdb TO jenkinsuser;&quot;\n    \n    # Restore database\n    zcat &quot;$DB_BACKUP&quot; | sudo -u postgres psql jenkinsdb\nfi\n\n# Configure firewall\necho &quot;🔥 Configuring firewall...&quot;\nif command -v ufw &gt;/dev/null 2&gt;&amp;1; then\n    ufw allow 8080/tcp\n    ufw allow 50000/tcp\nelif command -v firewall-cmd &gt;/dev/null 2&gt;&amp;1; then\n    firewall-cmd --permanent --add-port=8080/tcp\n    firewall-cmd --permanent --add-port=50000/tcp\n    firewall-cmd --reload\nfi\n\n# Start Jenkins\necho &quot;▶️  Starting Jenkins...&quot;\nsystemctl enable jenkins\nsystemctl start jenkins\n\n# Wait for Jenkins to start\necho &quot;⏳ Waiting for Jenkins to initialize...&quot;\nfor i in {1..300}; do\n    if curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n        echo &quot;✅ Jenkins is responding&quot;\n        break\n    fi\n    echo &quot;Waiting for Jenkins... (${i}/300)&quot;\n    sleep 10\ndone\n\n# Verify recovery\necho &quot;🔍 Verifying disaster recovery...&quot;\n\n# Check Jenkins status\nif systemctl is-active jenkins &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Jenkins service is running&quot;\nelse\n    echo &quot;❌ Jenkins service failed to start&quot;\n    echo &quot;Check logs: journalctl -u jenkins -n 50&quot;\n    exit 1\nfi\n\n# Check web interface\nif curl -f http://localhost:8080/login &gt;/dev/null 2&gt;&amp;1; then\n    echo &quot;✅ Jenkins web interface is accessible&quot;\nelse\n    echo &quot;❌ Jenkins web interface is not responding&quot;\n    exit 1\nfi\n\n# Check jobs restoration\nif [ -d &quot;/var/lib/jenkins/jobs&quot; ]; then\n    JOB_COUNT=$(ls -1 /var/lib/jenkins/jobs 2&gt;/dev/null | wc -l)\n    echo &quot;📋 Jobs recovered: $JOB_COUNT&quot;\nelse\n    echo &quot;⚠️  No jobs directory found&quot;\nfi\n\n# Check plugins restoration\nif [ -d &quot;/var/lib/jenkins/plugins&quot; ]; then\n    PLUGIN_COUNT=$(ls -1 /var/lib/jenkins/plugins 2&gt;/dev/null | wc -l)\n    echo &quot;🔌 Plugins recovered: $PLUGIN_COUNT&quot;\nelse\n    echo &quot;⚠️  No plugins directory found&quot;\nfi\n\n# Generate recovery report\necho &quot;📊 Generating disaster recovery report...&quot;\ncat &gt; &quot;/var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt&quot; &lt;&lt;EOF\nJenkins Disaster Recovery Report\n===============================\nRecovery Date: $(date)\nServer: $(hostname)\nBackup Used: $LATEST_BACKUP\nRecovery Log: $DR_LOG\n\nRecovery Summary:\n- Jenkins Service: $(systemctl is-active jenkins)\n- Web Interface: $(curl -s -o /dev/null -w &quot;%{http_code}&quot; http://localhost:8080/login)\n- Jobs Recovered: $JOB_COUNT\n- Plugins Recovered: $PLUGIN_COUNT\n- Database Restored: $([ -f &quot;$DB_BACKUP&quot; ] &amp;&amp; echo &quot;Yes&quot; || echo &quot;No&quot;)\n\nNext Steps:\n1. Verify Jenkins configuration via web interface: http://$(hostname):8080\n2. Test critical job configurations\n3. Update any environment-specific settings\n4. Verify agent connections\n5. Test integrations (SCM, notifications, etc.)\n6. Update DNS/load balancer configurations if needed\n7. Notify team of recovery completion\n\nRecovery Status: ✅ COMPLETED\nEOF\n\necho &quot;&quot;\necho &quot;🎉 Jenkins disaster recovery completed successfully!&quot;\necho &quot;📝 Recovery report saved to: /var/log/jenkins-recovery-report-$(date +%Y%m%d_%H%M%S).txt&quot;\necho &quot;&quot;\necho &quot;🔗 Access Jenkins: http://$(hostname):8080&quot;\necho &quot;&quot;\necho &quot;⚠️  Important post-recovery tasks:&quot;\necho &quot;1. Verify all job configurations&quot;\necho &quot;2. Test agent connections&quot;\necho &quot;3. Verify integrations (GitHub, LDAP, etc.)&quot;\necho &quot;4. Update any environment-specific configurations&quot;\necho &quot;5. Perform a backup of the recovered system&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Jenkins won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status and logs\nsudo systemctl status jenkins\nsudo journalctl -u jenkins -f\n\n# Check Java version and JAVA_HOME\njava -version\necho $JAVA_HOME\n\n# Check disk space\ndf -h /var/lib/jenkins\n\n# Check permissions\nls -la /var/lib/jenkins\nsudo chown -R jenkins:jenkins /var/lib/jenkins\n\n# Check memory allocation\nfree -h\nps aux | grep jenkins\n\n# Clear Jenkins cache\nsudo systemctl stop jenkins\nsudo rm -rf /var/lib/jenkins/war\nsudo systemctl start jenkins</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Memory issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase JVM memory\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JAVA_OPTS=-Xmx8g -Xms4g -XX:+UseG1GC&quot;\n\nsudo systemctl daemon-reload\nsudo systemctl restart jenkins\n\n# Monitor memory usage\ntop -p $(pgrep java)\njstat -gc $(pgrep java) 5s</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Plugin issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Safe start (disable all plugins)\nsudo systemctl stop jenkins\necho &#039;jenkins.install.runSetupWizard=false&#039; &gt; /var/lib/jenkins/jenkins.install.runSetupWizard\nsudo systemctl start jenkins\n\n# Clear plugin cache\nsudo rm -rf /var/lib/jenkins/plugins/*.bak\nsudo rm -rf /var/lib/jenkins/plugins/*.hpi.pinned\n\n# Update plugins via CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E &quot;\\)$&quot; | awk &#039;{print $1}&#039; | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Check plugin dependencies\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -v &quot;^$&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Build failures</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check workspace permissions\nsudo chown -R jenkins:jenkins /var/lib/jenkins/workspace\n\n# Clear old builds\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password delete-builds job-name 1-100\n\n# Check agent connectivity\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-computers\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password connect-node agent-name\n\n# Monitor build resources\nhtop\niostat -x 1</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging for Jenkins\nsudo systemctl edit jenkins\n# Add:\n[Service]\nEnvironment=&quot;JAVA_OPTS=-Xmx4g -Djava.util.logging.config.file=/var/lib/jenkins/logging.properties&quot;\n\n# Create detailed logging configuration\nsudo tee /var/lib/jenkins/logging.properties &lt;&lt;EOF\n.level = INFO\n\n# Root logger\nhandlers = java.util.logging.ConsoleHandler, java.util.logging.FileHandler\n\n# Console logging\njava.util.logging.ConsoleHandler.level = INFO\njava.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter\n\n# File logging\njava.util.logging.FileHandler.pattern = /var/log/jenkins/jenkins-debug.log\njava.util.logging.FileHandler.limit = 50000000\njava.util.logging.FileHandler.count = 5\njava.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter\n\n# Component-specific logging\nhudson.level = FINE\njenkins.level = FINE\nhudson.security.level = FINE\nhudson.plugins.level = FINE\nhudson.model.level = FINE\n\n# Plugin debugging\nhudson.plugins.git.level = FINE\norg.jenkinsci.plugins.workflow.level = FINE\nEOF\n\nsudo systemctl restart jenkins\n\n# View debug logs\nsudo tail -f /var/log/jenkins/jenkins-debug.log\n\n# Enable specific plugin debugging via Jenkins CLI\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password groovy = &lt;&lt;EOF\nimport java.util.logging.Logger\nimport java.util.logging.Level\n\n// Enable debug logging for specific components\nLogger.getLogger(&quot;hudson.security&quot;).setLevel(Level.FINE)\nLogger.getLogger(&quot;hudson.plugins.git&quot;).setLevel(Level.FINE)\nLogger.getLogger(&quot;org.jenkinsci.plugins.workflow&quot;).setLevel(Level.FINE)\n\nprintln &quot;Debug logging enabled&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update jenkins\nsudo dnf update jenkins\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade jenkins\n\n# Arch Linux\nyay -Syu jenkins\n\n# Alpine Linux (Docker)\ndocker pull jenkins/jenkins:lts-jdk17\ndocker stop jenkins\ndocker rm jenkins\n# Re-run docker run command with new image\n\n# openSUSE\nsudo zypper update jenkins\n\n# FreeBSD\npkg update\npkg upgrade jenkins\n\n# macOS\nbrew upgrade jenkins-lts\n\n# Always backup before updates\nsudo /usr/local/bin/jenkins-backup.sh\n\n# Update plugins after Jenkins update\njava -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password list-plugins | grep -E &quot;\\)$&quot; | awk &#039;{print $1}&#039; | xargs java -jar jenkins-cli.jar -s http://localhost:8080 -auth admin:password install-plugin\n\n# Restart after updates\nsudo systemctl restart jenkins</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# jenkins-maintenance.sh\n\nJENKINS_HOME=&quot;/var/lib/jenkins&quot;\nJENKINS_URL=&quot;http://localhost:8080&quot;\nADMIN_CREDENTIALS=&quot;admin:SecureAdminPassword123!&quot;\n\necho &quot;🔧 Starting Jenkins maintenance tasks...&quot;\n\n# Clean up old builds\necho &quot;🗑️  Cleaning up old builds...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = &lt;&lt;EOF\nimport jenkins.model.Jenkins\nimport hudson.model.*\n\nJenkins.instance.getAllItems(Job.class).each { job -&gt;\n    if (job.getBuilds().size() &gt; 50) {\n        def buildsToDelete = job.getBuilds().drop(50)\n        println &quot;Deleting \\${buildsToDelete.size()} old builds for job: \\${job.name}&quot;\n        buildsToDelete.each { build -&gt;\n            build.delete()\n        }\n    }\n}\nEOF\n\n# Clean up workspace\necho &quot;🧹 Cleaning up workspaces...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = &lt;&lt;EOF\nimport hudson.model.*\nimport hudson.FilePath\nimport jenkins.model.Jenkins\n\nJenkins.instance.getAllItems(AbstractProject.class).each { job -&gt;\n    def workspace = job.getWorkspace()\n    if (workspace != null &amp;&amp; workspace.exists()) {\n        def size = workspace.length()\n        if (size &gt; 1024 * 1024 * 100) { // &gt; 100MB\n            println &quot;Workspace for \\${job.name} is \\${size / (1024*1024)} MB&quot;\n            workspace.deleteRecursive()\n            println &quot;Cleaned workspace for job: \\${job.name}&quot;\n        }\n    }\n}\nEOF\n\n# Update plugins\necho &quot;🔌 Checking for plugin updates...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} list-plugins | grep -E &quot;\\)$&quot; &gt; /tmp/outdated-plugins.txt\n\nif [ -s /tmp/outdated-plugins.txt ]; then\n    echo &quot;📦 Updating outdated plugins:&quot;\n    cat /tmp/outdated-plugins.txt\n    \n    # Update plugins\n    awk &#039;{print $1}&#039; /tmp/outdated-plugins.txt | xargs java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} install-plugin\n    \n    echo &quot;🔄 Restarting Jenkins to apply plugin updates...&quot;\n    java -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} safe-restart\nfi\n\n# Clean up logs\necho &quot;📋 Rotating and cleaning logs...&quot;\nfind ${JENKINS_HOME}/logs -name &quot;*.log&quot; -mtime +7 -delete\nfind /var/log/jenkins -name &quot;*.log.*&quot; -mtime +7 -delete\n\n# Disk usage check\necho &quot;💾 Checking disk usage...&quot;\nDISK_USAGE=$(df ${JENKINS_HOME} | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ ${DISK_USAGE} -gt 80 ]; then\n    echo &quot;⚠️  High disk usage: ${DISK_USAGE}%&quot;\n    \n    # Clean up large files\n    find ${JENKINS_HOME}/jobs -name &quot;*.log&quot; -size +100M -mtime +3 -delete\n    find ${JENKINS_HOME}/workspace -name &quot;*&quot; -size +500M -mtime +1 -delete\nfi\n\n# Backup verification\necho &quot;🔍 Verifying recent backups...&quot;\nLATEST_BACKUP=$(ls -t /backup/jenkins/config/jenkins-home-*.tar.gz 2&gt;/dev/null | head -1)\nif [ -n &quot;$LATEST_BACKUP&quot; ]; then\n    BACKUP_AGE=$(($(date +%s) - $(stat -c %Y &quot;$LATEST_BACKUP&quot;)))\n    if [ $BACKUP_AGE -gt 172800 ]; then  # 2 days\n        echo &quot;⚠️  Latest backup is older than 2 days: $LATEST_BACKUP&quot;\n        echo &quot;💾 Running backup now...&quot;\n        /usr/local/bin/jenkins-backup.sh\n    else\n        echo &quot;✅ Recent backup found: $LATEST_BACKUP&quot;\n    fi\nelse\n    echo &quot;❌ No backups found. Running backup...&quot;\n    /usr/local/bin/jenkins-backup.sh\nfi\n\n# Security check\necho &quot;🔒 Running security checks...&quot;\njava -jar ${JENKINS_HOME}/jenkins-cli.jar -s ${JENKINS_URL} -auth ${ADMIN_CREDENTIALS} groovy = &lt;&lt;EOF\nimport jenkins.security.ApiTokenProperty\nimport hudson.security.SecurityRealm\nimport jenkins.model.Jenkins\n\ndef instance = Jenkins.getInstance()\n\n// Check for default passwords\ndef realm = instance.getSecurityRealm()\nif (realm instanceof hudson.security.HudsonPrivateSecurityRealm) {\n    def users = realm.getAllUsers()\n    users.each { user -&gt;\n        if (user.getId() == &quot;admin&quot;) {\n            println &quot;⚠️  Default admin user found. Consider renaming or removing.&quot;\n        }\n    }\n}\n\n// Check for anonymous access\ndef authStrategy = instance.getAuthorizationStrategy()\nif (authStrategy.hasPermission(org.acegisecurity.Authentication.ANONYMOUS_USER, Jenkins.READ)) {\n    println &quot;⚠️  Anonymous read access is enabled&quot;\n}\n\nprintln &quot;Security check completed&quot;\nEOF\n\n# Performance check\necho &quot;📊 Checking performance metrics...&quot;\nJAVA_PID=$(pgrep java)\nif [ -n &quot;$JAVA_PID&quot; ]; then\n    MEMORY_USAGE=$(ps -o pid,vsz,rss,comm -p $JAVA_PID | awk &#039;NR==2 {print $3/1024}&#039;)\n    CPU_USAGE=$(ps -o pid,pcpu,comm -p $JAVA_PID | awk &#039;NR==2 {print $2}&#039;)\n    \n    echo &quot;Memory usage: ${MEMORY_USAGE}MB&quot;\n    echo &quot;CPU usage: ${CPU_USAGE}%&quot;\n    \n    if (( $(echo &quot;${MEMORY_USAGE} &gt; 6144&quot; | bc -l) )); then\n        echo &quot;⚠️  High memory usage detected&quot;\n    fi\nfi\n\necho &quot;✅ Jenkins maintenance completed&quot;\n\n# Generate maintenance report\ncat &gt; /var/log/jenkins-maintenance-$(date +%Y%m%d).log &lt;&lt;EOF\nJenkins Maintenance Report - $(date)\n===================================\n\nTasks Completed:\n- Old builds cleanup: ✅\n- Workspace cleanup: ✅\n- Plugin updates: $([ -s /tmp/outdated-plugins.txt ] &amp;&amp; echo &quot;✅ Updated&quot; || echo &quot;✅ Up to date&quot;)\n- Log rotation: ✅\n- Disk usage check: ✅ (${DISK_USAGE}%)\n- Backup verification: ✅\n- Security check: ✅\n- Performance check: ✅\n\nSystem Status:\n- Memory usage: ${MEMORY_USAGE}MB\n- CPU usage: ${CPU_USAGE}%\n- Disk usage: ${DISK_USAGE}%\n\nNext maintenance: $(date -d &quot;next week&quot; +%Y-%m-%d)\nEOF\n\necho &quot;📊 Maintenance report: /var/log/jenkins-maintenance-$(date +%Y%m%d).log&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create monitoring cron job\necho &quot;0 2 * * * root /usr/local/bin/jenkins-maintenance.sh&quot; | sudo tee -a /etc/crontab\necho &quot;*/15 * * * * root /usr/local/bin/jenkins-health-check.sh&quot; | sudo tee -a /etc/crontab\n\n# Log rotation configuration\nsudo tee /etc/logrotate.d/jenkins &lt;&lt;EOF\n/var/log/jenkins/*.log {\n    daily\n    rotate 30\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins adm\n    postrotate\n        systemctl reload jenkins &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\n\n/var/lib/jenkins/logs/*.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 jenkins jenkins\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"git-integration-with-webhooks\" class=\"mobile-header\">Git Integration with Webhooks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Git webhook for automatic builds\nsudo tee /var/lib/jenkins/casc_configs/git-integration.yaml &lt;&lt;EOF\nunclassified:\n  gitHubPluginConfig:\n    hookUrl: &quot;https://jenkins.example.com/github-webhook/&quot;\n    \n  gitLabConnectionConfig:\n    connections:\n      - name: &quot;GitLab&quot;\n        url: &quot;https://gitlab.example.com&quot;\n        apiTokenId: &quot;gitlab-api-token&quot;\n        clientBuilderId: &quot;autodetect&quot;\n        connectionTimeout: 10\n        readTimeout: 10\n\njobs:\n  - script: |\n      multibranchPipelineJob(&#039;example-app&#039;) {\n        branchSources {\n          git {\n            id(&#039;github-example&#039;)\n            remote(&#039;https://github.com/example/app.git&#039;)\n            credentialsId(&#039;github-credentials&#039;)\n            includes(&#039;main develop feature/* release/*&#039;)\n          }\n        }\n        \n        factory {\n          workflowBranchProjectFactory {\n            scriptPath(&#039;Jenkinsfile&#039;)\n          }\n        }\n        \n        triggers {\n          periodicFolderTrigger {\n            interval(&#039;1d&#039;)\n          }\n        }\n        \n        orphanedItemStrategy {\n          discardOldItems {\n            daysToKeep(7)\n            numToKeep(10)\n          }\n        }\n      }\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-integration\" class=\"mobile-header\">Docker Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"groovy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">groovy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-groovy\">// Docker pipeline example\npipeline {\n    agent any\n    \n    environment {\n        DOCKER_REGISTRY = credentials(&#039;docker-registry&#039;)\n        DOCKER_IMAGE = &quot;${env.JOB_NAME}:${env.BUILD_NUMBER}&quot;\n    }\n    \n    stages {\n        stage(&#039;Build Docker Image&#039;) {\n            steps {\n                script {\n                    def image = docker.build(&quot;${DOCKER_REGISTRY}/${DOCKER_IMAGE}&quot;)\n                    \n                    // Security scan\n                    sh &quot;&quot;&quot;\n                        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \\\n                            aquasec/trivy:latest image \\\n                            --severity HIGH,CRITICAL \\\n                            --exit-code 1 \\\n                            ${DOCKER_REGISTRY}/${DOCKER_IMAGE}\n                    &quot;&quot;&quot;\n                    \n                    // Push to registry\n                    docker.withRegistry(&quot;https://${DOCKER_REGISTRY}&quot;, &#039;docker-registry-credentials&#039;) {\n                        image.push()\n                        image.push(&quot;latest&quot;)\n                    }\n                }\n            }\n        }\n        \n        stage(&#039;Deploy&#039;) {\n            steps {\n                script {\n                    // Deploy to Kubernetes\n                    sh &quot;&quot;&quot;\n                        kubectl set image deployment/myapp \\\n                            myapp=${DOCKER_REGISTRY}/${DOCKER_IMAGE} \\\n                            --namespace=production\n                        \n                        kubectl rollout status deployment/myapp \\\n                            --namespace=production --timeout=300s\n                    &quot;&quot;&quot;\n                }\n            }\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-integration\" class=\"mobile-header\">Kubernetes Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Jenkins agent in Kubernetes\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: jenkins\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: jenkins\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods&quot;,&quot;pods/exec&quot;]\n  verbs: [&quot;create&quot;,&quot;delete&quot;,&quot;get&quot;,&quot;list&quot;,&quot;patch&quot;,&quot;update&quot;,&quot;watch&quot;]\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods/log&quot;]\n  verbs: [&quot;get&quot;,&quot;list&quot;,&quot;watch&quot;]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: jenkins\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: jenkins\nsubjects:\n- kind: ServiceAccount\n  name: jenkins\n  namespace: jenkins\n---\n# Jenkins Configuration as Code for Kubernetes\njenkins:\n  clouds:\n    - kubernetes:\n        name: &quot;kubernetes&quot;\n        serverUrl: &quot;https://kubernetes.default&quot;\n        namespace: &quot;jenkins&quot;\n        credentialsId: &quot;kubernetes-token&quot;\n        jenkinsUrl: &quot;http://jenkins.jenkins.svc.cluster.local:8080&quot;\n        containerCapStr: &quot;10&quot;\n        templates:\n          - name: &quot;jenkins-agent&quot;\n            namespace: &quot;jenkins&quot;\n            label: &quot;kubernetes&quot;\n            containers:\n              - name: &quot;jnlp&quot;\n                image: &quot;jenkins/inbound-agent:latest&quot;\n                workingDir: &quot;/home/jenkins/agent&quot;\n                resourceRequestCpu: &quot;100m&quot;\n                resourceRequestMemory: &quot;256Mi&quot;\n                resourceLimitCpu: &quot;500m&quot;\n                resourceLimitMemory: &quot;1Gi&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"ldapactive-directory-integration\" class=\"mobile-header\">LDAP/Active Directory Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">jenkins:\n  securityRealm:\n    ldap:\n      configurations:\n        - server: &quot;ldaps://ad.example.com:636&quot;\n          rootDN: &quot;DC=example,DC=com&quot;\n          inhibitInferRootDN: false\n          userSearchBase: &quot;OU=Users,OU=Company&quot;\n          userSearch: &quot;(&amp;(objectCategory=Person)(objectClass=user)(sAMAccountName={0}))&quot;\n          groupSearchBase: &quot;OU=Groups,OU=Company&quot;\n          groupSearchFilter: &quot;(&amp;(objectClass=group)(cn={0}))&quot;\n          managerDN: &quot;CN=jenkins,OU=Service Accounts,DC=example,DC=com&quot;\n          managerPasswordSecret: &quot;ldap-service-password&quot;\n          displayNameAttributeName: &quot;displayName&quot;\n          mailAddressAttributeName: &quot;mail&quot;\n          \n  authorizationStrategy:\n    roleBased:\n      roles:\n        global:\n          - name: &quot;administrators&quot;\n            permissions:\n              - &quot;Overall/Administer&quot;\n            assignments:\n              - &quot;Domain Admins&quot;\n              - &quot;Jenkins Admins&quot;\n        items:\n          - name: &quot;developers&quot;\n            pattern: &quot;.*&quot;\n            permissions:\n              - &quot;Job/Build&quot;\n              - &quot;Job/Cancel&quot;\n              - &quot;Job/Read&quot;\n            assignments:\n              - &quot;Development Team&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Jenkins Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://jenkins.io/projects/jcasc/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Configuration as Code</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/book/pipeline/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Pipeline Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/book/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://plugins.jenkins.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Plugin Index</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/community/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Community</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.jenkins.io/doc/book/pipeline/pipeline-best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/jenkinsci/jenkins\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jenkins GitHub Repository</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"38 min","wordCount":7477,"lastBuilt":"2025-09-15T06:16:15.995Z"},"category":{"key":"infrastructure","name":"Infrastructure","description":"DevOps and infrastructure automation tools","icon":"🏗️","color":"#44475a","keywords":["ansible","terraform","gitlab","jenkins","consul","etcd"]},"relatedGuides":[{"name":"adguard-home","displayName":"Adguard Home","slug":"adguard-home","description":"Repo for adguard-home","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adguard-home","updatedAt":"2025-09-08T03:04:18Z","createdAt":"2025-09-08T03:04:08Z","readmeRaw":"## 👋 Welcome to adguard-home 🚀  \n\nadguard-home README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adguard-home\" class=\"mobile-header\">👋 Welcome to adguard-home 🚀  </h2>\n<p class=\"mobile-paragraph\">adguard-home README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-15T06:16:39.529Z"},{"name":"adminer","displayName":"Adminer","slug":"adminer","description":"Repo for adminer","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adminer","updatedAt":"2025-09-08T03:04:32Z","createdAt":"2025-09-08T03:04:22Z","readmeRaw":"## 👋 Welcome to adminer 🚀  \n\nadminer README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adminer\" class=\"mobile-header\">👋 Welcome to adminer 🚀  </h2>\n<p class=\"mobile-paragraph\">adminer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-15T06:16:39.213Z"},{"name":"ansible","displayName":"Ansible","slug":"ansible","description":"Repo for ansible","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ansible","updatedAt":"2025-09-14T01:29:39Z","createdAt":"2025-09-08T03:04:35Z","readmeRaw":"# Ansible Installation Guide\n\nAgentless automation platform for configuration management, application deployment, and task automation across multiple systems. Industry standard for infrastructure automation with enterprise-grade security.\n\n## Prerequisites\n\n- Linux control machine (any modern distribution)\n- Python 3.8+ on control machine\n- SSH access to target hosts\n- Python 2.7+ or 3.5+ on target hosts\n- 2GB RAM minimum, 4GB+ recommended for large infrastructures\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Fedora\n```bash\n# Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Arch Linux\n```bash\n# Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version\n```\n\n#### Alpine Linux\n```bash\n# Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version\n```\n\n### Using pip (Latest Version)\n```bash\n# Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho 'source ~/ansible-venv/bin/activate' >> ~/.bashrc\n\n# Verify installation\nansible --version\n```\n\n### Using Docker\n```bash\n# Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker > /dev/null <<'EOF'\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest \"$@\"\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho 'alias ansible=\"ansible-docker ansible\"' >> ~/.bashrc\necho 'alias ansible-playbook=\"ansible-docker ansible-playbook\"' >> ~/.bashrc\n```\n\n## Project Structure and Configuration\n\n### Professional Project Structure\n```bash\n# Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat > ansible.cfg <<EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF\n```\n\n### Advanced Inventory Management\n```bash\n# Create production inventory with groups and variables\ncat > inventories/production/hosts.yml <<EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: \"{{ vault_mysql_root_password }}\"\n        mysql_replication_user: \"{{ vault_mysql_replication_user }}\"\n        mysql_replication_password: \"{{ vault_mysql_replication_password }}\"\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: \"{{ vault_haproxy_stats_password }}\"\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: \"0 2 * * *\"\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: \"0 1 * * *\"\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat > inventories/production/aws_ec2.yml <<EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: \"'web' in tags.Role\"\n  databases: \"'db' in tags.Role\"\n  loadbalancers: \"'lb' in tags.Role\"\n  \n  # Group by environment\n  production: \"tags.Environment == 'production'\"\n  staging: \"tags.Environment == 'staging'\"\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == \"us-west-2a\"\n  us_west_2b: ec2_placement_availability_zone == \"us-west-2b\"\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF\n```\n\n### Ansible Vault Security\n```bash\n# Create strong vault password\nopenssl rand -base64 32 > ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat > group_vars/all/vars.yml <<EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: \"{{ vault_mysql_root_password }}\"\ngrafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: \"{{ vault_ssl_private_key }}\"\n\n# Security settings\nansible_ssh_common_args: '-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts'\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml\n```\n\n## Comprehensive Playbooks\n\n### System Hardening Playbook\n```bash\ncat > playbooks/system-hardening.yml <<EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [\"Debian\", \"RedHat\"]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: \"*\"\n        state: latest\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == \"Debian\"\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: \"{{ security_packages }}\"\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: 'ansible ALL=(ALL) NOPASSWD:ALL'\n        create: yes\n        mode: '0440'\n        validate: 'visudo -cf %s'\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: \"{{ item.regexp }}\"\n        line: \"{{ item.line }}\"\n        backup: yes\n      loop:\n        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }\n        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }\n        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }\n        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }\n        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }\n        - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 0' }\n        - { regexp: '^#?Protocol', line: 'Protocol 2' }\n        - { regexp: '^#?LogLevel', line: 'LogLevel VERBOSE' }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == \"Debian\"\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: 'SSH access'\n      when: ansible_os_family == \"Debian\"\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: \"{{ item }}\"\n        enabled: no\n        state: stopped\n      loop: \"{{ disabled_services }}\"\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: \"{{ item.path }}\"\n        mode: \"{{ item.mode }}\"\n        owner: root\n        group: root\n      loop:\n        - { path: '/etc/passwd', mode: '0644' }\n        - { path: '/etc/shadow', mode: '0640' }\n        - { path: '/etc/group', mode: '0644' }\n        - { path: '/etc/gshadow', mode: '0640' }\n        - { path: '/etc/ssh/sshd_config', mode: '0600' }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'net.ipv4.ip_forward', value: '0' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'kernel.randomize_va_space', value: '2' }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: \"{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}\"\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF\n```\n\n### Application Deployment Playbook\n```bash\ncat > playbooks/web-application-deployment.yml <<EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: \"25%\"  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: \"{{ app_version | default('latest') }}\"\n    app_port: 3000\n    nginx_workers: \"{{ ansible_processor_cores }}\"\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: \"Server is in maintenance mode\"\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: \"{{ app_name }}\"\n        system: yes\n        shell: /bin/false\n        home: \"/opt/{{ app_name }}\"\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: \"{{ item }}\"\n        state: directory\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0755'\n      loop:\n        - \"/opt/{{ app_name }}\"\n        - \"/opt/{{ app_name }}/releases\"\n        - \"/opt/{{ app_name }}/shared\"\n        - \"/var/log/{{ app_name }}\"\n\n    - name: Download application release\n      get_url:\n        url: \"https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        mode: '0644'\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/opt/{{ app_name }}/releases/\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        remote_src: yes\n        creates: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n\n    - name: Create symlink to current release\n      file:\n        src: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n        dest: \"/opt/{{ app_name }}/current\"\n        state: link\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: \"templates/{{ app_name }}.conf.j2\"\n        dest: \"/opt/{{ app_name }}/shared/{{ app_name }}.conf\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0640'\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: \"templates/{{ app_name }}.service.j2\"\n        dest: \"/etc/systemd/system/{{ app_name }}.service\"\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: \"{{ app_name }}\"\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: \"http://localhost:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: \"http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: \"/var/log/{{ app_name }}/deployments.log\"\n        line: \"{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}\"\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF\n```\n\n### Infrastructure as Code Playbook\n```bash\ncat > playbooks/infrastructure-provisioning.yml <<EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: \"{{ inventory_hostname }}\"\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: \"{{ ansible_default_ipv4.address }} {{ inventory_hostname }}\"\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: \"{{ base_packages[ansible_os_family] | default(base_packages['Debian']) }}\"\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chrony' }}\"\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chronyd' }}\"\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: '0644'\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: \"https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz\"\n        dest: /tmp/node_exporter.tar.gz\n        mode: '0644'\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: '0755'\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'kernel.dmesg_restrict', value: '1' }\n        - { key: 'kernel.kptr_restrict', value: '2' }\n        - { key: 'kernel.yama.ptrace_scope', value: '1' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check\"\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF\n```\n\n## Advanced Role Development\n\n### Comprehensive NGINX Role\n```bash\n# Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat > roles/nginx/tasks/main.yml <<EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: \"{{ ansible_os_family }}.yml\"\n\n- name: Install NGINX\n  include_tasks: \"install-{{ ansible_os_family }}.yml\"\n\n- name: Create NGINX directories\n  file:\n    path: \"{{ item }}\"\n    state: directory\n    owner: root\n    group: root\n    mode: '0755'\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: 'nginx -t -c %s'\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    backup: yes\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    dest: \"/etc/nginx/sites-enabled/{{ item.name }}.conf\"\n    state: link\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: '0644'\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat > roles/nginx/tasks/install-Debian.yml <<EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: \"deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx\"\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat > roles/nginx/tasks/install-RedHat.yml <<EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: \"https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/\"\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat > roles/nginx/vars/main.yml <<EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - \"add_header X-Frame-Options SAMEORIGIN always;\"\n  - \"add_header X-Content-Type-Options nosniff always;\"\n  - \"add_header X-XSS-Protection '1; mode=block' always;\"\n  - \"add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains' always;\"\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: \"_\"\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat > roles/nginx/templates/nginx.conf.j2 <<EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                    '\\$status \\$body_bytes_sent \"\\$http_referer\" '\n                    '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat > roles/nginx/handlers/main.yml <<EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF\n```\n\n## Security and Compliance\n\n### Ansible Security Scanner Integration\n```bash\n# Create security scanning playbook\ncat > playbooks/security-scan.yml <<EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: \"/tmp/security-scans\"\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: \"{{ scan_results_dir }}\"\n        state: directory\n        mode: '0755'\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: \"https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip\"\n        dest: \"/tmp/cis-benchmark.zip\"\n        mode: '0644'\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh > {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: \"{{ lynis_result.stdout }}\"\n        dest: \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        mode: '0644'\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == \"Debian\"\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [\"RedHat\", \"Debian\"]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: \"{{ item }}\"\n        dest: \"./security-reports/{{ inventory_hostname }}/\"\n        flat: yes\n      loop:\n        - \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html\"\n        - \"{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json\"\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: \"{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt\"\n        mode: '0644'\nEOF\n```\n\n### Ansible AWX/Tower Integration\n```bash\n# Install Ansible AWX (open source)\ncat > playbooks/install-awx.yml <<EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: \"{{ vault_awx_admin_password }}\"\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: '0644'\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: \"http://localhost:80/api/v2/ping/\"\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: \"http://localhost:80/api/v2/organizations/\"\n        method: POST\n        user: \"{{ awx_admin_user }}\"\n        password: \"{{ awx_admin_password }}\"\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: \"Production\"\n          description: \"Production environment organization\"\n        status_code: [200, 201, 409]\nEOF\n```\n\n## Multi-Cloud Automation\n\n### AWS Infrastructure Automation\n```bash\ncat > playbooks/aws-infrastructure.yml <<EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: \"{{ aws_region | default('us-west-2') }}\"\n    vpc_cidr: \"{{ vpc_cidr | default('10.0.0.0/16') }}\"\n    environment: \"{{ environment | default('production') }}\"\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          \"tag:Name\": \"{{ environment }}-vpc\"\n        region: \"{{ aws_region }}\"\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: \"{{ environment }}-vpc\"\n        cidr_block: \"{{ vpc_cidr }}\"\n        region: \"{{ aws_region }}\"\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: \"{{ environment }}\"\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: \"{{ environment }}-web-sg\"\n        description: \"Security group for web servers\"\n        vpc_id: \"{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}\"\n        region: \"{{ aws_region }}\"\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: \"HTTP and HTTPS access\"\n          - proto: tcp\n            ports:\n              - 22\n            group_id: \"{{ environment }}-bastion-sg\"\n            rule_desc: \"SSH from bastion\"\n        tags:\n          Environment: \"{{ environment }}\"\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: \"{{ environment }}-web-{{ item }}\"\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: \"{{ ec2_key_name }}\"\n        vpc_subnet_id: \"{{ web_subnet_id }}\"\n        security_groups:\n          - \"{{ environment }}-web-sg\"\n        region: \"{{ aws_region }}\"\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: \"{{ environment }}\"\n          Role: webserver\n          Ansible: managed\n      loop: \"{{ range(1, web_server_count + 1) | list }}\"\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: \"{{ item.instances[0].tags.Name }}\"\n        hostname: \"{{ item.instances[0].public_ip_address }}\"\n        groups: webservers\n        ansible_ssh_private_key_file: \"~/.ssh/{{ ec2_key_name }}.pem\"\n        ansible_user: ec2-user\n      loop: \"{{ web_instances.results }}\"\n      changed_when: false\nEOF\n```\n\n### Kubernetes Cluster Management\n```bash\ncat > playbooks/k8s-cluster-management.yml <<EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: \"1.28.2\"\n    containerd_version: \"1.6.24\"\n    cni_version: \"1.3.0\"\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb >= 1700\n          - ansible_processor_cores >= 2\n        fail_msg: \"System doesn't meet minimum requirements\"\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: \"{{ item }}\"\n      loop: \"{{ groups['k8s_all'] }}\"\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: \"{{ containerd_version }}\"\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: \"{{ k8s_version }}\"\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: \"{{ ansible_env.HOME }}/.kube\"\n        state: directory\n        mode: '0755'\n\n    - name: Copy admin.conf to user's kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: \"{{ ansible_env.HOME }}/.kube/config\"\n        owner: \"{{ ansible_user }}\"\n        group: \"{{ ansible_user }}\"\n        mode: '0644'\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Join worker nodes to cluster\n      shell: \"{{ hostvars[groups['k8s_masters'][0]]['join_command'].stdout }}\"\n      when: inventory_hostname in groups['k8s_workers']\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n      register: cluster_status\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups['k8s_masters'][0]\nEOF\n```\n\n## Performance Optimization and Scaling\n\n### Parallel Execution Strategies\n```bash\n# Create high-performance playbook configuration\ncat > playbooks/high-performance-deployment.yml <<EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: \"30%\"   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk '{print $(NF-2)}' | sed 's/,//'\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float > 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: \"*\"\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: \"{{ item.src }}\"\n        dest: \"{{ item.dest }}\"\n        mode: \"{{ item.mode | default('0644') }}\"\n        backup: yes\n      loop:\n        - { src: \"nginx.conf.j2\", dest: \"/etc/nginx/nginx.conf\" }\n        - { src: \"mysql.cnf.j2\", dest: \"/etc/mysql/my.cnf\" }\n        - { src: \"redis.conf.j2\", dest: \"/etc/redis/redis.conf\" }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: \"{{ item.ansible_job_id }}\"\n      loop: \"{{ config_deployment.results }}\"\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: \"{{ item }}\"\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: \"restart all services\"\nEOF\n\n# Performance monitoring playbook\ncat > playbooks/performance-monitoring.yml <<EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: \"{{ monitoring_tools }}\"\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Enable system statistics collection\n      service:\n        name: \"{{ 'sysstat' if ansible_os_family == 'Debian' else 'sysstat' }}\"\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: '0755'\n\n    - name: Schedule performance monitoring\n      cron:\n        name: \"Performance monitoring\"\n        minute: \"*/5\"\n        job: \"/usr/local/bin/performance-monitor.sh\"\n        user: root\nEOF\n```\n\n## Testing and Validation\n\n### Molecule Testing Framework\n```bash\n# Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat > molecule/default/molecule.yml <<EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat > molecule/default/converge.yml <<EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: \"Include nginx role\"\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat > molecule/default/verify.yml <<EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: \"NGINX is not responding correctly\"\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test\n```\n\n### Ansible Lint and Security Scanning\n```bash\n# Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat > .ansible-lint <<EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: ['true', 'false', 'yes', 'no']\nEOF\n\n# Create security-focused playbook linting\ncat > .yamllint <<EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .\n```\n\n## Backup and Disaster Recovery\n\n### Comprehensive Backup Automation\n```bash\ncat > playbooks/backup-automation.yml <<EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: \"0 2 * * *\"\n      files: \"0 3 * * *\"\n      configs: \"0 4 * * *\"\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: \"{{ backup_root }}/{{ item }}\"\n        state: directory\n        mode: '0755'\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: '0755'\n      when: \"'dbservers' in group_names\"\n\n    - name: Schedule database backups\n      cron:\n        name: \"MySQL backup\"\n        minute: \"0\"\n        hour: \"2\"\n        job: \"/usr/local/bin/mysql-backup.sh\"\n        user: root\n      when: \"'dbservers' in group_names\"\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: '0755'\n\n    - name: Schedule file backups\n      cron:\n        name: \"File system backup\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/local/bin/file-backup.sh\"\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: \"{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz\"\n        mode: '0600'\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: \"{{ backup_root }}/\"\n        dest: \"backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/\"\n        delete: yes\n        rsync_opts:\n          - \"--exclude=*.tmp\"\n          - \"--compress\"\n          - \"--archive\"\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: \"{{ backup_root }}\"\n        age: \"{{ backup_retention_days }}d\"\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: \"{{ item.path }}\"\n        state: absent\n      loop: \"{{ old_backups.files }}\"\nEOF\n```\n\n## Verification and Monitoring\n\n### Cross-Platform System Verification\n```bash\n# Create comprehensive verification playbook\ncat > playbooks/system-verification.yml <<EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - \"ansible_facts.services[item.service + '.service'].state == 'running'\"\n        fail_msg: \"Service {{ item.service }} is not running\"\n        success_msg: \"Service {{ item.service }} is healthy\"\n      loop: \"{{ health_checks }}\"\n      when: \"item.service + '.service' in ansible_facts.services\"\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: \"{{ item.host }}\"\n        port: \"{{ item.port }}\"\n        timeout: 5\n      loop:\n        - { host: \"8.8.8.8\", port: 53 }\n        - { host: \"1.1.1.1\", port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk '$5 > \"85%\" {print $0}'\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != \"\"\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}'\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: \"WARNING: Memory usage is {{ memory_usage.stdout }}%\"\n      when: memory_usage.stdout | int > 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep \"Failed password\" /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw >/dev/null 2>&1; then\n          ufw status\n        elif command -v firewall-cmd >/dev/null 2>&1; then\n          firewall-cmd --state\n        else\n          echo \"No supported firewall found\"\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        mode: '0644'\n\n    - name: Fetch health reports\n      fetch:\n        src: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        dest: \"./reports/\"\n        flat: yes\nEOF\n```\n\n### Continuous Compliance Monitoring\n```bash\ncat > playbooks/compliance-monitoring.yml <<EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: \"{{ 'auditd' if ansible_os_family == 'RedHat' else 'auditd' }}\"\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo \"CIS-CAT not installed, skipping\"\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check | mail -s 'AIDE Report' security@example.com\"\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF\n```\n\n## CI/CD Integration\n\n### Jenkins Pipeline Integration\n```bash\n# Create Jenkinsfile for Ansible automation\ncat > Jenkinsfile <<EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = 'ansible.cfg'\n        ANSIBLE_HOST_KEY_CHECKING = 'False'\n    }\n    \n    stages {\n        stage('Lint') {\n            steps {\n                sh 'ansible-lint playbooks/'\n                sh 'yamllint .'\n            }\n        }\n        \n        stage('Syntax Check') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --syntax-check'\n            }\n        }\n        \n        stage('Dry Run') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --check --diff'\n            }\n        }\n        \n        stage('Deploy to Staging') {\n            when {\n                branch 'develop'\n            }\n            steps {\n                sh 'ansible-playbook -i inventories/staging playbooks/site.yml'\n            }\n        }\n        \n        stage('Deploy to Production') {\n            when {\n                branch 'main'\n            }\n            steps {\n                input 'Deploy to Production?'\n                sh 'ansible-playbook -i inventories/production playbooks/site.yml'\n            }\n        }\n        \n        stage('Verify Deployment') {\n            steps {\n                sh 'ansible-playbook playbooks/system-verification.yml'\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: 'logs/*.log', allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: 'reports',\n                reportFiles: '*.html',\n                reportName: 'Ansible Report'\n            ])\n        }\n        failure {\n            emailext (\n                subject: \"Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Something is wrong with ${env.BUILD_URL}\",\n                to: \"${env.DEFAULT_RECIPIENTS}\"\n            )\n        }\n    }\n}\nEOF\n```\n\n### GitLab CI Integration\n```bash\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: \"False\"\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"develop\"'\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a \"uptime\"\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=\"debug=true\" --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a \"path=/tmp/test state=touch\" --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=\"specific task name\"\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a \"var=hostvars\"\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name \"*.yml\" -exec ansible-playbook {} --syntax-check \\;\n```\n\n### Advanced Debugging\n```bash\n# Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=\"profile_tasks_sort_order=none\"\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=\"ansible_python_interpreter=/usr/bin/python3\"\n\n# Network debugging\nansible all -m command -a \"ss -tulpn\"\nansible all -m command -a \"netstat -rn\"\n\n# Process debugging\nansible all -m command -a \"ps aux --sort=-%mem | head -10\"\n\n# Disk usage analysis\nansible all -m command -a \"df -h\"\nansible all -m command -a \"du -sh /var/log/*\"\n\n# Service debugging\nansible all -m systemd -a \"name=nginx\" --become\nansible all -m command -a \"systemctl status nginx\" --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=\"debug_vars=true\" --tags debug_vars\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.ansible.com/)\n- [Ansible Galaxy](https://galaxy.ansible.com/)\n- [Best Practices Guide](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html)\n- [Security Best Practices](https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices)\n- [Ansible Molecule Testing](https://molecule.readthedocs.io/)\n- [Community Collections](https://docs.ansible.com/ansible/latest/collections/index.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"ansible-installation-guide\" class=\"mobile-header\">Ansible Installation Guide</h1>\n<p class=\"mobile-paragraph\">Agentless automation platform for configuration management, application deployment, and task automation across multiple systems. Industry standard for infrastructure automation with enterprise-grade security.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux control machine (any modern distribution)</li>\n<li class=\"mobile-list-item\">Python 3.8+ on control machine</li>\n<li class=\"mobile-list-item\">SSH access to target hosts</li>\n<li class=\"mobile-list-item\">Python 2.7+ or 3.5+ on target hosts</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for large infrastructures</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-pip-latest-version\" class=\"mobile-header\">Using pip (Latest Version)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho &#039;source ~/ansible-venv/bin/activate&#039; &gt;&gt; ~/.bashrc\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest &quot;$@&quot;\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho &#039;alias ansible=&quot;ansible-docker ansible&quot;&#039; &gt;&gt; ~/.bashrc\necho &#039;alias ansible-playbook=&quot;ansible-docker ansible-playbook&quot;&#039; &gt;&gt; ~/.bashrc</code></pre>\n      </div>\n    </div>\n<h2 id=\"project-structure-and-configuration\" class=\"mobile-header\">Project Structure and Configuration</h2>\n<h3 id=\"professional-project-structure\" class=\"mobile-header\">Professional Project Structure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat &gt; ansible.cfg &lt;&lt;EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-inventory-management\" class=\"mobile-header\">Advanced Inventory Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production inventory with groups and variables\ncat &gt; inventories/production/hosts.yml &lt;&lt;EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\n        mysql_replication_user: &quot;{{ vault_mysql_replication_user }}&quot;\n        mysql_replication_password: &quot;{{ vault_mysql_replication_password }}&quot;\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: &quot;{{ vault_haproxy_stats_password }}&quot;\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: &quot;0 2 * * *&quot;\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: &quot;0 1 * * *&quot;\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat &gt; inventories/production/aws_ec2.yml &lt;&lt;EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: &quot;&#039;web&#039; in tags.Role&quot;\n  databases: &quot;&#039;db&#039; in tags.Role&quot;\n  loadbalancers: &quot;&#039;lb&#039; in tags.Role&quot;\n  \n  # Group by environment\n  production: &quot;tags.Environment == &#039;production&#039;&quot;\n  staging: &quot;tags.Environment == &#039;staging&#039;&quot;\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == &quot;us-west-2a&quot;\n  us_west_2b: ec2_placement_availability_zone == &quot;us-west-2b&quot;\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-vault-security\" class=\"mobile-header\">Ansible Vault Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create strong vault password\nopenssl rand -base64 32 &gt; ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat &gt; group_vars/all/vars.yml &lt;&lt;EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\ngrafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: &quot;{{ vault_ssl_private_key }}&quot;\n\n# Security settings\nansible_ssh_common_args: &#039;-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts&#039;\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"comprehensive-playbooks\" class=\"mobile-header\">Comprehensive Playbooks</h2>\n<h3 id=\"system-hardening-playbook\" class=\"mobile-header\">System Hardening Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/system-hardening.yml &lt;&lt;EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [&quot;Debian&quot;, &quot;RedHat&quot;]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: &quot;*&quot;\n        state: latest\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: &quot;{{ security_packages }}&quot;\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: &#039;ansible ALL=(ALL) NOPASSWD:ALL&#039;\n        create: yes\n        mode: &#039;0440&#039;\n        validate: &#039;visudo -cf %s&#039;\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: &quot;{{ item.regexp }}&quot;\n        line: &quot;{{ item.line }}&quot;\n        backup: yes\n      loop:\n        - { regexp: &#039;^#?PermitRootLogin&#039;, line: &#039;PermitRootLogin no&#039; }\n        - { regexp: &#039;^#?PasswordAuthentication&#039;, line: &#039;PasswordAuthentication no&#039; }\n        - { regexp: &#039;^#?X11Forwarding&#039;, line: &#039;X11Forwarding no&#039; }\n        - { regexp: &#039;^#?MaxAuthTries&#039;, line: &#039;MaxAuthTries 3&#039; }\n        - { regexp: &#039;^#?ClientAliveInterval&#039;, line: &#039;ClientAliveInterval 300&#039; }\n        - { regexp: &#039;^#?ClientAliveCountMax&#039;, line: &#039;ClientAliveCountMax 0&#039; }\n        - { regexp: &#039;^#?Protocol&#039;, line: &#039;Protocol 2&#039; }\n        - { regexp: &#039;^#?LogLevel&#039;, line: &#039;LogLevel VERBOSE&#039; }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: &#039;SSH access&#039;\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: &quot;{{ item }}&quot;\n        enabled: no\n        state: stopped\n      loop: &quot;{{ disabled_services }}&quot;\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        mode: &quot;{{ item.mode }}&quot;\n        owner: root\n        group: root\n      loop:\n        - { path: &#039;/etc/passwd&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/shadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/group&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/gshadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/ssh/sshd_config&#039;, mode: &#039;0600&#039; }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;net.ipv4.ip_forward&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.randomize_va_space&#039;, value: &#039;2&#039; }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: &quot;{{ &#039;ssh&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sshd&#039; }}&quot;\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-deployment-playbook\" class=\"mobile-header\">Application Deployment Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/web-application-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: &quot;25%&quot;  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: &quot;{{ app_version | default(&#039;latest&#039;) }}&quot;\n    app_port: 3000\n    nginx_workers: &quot;{{ ansible_processor_cores }}&quot;\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: &quot;Server is in maintenance mode&quot;\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: &quot;{{ app_name }}&quot;\n        system: yes\n        shell: /bin/false\n        home: &quot;/opt/{{ app_name }}&quot;\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: &quot;{{ item }}&quot;\n        state: directory\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0755&#039;\n      loop:\n        - &quot;/opt/{{ app_name }}&quot;\n        - &quot;/opt/{{ app_name }}/releases&quot;\n        - &quot;/opt/{{ app_name }}/shared&quot;\n        - &quot;/var/log/{{ app_name }}&quot;\n\n    - name: Download application release\n      get_url:\n        url: &quot;https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        mode: &#039;0644&#039;\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/opt/{{ app_name }}/releases/&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        remote_src: yes\n        creates: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n\n    - name: Create symlink to current release\n      file:\n        src: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n        dest: &quot;/opt/{{ app_name }}/current&quot;\n        state: link\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: &quot;templates/{{ app_name }}.conf.j2&quot;\n        dest: &quot;/opt/{{ app_name }}/shared/{{ app_name }}.conf&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0640&#039;\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: &quot;templates/{{ app_name }}.service.j2&quot;\n        dest: &quot;/etc/systemd/system/{{ app_name }}.service&quot;\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: &quot;http://localhost:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: &quot;http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: &quot;/var/log/{{ app_name }}/deployments.log&quot;\n        line: &quot;{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}&quot;\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"infrastructure-as-code-playbook\" class=\"mobile-header\">Infrastructure as Code Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/infrastructure-provisioning.yml &lt;&lt;EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: &quot;{{ inventory_hostname }}&quot;\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: &quot;{{ ansible_default_ipv4.address }} {{ inventory_hostname }}&quot;\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: &quot;{{ base_packages[ansible_os_family] | default(base_packages[&#039;Debian&#039;]) }}&quot;\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chrony&#039; }}&quot;\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chronyd&#039; }}&quot;\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: &#039;0644&#039;\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: &quot;https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz&quot;\n        dest: /tmp/node_exporter.tar.gz\n        mode: &#039;0644&#039;\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;kernel.dmesg_restrict&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.kptr_restrict&#039;, value: &#039;2&#039; }\n        - { key: &#039;kernel.yama.ptrace_scope&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check&quot;\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-role-development\" class=\"mobile-header\">Advanced Role Development</h2>\n<h3 id=\"comprehensive-nginx-role\" class=\"mobile-header\">Comprehensive NGINX Role</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat &gt; roles/nginx/tasks/main.yml &lt;&lt;EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: &quot;{{ ansible_os_family }}.yml&quot;\n\n- name: Install NGINX\n  include_tasks: &quot;install-{{ ansible_os_family }}.yml&quot;\n\n- name: Create NGINX directories\n  file:\n    path: &quot;{{ item }}&quot;\n    state: directory\n    owner: root\n    group: root\n    mode: &#039;0755&#039;\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: &#039;nginx -t -c %s&#039;\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    backup: yes\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    dest: &quot;/etc/nginx/sites-enabled/{{ item.name }}.conf&quot;\n    state: link\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: &#039;0644&#039;\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat &gt; roles/nginx/tasks/install-Debian.yml &lt;&lt;EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: &quot;deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx&quot;\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat &gt; roles/nginx/tasks/install-RedHat.yml &lt;&lt;EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: &quot;https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/&quot;\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat &gt; roles/nginx/vars/main.yml &lt;&lt;EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - &quot;add_header X-Frame-Options SAMEORIGIN always;&quot;\n  - &quot;add_header X-Content-Type-Options nosniff always;&quot;\n  - &quot;add_header X-XSS-Protection &#039;1; mode=block&#039; always;&quot;\n  - &quot;add_header Strict-Transport-Security &#039;max-age=31536000; includeSubDomains&#039; always;&quot;\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: &quot;_&quot;\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat &gt; roles/nginx/templates/nginx.conf.j2 &lt;&lt;EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main &#039;\\$remote_addr - \\$remote_user [\\$time_local] &quot;\\$request&quot; &#039;\n                    &#039;\\$status \\$body_bytes_sent &quot;\\$http_referer&quot; &#039;\n                    &#039;&quot;\\$http_user_agent&quot; &quot;\\$http_x_forwarded_for&quot;&#039;;\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat &gt; roles/nginx/handlers/main.yml &lt;&lt;EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-and-compliance\" class=\"mobile-header\">Security and Compliance</h2>\n<h3 id=\"ansible-security-scanner-integration\" class=\"mobile-header\">Ansible Security Scanner Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security scanning playbook\ncat &gt; playbooks/security-scan.yml &lt;&lt;EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: &quot;/tmp/security-scans&quot;\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: &quot;{{ scan_results_dir }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: &quot;https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip&quot;\n        dest: &quot;/tmp/cis-benchmark.zip&quot;\n        mode: &#039;0644&#039;\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh &gt; {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: &quot;{{ lynis_result.stdout }}&quot;\n        dest: &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [&quot;RedHat&quot;, &quot;Debian&quot;]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: &quot;{{ item }}&quot;\n        dest: &quot;./security-reports/{{ inventory_hostname }}/&quot;\n        flat: yes\n      loop:\n        - &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html&quot;\n        - &quot;{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json&quot;\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: &quot;{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-awxtower-integration\" class=\"mobile-header\">Ansible AWX/Tower Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible AWX (open source)\ncat &gt; playbooks/install-awx.yml &lt;&lt;EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: &quot;{{ vault_awx_admin_password }}&quot;\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: &#039;0644&#039;\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: &quot;http://localhost:80/api/v2/ping/&quot;\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: &quot;http://localhost:80/api/v2/organizations/&quot;\n        method: POST\n        user: &quot;{{ awx_admin_user }}&quot;\n        password: &quot;{{ awx_admin_password }}&quot;\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: &quot;Production&quot;\n          description: &quot;Production environment organization&quot;\n        status_code: [200, 201, 409]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"multi-cloud-automation\" class=\"mobile-header\">Multi-Cloud Automation</h2>\n<h3 id=\"aws-infrastructure-automation\" class=\"mobile-header\">AWS Infrastructure Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/aws-infrastructure.yml &lt;&lt;EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: &quot;{{ aws_region | default(&#039;us-west-2&#039;) }}&quot;\n    vpc_cidr: &quot;{{ vpc_cidr | default(&#039;10.0.0.0/16&#039;) }}&quot;\n    environment: &quot;{{ environment | default(&#039;production&#039;) }}&quot;\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          &quot;tag:Name&quot;: &quot;{{ environment }}-vpc&quot;\n        region: &quot;{{ aws_region }}&quot;\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: &quot;{{ environment }}-vpc&quot;\n        cidr_block: &quot;{{ vpc_cidr }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: &quot;{{ environment }}-web-sg&quot;\n        description: &quot;Security group for web servers&quot;\n        vpc_id: &quot;{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: &quot;HTTP and HTTPS access&quot;\n          - proto: tcp\n            ports:\n              - 22\n            group_id: &quot;{{ environment }}-bastion-sg&quot;\n            rule_desc: &quot;SSH from bastion&quot;\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: &quot;{{ environment }}-web-{{ item }}&quot;\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: &quot;{{ ec2_key_name }}&quot;\n        vpc_subnet_id: &quot;{{ web_subnet_id }}&quot;\n        security_groups:\n          - &quot;{{ environment }}-web-sg&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          Role: webserver\n          Ansible: managed\n      loop: &quot;{{ range(1, web_server_count + 1) | list }}&quot;\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: &quot;{{ item.instances[0].tags.Name }}&quot;\n        hostname: &quot;{{ item.instances[0].public_ip_address }}&quot;\n        groups: webservers\n        ansible_ssh_private_key_file: &quot;~/.ssh/{{ ec2_key_name }}.pem&quot;\n        ansible_user: ec2-user\n      loop: &quot;{{ web_instances.results }}&quot;\n      changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-cluster-management\" class=\"mobile-header\">Kubernetes Cluster Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/k8s-cluster-management.yml &lt;&lt;EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: &quot;1.28.2&quot;\n    containerd_version: &quot;1.6.24&quot;\n    cni_version: &quot;1.3.0&quot;\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb &gt;= 1700\n          - ansible_processor_cores &gt;= 2\n        fail_msg: &quot;System doesn&#039;t meet minimum requirements&quot;\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: &quot;{{ item }}&quot;\n      loop: &quot;{{ groups[&#039;k8s_all&#039;] }}&quot;\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: &quot;{{ containerd_version }}&quot;\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: &quot;{{ k8s_version }}&quot;\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: &quot;{{ ansible_env.HOME }}/.kube&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    - name: Copy admin.conf to user&#039;s kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n        owner: &quot;{{ ansible_user }}&quot;\n        group: &quot;{{ ansible_user }}&quot;\n        mode: &#039;0644&#039;\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Join worker nodes to cluster\n      shell: &quot;{{ hostvars[groups[&#039;k8s_masters&#039;][0]][&#039;join_command&#039;].stdout }}&quot;\n      when: inventory_hostname in groups[&#039;k8s_workers&#039;]\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n      register: cluster_status\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization-and-scaling\" class=\"mobile-header\">Performance Optimization and Scaling</h2>\n<h3 id=\"parallel-execution-strategies\" class=\"mobile-header\">Parallel Execution Strategies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create high-performance playbook configuration\ncat &gt; playbooks/high-performance-deployment.yml &lt;&lt;EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: &quot;30%&quot;   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk &#039;{print $(NF-2)}&#039; | sed &#039;s/,//&#039;\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float &gt; 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: &quot;*&quot;\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: &quot;{{ item.src }}&quot;\n        dest: &quot;{{ item.dest }}&quot;\n        mode: &quot;{{ item.mode | default(&#039;0644&#039;) }}&quot;\n        backup: yes\n      loop:\n        - { src: &quot;nginx.conf.j2&quot;, dest: &quot;/etc/nginx/nginx.conf&quot; }\n        - { src: &quot;mysql.cnf.j2&quot;, dest: &quot;/etc/mysql/my.cnf&quot; }\n        - { src: &quot;redis.conf.j2&quot;, dest: &quot;/etc/redis/redis.conf&quot; }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: &quot;{{ item.ansible_job_id }}&quot;\n      loop: &quot;{{ config_deployment.results }}&quot;\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: &quot;{{ item }}&quot;\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: &quot;restart all services&quot;\nEOF\n\n# Performance monitoring playbook\ncat &gt; playbooks/performance-monitoring.yml &lt;&lt;EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: &quot;{{ monitoring_tools }}&quot;\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Enable system statistics collection\n      service:\n        name: &quot;{{ &#039;sysstat&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sysstat&#039; }}&quot;\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule performance monitoring\n      cron:\n        name: &quot;Performance monitoring&quot;\n        minute: &quot;*/5&quot;\n        job: &quot;/usr/local/bin/performance-monitor.sh&quot;\n        user: root\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"testing-and-validation\" class=\"mobile-header\">Testing and Validation</h2>\n<h3 id=\"molecule-testing-framework\" class=\"mobile-header\">Molecule Testing Framework</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat &gt; molecule/default/molecule.yml &lt;&lt;EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat &gt; molecule/default/converge.yml &lt;&lt;EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: &quot;Include nginx role&quot;\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat &gt; molecule/default/verify.yml &lt;&lt;EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: &quot;NGINX is not responding correctly&quot;\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-lint-and-security-scanning\" class=\"mobile-header\">Ansible Lint and Security Scanning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat &gt; .ansible-lint &lt;&lt;EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: [&#039;true&#039;, &#039;false&#039;, &#039;yes&#039;, &#039;no&#039;]\nEOF\n\n# Create security-focused playbook linting\ncat &gt; .yamllint &lt;&lt;EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"comprehensive-backup-automation\" class=\"mobile-header\">Comprehensive Backup Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/backup-automation.yml &lt;&lt;EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: &quot;0 2 * * *&quot;\n      files: &quot;0 3 * * *&quot;\n      configs: &quot;0 4 * * *&quot;\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: &quot;{{ backup_root }}/{{ item }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: &#039;0755&#039;\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    - name: Schedule database backups\n      cron:\n        name: &quot;MySQL backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;2&quot;\n        job: &quot;/usr/local/bin/mysql-backup.sh&quot;\n        user: root\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule file backups\n      cron:\n        name: &quot;File system backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/local/bin/file-backup.sh&quot;\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: &quot;{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz&quot;\n        mode: &#039;0600&#039;\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: &quot;{{ backup_root }}/&quot;\n        dest: &quot;backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/&quot;\n        delete: yes\n        rsync_opts:\n          - &quot;--exclude=*.tmp&quot;\n          - &quot;--compress&quot;\n          - &quot;--archive&quot;\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: &quot;{{ backup_root }}&quot;\n        age: &quot;{{ backup_retention_days }}d&quot;\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        state: absent\n      loop: &quot;{{ old_backups.files }}&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-monitoring\" class=\"mobile-header\">Verification and Monitoring</h2>\n<h3 id=\"cross-platform-system-verification\" class=\"mobile-header\">Cross-Platform System Verification</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive verification playbook\ncat &gt; playbooks/system-verification.yml &lt;&lt;EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - &quot;ansible_facts.services[item.service + &#039;.service&#039;].state == &#039;running&#039;&quot;\n        fail_msg: &quot;Service {{ item.service }} is not running&quot;\n        success_msg: &quot;Service {{ item.service }} is healthy&quot;\n      loop: &quot;{{ health_checks }}&quot;\n      when: &quot;item.service + &#039;.service&#039; in ansible_facts.services&quot;\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: &quot;{{ item.host }}&quot;\n        port: &quot;{{ item.port }}&quot;\n        timeout: 5\n      loop:\n        - { host: &quot;8.8.8.8&quot;, port: 53 }\n        - { host: &quot;1.1.1.1&quot;, port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk &#039;$5 &gt; &quot;85%&quot; {print $0}&#039;\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != &quot;&quot;\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk &#039;{printf &quot;%.0f&quot;, $3/$2 * 100.0}&#039;\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: &quot;WARNING: Memory usage is {{ memory_usage.stdout }}%&quot;\n      when: memory_usage.stdout | int &gt; 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep &quot;Failed password&quot; /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw &gt;/dev/null 2&gt;&amp;1; then\n          ufw status\n        elif command -v firewall-cmd &gt;/dev/null 2&gt;&amp;1; then\n          firewall-cmd --state\n        else\n          echo &quot;No supported firewall found&quot;\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    - name: Fetch health reports\n      fetch:\n        src: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        dest: &quot;./reports/&quot;\n        flat: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"continuous-compliance-monitoring\" class=\"mobile-header\">Continuous Compliance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/compliance-monitoring.yml &lt;&lt;EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: &quot;{{ &#039;auditd&#039; if ansible_os_family == &#039;RedHat&#039; else &#039;auditd&#039; }}&quot;\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo &quot;CIS-CAT not installed, skipping&quot;\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check | mail -s &#039;AIDE Report&#039; security@example.com&quot;\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-integration\" class=\"mobile-header\">CI/CD Integration</h2>\n<h3 id=\"jenkins-pipeline-integration\" class=\"mobile-header\">Jenkins Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Jenkinsfile for Ansible automation\ncat &gt; Jenkinsfile &lt;&lt;EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = &#039;ansible.cfg&#039;\n        ANSIBLE_HOST_KEY_CHECKING = &#039;False&#039;\n    }\n    \n    stages {\n        stage(&#039;Lint&#039;) {\n            steps {\n                sh &#039;ansible-lint playbooks/&#039;\n                sh &#039;yamllint .&#039;\n            }\n        }\n        \n        stage(&#039;Syntax Check&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --syntax-check&#039;\n            }\n        }\n        \n        stage(&#039;Dry Run&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --check --diff&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Staging&#039;) {\n            when {\n                branch &#039;develop&#039;\n            }\n            steps {\n                sh &#039;ansible-playbook -i inventories/staging playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Production&#039;) {\n            when {\n                branch &#039;main&#039;\n            }\n            steps {\n                input &#039;Deploy to Production?&#039;\n                sh &#039;ansible-playbook -i inventories/production playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Verify Deployment&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/system-verification.yml&#039;\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: &#039;logs/*.log&#039;, allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: &#039;reports&#039;,\n                reportFiles: &#039;*.html&#039;,\n                reportName: &#039;Ansible Report&#039;\n            ])\n        }\n        failure {\n            emailext (\n                subject: &quot;Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Something is wrong with ${env.BUILD_URL}&quot;,\n                to: &quot;${env.DEFAULT_RECIPIENTS}&quot;\n            )\n        }\n    }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci-integration\" class=\"mobile-header\">GitLab CI Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: &quot;False&quot;\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == &quot;develop&quot;&#039;\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a &quot;uptime&quot;\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug=true&quot; --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a &quot;path=/tmp/test state=touch&quot; --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=&quot;specific task name&quot;\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a &quot;var=hostvars&quot;\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name &quot;*.yml&quot; -exec ansible-playbook {} --syntax-check \\;</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=&quot;profile_tasks_sort_order=none&quot;\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=&quot;ansible_python_interpreter=/usr/bin/python3&quot;\n\n# Network debugging\nansible all -m command -a &quot;ss -tulpn&quot;\nansible all -m command -a &quot;netstat -rn&quot;\n\n# Process debugging\nansible all -m command -a &quot;ps aux --sort=-%mem | head -10&quot;\n\n# Disk usage analysis\nansible all -m command -a &quot;df -h&quot;\nansible all -m command -a &quot;du -sh /var/log/*&quot;\n\n# Service debugging\nansible all -m systemd -a &quot;name=nginx&quot; --become\nansible all -m command -a &quot;systemctl status nginx&quot; --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug_vars=true&quot; --tags debug_vars</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://galaxy.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Galaxy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://molecule.readthedocs.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Molecule Testing</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/collections/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Collections</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"31 min","wordCount":6191,"lastBuilt":"2025-09-15T06:16:23.633Z"}]},"__N_SSG":true}