{"pageProps":{"guide":{"name":"apache","displayName":"Apache","slug":"apache","description":"Repo for apache","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/apache","updatedAt":"2025-09-14T01:29:40Z","createdAt":"2025-09-08T03:04:47Z","readmeRaw":"# Apache HTTP Server Installation Guide\n\nApache HTTP Server is a free and open-source cross-platform web server software developed and maintained by the Apache Software Foundation. Originally based on the NCSA HTTPd server, Apache has been the most popular web server on the Internet since April 1996, serving over 40% of active websites. It serves as a FOSS alternative to commercial web servers like Microsoft IIS, NGINX Plus, or F5 BIG-IP, offering enterprise-grade performance, security, and flexibility without licensing costs.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for production)\n  - RAM: 512MB minimum (2GB+ recommended for production)\n  - Storage: 500MB for installation (additional space for websites and logs)\n  - Network: Stable connectivity for serving web requests\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 2.6.32+\n  - macOS: 10.12+ (Sierra or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (HTTP)\n  - Port 443 (HTTPS)\n  - Additional ports for virtual hosts if needed\n- **Dependencies**:\n  - OpenSSL for SSL/TLS support\n  - PCRE for regular expressions\n  - APR (Apache Portable Runtime) libraries\n  - Zlib for compression\n- **System Access**: root or sudo privileges for installation\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install Apache (httpd) and utilities\nsudo dnf install -y httpd httpd-tools mod_ssl mod_security\n\n# RHEL/CentOS 7 (using yum)\nsudo yum install -y epel-release\nsudo yum install -y httpd httpd-tools mod_ssl mod_security\n\n# Install additional modules\nsudo dnf install -y httpd-devel httpd-manual\n\n# Create necessary directories\nsudo mkdir -p /etc/httpd/conf.d\nsudo mkdir -p /var/log/httpd\nsudo mkdir -p /var/www/html\n\n# Set proper permissions\nsudo chown -R apache:apache /var/www/html\nsudo chown -R apache:apache /var/log/httpd\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\nhttpd -v\nsudo systemctl status httpd\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package list\nsudo apt update\n\n# Install Apache and essential modules\nsudo apt install -y apache2 apache2-utils apache2-dev libapache2-mod-security2\n\n# Install additional tools\nsudo apt install -y apache2-doc ssl-cert\n\n# Enable essential modules\nsudo a2enmod rewrite ssl headers deflate expires security2 http2\n\n# Create necessary directories\nsudo mkdir -p /var/www/html\nsudo mkdir -p /var/log/apache2\n\n# Set proper permissions\nsudo chown -R www-data:www-data /var/www/html\nsudo chown -R www-data:www-data /var/log/apache2\n\n# Enable and start service\nsudo systemctl enable --now apache2\n\n# Verify installation\napache2ctl -v\nsudo systemctl status apache2\n```\n\n### Arch Linux\n\n```bash\n# Install Apache\nsudo pacman -S apache\n\n# Install additional modules\nsudo pacman -S apache-mod-security apache-mod-wsgi\n\n# Create apache user if not exists\nsudo useradd -r -d /srv/http -s /sbin/nologin -c \"Apache HTTP Server\" apache\n\n# Create necessary directories\nsudo mkdir -p /etc/httpd/conf.d\nsudo mkdir -p /var/log/httpd\nsudo mkdir -p /srv/http\n\n# Set proper permissions\nsudo chown -R apache:apache /srv/http\nsudo chown -R apache:apache /var/log/httpd\n\n# Edit main configuration\nsudo sed -i 's/#ServerName www.example.com:80/ServerName localhost:80/' /etc/httpd/conf/httpd.conf\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\nhttpd -v\nsudo systemctl status httpd\n```\n\n### Alpine Linux\n\n```bash\n# Install Apache\napk add --no-cache apache2 apache2-ssl apache2-utils\n\n# Install additional modules\napk add --no-cache apache2-mod-wsgi apache2-mod-fcgid\n\n# Create apache user if not exists\nadduser -D -H -s /sbin/nologin -g apache apache\n\n# Create necessary directories\nmkdir -p /var/www/localhost/htdocs\nmkdir -p /var/log/apache2\nmkdir -p /run/apache2\n\n# Set proper permissions\nchown -R apache:apache /var/www/localhost/htdocs\nchown -R apache:apache /var/log/apache2\nchown -R apache:apache /run/apache2\n\n# Configure basic settings\nsed -i 's/#ServerName www.example.com:80/ServerName localhost:80/' /etc/apache2/httpd.conf\n\n# Enable and start service\nrc-update add apache2 default\nrc-service apache2 start\n\n# Verify installation\nhttpd -v\nrc-service apache2 status\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y apache2 apache2-mod_ssl apache2-utils\n\n# Install additional modules\nsudo zypper install -y apache2-mod_security2 apache2-mod_wsgi\n\n# SLES 15\n# Enable web and scripting module\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\nsudo zypper install -y apache2 apache2-mod_ssl\n\n# Create necessary directories\nsudo mkdir -p /etc/apache2/conf.d\nsudo mkdir -p /var/log/apache2\nsudo mkdir -p /srv/www/htdocs\n\n# Set proper permissions\nsudo chown -R wwwrun:www /srv/www/htdocs\nsudo chown -R wwwrun:www /var/log/apache2\n\n# Enable modules\nsudo a2enmod ssl\nsudo a2enmod rewrite\nsudo a2enmod headers\n\n# Enable and start service\nsudo systemctl enable --now apache2\n\n# Verify installation\napache2ctl -v\nsudo systemctl status apache2\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install httpd\n\n# Start as service\nbrew services start httpd\n\n# Or run manually\nsudo /usr/local/bin/httpd -D FOREGROUND\n\n# Configuration location: /usr/local/etc/httpd/httpd.conf\n# Alternative: /opt/homebrew/etc/httpd/httpd.conf (Apple Silicon)\n\n# Create necessary directories\nsudo mkdir -p /usr/local/var/log/httpd\nsudo mkdir -p /usr/local/var/www\n\n# Set basic configuration\nsed -i '' 's/#ServerName www.example.com:8080/ServerName localhost:8080/' /usr/local/etc/httpd/httpd.conf\n\n# Verify installation\n/usr/local/bin/httpd -v\nbrew services list | grep httpd\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install apache24\n\n# Using ports\ncd /usr/ports/www/apache24\nmake install clean\n\n# Enable in rc.conf\necho 'apache24_enable=\"YES\"' >> /etc/rc.conf\n\n# Create necessary directories\nmkdir -p /var/log/httpd\nmkdir -p /usr/local/www/apache24/data\n\n# Set proper permissions\nchown -R www:www /usr/local/www/apache24/data\nchown -R www:www /var/log/httpd\n\n# Start service\nservice apache24 start\n\n# Verify installation\n/usr/local/sbin/httpd -v\nservice apache24 status\n\n# Configuration location: /usr/local/etc/apache24/httpd.conf\n```\n\n### Windows\n\n```powershell\n# Method 1: Using Chocolatey\nchoco install apache-httpd\n\n# Method 2: Using Scoop\nscoop bucket add extras\nscoop install apache\n\n# Method 3: Manual installation from Apache Lounge\n# Download from https://www.apachelounge.com/download/\n# Extract to C:\\Apache24\n\n# Install as Windows service\nC:\\Apache24\\bin\\httpd.exe -k install -n Apache24\n\n# Start service\nStart-Service Apache24\n\n# Or using net command\nnet start Apache24\n\n# Configuration location: C:\\Apache24\\conf\\httpd.conf\n# Document root: C:\\Apache24\\htdocs\n\n# Verify installation\nC:\\Apache24\\bin\\httpd.exe -v\nGet-Service Apache24\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Create apache user** (if not created by package):\n```bash\n# Linux systems\nsudo useradd -r -d /var/www -s /sbin/nologin -c \"Apache HTTP Server\" apache\n```\n\n2. **Default configuration locations**:\n- RHEL/CentOS/Rocky/AlmaLinux: `/etc/httpd/conf/httpd.conf`\n- Debian/Ubuntu: `/etc/apache2/apache2.conf`\n- Arch Linux: `/etc/httpd/conf/httpd.conf`\n- Alpine Linux: `/etc/apache2/httpd.conf`\n- openSUSE/SLES: `/etc/apache2/httpd.conf`\n- macOS: `/usr/local/etc/httpd/httpd.conf`\n- FreeBSD: `/usr/local/etc/apache24/httpd.conf`\n- Windows: `C:\\Apache24\\conf\\httpd.conf`\n\n3. **Essential settings to change**:\n\n```apache\n# Basic security settings\nServerTokens Prod\nServerSignature Off\n\n# Set server name\nServerName localhost:80\n\n# Basic security modules\nLoadModule headers_module modules/mod_headers.so\nLoadModule rewrite_module modules/mod_rewrite.so\nLoadModule ssl_module modules/mod_ssl.so\n\n# Security headers\nHeader always set X-Frame-Options \"SAMEORIGIN\"\nHeader always set X-Content-Type-Options \"nosniff\"\nHeader always set X-XSS-Protection \"1; mode=block\"\n\n# Hide .htaccess files\n<FilesMatch \"^\\.ht\">\n    Require all denied\n</FilesMatch>\n\n# Disable directory browsing by default\nOptions -Indexes\n\n# Basic virtual host\n<VirtualHost *:80>\n    ServerName localhost\n    DocumentRoot /var/www/html\n    ErrorLog logs/error_log\n    CustomLog logs/access_log common\n</VirtualHost>\n```\n\n### Testing Initial Setup\n\n```bash\n# Test configuration syntax\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS/Arch\n\n# Check loaded modules\napache2ctl -M  # Debian/Ubuntu\nhttpd -M       # RHEL/CentOS/Arch\n\n# Test HTTP response\ncurl -I http://localhost\n\n# Check if Apache is listening\nsudo ss -tlnp | grep :80\nsudo netstat -tlnp | grep :80\n\n# View virtual host configuration\napache2ctl -S  # Debian/Ubuntu\nhttpd -S       # RHEL/CentOS/Arch\n```\n\n**WARNING:** Never expose Apache to the public internet without proper security hardening!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Apache to start on boot\nsudo systemctl enable apache2  # Debian/Ubuntu\nsudo systemctl enable httpd    # RHEL/CentOS/Arch\n\n# Start Apache\nsudo systemctl start apache2   # Debian/Ubuntu\nsudo systemctl start httpd     # RHEL/CentOS/Arch\n\n# Stop Apache\nsudo systemctl stop apache2    # Debian/Ubuntu\nsudo systemctl stop httpd      # RHEL/CentOS/Arch\n\n# Restart Apache\nsudo systemctl restart apache2 # Debian/Ubuntu\nsudo systemctl restart httpd   # RHEL/CentOS/Arch\n\n# Graceful reload (reload config without dropping connections)\nsudo systemctl reload apache2  # Debian/Ubuntu\nsudo systemctl reload httpd    # RHEL/CentOS/Arch\n\n# Check status\nsudo systemctl status apache2  # Debian/Ubuntu\nsudo systemctl status httpd    # RHEL/CentOS/Arch\n\n# View logs\nsudo journalctl -u apache2 -f  # Debian/Ubuntu\nsudo journalctl -u httpd -f    # RHEL/CentOS/Arch\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable Apache to start on boot\nrc-update add apache2 default\n\n# Start Apache\nrc-service apache2 start\n\n# Stop Apache\nrc-service apache2 stop\n\n# Restart Apache\nrc-service apache2 restart\n\n# Graceful reload\nrc-service apache2 reload\n\n# Check status\nrc-service apache2 status\n\n# View logs\ntail -f /var/log/apache2/error.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'apache24_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Apache\nservice apache24 start\n\n# Stop Apache\nservice apache24 stop\n\n# Restart Apache\nservice apache24 restart\n\n# Graceful reload\nservice apache24 graceful\n\n# Check status\nservice apache24 status\n\n# View configuration test\nservice apache24 configtest\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start httpd\nbrew services stop httpd\nbrew services restart httpd\n\n# Check status\nbrew services list | grep httpd\n\n# Manual control\nsudo /usr/local/bin/httpd -k start\nsudo /usr/local/bin/httpd -k stop\nsudo /usr/local/bin/httpd -k restart\nsudo /usr/local/bin/httpd -k graceful\n\n# Test configuration\n/usr/local/bin/httpd -t\n```\n\n### Windows Service Manager\n\n```powershell\n# Start Apache service\nStart-Service Apache24\n# Or: net start Apache24\n\n# Stop Apache service\nStop-Service Apache24\n# Or: net stop Apache24\n\n# Restart Apache service\nRestart-Service Apache24\n\n# Check status\nGet-Service Apache24\n\n# Manual control\nC:\\Apache24\\bin\\httpd.exe -k start\nC:\\Apache24\\bin\\httpd.exe -k stop\nC:\\Apache24\\bin\\httpd.exe -k restart\n\n# Test configuration\nC:\\Apache24\\bin\\httpd.exe -t\n\n# View logs\nGet-Content C:\\Apache24\\logs\\error.log -Wait\n```\n\n## Advanced Configuration\n\n### Virtual Hosts\n\n```apache\n# /etc/apache2/sites-available/example.com.conf (Debian/Ubuntu)\n# /etc/httpd/conf.d/example.com.conf (RHEL/CentOS)\n\n<VirtualHost *:80>\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/example.com/public_html\n    \n    # Logging\n    ErrorLog ${APACHE_LOG_DIR}/example.com_error.log\n    CustomLog ${APACHE_LOG_DIR}/example.com_access.log combined\n    \n    # Security\n    <Directory /var/www/example.com/public_html>\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n        \n        # Hide sensitive files\n        <Files ~ \"^\\.(htaccess|htpasswd|env)$\">\n            Require all denied\n        </Files>\n    </Directory>\n</VirtualHost>\n\n# SSL Virtual Host\n<VirtualHost *:443>\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/example.com/public_html\n    \n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    # Modern SSL configuration\n    SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n    SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n    SSLHonorCipherOrder off\n    SSLSessionTickets off\n    \n    # Security headers\n    Header always set Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\n    Header always set X-Frame-Options \"SAMEORIGIN\"\n    Header always set X-Content-Type-Options \"nosniff\"\n    Header always set X-XSS-Protection \"1; mode=block\"\n    \n    # Logging\n    ErrorLog ${APACHE_LOG_DIR}/example.com_ssl_error.log\n    CustomLog ${APACHE_LOG_DIR}/example.com_ssl_access.log combined\n</VirtualHost>\n```\n\n### Performance Tuning\n\n```apache\n# MPM Event configuration (modern and efficient)\n<IfModule mpm_event_module>\n    StartServers             3\n    MinSpareThreads         75\n    MaxSpareThreads        250\n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    ThreadLimit             64\n</IfModule>\n\n# Compression\n<IfModule mod_deflate.c>\n    SetOutputFilter DEFLATE\n    AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain\n    AddOutputFilterByType DEFLATE application/javascript application/xml+rss application/xml\n    AddOutputFilterByType DEFLATE application/json application/x-javascript\n    \n    # Don't compress images\n    SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|webp)$ no-gzip\n    SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip\n</IfModule>\n\n# Caching\n<IfModule mod_expires.c>\n    ExpiresActive On\n    ExpiresByType image/jpg \"access plus 1 year\"\n    ExpiresByType image/jpeg \"access plus 1 year\"\n    ExpiresByType image/gif \"access plus 1 year\"\n    ExpiresByType image/png \"access plus 1 year\"\n    ExpiresByType image/webp \"access plus 1 year\"\n    ExpiresByType text/css \"access plus 1 month\"\n    ExpiresByType application/pdf \"access plus 1 month\"\n    ExpiresByType application/javascript \"access plus 1 month\"\n    ExpiresByType application/x-javascript \"access plus 1 month\"\n    ExpiresByType image/x-icon \"access plus 1 year\"\n    ExpiresDefault \"access plus 2 days\"\n</IfModule>\n```\n\n### Security Hardening\n\n```apache\n# Security configuration\nServerTokens Prod\nServerSignature Off\n\n# Disable unnecessary HTTP methods\n<LimitExcept GET POST HEAD>\n    Require all denied\n</LimitExcept>\n\n# Hide server information\nHeader always unset Server\nHeader unset X-Powered-By\n\n# Security headers\nHeader always set Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\nHeader always set X-Frame-Options \"SAMEORIGIN\"\nHeader always set X-Content-Type-Options \"nosniff\"\nHeader always set X-XSS-Protection \"1; mode=block\"\nHeader always set Referrer-Policy \"strict-origin-when-cross-origin\"\n\n# Disable TRACE method\nTraceEnable off\n\n# Timeout settings\nTimeout 60\nKeepAliveTimeout 15\n\n# Request limits\nLimitRequestBody 10485760  # 10MB\nLimitRequestFields 100\nLimitRequestFieldSize 8190\nLimitRequestLine 4094\n\n# Hide sensitive files\n<FilesMatch \"^\\.\">\n    Require all denied\n</FilesMatch>\n\n<FilesMatch \"\\.(bak|backup|swp|tmp|~)$\">\n    Require all denied\n</FilesMatch>\n\n# Disable server-status and server-info\n<Location \"/server-status\">\n    Require ip 127.0.0.1\n    Require ip ::1\n</Location>\n\n<Location \"/server-info\">\n    Require ip 127.0.0.1\n    Require ip ::1\n</Location>\n```\n\n## Reverse Proxy Setup\n\n### nginx as Frontend Proxy\n\n```nginx\n# /etc/nginx/sites-available/apache-proxy\nupstream apache_backend {\n    server 127.0.0.1:8080;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name example.com www.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name example.com www.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://apache_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Handle Apache redirects\n        proxy_redirect http://apache_backend https://$server_name;\n    }\n    \n    # Serve static files directly with nginx\n    location ~* \\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n        try_files $uri @apache;\n        expires 1y;\n        add_header Cache-Control \"public, immutable\";\n    }\n    \n    location @apache {\n        proxy_pass http://apache_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nglobal\n    maxconn 4096\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\nfrontend apache_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/example.com.pem\n    \n    # Redirect HTTP to HTTPS\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-Content-Type-Options nosniff\n    \n    default_backend apache_servers\n\nbackend apache_servers\n    balance roundrobin\n    option httpchk GET / HTTP/1.1\\r\\nHost:\\ localhost\n    server apache1 127.0.0.1:8080 check\n    server apache2 127.0.0.1:8081 check backup\n```\n\n### Caddy Configuration\n\n```caddyfile\nexample.com www.example.com {\n    reverse_proxy localhost:8080\n    \n    # Security headers\n    header {\n        Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\n        X-Frame-Options \"SAMEORIGIN\"\n        X-Content-Type-Options \"nosniff\"\n        X-XSS-Protection \"1; mode=block\"\n    }\n    \n    # Compression\n    encode gzip\n    \n    # Logging\n    log {\n        output file /var/log/caddy/example.com.log\n        level INFO\n    }\n}\n```\n\n### Apache as Reverse Proxy\n\n```apache\n# Enable required modules\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\nLoadModule proxy_balancer_module modules/mod_proxy_balancer.so\n\n<VirtualHost *:80>\n    ServerName example.com\n    \n    # Proxy configuration\n    ProxyPreserveHost On\n    ProxyPass / http://backend-server:8080/\n    ProxyPassReverse / http://backend-server:8080/\n    \n    # Load balancing\n    ProxyPass /app/ balancer://mycluster/\n    ProxyPassReverse /app/ balancer://mycluster/\n    \n    <Proxy balancer://mycluster>\n        BalancerMember http://backend1:8080\n        BalancerMember http://backend2:8080\n        ProxySet hcmethod GET\n        ProxySet hcuri /health\n    </Proxy>\n    \n    # Balancer manager\n    <Location \"/balancer-manager\">\n        SetHandler balancer-manager\n        Require ip 127.0.0.1\n        Require ip ::1\n    </Location>\n</VirtualHost>\n```\n\n## Security Configuration\n\n### SSL/TLS Configuration\n\n```apache\n# Load SSL module\nLoadModule ssl_module modules/mod_ssl.so\n\n# Global SSL configuration\nSSLEngine on\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\nSSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\nSSLHonorCipherOrder off\nSSLSessionCache shmcb:/var/run/ssl_scache(512000)\nSSLSessionCacheTimeout 300\nSSLUseStapling On\nSSLStaplingCache shmcb:/var/run/ocsp(128000)\nSSLCompression off\nSSLSessionTickets off\n\n# Generate DH parameters\n# openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem\n```\n\n### ModSecurity WAF\n\n```bash\n# Install ModSecurity\n# Ubuntu/Debian\nsudo apt install libapache2-mod-security2\n\n# RHEL/CentOS\nsudo dnf install mod_security\n\n# Enable module\nsudo a2enmod security2  # Ubuntu/Debian\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/modsecurity\ncd /etc/modsecurity\nsudo wget https://github.com/coreruleset/coreruleset/archive/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 crs\nsudo cp crs/crs-setup.conf.example crs/crs-setup.conf\n```\n\n```apache\n# ModSecurity configuration\n<IfModule mod_security2.c>\n    SecRuleEngine On\n    SecRequestBodyAccess On\n    SecRequestBodyLimit 13107200\n    SecRequestBodyNoFilesLimit 131072\n    SecRequestBodyInMemoryLimit 131072\n    SecRequestBodyLimitAction Reject\n    SecResponseBodyAccess Off\n    SecDebugLog /var/log/apache2/modsec_debug.log\n    SecDebugLogLevel 0\n    SecAuditEngine RelevantOnly\n    SecAuditLogRelevantStatus \"^(?:5|4(?!04))\"\n    SecAuditLogParts ABDEFHIJZ\n    SecAuditLogType Serial\n    SecAuditLog /var/log/apache2/modsec_audit.log\n    \n    # Include OWASP Core Rule Set\n    Include /etc/modsecurity/crs/crs-setup.conf\n    Include /etc/modsecurity/crs/rules/*.conf\n</IfModule>\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 'Apache Full'    # HTTP and HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from any to any port {80, 443}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName \"Apache HTTP\" -Direction Inbound -Protocol TCP -LocalPort 80 -Action Allow\nNew-NetFirewallRule -DisplayName \"Apache HTTPS\" -Direction Inbound -Protocol TCP -LocalPort 443 -Action Allow\n```\n\n### Access Control\n\n```apache\n# IP-based access control\n<Directory \"/var/www/admin\">\n    Require ip 192.168.1.0/24\n    Require ip 127.0.0.1\n    Require ip ::1\n</Directory>\n\n# Password protection\n<Directory \"/var/www/private\">\n    AuthType Basic\n    AuthName \"Restricted Area\"\n    AuthUserFile /etc/apache2/.htpasswd\n    Require valid-user\n</Directory>\n\n# Create password file\n# htpasswd -c /etc/apache2/.htpasswd username\n\n# Client certificate authentication\n<Directory \"/var/www/secure\">\n    SSLRequireSSL\n    SSLVerifyClient require\n    SSLVerifyDepth 1\n    SSLCACertificateFile /etc/ssl/certs/ca.crt\n</Directory>\n```\n\n## Database Setup\n\nApache HTTP Server doesn't require a database, but it commonly integrates with databases through various modules and applications:\n\n### PHP Database Integration\n\n```apache\n# PHP module configuration\nLoadModule php_module modules/libphp.so\n\n<IfModule mod_php.c>\n    AddType application/x-httpd-php .php\n    php_admin_flag allow_url_include Off\n    php_admin_flag allow_url_fopen Off\n    php_admin_value upload_max_filesize 64M\n    php_admin_value post_max_size 64M\n    php_admin_value memory_limit 256M\n    php_admin_value max_execution_time 300\n    php_admin_flag expose_php Off\n</IfModule>\n```\n\n### Database Connection Examples\n\n```apache\n# Environment variables for database connections\nSetEnv DB_HOST localhost\nSetEnv DB_NAME myapp\nSetEnv DB_USER webapp\nSetEnv DB_PASS secretpassword\n\n# Secure environment variables from external access\n<Location \"/server-status\">\n    SetHandler server-status\n    Require local\n</Location>\n```\n\n### CGI Database Applications\n\n```apache\n# Enable CGI for database applications\nLoadModule cgi_module modules/mod_cgi.so\n\n<Directory \"/var/www/cgi-bin\">\n    AllowOverride None\n    Options +ExecCGI\n    AddHandler cgi-script .cgi .pl .py\n    Require all granted\n</Directory>\n\n# Python WSGI for database applications\nLoadModule wsgi_module modules/mod_wsgi.so\n\nWSGIDaemonProcess myapp python-home=/path/to/venv python-path=/path/to/app\nWSGIProcessGroup myapp\nWSGIScriptAlias / /path/to/app/app.wsgi\n```\n\n## Performance Optimization\n\n### System-level Tuning\n\n```bash\n# Increase system limits for Apache\nsudo tee -a /etc/security/limits.conf <<EOF\napache soft nofile 65535\napache hard nofile 65535\nwww-data soft nofile 65535\nwww-data hard nofile 65535\nEOF\n\n# Kernel optimization for web servers\nsudo tee -a /etc/sysctl.conf <<EOF\n# Apache optimization\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\n\n# Memory management\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\nsudo sysctl -p\n```\n\n### Apache Performance Settings\n\n```apache\n# Optimized MPM Event configuration\n<IfModule mpm_event_module>\n    StartServers             4\n    MinSpareThreads         25\n    MaxSpareThreads        75 \n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    ThreadLimit             64\n    ServerLimit             16\n    AsyncRequestWorkerFactor 2\n</IfModule>\n\n# Connection settings\nKeepAlive On\nKeepAliveTimeout 15\nMaxKeepAliveRequests 100\n\n# Timeout settings\nTimeout 60\nLimitRequestLine 4094\nLimitRequestFieldSize 8190\nLimitRequestFields 100\nLimitRequestBody 10485760\n\n# Buffer settings\nEnableSendfile On\nEnableMMAP On\n```\n\n### Caching Configuration\n\n```apache\n# Enable caching modules\nLoadModule cache_module modules/mod_cache.so\nLoadModule cache_disk_module modules/mod_cache_disk.so\n\n# Disk cache configuration\n<IfModule mod_cache_disk.c>\n    CacheRoot /var/cache/apache2\n    CacheDirLevels 2\n    CacheDirLength 1\n    CacheEnable disk /\n    CacheIgnoreHeaders Set-Cookie\n    CacheDefaultExpire 3600\n    CacheMaxExpire 86400\n    CacheLastModifiedFactor 0.1\n    CacheHeader on\n</IfModule>\n\n# Memory cache (alternative to disk cache)\nLoadModule cache_socache_module modules/mod_cache_socache.so\n\n<IfModule mod_cache_socache.c>\n    CacheEnable socache /\n    CacheSocache shmcb\n    CacheSocacheMaxSize 102400\n</IfModule>\n```\n\n### Content Optimization\n\n```apache\n# Compression\n<IfModule mod_deflate.c>\n    SetOutputFilter DEFLATE\n    AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain\n    AddOutputFilterByType DEFLATE application/javascript application/xml+rss application/xml\n    AddOutputFilterByType DEFLATE application/json application/x-javascript application/xhtml+xml\n    \n    # Don't compress images or binaries\n    SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|webp|pdf|zip|rar|exe)$ no-gzip\n    \n    # Compression level (1-9, 6 is good balance)\n    DeflateCompressionLevel 6\n</IfModule>\n\n# Static file caching\n<IfModule mod_expires.c>\n    ExpiresActive On\n    \n    # Images\n    ExpiresByType image/jpg \"access plus 1 year\"\n    ExpiresByType image/jpeg \"access plus 1 year\"\n    ExpiresByType image/gif \"access plus 1 year\"\n    ExpiresByType image/png \"access plus 1 year\"\n    ExpiresByType image/webp \"access plus 1 year\"\n    ExpiresByType image/svg+xml \"access plus 1 year\"\n    \n    # CSS and JavaScript\n    ExpiresByType text/css \"access plus 1 month\"\n    ExpiresByType application/javascript \"access plus 1 month\"\n    ExpiresByType application/x-javascript \"access plus 1 month\"\n    \n    # Fonts\n    ExpiresByType font/woff \"access plus 1 year\"\n    ExpiresByType font/woff2 \"access plus 1 year\"\n    ExpiresByType application/font-woff \"access plus 1 year\"\n    ExpiresByType application/font-woff2 \"access plus 1 year\"\n    \n    # Icons\n    ExpiresByType image/x-icon \"access plus 1 year\"\n    ExpiresByType image/vnd.microsoft.icon \"access plus 1 year\"\n    \n    # HTML\n    ExpiresByType text/html \"access plus 300 seconds\"\n    \n    # Default\n    ExpiresDefault \"access plus 1 day\"\n</IfModule>\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```apache\n# Enable server-status module\nLoadModule status_module modules/mod_status.so\n\n<Location \"/server-status\">\n    SetHandler server-status\n    Require ip 127.0.0.1\n    Require ip ::1\n</Location>\n\n<Location \"/server-info\">\n    SetHandler server-info\n    Require ip 127.0.0.1\n    Require ip ::1\n</Location>\n\n# Extended status\nExtendedStatus On\n```\n\n### Log Analysis\n\n```bash\n# Monitor Apache access logs\ntail -f /var/log/apache2/access.log  # Debian/Ubuntu\ntail -f /var/log/httpd/access_log    # RHEL/CentOS\n\n# Monitor error logs\ntail -f /var/log/apache2/error.log   # Debian/Ubuntu\ntail -f /var/log/httpd/error_log     # RHEL/CentOS\n\n# Analyze top IPs\nawk '{print $1}' /var/log/apache2/access.log | sort | uniq -c | sort -rn | head -10\n\n# Analyze response codes\nawk '{print $9}' /var/log/apache2/access.log | sort | uniq -c | sort -rn\n\n# Analyze most requested files\nawk '{print $7}' /var/log/apache2/access.log | sort | uniq -c | sort -rn | head -10\n\n# Check for errors\ngrep \"error\" /var/log/apache2/error.log | tail -10\n```\n\n### External Monitoring Tools\n\n```bash\n# Install monitoring tools\n# GoAccess for real-time log analysis\nsudo apt install goaccess  # Ubuntu/Debian\nsudo dnf install goaccess  # RHEL/CentOS\n\n# Real-time analysis\ngoaccess /var/log/apache2/access.log -c\n\n# Generate HTML report\ngoaccess /var/log/apache2/access.log -o /var/www/html/stats.html --log-format=COMBINED --real-time-html\n\n# Install htop for process monitoring\nsudo apt install htop\nhtop -p $(pgrep apache2 | head -5 | tr '\\n' ',' | sed 's/,$//')\n```\n\n### Performance Monitoring\n\n```bash\n# Monitor Apache processes\nps aux | grep apache2 | grep -v grep\n\n# Monitor memory usage\nps aux --sort=-%mem | grep apache2 | head -10\n\n# Monitor connection counts\nss -tan | grep :80 | wc -l\nss -tan | grep :443 | wc -l\n\n# Check server-status (if enabled)\ncurl http://localhost/server-status\ncurl http://localhost/server-status?auto  # Machine readable\n\n# Monitor file descriptors\nlsof -u apache2 | wc -l  # Ubuntu/Debian\nlsof -u apache | wc -l   # RHEL/CentOS\n```\n\n## Backup and Restore\n\n### Configuration Backup\n\n```bash\n#!/bin/bash\n# backup-apache-config.sh\n\nBACKUP_DIR=\"/backup/apache/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Detect Apache configuration directory\nif [ -d /etc/apache2 ]; then\n    # Debian/Ubuntu\n    CONFIG_DIR=\"/etc/apache2\"\n    LOG_DIR=\"/var/log/apache2\"\n    WEB_DIR=\"/var/www\"\nelif [ -d /etc/httpd ]; then\n    # RHEL/CentOS\n    CONFIG_DIR=\"/etc/httpd\"\n    LOG_DIR=\"/var/log/httpd\"\n    WEB_DIR=\"/var/www\"\nfi\n\n# Backup Apache configuration\ntar czf \"$BACKUP_DIR/apache-config.tar.gz\" -C / \"${CONFIG_DIR#/}\"\n\n# Backup website files\ntar czf \"$BACKUP_DIR/apache-sites.tar.gz\" -C \"$WEB_DIR\" .\n\n# Backup SSL certificates\nif [ -d /etc/letsencrypt ]; then\n    tar czf \"$BACKUP_DIR/ssl-certs.tar.gz\" -C /etc letsencrypt\nfi\n\n# Backup recent logs (last 7 days)\nfind \"$LOG_DIR\" -name \"*.log\" -mtime -7 -exec tar czf \"$BACKUP_DIR/apache-logs.tar.gz\" {} +\n\n# Package version info\nif command -v apache2ctl &> /dev/null; then\n    apache2ctl -v > \"$BACKUP_DIR/version.txt\"\nelif command -v httpd &> /dev/null; then\n    httpd -v > \"$BACKUP_DIR/version.txt\"\nfi\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Website Backup\n\n```bash\n#!/bin/bash\n# backup-websites.sh\n\nBACKUP_DIR=\"/backup/websites/$(date +%Y%m%d_%H%M%S)\"\nWEB_ROOT=\"/var/www/html\"\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Backup all websites\nfor site in \"$WEB_ROOT\"/*; do\n    if [ -d \"$site\" ]; then\n        site_name=$(basename \"$site\")\n        echo \"Backing up $site_name...\"\n        tar czf \"$BACKUP_DIR/${site_name}.tar.gz\" -C \"$WEB_ROOT\" \"$site_name\"\n    fi\ndone\n\n# Backup databases (if applicable)\nif command -v mysqldump &> /dev/null; then\n    for db in $(mysql -e \"SHOW DATABASES;\" | grep -v -E \"^(Database|information_schema|performance_schema|mysql|sys)$\"); do\n        mysqldump \"$db\" | gzip > \"$BACKUP_DIR/${db}.sql.gz\"\n    done\nfi\n\n# Keep only last 30 days of backups\nfind /backup/websites -type d -mtime +30 -exec rm -rf {} + 2>/dev/null\n\necho \"Website backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedures\n\n```bash\n#!/bin/bash\n# restore-apache.sh\n\nBACKUP_DIR=\"$1\"\nif [ -z \"$BACKUP_DIR\" ]; then\n    echo \"Usage: $0 <backup-directory>\"\n    exit 1\nfi\n\n# Stop Apache\nif command -v systemctl &> /dev/null; then\n    sudo systemctl stop apache2 || sudo systemctl stop httpd\nelif command -v service &> /dev/null; then\n    sudo service apache2 stop || sudo service httpd stop\nfi\n\n# Restore configuration\nif [ -f \"$BACKUP_DIR/apache-config.tar.gz\" ]; then\n    sudo tar xzf \"$BACKUP_DIR/apache-config.tar.gz\" -C /\n    echo \"Configuration restored\"\nfi\n\n# Restore websites\nif [ -f \"$BACKUP_DIR/apache-sites.tar.gz\" ]; then\n    sudo tar xzf \"$BACKUP_DIR/apache-sites.tar.gz\" -C /var/www\n    echo \"Websites restored\"\nfi\n\n# Restore SSL certificates\nif [ -f \"$BACKUP_DIR/ssl-certs.tar.gz\" ]; then\n    sudo tar xzf \"$BACKUP_DIR/ssl-certs.tar.gz\" -C /etc\n    echo \"SSL certificates restored\"\nfi\n\n# Test configuration\nif command -v apache2ctl &> /dev/null; then\n    sudo apache2ctl configtest\n    if [ $? -eq 0 ]; then\n        sudo systemctl start apache2\n    fi\nelif command -v httpd &> /dev/null; then\n    sudo httpd -t\n    if [ $? -eq 0 ]; then\n        sudo systemctl start httpd\n    fi\nfi\n\necho \"Restore completed\"\n```\n\n### Automated Backup\n\n```bash\n# Create cron job for daily backups\nsudo tee /etc/cron.d/apache-backup <<EOF\n# Apache daily backup\n0 2 * * * root /usr/local/bin/backup-apache-config.sh\n0 3 * * * root /usr/local/bin/backup-websites.sh\nEOF\n\n# Make scripts executable\nsudo chmod +x /usr/local/bin/backup-apache-config.sh\nsudo chmod +x /usr/local/bin/backup-websites.sh\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Apache won't start**:\n```bash\n# Check configuration syntax\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS\n\n# Check error logs\nsudo tail -20 /var/log/apache2/error.log  # Debian/Ubuntu\nsudo tail -20 /var/log/httpd/error_log    # RHEL/CentOS\n\n# Check port conflicts\nsudo ss -tlnp | grep :80\nsudo lsof -i :80\n\n# Check permissions\nls -la /var/www/html\nps aux | grep apache2\n```\n\n2. **Permission denied errors**:\n```bash\n# Fix ownership\nsudo chown -R www-data:www-data /var/www/html  # Debian/Ubuntu\nsudo chown -R apache:apache /var/www/html      # RHEL/CentOS\n\n# Fix permissions\nsudo find /var/www/html -type d -exec chmod 755 {} \\;\nsudo find /var/www/html -type f -exec chmod 644 {} \\;\n\n# Check SELinux (RHEL/CentOS)\ngetenforce\nsudo setsebool -P httpd_can_network_connect 1\nsudo restorecon -Rv /var/www/html\n```\n\n3. **Virtual host not working**:\n```bash\n# Check virtual host configuration\napache2ctl -S  # Debian/Ubuntu\nhttpd -S       # RHEL/CentOS\n\n# Enable virtual host (Debian/Ubuntu)\nsudo a2ensite example.com.conf\nsudo systemctl reload apache2\n\n# Test virtual host\ncurl -H \"Host: example.com\" http://localhost/\n```\n\n4. **SSL certificate issues**:\n```bash\n# Check certificate files\nsudo openssl x509 -in /etc/ssl/certs/example.com.crt -text -noout\n\n# Test SSL configuration\necho | openssl s_client -servername example.com -connect example.com:443\n\n# Check SSL module\napache2ctl -M | grep ssl  # Debian/Ubuntu\nhttpd -M | grep ssl       # RHEL/CentOS\n```\n\n### Debug Mode\n\n```apache\n# Enable debug logging\nLogLevel debug\n\n# Module-specific debug\nLogLevel ssl:debug\nLogLevel rewrite:debug\n\n# Custom debug log format\nLogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\" %D\" debug\nCustomLog /var/log/apache2/debug.log debug\n```\n\n### Performance Issues\n\n```bash\n# Monitor Apache processes\ntop -p $(pgrep apache2 | head -5 | tr '\\n' ',' | sed 's/,$//')\n\n# Check memory usage\nps aux --sort=-%mem | grep apache2\n\n# Monitor connections\nwatch 'ss -tan | grep :80 | wc -l'\n\n# Check slow queries (if applicable)\ngrep \"taking too long\" /var/log/apache2/error.log\n\n# Analyze configuration\napache2ctl -t -D DUMP_VHOSTS\napache2ctl -t -D DUMP_MODULES\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update httpd\nsudo dnf update httpd httpd-tools mod_ssl\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade apache2 apache2-utils libapache2-mod-ssl\n\n# Arch Linux\nsudo pacman -Syu apache\n\n# Alpine Linux\napk update\napk upgrade apache2\n\n# openSUSE\nsudo zypper update apache2\n\n# FreeBSD\npkg update\npkg upgrade apache24\n\n# macOS\nbrew upgrade httpd\n\n# Always test configuration after update\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS\n\n# Graceful restart to apply updates\nsudo systemctl reload apache2  # Debian/Ubuntu\nsudo systemctl reload httpd    # RHEL/CentOS\n```\n\n### Log Rotation\n\n```bash\n# Configure log rotation for Apache\nsudo tee /etc/logrotate.d/apache2 <<EOF\n/var/log/apache2/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 640 root adm\n    sharedscripts\n    postrotate\n        if /bin/pidof apache2 > /dev/null ; then \\\n            /usr/sbin/apache2ctl graceful > /dev/null; \\\n        fi\n    endscript\n}\nEOF\n\n# For RHEL/CentOS\nsudo tee /etc/logrotate.d/httpd <<EOF\n/var/log/httpd/*log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    sharedscripts\n    postrotate\n        /bin/systemctl reload httpd.service > /dev/null 2>/dev/null || true\n    endscript\n}\nEOF\n```\n\n### Health Checks\n\n```bash\n#!/bin/bash\n# apache-health-check.sh\n\n# Check if Apache is running\nif ! pgrep apache2 > /dev/null && ! pgrep httpd > /dev/null; then\n    echo \"CRITICAL: Apache is not running\"\n    exit 2\nfi\n\n# Check if Apache responds to HTTP requests\nif ! curl -f -s http://localhost > /dev/null; then\n    echo \"CRITICAL: Apache not responding to HTTP requests\"\n    exit 2\nfi\n\n# Check configuration syntax\nif command -v apache2ctl &> /dev/null; then\n    if ! apache2ctl configtest &> /dev/null; then\n        echo \"WARNING: Apache configuration has syntax errors\"\n        exit 1\n    fi\nelif command -v httpd &> /dev/null; then\n    if ! httpd -t &> /dev/null; then\n        echo \"WARNING: Apache configuration has syntax errors\"\n        exit 1\n    fi\nfi\n\n# Check disk space for logs\nLOG_USAGE=$(df /var/log | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ \"$LOG_USAGE\" -gt 90 ]; then\n    echo \"WARNING: Log directory is ${LOG_USAGE}% full\"\n    exit 1\nfi\n\necho \"OK: Apache is healthy\"\nexit 0\n```\n\n### Cleanup Tasks\n\n```bash\n# Clean old log files\nfind /var/log/apache2 -name \"*.log.*\" -mtime +30 -delete  # Debian/Ubuntu\nfind /var/log/httpd -name \"*log.*\" -mtime +30 -delete     # RHEL/CentOS\n\n# Clean Apache cache\nrm -rf /var/cache/apache2/*\n\n# Clean temporary files\nfind /tmp -name \"apache*\" -mtime +7 -delete\n\n# Optimize log files (remove old entries)\nsudo journalctl --vacuum-time=30d\n```\n\n## Integration Examples\n\n### PHP Integration\n\n```bash\n# Install PHP\nsudo apt install php libapache2-mod-php  # Ubuntu/Debian\nsudo dnf install php php-cli              # RHEL/CentOS\n\n# Enable PHP module\nsudo a2enmod php8.1  # Ubuntu/Debian\n\n# Test PHP\necho \"<?php phpinfo(); ?>\" | sudo tee /var/www/html/info.php\n```\n\n### WordPress Integration\n\n```apache\n<VirtualHost *:443>\n    ServerName blog.example.com\n    DocumentRoot /var/www/wordpress\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/blog.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/blog.example.com/privkey.pem\n    \n    <Directory /var/www/wordpress>\n        AllowOverride All\n        Options -Indexes +FollowSymLinks\n        Require all granted\n    </Directory>\n    \n    # WordPress-specific rules\n    RewriteEngine On\n    RewriteRule ^/wp-admin/install.php$ - [F]\n    RewriteRule ^/wp-config-sample.php$ - [F]\n    \n    # Security for wp-config.php\n    <Files wp-config.php>\n        Require all denied\n    </Files>\n</VirtualHost>\n```\n\n### Python WSGI Integration\n\n```apache\n# Load WSGI module\nLoadModule wsgi_module modules/mod_wsgi.so\n\n<VirtualHost *:443>\n    ServerName app.example.com\n    DocumentRoot /var/www/python-app\n    \n    WSGIDaemonProcess app python-home=/var/www/python-app/venv python-path=/var/www/python-app\n    WSGIProcessGroup app\n    WSGIScriptAlias / /var/www/python-app/app.wsgi\n    \n    <Directory /var/www/python-app>\n        WSGIApplicationGroup %{GLOBAL}\n        Require all granted\n    </Directory>\n</VirtualHost>\n```\n\n### Node.js Proxy Integration\n\n```apache\n<VirtualHost *:443>\n    ServerName node.example.com\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:3000/\n    ProxyPassReverse / http://localhost:3000/\n    \n    # WebSocket support\n    ProxyPass /socket.io/ ws://localhost:3000/socket.io/\n    ProxyPassReverse /socket.io/ ws://localhost:3000/socket.io/\n    \n    # Static files served by Apache\n    Alias /static /var/www/node-app/public\n    <Directory /var/www/node-app/public>\n        Require all granted\n        ExpiresActive On\n        ExpiresDefault \"access plus 1 year\"\n    </Directory>\n</VirtualHost>\n```\n\n## Additional Resources\n\n- [Official Documentation](https://httpd.apache.org/docs/)\n- [GitHub Repository](https://github.com/apache/httpd)\n- [Security Guide](https://httpd.apache.org/docs/2.4/misc/security_tips.html)\n- [Performance Tuning](https://httpd.apache.org/docs/2.4/misc/perf-tuning.html)\n- [Apache Modules](https://httpd.apache.org/docs/2.4/mod/)\n- [Virtual Hosts Guide](https://httpd.apache.org/docs/2.4/vhosts/)\n- [SSL/TLS Guide](https://httpd.apache.org/docs/2.4/ssl/)\n- [Community Mailing Lists](https://httpd.apache.org/lists.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"apache-http-server-installation-guide\" class=\"mobile-header\">Apache HTTP Server Installation Guide</h1>\n<p class=\"mobile-paragraph\">Apache HTTP Server is a free and open-source cross-platform web server software developed and maintained by the Apache Software Foundation. Originally based on the NCSA HTTPd server, Apache has been the most popular web server on the Internet since April 1996, serving over 40% of active websites. It serves as a FOSS alternative to commercial web servers like Microsoft IIS, NGINX Plus, or F5 BIG-IP, offering enterprise-grade performance, security, and flexibility without licensing costs.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for production)</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum (2GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 500MB for installation (additional space for websites and logs)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for serving web requests</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 2.6.32+</li>\n<li class=\"mobile-list-item\">macOS: 10.12+ (Sierra or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (HTTP)</li>\n<li class=\"mobile-list-item\">Port 443 (HTTPS)</li>\n<li class=\"mobile-list-item\">Additional ports for virtual hosts if needed</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">OpenSSL for SSL/TLS support</li>\n<li class=\"mobile-list-item\">PCRE for regular expressions</li>\n<li class=\"mobile-list-item\">APR (Apache Portable Runtime) libraries</li>\n<li class=\"mobile-list-item\">Zlib for compression</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges for installation</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache (httpd) and utilities\nsudo dnf install -y httpd httpd-tools mod_ssl mod_security\n\n# RHEL/CentOS 7 (using yum)\nsudo yum install -y epel-release\nsudo yum install -y httpd httpd-tools mod_ssl mod_security\n\n# Install additional modules\nsudo dnf install -y httpd-devel httpd-manual\n\n# Create necessary directories\nsudo mkdir -p /etc/httpd/conf.d\nsudo mkdir -p /var/log/httpd\nsudo mkdir -p /var/www/html\n\n# Set proper permissions\nsudo chown -R apache:apache /var/www/html\nsudo chown -R apache:apache /var/log/httpd\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\nhttpd -v\nsudo systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Apache and essential modules\nsudo apt install -y apache2 apache2-utils apache2-dev libapache2-mod-security2\n\n# Install additional tools\nsudo apt install -y apache2-doc ssl-cert\n\n# Enable essential modules\nsudo a2enmod rewrite ssl headers deflate expires security2 http2\n\n# Create necessary directories\nsudo mkdir -p /var/www/html\nsudo mkdir -p /var/log/apache2\n\n# Set proper permissions\nsudo chown -R www-data:www-data /var/www/html\nsudo chown -R www-data:www-data /var/log/apache2\n\n# Enable and start service\nsudo systemctl enable --now apache2\n\n# Verify installation\napache2ctl -v\nsudo systemctl status apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\nsudo pacman -S apache\n\n# Install additional modules\nsudo pacman -S apache-mod-security apache-mod-wsgi\n\n# Create apache user if not exists\nsudo useradd -r -d /srv/http -s /sbin/nologin -c &quot;Apache HTTP Server&quot; apache\n\n# Create necessary directories\nsudo mkdir -p /etc/httpd/conf.d\nsudo mkdir -p /var/log/httpd\nsudo mkdir -p /srv/http\n\n# Set proper permissions\nsudo chown -R apache:apache /srv/http\nsudo chown -R apache:apache /var/log/httpd\n\n# Edit main configuration\nsudo sed -i &#039;s/#ServerName www.example.com:80/ServerName localhost:80/&#039; /etc/httpd/conf/httpd.conf\n\n# Enable and start service\nsudo systemctl enable --now httpd\n\n# Verify installation\nhttpd -v\nsudo systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\napk add --no-cache apache2 apache2-ssl apache2-utils\n\n# Install additional modules\napk add --no-cache apache2-mod-wsgi apache2-mod-fcgid\n\n# Create apache user if not exists\nadduser -D -H -s /sbin/nologin -g apache apache\n\n# Create necessary directories\nmkdir -p /var/www/localhost/htdocs\nmkdir -p /var/log/apache2\nmkdir -p /run/apache2\n\n# Set proper permissions\nchown -R apache:apache /var/www/localhost/htdocs\nchown -R apache:apache /var/log/apache2\nchown -R apache:apache /run/apache2\n\n# Configure basic settings\nsed -i &#039;s/#ServerName www.example.com:80/ServerName localhost:80/&#039; /etc/apache2/httpd.conf\n\n# Enable and start service\nrc-update add apache2 default\nrc-service apache2 start\n\n# Verify installation\nhttpd -v\nrc-service apache2 status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y apache2 apache2-mod_ssl apache2-utils\n\n# Install additional modules\nsudo zypper install -y apache2-mod_security2 apache2-mod_wsgi\n\n# SLES 15\n# Enable web and scripting module\nsudo SUSEConnect -p sle-module-web-scripting/15.5/x86_64\nsudo zypper install -y apache2 apache2-mod_ssl\n\n# Create necessary directories\nsudo mkdir -p /etc/apache2/conf.d\nsudo mkdir -p /var/log/apache2\nsudo mkdir -p /srv/www/htdocs\n\n# Set proper permissions\nsudo chown -R wwwrun:www /srv/www/htdocs\nsudo chown -R wwwrun:www /var/log/apache2\n\n# Enable modules\nsudo a2enmod ssl\nsudo a2enmod rewrite\nsudo a2enmod headers\n\n# Enable and start service\nsudo systemctl enable --now apache2\n\n# Verify installation\napache2ctl -v\nsudo systemctl status apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install httpd\n\n# Start as service\nbrew services start httpd\n\n# Or run manually\nsudo /usr/local/bin/httpd -D FOREGROUND\n\n# Configuration location: /usr/local/etc/httpd/httpd.conf\n# Alternative: /opt/homebrew/etc/httpd/httpd.conf (Apple Silicon)\n\n# Create necessary directories\nsudo mkdir -p /usr/local/var/log/httpd\nsudo mkdir -p /usr/local/var/www\n\n# Set basic configuration\nsed -i &#039;&#039; &#039;s/#ServerName www.example.com:8080/ServerName localhost:8080/&#039; /usr/local/etc/httpd/httpd.conf\n\n# Verify installation\n/usr/local/bin/httpd -v\nbrew services list | grep httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install apache24\n\n# Using ports\ncd /usr/ports/www/apache24\nmake install clean\n\n# Enable in rc.conf\necho &#039;apache24_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Create necessary directories\nmkdir -p /var/log/httpd\nmkdir -p /usr/local/www/apache24/data\n\n# Set proper permissions\nchown -R www:www /usr/local/www/apache24/data\nchown -R www:www /var/log/httpd\n\n# Start service\nservice apache24 start\n\n# Verify installation\n/usr/local/sbin/httpd -v\nservice apache24 status\n\n# Configuration location: /usr/local/etc/apache24/httpd.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Using Chocolatey\nchoco install apache-httpd\n\n# Method 2: Using Scoop\nscoop bucket add extras\nscoop install apache\n\n# Method 3: Manual installation from Apache Lounge\n# Download from https://www.apachelounge.com/download/\n# Extract to C:\\Apache24\n\n# Install as Windows service\nC:\\Apache24\\bin\\httpd.exe -k install -n Apache24\n\n# Start service\nStart-Service Apache24\n\n# Or using net command\nnet start Apache24\n\n# Configuration location: C:\\Apache24\\conf\\httpd.conf\n# Document root: C:\\Apache24\\htdocs\n\n# Verify installation\nC:\\Apache24\\bin\\httpd.exe -v\nGet-Service Apache24</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Create apache user</strong> (if not created by package):</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Linux systems\nsudo useradd -r -d /var/www -s /sbin/nologin -c &quot;Apache HTTP Server&quot; apache</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Default configuration locations</strong>:</p>\n<li class=\"mobile-list-item\">RHEL/CentOS/Rocky/AlmaLinux: <code class=\"mobile-inline-code\">/etc/httpd/conf/httpd.conf</code></li>\n<li class=\"mobile-list-item\">Debian/Ubuntu: <code class=\"mobile-inline-code\">/etc/apache2/apache2.conf</code></li>\n<li class=\"mobile-list-item\">Arch Linux: <code class=\"mobile-inline-code\">/etc/httpd/conf/httpd.conf</code></li>\n<li class=\"mobile-list-item\">Alpine Linux: <code class=\"mobile-inline-code\">/etc/apache2/httpd.conf</code></li>\n<li class=\"mobile-list-item\">openSUSE/SLES: <code class=\"mobile-inline-code\">/etc/apache2/httpd.conf</code></li>\n<li class=\"mobile-list-item\">macOS: <code class=\"mobile-inline-code\">/usr/local/etc/httpd/httpd.conf</code></li>\n<li class=\"mobile-list-item\">FreeBSD: <code class=\"mobile-inline-code\">/usr/local/etc/apache24/httpd.conf</code></li>\n<li class=\"mobile-list-item\">Windows: <code class=\"mobile-inline-code\">C:\\Apache24\\conf\\httpd.conf</code></li>\n<p class=\"mobile-paragraph\">3. <strong>Essential settings to change</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Basic security settings\nServerTokens Prod\nServerSignature Off\n\n# Set server name\nServerName localhost:80\n\n# Basic security modules\nLoadModule headers_module modules/mod_headers.so\nLoadModule rewrite_module modules/mod_rewrite.so\nLoadModule ssl_module modules/mod_ssl.so\n\n# Security headers\nHeader always set X-Frame-Options &quot;SAMEORIGIN&quot;\nHeader always set X-Content-Type-Options &quot;nosniff&quot;\nHeader always set X-XSS-Protection &quot;1; mode=block&quot;\n\n# Hide .htaccess files\n&lt;FilesMatch &quot;^\\.ht&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n# Disable directory browsing by default\nOptions -Indexes\n\n# Basic virtual host\n&lt;VirtualHost *:80&gt;\n    ServerName localhost\n    DocumentRoot /var/www/html\n    ErrorLog logs/error_log\n    CustomLog logs/access_log common\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test configuration syntax\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS/Arch\n\n# Check loaded modules\napache2ctl -M  # Debian/Ubuntu\nhttpd -M       # RHEL/CentOS/Arch\n\n# Test HTTP response\ncurl -I http://localhost\n\n# Check if Apache is listening\nsudo ss -tlnp | grep :80\nsudo netstat -tlnp | grep :80\n\n# View virtual host configuration\napache2ctl -S  # Debian/Ubuntu\nhttpd -S       # RHEL/CentOS/Arch</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Never expose Apache to the public internet without proper security hardening!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Apache to start on boot\nsudo systemctl enable apache2  # Debian/Ubuntu\nsudo systemctl enable httpd    # RHEL/CentOS/Arch\n\n# Start Apache\nsudo systemctl start apache2   # Debian/Ubuntu\nsudo systemctl start httpd     # RHEL/CentOS/Arch\n\n# Stop Apache\nsudo systemctl stop apache2    # Debian/Ubuntu\nsudo systemctl stop httpd      # RHEL/CentOS/Arch\n\n# Restart Apache\nsudo systemctl restart apache2 # Debian/Ubuntu\nsudo systemctl restart httpd   # RHEL/CentOS/Arch\n\n# Graceful reload (reload config without dropping connections)\nsudo systemctl reload apache2  # Debian/Ubuntu\nsudo systemctl reload httpd    # RHEL/CentOS/Arch\n\n# Check status\nsudo systemctl status apache2  # Debian/Ubuntu\nsudo systemctl status httpd    # RHEL/CentOS/Arch\n\n# View logs\nsudo journalctl -u apache2 -f  # Debian/Ubuntu\nsudo journalctl -u httpd -f    # RHEL/CentOS/Arch</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Apache to start on boot\nrc-update add apache2 default\n\n# Start Apache\nrc-service apache2 start\n\n# Stop Apache\nrc-service apache2 stop\n\n# Restart Apache\nrc-service apache2 restart\n\n# Graceful reload\nrc-service apache2 reload\n\n# Check status\nrc-service apache2 status\n\n# View logs\ntail -f /var/log/apache2/error.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;apache24_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Apache\nservice apache24 start\n\n# Stop Apache\nservice apache24 stop\n\n# Restart Apache\nservice apache24 restart\n\n# Graceful reload\nservice apache24 graceful\n\n# Check status\nservice apache24 status\n\n# View configuration test\nservice apache24 configtest</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start httpd\nbrew services stop httpd\nbrew services restart httpd\n\n# Check status\nbrew services list | grep httpd\n\n# Manual control\nsudo /usr/local/bin/httpd -k start\nsudo /usr/local/bin/httpd -k stop\nsudo /usr/local/bin/httpd -k restart\nsudo /usr/local/bin/httpd -k graceful\n\n# Test configuration\n/usr/local/bin/httpd -t</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start Apache service\nStart-Service Apache24\n# Or: net start Apache24\n\n# Stop Apache service\nStop-Service Apache24\n# Or: net stop Apache24\n\n# Restart Apache service\nRestart-Service Apache24\n\n# Check status\nGet-Service Apache24\n\n# Manual control\nC:\\Apache24\\bin\\httpd.exe -k start\nC:\\Apache24\\bin\\httpd.exe -k stop\nC:\\Apache24\\bin\\httpd.exe -k restart\n\n# Test configuration\nC:\\Apache24\\bin\\httpd.exe -t\n\n# View logs\nGet-Content C:\\Apache24\\logs\\error.log -Wait</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"virtual-hosts\" class=\"mobile-header\">Virtual Hosts</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/example.com.conf (Debian/Ubuntu)\n# /etc/httpd/conf.d/example.com.conf (RHEL/CentOS)\n\n&lt;VirtualHost *:80&gt;\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/example.com/public_html\n    \n    # Logging\n    ErrorLog ${APACHE_LOG_DIR}/example.com_error.log\n    CustomLog ${APACHE_LOG_DIR}/example.com_access.log combined\n    \n    # Security\n    &lt;Directory /var/www/example.com/public_html&gt;\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n        \n        # Hide sensitive files\n        &lt;Files ~ &quot;^\\.(htaccess|htpasswd|env)$&quot;&gt;\n            Require all denied\n        &lt;/Files&gt;\n    &lt;/Directory&gt;\n&lt;/VirtualHost&gt;\n\n# SSL Virtual Host\n&lt;VirtualHost *:443&gt;\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/example.com/public_html\n    \n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    # Modern SSL configuration\n    SSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n    SSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n    SSLHonorCipherOrder off\n    SSLSessionTickets off\n    \n    # Security headers\n    Header always set Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;\n    Header always set X-Frame-Options &quot;SAMEORIGIN&quot;\n    Header always set X-Content-Type-Options &quot;nosniff&quot;\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    \n    # Logging\n    ErrorLog ${APACHE_LOG_DIR}/example.com_ssl_error.log\n    CustomLog ${APACHE_LOG_DIR}/example.com_ssl_access.log combined\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-tuning\" class=\"mobile-header\">Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># MPM Event configuration (modern and efficient)\n&lt;IfModule mpm_event_module&gt;\n    StartServers             3\n    MinSpareThreads         75\n    MaxSpareThreads        250\n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    ThreadLimit             64\n&lt;/IfModule&gt;\n\n# Compression\n&lt;IfModule mod_deflate.c&gt;\n    SetOutputFilter DEFLATE\n    AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain\n    AddOutputFilterByType DEFLATE application/javascript application/xml+rss application/xml\n    AddOutputFilterByType DEFLATE application/json application/x-javascript\n    \n    # Don&#039;t compress images\n    SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|webp)$ no-gzip\n    SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip\n&lt;/IfModule&gt;\n\n# Caching\n&lt;IfModule mod_expires.c&gt;\n    ExpiresActive On\n    ExpiresByType image/jpg &quot;access plus 1 year&quot;\n    ExpiresByType image/jpeg &quot;access plus 1 year&quot;\n    ExpiresByType image/gif &quot;access plus 1 year&quot;\n    ExpiresByType image/png &quot;access plus 1 year&quot;\n    ExpiresByType image/webp &quot;access plus 1 year&quot;\n    ExpiresByType text/css &quot;access plus 1 month&quot;\n    ExpiresByType application/pdf &quot;access plus 1 month&quot;\n    ExpiresByType application/javascript &quot;access plus 1 month&quot;\n    ExpiresByType application/x-javascript &quot;access plus 1 month&quot;\n    ExpiresByType image/x-icon &quot;access plus 1 year&quot;\n    ExpiresDefault &quot;access plus 2 days&quot;\n&lt;/IfModule&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Security configuration\nServerTokens Prod\nServerSignature Off\n\n# Disable unnecessary HTTP methods\n&lt;LimitExcept GET POST HEAD&gt;\n    Require all denied\n&lt;/LimitExcept&gt;\n\n# Hide server information\nHeader always unset Server\nHeader unset X-Powered-By\n\n# Security headers\nHeader always set Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;\nHeader always set X-Frame-Options &quot;SAMEORIGIN&quot;\nHeader always set X-Content-Type-Options &quot;nosniff&quot;\nHeader always set X-XSS-Protection &quot;1; mode=block&quot;\nHeader always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n\n# Disable TRACE method\nTraceEnable off\n\n# Timeout settings\nTimeout 60\nKeepAliveTimeout 15\n\n# Request limits\nLimitRequestBody 10485760  # 10MB\nLimitRequestFields 100\nLimitRequestFieldSize 8190\nLimitRequestLine 4094\n\n# Hide sensitive files\n&lt;FilesMatch &quot;^\\.&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n&lt;FilesMatch &quot;\\.(bak|backup|swp|tmp|~)$&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n# Disable server-status and server-info\n&lt;Location &quot;/server-status&quot;&gt;\n    Require ip 127.0.0.1\n    Require ip ::1\n&lt;/Location&gt;\n\n&lt;Location &quot;/server-info&quot;&gt;\n    Require ip 127.0.0.1\n    Require ip ::1\n&lt;/Location&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-as-frontend-proxy\" class=\"mobile-header\">nginx as Frontend Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/apache-proxy\nupstream apache_backend {\n    server 127.0.0.1:8080;\n    keepalive 32;\n}\n\nserver {\n    listen 80;\n    server_name example.com www.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name example.com www.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://apache_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # Handle Apache redirects\n        proxy_redirect http://apache_backend https://$server_name;\n    }\n    \n    # Serve static files directly with nginx\n    location ~* \\.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {\n        try_files $uri @apache;\n        expires 1y;\n        add_header Cache-Control &quot;public, immutable&quot;;\n    }\n    \n    location @apache {\n        proxy_pass http://apache_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nglobal\n    maxconn 4096\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\nfrontend apache_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/example.com.pem\n    \n    # Redirect HTTP to HTTPS\n    redirect scheme https if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;\n    http-response set-header X-Frame-Options SAMEORIGIN\n    http-response set-header X-Content-Type-Options nosniff\n    \n    default_backend apache_servers\n\nbackend apache_servers\n    balance roundrobin\n    option httpchk GET / HTTP/1.1\\r\\nHost:\\ localhost\n    server apache1 127.0.0.1:8080 check\n    server apache2 127.0.0.1:8081 check backup</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-configuration\" class=\"mobile-header\">Caddy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"caddyfile\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddyfile</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddyfile\">example.com www.example.com {\n    reverse_proxy localhost:8080\n    \n    # Security headers\n    header {\n        Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;\n        X-Frame-Options &quot;SAMEORIGIN&quot;\n        X-Content-Type-Options &quot;nosniff&quot;\n        X-XSS-Protection &quot;1; mode=block&quot;\n    }\n    \n    # Compression\n    encode gzip\n    \n    # Logging\n    log {\n        output file /var/log/caddy/example.com.log\n        level INFO\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-as-reverse-proxy\" class=\"mobile-header\">Apache as Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Enable required modules\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\nLoadModule proxy_balancer_module modules/mod_proxy_balancer.so\n\n&lt;VirtualHost *:80&gt;\n    ServerName example.com\n    \n    # Proxy configuration\n    ProxyPreserveHost On\n    ProxyPass / http://backend-server:8080/\n    ProxyPassReverse / http://backend-server:8080/\n    \n    # Load balancing\n    ProxyPass /app/ balancer://mycluster/\n    ProxyPassReverse /app/ balancer://mycluster/\n    \n    &lt;Proxy balancer://mycluster&gt;\n        BalancerMember http://backend1:8080\n        BalancerMember http://backend2:8080\n        ProxySet hcmethod GET\n        ProxySet hcuri /health\n    &lt;/Proxy&gt;\n    \n    # Balancer manager\n    &lt;Location &quot;/balancer-manager&quot;&gt;\n        SetHandler balancer-manager\n        Require ip 127.0.0.1\n        Require ip ::1\n    &lt;/Location&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Load SSL module\nLoadModule ssl_module modules/mod_ssl.so\n\n# Global SSL configuration\nSSLEngine on\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\nSSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\nSSLHonorCipherOrder off\nSSLSessionCache shmcb:/var/run/ssl_scache(512000)\nSSLSessionCacheTimeout 300\nSSLUseStapling On\nSSLStaplingCache shmcb:/var/run/ocsp(128000)\nSSLCompression off\nSSLSessionTickets off\n\n# Generate DH parameters\n# openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem</code></pre>\n      </div>\n    </div>\n<h3 id=\"modsecurity-waf\" class=\"mobile-header\">ModSecurity WAF</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install ModSecurity\n# Ubuntu/Debian\nsudo apt install libapache2-mod-security2\n\n# RHEL/CentOS\nsudo dnf install mod_security\n\n# Enable module\nsudo a2enmod security2  # Ubuntu/Debian\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/modsecurity\ncd /etc/modsecurity\nsudo wget https://github.com/coreruleset/coreruleset/archive/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 crs\nsudo cp crs/crs-setup.conf.example crs/crs-setup.conf</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># ModSecurity configuration\n&lt;IfModule mod_security2.c&gt;\n    SecRuleEngine On\n    SecRequestBodyAccess On\n    SecRequestBodyLimit 13107200\n    SecRequestBodyNoFilesLimit 131072\n    SecRequestBodyInMemoryLimit 131072\n    SecRequestBodyLimitAction Reject\n    SecResponseBodyAccess Off\n    SecDebugLog /var/log/apache2/modsec_debug.log\n    SecDebugLogLevel 0\n    SecAuditEngine RelevantOnly\n    SecAuditLogRelevantStatus &quot;^(?:5|4(?!04))&quot;\n    SecAuditLogParts ABDEFHIJZ\n    SecAuditLogType Serial\n    SecAuditLog /var/log/apache2/modsec_audit.log\n    \n    # Include OWASP Core Rule Set\n    Include /etc/modsecurity/crs/crs-setup.conf\n    Include /etc/modsecurity/crs/rules/*.conf\n&lt;/IfModule&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow &#039;Apache Full&#039;    # HTTP and HTTPS\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw enable\n\n# firewalld (RHEL/CentOS/openSUSE)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on $ext_if proto tcp from any to any port {80, 443}\n\n# Windows Firewall\nNew-NetFirewallRule -DisplayName &quot;Apache HTTP&quot; -Direction Inbound -Protocol TCP -LocalPort 80 -Action Allow\nNew-NetFirewallRule -DisplayName &quot;Apache HTTPS&quot; -Direction Inbound -Protocol TCP -LocalPort 443 -Action Allow</code></pre>\n      </div>\n    </div>\n<h3 id=\"access-control\" class=\"mobile-header\">Access Control</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># IP-based access control\n&lt;Directory &quot;/var/www/admin&quot;&gt;\n    Require ip 192.168.1.0/24\n    Require ip 127.0.0.1\n    Require ip ::1\n&lt;/Directory&gt;\n\n# Password protection\n&lt;Directory &quot;/var/www/private&quot;&gt;\n    AuthType Basic\n    AuthName &quot;Restricted Area&quot;\n    AuthUserFile /etc/apache2/.htpasswd\n    Require valid-user\n&lt;/Directory&gt;\n\n# Create password file\n# htpasswd -c /etc/apache2/.htpasswd username\n\n# Client certificate authentication\n&lt;Directory &quot;/var/www/secure&quot;&gt;\n    SSLRequireSSL\n    SSLVerifyClient require\n    SSLVerifyDepth 1\n    SSLCACertificateFile /etc/ssl/certs/ca.crt\n&lt;/Directory&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">Apache HTTP Server doesn't require a database, but it commonly integrates with databases through various modules and applications:</p>\n<h3 id=\"php-database-integration\" class=\"mobile-header\">PHP Database Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># PHP module configuration\nLoadModule php_module modules/libphp.so\n\n&lt;IfModule mod_php.c&gt;\n    AddType application/x-httpd-php .php\n    php_admin_flag allow_url_include Off\n    php_admin_flag allow_url_fopen Off\n    php_admin_value upload_max_filesize 64M\n    php_admin_value post_max_size 64M\n    php_admin_value memory_limit 256M\n    php_admin_value max_execution_time 300\n    php_admin_flag expose_php Off\n&lt;/IfModule&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-connection-examples\" class=\"mobile-header\">Database Connection Examples</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Environment variables for database connections\nSetEnv DB_HOST localhost\nSetEnv DB_NAME myapp\nSetEnv DB_USER webapp\nSetEnv DB_PASS secretpassword\n\n# Secure environment variables from external access\n&lt;Location &quot;/server-status&quot;&gt;\n    SetHandler server-status\n    Require local\n&lt;/Location&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"cgi-database-applications\" class=\"mobile-header\">CGI Database Applications</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Enable CGI for database applications\nLoadModule cgi_module modules/mod_cgi.so\n\n&lt;Directory &quot;/var/www/cgi-bin&quot;&gt;\n    AllowOverride None\n    Options +ExecCGI\n    AddHandler cgi-script .cgi .pl .py\n    Require all granted\n&lt;/Directory&gt;\n\n# Python WSGI for database applications\nLoadModule wsgi_module modules/mod_wsgi.so\n\nWSGIDaemonProcess myapp python-home=/path/to/venv python-path=/path/to/app\nWSGIProcessGroup myapp\nWSGIScriptAlias / /path/to/app/app.wsgi</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-level-tuning\" class=\"mobile-header\">System-level Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase system limits for Apache\nsudo tee -a /etc/security/limits.conf &lt;&lt;EOF\napache soft nofile 65535\napache hard nofile 65535\nwww-data soft nofile 65535\nwww-data hard nofile 65535\nEOF\n\n# Kernel optimization for web servers\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Apache optimization\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\n\n# Memory management\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-performance-settings\" class=\"mobile-header\">Apache Performance Settings</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Optimized MPM Event configuration\n&lt;IfModule mpm_event_module&gt;\n    StartServers             4\n    MinSpareThreads         25\n    MaxSpareThreads        75 \n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    ThreadLimit             64\n    ServerLimit             16\n    AsyncRequestWorkerFactor 2\n&lt;/IfModule&gt;\n\n# Connection settings\nKeepAlive On\nKeepAliveTimeout 15\nMaxKeepAliveRequests 100\n\n# Timeout settings\nTimeout 60\nLimitRequestLine 4094\nLimitRequestFieldSize 8190\nLimitRequestFields 100\nLimitRequestBody 10485760\n\n# Buffer settings\nEnableSendfile On\nEnableMMAP On</code></pre>\n      </div>\n    </div>\n<h3 id=\"caching-configuration\" class=\"mobile-header\">Caching Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Enable caching modules\nLoadModule cache_module modules/mod_cache.so\nLoadModule cache_disk_module modules/mod_cache_disk.so\n\n# Disk cache configuration\n&lt;IfModule mod_cache_disk.c&gt;\n    CacheRoot /var/cache/apache2\n    CacheDirLevels 2\n    CacheDirLength 1\n    CacheEnable disk /\n    CacheIgnoreHeaders Set-Cookie\n    CacheDefaultExpire 3600\n    CacheMaxExpire 86400\n    CacheLastModifiedFactor 0.1\n    CacheHeader on\n&lt;/IfModule&gt;\n\n# Memory cache (alternative to disk cache)\nLoadModule cache_socache_module modules/mod_cache_socache.so\n\n&lt;IfModule mod_cache_socache.c&gt;\n    CacheEnable socache /\n    CacheSocache shmcb\n    CacheSocacheMaxSize 102400\n&lt;/IfModule&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"content-optimization\" class=\"mobile-header\">Content Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Compression\n&lt;IfModule mod_deflate.c&gt;\n    SetOutputFilter DEFLATE\n    AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain\n    AddOutputFilterByType DEFLATE application/javascript application/xml+rss application/xml\n    AddOutputFilterByType DEFLATE application/json application/x-javascript application/xhtml+xml\n    \n    # Don&#039;t compress images or binaries\n    SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png|webp|pdf|zip|rar|exe)$ no-gzip\n    \n    # Compression level (1-9, 6 is good balance)\n    DeflateCompressionLevel 6\n&lt;/IfModule&gt;\n\n# Static file caching\n&lt;IfModule mod_expires.c&gt;\n    ExpiresActive On\n    \n    # Images\n    ExpiresByType image/jpg &quot;access plus 1 year&quot;\n    ExpiresByType image/jpeg &quot;access plus 1 year&quot;\n    ExpiresByType image/gif &quot;access plus 1 year&quot;\n    ExpiresByType image/png &quot;access plus 1 year&quot;\n    ExpiresByType image/webp &quot;access plus 1 year&quot;\n    ExpiresByType image/svg+xml &quot;access plus 1 year&quot;\n    \n    # CSS and JavaScript\n    ExpiresByType text/css &quot;access plus 1 month&quot;\n    ExpiresByType application/javascript &quot;access plus 1 month&quot;\n    ExpiresByType application/x-javascript &quot;access plus 1 month&quot;\n    \n    # Fonts\n    ExpiresByType font/woff &quot;access plus 1 year&quot;\n    ExpiresByType font/woff2 &quot;access plus 1 year&quot;\n    ExpiresByType application/font-woff &quot;access plus 1 year&quot;\n    ExpiresByType application/font-woff2 &quot;access plus 1 year&quot;\n    \n    # Icons\n    ExpiresByType image/x-icon &quot;access plus 1 year&quot;\n    ExpiresByType image/vnd.microsoft.icon &quot;access plus 1 year&quot;\n    \n    # HTML\n    ExpiresByType text/html &quot;access plus 300 seconds&quot;\n    \n    # Default\n    ExpiresDefault &quot;access plus 1 day&quot;\n&lt;/IfModule&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Enable server-status module\nLoadModule status_module modules/mod_status.so\n\n&lt;Location &quot;/server-status&quot;&gt;\n    SetHandler server-status\n    Require ip 127.0.0.1\n    Require ip ::1\n&lt;/Location&gt;\n\n&lt;Location &quot;/server-info&quot;&gt;\n    SetHandler server-info\n    Require ip 127.0.0.1\n    Require ip ::1\n&lt;/Location&gt;\n\n# Extended status\nExtendedStatus On</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-analysis\" class=\"mobile-header\">Log Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Apache access logs\ntail -f /var/log/apache2/access.log  # Debian/Ubuntu\ntail -f /var/log/httpd/access_log    # RHEL/CentOS\n\n# Monitor error logs\ntail -f /var/log/apache2/error.log   # Debian/Ubuntu\ntail -f /var/log/httpd/error_log     # RHEL/CentOS\n\n# Analyze top IPs\nawk &#039;{print $1}&#039; /var/log/apache2/access.log | sort | uniq -c | sort -rn | head -10\n\n# Analyze response codes\nawk &#039;{print $9}&#039; /var/log/apache2/access.log | sort | uniq -c | sort -rn\n\n# Analyze most requested files\nawk &#039;{print $7}&#039; /var/log/apache2/access.log | sort | uniq -c | sort -rn | head -10\n\n# Check for errors\ngrep &quot;error&quot; /var/log/apache2/error.log | tail -10</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-monitoring-tools\" class=\"mobile-header\">External Monitoring Tools</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install monitoring tools\n# GoAccess for real-time log analysis\nsudo apt install goaccess  # Ubuntu/Debian\nsudo dnf install goaccess  # RHEL/CentOS\n\n# Real-time analysis\ngoaccess /var/log/apache2/access.log -c\n\n# Generate HTML report\ngoaccess /var/log/apache2/access.log -o /var/www/html/stats.html --log-format=COMBINED --real-time-html\n\n# Install htop for process monitoring\nsudo apt install htop\nhtop -p $(pgrep apache2 | head -5 | tr &#039;\\n&#039; &#039;,&#039; | sed &#039;s/,$//&#039;)</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-monitoring\" class=\"mobile-header\">Performance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Apache processes\nps aux | grep apache2 | grep -v grep\n\n# Monitor memory usage\nps aux --sort=-%mem | grep apache2 | head -10\n\n# Monitor connection counts\nss -tan | grep :80 | wc -l\nss -tan | grep :443 | wc -l\n\n# Check server-status (if enabled)\ncurl http://localhost/server-status\ncurl http://localhost/server-status?auto  # Machine readable\n\n# Monitor file descriptors\nlsof -u apache2 | wc -l  # Ubuntu/Debian\nlsof -u apache | wc -l   # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"configuration-backup\" class=\"mobile-header\">Configuration Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-apache-config.sh\n\nBACKUP_DIR=&quot;/backup/apache/$(date +%Y%m%d_%H%M%S)&quot;\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Detect Apache configuration directory\nif [ -d /etc/apache2 ]; then\n    # Debian/Ubuntu\n    CONFIG_DIR=&quot;/etc/apache2&quot;\n    LOG_DIR=&quot;/var/log/apache2&quot;\n    WEB_DIR=&quot;/var/www&quot;\nelif [ -d /etc/httpd ]; then\n    # RHEL/CentOS\n    CONFIG_DIR=&quot;/etc/httpd&quot;\n    LOG_DIR=&quot;/var/log/httpd&quot;\n    WEB_DIR=&quot;/var/www&quot;\nfi\n\n# Backup Apache configuration\ntar czf &quot;$BACKUP_DIR/apache-config.tar.gz&quot; -C / &quot;${CONFIG_DIR#/}&quot;\n\n# Backup website files\ntar czf &quot;$BACKUP_DIR/apache-sites.tar.gz&quot; -C &quot;$WEB_DIR&quot; .\n\n# Backup SSL certificates\nif [ -d /etc/letsencrypt ]; then\n    tar czf &quot;$BACKUP_DIR/ssl-certs.tar.gz&quot; -C /etc letsencrypt\nfi\n\n# Backup recent logs (last 7 days)\nfind &quot;$LOG_DIR&quot; -name &quot;*.log&quot; -mtime -7 -exec tar czf &quot;$BACKUP_DIR/apache-logs.tar.gz&quot; {} +\n\n# Package version info\nif command -v apache2ctl &amp;&gt; /dev/null; then\n    apache2ctl -v &gt; &quot;$BACKUP_DIR/version.txt&quot;\nelif command -v httpd &amp;&gt; /dev/null; then\n    httpd -v &gt; &quot;$BACKUP_DIR/version.txt&quot;\nfi\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"website-backup\" class=\"mobile-header\">Website Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-websites.sh\n\nBACKUP_DIR=&quot;/backup/websites/$(date +%Y%m%d_%H%M%S)&quot;\nWEB_ROOT=&quot;/var/www/html&quot;\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Backup all websites\nfor site in &quot;$WEB_ROOT&quot;/*; do\n    if [ -d &quot;$site&quot; ]; then\n        site_name=$(basename &quot;$site&quot;)\n        echo &quot;Backing up $site_name...&quot;\n        tar czf &quot;$BACKUP_DIR/${site_name}.tar.gz&quot; -C &quot;$WEB_ROOT&quot; &quot;$site_name&quot;\n    fi\ndone\n\n# Backup databases (if applicable)\nif command -v mysqldump &amp;&gt; /dev/null; then\n    for db in $(mysql -e &quot;SHOW DATABASES;&quot; | grep -v -E &quot;^(Database|information_schema|performance_schema|mysql|sys)$&quot;); do\n        mysqldump &quot;$db&quot; | gzip &gt; &quot;$BACKUP_DIR/${db}.sql.gz&quot;\n    done\nfi\n\n# Keep only last 30 days of backups\nfind /backup/websites -type d -mtime +30 -exec rm -rf {} + 2&gt;/dev/null\n\necho &quot;Website backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# restore-apache.sh\n\nBACKUP_DIR=&quot;$1&quot;\nif [ -z &quot;$BACKUP_DIR&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-directory&gt;&quot;\n    exit 1\nfi\n\n# Stop Apache\nif command -v systemctl &amp;&gt; /dev/null; then\n    sudo systemctl stop apache2 || sudo systemctl stop httpd\nelif command -v service &amp;&gt; /dev/null; then\n    sudo service apache2 stop || sudo service httpd stop\nfi\n\n# Restore configuration\nif [ -f &quot;$BACKUP_DIR/apache-config.tar.gz&quot; ]; then\n    sudo tar xzf &quot;$BACKUP_DIR/apache-config.tar.gz&quot; -C /\n    echo &quot;Configuration restored&quot;\nfi\n\n# Restore websites\nif [ -f &quot;$BACKUP_DIR/apache-sites.tar.gz&quot; ]; then\n    sudo tar xzf &quot;$BACKUP_DIR/apache-sites.tar.gz&quot; -C /var/www\n    echo &quot;Websites restored&quot;\nfi\n\n# Restore SSL certificates\nif [ -f &quot;$BACKUP_DIR/ssl-certs.tar.gz&quot; ]; then\n    sudo tar xzf &quot;$BACKUP_DIR/ssl-certs.tar.gz&quot; -C /etc\n    echo &quot;SSL certificates restored&quot;\nfi\n\n# Test configuration\nif command -v apache2ctl &amp;&gt; /dev/null; then\n    sudo apache2ctl configtest\n    if [ $? -eq 0 ]; then\n        sudo systemctl start apache2\n    fi\nelif command -v httpd &amp;&gt; /dev/null; then\n    sudo httpd -t\n    if [ $? -eq 0 ]; then\n        sudo systemctl start httpd\n    fi\nfi\n\necho &quot;Restore completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"automated-backup\" class=\"mobile-header\">Automated Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create cron job for daily backups\nsudo tee /etc/cron.d/apache-backup &lt;&lt;EOF\n# Apache daily backup\n0 2 * * * root /usr/local/bin/backup-apache-config.sh\n0 3 * * * root /usr/local/bin/backup-websites.sh\nEOF\n\n# Make scripts executable\nsudo chmod +x /usr/local/bin/backup-apache-config.sh\nsudo chmod +x /usr/local/bin/backup-websites.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Apache won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check configuration syntax\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS\n\n# Check error logs\nsudo tail -20 /var/log/apache2/error.log  # Debian/Ubuntu\nsudo tail -20 /var/log/httpd/error_log    # RHEL/CentOS\n\n# Check port conflicts\nsudo ss -tlnp | grep :80\nsudo lsof -i :80\n\n# Check permissions\nls -la /var/www/html\nps aux | grep apache2</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Permission denied errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Fix ownership\nsudo chown -R www-data:www-data /var/www/html  # Debian/Ubuntu\nsudo chown -R apache:apache /var/www/html      # RHEL/CentOS\n\n# Fix permissions\nsudo find /var/www/html -type d -exec chmod 755 {} \\;\nsudo find /var/www/html -type f -exec chmod 644 {} \\;\n\n# Check SELinux (RHEL/CentOS)\ngetenforce\nsudo setsebool -P httpd_can_network_connect 1\nsudo restorecon -Rv /var/www/html</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Virtual host not working</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check virtual host configuration\napache2ctl -S  # Debian/Ubuntu\nhttpd -S       # RHEL/CentOS\n\n# Enable virtual host (Debian/Ubuntu)\nsudo a2ensite example.com.conf\nsudo systemctl reload apache2\n\n# Test virtual host\ncurl -H &quot;Host: example.com&quot; http://localhost/</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>SSL certificate issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check certificate files\nsudo openssl x509 -in /etc/ssl/certs/example.com.crt -text -noout\n\n# Test SSL configuration\necho | openssl s_client -servername example.com -connect example.com:443\n\n# Check SSL module\napache2ctl -M | grep ssl  # Debian/Ubuntu\nhttpd -M | grep ssl       # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Enable debug logging\nLogLevel debug\n\n# Module-specific debug\nLogLevel ssl:debug\nLogLevel rewrite:debug\n\n# Custom debug log format\nLogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b \\&quot;%{Referer}i\\&quot; \\&quot;%{User-agent}i\\&quot; %D&quot; debug\nCustomLog /var/log/apache2/debug.log debug</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-issues\" class=\"mobile-header\">Performance Issues</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Apache processes\ntop -p $(pgrep apache2 | head -5 | tr &#039;\\n&#039; &#039;,&#039; | sed &#039;s/,$//&#039;)\n\n# Check memory usage\nps aux --sort=-%mem | grep apache2\n\n# Monitor connections\nwatch &#039;ss -tan | grep :80 | wc -l&#039;\n\n# Check slow queries (if applicable)\ngrep &quot;taking too long&quot; /var/log/apache2/error.log\n\n# Analyze configuration\napache2ctl -t -D DUMP_VHOSTS\napache2ctl -t -D DUMP_MODULES</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf check-update httpd\nsudo dnf update httpd httpd-tools mod_ssl\n\n# Debian/Ubuntu\nsudo apt update\nsudo apt upgrade apache2 apache2-utils libapache2-mod-ssl\n\n# Arch Linux\nsudo pacman -Syu apache\n\n# Alpine Linux\napk update\napk upgrade apache2\n\n# openSUSE\nsudo zypper update apache2\n\n# FreeBSD\npkg update\npkg upgrade apache24\n\n# macOS\nbrew upgrade httpd\n\n# Always test configuration after update\nsudo apache2ctl configtest  # Debian/Ubuntu\nsudo httpd -t               # RHEL/CentOS\n\n# Graceful restart to apply updates\nsudo systemctl reload apache2  # Debian/Ubuntu\nsudo systemctl reload httpd    # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-rotation\" class=\"mobile-header\">Log Rotation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation for Apache\nsudo tee /etc/logrotate.d/apache2 &lt;&lt;EOF\n/var/log/apache2/*.log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    create 640 root adm\n    sharedscripts\n    postrotate\n        if /bin/pidof apache2 &gt; /dev/null ; then \\\n            /usr/sbin/apache2ctl graceful &gt; /dev/null; \\\n        fi\n    endscript\n}\nEOF\n\n# For RHEL/CentOS\nsudo tee /etc/logrotate.d/httpd &lt;&lt;EOF\n/var/log/httpd/*log {\n    daily\n    missingok\n    rotate 14\n    compress\n    delaycompress\n    notifempty\n    sharedscripts\n    postrotate\n        /bin/systemctl reload httpd.service &gt; /dev/null 2&gt;/dev/null || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# apache-health-check.sh\n\n# Check if Apache is running\nif ! pgrep apache2 &gt; /dev/null &amp;&amp; ! pgrep httpd &gt; /dev/null; then\n    echo &quot;CRITICAL: Apache is not running&quot;\n    exit 2\nfi\n\n# Check if Apache responds to HTTP requests\nif ! curl -f -s http://localhost &gt; /dev/null; then\n    echo &quot;CRITICAL: Apache not responding to HTTP requests&quot;\n    exit 2\nfi\n\n# Check configuration syntax\nif command -v apache2ctl &amp;&gt; /dev/null; then\n    if ! apache2ctl configtest &amp;&gt; /dev/null; then\n        echo &quot;WARNING: Apache configuration has syntax errors&quot;\n        exit 1\n    fi\nelif command -v httpd &amp;&gt; /dev/null; then\n    if ! httpd -t &amp;&gt; /dev/null; then\n        echo &quot;WARNING: Apache configuration has syntax errors&quot;\n        exit 1\n    fi\nfi\n\n# Check disk space for logs\nLOG_USAGE=$(df /var/log | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ &quot;$LOG_USAGE&quot; -gt 90 ]; then\n    echo &quot;WARNING: Log directory is ${LOG_USAGE}% full&quot;\n    exit 1\nfi\n\necho &quot;OK: Apache is healthy&quot;\nexit 0</code></pre>\n      </div>\n    </div>\n<h3 id=\"cleanup-tasks\" class=\"mobile-header\">Cleanup Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean old log files\nfind /var/log/apache2 -name &quot;*.log.*&quot; -mtime +30 -delete  # Debian/Ubuntu\nfind /var/log/httpd -name &quot;*log.*&quot; -mtime +30 -delete     # RHEL/CentOS\n\n# Clean Apache cache\nrm -rf /var/cache/apache2/*\n\n# Clean temporary files\nfind /tmp -name &quot;apache*&quot; -mtime +7 -delete\n\n# Optimize log files (remove old entries)\nsudo journalctl --vacuum-time=30d</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"php-integration\" class=\"mobile-header\">PHP Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PHP\nsudo apt install php libapache2-mod-php  # Ubuntu/Debian\nsudo dnf install php php-cli              # RHEL/CentOS\n\n# Enable PHP module\nsudo a2enmod php8.1  # Ubuntu/Debian\n\n# Test PHP\necho &quot;&lt;?php phpinfo(); ?&gt;&quot; | sudo tee /var/www/html/info.php</code></pre>\n      </div>\n    </div>\n<h3 id=\"wordpress-integration\" class=\"mobile-header\">WordPress Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:443&gt;\n    ServerName blog.example.com\n    DocumentRoot /var/www/wordpress\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/blog.example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/blog.example.com/privkey.pem\n    \n    &lt;Directory /var/www/wordpress&gt;\n        AllowOverride All\n        Options -Indexes +FollowSymLinks\n        Require all granted\n    &lt;/Directory&gt;\n    \n    # WordPress-specific rules\n    RewriteEngine On\n    RewriteRule ^/wp-admin/install.php$ - [F]\n    RewriteRule ^/wp-config-sample.php$ - [F]\n    \n    # Security for wp-config.php\n    &lt;Files wp-config.php&gt;\n        Require all denied\n    &lt;/Files&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"python-wsgi-integration\" class=\"mobile-header\">Python WSGI Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># Load WSGI module\nLoadModule wsgi_module modules/mod_wsgi.so\n\n&lt;VirtualHost *:443&gt;\n    ServerName app.example.com\n    DocumentRoot /var/www/python-app\n    \n    WSGIDaemonProcess app python-home=/var/www/python-app/venv python-path=/var/www/python-app\n    WSGIProcessGroup app\n    WSGIScriptAlias / /var/www/python-app/app.wsgi\n    \n    &lt;Directory /var/www/python-app&gt;\n        WSGIApplicationGroup %{GLOBAL}\n        Require all granted\n    &lt;/Directory&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-proxy-integration\" class=\"mobile-header\">Node.js Proxy Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:443&gt;\n    ServerName node.example.com\n    \n    ProxyPreserveHost On\n    ProxyPass / http://localhost:3000/\n    ProxyPassReverse / http://localhost:3000/\n    \n    # WebSocket support\n    ProxyPass /socket.io/ ws://localhost:3000/socket.io/\n    ProxyPassReverse /socket.io/ ws://localhost:3000/socket.io/\n    \n    # Static files served by Apache\n    Alias /static /var/www/node-app/public\n    &lt;Directory /var/www/node-app/public&gt;\n        Require all granted\n        ExpiresActive On\n        ExpiresDefault &quot;access plus 1 year&quot;\n    &lt;/Directory&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/apache/httpd\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/2.4/misc/security_tips.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/2.4/misc/perf-tuning.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/2.4/mod/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Apache Modules</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/2.4/vhosts/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Virtual Hosts Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/docs/2.4/ssl/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">SSL/TLS Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://httpd.apache.org/lists.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Mailing Lists</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"24 min","wordCount":4766,"lastBuilt":"2025-09-15T06:16:23.286Z"},"category":{"key":"web-server","name":"Web Servers","description":"High-performance web servers and reverse proxies","icon":"🌐","color":"#50fa7b","keywords":["nginx","apache","haproxy","traefik","caddy"]},"relatedGuides":[{"name":"apache-kafka","displayName":"Apache Kafka","slug":"apache-kafka","description":"Repo for apache-kafka","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/apache-kafka","updatedAt":"2025-09-08T03:05:12Z","createdAt":"2025-09-08T03:05:01Z","readmeRaw":"## 👋 Welcome to apache-kafka 🚀  \n\napache-kafka README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-apache-kafka\" class=\"mobile-header\">👋 Welcome to apache-kafka 🚀  </h2>\n<p class=\"mobile-paragraph\">apache-kafka README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-15T06:16:38.945Z"},{"name":"caddy","displayName":"Caddy","slug":"caddy","description":"Repo for caddy","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/caddy","updatedAt":"2025-09-08T03:05:30Z","createdAt":"2025-09-08T03:05:19Z","readmeRaw":"## 👋 Welcome to caddy 🚀  \n\ncaddy README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-caddy\" class=\"mobile-header\">👋 Welcome to caddy 🚀  </h2>\n<p class=\"mobile-paragraph\">caddy README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-15T06:16:38.671Z"},{"name":"haproxy","displayName":"Haproxy","slug":"haproxy","description":"Repo for haproxy","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/haproxy","updatedAt":"2025-09-14T01:30:06Z","createdAt":"2025-09-08T03:08:23Z","readmeRaw":"# HAProxy Installation Guide\n\nHigh-performance TCP/HTTP load balancer and reverse proxy for distributing traffic across multiple backend servers. Industry standard for load balancing with enterprise-grade security and reliability.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 2GB RAM minimum, 4GB+ recommended for high-traffic environments\n- Multiple backend servers to load balance (optional for testing)\n- SSL certificates for production HTTPS termination\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt-get update\n\n# Install HAProxy and utilities\nsudo apt-get install -y haproxy haproxy-doc software-properties-common\n\n# For latest version from PPA\nsudo add-apt-repository ppa:vbernat/haproxy-2.8\nsudo apt-get update\nsudo apt-get install -y haproxy=2.8.*\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install HAProxy\nsudo yum install -y haproxy\n\n# For newer versions\nsudo dnf install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy\n```\n\n#### Fedora\n```bash\n# Install HAProxy\nsudo dnf install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-port=8404/tcp  # Stats interface\nsudo firewall-cmd --reload\n```\n\n#### Arch Linux\n```bash\n# Install HAProxy\nsudo pacman -Syu haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy\n```\n\n#### Alpine Linux\n```bash\n# Install HAProxy\nsudo apk update\nsudo apk add haproxy\n\n# Enable and start HAProxy\nsudo rc-update add haproxy default\nsudo service haproxy start\n```\n\n### From Source (Latest Features)\n```bash\n# Install build dependencies\n# Ubuntu/Debian\nsudo apt-get install -y build-essential libssl-dev libpcre3-dev zlib1g-dev liblua5.3-dev libsystemd-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y \"Development Tools\"\nsudo yum install -y openssl-devel pcre-devel zlib-devel lua-devel systemd-devel\n\n# Download latest HAProxy LTS\nHAPROXY_VERSION=\"3.0.5\"\ncd /tmp\nwget \"https://www.haproxy.org/download/3.0/src/haproxy-${HAPROXY_VERSION}.tar.gz\"\ntar xzf haproxy-${HAPROXY_VERSION}.tar.gz\ncd haproxy-${HAPROXY_VERSION}\n\n# Compile with full features\nmake clean\nmake -j$(nproc) TARGET=linux-glibc \\\n    USE_OPENSSL=1 \\\n    USE_ZLIB=1 \\\n    USE_PCRE=1 \\\n    USE_SYSTEMD=1 \\\n    USE_LUA=1 \\\n    USE_PROMEX=1 \\\n    USE_THREAD=1 \\\n    USE_CPU_AFFINITY=1 \\\n    USE_TFO=1 \\\n    USE_NS=1 \\\n    USE_DL=1 \\\n    USE_RT=1\n\n# Install HAProxy\nsudo make install\nsudo mkdir -p /etc/haproxy /var/lib/haproxy /var/log/haproxy\nsudo useradd --system --home /var/lib/haproxy --shell /bin/false haproxy\nsudo chown -R haproxy:haproxy /var/lib/haproxy /var/log/haproxy\n\n# Create systemd service\nsudo tee /etc/systemd/system/haproxy.service > /dev/null <<EOF\n[Unit]\nDescription=HAProxy Load Balancer\nDocumentation=man:haproxy(1)\nDocumentation=file:/usr/share/doc/haproxy/configuration.txt\nAfter=network.target\n\n[Service]\nType=notify\nExecStart=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock\nExecReload=/bin/kill -USR2 \\$MAINPID\nExecStop=/bin/kill -USR1 \\$MAINPID\nKillMode=mixed\nRestart=on-failure\nSuccessExitStatus=143\nKillSignal=SIGTERM\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/lib/haproxy\nReadWritePaths=/var/log/haproxy\nReadWritePaths=/run\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy\n```\n\n### Using Docker\n```bash\n# Create HAProxy configuration directory\nmkdir -p ~/haproxy/{config,ssl,logs}\n\n# Create basic configuration\ncat > ~/haproxy/config/haproxy.cfg <<EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n    \n    # SSL configuration\n    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n    ssl-default-server-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS\n    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor\n    option http-server-close\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    timeout http-keep-alive 4000\n    timeout check 3000\n\n# Frontend\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /usr/local/etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # Redirect HTTP to HTTPS\n    redirect scheme https code 301 if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n    http-response set-header X-Frame-Options \"SAMEORIGIN\"\n    http-response set-header X-Content-Type-Options \"nosniff\"\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    \n    default_backend web_servers\n\n# Backend\nbackend web_servers\n    balance roundrobin\n    option httpchk GET /health\n    http-check expect status 200\n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\n\n# Stats interface\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if TRUE\nEOF\n\n# Run HAProxy container\ndocker run -d \\\n  --name haproxy \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -p 8404:8404 \\\n  -v ~/haproxy/config:/usr/local/etc/haproxy:ro \\\n  -v ~/haproxy/ssl:/usr/local/etc/haproxy/ssl:ro \\\n  -v ~/haproxy/logs:/var/log/haproxy \\\n  haproxy:latest\n```\n\n## Production Configuration\n\n### Enterprise Production Configuration\n```bash\n# Backup original configuration\nsudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup\n\n# Create comprehensive production configuration\nsudo tee /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n#---------------------------------------------------------------------\n# HAProxy Enterprise Production Configuration\n# Version: 3.0+ LTS\n#---------------------------------------------------------------------\n\nglobal\n    log 127.0.0.1:514 local0 info\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\n    # SSL/TLS configuration (2024 best practices)\n    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets prefer-client-ciphers\n    \n    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets\n\n    # DH parameters for perfect forward secrecy\n    ssl-dh-param-file /etc/haproxy/ssl/dhparam.pem\n    \n    # Performance tuning\n    maxconn 40000\n    nbthread 4\n    cpu-map auto:1/1-4 0-3\n    \n    # Logging\n    log-tag haproxy-prod\n    \n    # Security\n    insecure-fork-wanted\n    insecure-setuid-wanted\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor except 127.0.0.0/8\n    option http-server-close\n    option redispatch\n    \n    # Timeouts\n    timeout connect 10s\n    timeout client 1m\n    timeout server 1m\n    timeout http-keep-alive 10s\n    timeout check 10s\n    timeout tunnel 2h\n    \n    # Retries\n    retries 3\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/css text/javascript application/javascript application/json application/xml\n    \n    # Default error pages\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\n#---------------------------------------------------------------------\n# Frontend Configuration\n#---------------------------------------------------------------------\n\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1 crt-ignore-err all\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n    http-response set-header X-Frame-Options \"SAMEORIGIN\"\n    http-response set-header X-Content-Type-Options \"nosniff\"\n    http-response set-header X-XSS-Protection \"1; mode=block\"\n    http-response set-header Referrer-Policy \"strict-origin-when-cross-origin\"\n    http-response set-header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'\"\n    \n    # Rate limiting\n    stick-table type ip size 100k expire 30s store http_req_rate(10s)\n    http-request track-sc0 src\n    http-request deny if { sc_http_req_rate(0) gt 20 }\n    \n    # Block bad bots and crawlers\n    acl is_bot hdr_sub(User-Agent) -i bot crawler spider scraper\n    http-request deny if is_bot\n    \n    # ACLs for routing\n    acl is_api path_beg /api/\n    acl is_admin path_beg /admin/\n    acl is_static path_beg /static/ /css/ /js/ /images/\n    acl is_websocket hdr(Upgrade) -i websocket\n    \n    # Force HTTPS\n    redirect scheme https code 301 if !{ ssl_fc }\n    \n    # Routing rules\n    use_backend api_servers if is_api\n    use_backend admin_servers if is_admin\n    use_backend static_servers if is_static\n    use_backend websocket_servers if is_websocket\n    default_backend web_servers\n\n#---------------------------------------------------------------------\n# Backend Configurations\n#---------------------------------------------------------------------\n\n# Main web servers\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health HTTP/1.1\\r\\nHost:\\ example.com\n    http-check expect status 200\n    \n    # Health check configuration\n    default-server inter 2000 rise 2 fall 3 slowstart 60s maxconn 250 maxqueue 256 weight 100\n    \n    server web1 192.168.1.10:8080 check cookie web1\n    server web2 192.168.1.11:8080 check cookie web2\n    server web3 192.168.1.12:8080 check cookie web3\n    server web4 192.168.1.13:8080 check cookie web4 backup\n    \n    # Stick table for session persistence\n    stick-table type ip size 200k expire 30m\n    stick on src\n\n# API servers backend\nbackend api_servers\n    balance roundrobin\n    option httpchk GET /api/health HTTP/1.1\\r\\nHost:\\ api.example.com\n    http-check expect rstring ^OK$\n    \n    # Enable HTTP/2 to backend\n    server api1 192.168.1.20:3000 check proto h2 verify none\n    server api2 192.168.1.21:3000 check proto h2 verify none\n    server api3 192.168.1.22:3000 check proto h2 verify none\n\n# Admin backend (restricted access)\nbackend admin_servers\n    balance source\n    option httpchk GET /admin/health\n    http-check expect status 200\n    \n    # IP whitelist for admin access\n    http-request deny unless { src 192.168.1.0/24 10.0.0.0/8 }\n    \n    server admin1 192.168.1.30:9000 check\n\n# Static content servers\nbackend static_servers\n    balance roundrobin\n    option httpchk GET /health.txt\n    http-check expect string \"OK\"\n    \n    # Cache control\n    http-response set-header Cache-Control \"public, max-age=86400\"\n    \n    server static1 192.168.1.40:8080 check\n    server static2 192.168.1.41:8080 check\n\n# WebSocket servers\nbackend websocket_servers\n    balance leastconn\n    option httpchk GET /ws/health\n    http-check expect status 101\n    \n    # WebSocket specific settings\n    timeout tunnel 3600s\n    \n    server ws1 192.168.1.50:8080 check\n    server ws2 192.168.1.51:8080 check\n\n#---------------------------------------------------------------------\n# Database Load Balancing (TCP Mode)\n#---------------------------------------------------------------------\n\n# MySQL Master-Slave Load Balancing\nfrontend mysql_frontend\n    bind *:3306\n    mode tcp\n    default_backend mysql_servers\n\nbackend mysql_servers\n    mode tcp\n    balance leastconn\n    option mysql-check user haproxy_check\n    \n    # MySQL health checks\n    server mysql-master 192.168.1.60:3306 check weight 1000\n    server mysql-slave1 192.168.1.61:3306 check weight 100 backup\n    server mysql-slave2 192.168.1.62:3306 check weight 100 backup\n\n# PostgreSQL Load Balancing\nfrontend postgresql_frontend\n    bind *:5432\n    mode tcp\n    default_backend postgresql_servers\n\nbackend postgresql_servers\n    mode tcp\n    balance roundrobin\n    option pgsql-check user haproxy_check\n    \n    server postgres1 192.168.1.70:5432 check\n    server postgres2 192.168.1.71:5432 check\n\n# Redis Cluster Load Balancing\nfrontend redis_frontend\n    bind *:6379\n    mode tcp\n    default_backend redis_servers\n\nbackend redis_servers\n    mode tcp\n    balance first\n    option redis-check\n    \n    server redis1 192.168.1.80:6379 check\n    server redis2 192.168.1.81:6379 check backup\n\n#---------------------------------------------------------------------\n# Statistics and Monitoring\n#---------------------------------------------------------------------\n\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if { src 192.168.1.0/24 }\n    stats auth admin:secure_stats_password\n    \n    # Enhanced statistics\n    stats show-legends\n    stats show-modules\n    stats realm \"HAProxy Statistics\"\n    \n    # Prometheus metrics (if compiled with USE_PROMEX)\n    http-request use-service prometheus-exporter if { path /metrics }\n\n#---------------------------------------------------------------------\n# Advanced Features\n#---------------------------------------------------------------------\n\n# Global rate limiting\nbackend rate_limit_backend\n    stick-table type ip size 100k expire 30s store gpc0,http_req_rate(10s)\n\n# DDoS protection\nfrontend ddos_protection\n    bind *:80\n    \n    # Track client IPs\n    stick-table type ip size 100k expire 30s store gpc0,http_req_rate(10s),http_err_rate(10s)\n    http-request track-sc0 src table rate_limit_backend\n    \n    # Block clients exceeding rate limits\n    http-request deny if { sc_http_req_rate(0) gt 50 }\n    http-request deny if { sc_http_err_rate(0) gt 10 }\n    \n    default_backend web_servers\n\n# Health check backend for external monitoring\nbackend health_check\n    mode http\n    http-request return status 200 content-type text/plain string \"HAProxy is healthy\"\nEOF\n\n# Test configuration\nsudo haproxy -c -f ~/haproxy/config/haproxy.cfg\n```\n\n## SSL/TLS Configuration and Security\n\n### Advanced SSL Termination\n```bash\n# Generate strong DH parameters\nsudo openssl dhparam -out /etc/haproxy/ssl/dhparam.pem 4096\n\n# Create SSL certificate bundle\nsudo mkdir -p /etc/haproxy/ssl\n\n# Self-signed certificate for testing\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/haproxy/ssl/example.com.key \\\n  -out /etc/haproxy/ssl/example.com.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=example.com\"\n\n# Combine certificate and key for HAProxy\nsudo cat /etc/haproxy/ssl/example.com.crt /etc/haproxy/ssl/example.com.key | sudo tee /etc/haproxy/ssl/example.com.pem\n\n# Production: Let's Encrypt certificates\nsudo certbot certonly --standalone -d example.com -d www.example.com\nsudo cat /etc/letsencrypt/live/example.com/fullchain.pem /etc/letsencrypt/live/example.com/privkey.pem | sudo tee /etc/haproxy/ssl/example.com.pem\n\n# Set proper permissions\nsudo chmod 600 /etc/haproxy/ssl/*.pem\nsudo chown haproxy:haproxy /etc/haproxy/ssl/*.pem\n\n# Create certificate renewal script\nsudo tee /usr/local/bin/haproxy-ssl-renewal.sh > /dev/null <<'EOF'\n#!/bin/bash\nCERT_PATH=\"/etc/letsencrypt/live\"\nHAPROXY_CERT_DIR=\"/etc/haproxy/ssl\"\n\n# Renew certificates\ncertbot renew --quiet --pre-hook \"systemctl stop haproxy\" --post-hook \"systemctl start haproxy\"\n\n# Update HAProxy certificate bundles\nfor domain in $(ls ${CERT_PATH}/); do\n    if [ -f \"${CERT_PATH}/${domain}/fullchain.pem\" ]; then\n        cat \"${CERT_PATH}/${domain}/fullchain.pem\" \"${CERT_PATH}/${domain}/privkey.pem\" > \"${HAPROXY_CERT_DIR}/${domain}.pem\"\n        chmod 600 \"${HAPROXY_CERT_DIR}/${domain}.pem\"\n        chown haproxy:haproxy \"${HAPROXY_CERT_DIR}/${domain}.pem\"\n    fi\ndone\n\n# Reload HAProxy configuration\nsystemctl reload haproxy\n\necho \"SSL certificates updated for HAProxy\"\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-ssl-renewal.sh\n\n# Schedule certificate renewal\necho \"0 3 * * 1 root /usr/local/bin/haproxy-ssl-renewal.sh\" | sudo tee -a /etc/crontab\n```\n\n### Security Hardening Configuration\n```bash\n# Create security-focused configuration additions\nsudo tee /etc/haproxy/conf.d/security.cfg > /dev/null <<EOF\n#---------------------------------------------------------------------\n# Security Configuration\n#---------------------------------------------------------------------\n\nglobal\n    # Security settings\n    tune.ssl.default-dh-param 2048\n    tune.ssl.capture-buffer-size 0\n    tune.ssl.maxrecord 1460\n    \n    # Disable SSLv3 and weak ciphers\n    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11\n\ndefaults\n    # Hide server information\n    option hide-version\n    \n    # Security headers for all responses\n    http-response del-header Server\n    http-response del-header X-Powered-By\n    \n    # Request size limits\n    http-request deny if { req.body_size gt 10000000 }  # 10MB limit\n    \n    # Block suspicious request methods\n    acl blocked_methods method TRACE CONNECT\n    http-request deny if blocked_methods\n    \n    # Block requests with suspicious headers\n    acl suspicious_headers hdr_cnt(host) gt 1\n    acl suspicious_headers hdr_cnt(content-length) gt 1\n    http-request deny if suspicious_headers\n\n# Rate limiting configuration\nbackend rate_limit_abuse\n    stick-table type ip size 100k expire 30s store gpc0,gpc1,http_req_rate(10s),http_err_rate(10s),conn_rate(10s)\n\nfrontend rate_limiting\n    # Track requests per IP\n    http-request track-sc0 src table rate_limit_abuse\n    \n    # Deny clients that exceed rate limits\n    http-request deny if { sc_http_req_rate(0) gt 100 }\n    http-request deny if { sc_conn_rate(0) gt 20 }\n    http-request deny if { sc_http_err_rate(0) gt 10 }\n    \n    # Slow down abusive clients\n    http-request set-var(req.delay) int(1000) if { sc_http_req_rate(0) gt 50 }\n    http-request lua.delay_request if { var(req.delay) -m found }\n\n# WAF-like filtering\nfrontend security_frontend\n    # Block common attacks\n    acl is_sql_injection path_reg -i .*(union|select|insert|delete|update|drop|create|alter|exec|script|javascript|vbscript|onload|onerror|onclick).*\n    acl is_xss path_reg -i .*(script|iframe|object|embed|form|img|svg|math|details|svg).*\n    acl is_path_traversal path_reg -i .*(\\.\\./|\\.\\.\\\\|%2e%2e%2f|%2e%2e\\\\).*\n    \n    http-request deny if is_sql_injection\n    http-request deny if is_xss\n    http-request deny if is_path_traversal\n    \n    # GeoIP blocking (requires GeoIP data)\n    # http-request deny if { src,map_ip(/etc/haproxy/geoip/country.map) -i CN RU }\n\nEOF\n\n# Include security configuration\necho \"include /etc/haproxy/conf.d/*.cfg\" | sudo tee -a /etc/haproxy/haproxy.cfg\n```\n\n## Advanced Load Balancing Strategies\n\n### Multi-Tier Application Load Balancing\n```bash\nsudo tee /etc/haproxy/haproxy.cfg > /dev/null <<EOF\nglobal\n    log stdout local0\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    timeout connect 5s\n    timeout client 50s\n    timeout server 50s\n\n#---------------------------------------------------------------------\n# Application Frontend with Advanced Routing\n#---------------------------------------------------------------------\n\nfrontend app_frontend\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # ACLs for microservices routing\n    acl is_user_service path_beg /api/users/\n    acl is_order_service path_beg /api/orders/\n    acl is_payment_service path_beg /api/payments/\n    acl is_notification_service path_beg /api/notifications/\n    acl is_admin_panel path_beg /admin/\n    acl is_monitoring path_beg /monitoring/\n    \n    # Geographic routing\n    acl is_us_traffic src 192.168.1.0/24\n    acl is_eu_traffic src 192.168.2.0/24\n    acl is_asia_traffic src 192.168.3.0/24\n    \n    # Device detection\n    acl is_mobile hdr_reg(User-Agent) -i (mobile|android|iphone|ipad)\n    acl is_desktop hdr_reg(User-Agent) -i (windows|macos|linux)\n    \n    # Routing decisions\n    use_backend user_service_us if is_user_service is_us_traffic\n    use_backend user_service_eu if is_user_service is_eu_traffic\n    use_backend order_service if is_order_service\n    use_backend payment_service if is_payment_service\n    use_backend notification_service if is_notification_service\n    use_backend admin_panel if is_admin_panel\n    use_backend monitoring_backend if is_monitoring\n    use_backend mobile_servers if is_mobile\n    default_backend web_servers\n\n# User Service Backends (Geographic)\nbackend user_service_us\n    balance roundrobin\n    option httpchk GET /api/users/health\n    http-check expect status 200\n    server user-us-1 192.168.1.100:3001 check\n    server user-us-2 192.168.1.101:3001 check\n    server user-us-3 192.168.1.102:3001 check\n\nbackend user_service_eu\n    balance roundrobin\n    option httpchk GET /api/users/health\n    server user-eu-1 192.168.2.100:3001 check\n    server user-eu-2 192.168.2.101:3001 check\n\n# Microservices Backends\nbackend order_service\n    balance leastconn\n    option httpchk GET /api/orders/health\n    server order-1 192.168.1.110:3002 check\n    server order-2 192.168.1.111:3002 check\n    server order-3 192.168.1.112:3002 check\n\nbackend payment_service\n    balance roundrobin\n    option httpchk GET /api/payments/health\n    # Enhanced security for payment service\n    http-request set-header X-Forwarded-Proto https\n    http-request add-header X-Client-IP %[src]\n    server payment-1 192.168.1.120:3003 check ssl verify none\n    server payment-2 192.168.1.121:3003 check ssl verify none\n\nbackend notification_service\n    balance roundrobin\n    option httpchk GET /api/notifications/health\n    server notification-1 192.168.1.130:3004 check\n    server notification-2 192.168.1.131:3004 check\n\n# Admin Panel Backend (Restricted)\nbackend admin_panel\n    balance source\n    option httpchk GET /admin/health\n    http-check expect status 200\n    \n    # Additional security\n    http-request add-header X-Admin-Access \"true\"\n    timeout server 2m\n    \n    server admin-1 192.168.1.140:9000 check\n\n# Mobile-Optimized Backend\nbackend mobile_servers\n    balance roundrobin\n    option httpchk GET /mobile/health\n    # Mobile-specific optimizations\n    compression algo gzip\n    compression type text/html text/css application/javascript application/json\n    server mobile-1 192.168.1.150:8080 check\n    server mobile-2 192.168.1.151:8080 check\n\n#---------------------------------------------------------------------\n# Monitoring and Statistics\n#---------------------------------------------------------------------\n\nlisten stats\n    bind *:8404 ssl crt /etc/haproxy/ssl/stats.pem\n    stats enable\n    stats uri /\n    stats refresh 5s\n    stats admin if { src 192.168.1.0/24 }\n    stats auth admin:secure_stats_password\n    stats realm \"HAProxy Statistics\"\n    \n    # Prometheus metrics endpoint\n    http-request use-service prometheus-exporter if { path /metrics }\n    \n    # JSON stats API\n    http-request use-service prometheus-exporter if { path /stats/json }\n\n# Health check endpoint for external monitoring\nlisten health_check\n    bind *:8080\n    mode http\n    monitor-uri /health\n    option httplog\n    \n    acl site_dead nbsrv(web_servers) lt 1\n    acl api_dead nbsrv(api_servers) lt 1\n    \n    monitor fail if site_dead\n    monitor fail if api_dead\nEOF\n```\n\n### Global Load Balancing with DNS\n```bash\n# Integration with external DNS load balancing\nsudo tee /etc/haproxy/haproxy-dns.cfg > /dev/null <<EOF\nglobal\n    # DNS resolution for dynamic backends\n    dns-resolver dns1\n        nameserver dns1 8.8.8.8:53\n        nameserver dns2 8.8.4.4:53\n        resolve_retries 3\n        timeout retry 1s\n        hold nx 30s\n        hold other 30s\n        hold refused 30s\n        hold timeout 30s\n        hold valid 10s\n\ndefaults\n    mode http\n    timeout connect 5s\n    timeout client 30s\n    timeout server 30s\n\n# Dynamic backend resolution\nbackend dynamic_backend\n    balance roundrobin\n    option httpchk GET /health\n    \n    # Servers resolved via DNS\n    server-template web- 3 web.example.com:80 check resolvers dns1\n    server-template api- 2 api.example.com:80 check resolvers dns1\n\n# Service discovery integration\nbackend consul_backend\n    balance roundrobin\n    option httpchk GET /health\n    \n    # Consul service discovery\n    server-template consul- 3 _web._tcp.service.consul:80 check resolvers dns1\nEOF\n```\n\n## High Availability and Clustering\n\n### HAProxy Keepalived Setup\n```bash\n# Install keepalived for HA\nsudo apt install -y keepalived  # Ubuntu/Debian\nsudo yum install -y keepalived  # RHEL/CentOS\n\n# Configure keepalived on primary HAProxy\nsudo tee /etc/keepalived/keepalived.conf > /dev/null <<EOF\n! Configuration File for keepalived\n\nglobal_defs {\n    router_id HAProxy_Primary\n    vrrp_skip_check_adv_addr\n    vrrp_strict\n    vrrp_garp_interval 0\n    vrrp_gna_interval 0\n    script_user root\n    enable_script_security\n}\n\n# Health check script\nvrrp_script chk_haproxy {\n    script \"/usr/bin/killall -0 haproxy\"\n    interval 2\n    weight 2\n    fall 3\n    rise 2\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface eth0\n    virtual_router_id 51\n    priority 110\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass secure_vrrp_password\n    }\n    virtual_ipaddress {\n        192.168.1.100/24\n    }\n    track_script {\n        chk_haproxy\n    }\n    notify_master /etc/keepalived/master.sh\n    notify_backup /etc/keepalived/backup.sh\n}\nEOF\n\n# Create notification scripts\nsudo tee /etc/keepalived/master.sh > /dev/null <<'EOF'\n#!/bin/bash\necho \"$(date): Became MASTER\" >> /var/log/keepalived.log\n# Add any additional master setup commands here\nEOF\n\nsudo tee /etc/keepalived/backup.sh > /dev/null <<'EOF'\n#!/bin/bash\necho \"$(date): Became BACKUP\" >> /var/log/keepalived.log\n# Add any additional backup setup commands here\nEOF\n\nsudo chmod +x /etc/keepalived/{master,backup}.sh\nsudo systemctl enable --now keepalived\n\n# Configure backup HAProxy with lower priority (100 instead of 110)\n```\n\n### Multi-Site Load Balancing\n```bash\n# Configure multi-site load balancing\nsudo tee /etc/haproxy/haproxy-multisite.cfg > /dev/null <<EOF\nglobal\n    log stdout local0\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    timeout connect 5s\n    timeout client 30s\n    timeout server 30s\n\n# Frontend for multi-site routing\nfrontend multisite_frontend\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # Site detection based on headers\n    acl is_site_a hdr(host) -i site-a.example.com\n    acl is_site_b hdr(host) -i site-b.example.com\n    acl is_site_c hdr(host) -i site-c.example.com\n    \n    # Geographic routing based on source IP\n    acl is_americas src 10.1.0.0/16\n    acl is_europe src 10.2.0.0/16\n    acl is_asia src 10.3.0.0/16\n    \n    # Route to appropriate backends\n    use_backend site_a_americas if is_site_a is_americas\n    use_backend site_a_europe if is_site_a is_europe\n    use_backend site_a_asia if is_site_a is_asia\n    use_backend site_b_backend if is_site_b\n    use_backend site_c_backend if is_site_c\n    \n    default_backend default_site\n\n# Regional backends\nbackend site_a_americas\n    balance leastconn\n    option httpchk GET /health\n    server site-a-us-1 us-east-1.example.com:80 check\n    server site-a-us-2 us-west-2.example.com:80 check\n\nbackend site_a_europe\n    balance leastconn\n    option httpchk GET /health\n    server site-a-eu-1 eu-west-1.example.com:80 check\n    server site-a-eu-2 eu-central-1.example.com:80 check\n\nbackend site_a_asia\n    balance leastconn\n    option httpchk GET /health\n    server site-a-ap-1 ap-southeast-1.example.com:80 check\n    server site-a-ap-2 ap-northeast-1.example.com:80 check\nEOF\n```\n\n## Monitoring and Observability\n\n### Prometheus Integration\n```bash\n# Configure HAProxy for Prometheus scraping\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\n# Prometheus metrics endpoint\nfrontend prometheus_frontend\n    bind *:8405\n    http-request use-service prometheus-exporter if { path /metrics }\n    http-request deny\nEOF\n\n# Create HAProxy exporter configuration\nsudo tee /etc/systemd/system/haproxy-exporter.service > /dev/null <<EOF\n[Unit]\nDescription=HAProxy Exporter for Prometheus\nAfter=network.target\n\n[Service]\nType=simple\nUser=haproxy\nExecStart=/usr/local/bin/haproxy_exporter \\\n    --haproxy.scrape-uri=\"http://admin:secure_stats_password@localhost:8404/stats;csv\" \\\n    --web.listen-address=\"0.0.0.0:9101\"\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Download HAProxy exporter\nHAPROXY_EXPORTER_VERSION=\"0.15.0\"\nwget https://github.com/prometheus/haproxy_exporter/releases/download/v${HAPROXY_EXPORTER_VERSION}/haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64.tar.gz\ntar xzf haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64.tar.gz\nsudo cp haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64/haproxy_exporter /usr/local/bin/\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy-exporter\n```\n\n### Comprehensive Logging\n```bash\n# Configure rsyslog for HAProxy\nsudo tee /etc/rsyslog.d/49-haproxy.conf > /dev/null <<EOF\n# HAProxy log configuration\n\\$ModLoad imudp\n\\$UDPServerRun 514\n\\$UDPServerAddress 127.0.0.1\n\n# HAProxy logs\nlocal0.*    /var/log/haproxy/haproxy.log\n& stop\n\n# Separate access and error logs\nlocal0.info /var/log/haproxy/access.log\nlocal0.err  /var/log/haproxy/error.log\nlocal0.warning /var/log/haproxy/warning.log\nEOF\n\n# Create log directory\nsudo mkdir -p /var/log/haproxy\nsudo chown syslog:adm /var/log/haproxy\n\n# Configure log rotation\nsudo tee /etc/logrotate.d/haproxy > /dev/null <<EOF\n/var/log/haproxy/*.log {\n    daily\n    rotate 30\n    missingok\n    notifempty\n    compress\n    delaycompress\n    postrotate\n        /bin/kill -HUP \\`cat /var/run/rsyslogd.pid 2>/dev/null\\` 2>/dev/null || true\n    endscript\n}\nEOF\n\nsudo systemctl restart rsyslog\nsudo systemctl reload haproxy\n```\n\n## Performance Optimization\n\n### System-Level Tuning\n```bash\n# Kernel optimization for HAProxy\nsudo tee -a /etc/sysctl.conf > /dev/null <<EOF\n# HAProxy performance tuning\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_max_tw_buckets = 400000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 15000 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 16777216\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 65536 16777216\nnet.ipv4.tcp_wmem = 4096 65536 16777216\nfs.file-max = 100000\nvm.swappiness = 1\nEOF\n\nsudo sysctl -p\n\n# Set resource limits\nsudo tee -a /etc/security/limits.conf > /dev/null <<EOF\nhaproxy soft nofile 65535\nhaproxy hard nofile 65535\nhaproxy soft nproc 65535\nhaproxy hard nproc 65535\nEOF\n\n# Optimize HAProxy service\nsudo tee /etc/systemd/system/haproxy.service.d/performance.conf > /dev/null <<EOF\n[Service]\nLimitNOFILE=65535\nLimitNPROC=65535\nExecStart=\nExecStart=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock\nExecReload=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -c -q\nExecReload=/bin/kill -USR2 \\$MAINPID\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart haproxy\n```\n\n### Advanced Performance Configuration\n```bash\nsudo tee /etc/haproxy/performance.cfg > /dev/null <<EOF\nglobal\n    # Performance optimization\n    maxconn 40000\n    nbthread 8\n    cpu-map auto:1/1-8 0-7\n    \n    # Memory optimization\n    tune.maxrewrite 1024\n    tune.bufsize 32768\n    \n    # Connection optimization\n    tune.maxaccept 500\n    tune.recv_enough 10000\n    \n    # SSL optimization\n    tune.ssl.default-dh-param 2048\n    tune.ssl.maxrecord 1460\n    tune.ssl.capture-buffer-size 0\n    \n    # Compression\n    tune.comp.maxlevel 6\n\ndefaults\n    # Performance settings\n    maxconn 8000\n    \n    # Timeouts\n    timeout connect 3s\n    timeout client 25s\n    timeout server 25s\n    timeout tunnel 3600s\n    timeout http-keep-alive 1s\n    timeout http-request 15s\n    timeout queue 30s\n    timeout tarpit 60s\n    \n    # Keep-alive optimization\n    option http-keep-alive\n    option prefer-last-server\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/css text/javascript application/javascript application/json application/xml\n\n# High-performance backend configuration\nbackend high_performance_backend\n    balance leastconn\n    option httpchk GET /health\n    http-check expect status 200\n    \n    # Connection pooling\n    option http-reuse always\n    \n    # Server configuration with optimal settings\n    default-server inter 1000 fastinter 500 downinter 2000 rise 2 fall 3 slowstart 30s maxconn 1000 maxqueue 256 weight 100\n    \n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\n    server web4 192.168.1.13:8080 check\nEOF\n```\n\n## Backup and Disaster Recovery\n\n### Configuration Management and Backup\n```bash\nsudo tee /usr/local/bin/haproxy-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/haproxy\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{config,ssl,stats,logs}\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/config/haproxy-config-${DATE}.tar.gz \\\n    /etc/haproxy/ \\\n    /etc/systemd/system/haproxy.service* \\\n    /etc/keepalived/\n\n# Backup SSL certificates\ntar -czf ${BACKUP_DIR}/ssl/haproxy-ssl-${DATE}.tar.gz \\\n    /etc/haproxy/ssl/ \\\n    /etc/letsencrypt/\n\n# Backup statistics and runtime state\necho \"show stat\" | socat stdio /run/haproxy/admin.sock > ${BACKUP_DIR}/stats/haproxy-stats-${DATE}.txt\necho \"show info\" | socat stdio /run/haproxy/admin.sock > ${BACKUP_DIR}/stats/haproxy-info-${DATE}.txt\necho \"show sess\" | socat stdio /run/haproxy/admin.sock > ${BACKUP_DIR}/stats/haproxy-sessions-${DATE}.txt\n\n# Backup recent logs\nfind /var/log/haproxy -name \"*.log\" -mtime -1 -exec tar -czf ${BACKUP_DIR}/logs/haproxy-logs-${DATE}.tar.gz {} +\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://haproxy-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination haproxy-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://haproxy-backups/\n\n# Keep only last 15 backups\nfind ${BACKUP_DIR} -name \"haproxy-*\" -type f -mtime +15 -delete\n\n# Test configuration validity\nhaproxy -c -f /etc/haproxy/haproxy.cfg\n\necho \"HAProxy backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-backup.sh\n\n# Schedule daily backups\necho \"0 2 * * * root /usr/local/bin/haproxy-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Disaster Recovery Automation\n```bash\nsudo tee /usr/local/bin/haproxy-dr.sh > /dev/null <<'EOF'\n#!/bin/bash\nDR_MODE=\"${1:-test}\"  # test, activate, or deactivate\n\ncase \"$DR_MODE\" in\n    \"test\")\n        echo \"Testing DR procedures...\"\n        \n        # Test backup restoration\n        LATEST_BACKUP=$(ls -t /backup/haproxy/config/haproxy-config-*.tar.gz | head -1)\n        if [ -n \"$LATEST_BACKUP\" ]; then\n            echo \"✓ Latest backup found: $LATEST_BACKUP\"\n        else\n            echo \"✗ No backup files found\"\n            exit 1\n        fi\n        \n        # Test configuration\n        haproxy -c -f /etc/haproxy/haproxy.cfg\n        echo \"✓ Configuration is valid\"\n        \n        # Test backend connectivity\n        for backend in $(echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep \",BACKEND,\" | cut -d, -f1); do\n            echo \"Testing backend: $backend\"\n            echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep \"$backend\"\n        done\n        \n        echo \"DR test completed\"\n        ;;\n        \n    \"activate\")\n        echo \"Activating DR procedures...\"\n        \n        # Switch to DR configuration\n        cp /etc/haproxy/haproxy-dr.cfg /etc/haproxy/haproxy.cfg\n        \n        # Reload HAProxy\n        systemctl reload haproxy\n        \n        # Update DNS (example with Route53)\n        aws route53 change-resource-record-sets --hosted-zone-id Z123456789 --change-batch file://dr-dns-update.json\n        \n        echo \"DR activated\"\n        ;;\n        \n    \"deactivate\")\n        echo \"Deactivating DR procedures...\"\n        \n        # Restore original configuration\n        cp /etc/haproxy/haproxy.cfg.backup /etc/haproxy/haproxy.cfg\n        \n        # Reload HAProxy\n        systemctl reload haproxy\n        \n        # Update DNS back to primary\n        aws route53 change-resource-record-sets --hosted-zone-id Z123456789 --change-batch file://primary-dns-update.json\n        \n        echo \"DR deactivated\"\n        ;;\n        \n    *)\n        echo \"Usage: $0 {test|activate|deactivate}\"\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-dr.sh\n```\n\n## Verification and Health Checks\n\n### Comprehensive Health Monitoring\n```bash\nsudo tee /usr/local/bin/haproxy-health-check.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/haproxy-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check HAProxy service status\nif systemctl is-active haproxy >/dev/null 2>&1; then\n    log_message \"✓ HAProxy service is running\"\nelse\n    log_message \"✗ HAProxy service is not running\"\n    exit 1\nfi\n\n# Check configuration validity\nif haproxy -c -f /etc/haproxy/haproxy.cfg >/dev/null 2>&1; then\n    log_message \"✓ HAProxy configuration is valid\"\nelse\n    log_message \"✗ HAProxy configuration has errors\"\n    haproxy -c -f /etc/haproxy/haproxy.cfg\nfi\n\n# Check listening ports\nLISTENING_PORTS=$(netstat -tlnp | grep haproxy | wc -l)\nlog_message \"✓ HAProxy is listening on ${LISTENING_PORTS} ports\"\n\n# Check backend server health\nBACKEND_STATS=$(echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep -c \",UP,\")\nTOTAL_SERVERS=$(echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep -c \",.*,\")\nlog_message \"✓ ${BACKEND_STATS}/${TOTAL_SERVERS} backend servers are healthy\"\n\n# Check SSL certificate expiry\nif [ -d /etc/haproxy/ssl ]; then\n    for cert in /etc/haproxy/ssl/*.pem; do\n        if [ -f \"$cert\" ]; then\n            EXPIRY=$(openssl x509 -in \"$cert\" -noout -dates | grep notAfter | cut -d= -f2)\n            EXPIRY_EPOCH=$(date -d \"$EXPIRY\" +%s)\n            CURRENT_EPOCH=$(date +%s)\n            DAYS_TO_EXPIRY=$(( (EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))\n            \n            if [ $DAYS_TO_EXPIRY -lt 30 ]; then\n                log_message \"⚠ SSL certificate $(basename $cert) expires in ${DAYS_TO_EXPIRY} days\"\n            else\n                log_message \"✓ SSL certificate $(basename $cert) expires in ${DAYS_TO_EXPIRY} days\"\n            fi\n        fi\n    done\nfi\n\n# Check memory usage\nMEMORY_USAGE=$(ps -o pid,vsz,rss,comm -C haproxy | tail -1 | awk '{print $3/1024}')\nlog_message \"ℹ HAProxy memory usage: ${MEMORY_USAGE}MB\"\n\n# Check connection statistics\nCURRENT_CONNS=$(echo \"show info\" | socat stdio /run/haproxy/admin.sock | grep \"CurrConns\" | cut -d: -f2 | tr -d ' ')\nMAX_CONNS=$(echo \"show info\" | socat stdio /run/haproxy/admin.sock | grep \"MaxConn\" | cut -d: -f2 | tr -d ' ')\nlog_message \"ℹ Current connections: ${CURRENT_CONNS}/${MAX_CONNS}\"\n\n# Check for any backend servers that are down\nDOWN_SERVERS=$(echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep \",DOWN,\" | wc -l)\nif [ $DOWN_SERVERS -gt 0 ]; then\n    log_message \"⚠ ${DOWN_SERVERS} backend servers are down\"\n    echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep \",DOWN,\" | while IFS=, read pxname svname; do\n        log_message \"  - ${pxname}/${svname} is DOWN\"\n    done\nfi\n\nlog_message \"HAProxy health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-health-check.sh\n\n# Schedule health checks every 5 minutes\necho \"*/5 * * * * root /usr/local/bin/haproxy-health-check.sh\" | sudo tee -a /etc/crontab\n```\n\n### Load Testing and Performance Validation\n```bash\nsudo tee /usr/local/bin/haproxy-load-test.sh > /dev/null <<'EOF'\n#!/bin/bash\nTEST_RESULTS=\"/tmp/haproxy-load-test-$(date +%Y%m%d_%H%M%S).txt\"\nTEST_URL=\"https://example.com\"\nCONCURRENT_USERS=100\nTEST_DURATION=60\n\necho \"HAProxy Load Test Results\" > ${TEST_RESULTS}\necho \"========================\" >> ${TEST_RESULTS}\necho \"Date: $(date)\" >> ${TEST_RESULTS}\necho \"Target URL: ${TEST_URL}\" >> ${TEST_RESULTS}\necho \"Concurrent Users: ${CONCURRENT_USERS}\" >> ${TEST_RESULTS}\necho \"Test Duration: ${TEST_DURATION}s\" >> ${TEST_RESULTS}\necho \"\" >> ${TEST_RESULTS}\n\n# Install testing tools if not available\nif ! command -v ab &> /dev/null; then\n    apt-get update && apt-get install -y apache2-utils\nfi\n\nif ! command -v wrk &> /dev/null; then\n    git clone https://github.com/wg/wrk.git /tmp/wrk\n    cd /tmp/wrk && make && cp wrk /usr/local/bin/\nfi\n\n# Run Apache Bench test\necho \"Apache Bench Results:\" >> ${TEST_RESULTS}\nab -n 10000 -c ${CONCURRENT_USERS} -k ${TEST_URL}/ >> ${TEST_RESULTS} 2>&1\n\necho \"\" >> ${TEST_RESULTS}\necho \"WRK Results:\" >> ${TEST_RESULTS}\nwrk -t4 -c${CONCURRENT_USERS} -d${TEST_DURATION}s --latency ${TEST_URL}/ >> ${TEST_RESULTS}\n\n# Capture HAProxy stats during test\necho \"\" >> ${TEST_RESULTS}\necho \"HAProxy Statistics During Test:\" >> ${TEST_RESULTS}\necho \"show info\" | socat stdio /run/haproxy/admin.sock >> ${TEST_RESULTS}\necho \"show stat\" | socat stdio /run/haproxy/admin.sock >> ${TEST_RESULTS}\n\necho \"\" >> ${TEST_RESULTS}\necho \"Load test completed at: $(date)\" >> ${TEST_RESULTS}\n\necho \"Load test completed. Results: ${TEST_RESULTS}\"\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-load-test.sh\n```\n\n## Firewall Configuration (Cross-Platform)\n\n### Security Rules\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 80/tcp comment 'HTTP'\nsudo ufw allow 443/tcp comment 'HTTPS' \nsudo ufw allow from 192.168.1.0/24 to any port 8404 comment 'Stats interface - internal only'\nsudo ufw allow from 192.168.1.0/24 to any port 9101 comment 'Prometheus exporter - internal only'\nsudo ufw deny 8404 comment 'Block stats from public'\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS/Fedora)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --new-zone=haproxy-mgmt\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-port=8404/tcp\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-port=9101/tcp\nsudo firewall-cmd --reload\n\n# iptables (Universal)\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 8404 -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 9101 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 8404 -j DROP\nsudo iptables -A INPUT -p tcp --dport 9101 -j DROP\n\n# Save iptables rules\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save\n```\n\n### DDoS Protection Configuration\n```bash\nsudo tee /etc/haproxy/ddos-protection.cfg > /dev/null <<EOF\n# DDoS Protection Configuration\n\nglobal\n    # Stick tables for tracking\n    tune.stick-table.enable 1\n\nfrontend ddos_protection\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/ssl/\n    \n    # Track client behavior\n    stick-table type ip size 1m expire 5m store gpc0,gpc1,http_req_rate(10s),http_err_rate(10s),conn_rate(10s),bytes_out_rate(10s)\n    \n    # Track requests\n    http-request track-sc0 src\n    \n    # Rate limiting rules\n    acl abuse_request_rate sc_http_req_rate(0) gt 100\n    acl abuse_connection_rate sc_conn_rate(0) gt 20\n    acl abuse_error_rate sc_http_err_rate(0) gt 10\n    acl abuse_bandwidth sc_bytes_out_rate(0) gt 10000000  # 10MB/s\n    \n    # Geographic blocking (requires GeoIP)\n    # acl blocked_countries src,map_ip(/etc/haproxy/geoip-country.map) -i CN RU\n    \n    # User-Agent filtering\n    acl bad_user_agent hdr_sub(User-Agent) -i \"sqlmap\" \"nikto\" \"nmap\" \"masscan\" \"zmap\"\n    acl empty_user_agent hdr_cnt(User-Agent) eq 0\n    \n    # HTTP method filtering\n    acl allowed_methods method GET POST PUT DELETE HEAD OPTIONS PATCH\n    \n    # Deny rules\n    http-request deny if abuse_request_rate\n    http-request deny if abuse_connection_rate\n    http-request deny if abuse_error_rate\n    http-request deny if abuse_bandwidth\n    http-request deny if bad_user_agent\n    http-request deny if empty_user_agent\n    http-request deny if !allowed_methods\n    # http-request deny if blocked_countries\n    \n    # Tarpit suspicious clients\n    http-request tarpit if { sc_http_req_rate(0) gt 50 }\n    \n    default_backend web_servers\n\n# Clean backend\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health\n    \n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\nEOF\n```\n\n## Runtime Management and Monitoring\n\n### Advanced Runtime Commands\n```bash\n# Create HAProxy management script\nsudo tee /usr/local/bin/haproxy-manage.sh > /dev/null <<'EOF'\n#!/bin/bash\nHAPROXY_SOCKET=\"/run/haproxy/admin.sock\"\n\ncase \"$1\" in\n    \"status\")\n        echo \"=== HAProxy Status ===\"\n        echo \"show info\" | socat stdio ${HAPROXY_SOCKET}\n        echo \"\"\n        echo \"=== Server Status ===\"\n        echo \"show stat\" | socat stdio ${HAPROXY_SOCKET} | column -t -s \",\"\n        ;;\n    \n    \"enable\")\n        if [ -z \"$2\" ] || [ -z \"$3\" ]; then\n            echo \"Usage: $0 enable <backend> <server>\"\n            exit 1\n        fi\n        echo \"enable server $2/$3\" | socat stdio ${HAPROXY_SOCKET}\n        echo \"Server $2/$3 enabled\"\n        ;;\n    \n    \"disable\")\n        if [ -z \"$2\" ] || [ -z \"$3\" ]; then\n            echo \"Usage: $0 disable <backend> <server>\"\n            exit 1\n        fi\n        echo \"disable server $2/$3\" | socat stdio ${HAPROXY_SOCKET}\n        echo \"Server $2/$3 disabled\"\n        ;;\n    \n    \"weight\")\n        if [ -z \"$2\" ] || [ -z \"$3\" ] || [ -z \"$4\" ]; then\n            echo \"Usage: $0 weight <backend> <server> <weight>\"\n            exit 1\n        fi\n        echo \"set weight $2/$3 $4\" | socat stdio ${HAPROXY_SOCKET}\n        echo \"Weight for $2/$3 set to $4\"\n        ;;\n    \n    \"sessions\")\n        echo \"=== Active Sessions ===\"\n        echo \"show sess\" | socat stdio ${HAPROXY_SOCKET}\n        ;;\n    \n    \"errors\")\n        echo \"=== Recent Errors ===\"\n        echo \"show errors\" | socat stdio ${HAPROXY_SOCKET}\n        ;;\n    \n    \"reload\")\n        echo \"Reloading HAProxy configuration...\"\n        if haproxy -c -f /etc/haproxy/haproxy.cfg; then\n            systemctl reload haproxy\n            echo \"Configuration reloaded successfully\"\n        else\n            echo \"Configuration has errors, reload aborted\"\n            exit 1\n        fi\n        ;;\n    \n    \"drain\")\n        if [ -z \"$2\" ] || [ -z \"$3\" ]; then\n            echo \"Usage: $0 drain <backend> <server>\"\n            exit 1\n        fi\n        echo \"set server $2/$3 state drain\" | socat stdio ${HAPROXY_SOCKET}\n        echo \"Server $2/$3 is being drained\"\n        \n        # Wait for connections to finish\n        while [ $(echo \"show stat\" | socat stdio ${HAPROXY_SOCKET} | grep \"$2,$3\" | cut -d, -f5) -gt 0 ]; do\n            echo \"Waiting for connections to finish...\"\n            sleep 5\n        done\n        echo \"Server $2/$3 has been drained\"\n        ;;\n    \n    *)\n        echo \"Usage: $0 {status|enable|disable|weight|sessions|errors|reload|drain} [options]\"\n        echo \"\"\n        echo \"Examples:\"\n        echo \"  $0 status\"\n        echo \"  $0 enable web_servers web1\"\n        echo \"  $0 disable web_servers web1\"\n        echo \"  $0 weight web_servers web1 50\"\n        echo \"  $0 drain web_servers web1\"\n        echo \"  $0 sessions\"\n        echo \"  $0 errors\"\n        echo \"  $0 reload\"\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-manage.sh\n```\n\n### Automated Log Analysis\n```bash\nsudo tee /usr/local/bin/haproxy-log-analysis.sh > /dev/null <<'EOF'\n#!/bin/bash\nLOG_FILE=\"/var/log/haproxy/haproxy.log\"\nANALYSIS_DIR=\"/var/log/haproxy-analysis\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${ANALYSIS_DIR}\n\n# Top client IPs\necho \"Top Client IPs - ${DATE}\" > ${ANALYSIS_DIR}/top-clients-${DATE}.txt\nawk '{print $6}' ${LOG_FILE} | sort | uniq -c | sort -nr | head -20 >> ${ANALYSIS_DIR}/top-clients-${DATE}.txt\n\n# Response time analysis\necho \"Response Time Analysis - ${DATE}\" > ${ANALYSIS_DIR}/response-times-${DATE}.txt\nawk '{print $11}' ${LOG_FILE} | grep -v '^-$' | sort -n | tail -100 >> ${ANALYSIS_DIR}/response-times-${DATE}.txt\n\n# Error analysis\necho \"Error Analysis - ${DATE}\" > ${ANALYSIS_DIR}/errors-${DATE}.txt\nawk '$10 >= 400 {print $0}' ${LOG_FILE} | tail -100 >> ${ANALYSIS_DIR}/errors-${DATE}.txt\n\n# Backend server analysis\necho \"Backend Server Performance - ${DATE}\" > ${ANALYSIS_DIR}/backend-performance-${DATE}.txt\nawk '{print $8}' ${LOG_FILE} | sort | uniq -c | sort -nr >> ${ANALYSIS_DIR}/backend-performance-${DATE}.txt\n\n# SSL/TLS analysis\necho \"SSL/TLS Analysis - ${DATE}\" > ${ANALYSIS_DIR}/ssl-analysis-${DATE}.txt\ngrep \"SSL\" ${LOG_FILE} | tail -50 >> ${ANALYSIS_DIR}/ssl-analysis-${DATE}.txt\n\n# Generate summary report\ncat > ${ANALYSIS_DIR}/summary-${DATE}.txt <<EOL\nHAProxy Log Analysis Summary - ${DATE}\n=====================================\n\nTotal Requests: $(wc -l < ${LOG_FILE})\nUnique IPs: $(awk '{print $6}' ${LOG_FILE} | sort -u | wc -l)\n4xx Errors: $(awk '$10 >= 400 && $10 < 500 {print $0}' ${LOG_FILE} | wc -l)\n5xx Errors: $(awk '$10 >= 500 {print $0}' ${LOG_FILE} | wc -l)\n\nAverage Response Time: $(awk '{sum += $11; count++} END {print sum/count}' ${LOG_FILE})ms\n\nTop 5 Requested URLs:\n$(awk '{print $12}' ${LOG_FILE} | sort | uniq -c | sort -nr | head -5)\n\nAnalysis completed at: $(date)\nEOL\n\necho \"Log analysis completed. Reports in: ${ANALYSIS_DIR}/\"\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-log-analysis.sh\n\n# Schedule daily log analysis\necho \"0 6 * * * root /usr/local/bin/haproxy-log-analysis.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Check HAProxy process status\nps aux | grep haproxy\nsystemctl status haproxy\n\n# Configuration validation\nhaproxy -c -f /etc/haproxy/haproxy.cfg\nhaproxy -c -V -f /etc/haproxy/haproxy.cfg\n\n# Socket connectivity test\nsocat - /run/haproxy/admin.sock\necho \"show info\" | socat stdio /run/haproxy/admin.sock\n\n# Backend server connectivity test\nfor server in 192.168.1.10 192.168.1.11 192.168.1.12; do\n    echo \"Testing $server...\"\n    nc -zv $server 8080\n    curl -I http://$server:8080/health\ndone\n\n# SSL certificate issues\nopenssl x509 -in /etc/haproxy/ssl/example.com.pem -text -noout\nopenssl verify -CAfile /etc/haproxy/ssl/ca.crt /etc/haproxy/ssl/example.com.pem\n\n# Memory usage debugging\npmap -x $(pgrep haproxy)\ncat /proc/$(pgrep haproxy)/status | grep -E \"(VmSize|VmRSS|VmData|VmStk)\"\n\n# Network debugging\nss -tulpn | grep haproxy\nnetstat -tulpn | grep haproxy\nlsof -i :80,443,8404\n\n# Log debugging\ntail -f /var/log/haproxy/haproxy.log\njournalctl -u haproxy -f\n\n# Performance debugging\necho \"show stat\" | socat stdio /run/haproxy/admin.sock | grep -v \"^#\"\necho \"show sess\" | socat stdio /run/haproxy/admin.sock\necho \"show pools\" | socat stdio /run/haproxy/admin.sock\n\n# Configuration debugging\nhaproxy -vv\nhaproxy -dM -f /etc/haproxy/haproxy.cfg  # Don't use in production\n\n# Check for core dumps\nfind /var/crash -name \"haproxy*\" 2>/dev/null\nfind /var/lib/systemd/coredump -name \"*haproxy*\" 2>/dev/null\n```\n\n### Advanced Debugging\n```bash\n# Enable debug logging\nsudo systemctl edit haproxy.service\n# Add:\n[Service]\nExecStart=\nExecStart=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock -d\n\nsudo systemctl daemon-reload\nsudo systemctl restart haproxy\n\n# Real-time connection monitoring\nwatch -n 1 'echo \"show stat\" | socat stdio /run/haproxy/admin.sock | grep -E \"FRONTEND|BACKEND\" | column -t -s \",\"'\n\n# TCP dump for network analysis\ntcpdump -i any -w haproxy-traffic.pcap port 80 or port 443\ntcpdump -i any -w backend-traffic.pcap host 192.168.1.10\n\n# Strace HAProxy process\nstrace -p $(pgrep haproxy) -e trace=network\n\n# Monitor file descriptors\nlsof -p $(pgrep haproxy) | wc -l\ncat /proc/$(pgrep haproxy)/limits | grep \"Max open files\"\n\n# Check shared memory segments\nipcs -m | grep haproxy\n\n# Monitor syscalls\nperf trace -p $(pgrep haproxy)\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.haproxy.org/)\n- [HAProxy Configuration Manual](https://cbonte.github.io/haproxy-dconv/)\n- [Best Practices Guide](https://www.haproxy.com/documentation/hapee/latest/configuration/best-practices/)\n- [Performance Tuning Guide](https://www.haproxy.com/blog/haproxy-performance-tuning/)\n- [Security Guide](https://www.haproxy.com/solutions/security/)\n- [Community Forum](https://discourse.haproxy.org/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"haproxy-installation-guide\" class=\"mobile-header\">HAProxy Installation Guide</h1>\n<p class=\"mobile-paragraph\">High-performance TCP/HTTP load balancer and reverse proxy for distributing traffic across multiple backend servers. Industry standard for load balancing with enterprise-grade security and reliability.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for high-traffic environments</li>\n<li class=\"mobile-list-item\">Multiple backend servers to load balance (optional for testing)</li>\n<li class=\"mobile-list-item\">SSL certificates for production HTTPS termination</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt-get update\n\n# Install HAProxy and utilities\nsudo apt-get install -y haproxy haproxy-doc software-properties-common\n\n# For latest version from PPA\nsudo add-apt-repository ppa:vbernat/haproxy-2.8\nsudo apt-get update\nsudo apt-get install -y haproxy=2.8.*\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install HAProxy\nsudo yum install -y haproxy\n\n# For newer versions\nsudo dnf install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install HAProxy\nsudo dnf install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --add-port=8404/tcp  # Stats interface\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install HAProxy\nsudo pacman -Syu haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n\n# Check status\nsudo systemctl status haproxy</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install HAProxy\nsudo apk update\nsudo apk add haproxy\n\n# Enable and start HAProxy\nsudo rc-update add haproxy default\nsudo service haproxy start</code></pre>\n      </div>\n    </div>\n<h3 id=\"from-source-latest-features\" class=\"mobile-header\">From Source (Latest Features)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install build dependencies\n# Ubuntu/Debian\nsudo apt-get install -y build-essential libssl-dev libpcre3-dev zlib1g-dev liblua5.3-dev libsystemd-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y &quot;Development Tools&quot;\nsudo yum install -y openssl-devel pcre-devel zlib-devel lua-devel systemd-devel\n\n# Download latest HAProxy LTS\nHAPROXY_VERSION=&quot;3.0.5&quot;\ncd /tmp\nwget &quot;https://www.haproxy.org/download/3.0/src/haproxy-${HAPROXY_VERSION}.tar.gz&quot;\ntar xzf haproxy-${HAPROXY_VERSION}.tar.gz\ncd haproxy-${HAPROXY_VERSION}\n\n# Compile with full features\nmake clean\nmake -j$(nproc) TARGET=linux-glibc \\\n    USE_OPENSSL=1 \\\n    USE_ZLIB=1 \\\n    USE_PCRE=1 \\\n    USE_SYSTEMD=1 \\\n    USE_LUA=1 \\\n    USE_PROMEX=1 \\\n    USE_THREAD=1 \\\n    USE_CPU_AFFINITY=1 \\\n    USE_TFO=1 \\\n    USE_NS=1 \\\n    USE_DL=1 \\\n    USE_RT=1\n\n# Install HAProxy\nsudo make install\nsudo mkdir -p /etc/haproxy /var/lib/haproxy /var/log/haproxy\nsudo useradd --system --home /var/lib/haproxy --shell /bin/false haproxy\nsudo chown -R haproxy:haproxy /var/lib/haproxy /var/log/haproxy\n\n# Create systemd service\nsudo tee /etc/systemd/system/haproxy.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=HAProxy Load Balancer\nDocumentation=man:haproxy(1)\nDocumentation=file:/usr/share/doc/haproxy/configuration.txt\nAfter=network.target\n\n[Service]\nType=notify\nExecStart=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock\nExecReload=/bin/kill -USR2 \\$MAINPID\nExecStop=/bin/kill -USR1 \\$MAINPID\nKillMode=mixed\nRestart=on-failure\nSuccessExitStatus=143\nKillSignal=SIGTERM\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/var/lib/haproxy\nReadWritePaths=/var/log/haproxy\nReadWritePaths=/run\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create HAProxy configuration directory\nmkdir -p ~/haproxy/{config,ssl,logs}\n\n# Create basic configuration\ncat &gt; ~/haproxy/config/haproxy.cfg &lt;&lt;EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n    \n    # SSL configuration\n    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets\n    ssl-default-server-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:DHE+AESGCM:DHE+CHACHA20:!aNULL:!MD5:!DSS\n    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor\n    option http-server-close\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    timeout http-keep-alive 4000\n    timeout check 3000\n\n# Frontend\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /usr/local/etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # Redirect HTTP to HTTPS\n    redirect scheme https code 301 if !{ ssl_fc }\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\n    http-response set-header X-Frame-Options &quot;SAMEORIGIN&quot;\n    http-response set-header X-Content-Type-Options &quot;nosniff&quot;\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    \n    default_backend web_servers\n\n# Backend\nbackend web_servers\n    balance roundrobin\n    option httpchk GET /health\n    http-check expect status 200\n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\n\n# Stats interface\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if TRUE\nEOF\n\n# Run HAProxy container\ndocker run -d \\\n  --name haproxy \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -p 8404:8404 \\\n  -v ~/haproxy/config:/usr/local/etc/haproxy:ro \\\n  -v ~/haproxy/ssl:/usr/local/etc/haproxy/ssl:ro \\\n  -v ~/haproxy/logs:/var/log/haproxy \\\n  haproxy:latest</code></pre>\n      </div>\n    </div>\n<h2 id=\"production-configuration\" class=\"mobile-header\">Production Configuration</h2>\n<h3 id=\"enterprise-production-configuration\" class=\"mobile-header\">Enterprise Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup original configuration\nsudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup\n\n# Create comprehensive production configuration\nsudo tee /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n#---------------------------------------------------------------------\n# HAProxy Enterprise Production Configuration\n# Version: 3.0+ LTS\n#---------------------------------------------------------------------\n\nglobal\n    log 127.0.0.1:514 local0 info\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\n    # SSL/TLS configuration (2024 best practices)\n    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n    ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets prefer-client-ciphers\n    \n    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\n    ssl-default-server-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256\n    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets\n\n    # DH parameters for perfect forward secrecy\n    ssl-dh-param-file /etc/haproxy/ssl/dhparam.pem\n    \n    # Performance tuning\n    maxconn 40000\n    nbthread 4\n    cpu-map auto:1/1-4 0-3\n    \n    # Logging\n    log-tag haproxy-prod\n    \n    # Security\n    insecure-fork-wanted\n    insecure-setuid-wanted\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor except 127.0.0.0/8\n    option http-server-close\n    option redispatch\n    \n    # Timeouts\n    timeout connect 10s\n    timeout client 1m\n    timeout server 1m\n    timeout http-keep-alive 10s\n    timeout check 10s\n    timeout tunnel 2h\n    \n    # Retries\n    retries 3\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/css text/javascript application/javascript application/json application/xml\n    \n    # Default error pages\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\n#---------------------------------------------------------------------\n# Frontend Configuration\n#---------------------------------------------------------------------\n\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1 crt-ignore-err all\n    \n    # Security headers\n    http-response set-header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\n    http-response set-header X-Frame-Options &quot;SAMEORIGIN&quot;\n    http-response set-header X-Content-Type-Options &quot;nosniff&quot;\n    http-response set-header X-XSS-Protection &quot;1; mode=block&quot;\n    http-response set-header Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n    http-response set-header Content-Security-Policy &quot;default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;&quot;\n    \n    # Rate limiting\n    stick-table type ip size 100k expire 30s store http_req_rate(10s)\n    http-request track-sc0 src\n    http-request deny if { sc_http_req_rate(0) gt 20 }\n    \n    # Block bad bots and crawlers\n    acl is_bot hdr_sub(User-Agent) -i bot crawler spider scraper\n    http-request deny if is_bot\n    \n    # ACLs for routing\n    acl is_api path_beg /api/\n    acl is_admin path_beg /admin/\n    acl is_static path_beg /static/ /css/ /js/ /images/\n    acl is_websocket hdr(Upgrade) -i websocket\n    \n    # Force HTTPS\n    redirect scheme https code 301 if !{ ssl_fc }\n    \n    # Routing rules\n    use_backend api_servers if is_api\n    use_backend admin_servers if is_admin\n    use_backend static_servers if is_static\n    use_backend websocket_servers if is_websocket\n    default_backend web_servers\n\n#---------------------------------------------------------------------\n# Backend Configurations\n#---------------------------------------------------------------------\n\n# Main web servers\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health HTTP/1.1\\r\\nHost:\\ example.com\n    http-check expect status 200\n    \n    # Health check configuration\n    default-server inter 2000 rise 2 fall 3 slowstart 60s maxconn 250 maxqueue 256 weight 100\n    \n    server web1 192.168.1.10:8080 check cookie web1\n    server web2 192.168.1.11:8080 check cookie web2\n    server web3 192.168.1.12:8080 check cookie web3\n    server web4 192.168.1.13:8080 check cookie web4 backup\n    \n    # Stick table for session persistence\n    stick-table type ip size 200k expire 30m\n    stick on src\n\n# API servers backend\nbackend api_servers\n    balance roundrobin\n    option httpchk GET /api/health HTTP/1.1\\r\\nHost:\\ api.example.com\n    http-check expect rstring ^OK$\n    \n    # Enable HTTP/2 to backend\n    server api1 192.168.1.20:3000 check proto h2 verify none\n    server api2 192.168.1.21:3000 check proto h2 verify none\n    server api3 192.168.1.22:3000 check proto h2 verify none\n\n# Admin backend (restricted access)\nbackend admin_servers\n    balance source\n    option httpchk GET /admin/health\n    http-check expect status 200\n    \n    # IP whitelist for admin access\n    http-request deny unless { src 192.168.1.0/24 10.0.0.0/8 }\n    \n    server admin1 192.168.1.30:9000 check\n\n# Static content servers\nbackend static_servers\n    balance roundrobin\n    option httpchk GET /health.txt\n    http-check expect string &quot;OK&quot;\n    \n    # Cache control\n    http-response set-header Cache-Control &quot;public, max-age=86400&quot;\n    \n    server static1 192.168.1.40:8080 check\n    server static2 192.168.1.41:8080 check\n\n# WebSocket servers\nbackend websocket_servers\n    balance leastconn\n    option httpchk GET /ws/health\n    http-check expect status 101\n    \n    # WebSocket specific settings\n    timeout tunnel 3600s\n    \n    server ws1 192.168.1.50:8080 check\n    server ws2 192.168.1.51:8080 check\n\n#---------------------------------------------------------------------\n# Database Load Balancing (TCP Mode)\n#---------------------------------------------------------------------\n\n# MySQL Master-Slave Load Balancing\nfrontend mysql_frontend\n    bind *:3306\n    mode tcp\n    default_backend mysql_servers\n\nbackend mysql_servers\n    mode tcp\n    balance leastconn\n    option mysql-check user haproxy_check\n    \n    # MySQL health checks\n    server mysql-master 192.168.1.60:3306 check weight 1000\n    server mysql-slave1 192.168.1.61:3306 check weight 100 backup\n    server mysql-slave2 192.168.1.62:3306 check weight 100 backup\n\n# PostgreSQL Load Balancing\nfrontend postgresql_frontend\n    bind *:5432\n    mode tcp\n    default_backend postgresql_servers\n\nbackend postgresql_servers\n    mode tcp\n    balance roundrobin\n    option pgsql-check user haproxy_check\n    \n    server postgres1 192.168.1.70:5432 check\n    server postgres2 192.168.1.71:5432 check\n\n# Redis Cluster Load Balancing\nfrontend redis_frontend\n    bind *:6379\n    mode tcp\n    default_backend redis_servers\n\nbackend redis_servers\n    mode tcp\n    balance first\n    option redis-check\n    \n    server redis1 192.168.1.80:6379 check\n    server redis2 192.168.1.81:6379 check backup\n\n#---------------------------------------------------------------------\n# Statistics and Monitoring\n#---------------------------------------------------------------------\n\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if { src 192.168.1.0/24 }\n    stats auth admin:secure_stats_password\n    \n    # Enhanced statistics\n    stats show-legends\n    stats show-modules\n    stats realm &quot;HAProxy Statistics&quot;\n    \n    # Prometheus metrics (if compiled with USE_PROMEX)\n    http-request use-service prometheus-exporter if { path /metrics }\n\n#---------------------------------------------------------------------\n# Advanced Features\n#---------------------------------------------------------------------\n\n# Global rate limiting\nbackend rate_limit_backend\n    stick-table type ip size 100k expire 30s store gpc0,http_req_rate(10s)\n\n# DDoS protection\nfrontend ddos_protection\n    bind *:80\n    \n    # Track client IPs\n    stick-table type ip size 100k expire 30s store gpc0,http_req_rate(10s),http_err_rate(10s)\n    http-request track-sc0 src table rate_limit_backend\n    \n    # Block clients exceeding rate limits\n    http-request deny if { sc_http_req_rate(0) gt 50 }\n    http-request deny if { sc_http_err_rate(0) gt 10 }\n    \n    default_backend web_servers\n\n# Health check backend for external monitoring\nbackend health_check\n    mode http\n    http-request return status 200 content-type text/plain string &quot;HAProxy is healthy&quot;\nEOF\n\n# Test configuration\nsudo haproxy -c -f ~/haproxy/config/haproxy.cfg</code></pre>\n      </div>\n    </div>\n<h2 id=\"ssltls-configuration-and-security\" class=\"mobile-header\">SSL/TLS Configuration and Security</h2>\n<h3 id=\"advanced-ssl-termination\" class=\"mobile-header\">Advanced SSL Termination</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate strong DH parameters\nsudo openssl dhparam -out /etc/haproxy/ssl/dhparam.pem 4096\n\n# Create SSL certificate bundle\nsudo mkdir -p /etc/haproxy/ssl\n\n# Self-signed certificate for testing\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/haproxy/ssl/example.com.key \\\n  -out /etc/haproxy/ssl/example.com.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=example.com&quot;\n\n# Combine certificate and key for HAProxy\nsudo cat /etc/haproxy/ssl/example.com.crt /etc/haproxy/ssl/example.com.key | sudo tee /etc/haproxy/ssl/example.com.pem\n\n# Production: Let&#039;s Encrypt certificates\nsudo certbot certonly --standalone -d example.com -d www.example.com\nsudo cat /etc/letsencrypt/live/example.com/fullchain.pem /etc/letsencrypt/live/example.com/privkey.pem | sudo tee /etc/haproxy/ssl/example.com.pem\n\n# Set proper permissions\nsudo chmod 600 /etc/haproxy/ssl/*.pem\nsudo chown haproxy:haproxy /etc/haproxy/ssl/*.pem\n\n# Create certificate renewal script\nsudo tee /usr/local/bin/haproxy-ssl-renewal.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nCERT_PATH=&quot;/etc/letsencrypt/live&quot;\nHAPROXY_CERT_DIR=&quot;/etc/haproxy/ssl&quot;\n\n# Renew certificates\ncertbot renew --quiet --pre-hook &quot;systemctl stop haproxy&quot; --post-hook &quot;systemctl start haproxy&quot;\n\n# Update HAProxy certificate bundles\nfor domain in $(ls ${CERT_PATH}/); do\n    if [ -f &quot;${CERT_PATH}/${domain}/fullchain.pem&quot; ]; then\n        cat &quot;${CERT_PATH}/${domain}/fullchain.pem&quot; &quot;${CERT_PATH}/${domain}/privkey.pem&quot; &gt; &quot;${HAPROXY_CERT_DIR}/${domain}.pem&quot;\n        chmod 600 &quot;${HAPROXY_CERT_DIR}/${domain}.pem&quot;\n        chown haproxy:haproxy &quot;${HAPROXY_CERT_DIR}/${domain}.pem&quot;\n    fi\ndone\n\n# Reload HAProxy configuration\nsystemctl reload haproxy\n\necho &quot;SSL certificates updated for HAProxy&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-ssl-renewal.sh\n\n# Schedule certificate renewal\necho &quot;0 3 * * 1 root /usr/local/bin/haproxy-ssl-renewal.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening-configuration\" class=\"mobile-header\">Security Hardening Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security-focused configuration additions\nsudo tee /etc/haproxy/conf.d/security.cfg &gt; /dev/null &lt;&lt;EOF\n#---------------------------------------------------------------------\n# Security Configuration\n#---------------------------------------------------------------------\n\nglobal\n    # Security settings\n    tune.ssl.default-dh-param 2048\n    tune.ssl.capture-buffer-size 0\n    tune.ssl.maxrecord 1460\n    \n    # Disable SSLv3 and weak ciphers\n    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11\n\ndefaults\n    # Hide server information\n    option hide-version\n    \n    # Security headers for all responses\n    http-response del-header Server\n    http-response del-header X-Powered-By\n    \n    # Request size limits\n    http-request deny if { req.body_size gt 10000000 }  # 10MB limit\n    \n    # Block suspicious request methods\n    acl blocked_methods method TRACE CONNECT\n    http-request deny if blocked_methods\n    \n    # Block requests with suspicious headers\n    acl suspicious_headers hdr_cnt(host) gt 1\n    acl suspicious_headers hdr_cnt(content-length) gt 1\n    http-request deny if suspicious_headers\n\n# Rate limiting configuration\nbackend rate_limit_abuse\n    stick-table type ip size 100k expire 30s store gpc0,gpc1,http_req_rate(10s),http_err_rate(10s),conn_rate(10s)\n\nfrontend rate_limiting\n    # Track requests per IP\n    http-request track-sc0 src table rate_limit_abuse\n    \n    # Deny clients that exceed rate limits\n    http-request deny if { sc_http_req_rate(0) gt 100 }\n    http-request deny if { sc_conn_rate(0) gt 20 }\n    http-request deny if { sc_http_err_rate(0) gt 10 }\n    \n    # Slow down abusive clients\n    http-request set-var(req.delay) int(1000) if { sc_http_req_rate(0) gt 50 }\n    http-request lua.delay_request if { var(req.delay) -m found }\n\n# WAF-like filtering\nfrontend security_frontend\n    # Block common attacks\n    acl is_sql_injection path_reg -i .*(union|select|insert|delete|update|drop|create|alter|exec|script|javascript|vbscript|onload|onerror|onclick).*\n    acl is_xss path_reg -i .*(script|iframe|object|embed|form|img|svg|math|details|svg).*\n    acl is_path_traversal path_reg -i .*(\\.\\./|\\.\\.\\\\|%2e%2e%2f|%2e%2e\\\\).*\n    \n    http-request deny if is_sql_injection\n    http-request deny if is_xss\n    http-request deny if is_path_traversal\n    \n    # GeoIP blocking (requires GeoIP data)\n    # http-request deny if { src,map_ip(/etc/haproxy/geoip/country.map) -i CN RU }\n\nEOF\n\n# Include security configuration\necho &quot;include /etc/haproxy/conf.d/*.cfg&quot; | sudo tee -a /etc/haproxy/haproxy.cfg</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-load-balancing-strategies\" class=\"mobile-header\">Advanced Load Balancing Strategies</h2>\n<h3 id=\"multi-tier-application-load-balancing\" class=\"mobile-header\">Multi-Tier Application Load Balancing</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    log stdout local0\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    timeout connect 5s\n    timeout client 50s\n    timeout server 50s\n\n#---------------------------------------------------------------------\n# Application Frontend with Advanced Routing\n#---------------------------------------------------------------------\n\nfrontend app_frontend\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # ACLs for microservices routing\n    acl is_user_service path_beg /api/users/\n    acl is_order_service path_beg /api/orders/\n    acl is_payment_service path_beg /api/payments/\n    acl is_notification_service path_beg /api/notifications/\n    acl is_admin_panel path_beg /admin/\n    acl is_monitoring path_beg /monitoring/\n    \n    # Geographic routing\n    acl is_us_traffic src 192.168.1.0/24\n    acl is_eu_traffic src 192.168.2.0/24\n    acl is_asia_traffic src 192.168.3.0/24\n    \n    # Device detection\n    acl is_mobile hdr_reg(User-Agent) -i (mobile|android|iphone|ipad)\n    acl is_desktop hdr_reg(User-Agent) -i (windows|macos|linux)\n    \n    # Routing decisions\n    use_backend user_service_us if is_user_service is_us_traffic\n    use_backend user_service_eu if is_user_service is_eu_traffic\n    use_backend order_service if is_order_service\n    use_backend payment_service if is_payment_service\n    use_backend notification_service if is_notification_service\n    use_backend admin_panel if is_admin_panel\n    use_backend monitoring_backend if is_monitoring\n    use_backend mobile_servers if is_mobile\n    default_backend web_servers\n\n# User Service Backends (Geographic)\nbackend user_service_us\n    balance roundrobin\n    option httpchk GET /api/users/health\n    http-check expect status 200\n    server user-us-1 192.168.1.100:3001 check\n    server user-us-2 192.168.1.101:3001 check\n    server user-us-3 192.168.1.102:3001 check\n\nbackend user_service_eu\n    balance roundrobin\n    option httpchk GET /api/users/health\n    server user-eu-1 192.168.2.100:3001 check\n    server user-eu-2 192.168.2.101:3001 check\n\n# Microservices Backends\nbackend order_service\n    balance leastconn\n    option httpchk GET /api/orders/health\n    server order-1 192.168.1.110:3002 check\n    server order-2 192.168.1.111:3002 check\n    server order-3 192.168.1.112:3002 check\n\nbackend payment_service\n    balance roundrobin\n    option httpchk GET /api/payments/health\n    # Enhanced security for payment service\n    http-request set-header X-Forwarded-Proto https\n    http-request add-header X-Client-IP %[src]\n    server payment-1 192.168.1.120:3003 check ssl verify none\n    server payment-2 192.168.1.121:3003 check ssl verify none\n\nbackend notification_service\n    balance roundrobin\n    option httpchk GET /api/notifications/health\n    server notification-1 192.168.1.130:3004 check\n    server notification-2 192.168.1.131:3004 check\n\n# Admin Panel Backend (Restricted)\nbackend admin_panel\n    balance source\n    option httpchk GET /admin/health\n    http-check expect status 200\n    \n    # Additional security\n    http-request add-header X-Admin-Access &quot;true&quot;\n    timeout server 2m\n    \n    server admin-1 192.168.1.140:9000 check\n\n# Mobile-Optimized Backend\nbackend mobile_servers\n    balance roundrobin\n    option httpchk GET /mobile/health\n    # Mobile-specific optimizations\n    compression algo gzip\n    compression type text/html text/css application/javascript application/json\n    server mobile-1 192.168.1.150:8080 check\n    server mobile-2 192.168.1.151:8080 check\n\n#---------------------------------------------------------------------\n# Monitoring and Statistics\n#---------------------------------------------------------------------\n\nlisten stats\n    bind *:8404 ssl crt /etc/haproxy/ssl/stats.pem\n    stats enable\n    stats uri /\n    stats refresh 5s\n    stats admin if { src 192.168.1.0/24 }\n    stats auth admin:secure_stats_password\n    stats realm &quot;HAProxy Statistics&quot;\n    \n    # Prometheus metrics endpoint\n    http-request use-service prometheus-exporter if { path /metrics }\n    \n    # JSON stats API\n    http-request use-service prometheus-exporter if { path /stats/json }\n\n# Health check endpoint for external monitoring\nlisten health_check\n    bind *:8080\n    mode http\n    monitor-uri /health\n    option httplog\n    \n    acl site_dead nbsrv(web_servers) lt 1\n    acl api_dead nbsrv(api_servers) lt 1\n    \n    monitor fail if site_dead\n    monitor fail if api_dead\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"global-load-balancing-with-dns\" class=\"mobile-header\">Global Load Balancing with DNS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Integration with external DNS load balancing\nsudo tee /etc/haproxy/haproxy-dns.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    # DNS resolution for dynamic backends\n    dns-resolver dns1\n        nameserver dns1 8.8.8.8:53\n        nameserver dns2 8.8.4.4:53\n        resolve_retries 3\n        timeout retry 1s\n        hold nx 30s\n        hold other 30s\n        hold refused 30s\n        hold timeout 30s\n        hold valid 10s\n\ndefaults\n    mode http\n    timeout connect 5s\n    timeout client 30s\n    timeout server 30s\n\n# Dynamic backend resolution\nbackend dynamic_backend\n    balance roundrobin\n    option httpchk GET /health\n    \n    # Servers resolved via DNS\n    server-template web- 3 web.example.com:80 check resolvers dns1\n    server-template api- 2 api.example.com:80 check resolvers dns1\n\n# Service discovery integration\nbackend consul_backend\n    balance roundrobin\n    option httpchk GET /health\n    \n    # Consul service discovery\n    server-template consul- 3 _web._tcp.service.consul:80 check resolvers dns1\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-and-clustering\" class=\"mobile-header\">High Availability and Clustering</h2>\n<h3 id=\"haproxy-keepalived-setup\" class=\"mobile-header\">HAProxy Keepalived Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install keepalived for HA\nsudo apt install -y keepalived  # Ubuntu/Debian\nsudo yum install -y keepalived  # RHEL/CentOS\n\n# Configure keepalived on primary HAProxy\nsudo tee /etc/keepalived/keepalived.conf &gt; /dev/null &lt;&lt;EOF\n! Configuration File for keepalived\n\nglobal_defs {\n    router_id HAProxy_Primary\n    vrrp_skip_check_adv_addr\n    vrrp_strict\n    vrrp_garp_interval 0\n    vrrp_gna_interval 0\n    script_user root\n    enable_script_security\n}\n\n# Health check script\nvrrp_script chk_haproxy {\n    script &quot;/usr/bin/killall -0 haproxy&quot;\n    interval 2\n    weight 2\n    fall 3\n    rise 2\n}\n\nvrrp_instance VI_1 {\n    state MASTER\n    interface eth0\n    virtual_router_id 51\n    priority 110\n    advert_int 1\n    authentication {\n        auth_type PASS\n        auth_pass secure_vrrp_password\n    }\n    virtual_ipaddress {\n        192.168.1.100/24\n    }\n    track_script {\n        chk_haproxy\n    }\n    notify_master /etc/keepalived/master.sh\n    notify_backup /etc/keepalived/backup.sh\n}\nEOF\n\n# Create notification scripts\nsudo tee /etc/keepalived/master.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\necho &quot;$(date): Became MASTER&quot; &gt;&gt; /var/log/keepalived.log\n# Add any additional master setup commands here\nEOF\n\nsudo tee /etc/keepalived/backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\necho &quot;$(date): Became BACKUP&quot; &gt;&gt; /var/log/keepalived.log\n# Add any additional backup setup commands here\nEOF\n\nsudo chmod +x /etc/keepalived/{master,backup}.sh\nsudo systemctl enable --now keepalived\n\n# Configure backup HAProxy with lower priority (100 instead of 110)</code></pre>\n      </div>\n    </div>\n<h3 id=\"multi-site-load-balancing\" class=\"mobile-header\">Multi-Site Load Balancing</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure multi-site load balancing\nsudo tee /etc/haproxy/haproxy-multisite.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    log stdout local0\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    timeout connect 5s\n    timeout client 30s\n    timeout server 30s\n\n# Frontend for multi-site routing\nfrontend multisite_frontend\n    bind *:443 ssl crt /etc/haproxy/ssl/ alpn h2,http/1.1\n    \n    # Site detection based on headers\n    acl is_site_a hdr(host) -i site-a.example.com\n    acl is_site_b hdr(host) -i site-b.example.com\n    acl is_site_c hdr(host) -i site-c.example.com\n    \n    # Geographic routing based on source IP\n    acl is_americas src 10.1.0.0/16\n    acl is_europe src 10.2.0.0/16\n    acl is_asia src 10.3.0.0/16\n    \n    # Route to appropriate backends\n    use_backend site_a_americas if is_site_a is_americas\n    use_backend site_a_europe if is_site_a is_europe\n    use_backend site_a_asia if is_site_a is_asia\n    use_backend site_b_backend if is_site_b\n    use_backend site_c_backend if is_site_c\n    \n    default_backend default_site\n\n# Regional backends\nbackend site_a_americas\n    balance leastconn\n    option httpchk GET /health\n    server site-a-us-1 us-east-1.example.com:80 check\n    server site-a-us-2 us-west-2.example.com:80 check\n\nbackend site_a_europe\n    balance leastconn\n    option httpchk GET /health\n    server site-a-eu-1 eu-west-1.example.com:80 check\n    server site-a-eu-2 eu-central-1.example.com:80 check\n\nbackend site_a_asia\n    balance leastconn\n    option httpchk GET /health\n    server site-a-ap-1 ap-southeast-1.example.com:80 check\n    server site-a-ap-2 ap-northeast-1.example.com:80 check\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-observability\" class=\"mobile-header\">Monitoring and Observability</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure HAProxy for Prometheus scraping\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\n# Prometheus metrics endpoint\nfrontend prometheus_frontend\n    bind *:8405\n    http-request use-service prometheus-exporter if { path /metrics }\n    http-request deny\nEOF\n\n# Create HAProxy exporter configuration\nsudo tee /etc/systemd/system/haproxy-exporter.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=HAProxy Exporter for Prometheus\nAfter=network.target\n\n[Service]\nType=simple\nUser=haproxy\nExecStart=/usr/local/bin/haproxy_exporter \\\n    --haproxy.scrape-uri=&quot;http://admin:secure_stats_password@localhost:8404/stats;csv&quot; \\\n    --web.listen-address=&quot;0.0.0.0:9101&quot;\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Download HAProxy exporter\nHAPROXY_EXPORTER_VERSION=&quot;0.15.0&quot;\nwget https://github.com/prometheus/haproxy_exporter/releases/download/v${HAPROXY_EXPORTER_VERSION}/haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64.tar.gz\ntar xzf haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64.tar.gz\nsudo cp haproxy_exporter-${HAPROXY_EXPORTER_VERSION}.linux-amd64/haproxy_exporter /usr/local/bin/\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy-exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"comprehensive-logging\" class=\"mobile-header\">Comprehensive Logging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure rsyslog for HAProxy\nsudo tee /etc/rsyslog.d/49-haproxy.conf &gt; /dev/null &lt;&lt;EOF\n# HAProxy log configuration\n\\$ModLoad imudp\n\\$UDPServerRun 514\n\\$UDPServerAddress 127.0.0.1\n\n# HAProxy logs\nlocal0.*    /var/log/haproxy/haproxy.log\n&amp; stop\n\n# Separate access and error logs\nlocal0.info /var/log/haproxy/access.log\nlocal0.err  /var/log/haproxy/error.log\nlocal0.warning /var/log/haproxy/warning.log\nEOF\n\n# Create log directory\nsudo mkdir -p /var/log/haproxy\nsudo chown syslog:adm /var/log/haproxy\n\n# Configure log rotation\nsudo tee /etc/logrotate.d/haproxy &gt; /dev/null &lt;&lt;EOF\n/var/log/haproxy/*.log {\n    daily\n    rotate 30\n    missingok\n    notifempty\n    compress\n    delaycompress\n    postrotate\n        /bin/kill -HUP \\`cat /var/run/rsyslogd.pid 2&gt;/dev/null\\` 2&gt;/dev/null || true\n    endscript\n}\nEOF\n\nsudo systemctl restart rsyslog\nsudo systemctl reload haproxy</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-level-tuning\" class=\"mobile-header\">System-Level Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel optimization for HAProxy\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;EOF\n# HAProxy performance tuning\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_max_tw_buckets = 400000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 15000 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 16777216\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 65536 16777216\nnet.ipv4.tcp_wmem = 4096 65536 16777216\nfs.file-max = 100000\nvm.swappiness = 1\nEOF\n\nsudo sysctl -p\n\n# Set resource limits\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;EOF\nhaproxy soft nofile 65535\nhaproxy hard nofile 65535\nhaproxy soft nproc 65535\nhaproxy hard nproc 65535\nEOF\n\n# Optimize HAProxy service\nsudo tee /etc/systemd/system/haproxy.service.d/performance.conf &gt; /dev/null &lt;&lt;EOF\n[Service]\nLimitNOFILE=65535\nLimitNPROC=65535\nExecStart=\nExecStart=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock\nExecReload=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -c -q\nExecReload=/bin/kill -USR2 \\$MAINPID\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-performance-configuration\" class=\"mobile-header\">Advanced Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/haproxy/performance.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    # Performance optimization\n    maxconn 40000\n    nbthread 8\n    cpu-map auto:1/1-8 0-7\n    \n    # Memory optimization\n    tune.maxrewrite 1024\n    tune.bufsize 32768\n    \n    # Connection optimization\n    tune.maxaccept 500\n    tune.recv_enough 10000\n    \n    # SSL optimization\n    tune.ssl.default-dh-param 2048\n    tune.ssl.maxrecord 1460\n    tune.ssl.capture-buffer-size 0\n    \n    # Compression\n    tune.comp.maxlevel 6\n\ndefaults\n    # Performance settings\n    maxconn 8000\n    \n    # Timeouts\n    timeout connect 3s\n    timeout client 25s\n    timeout server 25s\n    timeout tunnel 3600s\n    timeout http-keep-alive 1s\n    timeout http-request 15s\n    timeout queue 30s\n    timeout tarpit 60s\n    \n    # Keep-alive optimization\n    option http-keep-alive\n    option prefer-last-server\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/css text/javascript application/javascript application/json application/xml\n\n# High-performance backend configuration\nbackend high_performance_backend\n    balance leastconn\n    option httpchk GET /health\n    http-check expect status 200\n    \n    # Connection pooling\n    option http-reuse always\n    \n    # Server configuration with optimal settings\n    default-server inter 1000 fastinter 500 downinter 2000 rise 2 fall 3 slowstart 30s maxconn 1000 maxqueue 256 weight 100\n    \n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\n    server web4 192.168.1.13:8080 check\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"configuration-management-and-backup\" class=\"mobile-header\">Configuration Management and Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/haproxy-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/haproxy&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{config,ssl,stats,logs}\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/config/haproxy-config-${DATE}.tar.gz \\\n    /etc/haproxy/ \\\n    /etc/systemd/system/haproxy.service* \\\n    /etc/keepalived/\n\n# Backup SSL certificates\ntar -czf ${BACKUP_DIR}/ssl/haproxy-ssl-${DATE}.tar.gz \\\n    /etc/haproxy/ssl/ \\\n    /etc/letsencrypt/\n\n# Backup statistics and runtime state\necho &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock &gt; ${BACKUP_DIR}/stats/haproxy-stats-${DATE}.txt\necho &quot;show info&quot; | socat stdio /run/haproxy/admin.sock &gt; ${BACKUP_DIR}/stats/haproxy-info-${DATE}.txt\necho &quot;show sess&quot; | socat stdio /run/haproxy/admin.sock &gt; ${BACKUP_DIR}/stats/haproxy-sessions-${DATE}.txt\n\n# Backup recent logs\nfind /var/log/haproxy -name &quot;*.log&quot; -mtime -1 -exec tar -czf ${BACKUP_DIR}/logs/haproxy-logs-${DATE}.tar.gz {} +\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://haproxy-backups/ --recursive\naz storage blob upload-batch --source ${BACKUP_DIR} --destination haproxy-backups\ngsutil cp -r ${BACKUP_DIR}/* gs://haproxy-backups/\n\n# Keep only last 15 backups\nfind ${BACKUP_DIR} -name &quot;haproxy-*&quot; -type f -mtime +15 -delete\n\n# Test configuration validity\nhaproxy -c -f /etc/haproxy/haproxy.cfg\n\necho &quot;HAProxy backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-backup.sh\n\n# Schedule daily backups\necho &quot;0 2 * * * root /usr/local/bin/haproxy-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"disaster-recovery-automation\" class=\"mobile-header\">Disaster Recovery Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/haproxy-dr.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nDR_MODE=&quot;${1:-test}&quot;  # test, activate, or deactivate\n\ncase &quot;$DR_MODE&quot; in\n    &quot;test&quot;)\n        echo &quot;Testing DR procedures...&quot;\n        \n        # Test backup restoration\n        LATEST_BACKUP=$(ls -t /backup/haproxy/config/haproxy-config-*.tar.gz | head -1)\n        if [ -n &quot;$LATEST_BACKUP&quot; ]; then\n            echo &quot;✓ Latest backup found: $LATEST_BACKUP&quot;\n        else\n            echo &quot;✗ No backup files found&quot;\n            exit 1\n        fi\n        \n        # Test configuration\n        haproxy -c -f /etc/haproxy/haproxy.cfg\n        echo &quot;✓ Configuration is valid&quot;\n        \n        # Test backend connectivity\n        for backend in $(echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;,BACKEND,&quot; | cut -d, -f1); do\n            echo &quot;Testing backend: $backend&quot;\n            echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;$backend&quot;\n        done\n        \n        echo &quot;DR test completed&quot;\n        ;;\n        \n    &quot;activate&quot;)\n        echo &quot;Activating DR procedures...&quot;\n        \n        # Switch to DR configuration\n        cp /etc/haproxy/haproxy-dr.cfg /etc/haproxy/haproxy.cfg\n        \n        # Reload HAProxy\n        systemctl reload haproxy\n        \n        # Update DNS (example with Route53)\n        aws route53 change-resource-record-sets --hosted-zone-id Z123456789 --change-batch file://dr-dns-update.json\n        \n        echo &quot;DR activated&quot;\n        ;;\n        \n    &quot;deactivate&quot;)\n        echo &quot;Deactivating DR procedures...&quot;\n        \n        # Restore original configuration\n        cp /etc/haproxy/haproxy.cfg.backup /etc/haproxy/haproxy.cfg\n        \n        # Reload HAProxy\n        systemctl reload haproxy\n        \n        # Update DNS back to primary\n        aws route53 change-resource-record-sets --hosted-zone-id Z123456789 --change-batch file://primary-dns-update.json\n        \n        echo &quot;DR deactivated&quot;\n        ;;\n        \n    *)\n        echo &quot;Usage: $0 {test|activate|deactivate}&quot;\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-dr.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-health-checks\" class=\"mobile-header\">Verification and Health Checks</h2>\n<h3 id=\"comprehensive-health-monitoring\" class=\"mobile-header\">Comprehensive Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/haproxy-health-check.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/haproxy-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check HAProxy service status\nif systemctl is-active haproxy &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ HAProxy service is running&quot;\nelse\n    log_message &quot;✗ HAProxy service is not running&quot;\n    exit 1\nfi\n\n# Check configuration validity\nif haproxy -c -f /etc/haproxy/haproxy.cfg &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;✓ HAProxy configuration is valid&quot;\nelse\n    log_message &quot;✗ HAProxy configuration has errors&quot;\n    haproxy -c -f /etc/haproxy/haproxy.cfg\nfi\n\n# Check listening ports\nLISTENING_PORTS=$(netstat -tlnp | grep haproxy | wc -l)\nlog_message &quot;✓ HAProxy is listening on ${LISTENING_PORTS} ports&quot;\n\n# Check backend server health\nBACKEND_STATS=$(echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep -c &quot;,UP,&quot;)\nTOTAL_SERVERS=$(echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep -c &quot;,.*,&quot;)\nlog_message &quot;✓ ${BACKEND_STATS}/${TOTAL_SERVERS} backend servers are healthy&quot;\n\n# Check SSL certificate expiry\nif [ -d /etc/haproxy/ssl ]; then\n    for cert in /etc/haproxy/ssl/*.pem; do\n        if [ -f &quot;$cert&quot; ]; then\n            EXPIRY=$(openssl x509 -in &quot;$cert&quot; -noout -dates | grep notAfter | cut -d= -f2)\n            EXPIRY_EPOCH=$(date -d &quot;$EXPIRY&quot; +%s)\n            CURRENT_EPOCH=$(date +%s)\n            DAYS_TO_EXPIRY=$(( (EXPIRY_EPOCH - CURRENT_EPOCH) / 86400 ))\n            \n            if [ $DAYS_TO_EXPIRY -lt 30 ]; then\n                log_message &quot;⚠ SSL certificate $(basename $cert) expires in ${DAYS_TO_EXPIRY} days&quot;\n            else\n                log_message &quot;✓ SSL certificate $(basename $cert) expires in ${DAYS_TO_EXPIRY} days&quot;\n            fi\n        fi\n    done\nfi\n\n# Check memory usage\nMEMORY_USAGE=$(ps -o pid,vsz,rss,comm -C haproxy | tail -1 | awk &#039;{print $3/1024}&#039;)\nlog_message &quot;ℹ HAProxy memory usage: ${MEMORY_USAGE}MB&quot;\n\n# Check connection statistics\nCURRENT_CONNS=$(echo &quot;show info&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;CurrConns&quot; | cut -d: -f2 | tr -d &#039; &#039;)\nMAX_CONNS=$(echo &quot;show info&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;MaxConn&quot; | cut -d: -f2 | tr -d &#039; &#039;)\nlog_message &quot;ℹ Current connections: ${CURRENT_CONNS}/${MAX_CONNS}&quot;\n\n# Check for any backend servers that are down\nDOWN_SERVERS=$(echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;,DOWN,&quot; | wc -l)\nif [ $DOWN_SERVERS -gt 0 ]; then\n    log_message &quot;⚠ ${DOWN_SERVERS} backend servers are down&quot;\n    echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep &quot;,DOWN,&quot; | while IFS=, read pxname svname; do\n        log_message &quot;  - ${pxname}/${svname} is DOWN&quot;\n    done\nfi\n\nlog_message &quot;HAProxy health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-health-check.sh\n\n# Schedule health checks every 5 minutes\necho &quot;*/5 * * * * root /usr/local/bin/haproxy-health-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"load-testing-and-performance-validation\" class=\"mobile-header\">Load Testing and Performance Validation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/haproxy-load-test.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nTEST_RESULTS=&quot;/tmp/haproxy-load-test-$(date +%Y%m%d_%H%M%S).txt&quot;\nTEST_URL=&quot;https://example.com&quot;\nCONCURRENT_USERS=100\nTEST_DURATION=60\n\necho &quot;HAProxy Load Test Results&quot; &gt; ${TEST_RESULTS}\necho &quot;========================&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Date: $(date)&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Target URL: ${TEST_URL}&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Concurrent Users: ${CONCURRENT_USERS}&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Test Duration: ${TEST_DURATION}s&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;&quot; &gt;&gt; ${TEST_RESULTS}\n\n# Install testing tools if not available\nif ! command -v ab &amp;&gt; /dev/null; then\n    apt-get update &amp;&amp; apt-get install -y apache2-utils\nfi\n\nif ! command -v wrk &amp;&gt; /dev/null; then\n    git clone https://github.com/wg/wrk.git /tmp/wrk\n    cd /tmp/wrk &amp;&amp; make &amp;&amp; cp wrk /usr/local/bin/\nfi\n\n# Run Apache Bench test\necho &quot;Apache Bench Results:&quot; &gt;&gt; ${TEST_RESULTS}\nab -n 10000 -c ${CONCURRENT_USERS} -k ${TEST_URL}/ &gt;&gt; ${TEST_RESULTS} 2&gt;&amp;1\n\necho &quot;&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;WRK Results:&quot; &gt;&gt; ${TEST_RESULTS}\nwrk -t4 -c${CONCURRENT_USERS} -d${TEST_DURATION}s --latency ${TEST_URL}/ &gt;&gt; ${TEST_RESULTS}\n\n# Capture HAProxy stats during test\necho &quot;&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;HAProxy Statistics During Test:&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;show info&quot; | socat stdio /run/haproxy/admin.sock &gt;&gt; ${TEST_RESULTS}\necho &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock &gt;&gt; ${TEST_RESULTS}\n\necho &quot;&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Load test completed at: $(date)&quot; &gt;&gt; ${TEST_RESULTS}\n\necho &quot;Load test completed. Results: ${TEST_RESULTS}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-load-test.sh</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration-cross-platform\" class=\"mobile-header\">Firewall Configuration (Cross-Platform)</h2>\n<h3 id=\"security-rules\" class=\"mobile-header\">Security Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 80/tcp comment &#039;HTTP&#039;\nsudo ufw allow 443/tcp comment &#039;HTTPS&#039; \nsudo ufw allow from 192.168.1.0/24 to any port 8404 comment &#039;Stats interface - internal only&#039;\nsudo ufw allow from 192.168.1.0/24 to any port 9101 comment &#039;Prometheus exporter - internal only&#039;\nsudo ufw deny 8404 comment &#039;Block stats from public&#039;\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS/Fedora)\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --permanent --new-zone=haproxy-mgmt\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-source=192.168.1.0/24\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-port=8404/tcp\nsudo firewall-cmd --permanent --zone=haproxy-mgmt --add-port=9101/tcp\nsudo firewall-cmd --reload\n\n# iptables (Universal)\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 8404 -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 192.168.1.0/24 --dport 9101 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 8404 -j DROP\nsudo iptables -A INPUT -p tcp --dport 9101 -j DROP\n\n# Save iptables rules\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save</code></pre>\n      </div>\n    </div>\n<h3 id=\"ddos-protection-configuration\" class=\"mobile-header\">DDoS Protection Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/haproxy/ddos-protection.cfg &gt; /dev/null &lt;&lt;EOF\n# DDoS Protection Configuration\n\nglobal\n    # Stick tables for tracking\n    tune.stick-table.enable 1\n\nfrontend ddos_protection\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/ssl/\n    \n    # Track client behavior\n    stick-table type ip size 1m expire 5m store gpc0,gpc1,http_req_rate(10s),http_err_rate(10s),conn_rate(10s),bytes_out_rate(10s)\n    \n    # Track requests\n    http-request track-sc0 src\n    \n    # Rate limiting rules\n    acl abuse_request_rate sc_http_req_rate(0) gt 100\n    acl abuse_connection_rate sc_conn_rate(0) gt 20\n    acl abuse_error_rate sc_http_err_rate(0) gt 10\n    acl abuse_bandwidth sc_bytes_out_rate(0) gt 10000000  # 10MB/s\n    \n    # Geographic blocking (requires GeoIP)\n    # acl blocked_countries src,map_ip(/etc/haproxy/geoip-country.map) -i CN RU\n    \n    # User-Agent filtering\n    acl bad_user_agent hdr_sub(User-Agent) -i &quot;sqlmap&quot; &quot;nikto&quot; &quot;nmap&quot; &quot;masscan&quot; &quot;zmap&quot;\n    acl empty_user_agent hdr_cnt(User-Agent) eq 0\n    \n    # HTTP method filtering\n    acl allowed_methods method GET POST PUT DELETE HEAD OPTIONS PATCH\n    \n    # Deny rules\n    http-request deny if abuse_request_rate\n    http-request deny if abuse_connection_rate\n    http-request deny if abuse_error_rate\n    http-request deny if abuse_bandwidth\n    http-request deny if bad_user_agent\n    http-request deny if empty_user_agent\n    http-request deny if !allowed_methods\n    # http-request deny if blocked_countries\n    \n    # Tarpit suspicious clients\n    http-request tarpit if { sc_http_req_rate(0) gt 50 }\n    \n    default_backend web_servers\n\n# Clean backend\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health\n    \n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"runtime-management-and-monitoring\" class=\"mobile-header\">Runtime Management and Monitoring</h2>\n<h3 id=\"advanced-runtime-commands\" class=\"mobile-header\">Advanced Runtime Commands</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create HAProxy management script\nsudo tee /usr/local/bin/haproxy-manage.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHAPROXY_SOCKET=&quot;/run/haproxy/admin.sock&quot;\n\ncase &quot;$1&quot; in\n    &quot;status&quot;)\n        echo &quot;=== HAProxy Status ===&quot;\n        echo &quot;show info&quot; | socat stdio ${HAPROXY_SOCKET}\n        echo &quot;&quot;\n        echo &quot;=== Server Status ===&quot;\n        echo &quot;show stat&quot; | socat stdio ${HAPROXY_SOCKET} | column -t -s &quot;,&quot;\n        ;;\n    \n    &quot;enable&quot;)\n        if [ -z &quot;$2&quot; ] || [ -z &quot;$3&quot; ]; then\n            echo &quot;Usage: $0 enable &lt;backend&gt; &lt;server&gt;&quot;\n            exit 1\n        fi\n        echo &quot;enable server $2/$3&quot; | socat stdio ${HAPROXY_SOCKET}\n        echo &quot;Server $2/$3 enabled&quot;\n        ;;\n    \n    &quot;disable&quot;)\n        if [ -z &quot;$2&quot; ] || [ -z &quot;$3&quot; ]; then\n            echo &quot;Usage: $0 disable &lt;backend&gt; &lt;server&gt;&quot;\n            exit 1\n        fi\n        echo &quot;disable server $2/$3&quot; | socat stdio ${HAPROXY_SOCKET}\n        echo &quot;Server $2/$3 disabled&quot;\n        ;;\n    \n    &quot;weight&quot;)\n        if [ -z &quot;$2&quot; ] || [ -z &quot;$3&quot; ] || [ -z &quot;$4&quot; ]; then\n            echo &quot;Usage: $0 weight &lt;backend&gt; &lt;server&gt; &lt;weight&gt;&quot;\n            exit 1\n        fi\n        echo &quot;set weight $2/$3 $4&quot; | socat stdio ${HAPROXY_SOCKET}\n        echo &quot;Weight for $2/$3 set to $4&quot;\n        ;;\n    \n    &quot;sessions&quot;)\n        echo &quot;=== Active Sessions ===&quot;\n        echo &quot;show sess&quot; | socat stdio ${HAPROXY_SOCKET}\n        ;;\n    \n    &quot;errors&quot;)\n        echo &quot;=== Recent Errors ===&quot;\n        echo &quot;show errors&quot; | socat stdio ${HAPROXY_SOCKET}\n        ;;\n    \n    &quot;reload&quot;)\n        echo &quot;Reloading HAProxy configuration...&quot;\n        if haproxy -c -f /etc/haproxy/haproxy.cfg; then\n            systemctl reload haproxy\n            echo &quot;Configuration reloaded successfully&quot;\n        else\n            echo &quot;Configuration has errors, reload aborted&quot;\n            exit 1\n        fi\n        ;;\n    \n    &quot;drain&quot;)\n        if [ -z &quot;$2&quot; ] || [ -z &quot;$3&quot; ]; then\n            echo &quot;Usage: $0 drain &lt;backend&gt; &lt;server&gt;&quot;\n            exit 1\n        fi\n        echo &quot;set server $2/$3 state drain&quot; | socat stdio ${HAPROXY_SOCKET}\n        echo &quot;Server $2/$3 is being drained&quot;\n        \n        # Wait for connections to finish\n        while [ $(echo &quot;show stat&quot; | socat stdio ${HAPROXY_SOCKET} | grep &quot;$2,$3&quot; | cut -d, -f5) -gt 0 ]; do\n            echo &quot;Waiting for connections to finish...&quot;\n            sleep 5\n        done\n        echo &quot;Server $2/$3 has been drained&quot;\n        ;;\n    \n    *)\n        echo &quot;Usage: $0 {status|enable|disable|weight|sessions|errors|reload|drain} [options]&quot;\n        echo &quot;&quot;\n        echo &quot;Examples:&quot;\n        echo &quot;  $0 status&quot;\n        echo &quot;  $0 enable web_servers web1&quot;\n        echo &quot;  $0 disable web_servers web1&quot;\n        echo &quot;  $0 weight web_servers web1 50&quot;\n        echo &quot;  $0 drain web_servers web1&quot;\n        echo &quot;  $0 sessions&quot;\n        echo &quot;  $0 errors&quot;\n        echo &quot;  $0 reload&quot;\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-manage.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"automated-log-analysis\" class=\"mobile-header\">Automated Log Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/haproxy-log-analysis.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOG_FILE=&quot;/var/log/haproxy/haproxy.log&quot;\nANALYSIS_DIR=&quot;/var/log/haproxy-analysis&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${ANALYSIS_DIR}\n\n# Top client IPs\necho &quot;Top Client IPs - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/top-clients-${DATE}.txt\nawk &#039;{print $6}&#039; ${LOG_FILE} | sort | uniq -c | sort -nr | head -20 &gt;&gt; ${ANALYSIS_DIR}/top-clients-${DATE}.txt\n\n# Response time analysis\necho &quot;Response Time Analysis - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/response-times-${DATE}.txt\nawk &#039;{print $11}&#039; ${LOG_FILE} | grep -v &#039;^-$&#039; | sort -n | tail -100 &gt;&gt; ${ANALYSIS_DIR}/response-times-${DATE}.txt\n\n# Error analysis\necho &quot;Error Analysis - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/errors-${DATE}.txt\nawk &#039;$10 &gt;= 400 {print $0}&#039; ${LOG_FILE} | tail -100 &gt;&gt; ${ANALYSIS_DIR}/errors-${DATE}.txt\n\n# Backend server analysis\necho &quot;Backend Server Performance - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/backend-performance-${DATE}.txt\nawk &#039;{print $8}&#039; ${LOG_FILE} | sort | uniq -c | sort -nr &gt;&gt; ${ANALYSIS_DIR}/backend-performance-${DATE}.txt\n\n# SSL/TLS analysis\necho &quot;SSL/TLS Analysis - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/ssl-analysis-${DATE}.txt\ngrep &quot;SSL&quot; ${LOG_FILE} | tail -50 &gt;&gt; ${ANALYSIS_DIR}/ssl-analysis-${DATE}.txt\n\n# Generate summary report\ncat &gt; ${ANALYSIS_DIR}/summary-${DATE}.txt &lt;&lt;EOL\nHAProxy Log Analysis Summary - ${DATE}\n=====================================\n\nTotal Requests: $(wc -l &lt; ${LOG_FILE})\nUnique IPs: $(awk &#039;{print $6}&#039; ${LOG_FILE} | sort -u | wc -l)\n4xx Errors: $(awk &#039;$10 &gt;= 400 &amp;&amp; $10 &lt; 500 {print $0}&#039; ${LOG_FILE} | wc -l)\n5xx Errors: $(awk &#039;$10 &gt;= 500 {print $0}&#039; ${LOG_FILE} | wc -l)\n\nAverage Response Time: $(awk &#039;{sum += $11; count++} END {print sum/count}&#039; ${LOG_FILE})ms\n\nTop 5 Requested URLs:\n$(awk &#039;{print $12}&#039; ${LOG_FILE} | sort | uniq -c | sort -nr | head -5)\n\nAnalysis completed at: $(date)\nEOL\n\necho &quot;Log analysis completed. Reports in: ${ANALYSIS_DIR}/&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/haproxy-log-analysis.sh\n\n# Schedule daily log analysis\necho &quot;0 6 * * * root /usr/local/bin/haproxy-log-analysis.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check HAProxy process status\nps aux | grep haproxy\nsystemctl status haproxy\n\n# Configuration validation\nhaproxy -c -f /etc/haproxy/haproxy.cfg\nhaproxy -c -V -f /etc/haproxy/haproxy.cfg\n\n# Socket connectivity test\nsocat - /run/haproxy/admin.sock\necho &quot;show info&quot; | socat stdio /run/haproxy/admin.sock\n\n# Backend server connectivity test\nfor server in 192.168.1.10 192.168.1.11 192.168.1.12; do\n    echo &quot;Testing $server...&quot;\n    nc -zv $server 8080\n    curl -I http://$server:8080/health\ndone\n\n# SSL certificate issues\nopenssl x509 -in /etc/haproxy/ssl/example.com.pem -text -noout\nopenssl verify -CAfile /etc/haproxy/ssl/ca.crt /etc/haproxy/ssl/example.com.pem\n\n# Memory usage debugging\npmap -x $(pgrep haproxy)\ncat /proc/$(pgrep haproxy)/status | grep -E &quot;(VmSize|VmRSS|VmData|VmStk)&quot;\n\n# Network debugging\nss -tulpn | grep haproxy\nnetstat -tulpn | grep haproxy\nlsof -i :80,443,8404\n\n# Log debugging\ntail -f /var/log/haproxy/haproxy.log\njournalctl -u haproxy -f\n\n# Performance debugging\necho &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep -v &quot;^#&quot;\necho &quot;show sess&quot; | socat stdio /run/haproxy/admin.sock\necho &quot;show pools&quot; | socat stdio /run/haproxy/admin.sock\n\n# Configuration debugging\nhaproxy -vv\nhaproxy -dM -f /etc/haproxy/haproxy.cfg  # Don&#039;t use in production\n\n# Check for core dumps\nfind /var/crash -name &quot;haproxy*&quot; 2&gt;/dev/null\nfind /var/lib/systemd/coredump -name &quot;*haproxy*&quot; 2&gt;/dev/null</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nsudo systemctl edit haproxy.service\n# Add:\n[Service]\nExecStart=\nExecStart=/usr/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid -S /run/haproxy-master.sock -d\n\nsudo systemctl daemon-reload\nsudo systemctl restart haproxy\n\n# Real-time connection monitoring\nwatch -n 1 &#039;echo &quot;show stat&quot; | socat stdio /run/haproxy/admin.sock | grep -E &quot;FRONTEND|BACKEND&quot; | column -t -s &quot;,&quot;&#039;\n\n# TCP dump for network analysis\ntcpdump -i any -w haproxy-traffic.pcap port 80 or port 443\ntcpdump -i any -w backend-traffic.pcap host 192.168.1.10\n\n# Strace HAProxy process\nstrace -p $(pgrep haproxy) -e trace=network\n\n# Monitor file descriptors\nlsof -p $(pgrep haproxy) | wc -l\ncat /proc/$(pgrep haproxy)/limits | grep &quot;Max open files&quot;\n\n# Check shared memory segments\nipcs -m | grep haproxy\n\n# Monitor syscalls\nperf trace -p $(pgrep haproxy)</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.haproxy.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://cbonte.github.io/haproxy-dconv/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HAProxy Configuration Manual</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.haproxy.com/documentation/hapee/latest/configuration/best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.haproxy.com/blog/haproxy-performance-tuning/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.haproxy.com/solutions/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discourse.haproxy.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"29 min","wordCount":5710,"lastBuilt":"2025-09-15T06:16:21.259Z"}]},"__N_SSG":true}