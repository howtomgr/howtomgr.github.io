{"pageProps":{"category":{"key":"media","name":"Media Servers","description":"Media streaming and entertainment platforms","icon":"ðŸŽ¬","color":"#6272a4","keywords":["plex","jellyfin","sonarr","radarr","lidarr","prowlarr"]},"guides":[{"name":"jellyfin","displayName":"Jellyfin","slug":"jellyfin","description":"Repo for jellyfin","category":"media","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jellyfin","updatedAt":"2025-09-14T01:30:13Z","createdAt":"2025-09-08T03:08:57Z","readmeRaw":"# Jellyfin Installation Guide\n\nOpen-source media server for managing and streaming your personal media collection. Modern alternative to Plex with no licensing restrictions and complete control over your media library.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for transcoding\n- GPU recommended for hardware transcoding (Intel Quick Sync, NVIDIA, AMD)\n- Storage space for media library\n- Network connectivity for remote access\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install prerequisite packages\nsudo apt install -y curl gnupg\n\n# Add Jellyfin repository\ncurl -fsSL https://repo.jellyfin.org/install-debuntu.sh | sudo bash\n\n# Install Jellyfin\nsudo apt install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo ufw allow 8096/tcp comment 'Jellyfin HTTP'\nsudo ufw allow 8920/tcp comment 'Jellyfin HTTPS'\n\n# Verify installation\nsudo systemctl status jellyfin\ncurl -I http://localhost:8096\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Add Jellyfin repository\nsudo rpm --import https://repo.jellyfin.org/jellyfin_team.gpg.key\n\nsudo tee /etc/yum.repos.d/jellyfin.repo > /dev/null <<EOF\n[jellyfin]\nname=Jellyfin Repository\nbaseurl=https://repo.jellyfin.org/releases/server/centos/versions/stable/server/\\$basearch/\nenabled=1\ngpgcheck=1\ngpgkey=https://repo.jellyfin.org/jellyfin_team.gpg.key\nEOF\n\n# Install Jellyfin\nsudo yum install -y jellyfin-server jellyfin-web\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n```\n\n## Configuration\n\n### Hardware Transcoding Setup\n```bash\n# Install hardware transcoding drivers\n# Intel Quick Sync\nsudo apt install -y intel-media-va-driver-non-free\n\n# Add jellyfin user to video group\nsudo usermod -aG video,render jellyfin\n\n# Verify hardware access\nls -la /dev/dri/\n```\n\n### NGINX Reverse Proxy\n```bash\nsudo tee /etc/nginx/sites-available/jellyfin > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name jellyfin.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jellyfin.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jellyfin.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jellyfin.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:8096;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/jellyfin /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n## Backup and Monitoring\n\n### Backup Strategy\n```bash\nsudo tee /usr/local/bin/jellyfin-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/jellyfin\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup Jellyfin configuration and database\nsystemctl stop jellyfin\ntar -czf ${BACKUP_DIR}/jellyfin-${DATE}.tar.gz -C /var/lib/jellyfin .\nsystemctl start jellyfin\n\necho \"Jellyfin backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-backup.sh\necho \"0 2 * * * root /usr/local/bin/jellyfin-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Health Monitoring\n```bash\nsudo tee /usr/local/bin/jellyfin-health.sh > /dev/null <<'EOF'\n#!/bin/bash\nLOG=\"/var/log/jellyfin-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active jellyfin >/dev/null; then\n    log_message \"âœ“ Jellyfin service running\"\nelse\n    log_message \"âœ— Jellyfin service not running\"\nfi\n\n# Check web interface\nif curl -f http://localhost:8096/health >/dev/null 2>&1; then\n    log_message \"âœ“ Web interface responding\"\nelse\n    log_message \"âœ— Web interface not responding\"\nfi\n\nlog_message \"Health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-health.sh\necho \"*/15 * * * * root /usr/local/bin/jellyfin-health.sh\" | sudo tee -a /etc/crontab\n```\n\n## Additional Resources\n\n- [Jellyfin Documentation](https://jellyfin.org/docs/)\n- [Hardware Acceleration Guide](https://jellyfin.org/docs/general/administration/hardware-acceleration/)\n- [Jellyfin Community](https://forum.jellyfin.org/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"jellyfin-installation-guide\" class=\"mobile-header\">Jellyfin Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source media server for managing and streaming your personal media collection. Modern alternative to Plex with no licensing restrictions and complete control over your media library.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for transcoding</li>\n<li class=\"mobile-list-item\">GPU recommended for hardware transcoding (Intel Quick Sync, NVIDIA, AMD)</li>\n<li class=\"mobile-list-item\">Storage space for media library</li>\n<li class=\"mobile-list-item\">Network connectivity for remote access</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install prerequisite packages\nsudo apt install -y curl gnupg\n\n# Add Jellyfin repository\ncurl -fsSL https://repo.jellyfin.org/install-debuntu.sh | sudo bash\n\n# Install Jellyfin\nsudo apt install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo ufw allow 8096/tcp comment &#039;Jellyfin HTTP&#039;\nsudo ufw allow 8920/tcp comment &#039;Jellyfin HTTPS&#039;\n\n# Verify installation\nsudo systemctl status jellyfin\ncurl -I http://localhost:8096</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Jellyfin repository\nsudo rpm --import https://repo.jellyfin.org/jellyfin_team.gpg.key\n\nsudo tee /etc/yum.repos.d/jellyfin.repo &gt; /dev/null &lt;&lt;EOF\n[jellyfin]\nname=Jellyfin Repository\nbaseurl=https://repo.jellyfin.org/releases/server/centos/versions/stable/server/\\$basearch/\nenabled=1\ngpgcheck=1\ngpgkey=https://repo.jellyfin.org/jellyfin_team.gpg.key\nEOF\n\n# Install Jellyfin\nsudo yum install -y jellyfin-server jellyfin-web\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"hardware-transcoding-setup\" class=\"mobile-header\">Hardware Transcoding Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install hardware transcoding drivers\n# Intel Quick Sync\nsudo apt install -y intel-media-va-driver-non-free\n\n# Add jellyfin user to video group\nsudo usermod -aG video,render jellyfin\n\n# Verify hardware access\nls -la /dev/dri/</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy\" class=\"mobile-header\">NGINX Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/nginx/sites-available/jellyfin &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 80;\n    server_name jellyfin.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jellyfin.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jellyfin.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jellyfin.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:8096;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/jellyfin /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-monitoring\" class=\"mobile-header\">Backup and Monitoring</h2>\n<h3 id=\"backup-strategy\" class=\"mobile-header\">Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/jellyfin-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/jellyfin&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup Jellyfin configuration and database\nsystemctl stop jellyfin\ntar -czf ${BACKUP_DIR}/jellyfin-${DATE}.tar.gz -C /var/lib/jellyfin .\nsystemctl start jellyfin\n\necho &quot;Jellyfin backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-backup.sh\necho &quot;0 2 * * * root /usr/local/bin/jellyfin-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/jellyfin-health.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOG=&quot;/var/log/jellyfin-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active jellyfin &gt;/dev/null; then\n    log_message &quot;âœ“ Jellyfin service running&quot;\nelse\n    log_message &quot;âœ— Jellyfin service not running&quot;\nfi\n\n# Check web interface\nif curl -f http://localhost:8096/health &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ Web interface responding&quot;\nelse\n    log_message &quot;âœ— Web interface not responding&quot;\nfi\n\nlog_message &quot;Health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-health.sh\necho &quot;*/15 * * * * root /usr/local/bin/jellyfin-health.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://jellyfin.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jellyfin Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://jellyfin.org/docs/general/administration/hardware-acceleration/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Hardware Acceleration Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forum.jellyfin.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jellyfin Community</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"3 min","wordCount":507,"lastBuilt":"2025-09-15T06:16:20.884Z"},{"name":"plex","displayName":"Plex","slug":"plex","description":"Repo for plex","category":"media","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/plex","updatedAt":"2025-09-14T01:30:51Z","createdAt":"2025-09-08T03:14:20Z","readmeRaw":"# Plex Media Server Installation Guide\n\nPremium media server for organizing and streaming personal media collections. Industry-leading platform with advanced features including hardware transcoding, remote access, and mobile apps.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for transcoding\n- GPU recommended for hardware transcoding\n- Storage space for media library\n- Plex account (free signup required)\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Download Plex Media Server\nwget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/debian/plexmediaserver_1.32.8.7639-fb6452ebf_amd64.deb\n\n# Install Plex\nsudo dpkg -i plexmediaserver_*.deb\nsudo apt-get install -f  # Fix any dependency issues\n\n# Enable and start service\nsudo systemctl enable --now plexmediaserver\n\n# Configure firewall\nsudo ufw allow 32400/tcp comment 'Plex Media Server'\nsudo ufw allow 1900/udp comment 'Plex DLNA'\n\n# Verify installation\nsudo systemctl status plexmediaserver\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Download Plex Media Server\nwget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/redhat/plexmediaserver-1.32.8.7639-fb6452ebf.x86_64.rpm\n\n# Install Plex\nsudo yum localinstall -y plexmediaserver-*.rpm\n\n# Enable and start service\nsudo systemctl enable --now plexmediaserver\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=32400/tcp\nsudo firewall-cmd --reload\n```\n\n### Docker Installation\n```bash\n# Create Plex directories\nmkdir -p ~/plex/{config,media}\n\n# Run Plex container\ndocker run -d \\\n  --name plex \\\n  --restart unless-stopped \\\n  --net=host \\\n  -e TZ=\"America/New_York\" \\\n  -e PLEX_CLAIM=\"claim-your-token-here\" \\\n  -v ~/plex/config:/config \\\n  -v ~/plex/media:/data \\\n  --device /dev/dri:/dev/dri \\\n  plexinc/pms-docker:latest\n```\n\n## Configuration\n\n### Media Library Setup\n```bash\n# Create media directory structure\nsudo mkdir -p /media/{movies,tv-shows,music}\nsudo chown -R plex:plex /media\nsudo chmod -R 755 /media\n\n# Hardware transcoding setup\nsudo usermod -aG video plex\nls -la /dev/dri/\n```\n\n### Security and Backup\n```bash\n# NGINX reverse proxy\nsudo tee /etc/nginx/sites-available/plex > /dev/null <<EOF\nserver {\n    listen 443 ssl http2;\n    server_name plex.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/plex.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/plex.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:32400;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n}\nEOF\n\n# Backup strategy\nsudo tee /usr/local/bin/plex-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/plex\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\nsudo systemctl stop plexmediaserver\nsudo tar -czf ${BACKUP_DIR}/plex-${DATE}.tar.gz -C /var/lib/plexmediaserver .\nsudo systemctl start plexmediaserver\n\necho \"Plex backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/plex-backup.sh\necho \"0 1 * * * root /usr/local/bin/plex-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Additional Resources\n\n- [Plex Support](https://support.plex.tv/)\n- [Plex Installation Guide](https://support.plex.tv/articles/200288586-installation/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"plex-media-server-installation-guide\" class=\"mobile-header\">Plex Media Server Installation Guide</h1>\n<p class=\"mobile-paragraph\">Premium media server for organizing and streaming personal media collections. Industry-leading platform with advanced features including hardware transcoding, remote access, and mobile apps.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for transcoding</li>\n<li class=\"mobile-list-item\">GPU recommended for hardware transcoding</li>\n<li class=\"mobile-list-item\">Storage space for media library</li>\n<li class=\"mobile-list-item\">Plex account (free signup required)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Download Plex Media Server\nwget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/debian/plexmediaserver_1.32.8.7639-fb6452ebf_amd64.deb\n\n# Install Plex\nsudo dpkg -i plexmediaserver_*.deb\nsudo apt-get install -f  # Fix any dependency issues\n\n# Enable and start service\nsudo systemctl enable --now plexmediaserver\n\n# Configure firewall\nsudo ufw allow 32400/tcp comment &#039;Plex Media Server&#039;\nsudo ufw allow 1900/udp comment &#039;Plex DLNA&#039;\n\n# Verify installation\nsudo systemctl status plexmediaserver</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Plex Media Server\nwget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/redhat/plexmediaserver-1.32.8.7639-fb6452ebf.x86_64.rpm\n\n# Install Plex\nsudo yum localinstall -y plexmediaserver-*.rpm\n\n# Enable and start service\nsudo systemctl enable --now plexmediaserver\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=32400/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Plex directories\nmkdir -p ~/plex/{config,media}\n\n# Run Plex container\ndocker run -d \\\n  --name plex \\\n  --restart unless-stopped \\\n  --net=host \\\n  -e TZ=&quot;America/New_York&quot; \\\n  -e PLEX_CLAIM=&quot;claim-your-token-here&quot; \\\n  -v ~/plex/config:/config \\\n  -v ~/plex/media:/data \\\n  --device /dev/dri:/dev/dri \\\n  plexinc/pms-docker:latest</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"media-library-setup\" class=\"mobile-header\">Media Library Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create media directory structure\nsudo mkdir -p /media/{movies,tv-shows,music}\nsudo chown -R plex:plex /media\nsudo chmod -R 755 /media\n\n# Hardware transcoding setup\nsudo usermod -aG video plex\nls -la /dev/dri/</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-and-backup\" class=\"mobile-header\">Security and Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># NGINX reverse proxy\nsudo tee /etc/nginx/sites-available/plex &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 443 ssl http2;\n    server_name plex.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/plex.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/plex.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:32400;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n}\nEOF\n\n# Backup strategy\nsudo tee /usr/local/bin/plex-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/plex&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\nsudo systemctl stop plexmediaserver\nsudo tar -czf ${BACKUP_DIR}/plex-${DATE}.tar.gz -C /var/lib/plexmediaserver .\nsudo systemctl start plexmediaserver\n\necho &quot;Plex backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/plex-backup.sh\necho &quot;0 1 * * * root /usr/local/bin/plex-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://support.plex.tv/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Plex Support</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://support.plex.tv/articles/200288586-installation/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Plex Installation Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"2 min","wordCount":389,"lastBuilt":"2025-09-15T06:16:18.700Z"}]},"__N_SSG":true}