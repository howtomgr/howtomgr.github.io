{"pageProps":{"category":{"key":"security","name":"Security","description":"Security tools and authentication systems","icon":"ðŸ”’","color":"#ff5555","keywords":["vault","authelia","keycloak","pihole","fail2ban","wireguard","openvpn"]},"guides":[{"name":"fail2ban","displayName":"Fail2ban","slug":"fail2ban","description":"Repo for fail2ban","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/fail2ban","updatedAt":"2025-09-08T03:07:35Z","createdAt":"2025-09-08T03:07:24Z","readmeRaw":"## ðŸ‘‹ Welcome to fail2ban ðŸš€  \n\nfail2ban README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-fail2ban\" class=\"mobile-header\">ðŸ‘‹ Welcome to fail2ban ðŸš€  </h2>\n<p class=\"mobile-paragraph\">fail2ban README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T00:58:31.199Z"},{"name":"keycloak","displayName":"Keycloak","slug":"keycloak","description":"Repo for keycloak","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/keycloak","updatedAt":"2025-09-08T03:10:05Z","createdAt":"2025-09-08T03:09:55Z","readmeRaw":"## ðŸ‘‹ Welcome to keycloak ðŸš€  \n\nkeycloak README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-keycloak\" class=\"mobile-header\">ðŸ‘‹ Welcome to keycloak ðŸš€  </h2>\n<p class=\"mobile-paragraph\">keycloak README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T00:58:29.022Z"},{"name":"openvpn","displayName":"Openvpn","slug":"openvpn","description":"Repo for openvpn","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/openvpn","updatedAt":"2025-09-08T03:13:07Z","createdAt":"2025-09-08T03:12:57Z","readmeRaw":"## ðŸ‘‹ Welcome to openvpn ðŸš€  \n\nopenvpn README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-openvpn\" class=\"mobile-header\">ðŸ‘‹ Welcome to openvpn ðŸš€  </h2>\n<p class=\"mobile-paragraph\">openvpn README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T00:58:26.068Z"},{"name":"pihole","displayName":"Pi-hole","slug":"pihole","description":"Repo for pihole","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pihole","updatedAt":"2025-09-08T03:14:18Z","createdAt":"2025-09-08T03:14:08Z","readmeRaw":"## ðŸ‘‹ Welcome to pihole ðŸš€  \n\npihole README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-pihole\" class=\"mobile-header\">ðŸ‘‹ Welcome to pihole ðŸš€  </h2>\n<p class=\"mobile-paragraph\">pihole README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T00:58:25.092Z"},{"name":"vault","displayName":"Vault","slug":"vault","description":"Repo for vault","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/vault","updatedAt":"2025-09-08T03:18:05Z","createdAt":"2025-09-08T03:17:55Z","readmeRaw":"# HashiCorp Vault Installation Guide\n\nSecrets management platform for securely storing and accessing API keys, passwords, certificates, and other sensitive data.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Root or sudo access\n- 2GB RAM minimum, 4GB recommended\n- Persistent storage for Vault data\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y vault\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Vault\nsudo yum install -y vault\n```\n\n### Manual Binary Installation\n```bash\n# Download latest Vault\nVAULT_VERSION=\"1.14.1\"\ncd /tmp\nwget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip vault_${VAULT_VERSION}_linux_amd64.zip\nsudo mv vault /usr/local/bin/\nsudo chmod +x /usr/local/bin/vault\n\n# Create vault user\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\n```\n\n### Using Docker\n```bash\n# Create directories for persistent data\nmkdir -p ~/vault/{data,config,logs}\n\n# Create basic configuration\ncat > ~/vault/config/vault.hcl <<EOF\nui = true\ndisable_mlock = true\n\nstorage \"file\" {\n  path = \"/vault/data\"\n}\n\nlistener \"tcp\" {\n  address     = \"0.0.0.0:8200\"\n  tls_disable = true\n}\n\napi_addr = \"http://0.0.0.0:8200\"\ncluster_addr = \"https://0.0.0.0:8201\"\nEOF\n\n# Run Vault container\ndocker run -d \\\n  --name vault \\\n  --restart unless-stopped \\\n  -p 8200:8200 \\\n  -v ~/vault/data:/vault/data \\\n  -v ~/vault/config:/vault/config \\\n  -v ~/vault/logs:/vault/logs \\\n  --cap-add=IPC_LOCK \\\n  vault:latest server -config=/vault/config/vault.hcl\n```\n\n## Configuration\n\n### Basic Configuration File\n```bash\n# Create Vault configuration directory\nsudo mkdir -p /etc/vault.d\nsudo chown -R vault:vault /etc/vault.d\n\n# Create main configuration\nsudo tee /etc/vault.d/vault.hcl > /dev/null <<EOF\n# Full configuration options: https://www.vaultproject.io/docs/configuration\n\nui = true\ndisable_mlock = true\n\n# Storage backend\nstorage \"file\" {\n  path = \"/opt/vault/data\"\n}\n\n# HTTPS listener\nlistener \"tcp\" {\n  address       = \"0.0.0.0:8200\"\n  tls_cert_file = \"/opt/vault/tls/tls.crt\"\n  tls_key_file  = \"/opt/vault/tls/tls.key\"\n}\n\n# HTTP listener (disable in production)\nlistener \"tcp\" {\n  address     = \"127.0.0.1:8201\"\n  tls_disable = true\n}\n\n# Enterprise license (if applicable)\n# license_path = \"/etc/vault.d/vault.hclic\"\n\n# API address\napi_addr = \"https://127.0.0.1:8200\"\n\n# Cluster address  \ncluster_addr = \"https://127.0.0.1:8201\"\n\n# Logging\nlog_level = \"INFO\"\nlog_file  = \"/var/log/vault/vault.log\"\nEOF\n\n# Create data directory\nsudo mkdir -p /opt/vault/{data,tls}\nsudo chown -R vault:vault /opt/vault\n\n# Create log directory\nsudo mkdir -p /var/log/vault\nsudo chown vault:vault /var/log/vault\n```\n\n### SSL/TLS Certificate Setup\n```bash\n# Generate self-signed certificate for development\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout /opt/vault/tls/tls.key \\\n  -out /opt/vault/tls/tls.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=vault.example.com\"\n\nsudo chown vault:vault /opt/vault/tls/*\nsudo chmod 600 /opt/vault/tls/tls.key\nsudo chmod 644 /opt/vault/tls/tls.crt\n\n# For production, use Let's Encrypt\nsudo apt install -y certbot\nsudo certbot certonly --standalone -d vault.example.com\nsudo cp /etc/letsencrypt/live/vault.example.com/fullchain.pem /opt/vault/tls/tls.crt\nsudo cp /etc/letsencrypt/live/vault.example.com/privkey.pem /opt/vault/tls/tls.key\nsudo chown vault:vault /opt/vault/tls/*\n```\n\n### SystemD Service\n```bash\n# Create systemd service\nsudo tee /etc/systemd/system/vault.service > /dev/null <<EOF\n[Unit]\nDescription=\"HashiCorp Vault - A tool for managing secrets\"\nDocumentation=https://www.vaultproject.io/docs/\nRequires=network-online.target\nAfter=network-online.target\nConditionFileNotEmpty=/etc/vault.d/vault.hcl\nStartLimitIntervalSec=60\nStartLimitBurst=3\n\n[Service]\nType=notify\nUser=vault\nGroup=vault\nProtectSystem=full\nProtectHome=read-only\nPrivateTmp=yes\nPrivateDevices=yes\nSecureBits=keep-caps\nAmbientCapabilities=CAP_IPC_LOCK\nCapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK\nNoNewPrivileges=yes\nExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl\nExecReload=/bin/kill --signal HUP $MAINPID\nKillMode=process\nRestart=on-failure\nRestartSec=5\nTimeoutStopSec=30\nStartLimitInterval=60\nStartLimitBurst=3\nLimitNOFILE=65536\nLimitMEMLOCK=infinity\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start Vault\nsudo systemctl daemon-reload\nsudo systemctl enable --now vault\n```\n\n## Initial Setup and Unsealing\n\n```bash\n# Initialize Vault (one-time setup)\nexport VAULT_ADDR='http://127.0.0.1:8200'\nvault operator init\n\n# Save the unseal keys and root token securely!\n# Example output:\n# Unseal Key 1: key1...\n# Unseal Key 2: key2...\n# Unseal Key 3: key3...\n# Initial Root Token: hvs.token...\n\n# Unseal Vault (required after every restart)\nvault operator unseal KEY1\nvault operator unseal KEY2  \nvault operator unseal KEY3\n\n# Login with root token\nvault auth ROOT_TOKEN\n\n# Check status\nvault status\n```\n\n## Basic Usage\n\n### Authentication Methods\n```bash\n# Enable userpass authentication\nvault auth enable userpass\n\n# Create user\nvault write auth/userpass/users/admin password=secure_password policies=admin\n\n# Enable GitHub authentication\nvault auth enable github\nvault write auth/github/config organization=your-org\n\n# Login with different methods\nvault auth -method=userpass username=admin\nvault auth -method=github token=github_token\n```\n\n### Secrets Management\n```bash\n# Enable KV secrets engine\nvault secrets enable -version=2 kv\n\n# Store secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=secure_password \\\n  api_key=abc123\n\n# Read secrets\nvault kv get secret/myapp/config\nvault kv get -field=password secret/myapp/config\n\n# Update secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=new_password \\\n  api_key=def456\n\n# Delete secrets\nvault kv delete secret/myapp/config\n\n# List secrets\nvault kv list secret/\n```\n\n### Policies\n```bash\n# Create policy file\ncat > admin-policy.hcl <<EOF\n# Admin policy\npath \"*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\nEOF\n\n# Apply policy\nvault policy write admin admin-policy.hcl\n\n# Create read-only policy\ncat > readonly-policy.hcl <<EOF\n# Read-only access to secrets\npath \"secret/data/*\" {\n  capabilities = [\"read\", \"list\"]\n}\nEOF\n\nvault policy write readonly readonly-policy.hcl\n\n# List policies\nvault policy list\nvault policy read admin\n```\n\n### Database Secrets Engine\n```bash\n# Enable database secrets engine\nvault secrets enable database\n\n# Configure MySQL connection\nvault write database/config/mysql \\\n  plugin_name=mysql-database-plugin \\\n  connection_url=\"{{username}}:{{password}}@tcp(mysql.example.com:3306)/\" \\\n  allowed_roles=\"mysql-role\" \\\n  username=\"vault\" \\\n  password=\"vault-password\"\n\n# Create role for dynamic credentials\nvault write database/roles/mysql-role \\\n  db_name=mysql \\\n  creation_statements=\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';GRANT SELECT ON *.* TO '{{name}}'@'%';\" \\\n  default_ttl=\"1h\" \\\n  max_ttl=\"24h\"\n\n# Generate dynamic credentials\nvault read database/creds/mysql-role\n```\n\n## High Availability Setup\n\n### Consul Backend\n```bash\n# Install Consul\nsudo apt install -y consul\n\n# Configure Vault with Consul backend\nsudo tee /etc/vault.d/vault-ha.hcl > /dev/null <<EOF\nui = true\ndisable_mlock = true\n\nstorage \"consul\" {\n  address = \"127.0.0.1:8500\"\n  path    = \"vault/\"\n}\n\nlistener \"tcp\" {\n  address     = \"0.0.0.0:8200\"\n  tls_cert_file = \"/opt/vault/tls/tls.crt\"\n  tls_key_file  = \"/opt/vault/tls/tls.key\"\n}\n\napi_addr = \"https://vault-1.example.com:8200\"\ncluster_addr = \"https://vault-1.example.com:8201\"\nEOF\n```\n\n## Backup and Recovery\n\n```bash\n# Create backup script\nsudo tee /usr/local/bin/vault-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/vault\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create snapshot (Enterprise feature)\n# vault operator raft snapshot save ${BACKUP_DIR}/vault-snapshot-${DATE}.snap\n\n# For OSS version, backup storage backend data\nif [ -d \"/opt/vault/data\" ]; then\n    tar -czf ${BACKUP_DIR}/vault-data-${DATE}.tar.gz -C /opt/vault data\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"vault-*-*.tar.gz\" -type f -mtime +7 -delete\n\necho \"Backup completed: vault-data-${DATE}.tar.gz\"\nEOF\n\nsudo chmod +x /usr/local/bin/vault-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/vault-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Firewall Configuration\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 8200/tcp   # Vault API\nsudo ufw allow 8201/tcp   # Vault cluster communication\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=8200/tcp\nsudo firewall-cmd --permanent --add-port=8201/tcp\nsudo firewall-cmd --reload\n```\n\n## Verification\n\n```bash\n# Check Vault status\nvault status\n\n# Check systemd service\nsudo systemctl status vault\n\n# Test API connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health | jq\n\n# Check authentication methods\nvault auth list\n\n# Check secrets engines\nvault secrets list\n\n# Check policies\nvault policy list\n\n# Check audit devices\nvault audit list\n\n# View server logs\nsudo journalctl -u vault -f\n\n# Check seal status\nvault operator key-status\n```\n\n## Security Best Practices\n\n```bash\n# Enable audit logging\nvault audit enable file file_path=/var/log/vault/audit.log\n\n# Create separate policies for different roles\ncat > developer-policy.hcl <<EOF\n# Developers can read/write to dev secrets\npath \"secret/data/dev/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\n\n# Read-only access to shared secrets\npath \"secret/data/shared/*\" {\n  capabilities = [\"read\", \"list\"]\n}\nEOF\n\nvault policy write developer developer-policy.hcl\n\n# Set up auto-unseal with cloud KMS (production)\n# AWS KMS example\nvault write sys/config/seal/awskms \\\n  region=\"us-west-2\" \\\n  access_key=\"YOUR_ACCESS_KEY\" \\\n  secret_key=\"YOUR_SECRET_KEY\" \\\n  kms_key_id=\"alias/vault-unseal-key\"\n\n# Enable periodic token renewal\nvault write auth/token/roles/auto-renew \\\n  allowed_policies=\"developer\" \\\n  orphan=true \\\n  period=\"24h\" \\\n  renewable=true\n```\n\n## Integration Examples\n\n### Application Integration\n```bash\n# Using Vault Agent for automatic authentication\ncat > /etc/vault-agent.hcl <<EOF\nexit_after_auth = false\npid_file = \"./pidfile\"\n\nauto_auth {\n  method \"aws\" {\n    mount_path = \"auth/aws\"\n    config = {\n      type = \"iam\"\n      role = \"vault-role\"\n    }\n  }\n\n  sink \"file\" {\n    config = {\n      path = \"/tmp/vault-token-via-agent\"\n    }\n  }\n}\n\ncache {\n  use_auto_auth_token = true\n}\n\nlistener \"tcp\" {\n  address = \"127.0.0.1:8100\"\n  tls_disable = true\n}\n\ntemplate {\n  source      = \"/opt/vault/templates/config.json.tpl\"\n  destination = \"/opt/app/config.json\"\n  perms       = 0640\n  command     = \"systemctl reload myapp\"\n}\nEOF\n\n# Start Vault Agent\nvault agent -config=/etc/vault-agent.hcl\n```\n\n### Kubernetes Integration\n```bash\n# Enable Kubernetes auth method\nvault auth enable kubernetes\n\n# Configure Kubernetes auth\nvault write auth/kubernetes/config \\\n  token_reviewer_jwt=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\n  kubernetes_host=https://${KUBERNETES_PORT_443_TCP_ADDR}:443 \\\n  kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\n# Create role for Kubernetes service accounts\nvault write auth/kubernetes/role/myapp \\\n  bound_service_account_names=vault \\\n  bound_service_account_namespaces=default \\\n  policies=myapp-policy \\\n  ttl=24h\n```\n\n## Troubleshooting\n\n```bash\n# Check Vault logs\nsudo journalctl -u vault -f\n\n# Debug mode\nsudo systemctl stop vault\nsudo -u vault vault server -config=/etc/vault.d/vault.hcl -log-level=debug\n\n# Check seal status\nvault operator key-status\n\n# Check storage backend\nvault operator raft list-peers  # For raft storage\nconsul kv get -recurse vault/   # For consul storage\n\n# Test connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health\n\n# Check performance\nvault operator usage\n\n# Rotate encryption key\nvault operator rotate\n\n# Check configuration\nvault operator diagnose -config=/etc/vault.d/vault.hcl\n```\n\n## Additional Resources\n\n- [Official Documentation](https://www.vaultproject.io/docs)\n- [API Documentation](https://www.vaultproject.io/api-docs)\n- [Best Practices](https://learn.hashicorp.com/tutorials/vault/production-hardening)\n- [Vault Guides](https://learn.hashicorp.com/vault)\n- [Community Forum](https://discuss.hashicorp.com/c/vault)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"hashicorp-vault-installation-guide\" class=\"mobile-header\">HashiCorp Vault Installation Guide</h1>\n<p class=\"mobile-paragraph\">Secrets management platform for securely storing and accessing API keys, passwords, certificates, and other sensitive data.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB recommended</li>\n<li class=\"mobile-list-item\">Persistent storage for Vault data</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho &quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install\nsudo apt update\nsudo apt install -y vault</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Vault\nsudo yum install -y vault</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-binary-installation\" class=\"mobile-header\">Manual Binary Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest Vault\nVAULT_VERSION=&quot;1.14.1&quot;\ncd /tmp\nwget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip\n\n# Install\nsudo apt install -y unzip  # or yum install -y unzip\nunzip vault_${VAULT_VERSION}_linux_amd64.zip\nsudo mv vault /usr/local/bin/\nsudo chmod +x /usr/local/bin/vault\n\n# Create vault user\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create directories for persistent data\nmkdir -p ~/vault/{data,config,logs}\n\n# Create basic configuration\ncat &gt; ~/vault/config/vault.hcl &lt;&lt;EOF\nui = true\ndisable_mlock = true\n\nstorage &quot;file&quot; {\n  path = &quot;/vault/data&quot;\n}\n\nlistener &quot;tcp&quot; {\n  address     = &quot;0.0.0.0:8200&quot;\n  tls_disable = true\n}\n\napi_addr = &quot;http://0.0.0.0:8200&quot;\ncluster_addr = &quot;https://0.0.0.0:8201&quot;\nEOF\n\n# Run Vault container\ndocker run -d \\\n  --name vault \\\n  --restart unless-stopped \\\n  -p 8200:8200 \\\n  -v ~/vault/data:/vault/data \\\n  -v ~/vault/config:/vault/config \\\n  -v ~/vault/logs:/vault/logs \\\n  --cap-add=IPC_LOCK \\\n  vault:latest server -config=/vault/config/vault.hcl</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration-file\" class=\"mobile-header\">Basic Configuration File</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Vault configuration directory\nsudo mkdir -p /etc/vault.d\nsudo chown -R vault:vault /etc/vault.d\n\n# Create main configuration\nsudo tee /etc/vault.d/vault.hcl &gt; /dev/null &lt;&lt;EOF\n# Full configuration options: https://www.vaultproject.io/docs/configuration\n\nui = true\ndisable_mlock = true\n\n# Storage backend\nstorage &quot;file&quot; {\n  path = &quot;/opt/vault/data&quot;\n}\n\n# HTTPS listener\nlistener &quot;tcp&quot; {\n  address       = &quot;0.0.0.0:8200&quot;\n  tls_cert_file = &quot;/opt/vault/tls/tls.crt&quot;\n  tls_key_file  = &quot;/opt/vault/tls/tls.key&quot;\n}\n\n# HTTP listener (disable in production)\nlistener &quot;tcp&quot; {\n  address     = &quot;127.0.0.1:8201&quot;\n  tls_disable = true\n}\n\n# Enterprise license (if applicable)\n# license_path = &quot;/etc/vault.d/vault.hclic&quot;\n\n# API address\napi_addr = &quot;https://127.0.0.1:8200&quot;\n\n# Cluster address  \ncluster_addr = &quot;https://127.0.0.1:8201&quot;\n\n# Logging\nlog_level = &quot;INFO&quot;\nlog_file  = &quot;/var/log/vault/vault.log&quot;\nEOF\n\n# Create data directory\nsudo mkdir -p /opt/vault/{data,tls}\nsudo chown -R vault:vault /opt/vault\n\n# Create log directory\nsudo mkdir -p /var/log/vault\nsudo chown vault:vault /var/log/vault</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-certificate-setup\" class=\"mobile-header\">SSL/TLS Certificate Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate for development\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n  -keyout /opt/vault/tls/tls.key \\\n  -out /opt/vault/tls/tls.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=vault.example.com&quot;\n\nsudo chown vault:vault /opt/vault/tls/*\nsudo chmod 600 /opt/vault/tls/tls.key\nsudo chmod 644 /opt/vault/tls/tls.crt\n\n# For production, use Let&#039;s Encrypt\nsudo apt install -y certbot\nsudo certbot certonly --standalone -d vault.example.com\nsudo cp /etc/letsencrypt/live/vault.example.com/fullchain.pem /opt/vault/tls/tls.crt\nsudo cp /etc/letsencrypt/live/vault.example.com/privkey.pem /opt/vault/tls/tls.key\nsudo chown vault:vault /opt/vault/tls/*</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service\" class=\"mobile-header\">SystemD Service</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create systemd service\nsudo tee /etc/systemd/system/vault.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=&quot;HashiCorp Vault - A tool for managing secrets&quot;\nDocumentation=https://www.vaultproject.io/docs/\nRequires=network-online.target\nAfter=network-online.target\nConditionFileNotEmpty=/etc/vault.d/vault.hcl\nStartLimitIntervalSec=60\nStartLimitBurst=3\n\n[Service]\nType=notify\nUser=vault\nGroup=vault\nProtectSystem=full\nProtectHome=read-only\nPrivateTmp=yes\nPrivateDevices=yes\nSecureBits=keep-caps\nAmbientCapabilities=CAP_IPC_LOCK\nCapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK\nNoNewPrivileges=yes\nExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl\nExecReload=/bin/kill --signal HUP $MAINPID\nKillMode=process\nRestart=on-failure\nRestartSec=5\nTimeoutStopSec=30\nStartLimitInterval=60\nStartLimitBurst=3\nLimitNOFILE=65536\nLimitMEMLOCK=infinity\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start Vault\nsudo systemctl daemon-reload\nsudo systemctl enable --now vault</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-setup-and-unsealing\" class=\"mobile-header\">Initial Setup and Unsealing</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize Vault (one-time setup)\nexport VAULT_ADDR=&#039;http://127.0.0.1:8200&#039;\nvault operator init\n\n# Save the unseal keys and root token securely!\n# Example output:\n# Unseal Key 1: key1...\n# Unseal Key 2: key2...\n# Unseal Key 3: key3...\n# Initial Root Token: hvs.token...\n\n# Unseal Vault (required after every restart)\nvault operator unseal KEY1\nvault operator unseal KEY2  \nvault operator unseal KEY3\n\n# Login with root token\nvault auth ROOT_TOKEN\n\n# Check status\nvault status</code></pre>\n      </div>\n    </div>\n<h2 id=\"basic-usage\" class=\"mobile-header\">Basic Usage</h2>\n<h3 id=\"authentication-methods\" class=\"mobile-header\">Authentication Methods</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable userpass authentication\nvault auth enable userpass\n\n# Create user\nvault write auth/userpass/users/admin password=secure_password policies=admin\n\n# Enable GitHub authentication\nvault auth enable github\nvault write auth/github/config organization=your-org\n\n# Login with different methods\nvault auth -method=userpass username=admin\nvault auth -method=github token=github_token</code></pre>\n      </div>\n    </div>\n<h3 id=\"secrets-management\" class=\"mobile-header\">Secrets Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable KV secrets engine\nvault secrets enable -version=2 kv\n\n# Store secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=secure_password \\\n  api_key=abc123\n\n# Read secrets\nvault kv get secret/myapp/config\nvault kv get -field=password secret/myapp/config\n\n# Update secrets\nvault kv put secret/myapp/config \\\n  username=admin \\\n  password=new_password \\\n  api_key=def456\n\n# Delete secrets\nvault kv delete secret/myapp/config\n\n# List secrets\nvault kv list secret/</code></pre>\n      </div>\n    </div>\n<h3 id=\"policies\" class=\"mobile-header\">Policies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create policy file\ncat &gt; admin-policy.hcl &lt;&lt;EOF\n# Admin policy\npath &quot;*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;, &quot;sudo&quot;]\n}\nEOF\n\n# Apply policy\nvault policy write admin admin-policy.hcl\n\n# Create read-only policy\ncat &gt; readonly-policy.hcl &lt;&lt;EOF\n# Read-only access to secrets\npath &quot;secret/data/*&quot; {\n  capabilities = [&quot;read&quot;, &quot;list&quot;]\n}\nEOF\n\nvault policy write readonly readonly-policy.hcl\n\n# List policies\nvault policy list\nvault policy read admin</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-secrets-engine\" class=\"mobile-header\">Database Secrets Engine</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable database secrets engine\nvault secrets enable database\n\n# Configure MySQL connection\nvault write database/config/mysql \\\n  plugin_name=mysql-database-plugin \\\n  connection_url=&quot;{{username}}:{{password}}@tcp(mysql.example.com:3306)/&quot; \\\n  allowed_roles=&quot;mysql-role&quot; \\\n  username=&quot;vault&quot; \\\n  password=&quot;vault-password&quot;\n\n# Create role for dynamic credentials\nvault write database/roles/mysql-role \\\n  db_name=mysql \\\n  creation_statements=&quot;CREATE USER &#039;{{name}}&#039;@&#039;%&#039; IDENTIFIED BY &#039;{{password}}&#039;;GRANT SELECT ON *.* TO &#039;{{name}}&#039;@&#039;%&#039;;&quot; \\\n  default_ttl=&quot;1h&quot; \\\n  max_ttl=&quot;24h&quot;\n\n# Generate dynamic credentials\nvault read database/creds/mysql-role</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h2>\n<h3 id=\"consul-backend\" class=\"mobile-header\">Consul Backend</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Consul\nsudo apt install -y consul\n\n# Configure Vault with Consul backend\nsudo tee /etc/vault.d/vault-ha.hcl &gt; /dev/null &lt;&lt;EOF\nui = true\ndisable_mlock = true\n\nstorage &quot;consul&quot; {\n  address = &quot;127.0.0.1:8500&quot;\n  path    = &quot;vault/&quot;\n}\n\nlistener &quot;tcp&quot; {\n  address     = &quot;0.0.0.0:8200&quot;\n  tls_cert_file = &quot;/opt/vault/tls/tls.crt&quot;\n  tls_key_file  = &quot;/opt/vault/tls/tls.key&quot;\n}\n\napi_addr = &quot;https://vault-1.example.com:8200&quot;\ncluster_addr = &quot;https://vault-1.example.com:8201&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-recovery\" class=\"mobile-header\">Backup and Recovery</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/vault-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/vault&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create snapshot (Enterprise feature)\n# vault operator raft snapshot save ${BACKUP_DIR}/vault-snapshot-${DATE}.snap\n\n# For OSS version, backup storage backend data\nif [ -d &quot;/opt/vault/data&quot; ]; then\n    tar -czf ${BACKUP_DIR}/vault-data-${DATE}.tar.gz -C /opt/vault data\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;vault-*-*.tar.gz&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: vault-data-${DATE}.tar.gz&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/vault-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/vault-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 8200/tcp   # Vault API\nsudo ufw allow 8201/tcp   # Vault cluster communication\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=8200/tcp\nsudo firewall-cmd --permanent --add-port=8201/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Vault status\nvault status\n\n# Check systemd service\nsudo systemctl status vault\n\n# Test API connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health | jq\n\n# Check authentication methods\nvault auth list\n\n# Check secrets engines\nvault secrets list\n\n# Check policies\nvault policy list\n\n# Check audit devices\nvault audit list\n\n# View server logs\nsudo journalctl -u vault -f\n\n# Check seal status\nvault operator key-status</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-best-practices\" class=\"mobile-header\">Security Best Practices</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable audit logging\nvault audit enable file file_path=/var/log/vault/audit.log\n\n# Create separate policies for different roles\ncat &gt; developer-policy.hcl &lt;&lt;EOF\n# Developers can read/write to dev secrets\npath &quot;secret/data/dev/*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;]\n}\n\n# Read-only access to shared secrets\npath &quot;secret/data/shared/*&quot; {\n  capabilities = [&quot;read&quot;, &quot;list&quot;]\n}\nEOF\n\nvault policy write developer developer-policy.hcl\n\n# Set up auto-unseal with cloud KMS (production)\n# AWS KMS example\nvault write sys/config/seal/awskms \\\n  region=&quot;us-west-2&quot; \\\n  access_key=&quot;YOUR_ACCESS_KEY&quot; \\\n  secret_key=&quot;YOUR_SECRET_KEY&quot; \\\n  kms_key_id=&quot;alias/vault-unseal-key&quot;\n\n# Enable periodic token renewal\nvault write auth/token/roles/auto-renew \\\n  allowed_policies=&quot;developer&quot; \\\n  orphan=true \\\n  period=&quot;24h&quot; \\\n  renewable=true</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"application-integration\" class=\"mobile-header\">Application Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Vault Agent for automatic authentication\ncat &gt; /etc/vault-agent.hcl &lt;&lt;EOF\nexit_after_auth = false\npid_file = &quot;./pidfile&quot;\n\nauto_auth {\n  method &quot;aws&quot; {\n    mount_path = &quot;auth/aws&quot;\n    config = {\n      type = &quot;iam&quot;\n      role = &quot;vault-role&quot;\n    }\n  }\n\n  sink &quot;file&quot; {\n    config = {\n      path = &quot;/tmp/vault-token-via-agent&quot;\n    }\n  }\n}\n\ncache {\n  use_auto_auth_token = true\n}\n\nlistener &quot;tcp&quot; {\n  address = &quot;127.0.0.1:8100&quot;\n  tls_disable = true\n}\n\ntemplate {\n  source      = &quot;/opt/vault/templates/config.json.tpl&quot;\n  destination = &quot;/opt/app/config.json&quot;\n  perms       = 0640\n  command     = &quot;systemctl reload myapp&quot;\n}\nEOF\n\n# Start Vault Agent\nvault agent -config=/etc/vault-agent.hcl</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-integration\" class=\"mobile-header\">Kubernetes Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Kubernetes auth method\nvault auth enable kubernetes\n\n# Configure Kubernetes auth\nvault write auth/kubernetes/config \\\n  token_reviewer_jwt=&quot;$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)&quot; \\\n  kubernetes_host=https://${KUBERNETES_PORT_443_TCP_ADDR}:443 \\\n  kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\n# Create role for Kubernetes service accounts\nvault write auth/kubernetes/role/myapp \\\n  bound_service_account_names=vault \\\n  bound_service_account_namespaces=default \\\n  policies=myapp-policy \\\n  ttl=24h</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Vault logs\nsudo journalctl -u vault -f\n\n# Debug mode\nsudo systemctl stop vault\nsudo -u vault vault server -config=/etc/vault.d/vault.hcl -log-level=debug\n\n# Check seal status\nvault operator key-status\n\n# Check storage backend\nvault operator raft list-peers  # For raft storage\nconsul kv get -recurse vault/   # For consul storage\n\n# Test connectivity\ncurl -s http://127.0.0.1:8200/v1/sys/health\n\n# Check performance\nvault operator usage\n\n# Rotate encryption key\nvault operator rotate\n\n# Check configuration\nvault operator diagnose -config=/etc/vault.d/vault.hcl</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.vaultproject.io/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.vaultproject.io/api-docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">API Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://learn.hashicorp.com/tutorials/vault/production-hardening\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://learn.hashicorp.com/vault\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Vault Guides</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discuss.hashicorp.com/c/vault\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"8 min","wordCount":1506,"lastBuilt":"2025-09-14T00:58:21.922Z"},{"name":"wireguard","displayName":"Wireguard","slug":"wireguard","description":"Repo for wireguard","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/wireguard","updatedAt":"2025-09-08T03:18:27Z","createdAt":"2025-09-08T03:18:17Z","readmeRaw":"## ðŸ‘‹ Welcome to wireguard ðŸš€  \n\nwireguard README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-wireguard\" class=\"mobile-header\">ðŸ‘‹ Welcome to wireguard ðŸš€  </h2>\n<p class=\"mobile-paragraph\">wireguard README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T00:58:21.400Z"}]},"__N_SSG":true}