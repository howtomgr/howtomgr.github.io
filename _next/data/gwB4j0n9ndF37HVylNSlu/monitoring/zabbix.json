{"pageProps":{"guide":{"name":"zabbix","displayName":"Zabbix","slug":"zabbix","description":"Repo for zabbix","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/zabbix","updatedAt":"2025-09-08T03:19:09Z","createdAt":"2025-09-08T03:18:59Z","readmeRaw":"## ðŸ‘‹ Welcome to zabbix ðŸš€  \n\nzabbix README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-zabbix\" class=\"mobile-header\">ðŸ‘‹ Welcome to zabbix ðŸš€  </h2>\n<p class=\"mobile-paragraph\">zabbix README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T00:58:20.677Z"},"category":{"key":"monitoring","name":"Monitoring","description":"Observability and monitoring solutions","icon":"ðŸ“Š","color":"#ffb86c","keywords":["prometheus","grafana","loki","jaeger","nagios","zabbix"]},"relatedGuides":[{"name":"grafana","displayName":"Grafana","slug":"grafana","description":"Repo for grafana","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/grafana","updatedAt":"2025-09-08T03:08:21Z","createdAt":"2025-09-08T03:08:10Z","readmeRaw":"# Grafana Installation Guide\n\nOpen-source observability platform for monitoring and visualization. Creates dashboards and alerts from multiple data sources.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Root or sudo access\n- 2GB RAM minimum, 4GB recommended\n- Data source (Prometheus, InfluxDB, etc.) - optional for initial setup\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Add Grafana GPG key\nwget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\n\n# Add Grafana repository\necho \"deb https://packages.grafana.com/oss/deb stable main\" | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Update and install\nsudo apt update\nsudo apt install -y grafana\n\n# Enable and start Grafana\nsudo systemctl enable --now grafana-server\n```\n\n#### RHEL/CentOS/Rocky Linux\n```bash\n# Add Grafana repository\nsudo tee /etc/yum.repos.d/grafana.repo > /dev/null <<EOF\n[grafana]\nname=grafana\nbaseurl=https://packages.grafana.com/oss/rpm\nrepo_gpgcheck=1\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.grafana.com/gpg.key\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nEOF\n\n# Install Grafana\nsudo yum install -y grafana\n\n# Enable and start Grafana\nsudo systemctl enable --now grafana-server\n```\n\n### Using Docker\n```bash\n# Create directories for persistent data\nmkdir -p ~/grafana/{data,provisioning/{datasources,dashboards}}\n\n# Set proper permissions\nsudo chown -R 472:472 ~/grafana/data\n\n# Run Grafana container\ndocker run -d \\\n  --name grafana \\\n  --restart unless-stopped \\\n  -p 3000:3000 \\\n  -v ~/grafana/data:/var/lib/grafana \\\n  -v ~/grafana/provisioning:/etc/grafana/provisioning \\\n  -e \"GF_SECURITY_ADMIN_PASSWORD=admin123\" \\\n  grafana/grafana:latest\n```\n\n### Using Docker Compose\n```bash\n# Create docker-compose.yml\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  grafana:\n    image: grafana/grafana:latest\n    container_name: grafana\n    restart: unless-stopped\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - grafana-data:/var/lib/grafana\n      - ./grafana/provisioning:/etc/grafana/provisioning\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin123\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_SERVER_ROOT_URL=https://grafana.example.com\n    networks:\n      - monitoring\n\nnetworks:\n  monitoring:\n    driver: bridge\n\nvolumes:\n  grafana-data:\nEOF\n\n# Start services\ndocker-compose up -d\n```\n\n## Configuration\n\n### Basic Configuration\n```bash\n# Edit main configuration file\nsudo nano /etc/grafana/grafana.ini\n\n# Key settings to configure:\n[server]\nprotocol = http\nhttp_port = 3000\ndomain = grafana.example.com\nroot_url = https://grafana.example.com\n\n[database]\ntype = sqlite3\npath = grafana.db\n\n# For MySQL\ntype = mysql\nhost = 127.0.0.1:3306\nname = grafana\nuser = grafana\npassword = password\n\n# For PostgreSQL\ntype = postgres\nhost = 127.0.0.1:5432\nname = grafana\nuser = grafana\npassword = password\nssl_mode = disable\n\n[security]\nadmin_user = admin\nadmin_password = admin123\nsecret_key = SW2YcwTIb9zpOOhoPsMm\n\n[users]\nallow_sign_up = false\nallow_org_create = false\nauto_assign_org = true\nauto_assign_org_role = Viewer\n\n[auth.anonymous]\nenabled = false\n\n[smtp]\nenabled = true\nhost = localhost:587\nuser = \npassword = \nfrom_address = admin@grafana.localhost\nfrom_name = Grafana\n\n# Restart Grafana after configuration changes\nsudo systemctl restart grafana-server\n```\n\n### NGINX Reverse Proxy\n```bash\n# Create NGINX configuration for Grafana\nsudo tee /etc/nginx/sites-available/grafana > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name grafana.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name grafana.example.com;\n\n    ssl_certificate /etc/ssl/certs/grafana.crt;\n    ssl_certificate_key /etc/ssl/private/grafana.key;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        \n        # WebSocket support\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/grafana /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n### Data Sources Configuration\n\n#### Prometheus Data Source\n```bash\n# Create datasource provisioning file\nsudo mkdir -p /etc/grafana/provisioning/datasources\nsudo tee /etc/grafana/provisioning/datasources/prometheus.yml > /dev/null <<EOF\napiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    url: http://localhost:9090\n    access: proxy\n    isDefault: true\n    editable: true\n    \n  - name: InfluxDB\n    type: influxdb\n    url: http://localhost:8086\n    database: telegraf\n    user: grafana\n    password: grafana_password\n    \n  - name: MySQL\n    type: mysql\n    url: localhost:3306\n    database: grafana\n    user: grafana\n    password: grafana_password\nEOF\n\nsudo chown -R grafana:grafana /etc/grafana/provisioning\nsudo systemctl restart grafana-server\n```\n\n#### Dashboard Provisioning\n```bash\n# Create dashboard provisioning\nsudo mkdir -p /etc/grafana/provisioning/dashboards\nsudo tee /etc/grafana/provisioning/dashboards/default.yml > /dev/null <<EOF\napiVersion: 1\n\nproviders:\n  - name: 'default'\n    orgId: 1\n    folder: ''\n    type: file\n    disableDeletion: false\n    editable: true\n    updateIntervalSeconds: 10\n    allowUiUpdates: true\n    options:\n      path: /var/lib/grafana/dashboards\nEOF\n\n# Download popular dashboards\nsudo mkdir -p /var/lib/grafana/dashboards\nsudo chown grafana:grafana /var/lib/grafana/dashboards\n\n# Node Exporter dashboard\nsudo wget https://raw.githubusercontent.com/prometheus/node_exporter/master/examples/grafana/node-exporter-full.json -O /var/lib/grafana/dashboards/node-exporter.json\n\n# Docker dashboard\nsudo wget https://grafana.com/api/dashboards/893/revisions/1/download -O /var/lib/grafana/dashboards/docker.json\n\nsudo chown -R grafana:grafana /var/lib/grafana/dashboards\nsudo systemctl restart grafana-server\n```\n\n## Plugin Management\n\n```bash\n# Install plugins\nsudo grafana-cli plugins install grafana-clock-panel\nsudo grafana-cli plugins install grafana-simple-json-datasource\nsudo grafana-cli plugins install grafana-worldmap-panel\nsudo grafana-cli plugins install grafana-piechart-panel\n\n# List installed plugins\nsudo grafana-cli plugins list-remote\nsudo grafana-cli plugins ls\n\n# Update plugins\nsudo grafana-cli plugins update-all\n\n# Remove plugin\nsudo grafana-cli plugins remove grafana-clock-panel\n\n# Restart Grafana after plugin changes\nsudo systemctl restart grafana-server\n```\n\n## Firewall Configuration\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 3000/tcp\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload\n```\n\n## Verification\n\n```bash\n# Check Grafana status\nsudo systemctl status grafana-server\n\n# Check logs\nsudo journalctl -u grafana-server -f\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check listening port\nsudo netstat -tulpn | grep 3000\n\n# Test login\ncurl -X POST \\\n  http://localhost:3000/api/auth/keys \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"name\":\"test\",\"role\":\"Admin\"}'\n\n# Check data sources via API\ncurl -u admin:admin123 http://localhost:3000/api/datasources\n\n# Check dashboard API\ncurl -u admin:admin123 http://localhost:3000/api/search\n\n# Check Grafana version\ngrafana-server --version\n```\n\n## Backup and Restore\n\n```bash\n# Create backup script\nsudo tee /usr/local/bin/grafana-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/grafana\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Stop Grafana\nsystemctl stop grafana-server\n\n# Backup Grafana database and configuration\ntar -czf ${BACKUP_DIR}/grafana-backup-${DATE}.tar.gz \\\n  /var/lib/grafana/ \\\n  /etc/grafana/ \\\n  /etc/systemd/system/grafana-server.service\n\n# Start Grafana\nsystemctl start grafana-server\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"grafana-backup-*.tar.gz\" -type f -mtime +7 -delete\n\necho \"Backup completed: grafana-backup-${DATE}.tar.gz\"\nEOF\n\nsudo chmod +x /usr/local/bin/grafana-backup.sh\n\n# Schedule daily backup\necho \"0 3 * * * root /usr/local/bin/grafana-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## High Availability Setup\n\n### MySQL Backend\n```bash\n# Configure Grafana for MySQL backend\nsudo tee -a /etc/grafana/grafana.ini > /dev/null <<EOF\n\n[database]\ntype = mysql\nhost = mysql-cluster.example.com:3306\nname = grafana\nuser = grafana\npassword = secure_password\nssl_mode = false\n\n[session]\nprovider = mysql\nprovider_config = grafana:secure_password@tcp(mysql-cluster.example.com:3306)/grafana\n\n[remote_cache]\ntype = redis\nconnstr = addr=redis-cluster.example.com:6379,pool_size=100,db=0\nEOF\n```\n\n### Load Balancer Configuration\n```bash\n# HAProxy configuration for Grafana cluster\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\nfrontend grafana_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/grafana.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend grafana_servers\n\nbackend grafana_servers\n    balance roundrobin\n    option httpchk GET /api/health\n    http-check expect status 200\n    server grafana1 192.168.1.40:3000 check\n    server grafana2 192.168.1.41:3000 check\n    server grafana3 192.168.1.42:3000 check\nEOF\n\nsudo systemctl restart haproxy\n```\n\n## Troubleshooting\n\n```bash\n# Check Grafana service status\nsudo systemctl status grafana-server\n\n# View Grafana logs\nsudo tail -f /var/log/grafana/grafana.log\n\n# Check configuration file syntax\nsudo grafana-server --config /etc/grafana/grafana.ini --help\n\n# Test database connection\nsudo -u grafana grafana-cli admin reset-admin-password newpassword\n\n# Check plugin status\nsudo grafana-cli plugins ls\n\n# Debug data source connections\ncurl -u admin:password http://localhost:3000/api/datasources/proxy/1/api/v1/query?query=up\n\n# Check disk space (common issue)\ndf -h /var/lib/grafana\n\n# Reset admin password\nsudo grafana-cli admin reset-admin-password admin123\n\n# Check configuration\nsudo grafana-server --config /etc/grafana/grafana.ini --homepath /usr/share/grafana --help\n```\n\n## Additional Resources\n\n- [Official Documentation](https://grafana.com/docs/grafana/latest/)\n- [Dashboard Gallery](https://grafana.com/grafana/dashboards/)\n- [Plugin Catalog](https://grafana.com/grafana/plugins/)\n- [Community Forum](https://community.grafana.com/)\n- [Grafana Labs Blog](https://grafana.com/blog/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"grafana-installation-guide\" class=\"mobile-header\">Grafana Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source observability platform for monitoring and visualization. Creates dashboards and alerts from multiple data sources.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB recommended</li>\n<li class=\"mobile-list-item\">Data source (Prometheus, InfluxDB, etc.) - optional for initial setup</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Grafana GPG key\nwget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\n\n# Add Grafana repository\necho &quot;deb https://packages.grafana.com/oss/deb stable main&quot; | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Update and install\nsudo apt update\nsudo apt install -y grafana\n\n# Enable and start Grafana\nsudo systemctl enable --now grafana-server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Grafana repository\nsudo tee /etc/yum.repos.d/grafana.repo &gt; /dev/null &lt;&lt;EOF\n[grafana]\nname=grafana\nbaseurl=https://packages.grafana.com/oss/rpm\nrepo_gpgcheck=1\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.grafana.com/gpg.key\nsslverify=1\nsslcacert=/etc/pki/tls/certs/ca-bundle.crt\nEOF\n\n# Install Grafana\nsudo yum install -y grafana\n\n# Enable and start Grafana\nsudo systemctl enable --now grafana-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create directories for persistent data\nmkdir -p ~/grafana/{data,provisioning/{datasources,dashboards}}\n\n# Set proper permissions\nsudo chown -R 472:472 ~/grafana/data\n\n# Run Grafana container\ndocker run -d \\\n  --name grafana \\\n  --restart unless-stopped \\\n  -p 3000:3000 \\\n  -v ~/grafana/data:/var/lib/grafana \\\n  -v ~/grafana/provisioning:/etc/grafana/provisioning \\\n  -e &quot;GF_SECURITY_ADMIN_PASSWORD=admin123&quot; \\\n  grafana/grafana:latest</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker-compose\" class=\"mobile-header\">Using Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create docker-compose.yml\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  grafana:\n    image: grafana/grafana:latest\n    container_name: grafana\n    restart: unless-stopped\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - grafana-data:/var/lib/grafana\n      - ./grafana/provisioning:/etc/grafana/provisioning\n    environment:\n      - GF_SECURITY_ADMIN_PASSWORD=admin123\n      - GF_USERS_ALLOW_SIGN_UP=false\n      - GF_SERVER_ROOT_URL=https://grafana.example.com\n    networks:\n      - monitoring\n\nnetworks:\n  monitoring:\n    driver: bridge\n\nvolumes:\n  grafana-data:\nEOF\n\n# Start services\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Edit main configuration file\nsudo nano /etc/grafana/grafana.ini\n\n# Key settings to configure:\n[server]\nprotocol = http\nhttp_port = 3000\ndomain = grafana.example.com\nroot_url = https://grafana.example.com\n\n[database]\ntype = sqlite3\npath = grafana.db\n\n# For MySQL\ntype = mysql\nhost = 127.0.0.1:3306\nname = grafana\nuser = grafana\npassword = password\n\n# For PostgreSQL\ntype = postgres\nhost = 127.0.0.1:5432\nname = grafana\nuser = grafana\npassword = password\nssl_mode = disable\n\n[security]\nadmin_user = admin\nadmin_password = admin123\nsecret_key = SW2YcwTIb9zpOOhoPsMm\n\n[users]\nallow_sign_up = false\nallow_org_create = false\nauto_assign_org = true\nauto_assign_org_role = Viewer\n\n[auth.anonymous]\nenabled = false\n\n[smtp]\nenabled = true\nhost = localhost:587\nuser = \npassword = \nfrom_address = admin@grafana.localhost\nfrom_name = Grafana\n\n# Restart Grafana after configuration changes\nsudo systemctl restart grafana-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy\" class=\"mobile-header\">NGINX Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration for Grafana\nsudo tee /etc/nginx/sites-available/grafana &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 80;\n    server_name grafana.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name grafana.example.com;\n\n    ssl_certificate /etc/ssl/certs/grafana.crt;\n    ssl_certificate_key /etc/ssl/private/grafana.key;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        \n        # WebSocket support\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/grafana /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"data-sources-configuration\" class=\"mobile-header\">Data Sources Configuration</h3>\n<p class=\"mobile-paragraph\">#### Prometheus Data Source</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create datasource provisioning file\nsudo mkdir -p /etc/grafana/provisioning/datasources\nsudo tee /etc/grafana/provisioning/datasources/prometheus.yml &gt; /dev/null &lt;&lt;EOF\napiVersion: 1\n\ndatasources:\n  - name: Prometheus\n    type: prometheus\n    url: http://localhost:9090\n    access: proxy\n    isDefault: true\n    editable: true\n    \n  - name: InfluxDB\n    type: influxdb\n    url: http://localhost:8086\n    database: telegraf\n    user: grafana\n    password: grafana_password\n    \n  - name: MySQL\n    type: mysql\n    url: localhost:3306\n    database: grafana\n    user: grafana\n    password: grafana_password\nEOF\n\nsudo chown -R grafana:grafana /etc/grafana/provisioning\nsudo systemctl restart grafana-server</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Dashboard Provisioning</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create dashboard provisioning\nsudo mkdir -p /etc/grafana/provisioning/dashboards\nsudo tee /etc/grafana/provisioning/dashboards/default.yml &gt; /dev/null &lt;&lt;EOF\napiVersion: 1\n\nproviders:\n  - name: &#039;default&#039;\n    orgId: 1\n    folder: &#039;&#039;\n    type: file\n    disableDeletion: false\n    editable: true\n    updateIntervalSeconds: 10\n    allowUiUpdates: true\n    options:\n      path: /var/lib/grafana/dashboards\nEOF\n\n# Download popular dashboards\nsudo mkdir -p /var/lib/grafana/dashboards\nsudo chown grafana:grafana /var/lib/grafana/dashboards\n\n# Node Exporter dashboard\nsudo wget https://raw.githubusercontent.com/prometheus/node_exporter/master/examples/grafana/node-exporter-full.json -O /var/lib/grafana/dashboards/node-exporter.json\n\n# Docker dashboard\nsudo wget https://grafana.com/api/dashboards/893/revisions/1/download -O /var/lib/grafana/dashboards/docker.json\n\nsudo chown -R grafana:grafana /var/lib/grafana/dashboards\nsudo systemctl restart grafana-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"plugin-management\" class=\"mobile-header\">Plugin Management</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install plugins\nsudo grafana-cli plugins install grafana-clock-panel\nsudo grafana-cli plugins install grafana-simple-json-datasource\nsudo grafana-cli plugins install grafana-worldmap-panel\nsudo grafana-cli plugins install grafana-piechart-panel\n\n# List installed plugins\nsudo grafana-cli plugins list-remote\nsudo grafana-cli plugins ls\n\n# Update plugins\nsudo grafana-cli plugins update-all\n\n# Remove plugin\nsudo grafana-cli plugins remove grafana-clock-panel\n\n# Restart Grafana after plugin changes\nsudo systemctl restart grafana-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 3000/tcp\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Grafana status\nsudo systemctl status grafana-server\n\n# Check logs\nsudo journalctl -u grafana-server -f\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check listening port\nsudo netstat -tulpn | grep 3000\n\n# Test login\ncurl -X POST \\\n  http://localhost:3000/api/auth/keys \\\n  -H &#039;Content-Type: application/json&#039; \\\n  -d &#039;{&quot;name&quot;:&quot;test&quot;,&quot;role&quot;:&quot;Admin&quot;}&#039;\n\n# Check data sources via API\ncurl -u admin:admin123 http://localhost:3000/api/datasources\n\n# Check dashboard API\ncurl -u admin:admin123 http://localhost:3000/api/search\n\n# Check Grafana version\ngrafana-server --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/grafana-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/grafana&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Stop Grafana\nsystemctl stop grafana-server\n\n# Backup Grafana database and configuration\ntar -czf ${BACKUP_DIR}/grafana-backup-${DATE}.tar.gz \\\n  /var/lib/grafana/ \\\n  /etc/grafana/ \\\n  /etc/systemd/system/grafana-server.service\n\n# Start Grafana\nsystemctl start grafana-server\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;grafana-backup-*.tar.gz&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: grafana-backup-${DATE}.tar.gz&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/grafana-backup.sh\n\n# Schedule daily backup\necho &quot;0 3 * * * root /usr/local/bin/grafana-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h2>\n<h3 id=\"mysql-backend\" class=\"mobile-header\">MySQL Backend</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Grafana for MySQL backend\nsudo tee -a /etc/grafana/grafana.ini &gt; /dev/null &lt;&lt;EOF\n\n[database]\ntype = mysql\nhost = mysql-cluster.example.com:3306\nname = grafana\nuser = grafana\npassword = secure_password\nssl_mode = false\n\n[session]\nprovider = mysql\nprovider_config = grafana:secure_password@tcp(mysql-cluster.example.com:3306)/grafana\n\n[remote_cache]\ntype = redis\nconnstr = addr=redis-cluster.example.com:6379,pool_size=100,db=0\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"load-balancer-configuration\" class=\"mobile-header\">Load Balancer Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># HAProxy configuration for Grafana cluster\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\nfrontend grafana_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/grafana.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend grafana_servers\n\nbackend grafana_servers\n    balance roundrobin\n    option httpchk GET /api/health\n    http-check expect status 200\n    server grafana1 192.168.1.40:3000 check\n    server grafana2 192.168.1.41:3000 check\n    server grafana3 192.168.1.42:3000 check\nEOF\n\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Grafana service status\nsudo systemctl status grafana-server\n\n# View Grafana logs\nsudo tail -f /var/log/grafana/grafana.log\n\n# Check configuration file syntax\nsudo grafana-server --config /etc/grafana/grafana.ini --help\n\n# Test database connection\nsudo -u grafana grafana-cli admin reset-admin-password newpassword\n\n# Check plugin status\nsudo grafana-cli plugins ls\n\n# Debug data source connections\ncurl -u admin:password http://localhost:3000/api/datasources/proxy/1/api/v1/query?query=up\n\n# Check disk space (common issue)\ndf -h /var/lib/grafana\n\n# Reset admin password\nsudo grafana-cli admin reset-admin-password admin123\n\n# Check configuration\nsudo grafana-server --config /etc/grafana/grafana.ini --homepath /usr/share/grafana --help</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/docs/grafana/latest/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/grafana/dashboards/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Dashboard Gallery</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/grafana/plugins/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Plugin Catalog</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://community.grafana.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/blog/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Grafana Labs Blog</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"6 min","wordCount":1128,"lastBuilt":"2025-09-14T00:58:30.494Z"},{"name":"nagios","displayName":"Nagios","slug":"nagios","description":"Repo for nagios","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nagios","updatedAt":"2025-09-08T03:12:01Z","createdAt":"2025-09-08T03:11:50Z","readmeRaw":"## ðŸ‘‹ Welcome to nagios ðŸš€  \n\nnagios README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-nagios\" class=\"mobile-header\">ðŸ‘‹ Welcome to nagios ðŸš€  </h2>\n<p class=\"mobile-paragraph\">nagios README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T00:58:27.154Z"},{"name":"prometheus","displayName":"Prometheus","slug":"prometheus","description":"Repo for prometheus","category":"monitoring","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prometheus","updatedAt":"2025-09-08T03:14:53Z","createdAt":"2025-09-08T03:14:43Z","readmeRaw":"# Prometheus Installation Guide\n\nOpen-source monitoring and alerting toolkit. Collects and stores metrics as time series data for monitoring system performance.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Root or sudo access\n- 4GB RAM minimum, 8GB recommended for production\n- Persistent storage for time series data\n\n## Installation\n\n### Using Pre-compiled Binaries\n```bash\n# Create prometheus user\nsudo useradd --no-create-home --shell /bin/false prometheus\n\n# Create directories\nsudo mkdir -p /etc/prometheus /var/lib/prometheus\nsudo chown prometheus:prometheus /etc/prometheus /var/lib/prometheus\n\n# Download and install Prometheus\ncd /tmp\nwget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz\ntar xzf prometheus-2.45.0.linux-amd64.tar.gz\ncd prometheus-2.45.0.linux-amd64\n\n# Copy binaries\nsudo cp prometheus promtool /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/prometheus /usr/local/bin/promtool\n\n# Copy configuration files\nsudo cp -r consoles console_libraries /etc/prometheus/\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles /etc/prometheus/console_libraries\n```\n\n### Using Package Manager (Ubuntu/Debian)\n```bash\n# Add Prometheus APT repository\nwget -qO - https://packages.grafana.com/gpg.key | sudo apt-key add -\necho \"deb https://packages.grafana.com/oss/deb stable main\" | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Install Prometheus\nsudo apt update\nsudo apt install -y prometheus\n\n# Start and enable Prometheus\nsudo systemctl enable --now prometheus\n```\n\n### Using Docker\n```bash\n# Create directories for persistent data\nmkdir -p ~/prometheus/data ~/prometheus/config\n\n# Create basic configuration\ncat > ~/prometheus/config/prometheus.yml <<EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  # - \"first_rules.yml\"\n  # - \"second_rules.yml\"\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  - job_name: 'node'\n    static_configs:\n      - targets: ['localhost:9100']\nEOF\n\n# Run Prometheus container\ndocker run -d \\\n  --name prometheus \\\n  -p 9090:9090 \\\n  -v ~/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml \\\n  -v ~/prometheus/data:/prometheus \\\n  prom/prometheus:latest \\\n  --config.file=/etc/prometheus/prometheus.yml \\\n  --storage.tsdb.path=/prometheus \\\n  --web.console.libraries=/etc/prometheus/console_libraries \\\n  --web.console.templates=/etc/prometheus/consoles \\\n  --storage.tsdb.retention.time=200h \\\n  --web.enable-lifecycle\n```\n\n## Configuration\n\n### Basic Configuration\n```bash\n# Create main configuration file\nsudo tee /etc/prometheus/prometheus.yml > /dev/null <<EOF\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  - \"/etc/prometheus/rules/*.yml\"\n\nscrape_configs:\n  - job_name: 'prometheus'\n    static_configs:\n      - targets: ['localhost:9090']\n\n  - job_name: 'node-exporter'\n    static_configs:\n      - targets: \n        - 'localhost:9100'\n        - '192.168.1.10:9100'\n        - '192.168.1.11:9100'\n\n  - job_name: 'blackbox'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://google.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  - job_name: 'nginx-exporter'\n    static_configs:\n      - targets: ['localhost:9113']\n\n  - job_name: 'mysql-exporter'\n    static_configs:\n      - targets: ['localhost:9104']\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml\n```\n\n### Create SystemD Service\n```bash\nsudo tee /etc/systemd/system/prometheus.service > /dev/null <<EOF\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=200h \\\n    --web.enable-lifecycle\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now prometheus\n```\n\n### Install Node Exporter\n```bash\n# Download Node Exporter\ncd /tmp\nwget https://github.com/prometheus/node_exporter/releases/download/v1.6.0/node_exporter-1.6.0.linux-amd64.tar.gz\ntar xzf node_exporter-1.6.0.linux-amd64.tar.gz\n\n# Install Node Exporter\nsudo cp node_exporter-1.6.0.linux-amd64/node_exporter /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/node_exporter\n\n# Create systemd service for Node Exporter\nsudo tee /etc/systemd/system/node_exporter.service > /dev/null <<EOF\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/node_exporter \\\n    --collector.systemd \\\n    --collector.processes \\\n    --collector.interrupts\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now node_exporter\n```\n\n## Alerting Rules\n\n```bash\n# Create rules directory\nsudo mkdir -p /etc/prometheus/rules\nsudo chown prometheus:prometheus /etc/prometheus/rules\n\n# Create basic alerting rules\nsudo tee /etc/prometheus/rules/basic.yml > /dev/null <<EOF\ngroups:\n- name: basic.rules\n  rules:\n  - alert: InstanceDown\n    expr: up == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Instance {{ \\$labels.instance }} down\"\n      description: \"{{ \\$labels.instance }} of job {{ \\$labels.job }} has been down for more than 1 minute.\"\n\n  - alert: HighCpuLoad\n    expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=\"idle\"}[5m])) * 100) > 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High CPU load (instance {{ \\$labels.instance }})\"\n      description: \"CPU load is > 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}\"\n\n  - alert: HighMemoryLoad\n    expr: (sum(node_memory_MemTotal_bytes) - sum(node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) ) / sum(node_memory_MemTotal_bytes) * 100 > 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High memory load (instance {{ \\$labels.instance }})\"\n      description: \"Memory load is > 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}\"\n\n  - alert: HighDiskLoad\n    expr: 100 - ((node_filesystem_avail_bytes{mountpoint=\"/\",fstype!=\"rootfs\"} * 100) / node_filesystem_size_bytes{mountpoint=\"/\",fstype!=\"rootfs\"}) > 85\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High disk load (instance {{ \\$labels.instance }})\"\n      description: \"Disk load is > 85%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}\"\n\n  - alert: ServiceDown\n    expr: node_systemd_unit_state{state=\"active\"} == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"Service {{ \\$labels.name }} down on {{ \\$labels.instance }}\"\n      description: \"Service {{ \\$labels.name }} is down on {{ \\$labels.instance }}\"\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/rules/basic.yml\n```\n\n## Service Discovery\n\n### File-based Service Discovery\n```bash\n# Create service discovery directory\nsudo mkdir -p /etc/prometheus/targets\nsudo chown prometheus:prometheus /etc/prometheus/targets\n\n# Create target files\nsudo tee /etc/prometheus/targets/web-servers.json > /dev/null <<EOF\n[\n  {\n    \"targets\": [\"192.168.1.10:9100\", \"192.168.1.11:9100\"],\n    \"labels\": {\n      \"job\": \"web-servers\",\n      \"environment\": \"production\",\n      \"team\": \"infrastructure\"\n    }\n  },\n  {\n    \"targets\": [\"192.168.1.20:9100\", \"192.168.1.21:9100\"],\n    \"labels\": {\n      \"job\": \"database-servers\",\n      \"environment\": \"production\",\n      \"team\": \"database\"\n    }\n  }\n]\nEOF\n\n# Update prometheus.yml to use file discovery\nsudo tee -a /etc/prometheus/prometheus.yml > /dev/null <<EOF\n\n  - job_name: 'file-discovery'\n    file_sd_configs:\n      - files:\n        - '/etc/prometheus/targets/*.json'\n        refresh_interval: 1m\nEOF\n```\n\n## Firewall Configuration\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 9090/tcp  # Prometheus web UI\nsudo ufw allow 9100/tcp  # Node Exporter\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --permanent --add-port=9100/tcp\nsudo firewall-cmd --reload\n```\n\n## Verification\n\n```bash\n# Check Prometheus status\nsudo systemctl status prometheus\n\n# Check Node Exporter status\nsudo systemctl status node_exporter\n\n# Test Prometheus configuration\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Test alerting rules\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Check if services are listening\nsudo netstat -tulpn | grep -E ':(9090|9100)'\n\n# Test web interface\ncurl http://localhost:9090/metrics\ncurl http://localhost:9100/metrics\n\n# Query Prometheus API\ncurl -G http://localhost:9090/api/v1/query --data-urlencode 'query=up'\n\n# View targets status\ncurl http://localhost:9090/api/v1/targets\n```\n\n## Common Exporters Installation\n\n### NGINX Exporter\n```bash\n# Download and install nginx-exporter\ncd /tmp\nwget https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v0.10.0/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\ntar xzf nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\nsudo cp nginx-prometheus-exporter /usr/local/bin/\n\n# Configure NGINX stub status\necho 'server {\n    listen 127.0.0.1:8080;\n    location /stub_status {\n        stub_status on;\n        allow 127.0.0.1;\n        deny all;\n    }\n}' | sudo tee /etc/nginx/sites-available/stub_status\n\nsudo ln -s /etc/nginx/sites-available/stub_status /etc/nginx/sites-enabled/\nsudo systemctl reload nginx\n\n# Create systemd service\nsudo tee /etc/systemd/system/nginx-exporter.service > /dev/null <<EOF\n[Unit]\nDescription=NGINX Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/nginx-prometheus-exporter -nginx.scrape-uri=http://127.0.0.1:8080/stub_status\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nginx-exporter\n```\n\n### MySQL Exporter\n```bash\n# Create MySQL user for monitoring\nmysql -u root -p <<EOF\nCREATE USER 'exporter'@'localhost' IDENTIFIED BY 'XXXXXXXX' WITH MAX_USER_CONNECTIONS 3;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO 'exporter'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Download and install mysqld-exporter\ncd /tmp\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-0.14.0.linux-amd64.tar.gz\nsudo cp mysqld_exporter-0.14.0.linux-amd64/mysqld_exporter /usr/local/bin/\n\n# Create configuration file\nsudo tee /etc/prometheus/.my.cnf > /dev/null <<EOF\n[client]\nuser=exporter\npassword=XXXXXXXX\nhost=localhost\nport=3306\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/.my.cnf\nsudo chmod 600 /etc/prometheus/.my.cnf\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysql-exporter.service > /dev/null <<EOF\n[Unit]\nDescription=MySQL Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nEnvironment=DATA_SOURCE_NAME=exporter:XXXXXXXX@(localhost:3306)/\nExecStart=/usr/local/bin/mysqld_exporter --config.my-cnf=/etc/prometheus/.my.cnf\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now mysql-exporter\n```\n\n## Performance Tuning\n\n```bash\n# Update Prometheus configuration for performance\nsudo tee -a /etc/prometheus/prometheus.yml > /dev/null <<EOF\n\nglobal:\n  scrape_interval:     30s\n  evaluation_interval: 30s\n  external_labels:\n    cluster: 'production'\n    replica: 'prometheus-01'\n\n# Performance settings for systemd service\nsudo tee /etc/systemd/system/prometheus.service.d/performance.conf > /dev/null <<EOF\n[Service]\nExecStart=\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=30d \\\n    --storage.tsdb.retention.size=50GB \\\n    --storage.tsdb.wal-compression \\\n    --web.enable-lifecycle \\\n    --web.enable-admin-api\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart prometheus\n```\n\n## Backup and Restore\n\n```bash\n# Create backup script\nsudo tee /usr/local/bin/prometheus-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/prometheus\"\nPROMETHEUS_DATA=\"/var/lib/prometheus\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Stop Prometheus\nsystemctl stop prometheus\n\n# Create backup\ntar -czf ${BACKUP_DIR}/prometheus_backup_${DATE}.tar.gz -C ${PROMETHEUS_DATA} .\n\n# Start Prometheus\nsystemctl start prometheus\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"prometheus_backup_*.tar.gz\" -type f -mtime +7 -delete\n\necho \"Backup completed: prometheus_backup_${DATE}.tar.gz\"\nEOF\n\nsudo chmod +x /usr/local/bin/prometheus-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/prometheus-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting\n\n```bash\n# Check Prometheus logs\nsudo journalctl -u prometheus -f\n\n# Check Node Exporter logs\nsudo journalctl -u node_exporter -f\n\n# Verify configuration syntax\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Check rule syntax\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Test specific target connectivity\ncurl -m 5 http://192.168.1.10:9100/metrics\n\n# Check disk space usage\ndu -sh /var/lib/prometheus/\n\n# View current configuration\ncurl http://localhost:9090/api/v1/status/config\n\n# Reload configuration without restart\ncurl -X POST http://localhost:9090/-/reload\n```\n\n## Additional Resources\n\n- [Official Documentation](https://prometheus.io/docs/)\n- [Prometheus Configuration](https://prometheus.io/docs/prometheus/latest/configuration/configuration/)\n- [Alerting Rules](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/)\n- [Best Practices](https://prometheus.io/docs/practices/rules/)\n- [Exporters and Integrations](https://prometheus.io/docs/instrumenting/exporters/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"prometheus-installation-guide\" class=\"mobile-header\">Prometheus Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source monitoring and alerting toolkit. Collects and stores metrics as time series data for monitoring system performance.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB recommended for production</li>\n<li class=\"mobile-list-item\">Persistent storage for time series data</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-pre-compiled-binaries\" class=\"mobile-header\">Using Pre-compiled Binaries</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create prometheus user\nsudo useradd --no-create-home --shell /bin/false prometheus\n\n# Create directories\nsudo mkdir -p /etc/prometheus /var/lib/prometheus\nsudo chown prometheus:prometheus /etc/prometheus /var/lib/prometheus\n\n# Download and install Prometheus\ncd /tmp\nwget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz\ntar xzf prometheus-2.45.0.linux-amd64.tar.gz\ncd prometheus-2.45.0.linux-amd64\n\n# Copy binaries\nsudo cp prometheus promtool /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/prometheus /usr/local/bin/promtool\n\n# Copy configuration files\nsudo cp -r consoles console_libraries /etc/prometheus/\nsudo chown -R prometheus:prometheus /etc/prometheus/consoles /etc/prometheus/console_libraries</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-package-manager-ubuntudebian\" class=\"mobile-header\">Using Package Manager (Ubuntu/Debian)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Prometheus APT repository\nwget -qO - https://packages.grafana.com/gpg.key | sudo apt-key add -\necho &quot;deb https://packages.grafana.com/oss/deb stable main&quot; | sudo tee /etc/apt/sources.list.d/grafana.list\n\n# Install Prometheus\nsudo apt update\nsudo apt install -y prometheus\n\n# Start and enable Prometheus\nsudo systemctl enable --now prometheus</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create directories for persistent data\nmkdir -p ~/prometheus/data ~/prometheus/config\n\n# Create basic configuration\ncat &gt; ~/prometheus/config/prometheus.yml &lt;&lt;EOF\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  # - &quot;first_rules.yml&quot;\n  # - &quot;second_rules.yml&quot;\n\nscrape_configs:\n  - job_name: &#039;prometheus&#039;\n    static_configs:\n      - targets: [&#039;localhost:9090&#039;]\n\n  - job_name: &#039;node&#039;\n    static_configs:\n      - targets: [&#039;localhost:9100&#039;]\nEOF\n\n# Run Prometheus container\ndocker run -d \\\n  --name prometheus \\\n  -p 9090:9090 \\\n  -v ~/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml \\\n  -v ~/prometheus/data:/prometheus \\\n  prom/prometheus:latest \\\n  --config.file=/etc/prometheus/prometheus.yml \\\n  --storage.tsdb.path=/prometheus \\\n  --web.console.libraries=/etc/prometheus/console_libraries \\\n  --web.console.templates=/etc/prometheus/consoles \\\n  --storage.tsdb.retention.time=200h \\\n  --web.enable-lifecycle</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create main configuration file\nsudo tee /etc/prometheus/prometheus.yml &gt; /dev/null &lt;&lt;EOF\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 15s\n\nalerting:\n  alertmanagers:\n    - static_configs:\n        - targets:\n          # - alertmanager:9093\n\nrule_files:\n  - &quot;/etc/prometheus/rules/*.yml&quot;\n\nscrape_configs:\n  - job_name: &#039;prometheus&#039;\n    static_configs:\n      - targets: [&#039;localhost:9090&#039;]\n\n  - job_name: &#039;node-exporter&#039;\n    static_configs:\n      - targets: \n        - &#039;localhost:9100&#039;\n        - &#039;192.168.1.10:9100&#039;\n        - &#039;192.168.1.11:9100&#039;\n\n  - job_name: &#039;blackbox&#039;\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://google.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  - job_name: &#039;nginx-exporter&#039;\n    static_configs:\n      - targets: [&#039;localhost:9113&#039;]\n\n  - job_name: &#039;mysql-exporter&#039;\n    static_configs:\n      - targets: [&#039;localhost:9104&#039;]\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/prometheus.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"create-systemd-service\" class=\"mobile-header\">Create SystemD Service</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/systemd/system/prometheus.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Prometheus\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=200h \\\n    --web.enable-lifecycle\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now prometheus</code></pre>\n      </div>\n    </div>\n<h3 id=\"install-node-exporter\" class=\"mobile-header\">Install Node Exporter</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Node Exporter\ncd /tmp\nwget https://github.com/prometheus/node_exporter/releases/download/v1.6.0/node_exporter-1.6.0.linux-amd64.tar.gz\ntar xzf node_exporter-1.6.0.linux-amd64.tar.gz\n\n# Install Node Exporter\nsudo cp node_exporter-1.6.0.linux-amd64/node_exporter /usr/local/bin/\nsudo chown prometheus:prometheus /usr/local/bin/node_exporter\n\n# Create systemd service for Node Exporter\nsudo tee /etc/systemd/system/node_exporter.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n\n[Service]\nUser=prometheus\nGroup=prometheus\nType=simple\nExecStart=/usr/local/bin/node_exporter \\\n    --collector.systemd \\\n    --collector.processes \\\n    --collector.interrupts\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now node_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"alerting-rules\" class=\"mobile-header\">Alerting Rules</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create rules directory\nsudo mkdir -p /etc/prometheus/rules\nsudo chown prometheus:prometheus /etc/prometheus/rules\n\n# Create basic alerting rules\nsudo tee /etc/prometheus/rules/basic.yml &gt; /dev/null &lt;&lt;EOF\ngroups:\n- name: basic.rules\n  rules:\n  - alert: InstanceDown\n    expr: up == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: &quot;Instance {{ \\$labels.instance }} down&quot;\n      description: &quot;{{ \\$labels.instance }} of job {{ \\$labels.job }} has been down for more than 1 minute.&quot;\n\n  - alert: HighCpuLoad\n    expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode=&quot;idle&quot;}[5m])) * 100) &gt; 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: &quot;High CPU load (instance {{ \\$labels.instance }})&quot;\n      description: &quot;CPU load is &gt; 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}&quot;\n\n  - alert: HighMemoryLoad\n    expr: (sum(node_memory_MemTotal_bytes) - sum(node_memory_MemFree_bytes + node_memory_Buffers_bytes + node_memory_Cached_bytes) ) / sum(node_memory_MemTotal_bytes) * 100 &gt; 80\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: &quot;High memory load (instance {{ \\$labels.instance }})&quot;\n      description: &quot;Memory load is &gt; 80%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}&quot;\n\n  - alert: HighDiskLoad\n    expr: 100 - ((node_filesystem_avail_bytes{mountpoint=&quot;/&quot;,fstype!=&quot;rootfs&quot;} * 100) / node_filesystem_size_bytes{mountpoint=&quot;/&quot;,fstype!=&quot;rootfs&quot;}) &gt; 85\n    for: 2m\n    labels:\n      severity: warning\n    annotations:\n      summary: &quot;High disk load (instance {{ \\$labels.instance }})&quot;\n      description: &quot;Disk load is &gt; 85%\\n  VALUE = {{ \\$value }}\\n  LABELS: {{ \\$labels }}&quot;\n\n  - alert: ServiceDown\n    expr: node_systemd_unit_state{state=&quot;active&quot;} == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: &quot;Service {{ \\$labels.name }} down on {{ \\$labels.instance }}&quot;\n      description: &quot;Service {{ \\$labels.name }} is down on {{ \\$labels.instance }}&quot;\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/rules/basic.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-discovery\" class=\"mobile-header\">Service Discovery</h2>\n<h3 id=\"file-based-service-discovery\" class=\"mobile-header\">File-based Service Discovery</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create service discovery directory\nsudo mkdir -p /etc/prometheus/targets\nsudo chown prometheus:prometheus /etc/prometheus/targets\n\n# Create target files\nsudo tee /etc/prometheus/targets/web-servers.json &gt; /dev/null &lt;&lt;EOF\n[\n  {\n    &quot;targets&quot;: [&quot;192.168.1.10:9100&quot;, &quot;192.168.1.11:9100&quot;],\n    &quot;labels&quot;: {\n      &quot;job&quot;: &quot;web-servers&quot;,\n      &quot;environment&quot;: &quot;production&quot;,\n      &quot;team&quot;: &quot;infrastructure&quot;\n    }\n  },\n  {\n    &quot;targets&quot;: [&quot;192.168.1.20:9100&quot;, &quot;192.168.1.21:9100&quot;],\n    &quot;labels&quot;: {\n      &quot;job&quot;: &quot;database-servers&quot;,\n      &quot;environment&quot;: &quot;production&quot;,\n      &quot;team&quot;: &quot;database&quot;\n    }\n  }\n]\nEOF\n\n# Update prometheus.yml to use file discovery\nsudo tee -a /etc/prometheus/prometheus.yml &gt; /dev/null &lt;&lt;EOF\n\n  - job_name: &#039;file-discovery&#039;\n    file_sd_configs:\n      - files:\n        - &#039;/etc/prometheus/targets/*.json&#039;\n        refresh_interval: 1m\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 9090/tcp  # Prometheus web UI\nsudo ufw allow 9100/tcp  # Node Exporter\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=9090/tcp\nsudo firewall-cmd --permanent --add-port=9100/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Prometheus status\nsudo systemctl status prometheus\n\n# Check Node Exporter status\nsudo systemctl status node_exporter\n\n# Test Prometheus configuration\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Test alerting rules\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Check if services are listening\nsudo netstat -tulpn | grep -E &#039;:(9090|9100)&#039;\n\n# Test web interface\ncurl http://localhost:9090/metrics\ncurl http://localhost:9100/metrics\n\n# Query Prometheus API\ncurl -G http://localhost:9090/api/v1/query --data-urlencode &#039;query=up&#039;\n\n# View targets status\ncurl http://localhost:9090/api/v1/targets</code></pre>\n      </div>\n    </div>\n<h2 id=\"common-exporters-installation\" class=\"mobile-header\">Common Exporters Installation</h2>\n<h3 id=\"nginx-exporter\" class=\"mobile-header\">NGINX Exporter</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download and install nginx-exporter\ncd /tmp\nwget https://github.com/nginxinc/nginx-prometheus-exporter/releases/download/v0.10.0/nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\ntar xzf nginx-prometheus-exporter_0.10.0_linux_amd64.tar.gz\nsudo cp nginx-prometheus-exporter /usr/local/bin/\n\n# Configure NGINX stub status\necho &#039;server {\n    listen 127.0.0.1:8080;\n    location /stub_status {\n        stub_status on;\n        allow 127.0.0.1;\n        deny all;\n    }\n}&#039; | sudo tee /etc/nginx/sites-available/stub_status\n\nsudo ln -s /etc/nginx/sites-available/stub_status /etc/nginx/sites-enabled/\nsudo systemctl reload nginx\n\n# Create systemd service\nsudo tee /etc/systemd/system/nginx-exporter.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=NGINX Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/nginx-prometheus-exporter -nginx.scrape-uri=http://127.0.0.1:8080/stub_status\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nginx-exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-exporter\" class=\"mobile-header\">MySQL Exporter</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create MySQL user for monitoring\nmysql -u root -p &lt;&lt;EOF\nCREATE USER &#039;exporter&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;XXXXXXXX&#039; WITH MAX_USER_CONNECTIONS 3;\nGRANT PROCESS, REPLICATION CLIENT, SELECT ON *.* TO &#039;exporter&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Download and install mysqld-exporter\ncd /tmp\nwget https://github.com/prometheus/mysqld_exporter/releases/download/v0.14.0/mysqld_exporter-0.14.0.linux-amd64.tar.gz\ntar xzf mysqld_exporter-0.14.0.linux-amd64.tar.gz\nsudo cp mysqld_exporter-0.14.0.linux-amd64/mysqld_exporter /usr/local/bin/\n\n# Create configuration file\nsudo tee /etc/prometheus/.my.cnf &gt; /dev/null &lt;&lt;EOF\n[client]\nuser=exporter\npassword=XXXXXXXX\nhost=localhost\nport=3306\nEOF\n\nsudo chown prometheus:prometheus /etc/prometheus/.my.cnf\nsudo chmod 600 /etc/prometheus/.my.cnf\n\n# Create systemd service\nsudo tee /etc/systemd/system/mysql-exporter.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=MySQL Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nEnvironment=DATA_SOURCE_NAME=exporter:XXXXXXXX@(localhost:3306)/\nExecStart=/usr/local/bin/mysqld_exporter --config.my-cnf=/etc/prometheus/.my.cnf\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now mysql-exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-tuning\" class=\"mobile-header\">Performance Tuning</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update Prometheus configuration for performance\nsudo tee -a /etc/prometheus/prometheus.yml &gt; /dev/null &lt;&lt;EOF\n\nglobal:\n  scrape_interval:     30s\n  evaluation_interval: 30s\n  external_labels:\n    cluster: &#039;production&#039;\n    replica: &#039;prometheus-01&#039;\n\n# Performance settings for systemd service\nsudo tee /etc/systemd/system/prometheus.service.d/performance.conf &gt; /dev/null &lt;&lt;EOF\n[Service]\nExecStart=\nExecStart=/usr/local/bin/prometheus \\\n    --config.file /etc/prometheus/prometheus.yml \\\n    --storage.tsdb.path /var/lib/prometheus/ \\\n    --web.console.libraries=/etc/prometheus/console_libraries \\\n    --web.console.templates=/etc/prometheus/consoles \\\n    --storage.tsdb.retention.time=30d \\\n    --storage.tsdb.retention.size=50GB \\\n    --storage.tsdb.wal-compression \\\n    --web.enable-lifecycle \\\n    --web.enable-admin-api\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart prometheus</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/prometheus-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/prometheus&quot;\nPROMETHEUS_DATA=&quot;/var/lib/prometheus&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Stop Prometheus\nsystemctl stop prometheus\n\n# Create backup\ntar -czf ${BACKUP_DIR}/prometheus_backup_${DATE}.tar.gz -C ${PROMETHEUS_DATA} .\n\n# Start Prometheus\nsystemctl start prometheus\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;prometheus_backup_*.tar.gz&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: prometheus_backup_${DATE}.tar.gz&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/prometheus-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/prometheus-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Prometheus logs\nsudo journalctl -u prometheus -f\n\n# Check Node Exporter logs\nsudo journalctl -u node_exporter -f\n\n# Verify configuration syntax\nsudo -u prometheus /usr/local/bin/promtool check config /etc/prometheus/prometheus.yml\n\n# Check rule syntax\nsudo -u prometheus /usr/local/bin/promtool check rules /etc/prometheus/rules/*.yml\n\n# Test specific target connectivity\ncurl -m 5 http://192.168.1.10:9100/metrics\n\n# Check disk space usage\ndu -sh /var/lib/prometheus/\n\n# View current configuration\ncurl http://localhost:9090/api/v1/status/config\n\n# Reload configuration without restart\ncurl -X POST http://localhost:9090/-/reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/prometheus/latest/configuration/configuration/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prometheus Configuration</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Alerting Rules</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/practices/rules/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/instrumenting/exporters/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Exporters and Integrations</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"7 min","wordCount":1385,"lastBuilt":"2025-09-14T00:58:24.641Z"}]},"__N_SSG":true}