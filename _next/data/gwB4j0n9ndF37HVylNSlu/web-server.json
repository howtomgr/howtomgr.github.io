{"pageProps":{"category":{"key":"web-server","name":"Web Servers","description":"High-performance web servers and reverse proxies","icon":"🌐","color":"#50fa7b","keywords":["nginx","apache","haproxy","traefik","caddy"]},"guides":[{"name":"apache","displayName":"Apache","slug":"apache","description":"Repo for apache","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/apache","updatedAt":"2025-09-08T03:04:58Z","createdAt":"2025-09-08T03:04:47Z","readmeRaw":"# Apache HTTP Server Installation Guide\n\nWorld's most popular web server software serving over 40% of active websites. Reliable, secure, and highly configurable for hosting websites and web applications.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access  \n- 1GB RAM minimum, 2GB+ recommended for production\n- Network connectivity for package downloads\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Apache and essential modules\nsudo apt install -y apache2 apache2-utils\n\n# Enable essential modules\nsudo a2enmod rewrite ssl headers deflate expires security2\n\n# Start and enable Apache\nsudo systemctl enable --now apache2\n\n# Check status\nsudo systemctl status apache2\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install Apache (httpd)\nsudo yum install -y httpd httpd-tools mod_ssl\n\n# For newer versions with dnf\nsudo dnf install -y httpd httpd-tools mod_ssl\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Check status\nsudo systemctl status httpd\n```\n\n### Fedora\n```bash\n# Install Apache\nsudo dnf install -y httpd httpd-tools mod_ssl mod_security\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n```\n\n### Arch Linux\n```bash\n# Install Apache\nsudo pacman -Syu apache\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Edit configuration\nsudo nano /etc/httpd/conf/httpd.conf\n# Uncomment: ServerName www.example.com:80\n```\n\n### openSUSE/SUSE\n```bash\n# Install Apache\nsudo zypper install -y apache2 apache2-mod_ssl apache2-utils\n\n# Start and enable Apache\nsudo systemctl enable --now apache2\n\n# Configure firewall\nsudo SuSEfirewall2 open EXT TCP 80 443\n```\n\n### Alpine Linux\n```bash\n# Install Apache\nsudo apk update\nsudo apk add apache2 apache2-ssl apache2-utils\n\n# Create necessary directories\nsudo mkdir -p /var/www/html\nsudo mkdir -p /run/apache2\n\n# Start and enable Apache\nsudo rc-update add apache2 default\nsudo service apache2 start\n```\n\n### Docker Installation\n```bash\n# Official Apache Docker image\ndocker run -d \\\n  --name apache \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -v ~/apache/htdocs:/usr/local/apache2/htdocs/ \\\n  -v ~/apache/conf:/usr/local/apache2/conf/ \\\n  -v ~/apache/logs:/usr/local/apache2/logs/ \\\n  httpd:latest\n\n# With Docker Compose\ncat > docker-compose.yml <<EOF\nversion: '3.8'\nservices:\n  apache:\n    image: httpd:latest\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./htdocs:/usr/local/apache2/htdocs/\n      - ./conf/httpd.conf:/usr/local/apache2/conf/httpd.conf\n      - ./logs:/usr/local/apache2/logs/\n    networks:\n      - webserver\n\nnetworks:\n  webserver:\n    driver: bridge\nEOF\n\ndocker-compose up -d\n```\n\n### Source Compilation (Advanced)\n```bash\n# Install build dependencies\n# Ubuntu/Debian\nsudo apt install -y build-essential libapr1-dev libaprutil1-dev libpcre3-dev libssl-dev zlib1g-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y \"Development Tools\"\nsudo yum install -y apr-devel apr-util-devel pcre-devel openssl-devel zlib-devel\n\n# Download Apache source\ncd /tmp\nwget https://archive.apache.org/dist/httpd/httpd-2.4.57.tar.gz\ntar xzf httpd-2.4.57.tar.gz\ncd httpd-2.4.57\n\n# Configure with security and performance modules\n./configure \\\n  --prefix=/etc/apache2 \\\n  --exec-prefix=/usr \\\n  --bindir=/usr/bin \\\n  --sbindir=/usr/sbin \\\n  --sysconfdir=/etc/apache2 \\\n  --libexecdir=/usr/lib/apache2/modules \\\n  --localstatedir=/var \\\n  --datadir=/usr/share/apache2 \\\n  --includedir=/usr/include/apache2 \\\n  --infodir=/usr/share/info \\\n  --mandir=/usr/share/man \\\n  --with-program-name=apache2 \\\n  --enable-layout=Debian \\\n  --with-regex=pcre \\\n  --enable-mods-shared=reallyall \\\n  --enable-ssl \\\n  --enable-rewrite \\\n  --enable-headers \\\n  --enable-deflate \\\n  --enable-expires \\\n  --enable-security \\\n  --with-ssl=/usr \\\n  --with-ldap \\\n  --with-ldap-include=/usr/include \\\n  --with-ldap-lib=/usr/lib\n\n# Compile and install\nmake -j$(nproc)\nsudo make install\n\n# Create apache user\nsudo useradd -r -s /sbin/nologin apache\n\n# Create systemd service\nsudo tee /etc/systemd/system/apache2.service > /dev/null <<EOF\n[Unit]\nDescription=The Apache HTTP Server\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=notify\nExecStart=/usr/sbin/apache2 -DFOREGROUND\nExecReload=/usr/sbin/apache2ctl graceful\nExecStop=/bin/kill -WINTERM \\${MAINPID}\nKillSignal=SIGCONT\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now apache2\n```\n\n## Security Hardening (2024 Best Practices)\n\n### Hide Server Information\n```bash\n# Create security configuration\n# Ubuntu/Debian\nsudo tee /etc/apache2/conf-available/security-hardening.conf > /dev/null <<EOF\n# Hide Apache version and OS information\nServerTokens Prod\nServerSignature Off\n\n# Hide PHP version (if using PHP)\nHeader always unset X-Powered-By\nHeader unset X-Powered-By\n\n# Security headers (2024 recommendations)\nHeader always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\nHeader always set X-Frame-Options \"SAMEORIGIN\"\nHeader always set X-Content-Type-Options \"nosniff\"\nHeader always set X-XSS-Protection \"1; mode=block\"\nHeader always set Referrer-Policy \"strict-origin-when-cross-origin\"\nHeader always set Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'self'; form-action 'self'; base-uri 'self';\"\nHeader always set Permissions-Policy \"camera=(), microphone=(), geolocation=()\"\n\n# Remove sensitive headers\nHeader always unset Server\nHeader unset Server\n\n# Disable server status and info\n<Location \"/server-status\">\n    SetHandler server-status\n    Require local\n</Location>\n\n<Location \"/server-info\">\n    SetHandler server-info\n    Require local\n</Location>\n\n# Disable trace method\nTraceEnable off\n\n# Timeout configurations\nTimeout 60\nKeepAliveTimeout 15\n\n# Limit request size (adjust as needed)\nLimitRequestBody 10485760  # 10MB\n\n# Hide .htaccess files\n<FilesMatch \"^\\.ht\">\n    Require all denied\n</FilesMatch>\n\n# Hide backup and temporary files\n<FilesMatch \"\\.(bak|backup|swp|tmp|~)$\">\n    Require all denied\n</FilesMatch>\n\n# Disable directory browsing by default\nOptions -Indexes\n\n# Information disclosure protection\n<DirectoryMatch \"/\\.\">\n    Require all denied\n</DirectoryMatch>\n\n# Clickjacking protection\nHeader always append X-Frame-Options SAMEORIGIN\nEOF\n\n# Enable security configuration\nsudo a2enconf security-hardening\nsudo systemctl reload apache2\n\n# RHEL/CentOS (add to main configuration)\nsudo tee -a /etc/httpd/conf/httpd.conf > /dev/null <<EOF\n\n# Security hardening\nServerTokens Prod\nServerSignature Off\n\n# Load security headers module\nLoadModule headers_module modules/mod_headers.so\n\n# Security headers\nHeader always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\nHeader always set X-Frame-Options \"SAMEORIGIN\"\nHeader always set X-Content-Type-Options \"nosniff\"\nHeader always set X-XSS-Protection \"1; mode=block\"\nHeader always set Referrer-Policy \"strict-origin-when-cross-origin\"\n\n# Disable trace method\nTraceEnable off\n\n# Hide .htaccess files\n<FilesMatch \"^\\.ht\">\n    Require all denied\n</FilesMatch>\n\n# Disable directory browsing\nOptions -Indexes\nEOF\n\nsudo systemctl reload httpd\n```\n\n### ModSecurity WAF Installation\n```bash\n# Ubuntu/Debian\nsudo apt install -y libapache2-mod-security2\n\n# RHEL/CentOS\nsudo yum install -y mod_security mod_security_crs\n\n# Enable ModSecurity\nsudo a2enmod security2  # Ubuntu/Debian\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/apache2/modsecurity.d\ncd /etc/apache2/modsecurity.d\nsudo wget https://github.com/coreruleset/coreruleset/archive/refs/tags/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 crs\n\n# Configure ModSecurity\nsudo tee /etc/apache2/mods-available/security2.conf > /dev/null <<EOF\n<IfModule mod_security2.c>\n    SecRuleEngine On\n    SecRequestBodyAccess On\n    SecRequestBodyLimit 13107200\n    SecRequestBodyNoFilesLimit 131072\n    SecRequestBodyInMemoryLimit 131072\n    SecRequestBodyLimitAction Reject\n    SecRule REQUEST_HEADERS:Content-Type \"text/xml\" \\\n         \"id:'200000',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML\"\n    SecRule REQUEST_HEADERS:Content-Type \"application/json\" \\\n         \"id:'200001',phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON\"\n    SecRule REQBODY_ERROR \"!@eq 0\" \\\n    \"id:'200002', phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'Error %{REQBODY_ERROR_MSG}',severity:2\"\n    SecRule MULTIPART_STRICT_ERROR \"!@eq 0\" \\\n    \"id:'200003',phase:2,t:none,log,deny,status:400, \\\n    msg:'Multipart request body failed strict validation: \\\n    PE %{REQBODY_PROCESSOR_ERROR}, \\\n    BQ %{MULTIPART_BOUNDARY_QUOTED}, \\\n    BW %{MULTIPART_BOUNDARY_WHITESPACE}, \\\n    DB %{MULTIPART_DATA_BEFORE}, \\\n    DA %{MULTIPART_DATA_AFTER}, \\\n    HF %{MULTIPART_HEADER_FOLDING}, \\\n    LF %{MULTIPART_LF_LINE}, \\\n    SM %{MULTIPART_MISSING_SEMICOLON}, \\\n    IQ %{MULTIPART_INVALID_QUOTING}, \\\n    IP %{MULTIPART_INVALID_PART}, \\\n    IH %{MULTIPART_INVALID_HEADER_FOLDING}, \\\n    FL %{MULTIPART_FILE_LIMIT_EXCEEDED}'\"\n\n    SecRule MULTIPART_UNMATCHED_BOUNDARY \"!@eq 0\" \\\n    \"id:'200004',phase:2,t:none,log,deny,msg:'Multipart parser detected a possible unmatched boundary.'\"\n\n    SecPcreMatchLimit 1000\n    SecPcreMatchLimitRecursion 1000\n\n    SecRule TX:/^MSC_/ \"!@streq 0\" \\\n            \"id:'200005',phase:2,t:none,deny,msg:'ModSecurity internal error flagged: %{MATCHED_VAR_NAME}'\"\n\n    SecResponseBodyAccess Off\n    SecDebugLog /var/log/apache2/modsec_debug.log\n    SecDebugLogLevel 0\n    SecAuditEngine RelevantOnly\n    SecAuditLogRelevantStatus \"^(?:5|4(?!04))\"\n    SecAuditLogParts ABDEFHIJZ\n    SecAuditLogType Serial\n    SecAuditLog /var/log/apache2/modsec_audit.log\n    \n    # Include OWASP Core Rule Set\n    Include /etc/apache2/modsecurity.d/crs/crs-setup.conf.example\n    Include /etc/apache2/modsecurity.d/crs/rules/*.conf\n</IfModule>\nEOF\n\n# Create data directory\nsudo mkdir -p /var/cache/modsecurity\nsudo chown www-data:www-data /var/cache/modsecurity\n\nsudo systemctl reload apache2\n```\n\n### SSL/TLS Configuration (Modern 2024 Standards)\n```bash\n# Create modern SSL configuration\nsudo tee /etc/apache2/conf-available/ssl-modern.conf > /dev/null <<EOF\n# Modern SSL configuration (2024)\nSSLEngine on\n\n# Protocols - Only TLS 1.2 and 1.3\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n\n# Cipher suites for modern browsers (2024)\nSSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n\n# Prefer server ciphers for TLS 1.2, client ciphers for TLS 1.3\nSSLHonorCipherOrder off\n\n# HSTS (HTTP Strict Transport Security)\nHeader always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n\n# Session cache\nSSLSessionCache shmcb:/var/run/ssl_scache(512000)\nSSLSessionCacheTimeout 300\n\n# OCSP Stapling\nSSLUseStapling On\nSSLStaplingCache shmcb:/var/run/ocsp(128000)\nSSLStaplingResponderTimeout 5\nSSLStaplingReturnResponderErrors off\n\n# Modern security options\nSSLCompression off\nSSLSessionTickets off\n\n# Perfect Forward Secrecy\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem\nEOF\n\n# Generate strong DH parameters\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n# Enable SSL configuration\nsudo a2enconf ssl-modern\nsudo a2enmod ssl headers\nsudo systemctl reload apache2\n```\n\n### Secure Virtual Host Configuration\n```bash\n# Create production-ready virtual host\nsudo tee /etc/apache2/sites-available/secure-site.conf > /dev/null <<EOF\n# HTTP to HTTPS redirect\n<VirtualHost *:80>\n    ServerName example.com\n    ServerAlias www.example.com\n    \n    # Security headers for redirects\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    \n    # Redirect to HTTPS\n    Redirect permanent / https://example.com/\n</VirtualHost>\n\n# HTTPS Virtual Host\n<VirtualHost *:443>\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/html/example.com\n    \n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    # Security headers (2024 standards)\n    Header always set Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\"\n    Header always set X-Frame-Options \"SAMEORIGIN\"\n    Header always set X-Content-Type-Options \"nosniff\"\n    Header always set X-XSS-Protection \"1; mode=block\"\n    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"\n    Header always set Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'self'; form-action 'self'; base-uri 'self';\"\n    Header always set Permissions-Policy \"camera=(), microphone=(), geolocation=()\"\n    \n    # Remove server information\n    Header always unset Server\n    Header unset X-Powered-By\n    \n    <Directory /var/www/html/example.com>\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n        \n        # Additional security\n        <Files \".*\">\n            Require all denied\n        </Files>\n        \n        <Files \"*.php~\">\n            Require all denied\n        </Files>\n        \n        <Files \"*.inc\">\n            Require all denied\n        </Files>\n    </Directory>\n    \n    # PHP configuration (if using PHP)\n    <IfModule mod_php.c>\n        php_admin_flag allow_url_include Off\n        php_admin_flag allow_url_fopen Off\n        php_admin_flag file_uploads On\n        php_admin_value upload_max_filesize 64M\n        php_admin_value post_max_size 64M\n        php_admin_value memory_limit 256M\n        php_admin_value max_execution_time 300\n        php_admin_flag expose_php Off\n    </IfModule>\n    \n    # Compression\n    <IfModule mod_deflate.c>\n        SetOutputFilter DEFLATE\n        AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain application/javascript application/xml+rss application/xml application/x-javascript application/json\n        \n        # Don't compress images\n        SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png)$ no-gzip dont-vary\n        SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary\n    </IfModule>\n    \n    # Caching rules\n    <IfModule mod_expires.c>\n        ExpiresActive On\n        ExpiresByType image/jpg \"access plus 1 month\"\n        ExpiresByType image/jpeg \"access plus 1 month\"\n        ExpiresByType image/gif \"access plus 1 month\"\n        ExpiresByType image/png \"access plus 1 month\"\n        ExpiresByType image/webp \"access plus 1 month\"\n        ExpiresByType text/css \"access plus 1 month\"\n        ExpiresByType application/pdf \"access plus 1 month\"\n        ExpiresByType text/javascript \"access plus 1 month\"\n        ExpiresByType application/javascript \"access plus 1 month\"\n        ExpiresByType application/x-javascript \"access plus 1 month\"\n        ExpiresByType application/x-shockwave-flash \"access plus 1 month\"\n        ExpiresByType image/x-icon \"access plus 1 year\"\n        ExpiresDefault \"access plus 2 days\"\n    </IfModule>\n    \n    # Rate limiting (if mod_evasive is available)\n    <IfModule mod_evasive24.c>\n        DOSHashTableSize    1024\n        DOSPageCount        2\n        DOSSiteCount        50\n        DOSPageInterval     1\n        DOSSiteInterval     1\n        DOSBlockingPeriod   600\n        DOSLogDir           /var/log/apache2/\n        DOSEmailNotify      admin@example.com\n    </IfModule>\n    \n    # ModSecurity\n    <IfModule mod_security2.c>\n        SecRuleEngine On\n        SecDefaultAction \"log,auditlog,pass\"\n    </IfModule>\n    \n    ErrorLog \\${APACHE_LOG_DIR}/example.com_error.log\n    CustomLog \\${APACHE_LOG_DIR}/example.com_access.log combined\n    \n    # Log security events\n    CustomLog \\${APACHE_LOG_DIR}/example.com_security.log \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\"\" env=security\n</VirtualHost>\n\n# WWW redirect\n<VirtualHost *:443>\n    ServerName www.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    Redirect permanent / https://example.com/\n</VirtualHost>\nEOF\n\nsudo a2ensite secure-site.conf\nsudo a2enconf security-hardening\nsudo systemctl reload apache2\n```\n\n### Advanced Security Modules\n```bash\n# Install additional security modules\n# Ubuntu/Debian\nsudo apt install -y libapache2-mod-evasive libapache2-mod-security2\n\n# RHEL/CentOS\nsudo yum install -y mod_evasive mod_security\n\n# Enable modules\nsudo a2enmod evasive  # Ubuntu/Debian\nsudo a2enmod security2\n\n# Configure mod_evasive (DDoS protection)\nsudo tee /etc/apache2/mods-available/evasive.conf > /dev/null <<EOF\n<IfModule mod_evasive24.c>\n    DOSHashTableSize    1024\n    DOSPageCount        3\n    DOSSiteCount        50\n    DOSPageInterval     1\n    DOSSiteInterval     1\n    DOSBlockingPeriod   600\n    DOSLogDir           /var/log/apache2/\n    DOSEmailNotify      admin@example.com\n    DOSWhitelist        127.0.0.1\n    DOSWhitelist        192.168.1.*\n</IfModule>\nEOF\n\nsudo systemctl reload apache2\n```\n\n## SSL Certificate Setup (Cross-Platform)\n\n### Let's Encrypt Integration\n```bash\n# Install Certbot - Universal method\nsudo snap install core; sudo snap refresh core\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n\n# Alternative: Package manager installation\n# Ubuntu/Debian\nsudo apt install -y certbot python3-certbot-apache\n\n# RHEL/CentOS (enable EPEL first)\nsudo yum install -y epel-release\nsudo yum install -y certbot python3-certbot-apache\n\n# Fedora\nsudo dnf install -y certbot python3-certbot-apache\n\n# Arch Linux\nsudo pacman -S certbot certbot-apache\n\n# Obtain certificate\nsudo certbot --apache -d example.com -d www.example.com\n\n# Auto-renewal setup (universal)\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet && systemctl reload apache2\n\n# Test renewal\nsudo certbot renew --dry-run\n```\n\n### Manual SSL Configuration\n```bash\n# Generate self-signed certificate for testing\nsudo mkdir -p /etc/ssl/private\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/ssl/private/apache-selfsigned.key \\\n  -out /etc/ssl/certs/apache-selfsigned.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=example.com\"\n\n# Create SSL configuration snippet\nsudo tee /etc/apache2/conf-available/ssl-params.conf > /dev/null <<EOF\n# Modern SSL configuration\nSSLEngine on\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\nSSLCipherSuite ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384\nSSLHonorCipherOrder off\nSSLSessionTickets off\nSSLUseStapling on\nSSLStaplingCache shmcb:/var/run/ssl_stapling(32768)\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem\n\n# Security headers\nHeader always set Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\"\nHeader always set X-Content-Type-Options nosniff\nHeader always set X-Frame-Options SAMEORIGIN\nHeader always set X-XSS-Protection \"1; mode=block\"\nEOF\n\nsudo a2enconf ssl-params\n```\n\n## Firewall Configuration (All Platforms)\n\n### UFW (Ubuntu/Debian)\n```bash\nsudo ufw app list | grep Apache\nsudo ufw allow 'Apache Full'    # HTTP and HTTPS\nsudo ufw allow 'Apache'         # HTTP only  \nsudo ufw allow 'Apache Secure'  # HTTPS only\nsudo ufw enable\nsudo ufw status\n```\n\n### Firewalld (RHEL/CentOS/Fedora)\n```bash\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\nsudo firewall-cmd --list-services\n```\n\n### iptables (Universal)\n```bash\n# Allow HTTP and HTTPS\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\n\n# Save rules (varies by distribution)\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save\n\n# Arch Linux\nsudo iptables-save > /etc/iptables/iptables.rules\n\n# Alpine Linux\nsudo /etc/init.d/iptables save\n```\n\n### SELinux Configuration (RHEL/CentOS/Fedora)\n```bash\n# Check SELinux status\ngetenforce\n\n# Set SELinux booleans for Apache\nsudo setsebool -P httpd_can_network_connect 1\nsudo setsebool -P httpd_can_network_relay 1\nsudo setsebool -P httpd_use_nfs 1\nsudo setsebool -P httpd_graceful_shutdown 1\n\n# For custom content directories\nsudo semanage fcontext -a -t httpd_exec_t \"/var/www/html(/.*)?\"\nsudo restorecon -Rv /var/www/html/\n\n# For custom ports\nsudo semanage port -a -t http_port_t -p tcp 8080\n\n# Check denials\nsudo ausearch -m AVC,USER_AVC,SELINUX_ERR -ts recent\n```\n\n## Performance Optimization\n\n### Multi-Processing Module (MPM) Tuning\n```bash\n# Check current MPM\napache2ctl -M | grep mpm  # Ubuntu/Debian\nhttpd -M | grep mpm       # RHEL/CentOS\n\n# Configure Event MPM (most efficient)\nsudo tee /etc/apache2/mods-available/mpm_event.conf > /dev/null <<EOF\n<IfModule mpm_event_module>\n    StartServers             3\n    MinSpareThreads         75\n    MaxSpareThreads        250\n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    AsyncRequestWorkerFactor 2\n</IfModule>\nEOF\n\n# Enable Event MPM\nsudo a2dismod mpm_prefork\nsudo a2enmod mpm_event\nsudo systemctl restart apache2\n```\n\n### System-level Performance Tuning\n```bash\n# Increase system limits\nsudo tee -a /etc/security/limits.conf > /dev/null <<EOF\napache soft nofile 65535\napache hard nofile 65535\nwww-data soft nofile 65535\nwww-data hard nofile 65535\nEOF\n\n# Kernel optimization for web servers\nsudo tee -a /etc/sysctl.conf > /dev/null <<EOF\n# Apache/web server optimization\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\n\n# Memory management\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\nsudo sysctl -p\n```\n\n### Caching Configuration\n```bash\n# Enable caching modules\nsudo a2enmod cache cache_disk expires headers\n\n# Create cache configuration\nsudo tee /etc/apache2/conf-available/caching.conf > /dev/null <<EOF\n# Disk cache configuration\n<IfModule mod_cache_disk.c>\n    CacheRoot /var/cache/apache2/mod_cache_disk\n    CacheDirLevels 2\n    CacheDirLength 1\n    CacheEnable disk /\n    CacheIgnoreHeaders Set-Cookie\n    CacheDefaultExpire 3600\n    CacheMaxExpire 86400\n    CacheLastModifiedFactor 0.1\n</IfModule>\n\n# Browser caching\n<IfModule mod_expires.c>\n    ExpiresActive On\n    \n    # Cache static assets\n    ExpiresByType image/jpg \"access plus 1 year\"\n    ExpiresByType image/jpeg \"access plus 1 year\"\n    ExpiresByType image/gif \"access plus 1 year\"\n    ExpiresByType image/png \"access plus 1 year\"\n    ExpiresByType image/webp \"access plus 1 year\"\n    ExpiresByType text/css \"access plus 1 month\"\n    ExpiresByType application/pdf \"access plus 1 month\"\n    ExpiresByType text/javascript \"access plus 1 month\"\n    ExpiresByType application/javascript \"access plus 1 month\"\n    ExpiresByType application/x-javascript \"access plus 1 month\"\n    ExpiresByType application/x-shockwave-flash \"access plus 1 month\"\n    ExpiresByType image/x-icon \"access plus 1 year\"\n    ExpiresByType text/html \"access plus 300 seconds\"\n    \n    # Default expiration\n    ExpiresDefault \"access plus 1 day\"\n</IfModule>\n\n# Compression\n<IfModule mod_deflate.c>\n    # Enable compression for text files\n    <Location />\n        SetOutputFilter DEFLATE\n        \n        # Don't compress images or binaries\n        SetEnvIfNoCase Request_URI \\\n            \\.(?:gif|jpe?g|png|webp)$ no-gzip dont-vary\n        SetEnvIfNoCase Request_URI \\\n            \\.(?:exe|t?gz|zip|bz2|sit|rar|pdf)$ no-gzip dont-vary\n            \n        # Include file types to compress\n        AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript\n        AddOutputFilterByType DEFLATE application/javascript application/json application/xml application/xhtml+xml application/rss+xml\n    </Location>\n</IfModule>\nEOF\n\n# Create cache directory\nsudo mkdir -p /var/cache/apache2/mod_cache_disk\nsudo chown -R www-data:www-data /var/cache/apache2  # Ubuntu/Debian\nsudo chown -R apache:apache /var/cache/apache2      # RHEL/CentOS\n\nsudo a2enconf caching\nsudo systemctl reload apache2\n```\n\n## Cross-Platform Verification\n\n### Service Management (All Distributions)\n```bash\n# Check which init system is in use\nif command -v systemctl &> /dev/null; then\n    echo \"Using systemd\"\n    \n    # SystemD commands\n    sudo systemctl status apache2    # Ubuntu/Debian\n    sudo systemctl status httpd      # RHEL/CentOS\n    sudo systemctl restart apache2\n    sudo systemctl reload apache2\n    \nelif command -v service &> /dev/null; then\n    echo \"Using SysV init\"\n    \n    # Traditional service commands\n    sudo service apache2 status\n    sudo service apache2 restart\n    sudo service apache2 reload\n    \nelif command -v rc-service &> /dev/null; then\n    echo \"Using OpenRC (Alpine)\"\n    \n    # OpenRC commands\n    sudo rc-service apache2 status\n    sudo rc-service apache2 restart\nfi\n```\n\n### Configuration Testing\n```bash\n# Test configuration syntax (distribution-aware)\nif [ -f /etc/apache2/apache2.conf ]; then\n    # Ubuntu/Debian\n    sudo apache2ctl configtest\n    sudo apache2ctl -S  # Show virtual hosts\n    sudo apache2ctl -M  # Show loaded modules\nelif [ -f /etc/httpd/conf/httpd.conf ]; then\n    # RHEL/CentOS\n    sudo httpd -t\n    sudo httpd -S\n    sudo httpd -M\nfi\n\n# Show version and build info\napache2ctl -v  # Ubuntu/Debian\nhttpd -v       # RHEL/CentOS\n\n# Show all configuration\napache2ctl -T  # Ubuntu/Debian\nhttpd -T       # RHEL/CentOS\n```\n\n### Log Analysis and Monitoring\n```bash\n# Monitor Apache logs (cross-platform)\n# Ubuntu/Debian paths\nsudo tail -f /var/log/apache2/access.log\nsudo tail -f /var/log/apache2/error.log\n\n# RHEL/CentOS paths  \nsudo tail -f /var/log/httpd/access_log\nsudo tail -f /var/log/httpd/error_log\n\n# Real-time connection monitoring\nwatch \"netstat -an | grep :80 | grep ESTABLISHED | wc -l\"\n\n# Monitor process performance\nhtop -p $(pgrep apache2 || pgrep httpd | head -5 | tr '\\n' ',' | sed 's/,$//')\n\n# Check virtual host access\nsudo grep \"GET\\|POST\" /var/log/apache2/access.log | tail -20  # Ubuntu/Debian\nsudo grep \"GET\\|POST\" /var/log/httpd/access_log | tail -20    # RHEL/CentOS\n```\n\n## Cross-Platform Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check which user Apache runs as\nps aux | grep -E \"(apache2|httpd)\" | grep -v grep\n\n# Permission issues (distribution-aware)\n# Ubuntu/Debian\nsudo chown -R www-data:www-data /var/www/html\nsudo chmod -R 755 /var/www/html\n\n# RHEL/CentOS\nsudo chown -R apache:apache /var/www/html\nsudo chmod -R 755 /var/www/html\n\n# Check configuration file locations\nif [ -d /etc/apache2 ]; then\n    echo \"Configuration directory: /etc/apache2\"\n    echo \"Main config: /etc/apache2/apache2.conf\"\n    echo \"Sites: /etc/apache2/sites-available/\"\nelif [ -d /etc/httpd ]; then\n    echo \"Configuration directory: /etc/httpd\"\n    echo \"Main config: /etc/httpd/conf/httpd.conf\"\n    echo \"Virtual hosts: /etc/httpd/conf.d/\"\nfi\n\n# Port binding issues\nsudo lsof -i :80\nsudo netstat -tulpn | grep :80\n\n# SELinux troubleshooting (RHEL/CentOS)\nif command -v getenforce &> /dev/null; then\n    echo \"SELinux status: $(getenforce)\"\n    sudo ausearch -m AVC,USER_AVC -ts recent\n    sudo grep \"denied\" /var/log/audit/audit.log | tail -5\nfi\n\n# Check Apache error logs for issues\n# Ubuntu/Debian\nsudo tail -20 /var/log/apache2/error.log\n\n# RHEL/CentOS\nsudo tail -20 /var/log/httpd/error_log\n\n# Test specific virtual host\ncurl -H \"Host: example.com\" http://localhost/\n\n# Check loaded modules\napache2ctl -M | grep -E \"(rewrite|ssl|headers)\"  # Ubuntu/Debian\nhttpd -M | grep -E \"(rewrite|ssl|headers)\"        # RHEL/CentOS\n\n# Memory usage analysis\nps aux --sort=-%mem | grep -E \"(apache2|httpd)\" | head -10\n```\n\n### Debug Mode and Advanced Troubleshooting\n```bash\n# Enable debug logging\n# Ubuntu/Debian\nsudo nano /etc/apache2/apache2.conf\n# Add: LogLevel debug\n\n# RHEL/CentOS\nsudo nano /etc/httpd/conf/httpd.conf\n# Add: LogLevel debug\n\n# Test configuration with specific user\nsudo -u www-data apache2ctl configtest  # Ubuntu/Debian\nsudo -u apache httpd -t                  # RHEL/CentOS\n\n# Check virtual host configuration\napache2ctl -S  # Ubuntu/Debian\nhttpd -S       # RHEL/CentOS\n\n# Trace requests (careful in production)\n# Add to virtual host:\nLogLevel debug\nCustomLog /var/log/apache2/trace.log \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-agent}i\\\" %D\"\n\n# Monitor real-time\nsudo tail -f /var/log/apache2/trace.log\n```\n\n## Additional Security Tools Integration\n\n### Fail2Ban Configuration\n```bash\n# Install Fail2Ban\nsudo apt install -y fail2ban  # Ubuntu/Debian\nsudo yum install -y fail2ban  # RHEL/CentOS\n\n# Create Apache-specific jails\nsudo tee /etc/fail2ban/jail.d/apache.conf > /dev/null <<EOF\n[apache-auth]\nenabled = true\nport = http,https\nfilter = apache-auth\nlogpath = /var/log/apache2/error.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/error_log  # RHEL/CentOS\nmaxretry = 6\nfindtime = 600\nbantime = 3600\n\n[apache-badbots]\nenabled = true\nport = http,https\nfilter = apache-badbots  \nlogpath = /var/log/apache2/access.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/access_log  # RHEL/CentOS\nmaxretry = 2\nbantime = 86400\n\n[apache-noscript]\nenabled = true\nport = http,https\nfilter = apache-noscript\nlogpath = /var/log/apache2/access.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/access_log  # RHEL/CentOS\nmaxretry = 6\nbantime = 86400\n\n[apache-overflows]\nenabled = true\nport = http,https\nfilter = apache-overflows\nlogpath = /var/log/apache2/error.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/error_log  # RHEL/CentOS\nmaxretry = 2\nbantime = 86400\nEOF\n\nsudo systemctl enable --now fail2ban\n```\n\n### Log Analysis and Monitoring\n```bash\n# Install GoAccess for real-time log analysis\n# Ubuntu/Debian\nsudo apt install -y goaccess\n\n# RHEL/CentOS\nsudo yum install -y goaccess\n\n# Analyze logs in real-time\n# Ubuntu/Debian\nsudo goaccess /var/log/apache2/access.log -c\n\n# RHEL/CentOS\nsudo goaccess /var/log/httpd/access_log -c\n\n# Generate HTML report\nsudo goaccess /var/log/apache2/access.log -o /var/www/html/stats.html --log-format=COMBINED --real-time-html\n```\n\n## Backup and Maintenance\n\n### Automated Backup Script\n```bash\nsudo tee /usr/local/bin/apache-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/apache\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{config,logs,sites}\n\n# Detect distribution and set paths\nif [ -d /etc/apache2 ]; then\n    # Ubuntu/Debian\n    CONFIG_DIR=\"/etc/apache2\"\n    LOG_DIR=\"/var/log/apache2\"\n    SERVICE_NAME=\"apache2\"\nelif [ -d /etc/httpd ]; then\n    # RHEL/CentOS\n    CONFIG_DIR=\"/etc/httpd\"\n    LOG_DIR=\"/var/log/httpd\"  \n    SERVICE_NAME=\"httpd\"\nfi\n\n# Backup configuration\ntar -czf ${BACKUP_DIR}/config/apache-config-${DATE}.tar.gz -C / ${CONFIG_DIR#/}\n\n# Backup website files\ntar -czf ${BACKUP_DIR}/sites/apache-sites-${DATE}.tar.gz -C /var/www .\n\n# Backup recent logs (last 7 days)\nfind ${LOG_DIR} -name \"*.log\" -mtime -7 -exec tar -czf ${BACKUP_DIR}/logs/apache-logs-${DATE}.tar.gz {} +\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"apache-*\" -type f -mtime +7 -delete\n\necho \"Apache backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/apache-backup.sh\n\n# Schedule daily backup\necho \"0 2 * * * root /usr/local/bin/apache-backup.sh\" | sudo tee -a /etc/crontab\n```\n\nThis updated Apache guide now includes:\n- ✅ **Complete cross-platform support** (Ubuntu, Debian, RHEL, CentOS, Rocky, Fedora, Arch, openSUSE, Alpine)\n- ✅ **2024 security best practices** (modern SSL/TLS, security headers, ModSecurity WAF)\n- ✅ **Performance optimization** (MPM tuning, system optimization, caching)  \n- ✅ **Advanced configurations** (virtual hosts, SSL certificates, compression)\n- ✅ **Comprehensive troubleshooting** (SELinux, cross-platform debugging)\n- ✅ **Security tools integration** (Fail2Ban, log analysis, monitoring)\n\nShould I continue updating the other guides with this same comprehensive approach?","readmeHtml":"<h1 id=\"apache-http-server-installation-guide\" class=\"mobile-header\">Apache HTTP Server Installation Guide</h1>\n<p class=\"mobile-paragraph\">World's most popular web server software serving over 40% of active websites. Reliable, secure, and highly configurable for hosting websites and web applications.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access  </li>\n<li class=\"mobile-list-item\">1GB RAM minimum, 2GB+ recommended for production</li>\n<li class=\"mobile-list-item\">Network connectivity for package downloads</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Apache and essential modules\nsudo apt install -y apache2 apache2-utils\n\n# Enable essential modules\nsudo a2enmod rewrite ssl headers deflate expires security2\n\n# Start and enable Apache\nsudo systemctl enable --now apache2\n\n# Check status\nsudo systemctl status apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache (httpd)\nsudo yum install -y httpd httpd-tools mod_ssl\n\n# For newer versions with dnf\nsudo dnf install -y httpd httpd-tools mod_ssl\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Check status\nsudo systemctl status httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\nsudo dnf install -y httpd httpd-tools mod_ssl mod_security\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\nsudo pacman -Syu apache\n\n# Start and enable Apache\nsudo systemctl enable --now httpd\n\n# Edit configuration\nsudo nano /etc/httpd/conf/httpd.conf\n# Uncomment: ServerName www.example.com:80</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesuse\" class=\"mobile-header\">openSUSE/SUSE</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\nsudo zypper install -y apache2 apache2-mod_ssl apache2-utils\n\n# Start and enable Apache\nsudo systemctl enable --now apache2\n\n# Configure firewall\nsudo SuSEfirewall2 open EXT TCP 80 443</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Apache\nsudo apk update\nsudo apk add apache2 apache2-ssl apache2-utils\n\n# Create necessary directories\nsudo mkdir -p /var/www/html\nsudo mkdir -p /run/apache2\n\n# Start and enable Apache\nsudo rc-update add apache2 default\nsudo service apache2 start</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Official Apache Docker image\ndocker run -d \\\n  --name apache \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -v ~/apache/htdocs:/usr/local/apache2/htdocs/ \\\n  -v ~/apache/conf:/usr/local/apache2/conf/ \\\n  -v ~/apache/logs:/usr/local/apache2/logs/ \\\n  httpd:latest\n\n# With Docker Compose\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\nservices:\n  apache:\n    image: httpd:latest\n    restart: unless-stopped\n    ports:\n      - &quot;80:80&quot;\n      - &quot;443:443&quot;\n    volumes:\n      - ./htdocs:/usr/local/apache2/htdocs/\n      - ./conf/httpd.conf:/usr/local/apache2/conf/httpd.conf\n      - ./logs:/usr/local/apache2/logs/\n    networks:\n      - webserver\n\nnetworks:\n  webserver:\n    driver: bridge\nEOF\n\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h3 id=\"source-compilation-advanced\" class=\"mobile-header\">Source Compilation (Advanced)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install build dependencies\n# Ubuntu/Debian\nsudo apt install -y build-essential libapr1-dev libaprutil1-dev libpcre3-dev libssl-dev zlib1g-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y &quot;Development Tools&quot;\nsudo yum install -y apr-devel apr-util-devel pcre-devel openssl-devel zlib-devel\n\n# Download Apache source\ncd /tmp\nwget https://archive.apache.org/dist/httpd/httpd-2.4.57.tar.gz\ntar xzf httpd-2.4.57.tar.gz\ncd httpd-2.4.57\n\n# Configure with security and performance modules\n./configure \\\n  --prefix=/etc/apache2 \\\n  --exec-prefix=/usr \\\n  --bindir=/usr/bin \\\n  --sbindir=/usr/sbin \\\n  --sysconfdir=/etc/apache2 \\\n  --libexecdir=/usr/lib/apache2/modules \\\n  --localstatedir=/var \\\n  --datadir=/usr/share/apache2 \\\n  --includedir=/usr/include/apache2 \\\n  --infodir=/usr/share/info \\\n  --mandir=/usr/share/man \\\n  --with-program-name=apache2 \\\n  --enable-layout=Debian \\\n  --with-regex=pcre \\\n  --enable-mods-shared=reallyall \\\n  --enable-ssl \\\n  --enable-rewrite \\\n  --enable-headers \\\n  --enable-deflate \\\n  --enable-expires \\\n  --enable-security \\\n  --with-ssl=/usr \\\n  --with-ldap \\\n  --with-ldap-include=/usr/include \\\n  --with-ldap-lib=/usr/lib\n\n# Compile and install\nmake -j$(nproc)\nsudo make install\n\n# Create apache user\nsudo useradd -r -s /sbin/nologin apache\n\n# Create systemd service\nsudo tee /etc/systemd/system/apache2.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=The Apache HTTP Server\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=notify\nExecStart=/usr/sbin/apache2 -DFOREGROUND\nExecReload=/usr/sbin/apache2ctl graceful\nExecStop=/bin/kill -WINTERM \\${MAINPID}\nKillSignal=SIGCONT\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now apache2</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening-2024-best-practices\" class=\"mobile-header\">Security Hardening (2024 Best Practices)</h2>\n<h3 id=\"hide-server-information\" class=\"mobile-header\">Hide Server Information</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security configuration\n# Ubuntu/Debian\nsudo tee /etc/apache2/conf-available/security-hardening.conf &gt; /dev/null &lt;&lt;EOF\n# Hide Apache version and OS information\nServerTokens Prod\nServerSignature Off\n\n# Hide PHP version (if using PHP)\nHeader always unset X-Powered-By\nHeader unset X-Powered-By\n\n# Security headers (2024 recommendations)\nHeader always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\nHeader always set X-Frame-Options &quot;SAMEORIGIN&quot;\nHeader always set X-Content-Type-Options &quot;nosniff&quot;\nHeader always set X-XSS-Protection &quot;1; mode=block&quot;\nHeader always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\nHeader always set Content-Security-Policy &quot;default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;; img-src &#039;self&#039; data: https:; font-src &#039;self&#039; data:; connect-src &#039;self&#039;; media-src &#039;self&#039;; object-src &#039;none&#039;; child-src &#039;self&#039;; form-action &#039;self&#039;; base-uri &#039;self&#039;;&quot;\nHeader always set Permissions-Policy &quot;camera=(), microphone=(), geolocation=()&quot;\n\n# Remove sensitive headers\nHeader always unset Server\nHeader unset Server\n\n# Disable server status and info\n&lt;Location &quot;/server-status&quot;&gt;\n    SetHandler server-status\n    Require local\n&lt;/Location&gt;\n\n&lt;Location &quot;/server-info&quot;&gt;\n    SetHandler server-info\n    Require local\n&lt;/Location&gt;\n\n# Disable trace method\nTraceEnable off\n\n# Timeout configurations\nTimeout 60\nKeepAliveTimeout 15\n\n# Limit request size (adjust as needed)\nLimitRequestBody 10485760  # 10MB\n\n# Hide .htaccess files\n&lt;FilesMatch &quot;^\\.ht&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n# Hide backup and temporary files\n&lt;FilesMatch &quot;\\.(bak|backup|swp|tmp|~)$&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n# Disable directory browsing by default\nOptions -Indexes\n\n# Information disclosure protection\n&lt;DirectoryMatch &quot;/\\.&quot;&gt;\n    Require all denied\n&lt;/DirectoryMatch&gt;\n\n# Clickjacking protection\nHeader always append X-Frame-Options SAMEORIGIN\nEOF\n\n# Enable security configuration\nsudo a2enconf security-hardening\nsudo systemctl reload apache2\n\n# RHEL/CentOS (add to main configuration)\nsudo tee -a /etc/httpd/conf/httpd.conf &gt; /dev/null &lt;&lt;EOF\n\n# Security hardening\nServerTokens Prod\nServerSignature Off\n\n# Load security headers module\nLoadModule headers_module modules/mod_headers.so\n\n# Security headers\nHeader always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\nHeader always set X-Frame-Options &quot;SAMEORIGIN&quot;\nHeader always set X-Content-Type-Options &quot;nosniff&quot;\nHeader always set X-XSS-Protection &quot;1; mode=block&quot;\nHeader always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n\n# Disable trace method\nTraceEnable off\n\n# Hide .htaccess files\n&lt;FilesMatch &quot;^\\.ht&quot;&gt;\n    Require all denied\n&lt;/FilesMatch&gt;\n\n# Disable directory browsing\nOptions -Indexes\nEOF\n\nsudo systemctl reload httpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"modsecurity-waf-installation\" class=\"mobile-header\">ModSecurity WAF Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt install -y libapache2-mod-security2\n\n# RHEL/CentOS\nsudo yum install -y mod_security mod_security_crs\n\n# Enable ModSecurity\nsudo a2enmod security2  # Ubuntu/Debian\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/apache2/modsecurity.d\ncd /etc/apache2/modsecurity.d\nsudo wget https://github.com/coreruleset/coreruleset/archive/refs/tags/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 crs\n\n# Configure ModSecurity\nsudo tee /etc/apache2/mods-available/security2.conf &gt; /dev/null &lt;&lt;EOF\n&lt;IfModule mod_security2.c&gt;\n    SecRuleEngine On\n    SecRequestBodyAccess On\n    SecRequestBodyLimit 13107200\n    SecRequestBodyNoFilesLimit 131072\n    SecRequestBodyInMemoryLimit 131072\n    SecRequestBodyLimitAction Reject\n    SecRule REQUEST_HEADERS:Content-Type &quot;text/xml&quot; \\\n         &quot;id:&#039;200000&#039;,phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=XML&quot;\n    SecRule REQUEST_HEADERS:Content-Type &quot;application/json&quot; \\\n         &quot;id:&#039;200001&#039;,phase:1,t:none,t:lowercase,pass,nolog,ctl:requestBodyProcessor=JSON&quot;\n    SecRule REQBODY_ERROR &quot;!@eq 0&quot; \\\n    &quot;id:&#039;200002&#039;, phase:2,t:none,log,deny,status:400,msg:&#039;Failed to parse request body.&#039;,logdata:&#039;Error %{REQBODY_ERROR_MSG}&#039;,severity:2&quot;\n    SecRule MULTIPART_STRICT_ERROR &quot;!@eq 0&quot; \\\n    &quot;id:&#039;200003&#039;,phase:2,t:none,log,deny,status:400, \\\n    msg:&#039;Multipart request body failed strict validation: \\\n    PE %{REQBODY_PROCESSOR_ERROR}, \\\n    BQ %{MULTIPART_BOUNDARY_QUOTED}, \\\n    BW %{MULTIPART_BOUNDARY_WHITESPACE}, \\\n    DB %{MULTIPART_DATA_BEFORE}, \\\n    DA %{MULTIPART_DATA_AFTER}, \\\n    HF %{MULTIPART_HEADER_FOLDING}, \\\n    LF %{MULTIPART_LF_LINE}, \\\n    SM %{MULTIPART_MISSING_SEMICOLON}, \\\n    IQ %{MULTIPART_INVALID_QUOTING}, \\\n    IP %{MULTIPART_INVALID_PART}, \\\n    IH %{MULTIPART_INVALID_HEADER_FOLDING}, \\\n    FL %{MULTIPART_FILE_LIMIT_EXCEEDED}&#039;&quot;\n\n    SecRule MULTIPART_UNMATCHED_BOUNDARY &quot;!@eq 0&quot; \\\n    &quot;id:&#039;200004&#039;,phase:2,t:none,log,deny,msg:&#039;Multipart parser detected a possible unmatched boundary.&#039;&quot;\n\n    SecPcreMatchLimit 1000\n    SecPcreMatchLimitRecursion 1000\n\n    SecRule TX:/^MSC_/ &quot;!@streq 0&quot; \\\n            &quot;id:&#039;200005&#039;,phase:2,t:none,deny,msg:&#039;ModSecurity internal error flagged: %{MATCHED_VAR_NAME}&#039;&quot;\n\n    SecResponseBodyAccess Off\n    SecDebugLog /var/log/apache2/modsec_debug.log\n    SecDebugLogLevel 0\n    SecAuditEngine RelevantOnly\n    SecAuditLogRelevantStatus &quot;^(?:5|4(?!04))&quot;\n    SecAuditLogParts ABDEFHIJZ\n    SecAuditLogType Serial\n    SecAuditLog /var/log/apache2/modsec_audit.log\n    \n    # Include OWASP Core Rule Set\n    Include /etc/apache2/modsecurity.d/crs/crs-setup.conf.example\n    Include /etc/apache2/modsecurity.d/crs/rules/*.conf\n&lt;/IfModule&gt;\nEOF\n\n# Create data directory\nsudo mkdir -p /var/cache/modsecurity\nsudo chown www-data:www-data /var/cache/modsecurity\n\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration-modern-2024-standards\" class=\"mobile-header\">SSL/TLS Configuration (Modern 2024 Standards)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create modern SSL configuration\nsudo tee /etc/apache2/conf-available/ssl-modern.conf &gt; /dev/null &lt;&lt;EOF\n# Modern SSL configuration (2024)\nSSLEngine on\n\n# Protocols - Only TLS 1.2 and 1.3\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\n\n# Cipher suites for modern browsers (2024)\nSSLCipherSuite ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384\n\n# Prefer server ciphers for TLS 1.2, client ciphers for TLS 1.3\nSSLHonorCipherOrder off\n\n# HSTS (HTTP Strict Transport Security)\nHeader always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\n\n# Session cache\nSSLSessionCache shmcb:/var/run/ssl_scache(512000)\nSSLSessionCacheTimeout 300\n\n# OCSP Stapling\nSSLUseStapling On\nSSLStaplingCache shmcb:/var/run/ocsp(128000)\nSSLStaplingResponderTimeout 5\nSSLStaplingReturnResponderErrors off\n\n# Modern security options\nSSLCompression off\nSSLSessionTickets off\n\n# Perfect Forward Secrecy\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem\nEOF\n\n# Generate strong DH parameters\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n# Enable SSL configuration\nsudo a2enconf ssl-modern\nsudo a2enmod ssl headers\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"secure-virtual-host-configuration\" class=\"mobile-header\">Secure Virtual Host Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production-ready virtual host\nsudo tee /etc/apache2/sites-available/secure-site.conf &gt; /dev/null &lt;&lt;EOF\n# HTTP to HTTPS redirect\n&lt;VirtualHost *:80&gt;\n    ServerName example.com\n    ServerAlias www.example.com\n    \n    # Security headers for redirects\n    Header always set X-Content-Type-Options nosniff\n    Header always set X-Frame-Options DENY\n    \n    # Redirect to HTTPS\n    Redirect permanent / https://example.com/\n&lt;/VirtualHost&gt;\n\n# HTTPS Virtual Host\n&lt;VirtualHost *:443&gt;\n    ServerName example.com\n    ServerAlias www.example.com\n    DocumentRoot /var/www/html/example.com\n    \n    # SSL Configuration\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    # Security headers (2024 standards)\n    Header always set Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot;\n    Header always set X-Frame-Options &quot;SAMEORIGIN&quot;\n    Header always set X-Content-Type-Options &quot;nosniff&quot;\n    Header always set X-XSS-Protection &quot;1; mode=block&quot;\n    Header always set Referrer-Policy &quot;strict-origin-when-cross-origin&quot;\n    Header always set Content-Security-Policy &quot;default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;; img-src &#039;self&#039; data: https:; font-src &#039;self&#039; data:; connect-src &#039;self&#039;; media-src &#039;self&#039;; object-src &#039;none&#039;; child-src &#039;self&#039;; form-action &#039;self&#039;; base-uri &#039;self&#039;;&quot;\n    Header always set Permissions-Policy &quot;camera=(), microphone=(), geolocation=()&quot;\n    \n    # Remove server information\n    Header always unset Server\n    Header unset X-Powered-By\n    \n    &lt;Directory /var/www/html/example.com&gt;\n        Options -Indexes +FollowSymLinks\n        AllowOverride All\n        Require all granted\n        \n        # Additional security\n        &lt;Files &quot;.*&quot;&gt;\n            Require all denied\n        &lt;/Files&gt;\n        \n        &lt;Files &quot;*.php~&quot;&gt;\n            Require all denied\n        &lt;/Files&gt;\n        \n        &lt;Files &quot;*.inc&quot;&gt;\n            Require all denied\n        &lt;/Files&gt;\n    &lt;/Directory&gt;\n    \n    # PHP configuration (if using PHP)\n    &lt;IfModule mod_php.c&gt;\n        php_admin_flag allow_url_include Off\n        php_admin_flag allow_url_fopen Off\n        php_admin_flag file_uploads On\n        php_admin_value upload_max_filesize 64M\n        php_admin_value post_max_size 64M\n        php_admin_value memory_limit 256M\n        php_admin_value max_execution_time 300\n        php_admin_flag expose_php Off\n    &lt;/IfModule&gt;\n    \n    # Compression\n    &lt;IfModule mod_deflate.c&gt;\n        SetOutputFilter DEFLATE\n        AddOutputFilterByType DEFLATE text/html text/css text/javascript text/xml text/plain application/javascript application/xml+rss application/xml application/x-javascript application/json\n        \n        # Don&#039;t compress images\n        SetEnvIfNoCase Request_URI \\.(?:gif|jpe?g|png)$ no-gzip dont-vary\n        SetEnvIfNoCase Request_URI \\.(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary\n    &lt;/IfModule&gt;\n    \n    # Caching rules\n    &lt;IfModule mod_expires.c&gt;\n        ExpiresActive On\n        ExpiresByType image/jpg &quot;access plus 1 month&quot;\n        ExpiresByType image/jpeg &quot;access plus 1 month&quot;\n        ExpiresByType image/gif &quot;access plus 1 month&quot;\n        ExpiresByType image/png &quot;access plus 1 month&quot;\n        ExpiresByType image/webp &quot;access plus 1 month&quot;\n        ExpiresByType text/css &quot;access plus 1 month&quot;\n        ExpiresByType application/pdf &quot;access plus 1 month&quot;\n        ExpiresByType text/javascript &quot;access plus 1 month&quot;\n        ExpiresByType application/javascript &quot;access plus 1 month&quot;\n        ExpiresByType application/x-javascript &quot;access plus 1 month&quot;\n        ExpiresByType application/x-shockwave-flash &quot;access plus 1 month&quot;\n        ExpiresByType image/x-icon &quot;access plus 1 year&quot;\n        ExpiresDefault &quot;access plus 2 days&quot;\n    &lt;/IfModule&gt;\n    \n    # Rate limiting (if mod_evasive is available)\n    &lt;IfModule mod_evasive24.c&gt;\n        DOSHashTableSize    1024\n        DOSPageCount        2\n        DOSSiteCount        50\n        DOSPageInterval     1\n        DOSSiteInterval     1\n        DOSBlockingPeriod   600\n        DOSLogDir           /var/log/apache2/\n        DOSEmailNotify      admin@example.com\n    &lt;/IfModule&gt;\n    \n    # ModSecurity\n    &lt;IfModule mod_security2.c&gt;\n        SecRuleEngine On\n        SecDefaultAction &quot;log,auditlog,pass&quot;\n    &lt;/IfModule&gt;\n    \n    ErrorLog \\${APACHE_LOG_DIR}/example.com_error.log\n    CustomLog \\${APACHE_LOG_DIR}/example.com_access.log combined\n    \n    # Log security events\n    CustomLog \\${APACHE_LOG_DIR}/example.com_security.log &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b \\&quot;%{Referer}i\\&quot; \\&quot;%{User-agent}i\\&quot;&quot; env=security\n&lt;/VirtualHost&gt;\n\n# WWW redirect\n&lt;VirtualHost *:443&gt;\n    ServerName www.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/example.com/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/example.com/privkey.pem\n    \n    Redirect permanent / https://example.com/\n&lt;/VirtualHost&gt;\nEOF\n\nsudo a2ensite secure-site.conf\nsudo a2enconf security-hardening\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-modules\" class=\"mobile-header\">Advanced Security Modules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install additional security modules\n# Ubuntu/Debian\nsudo apt install -y libapache2-mod-evasive libapache2-mod-security2\n\n# RHEL/CentOS\nsudo yum install -y mod_evasive mod_security\n\n# Enable modules\nsudo a2enmod evasive  # Ubuntu/Debian\nsudo a2enmod security2\n\n# Configure mod_evasive (DDoS protection)\nsudo tee /etc/apache2/mods-available/evasive.conf &gt; /dev/null &lt;&lt;EOF\n&lt;IfModule mod_evasive24.c&gt;\n    DOSHashTableSize    1024\n    DOSPageCount        3\n    DOSSiteCount        50\n    DOSPageInterval     1\n    DOSSiteInterval     1\n    DOSBlockingPeriod   600\n    DOSLogDir           /var/log/apache2/\n    DOSEmailNotify      admin@example.com\n    DOSWhitelist        127.0.0.1\n    DOSWhitelist        192.168.1.*\n&lt;/IfModule&gt;\nEOF\n\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h2 id=\"ssl-certificate-setup-cross-platform\" class=\"mobile-header\">SSL Certificate Setup (Cross-Platform)</h2>\n<h3 id=\"lets-encrypt-integration\" class=\"mobile-header\">Let's Encrypt Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot - Universal method\nsudo snap install core; sudo snap refresh core\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n\n# Alternative: Package manager installation\n# Ubuntu/Debian\nsudo apt install -y certbot python3-certbot-apache\n\n# RHEL/CentOS (enable EPEL first)\nsudo yum install -y epel-release\nsudo yum install -y certbot python3-certbot-apache\n\n# Fedora\nsudo dnf install -y certbot python3-certbot-apache\n\n# Arch Linux\nsudo pacman -S certbot certbot-apache\n\n# Obtain certificate\nsudo certbot --apache -d example.com -d www.example.com\n\n# Auto-renewal setup (universal)\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet &amp;&amp; systemctl reload apache2\n\n# Test renewal\nsudo certbot renew --dry-run</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-ssl-configuration\" class=\"mobile-header\">Manual SSL Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate for testing\nsudo mkdir -p /etc/ssl/private\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/ssl/private/apache-selfsigned.key \\\n  -out /etc/ssl/certs/apache-selfsigned.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=example.com&quot;\n\n# Create SSL configuration snippet\nsudo tee /etc/apache2/conf-available/ssl-params.conf &gt; /dev/null &lt;&lt;EOF\n# Modern SSL configuration\nSSLEngine on\nSSLProtocol all -SSLv3 -TLSv1 -TLSv1.1\nSSLCipherSuite ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384\nSSLHonorCipherOrder off\nSSLSessionTickets off\nSSLUseStapling on\nSSLStaplingCache shmcb:/var/run/ssl_stapling(32768)\nSSLOpenSSLConfCmd DHParameters /etc/ssl/certs/dhparam.pem\n\n# Security headers\nHeader always set Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;\nHeader always set X-Content-Type-Options nosniff\nHeader always set X-Frame-Options SAMEORIGIN\nHeader always set X-XSS-Protection &quot;1; mode=block&quot;\nEOF\n\nsudo a2enconf ssl-params</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration-all-platforms\" class=\"mobile-header\">Firewall Configuration (All Platforms)</h2>\n<h3 id=\"ufw-ubuntudebian\" class=\"mobile-header\">UFW (Ubuntu/Debian)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo ufw app list | grep Apache\nsudo ufw allow &#039;Apache Full&#039;    # HTTP and HTTPS\nsudo ufw allow &#039;Apache&#039;         # HTTP only  \nsudo ufw allow &#039;Apache Secure&#039;  # HTTPS only\nsudo ufw enable\nsudo ufw status</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewalld-rhelcentosfedora\" class=\"mobile-header\">Firewalld (RHEL/CentOS/Fedora)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\nsudo firewall-cmd --list-services</code></pre>\n      </div>\n    </div>\n<h3 id=\"iptables-universal\" class=\"mobile-header\">iptables (Universal)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Allow HTTP and HTTPS\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\n\n# Save rules (varies by distribution)\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save\n\n# Arch Linux\nsudo iptables-save &gt; /etc/iptables/iptables.rules\n\n# Alpine Linux\nsudo /etc/init.d/iptables save</code></pre>\n      </div>\n    </div>\n<h3 id=\"selinux-configuration-rhelcentosfedora\" class=\"mobile-header\">SELinux Configuration (RHEL/CentOS/Fedora)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check SELinux status\ngetenforce\n\n# Set SELinux booleans for Apache\nsudo setsebool -P httpd_can_network_connect 1\nsudo setsebool -P httpd_can_network_relay 1\nsudo setsebool -P httpd_use_nfs 1\nsudo setsebool -P httpd_graceful_shutdown 1\n\n# For custom content directories\nsudo semanage fcontext -a -t httpd_exec_t &quot;/var/www/html(/.*)?&quot;\nsudo restorecon -Rv /var/www/html/\n\n# For custom ports\nsudo semanage port -a -t http_port_t -p tcp 8080\n\n# Check denials\nsudo ausearch -m AVC,USER_AVC,SELINUX_ERR -ts recent</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"multi-processing-module-mpm-tuning\" class=\"mobile-header\">Multi-Processing Module (MPM) Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check current MPM\napache2ctl -M | grep mpm  # Ubuntu/Debian\nhttpd -M | grep mpm       # RHEL/CentOS\n\n# Configure Event MPM (most efficient)\nsudo tee /etc/apache2/mods-available/mpm_event.conf &gt; /dev/null &lt;&lt;EOF\n&lt;IfModule mpm_event_module&gt;\n    StartServers             3\n    MinSpareThreads         75\n    MaxSpareThreads        250\n    ThreadsPerChild         25\n    MaxRequestWorkers      400\n    MaxConnectionsPerChild   0\n    AsyncRequestWorkerFactor 2\n&lt;/IfModule&gt;\nEOF\n\n# Enable Event MPM\nsudo a2dismod mpm_prefork\nsudo a2enmod mpm_event\nsudo systemctl restart apache2</code></pre>\n      </div>\n    </div>\n<h3 id=\"system-level-performance-tuning\" class=\"mobile-header\">System-level Performance Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase system limits\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;EOF\napache soft nofile 65535\napache hard nofile 65535\nwww-data soft nofile 65535\nwww-data hard nofile 65535\nEOF\n\n# Kernel optimization for web servers\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;EOF\n# Apache/web server optimization\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.ip_local_port_range = 15000 65000\nfs.file-max = 100000\n\n# Memory management\nvm.swappiness = 10\nvm.dirty_ratio = 15\nvm.dirty_background_ratio = 5\nEOF\n\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"caching-configuration\" class=\"mobile-header\">Caching Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable caching modules\nsudo a2enmod cache cache_disk expires headers\n\n# Create cache configuration\nsudo tee /etc/apache2/conf-available/caching.conf &gt; /dev/null &lt;&lt;EOF\n# Disk cache configuration\n&lt;IfModule mod_cache_disk.c&gt;\n    CacheRoot /var/cache/apache2/mod_cache_disk\n    CacheDirLevels 2\n    CacheDirLength 1\n    CacheEnable disk /\n    CacheIgnoreHeaders Set-Cookie\n    CacheDefaultExpire 3600\n    CacheMaxExpire 86400\n    CacheLastModifiedFactor 0.1\n&lt;/IfModule&gt;\n\n# Browser caching\n&lt;IfModule mod_expires.c&gt;\n    ExpiresActive On\n    \n    # Cache static assets\n    ExpiresByType image/jpg &quot;access plus 1 year&quot;\n    ExpiresByType image/jpeg &quot;access plus 1 year&quot;\n    ExpiresByType image/gif &quot;access plus 1 year&quot;\n    ExpiresByType image/png &quot;access plus 1 year&quot;\n    ExpiresByType image/webp &quot;access plus 1 year&quot;\n    ExpiresByType text/css &quot;access plus 1 month&quot;\n    ExpiresByType application/pdf &quot;access plus 1 month&quot;\n    ExpiresByType text/javascript &quot;access plus 1 month&quot;\n    ExpiresByType application/javascript &quot;access plus 1 month&quot;\n    ExpiresByType application/x-javascript &quot;access plus 1 month&quot;\n    ExpiresByType application/x-shockwave-flash &quot;access plus 1 month&quot;\n    ExpiresByType image/x-icon &quot;access plus 1 year&quot;\n    ExpiresByType text/html &quot;access plus 300 seconds&quot;\n    \n    # Default expiration\n    ExpiresDefault &quot;access plus 1 day&quot;\n&lt;/IfModule&gt;\n\n# Compression\n&lt;IfModule mod_deflate.c&gt;\n    # Enable compression for text files\n    &lt;Location /&gt;\n        SetOutputFilter DEFLATE\n        \n        # Don&#039;t compress images or binaries\n        SetEnvIfNoCase Request_URI \\\n            \\.(?:gif|jpe?g|png|webp)$ no-gzip dont-vary\n        SetEnvIfNoCase Request_URI \\\n            \\.(?:exe|t?gz|zip|bz2|sit|rar|pdf)$ no-gzip dont-vary\n            \n        # Include file types to compress\n        AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript\n        AddOutputFilterByType DEFLATE application/javascript application/json application/xml application/xhtml+xml application/rss+xml\n    &lt;/Location&gt;\n&lt;/IfModule&gt;\nEOF\n\n# Create cache directory\nsudo mkdir -p /var/cache/apache2/mod_cache_disk\nsudo chown -R www-data:www-data /var/cache/apache2  # Ubuntu/Debian\nsudo chown -R apache:apache /var/cache/apache2      # RHEL/CentOS\n\nsudo a2enconf caching\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h2 id=\"cross-platform-verification\" class=\"mobile-header\">Cross-Platform Verification</h2>\n<h3 id=\"service-management-all-distributions\" class=\"mobile-header\">Service Management (All Distributions)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check which init system is in use\nif command -v systemctl &amp;&gt; /dev/null; then\n    echo &quot;Using systemd&quot;\n    \n    # SystemD commands\n    sudo systemctl status apache2    # Ubuntu/Debian\n    sudo systemctl status httpd      # RHEL/CentOS\n    sudo systemctl restart apache2\n    sudo systemctl reload apache2\n    \nelif command -v service &amp;&gt; /dev/null; then\n    echo &quot;Using SysV init&quot;\n    \n    # Traditional service commands\n    sudo service apache2 status\n    sudo service apache2 restart\n    sudo service apache2 reload\n    \nelif command -v rc-service &amp;&gt; /dev/null; then\n    echo &quot;Using OpenRC (Alpine)&quot;\n    \n    # OpenRC commands\n    sudo rc-service apache2 status\n    sudo rc-service apache2 restart\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"configuration-testing\" class=\"mobile-header\">Configuration Testing</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test configuration syntax (distribution-aware)\nif [ -f /etc/apache2/apache2.conf ]; then\n    # Ubuntu/Debian\n    sudo apache2ctl configtest\n    sudo apache2ctl -S  # Show virtual hosts\n    sudo apache2ctl -M  # Show loaded modules\nelif [ -f /etc/httpd/conf/httpd.conf ]; then\n    # RHEL/CentOS\n    sudo httpd -t\n    sudo httpd -S\n    sudo httpd -M\nfi\n\n# Show version and build info\napache2ctl -v  # Ubuntu/Debian\nhttpd -v       # RHEL/CentOS\n\n# Show all configuration\napache2ctl -T  # Ubuntu/Debian\nhttpd -T       # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-analysis-and-monitoring\" class=\"mobile-header\">Log Analysis and Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Apache logs (cross-platform)\n# Ubuntu/Debian paths\nsudo tail -f /var/log/apache2/access.log\nsudo tail -f /var/log/apache2/error.log\n\n# RHEL/CentOS paths  \nsudo tail -f /var/log/httpd/access_log\nsudo tail -f /var/log/httpd/error_log\n\n# Real-time connection monitoring\nwatch &quot;netstat -an | grep :80 | grep ESTABLISHED | wc -l&quot;\n\n# Monitor process performance\nhtop -p $(pgrep apache2 || pgrep httpd | head -5 | tr &#039;\\n&#039; &#039;,&#039; | sed &#039;s/,$//&#039;)\n\n# Check virtual host access\nsudo grep &quot;GET\\|POST&quot; /var/log/apache2/access.log | tail -20  # Ubuntu/Debian\nsudo grep &quot;GET\\|POST&quot; /var/log/httpd/access_log | tail -20    # RHEL/CentOS</code></pre>\n      </div>\n    </div>\n<h2 id=\"cross-platform-troubleshooting\" class=\"mobile-header\">Cross-Platform Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check which user Apache runs as\nps aux | grep -E &quot;(apache2|httpd)&quot; | grep -v grep\n\n# Permission issues (distribution-aware)\n# Ubuntu/Debian\nsudo chown -R www-data:www-data /var/www/html\nsudo chmod -R 755 /var/www/html\n\n# RHEL/CentOS\nsudo chown -R apache:apache /var/www/html\nsudo chmod -R 755 /var/www/html\n\n# Check configuration file locations\nif [ -d /etc/apache2 ]; then\n    echo &quot;Configuration directory: /etc/apache2&quot;\n    echo &quot;Main config: /etc/apache2/apache2.conf&quot;\n    echo &quot;Sites: /etc/apache2/sites-available/&quot;\nelif [ -d /etc/httpd ]; then\n    echo &quot;Configuration directory: /etc/httpd&quot;\n    echo &quot;Main config: /etc/httpd/conf/httpd.conf&quot;\n    echo &quot;Virtual hosts: /etc/httpd/conf.d/&quot;\nfi\n\n# Port binding issues\nsudo lsof -i :80\nsudo netstat -tulpn | grep :80\n\n# SELinux troubleshooting (RHEL/CentOS)\nif command -v getenforce &amp;&gt; /dev/null; then\n    echo &quot;SELinux status: $(getenforce)&quot;\n    sudo ausearch -m AVC,USER_AVC -ts recent\n    sudo grep &quot;denied&quot; /var/log/audit/audit.log | tail -5\nfi\n\n# Check Apache error logs for issues\n# Ubuntu/Debian\nsudo tail -20 /var/log/apache2/error.log\n\n# RHEL/CentOS\nsudo tail -20 /var/log/httpd/error_log\n\n# Test specific virtual host\ncurl -H &quot;Host: example.com&quot; http://localhost/\n\n# Check loaded modules\napache2ctl -M | grep -E &quot;(rewrite|ssl|headers)&quot;  # Ubuntu/Debian\nhttpd -M | grep -E &quot;(rewrite|ssl|headers)&quot;        # RHEL/CentOS\n\n# Memory usage analysis\nps aux --sort=-%mem | grep -E &quot;(apache2|httpd)&quot; | head -10</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode-and-advanced-troubleshooting\" class=\"mobile-header\">Debug Mode and Advanced Troubleshooting</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\n# Ubuntu/Debian\nsudo nano /etc/apache2/apache2.conf\n# Add: LogLevel debug\n\n# RHEL/CentOS\nsudo nano /etc/httpd/conf/httpd.conf\n# Add: LogLevel debug\n\n# Test configuration with specific user\nsudo -u www-data apache2ctl configtest  # Ubuntu/Debian\nsudo -u apache httpd -t                  # RHEL/CentOS\n\n# Check virtual host configuration\napache2ctl -S  # Ubuntu/Debian\nhttpd -S       # RHEL/CentOS\n\n# Trace requests (careful in production)\n# Add to virtual host:\nLogLevel debug\nCustomLog /var/log/apache2/trace.log &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %b \\&quot;%{Referer}i\\&quot; \\&quot;%{User-agent}i\\&quot; %D&quot;\n\n# Monitor real-time\nsudo tail -f /var/log/apache2/trace.log</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-security-tools-integration\" class=\"mobile-header\">Additional Security Tools Integration</h2>\n<h3 id=\"fail2ban-configuration\" class=\"mobile-header\">Fail2Ban Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Fail2Ban\nsudo apt install -y fail2ban  # Ubuntu/Debian\nsudo yum install -y fail2ban  # RHEL/CentOS\n\n# Create Apache-specific jails\nsudo tee /etc/fail2ban/jail.d/apache.conf &gt; /dev/null &lt;&lt;EOF\n[apache-auth]\nenabled = true\nport = http,https\nfilter = apache-auth\nlogpath = /var/log/apache2/error.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/error_log  # RHEL/CentOS\nmaxretry = 6\nfindtime = 600\nbantime = 3600\n\n[apache-badbots]\nenabled = true\nport = http,https\nfilter = apache-badbots  \nlogpath = /var/log/apache2/access.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/access_log  # RHEL/CentOS\nmaxretry = 2\nbantime = 86400\n\n[apache-noscript]\nenabled = true\nport = http,https\nfilter = apache-noscript\nlogpath = /var/log/apache2/access.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/access_log  # RHEL/CentOS\nmaxretry = 6\nbantime = 86400\n\n[apache-overflows]\nenabled = true\nport = http,https\nfilter = apache-overflows\nlogpath = /var/log/apache2/error.log  # Ubuntu/Debian\n# logpath = /var/log/httpd/error_log  # RHEL/CentOS\nmaxretry = 2\nbantime = 86400\nEOF\n\nsudo systemctl enable --now fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-analysis-and-monitoring\" class=\"mobile-header\">Log Analysis and Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install GoAccess for real-time log analysis\n# Ubuntu/Debian\nsudo apt install -y goaccess\n\n# RHEL/CentOS\nsudo yum install -y goaccess\n\n# Analyze logs in real-time\n# Ubuntu/Debian\nsudo goaccess /var/log/apache2/access.log -c\n\n# RHEL/CentOS\nsudo goaccess /var/log/httpd/access_log -c\n\n# Generate HTML report\nsudo goaccess /var/log/apache2/access.log -o /var/www/html/stats.html --log-format=COMBINED --real-time-html</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-maintenance\" class=\"mobile-header\">Backup and Maintenance</h2>\n<h3 id=\"automated-backup-script\" class=\"mobile-header\">Automated Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/apache-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/apache&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{config,logs,sites}\n\n# Detect distribution and set paths\nif [ -d /etc/apache2 ]; then\n    # Ubuntu/Debian\n    CONFIG_DIR=&quot;/etc/apache2&quot;\n    LOG_DIR=&quot;/var/log/apache2&quot;\n    SERVICE_NAME=&quot;apache2&quot;\nelif [ -d /etc/httpd ]; then\n    # RHEL/CentOS\n    CONFIG_DIR=&quot;/etc/httpd&quot;\n    LOG_DIR=&quot;/var/log/httpd&quot;  \n    SERVICE_NAME=&quot;httpd&quot;\nfi\n\n# Backup configuration\ntar -czf ${BACKUP_DIR}/config/apache-config-${DATE}.tar.gz -C / ${CONFIG_DIR#/}\n\n# Backup website files\ntar -czf ${BACKUP_DIR}/sites/apache-sites-${DATE}.tar.gz -C /var/www .\n\n# Backup recent logs (last 7 days)\nfind ${LOG_DIR} -name &quot;*.log&quot; -mtime -7 -exec tar -czf ${BACKUP_DIR}/logs/apache-logs-${DATE}.tar.gz {} +\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;apache-*&quot; -type f -mtime +7 -delete\n\necho &quot;Apache backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/apache-backup.sh\n\n# Schedule daily backup\necho &quot;0 2 * * * root /usr/local/bin/apache-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">This updated Apache guide now includes:</p>\n<li class=\"mobile-list-item\">✅ <strong>Complete cross-platform support</strong> (Ubuntu, Debian, RHEL, CentOS, Rocky, Fedora, Arch, openSUSE, Alpine)</li>\n<li class=\"mobile-list-item\">✅ <strong>2024 security best practices</strong> (modern SSL/TLS, security headers, ModSecurity WAF)</li>\n<li class=\"mobile-list-item\">✅ <strong>Performance optimization</strong> (MPM tuning, system optimization, caching)  </li>\n<li class=\"mobile-list-item\">✅ <strong>Advanced configurations</strong> (virtual hosts, SSL certificates, compression)</li>\n<li class=\"mobile-list-item\">✅ <strong>Comprehensive troubleshooting</strong> (SELinux, cross-platform debugging)</li>\n<li class=\"mobile-list-item\">✅ <strong>Security tools integration</strong> (Fail2Ban, log analysis, monitoring)</li>\n<p class=\"mobile-paragraph\">Should I continue updating the other guides with this same comprehensive approach?</p>","readTime":"18 min","wordCount":3528,"lastBuilt":"2025-09-14T00:58:33.348Z"},{"name":"apache-kafka","displayName":"Apache Kafka","slug":"apache-kafka","description":"Repo for apache-kafka","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/apache-kafka","updatedAt":"2025-09-08T03:05:12Z","createdAt":"2025-09-08T03:05:01Z","readmeRaw":"## 👋 Welcome to apache-kafka 🚀  \n\napache-kafka README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-apache-kafka\" class=\"mobile-header\">👋 Welcome to apache-kafka 🚀  </h2>\n<p class=\"mobile-paragraph\">apache-kafka README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T00:58:33.171Z"},{"name":"caddy","displayName":"Caddy","slug":"caddy","description":"Repo for caddy","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/caddy","updatedAt":"2025-09-08T03:05:30Z","createdAt":"2025-09-08T03:05:19Z","readmeRaw":"## 👋 Welcome to caddy 🚀  \n\ncaddy README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-caddy\" class=\"mobile-header\">👋 Welcome to caddy 🚀  </h2>\n<p class=\"mobile-paragraph\">caddy README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T00:58:33.025Z"},{"name":"haproxy","displayName":"Haproxy","slug":"haproxy","description":"Repo for haproxy","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/haproxy","updatedAt":"2025-09-08T03:08:33Z","createdAt":"2025-09-08T03:08:23Z","readmeRaw":"# HAProxy Installation Guide\n\nHigh-performance TCP/HTTP load balancer and reverse proxy. Essential for distributing traffic across multiple backend servers.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- Root or sudo access\n- Multiple backend servers to load balance (optional for testing)\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install HAProxy\nsudo apt install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n```\n\n### RHEL/CentOS/Rocky Linux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install HAProxy\nsudo yum install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy\n```\n\n### From Source (Latest Version)\n```bash\n# Install build dependencies\nsudo apt install -y build-essential libssl-dev zlib1g-dev libpcre3-dev\n\n# Download and compile HAProxy\ncd /tmp\nwget https://www.haproxy.org/download/2.8/src/haproxy-2.8.0.tar.gz\ntar xzf haproxy-2.8.0.tar.gz\ncd haproxy-2.8.0\n\n# Compile with SSL support\nmake TARGET=linux-glibc USE_OPENSSL=1 USE_ZLIB=1 USE_PCRE=1\nsudo make install\n\n# Create systemd service\nsudo tee /etc/systemd/system/haproxy.service > /dev/null <<EOF\n[Unit]\nDescription=HAProxy Load Balancer\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid\nExecReload=/bin/kill -USR2 \\$MAINPID\nKillMode=mixed\nRestart=always\nType=notify\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy\n```\n\n## Configuration\n\n### Basic Load Balancer Configuration\n```bash\n# Backup original configuration\nsudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup\n\n# Create basic load balancer configuration\nsudo tee /etc/haproxy/haproxy.cfg > /dev/null <<EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\n# Frontend configuration\nfrontend web_frontend\n    bind *:80\n    option httpclose\n    option forwardfor\n    default_backend web_servers\n\n# Backend configuration\nbackend web_servers\n    balance roundrobin\n    option httpchk GET /health\n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check backup\n\n# Statistics page\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if TRUE\nEOF\n\n# Test configuration\nsudo haproxy -c -f /etc/haproxy/haproxy.cfg\n\n# Restart HAProxy\nsudo systemctl restart haproxy\n```\n\n### SSL Termination Configuration\n```bash\n# Create SSL certificate (self-signed for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/haproxy/server.key \\\n    -out /etc/haproxy/server.crt \\\n    -subj \"/C=US/ST=State/L=City/O=Organization/CN=example.com\"\n\n# Combine certificate and key\nsudo cat /etc/haproxy/server.crt /etc/haproxy/server.key | sudo tee /etc/haproxy/server.pem\n\n# Update HAProxy configuration for SSL\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\n# HTTPS Frontend\nfrontend https_frontend\n    bind *:443 ssl crt /etc/haproxy/server.pem\n    redirect scheme https unless { ssl_fc }\n    default_backend web_servers\n\n# HTTP to HTTPS redirect\nfrontend http_frontend\n    bind *:80\n    redirect scheme https code 301\nEOF\n\nsudo systemctl restart haproxy\n```\n\n### Advanced Load Balancing Configuration\n```bash\n# Advanced configuration with multiple backends\nsudo tee /etc/haproxy/haproxy.cfg > /dev/null <<EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n    \n    # SSL configuration\n    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n    ssl-default-bind-options no-sslv3\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor\n    option http-server-close\n    timeout connect 5s\n    timeout client 1m\n    timeout server 1m\n    timeout http-keep-alive 10s\n    timeout check 10s\n    maxconn 3000\n\n# Frontend for web traffic\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/certs/\n    \n    # ACLs for routing\n    acl is_api path_beg /api/\n    acl is_admin path_beg /admin/\n    acl is_static path_beg /static/ /css/ /js/ /images/\n    \n    # Routing rules\n    use_backend api_servers if is_api\n    use_backend admin_servers if is_admin\n    use_backend static_servers if is_static\n    default_backend web_servers\n\n# Web servers backend\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health\n    http-check expect status 200\n    server web1 192.168.1.10:8080 check weight 100\n    server web2 192.168.1.11:8080 check weight 100\n    server web3 192.168.1.12:8080 check weight 50 backup\n\n# API servers backend\nbackend api_servers\n    balance roundrobin\n    option httpchk GET /api/health\n    http-check expect string \"OK\"\n    server api1 192.168.1.20:3000 check\n    server api2 192.168.1.21:3000 check\n\n# Admin backend (restricted)\nbackend admin_servers\n    balance source\n    option httpchk GET /admin/health\n    server admin1 192.168.1.30:9000 check\n\n# Static content backend\nbackend static_servers\n    balance roundrobin\n    option httpchk GET /static/health.txt\n    server static1 192.168.1.40:8080 check\n    server static2 192.168.1.41:8080 check\n\n# Stats interface\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /\n    stats refresh 30s\n    stats admin if TRUE\n    stats auth admin:secure_password\nEOF\n```\n\n### Database Load Balancing (TCP Mode)\n```bash\n# MySQL/PostgreSQL load balancing\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\n# MySQL Frontend\nlisten mysql_frontend\n    bind *:3306\n    mode tcp\n    option mysql-check user haproxy_check\n    balance leastconn\n    server mysql1 192.168.1.50:3306 check\n    server mysql2 192.168.1.51:3306 check backup\n\n# PostgreSQL Frontend  \nlisten postgresql_frontend\n    bind *:5432\n    mode tcp\n    option pgsql-check user haproxy_check\n    balance roundrobin\n    server postgres1 192.168.1.60:5432 check\n    server postgres2 192.168.1.61:5432 check\nEOF\n```\n\n## Firewall Configuration\n\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw allow 8404/tcp  # Stats interface\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --permanent --add-port=8404/tcp\nsudo firewall-cmd --reload\n```\n\n## Verification\n\n```bash\n# Check HAProxy status\nsudo systemctl status haproxy\n\n# Test configuration syntax\nsudo haproxy -c -f /etc/haproxy/haproxy.cfg\n\n# Check listening ports\nsudo netstat -tulpn | grep haproxy\n\n# Test load balancing\nfor i in {1..10}; do curl -s http://localhost/ | grep server; done\n\n# View statistics\ncurl http://localhost:8404/stats\n\n# Check backend server health\necho \"show stat\" | sudo socat stdio /run/haproxy/admin.sock\n\n# View real-time logs\nsudo journalctl -u haproxy -f\n```\n\n## Monitoring and Management\n\n```bash\n# HAProxy runtime commands via socket\necho \"help\" | sudo socat stdio /run/haproxy/admin.sock\n\n# Disable/Enable server\necho \"disable server web_servers/web1\" | sudo socat stdio /run/haproxy/admin.sock\necho \"enable server web_servers/web1\" | sudo socat stdio /run/haproxy/admin.sock\n\n# Check server weights\necho \"get weight web_servers/web1\" | sudo socat stdio /run/haproxy/admin.sock\n\n# Set server weight\necho \"set weight web_servers/web1 50\" | sudo socat stdio /run/haproxy/admin.sock\n\n# Show current sessions\necho \"show sess\" | sudo socat stdio /run/haproxy/admin.sock\n```\n\n## Performance Tuning\n\n```bash\n# System-level optimizations\necho \"net.ipv4.ip_local_port_range = 1024 65535\" | sudo tee -a /etc/sysctl.conf\necho \"net.core.somaxconn = 65535\" | sudo tee -a /etc/sysctl.conf\necho \"net.core.netdev_max_backlog = 30000\" | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# HAProxy performance configuration\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\nglobal\n    # Performance tuning\n    maxconn 40000\n    nbproc 1\n    nbthread 4\n    cpu-map auto:1/1-4 0-3\n    \ndefaults\n    # Connection limits\n    maxconn 8000\n    \n    # Timeouts\n    timeout connect 3s\n    timeout client 25s\n    timeout server 25s\n    timeout tunnel 3600s\n    timeout http-keep-alive 1s\n    timeout http-request 15s\n    timeout queue 30s\n    timeout tarpit 60s\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/plain text/css text/javascript application/javascript\nEOF\n```\n\n## Health Checks\n\n```bash\n# HTTP health check examples\nbackend web_servers\n    option httpchk GET /health\n    http-check expect status 200\n    http-check expect string \"OK\"\n    \n    # Advanced health check\n    option httpchk GET /health HTTP/1.1\\r\\nHost:\\ example.com\n    http-check expect rstatus ^2[0-9][0-9]\n    \n    server web1 192.168.1.10:8080 check inter 2000 rise 2 fall 3\n    server web2 192.168.1.11:8080 check inter 2000 rise 2 fall 3\n\n# TCP health check\nbackend database_servers\n    mode tcp\n    option tcp-check\n    tcp-check connect\n    tcp-check send-binary 0a  # MySQL ping\n    tcp-check expect binary 0a\n    \n    server db1 192.168.1.20:3306 check\n    server db2 192.168.1.21:3306 check\n```\n\n## Troubleshooting\n\n```bash\n# Check HAProxy process\nps aux | grep haproxy\n\n# Verify configuration file\nsudo haproxy -c -V -f /etc/haproxy/haproxy.cfg\n\n# Check socket permissions\nls -la /run/haproxy/admin.sock\n\n# Test backend connectivity\nfor server in 192.168.1.10 192.168.1.11; do\n    nc -zv $server 8080\ndone\n\n# Monitor connections\nss -tuln | grep :80\n\n# Debug mode (don't run in production)\nsudo haproxy -f /etc/haproxy/haproxy.cfg -d\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.haproxy.org/)\n- [HAProxy Configuration Manual](https://cbonte.github.io/haproxy-dconv/)\n- [Best Practices Guide](https://www.haproxy.com/documentation/hapee/latest/configuration/best-practices/)\n- [Performance Tuning](https://www.haproxy.com/blog/haproxy-performance-tuning/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"haproxy-installation-guide\" class=\"mobile-header\">HAProxy Installation Guide</h1>\n<p class=\"mobile-paragraph\">High-performance TCP/HTTP load balancer and reverse proxy. Essential for distributing traffic across multiple backend servers.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">Multiple backend servers to load balance (optional for testing)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install HAProxy\nsudo apt install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install HAProxy\nsudo yum install -y haproxy\n\n# Enable and start HAProxy\nsudo systemctl enable --now haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"from-source-latest-version\" class=\"mobile-header\">From Source (Latest Version)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install build dependencies\nsudo apt install -y build-essential libssl-dev zlib1g-dev libpcre3-dev\n\n# Download and compile HAProxy\ncd /tmp\nwget https://www.haproxy.org/download/2.8/src/haproxy-2.8.0.tar.gz\ntar xzf haproxy-2.8.0.tar.gz\ncd haproxy-2.8.0\n\n# Compile with SSL support\nmake TARGET=linux-glibc USE_OPENSSL=1 USE_ZLIB=1 USE_PCRE=1\nsudo make install\n\n# Create systemd service\nsudo tee /etc/systemd/system/haproxy.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=HAProxy Load Balancer\nAfter=network.target\n\n[Service]\nExecStart=/usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -p /run/haproxy.pid\nExecReload=/bin/kill -USR2 \\$MAINPID\nKillMode=mixed\nRestart=always\nType=notify\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now haproxy</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-load-balancer-configuration\" class=\"mobile-header\">Basic Load Balancer Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup original configuration\nsudo cp /etc/haproxy/haproxy.cfg /etc/haproxy/haproxy.cfg.backup\n\n# Create basic load balancer configuration\nsudo tee /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n    errorfile 400 /etc/haproxy/errors/400.http\n    errorfile 403 /etc/haproxy/errors/403.http\n    errorfile 408 /etc/haproxy/errors/408.http\n    errorfile 500 /etc/haproxy/errors/500.http\n    errorfile 502 /etc/haproxy/errors/502.http\n    errorfile 503 /etc/haproxy/errors/503.http\n    errorfile 504 /etc/haproxy/errors/504.http\n\n# Frontend configuration\nfrontend web_frontend\n    bind *:80\n    option httpclose\n    option forwardfor\n    default_backend web_servers\n\n# Backend configuration\nbackend web_servers\n    balance roundrobin\n    option httpchk GET /health\n    server web1 192.168.1.10:8080 check\n    server web2 192.168.1.11:8080 check\n    server web3 192.168.1.12:8080 check backup\n\n# Statistics page\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /stats\n    stats refresh 30s\n    stats admin if TRUE\nEOF\n\n# Test configuration\nsudo haproxy -c -f /etc/haproxy/haproxy.cfg\n\n# Restart HAProxy\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssl-termination-configuration\" class=\"mobile-header\">SSL Termination Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create SSL certificate (self-signed for testing)\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/haproxy/server.key \\\n    -out /etc/haproxy/server.crt \\\n    -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=example.com&quot;\n\n# Combine certificate and key\nsudo cat /etc/haproxy/server.crt /etc/haproxy/server.key | sudo tee /etc/haproxy/server.pem\n\n# Update HAProxy configuration for SSL\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\n# HTTPS Frontend\nfrontend https_frontend\n    bind *:443 ssl crt /etc/haproxy/server.pem\n    redirect scheme https unless { ssl_fc }\n    default_backend web_servers\n\n# HTTP to HTTPS redirect\nfrontend http_frontend\n    bind *:80\n    redirect scheme https code 301\nEOF\n\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-load-balancing-configuration\" class=\"mobile-header\">Advanced Load Balancing Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Advanced configuration with multiple backends\nsudo tee /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n    \n    # SSL configuration\n    ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS\n    ssl-default-bind-options no-sslv3\n\ndefaults\n    mode http\n    log global\n    option httplog\n    option dontlognull\n    option log-health-checks\n    option forwardfor\n    option http-server-close\n    timeout connect 5s\n    timeout client 1m\n    timeout server 1m\n    timeout http-keep-alive 10s\n    timeout check 10s\n    maxconn 3000\n\n# Frontend for web traffic\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/haproxy/certs/\n    \n    # ACLs for routing\n    acl is_api path_beg /api/\n    acl is_admin path_beg /admin/\n    acl is_static path_beg /static/ /css/ /js/ /images/\n    \n    # Routing rules\n    use_backend api_servers if is_api\n    use_backend admin_servers if is_admin\n    use_backend static_servers if is_static\n    default_backend web_servers\n\n# Web servers backend\nbackend web_servers\n    balance leastconn\n    option httpchk GET /health\n    http-check expect status 200\n    server web1 192.168.1.10:8080 check weight 100\n    server web2 192.168.1.11:8080 check weight 100\n    server web3 192.168.1.12:8080 check weight 50 backup\n\n# API servers backend\nbackend api_servers\n    balance roundrobin\n    option httpchk GET /api/health\n    http-check expect string &quot;OK&quot;\n    server api1 192.168.1.20:3000 check\n    server api2 192.168.1.21:3000 check\n\n# Admin backend (restricted)\nbackend admin_servers\n    balance source\n    option httpchk GET /admin/health\n    server admin1 192.168.1.30:9000 check\n\n# Static content backend\nbackend static_servers\n    balance roundrobin\n    option httpchk GET /static/health.txt\n    server static1 192.168.1.40:8080 check\n    server static2 192.168.1.41:8080 check\n\n# Stats interface\nlisten stats\n    bind *:8404\n    stats enable\n    stats uri /\n    stats refresh 30s\n    stats admin if TRUE\n    stats auth admin:secure_password\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-load-balancing-tcp-mode\" class=\"mobile-header\">Database Load Balancing (TCP Mode)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MySQL/PostgreSQL load balancing\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\n# MySQL Frontend\nlisten mysql_frontend\n    bind *:3306\n    mode tcp\n    option mysql-check user haproxy_check\n    balance leastconn\n    server mysql1 192.168.1.50:3306 check\n    server mysql2 192.168.1.51:3306 check backup\n\n# PostgreSQL Frontend  \nlisten postgresql_frontend\n    bind *:5432\n    mode tcp\n    option pgsql-check user haproxy_check\n    balance roundrobin\n    server postgres1 192.168.1.60:5432 check\n    server postgres2 192.168.1.61:5432 check\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 80/tcp\nsudo ufw allow 443/tcp\nsudo ufw allow 8404/tcp  # Stats interface\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --permanent --add-port=443/tcp\nsudo firewall-cmd --permanent --add-port=8404/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check HAProxy status\nsudo systemctl status haproxy\n\n# Test configuration syntax\nsudo haproxy -c -f /etc/haproxy/haproxy.cfg\n\n# Check listening ports\nsudo netstat -tulpn | grep haproxy\n\n# Test load balancing\nfor i in {1..10}; do curl -s http://localhost/ | grep server; done\n\n# View statistics\ncurl http://localhost:8404/stats\n\n# Check backend server health\necho &quot;show stat&quot; | sudo socat stdio /run/haproxy/admin.sock\n\n# View real-time logs\nsudo journalctl -u haproxy -f</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-management\" class=\"mobile-header\">Monitoring and Management</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># HAProxy runtime commands via socket\necho &quot;help&quot; | sudo socat stdio /run/haproxy/admin.sock\n\n# Disable/Enable server\necho &quot;disable server web_servers/web1&quot; | sudo socat stdio /run/haproxy/admin.sock\necho &quot;enable server web_servers/web1&quot; | sudo socat stdio /run/haproxy/admin.sock\n\n# Check server weights\necho &quot;get weight web_servers/web1&quot; | sudo socat stdio /run/haproxy/admin.sock\n\n# Set server weight\necho &quot;set weight web_servers/web1 50&quot; | sudo socat stdio /run/haproxy/admin.sock\n\n# Show current sessions\necho &quot;show sess&quot; | sudo socat stdio /run/haproxy/admin.sock</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-tuning\" class=\"mobile-header\">Performance Tuning</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># System-level optimizations\necho &quot;net.ipv4.ip_local_port_range = 1024 65535&quot; | sudo tee -a /etc/sysctl.conf\necho &quot;net.core.somaxconn = 65535&quot; | sudo tee -a /etc/sysctl.conf\necho &quot;net.core.netdev_max_backlog = 30000&quot; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n\n# HAProxy performance configuration\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\nglobal\n    # Performance tuning\n    maxconn 40000\n    nbproc 1\n    nbthread 4\n    cpu-map auto:1/1-4 0-3\n    \ndefaults\n    # Connection limits\n    maxconn 8000\n    \n    # Timeouts\n    timeout connect 3s\n    timeout client 25s\n    timeout server 25s\n    timeout tunnel 3600s\n    timeout http-keep-alive 1s\n    timeout http-request 15s\n    timeout queue 30s\n    timeout tarpit 60s\n    \n    # Compression\n    compression algo gzip\n    compression type text/html text/plain text/css text/javascript application/javascript\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"health-checks\" class=\"mobile-header\">Health Checks</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># HTTP health check examples\nbackend web_servers\n    option httpchk GET /health\n    http-check expect status 200\n    http-check expect string &quot;OK&quot;\n    \n    # Advanced health check\n    option httpchk GET /health HTTP/1.1\\r\\nHost:\\ example.com\n    http-check expect rstatus ^2[0-9][0-9]\n    \n    server web1 192.168.1.10:8080 check inter 2000 rise 2 fall 3\n    server web2 192.168.1.11:8080 check inter 2000 rise 2 fall 3\n\n# TCP health check\nbackend database_servers\n    mode tcp\n    option tcp-check\n    tcp-check connect\n    tcp-check send-binary 0a  # MySQL ping\n    tcp-check expect binary 0a\n    \n    server db1 192.168.1.20:3306 check\n    server db2 192.168.1.21:3306 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check HAProxy process\nps aux | grep haproxy\n\n# Verify configuration file\nsudo haproxy -c -V -f /etc/haproxy/haproxy.cfg\n\n# Check socket permissions\nls -la /run/haproxy/admin.sock\n\n# Test backend connectivity\nfor server in 192.168.1.10 192.168.1.11; do\n    nc -zv $server 8080\ndone\n\n# Monitor connections\nss -tuln | grep :80\n\n# Debug mode (don&#039;t run in production)\nsudo haproxy -f /etc/haproxy/haproxy.cfg -d</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.haproxy.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://cbonte.github.io/haproxy-dconv/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HAProxy Configuration Manual</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.haproxy.com/documentation/hapee/latest/configuration/best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.haproxy.com/blog/haproxy-performance-tuning/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Performance Tuning</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"7 min","wordCount":1247,"lastBuilt":"2025-09-14T00:58:30.329Z"},{"name":"nginx","displayName":"NGINX","slug":"nginx","description":"Repo for nginx","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/nginx","updatedAt":"2025-09-08T03:12:37Z","createdAt":"2025-09-08T03:12:26Z","readmeRaw":"# NGINX Installation Guide\n\nHigh-performance web server, reverse proxy, and load balancer. Essential infrastructure component for modern web applications serving millions of websites worldwide.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 1GB RAM minimum, 2GB+ recommended for production\n- Network connectivity for package downloads\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Method 1: Distribution packages (stable, older version)\nsudo apt update\nsudo apt install -y nginx\n\n# Method 2: Official NGINX repository (latest stable)\nsudo apt install -y curl gnupg2 ca-certificates lsb-release debian-archive-keyring\n\n# Import NGINX signing key\ncurl -fsSL https://nginx.org/keys/nginx_signing.key | sudo gpg --dearmor -o /usr/share/keyrings/nginx-archive-keyring.gpg\n\n# Add NGINX repository\necho \"deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/ubuntu $(lsb_release -cs) nginx\" | sudo tee /etc/apt/sources.list.d/nginx.list\n\n# Set repository pinning\necho -e \"Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n\" | sudo tee /etc/apt/preferences.d/99nginx\n\nsudo apt update\nsudo apt install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Method 1: EPEL packages\nsudo yum install -y epel-release\nsudo yum install -y nginx\n\n# Method 2: Official NGINX repository (recommended)\nsudo tee /etc/yum.repos.d/nginx.repo > /dev/null <<EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\nsudo yum install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx\n```\n\n### Fedora\n```bash\n# Install from official Fedora repositories\nsudo dnf install -y nginx\n\n# Or from NGINX official repository\nsudo dnf install -y dnf-utils\nsudo tee /etc/yum.repos.d/nginx.repo > /dev/null <<EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/fedora/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\nsudo dnf install -y nginx\nsudo systemctl enable --now nginx\n```\n\n### Arch Linux\n```bash\n# Install from official repositories\nsudo pacman -Syu nginx\n\n# Or install nginx-mainline for latest version\nsudo pacman -S nginx-mainline\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx\n```\n\n### openSUSE/SUSE\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx\n```\n\n### Alpine Linux\n```bash\n# Install NGINX\nsudo apk update\nsudo apk add nginx\n\n# Create directories\nsudo mkdir -p /run/nginx\n\n# Enable and start NGINX\nsudo rc-update add nginx default\nsudo service nginx start\n```\n\n### Docker Installation\n```bash\n# Official NGINX Docker image\ndocker run -d \\\n  --name nginx \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -v ~/nginx/conf:/etc/nginx/conf.d \\\n  -v ~/nginx/html:/usr/share/nginx/html \\\n  -v ~/nginx/certs:/etc/nginx/certs \\\n  nginx:latest\n\n# With Docker Compose\ncat > docker-compose.yml <<EOF\nversion: '3.8'\nservices:\n  nginx:\n    image: nginx:latest\n    restart: unless-stopped\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./conf:/etc/nginx/conf.d\n      - ./html:/usr/share/nginx/html\n      - ./certs:/etc/nginx/certs\n      - ./logs:/var/log/nginx\n    networks:\n      - webserver\n\nnetworks:\n  webserver:\n    driver: bridge\nEOF\n\ndocker-compose up -d\n```\n\n### Source Compilation (Advanced)\n```bash\n# Install build dependencies\n# Ubuntu/Debian\nsudo apt install -y build-essential libpcre3-dev libssl-dev zlib1g-dev libgd-dev libxml2-dev uuid-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y \"Development Tools\"\nsudo yum install -y pcre-devel openssl-devel zlib-devel gd-devel libxml2-devel libuuid-devel\n\n# Download NGINX source\ncd /tmp\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\ntar xzf nginx-1.24.0.tar.gz\ncd nginx-1.24.0\n\n# Configure with modules\n./configure \\\n  --prefix=/etc/nginx \\\n  --sbin-path=/usr/sbin/nginx \\\n  --modules-path=/usr/lib/nginx/modules \\\n  --conf-path=/etc/nginx/nginx.conf \\\n  --error-log-path=/var/log/nginx/error.log \\\n  --http-log-path=/var/log/nginx/access.log \\\n  --pid-path=/var/run/nginx.pid \\\n  --lock-path=/var/run/nginx.lock \\\n  --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n  --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n  --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n  --with-perl_modules_path=/usr/lib/perl5/vendor_perl \\\n  --user=nginx \\\n  --group=nginx \\\n  --with-compat \\\n  --with-file-aio \\\n  --with-threads \\\n  --with-http_addition_module \\\n  --with-http_auth_request_module \\\n  --with-http_dav_module \\\n  --with-http_flv_module \\\n  --with-http_gunzip_module \\\n  --with-http_gzip_static_module \\\n  --with-http_mp4_module \\\n  --with-http_random_index_module \\\n  --with-http_realip_module \\\n  --with-http_secure_link_module \\\n  --with-http_slice_module \\\n  --with-http_ssl_module \\\n  --with-http_stub_status_module \\\n  --with-http_sub_module \\\n  --with-http_v2_module \\\n  --with-stream \\\n  --with-stream_realip_module \\\n  --with-stream_ssl_module \\\n  --with-stream_ssl_preread_module\n\n# Compile and install\nmake -j$(nproc)\nsudo make install\n\n# Create nginx user\nsudo useradd -r -d /var/cache/nginx -s /sbin/nologin nginx\n\n# Create systemd service\nsudo tee /etc/systemd/system/nginx.service > /dev/null <<EOF\n[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/var/run/nginx.pid\nExecStartPre=/usr/sbin/nginx -t\nExecStart=/usr/sbin/nginx\nExecReload=/bin/kill -s HUP \\$MAINPID\nKillSignal=SIGQUIT\nTimeoutStopSec=5\nKillMode=mixed\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nginx\n```\n\n## Configuration\n\n### Optimized Main Configuration (/etc/nginx/nginx.conf)\n```bash\n# Create production-ready nginx.conf\nsudo tee /etc/nginx/nginx.conf > /dev/null <<EOF\n# Run as a unique, less privileged user for security reasons.\nuser nginx;\n\n# Sets the worker threads to the number of CPU cores available in the system for best performance.\nworker_processes auto;\n\n# Maximum number of open files per worker process.\nworker_rlimit_nofile 65535;\n\nerror_log /var/log/nginx/error.log crit;\npid /var/run/nginx.pid;\n\nevents {\n    # The maximum number of simultaneous connections that can be opened by a worker process.\n    worker_connections 1024;\n    \n    # Tells the worker to accept multiple connections at a time\n    multi_accept on;\n    \n    # Preferred connection method for newer linux versions\n    use epoll;\n}\n\nhttp {\n    # Hide nginx version information\n    server_tokens off;\n    \n    # Define the MIME types for files.\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    \n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header Referrer-Policy \"no-referrer-when-downgrade\" always;\n    add_header Content-Security-Policy \"default-src 'self' http: https: data: blob: 'unsafe-inline'\" always;\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n\n    # Speed up file transfers by using sendfile() to copy directly between descriptors\n    sendfile on;\n    \n    # Tell Nginx not to send out partial frames; this increases throughput\n    tcp_nopush on;\n    \n    # Tell Nginx to enable the Nagle buffering algorithm for TCP packets\n    tcp_nodelay on;\n    \n    # Compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_min_length 1000;\n    gzip_types\n        application/atom+xml\n        application/javascript\n        application/json\n        application/ld+json\n        application/manifest+json\n        application/rss+xml\n        application/vnd.geo+json\n        application/vnd.ms-fontobject\n        application/x-font-ttf\n        application/x-web-app-manifest+json\n        application/xhtml+xml\n        application/xml\n        font/opentype\n        image/bmp\n        image/svg+xml\n        image/x-icon\n        text/cache-manifest\n        text/css\n        text/plain\n        text/vcard\n        text/vnd.rim.location.xloc\n        text/vtt\n        text/x-component\n        text/x-cross-domain-policy;\n    \n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_req_zone \\$binary_remote_addr zone=api:10m rate=1r/s;\n    limit_conn_zone \\$binary_remote_addr zone=conn_limit_per_ip:10m;\n    \n    # Timeouts\n    client_body_timeout 12;\n    client_header_timeout 12;\n    keepalive_timeout 15;\n    send_timeout 10;\n    \n    # Size Limits & Buffer Overflows\n    client_body_buffer_size 1k;\n    client_header_buffer_size 1k;\n    client_max_body_size 1m;\n    large_client_header_buffers 4 4k;\n    \n    # Log format\n    log_format main '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                    '\\$status \\$body_bytes_sent \"\\$http_referer\" '\n                    '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n                    \n    access_log /var/log/nginx/access.log main;\n    \n    # SSL Configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    \n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 5s;\n\n    # Include additional configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n```\n\n### Advanced Virtual Host with Security\n```bash\n# Create production-ready virtual host\nsudo tee /etc/nginx/sites-available/secure-site.conf > /dev/null <<EOF\n# Rate limiting\nlimit_req_zone \\$binary_remote_addr zone=\\${server_name}_ratelimit:10m rate=10r/s;\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n    \n    # Security headers even for redirects\n    add_header X-Frame-Options \"DENY\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    \n    # Redirect all HTTP traffic to HTTPS\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com www.example.com;\n    root /var/www/html/example.com;\n    index index.html index.htm index.php;\n\n    # SSL Configuration (2024 Best Practices)\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\n    \n    # Modern SSL configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    \n    # SSL session caching\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets off;\n    \n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    \n    # Security headers (2024 recommendations)\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains; preload\" always;\n    add_header X-Frame-Options \"DENY\" always;\n    add_header X-Content-Type-Options \"nosniff\" always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; media-src 'self'; object-src 'none'; child-src 'self'; form-action 'self'; base-uri 'self';\" always;\n    add_header Permissions-Policy \"camera=(), microphone=(), geolocation=()\" always;\n    \n    # Remove server signature\n    server_tokens off;\n    more_clear_headers Server;\n    \n    # Rate limiting\n    limit_req zone=\\${server_name}_ratelimit burst=20 nodelay;\n    limit_conn conn_limit_per_ip 20;\n    \n    # Main location block\n    location / {\n        try_files \\$uri \\$uri/ =404;\n        \n        # Security for static files\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot)\\$ {\n            expires 1y;\n            add_header Cache-Control \"public, immutable\";\n            access_log off;\n            \n            # Security headers for static files\n            add_header X-Content-Type-Options \"nosniff\" always;\n            add_header X-Frame-Options \"DENY\" always;\n        }\n    }\n    \n    # PHP processing (if needed)\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n        \n        # Security for PHP\n        fastcgi_hide_header X-Powered-By;\n        add_header X-Frame-Options \"DENY\" always;\n        add_header X-Content-Type-Options \"nosniff\" always;\n    }\n    \n    # Deny access to sensitive files\n    location ~ /\\. {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n    \n    location ~ ~\\$ {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n    \n    # Block common exploits\n    location ~* /(wp-admin|wp-login|xmlrpc\\.php) {\n        deny all;\n        return 404;\n    }\n    \n    # Monitoring endpoint\n    location /nginx_status {\n        stub_status on;\n        allow 127.0.0.1;\n        allow ::1;\n        deny all;\n        access_log off;\n    }\n    \n    # Health check endpoint\n    location /health {\n        access_log off;\n        return 200 \"healthy\\n\";\n        add_header Content-Type text/plain;\n    }\n    \n    # Block bots\n    location ~ /(wp-|wordpress|wp_) {\n        deny all;\n        return 404;\n    }\n    \n    error_page 404 /404.html;\n    error_page 500 502 503 504 /50x.html;\n    \n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n\n# Additional server block for www redirect\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name www.example.com;\n    \n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    \n    return 301 https://example.com\\$request_uri;\n}\nEOF\n```\n\n## Advanced Security Hardening\n\n### Generate Strong DH Parameters\n```bash\n# Generate 4096-bit DH parameters (takes time but more secure)\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096\n\n# Or 2048-bit for faster generation (still secure)\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n```\n\n### ModSecurity WAF Installation\n```bash\n# Ubuntu/Debian\nsudo apt install -y libmodsecurity3 libmodsecurity3-dev\n\n# Download and compile ModSecurity-nginx connector\ncd /tmp\ngit clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\ntar xzf nginx-1.24.0.tar.gz\n\n# Compile nginx with ModSecurity\ncd nginx-1.24.0\n./configure --add-dynamic-module=../ModSecurity-nginx\nmake modules\n\n# Copy module\nsudo cp objs/ngx_http_modsecurity_module.so /usr/lib/nginx/modules/\n\n# Enable ModSecurity\necho \"load_module modules/ngx_http_modsecurity_module.so;\" | sudo tee -a /etc/nginx/nginx.conf\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/nginx/modsec\ncd /etc/nginx/modsec\nsudo wget https://github.com/coreruleset/coreruleset/archive/refs/tags/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 /etc/nginx/modsec/crs\n\n# Create ModSecurity configuration\nsudo tee /etc/nginx/modsec/modsecurity.conf > /dev/null <<EOF\nInclude /etc/nginx/modsec/crs/crs-setup.conf.example\nInclude /etc/nginx/modsec/crs/rules/*.conf\n\nSecRuleEngine On\nSecRequestBodyAccess On\nSecResponseBodyAccess On\nSecTmpDir /tmp/\nSecDataDir /etc/nginx/modsec/data/\nEOF\n\n# Enable in virtual host\nmodsecurity on;\nmodsecurity_rules_file /etc/nginx/modsec/modsecurity.conf;\n```\n\n### Fail2Ban Integration\n```bash\n# Install Fail2Ban\nsudo apt install -y fail2ban  # Ubuntu/Debian\nsudo yum install -y fail2ban  # RHEL/CentOS\n\n# Create NGINX filter for Fail2Ban\nsudo tee /etc/fail2ban/filter.d/nginx-req-limit.conf > /dev/null <<EOF\n[Definition]\nfailregex = limiting requests, excess: .* by zone .*, client: <HOST>\nignoreregex =\nEOF\n\n# Create jail configuration\nsudo tee /etc/fail2ban/jail.d/nginx.conf > /dev/null <<EOF\n[nginx-req-limit]\nenabled = true\nfilter = nginx-req-limit\naction = iptables-multiport[name=ReqLimit, port=\"http,https\", protocol=tcp]\nlogpath = /var/log/nginx/error.log\nfindtime = 600\nbantime = 7200\nmaxretry = 10\n\n[nginx-noscript]\nenabled = true\nport = http,https\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 6\n\n[nginx-badbots]\nenabled = true\nport = http,https\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n[nginx-noproxy]\nenabled = true\nport = http,https\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nEOF\n\nsudo systemctl enable --now fail2ban\n```\n\n## SSL/TLS with Let's Encrypt (All Platforms)\n\n### Automatic SSL Setup\n```bash\n# Install Certbot - Universal method\nsudo snap install core; sudo snap refresh core\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n\n# Alternative: Package manager installation\n# Ubuntu/Debian\nsudo apt install -y certbot python3-certbot-nginx\n\n# RHEL/CentOS (enable EPEL first)\nsudo yum install -y certbot python3-certbot-nginx\n\n# Fedora\nsudo dnf install -y certbot python3-certbot-nginx\n\n# Arch Linux\nsudo pacman -S certbot certbot-nginx\n\n# Obtain certificate\nsudo certbot --nginx -d example.com -d www.example.com\n\n# Auto-renewal setup (works on all distros)\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet && systemctl reload nginx\n\n# Test auto-renewal\nsudo certbot renew --dry-run\n```\n\n### Manual SSL Configuration (Self-signed for testing)\n```bash\n# Generate self-signed certificate\nsudo mkdir -p /etc/ssl/private\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/ssl/private/nginx-selfsigned.key \\\n  -out /etc/ssl/certs/nginx-selfsigned.crt \\\n  -subj \"/C=US/ST=State/L=City/O=Organization/CN=example.com\"\n\n# Create strong DH group\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n# Create SSL configuration snippet\nsudo tee /etc/nginx/snippets/self-signed.conf > /dev/null <<EOF\nssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;\nssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;\nEOF\n\nsudo tee /etc/nginx/snippets/ssl-params.conf > /dev/null <<EOF\nssl_protocols TLSv1.2 TLSv1.3;\nssl_prefer_server_ciphers on;\nssl_dhparam /etc/ssl/certs/dhparam.pem;\nssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\nssl_ecdh_curve secp384r1;\nssl_session_timeout 10m;\nssl_session_cache shared:SSL:10m;\nssl_session_tickets off;\nssl_stapling on;\nssl_stapling_verify on;\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\nadd_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\";\nadd_header X-Frame-Options DENY;\nadd_header X-Content-Type-Options nosniff;\nadd_header X-XSS-Protection \"1; mode=block\";\nEOF\n```\n\n## Firewall Configuration (All Platforms)\n\n### UFW (Ubuntu/Debian)\n```bash\nsudo ufw app list\nsudo ufw allow 'Nginx Full'  # Allows both HTTP and HTTPS\nsudo ufw allow 'Nginx HTTP'  # HTTP only\nsudo ufw allow 'Nginx HTTPS' # HTTPS only\nsudo ufw enable\nsudo ufw status\n```\n\n### Firewalld (RHEL/CentOS/Fedora)\n```bash\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\nsudo firewall-cmd --list-all\n```\n\n### iptables (Universal)\n```bash\n# Allow HTTP and HTTPS\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\n\n# Save rules (method varies by distro)\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save\n\n# Arch Linux\nsudo iptables-save > /etc/iptables/iptables.rules\n```\n\n### SELinux Configuration (RHEL/CentOS/Fedora)\n```bash\n# Check SELinux status\ngetenforce\n\n# Set SELinux booleans for NGINX\nsudo setsebool -P httpd_can_network_connect 1\nsudo setsebool -P httpd_can_network_relay 1\nsudo setsebool -P httpd_execmem 1\n\n# Create SELinux policy for custom ports\nsudo semanage port -a -t http_port_t -p tcp 8080\n\n# Check SELinux denials\nsudo ausearch -m AVC,USER_AVC,SELINUX_ERR,USER_SELINUX_ERR -ts recent\n```\n\n## Performance Optimization (Production)\n\n### System-level Optimizations\n```bash\n# Increase system limits for NGINX\nsudo tee -a /etc/security/limits.conf > /dev/null <<EOF\nnginx soft nofile 65535\nnginx hard nofile 65535\nEOF\n\n# Kernel parameters for high-traffic sites\nsudo tee -a /etc/sysctl.conf > /dev/null <<EOF\n# Network tuning for NGINX\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_max_tw_buckets = 400000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 15000 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 16777216\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 65536 16777216\nnet.ipv4.tcp_wmem = 4096 65536 16777216\nfs.file-max = 100000\nEOF\n\nsudo sysctl -p\n```\n\n### Worker Process Optimization\n```bash\n# Calculate optimal worker configuration\necho \"CPU cores: $(nproc)\"\necho \"Recommended worker_processes: auto (or $(nproc))\"\necho \"Recommended worker_connections: 1024-4096\"\n\n# Update main configuration\nsudo tee /etc/nginx/conf.d/performance.conf > /dev/null <<EOF\n# Worker optimization\nworker_processes auto;\nworker_rlimit_nofile 65535;\nworker_cpu_affinity auto;\n\nevents {\n    worker_connections 4096;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Connection optimization\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 30;\n    keepalive_requests 100;\n    reset_timedout_connection on;\n    \n    # Buffer optimization\n    client_body_buffer_size 128k;\n    client_max_body_size 10m;\n    client_header_buffer_size 1k;\n    large_client_header_buffers 4 4k;\n    output_buffers 1 32k;\n    postpone_output 1460;\n    \n    # Timeouts\n    client_header_timeout 3m;\n    client_body_timeout 3m;\n    send_timeout 3m;\n    \n    # Gzip optimization\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1000;\n    gzip_comp_level 6;\n    gzip_proxied any;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n}\nEOF\n```\n\n### Caching Configuration\n```bash\n# Create caching configuration\nsudo tee /etc/nginx/conf.d/caching.conf > /dev/null <<EOF\n# Proxy cache configuration\nproxy_cache_path /var/cache/nginx/proxy levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;\n\n# FastCGI cache configuration\nfastcgi_cache_path /var/cache/nginx/fastcgi levels=1:2 keys_zone=fastcgi_cache:10m max_size=10g inactive=60m use_temp_path=off;\n\n# Create cache directories\nsudo mkdir -p /var/cache/nginx/{proxy,fastcgi}\nsudo chown -R nginx:nginx /var/cache/nginx\nsudo chmod -R 755 /var/cache/nginx\n\n# Browser caching\nmap \\$sent_http_content_type \\$expires {\n    default                    off;\n    text/html                  epoch;\n    text/css                   max;\n    application/javascript     max;\n    ~image/                    1y;\n    ~font/                     1y;\n    application/pdf            1y;\n}\n\nexpires \\$expires;\nEOF\n```\n\n## Cross-Platform Verification Commands\n\n### Service Management (All Distributions)\n```bash\n# SystemD (Most modern distros)\nsudo systemctl status nginx\nsudo systemctl start nginx\nsudo systemctl stop nginx\nsudo systemctl restart nginx\nsudo systemctl reload nginx\n\n# Check if systemd is available\nif command -v systemctl &> /dev/null; then\n    echo \"Using systemd\"\n    sudo systemctl enable --now nginx\nelse\n    echo \"Using traditional init\"\n    # For older systems or Alpine\n    sudo service nginx start\n    sudo chkconfig nginx on  # RHEL/CentOS 6\n    sudo rc-update add nginx default  # Alpine\nfi\n```\n\n### Configuration Testing (Universal)\n```bash\n# Test configuration syntax\nsudo nginx -t\n\n# Test specific configuration file\nsudo nginx -t -c /etc/nginx/nginx.conf\n\n# Check configuration details\nsudo nginx -T\n\n# Show version and build info\nnginx -v\nnginx -V\n\n# Show loaded modules\nnginx -V 2>&1 | grep -o with-[a-z_]*\n```\n\n### Log Management (Cross-Platform)\n```bash\n# Log rotation configuration (works on all distros)\nsudo tee /etc/logrotate.d/nginx > /dev/null <<EOF\n/var/log/nginx/*.log {\n    daily\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 644 nginx nginx\n    postrotate\n        if [ -f /var/run/nginx.pid ]; then\n            kill -USR1 \\`cat /var/run/nginx.pid\\`\n        fi\n    endscript\n}\nEOF\n\n# Manual log rotation test\nsudo logrotate -d /etc/logrotate.d/nginx\nsudo logrotate -f /etc/logrotate.d/nginx\n```\n\n### Performance Monitoring (Universal)\n```bash\n# Monitor NGINX processes\nps aux | grep nginx\nhtop -p $(pgrep nginx | tr '\\n' ',' | sed 's/,$//')\n\n# Check connection statistics\nsudo netstat -tulpn | grep nginx\nsudo ss -tulpn | grep nginx\n\n# Monitor real-time connections\nwhile true; do echo \"$(date): $(sudo netstat -an | grep :80 | wc -l) connections\"; sleep 5; done\n\n# Check worker process CPU usage\ntop -p $(pgrep nginx | head -1)\n\n# Monitor access patterns\nsudo tail -f /var/log/nginx/access.log | cut -d' ' -f1 | sort | uniq -c | sort -nr\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Permission denied errors (SELinux/AppArmor)\n# RHEL/CentOS with SELinux\nsudo setsebool -P httpd_can_network_connect 1\nsudo chcon -Rt httpd_exec_t /usr/sbin/nginx\n\n# Ubuntu with AppArmor\nsudo aa-complain /usr/sbin/nginx\n\n# File permission issues\nsudo chown -R nginx:nginx /var/www/html  # RHEL/CentOS\nsudo chown -R www-data:www-data /var/www/html  # Ubuntu/Debian\n\n# Check file contexts (SELinux)\nls -laZ /var/www/html/\nsudo restorecon -Rv /var/www/html/\n\n# Port binding issues\nsudo lsof -i :80\nsudo netstat -tulpn | grep :80\n\n# Configuration syntax errors\nsudo nginx -t\nsudo journalctl -u nginx -f\n\n# Memory issues\nfree -h\nsudo systemctl status nginx\nps aux --sort=-%mem | grep nginx\n\n# Check for core dumps\nfind /var/crash -name \"nginx*\" 2>/dev/null\nfind /var/lib/systemd/coredump -name \"*nginx*\" 2>/dev/null\n```\n\n### Debug Mode and Logging\n```bash\n# Enable debug logging\nsudo nano /etc/nginx/nginx.conf\n# Change: error_log /var/log/nginx/error.log debug;\n\n# Test in foreground (debugging)\nsudo nginx -g 'daemon off;'\n\n# Check which user nginx is running as\nps aux | grep nginx\n\n# Verify listening addresses\nsudo nginx -T | grep listen\n\n# Check loaded modules\nnginx -V 2>&1 | tr ' ' '\\n' | grep module\n\n# Test configuration with different user\nsudo -u nginx nginx -t\n```\n\nThis updated nginx guide now includes:\n- ✅ **Cross-platform support** (Ubuntu, Debian, RHEL, CentOS, Rocky, Fedora, Arch, openSUSE, Alpine)\n- ✅ **Complete security hardening** (2024 best practices, ModSecurity WAF, Fail2Ban)\n- ✅ **Performance optimization** (system tuning, caching, worker optimization)\n- ✅ **SSL/TLS configuration** (Let's Encrypt, self-signed, modern ciphers)\n- ✅ **Comprehensive troubleshooting** (SELinux, AppArmor, cross-platform debugging)\n\nShould I continue updating the other guides with this same level of comprehensive cross-platform coverage?","readmeHtml":"<h1 id=\"nginx-installation-guide\" class=\"mobile-header\">NGINX Installation Guide</h1>\n<p class=\"mobile-paragraph\">High-performance web server, reverse proxy, and load balancer. Essential infrastructure component for modern web applications serving millions of websites worldwide.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">1GB RAM minimum, 2GB+ recommended for production</li>\n<li class=\"mobile-list-item\">Network connectivity for package downloads</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Method 1: Distribution packages (stable, older version)\nsudo apt update\nsudo apt install -y nginx\n\n# Method 2: Official NGINX repository (latest stable)\nsudo apt install -y curl gnupg2 ca-certificates lsb-release debian-archive-keyring\n\n# Import NGINX signing key\ncurl -fsSL https://nginx.org/keys/nginx_signing.key | sudo gpg --dearmor -o /usr/share/keyrings/nginx-archive-keyring.gpg\n\n# Add NGINX repository\necho &quot;deb [signed-by=/usr/share/keyrings/nginx-archive-keyring.gpg] http://nginx.org/packages/ubuntu $(lsb_release -cs) nginx&quot; | sudo tee /etc/apt/sources.list.d/nginx.list\n\n# Set repository pinning\necho -e &quot;Package: *\\nPin: origin nginx.org\\nPin: release o=nginx\\nPin-Priority: 900\\n&quot; | sudo tee /etc/apt/preferences.d/99nginx\n\nsudo apt update\nsudo apt install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Method 1: EPEL packages\nsudo yum install -y epel-release\nsudo yum install -y nginx\n\n# Method 2: Official NGINX repository (recommended)\nsudo tee /etc/yum.repos.d/nginx.repo &gt; /dev/null &lt;&lt;EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\n\n[nginx-mainline]\nname=nginx mainline repo\nbaseurl=http://nginx.org/packages/mainline/centos/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=0\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\nsudo yum install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from official Fedora repositories\nsudo dnf install -y nginx\n\n# Or from NGINX official repository\nsudo dnf install -y dnf-utils\nsudo tee /etc/yum.repos.d/nginx.repo &gt; /dev/null &lt;&lt;EOF\n[nginx-stable]\nname=nginx stable repo\nbaseurl=http://nginx.org/packages/fedora/\\$releasever/\\$basearch/\ngpgcheck=1\nenabled=1\ngpgkey=https://nginx.org/keys/nginx_signing.key\nmodule_hotfixes=true\nEOF\n\nsudo dnf install -y nginx\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from official repositories\nsudo pacman -Syu nginx\n\n# Or install nginx-mainline for latest version\nsudo pacman -S nginx-mainline\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesuse\" class=\"mobile-header\">openSUSE/SUSE</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y nginx\n\n# Enable and start NGINX\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX\nsudo apk update\nsudo apk add nginx\n\n# Create directories\nsudo mkdir -p /run/nginx\n\n# Enable and start NGINX\nsudo rc-update add nginx default\nsudo service nginx start</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Official NGINX Docker image\ndocker run -d \\\n  --name nginx \\\n  --restart unless-stopped \\\n  -p 80:80 \\\n  -p 443:443 \\\n  -v ~/nginx/conf:/etc/nginx/conf.d \\\n  -v ~/nginx/html:/usr/share/nginx/html \\\n  -v ~/nginx/certs:/etc/nginx/certs \\\n  nginx:latest\n\n# With Docker Compose\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\nservices:\n  nginx:\n    image: nginx:latest\n    restart: unless-stopped\n    ports:\n      - &quot;80:80&quot;\n      - &quot;443:443&quot;\n    volumes:\n      - ./conf:/etc/nginx/conf.d\n      - ./html:/usr/share/nginx/html\n      - ./certs:/etc/nginx/certs\n      - ./logs:/var/log/nginx\n    networks:\n      - webserver\n\nnetworks:\n  webserver:\n    driver: bridge\nEOF\n\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h3 id=\"source-compilation-advanced\" class=\"mobile-header\">Source Compilation (Advanced)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install build dependencies\n# Ubuntu/Debian\nsudo apt install -y build-essential libpcre3-dev libssl-dev zlib1g-dev libgd-dev libxml2-dev uuid-dev\n\n# RHEL/CentOS\nsudo yum groupinstall -y &quot;Development Tools&quot;\nsudo yum install -y pcre-devel openssl-devel zlib-devel gd-devel libxml2-devel libuuid-devel\n\n# Download NGINX source\ncd /tmp\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\ntar xzf nginx-1.24.0.tar.gz\ncd nginx-1.24.0\n\n# Configure with modules\n./configure \\\n  --prefix=/etc/nginx \\\n  --sbin-path=/usr/sbin/nginx \\\n  --modules-path=/usr/lib/nginx/modules \\\n  --conf-path=/etc/nginx/nginx.conf \\\n  --error-log-path=/var/log/nginx/error.log \\\n  --http-log-path=/var/log/nginx/access.log \\\n  --pid-path=/var/run/nginx.pid \\\n  --lock-path=/var/run/nginx.lock \\\n  --http-client-body-temp-path=/var/cache/nginx/client_temp \\\n  --http-proxy-temp-path=/var/cache/nginx/proxy_temp \\\n  --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \\\n  --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \\\n  --http-scgi-temp-path=/var/cache/nginx/scgi_temp \\\n  --with-perl_modules_path=/usr/lib/perl5/vendor_perl \\\n  --user=nginx \\\n  --group=nginx \\\n  --with-compat \\\n  --with-file-aio \\\n  --with-threads \\\n  --with-http_addition_module \\\n  --with-http_auth_request_module \\\n  --with-http_dav_module \\\n  --with-http_flv_module \\\n  --with-http_gunzip_module \\\n  --with-http_gzip_static_module \\\n  --with-http_mp4_module \\\n  --with-http_random_index_module \\\n  --with-http_realip_module \\\n  --with-http_secure_link_module \\\n  --with-http_slice_module \\\n  --with-http_ssl_module \\\n  --with-http_stub_status_module \\\n  --with-http_sub_module \\\n  --with-http_v2_module \\\n  --with-stream \\\n  --with-stream_realip_module \\\n  --with-stream_ssl_module \\\n  --with-stream_ssl_preread_module\n\n# Compile and install\nmake -j$(nproc)\nsudo make install\n\n# Create nginx user\nsudo useradd -r -d /var/cache/nginx -s /sbin/nologin nginx\n\n# Create systemd service\nsudo tee /etc/systemd/system/nginx.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/var/run/nginx.pid\nExecStartPre=/usr/sbin/nginx -t\nExecStart=/usr/sbin/nginx\nExecReload=/bin/kill -s HUP \\$MAINPID\nKillSignal=SIGQUIT\nTimeoutStopSec=5\nKillMode=mixed\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"optimized-main-configuration-etcnginxnginxconf\" class=\"mobile-header\">Optimized Main Configuration (/etc/nginx/nginx.conf)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production-ready nginx.conf\nsudo tee /etc/nginx/nginx.conf &gt; /dev/null &lt;&lt;EOF\n# Run as a unique, less privileged user for security reasons.\nuser nginx;\n\n# Sets the worker threads to the number of CPU cores available in the system for best performance.\nworker_processes auto;\n\n# Maximum number of open files per worker process.\nworker_rlimit_nofile 65535;\n\nerror_log /var/log/nginx/error.log crit;\npid /var/run/nginx.pid;\n\nevents {\n    # The maximum number of simultaneous connections that can be opened by a worker process.\n    worker_connections 1024;\n    \n    # Tells the worker to accept multiple connections at a time\n    multi_accept on;\n    \n    # Preferred connection method for newer linux versions\n    use epoll;\n}\n\nhttp {\n    # Hide nginx version information\n    server_tokens off;\n    \n    # Define the MIME types for files.\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    \n    # Security headers\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot; always;\n    add_header Content-Security-Policy &quot;default-src &#039;self&#039; http: https: data: blob: &#039;unsafe-inline&#039;&quot; always;\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n\n    # Speed up file transfers by using sendfile() to copy directly between descriptors\n    sendfile on;\n    \n    # Tell Nginx not to send out partial frames; this increases throughput\n    tcp_nopush on;\n    \n    # Tell Nginx to enable the Nagle buffering algorithm for TCP packets\n    tcp_nodelay on;\n    \n    # Compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_min_length 1000;\n    gzip_types\n        application/atom+xml\n        application/javascript\n        application/json\n        application/ld+json\n        application/manifest+json\n        application/rss+xml\n        application/vnd.geo+json\n        application/vnd.ms-fontobject\n        application/x-font-ttf\n        application/x-web-app-manifest+json\n        application/xhtml+xml\n        application/xml\n        font/opentype\n        image/bmp\n        image/svg+xml\n        image/x-icon\n        text/cache-manifest\n        text/css\n        text/plain\n        text/vcard\n        text/vnd.rim.location.xloc\n        text/vtt\n        text/x-component\n        text/x-cross-domain-policy;\n    \n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_req_zone \\$binary_remote_addr zone=api:10m rate=1r/s;\n    limit_conn_zone \\$binary_remote_addr zone=conn_limit_per_ip:10m;\n    \n    # Timeouts\n    client_body_timeout 12;\n    client_header_timeout 12;\n    keepalive_timeout 15;\n    send_timeout 10;\n    \n    # Size Limits &amp; Buffer Overflows\n    client_body_buffer_size 1k;\n    client_header_buffer_size 1k;\n    client_max_body_size 1m;\n    large_client_header_buffers 4 4k;\n    \n    # Log format\n    log_format main &#039;\\$remote_addr - \\$remote_user [\\$time_local] &quot;\\$request&quot; &#039;\n                    &#039;\\$status \\$body_bytes_sent &quot;\\$http_referer&quot; &#039;\n                    &#039;&quot;\\$http_user_agent&quot; &quot;\\$http_x_forwarded_for&quot;&#039;;\n                    \n    access_log /var/log/nginx/access.log main;\n    \n    # SSL Configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:10m;\n    ssl_session_timeout 10m;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n    \n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    resolver 8.8.8.8 8.8.4.4 valid=300s;\n    resolver_timeout 5s;\n\n    # Include additional configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-virtual-host-with-security\" class=\"mobile-header\">Advanced Virtual Host with Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production-ready virtual host\nsudo tee /etc/nginx/sites-available/secure-site.conf &gt; /dev/null &lt;&lt;EOF\n# Rate limiting\nlimit_req_zone \\$binary_remote_addr zone=\\${server_name}_ratelimit:10m rate=10r/s;\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name example.com www.example.com;\n    \n    # Security headers even for redirects\n    add_header X-Frame-Options &quot;DENY&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    \n    # Redirect all HTTP traffic to HTTPS\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name example.com www.example.com;\n    root /var/www/html/example.com;\n    index index.html index.htm index.php;\n\n    # SSL Configuration (2024 Best Practices)\n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;\n    \n    # Modern SSL configuration\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    \n    # SSL session caching\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets off;\n    \n    # OCSP stapling\n    ssl_stapling on;\n    ssl_stapling_verify on;\n    \n    # Security headers (2024 recommendations)\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains; preload&quot; always;\n    add_header X-Frame-Options &quot;DENY&quot; always;\n    add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n    add_header Content-Security-Policy &quot;default-src &#039;self&#039;; script-src &#039;self&#039; &#039;unsafe-inline&#039; &#039;unsafe-eval&#039;; style-src &#039;self&#039; &#039;unsafe-inline&#039;; img-src &#039;self&#039; data: https:; font-src &#039;self&#039; data:; connect-src &#039;self&#039;; media-src &#039;self&#039;; object-src &#039;none&#039;; child-src &#039;self&#039;; form-action &#039;self&#039;; base-uri &#039;self&#039;;&quot; always;\n    add_header Permissions-Policy &quot;camera=(), microphone=(), geolocation=()&quot; always;\n    \n    # Remove server signature\n    server_tokens off;\n    more_clear_headers Server;\n    \n    # Rate limiting\n    limit_req zone=\\${server_name}_ratelimit burst=20 nodelay;\n    limit_conn conn_limit_per_ip 20;\n    \n    # Main location block\n    location / {\n        try_files \\$uri \\$uri/ =404;\n        \n        # Security for static files\n        location ~* \\.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot)\\$ {\n            expires 1y;\n            add_header Cache-Control &quot;public, immutable&quot;;\n            access_log off;\n            \n            # Security headers for static files\n            add_header X-Content-Type-Options &quot;nosniff&quot; always;\n            add_header X-Frame-Options &quot;DENY&quot; always;\n        }\n    }\n    \n    # PHP processing (if needed)\n    location ~ \\.php\\$ {\n        include snippets/fastcgi-php.conf;\n        fastcgi_pass unix:/var/run/php/php8.2-fpm.sock;\n        fastcgi_param SCRIPT_FILENAME \\$document_root\\$fastcgi_script_name;\n        include fastcgi_params;\n        \n        # Security for PHP\n        fastcgi_hide_header X-Powered-By;\n        add_header X-Frame-Options &quot;DENY&quot; always;\n        add_header X-Content-Type-Options &quot;nosniff&quot; always;\n    }\n    \n    # Deny access to sensitive files\n    location ~ /\\. {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n    \n    location ~ ~\\$ {\n        deny all;\n        access_log off;\n        log_not_found off;\n    }\n    \n    # Block common exploits\n    location ~* /(wp-admin|wp-login|xmlrpc\\.php) {\n        deny all;\n        return 404;\n    }\n    \n    # Monitoring endpoint\n    location /nginx_status {\n        stub_status on;\n        allow 127.0.0.1;\n        allow ::1;\n        deny all;\n        access_log off;\n    }\n    \n    # Health check endpoint\n    location /health {\n        access_log off;\n        return 200 &quot;healthy\\n&quot;;\n        add_header Content-Type text/plain;\n    }\n    \n    # Block bots\n    location ~ /(wp-|wordpress|wp_) {\n        deny all;\n        return 404;\n    }\n    \n    error_page 404 /404.html;\n    error_page 500 502 503 504 /50x.html;\n    \n    location = /50x.html {\n        root /usr/share/nginx/html;\n    }\n}\n\n# Additional server block for www redirect\nserver {\n    listen 443 ssl http2;\n    listen [::]:443 ssl http2;\n    server_name www.example.com;\n    \n    ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;\n    \n    return 301 https://example.com\\$request_uri;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-security-hardening\" class=\"mobile-header\">Advanced Security Hardening</h2>\n<h3 id=\"generate-strong-dh-parameters\" class=\"mobile-header\">Generate Strong DH Parameters</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate 4096-bit DH parameters (takes time but more secure)\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 4096\n\n# Or 2048-bit for faster generation (still secure)\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048</code></pre>\n      </div>\n    </div>\n<h3 id=\"modsecurity-waf-installation\" class=\"mobile-header\">ModSecurity WAF Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ubuntu/Debian\nsudo apt install -y libmodsecurity3 libmodsecurity3-dev\n\n# Download and compile ModSecurity-nginx connector\ncd /tmp\ngit clone --depth 1 https://github.com/SpiderLabs/ModSecurity-nginx.git\nwget http://nginx.org/download/nginx-1.24.0.tar.gz\ntar xzf nginx-1.24.0.tar.gz\n\n# Compile nginx with ModSecurity\ncd nginx-1.24.0\n./configure --add-dynamic-module=../ModSecurity-nginx\nmake modules\n\n# Copy module\nsudo cp objs/ngx_http_modsecurity_module.so /usr/lib/nginx/modules/\n\n# Enable ModSecurity\necho &quot;load_module modules/ngx_http_modsecurity_module.so;&quot; | sudo tee -a /etc/nginx/nginx.conf\n\n# Download OWASP Core Rule Set\nsudo mkdir -p /etc/nginx/modsec\ncd /etc/nginx/modsec\nsudo wget https://github.com/coreruleset/coreruleset/archive/refs/tags/v3.3.4.tar.gz\nsudo tar xzf v3.3.4.tar.gz\nsudo mv coreruleset-3.3.4 /etc/nginx/modsec/crs\n\n# Create ModSecurity configuration\nsudo tee /etc/nginx/modsec/modsecurity.conf &gt; /dev/null &lt;&lt;EOF\nInclude /etc/nginx/modsec/crs/crs-setup.conf.example\nInclude /etc/nginx/modsec/crs/rules/*.conf\n\nSecRuleEngine On\nSecRequestBodyAccess On\nSecResponseBodyAccess On\nSecTmpDir /tmp/\nSecDataDir /etc/nginx/modsec/data/\nEOF\n\n# Enable in virtual host\nmodsecurity on;\nmodsecurity_rules_file /etc/nginx/modsec/modsecurity.conf;</code></pre>\n      </div>\n    </div>\n<h3 id=\"fail2ban-integration\" class=\"mobile-header\">Fail2Ban Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Fail2Ban\nsudo apt install -y fail2ban  # Ubuntu/Debian\nsudo yum install -y fail2ban  # RHEL/CentOS\n\n# Create NGINX filter for Fail2Ban\nsudo tee /etc/fail2ban/filter.d/nginx-req-limit.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = limiting requests, excess: .* by zone .*, client: &lt;HOST&gt;\nignoreregex =\nEOF\n\n# Create jail configuration\nsudo tee /etc/fail2ban/jail.d/nginx.conf &gt; /dev/null &lt;&lt;EOF\n[nginx-req-limit]\nenabled = true\nfilter = nginx-req-limit\naction = iptables-multiport[name=ReqLimit, port=&quot;http,https&quot;, protocol=tcp]\nlogpath = /var/log/nginx/error.log\nfindtime = 600\nbantime = 7200\nmaxretry = 10\n\n[nginx-noscript]\nenabled = true\nport = http,https\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 6\n\n[nginx-badbots]\nenabled = true\nport = http,https\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n[nginx-noproxy]\nenabled = true\nport = http,https\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nEOF\n\nsudo systemctl enable --now fail2ban</code></pre>\n      </div>\n    </div>\n<h2 id=\"ssltls-with-lets-encrypt-all-platforms\" class=\"mobile-header\">SSL/TLS with Let's Encrypt (All Platforms)</h2>\n<h3 id=\"automatic-ssl-setup\" class=\"mobile-header\">Automatic SSL Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot - Universal method\nsudo snap install core; sudo snap refresh core\nsudo snap install --classic certbot\nsudo ln -s /snap/bin/certbot /usr/bin/certbot\n\n# Alternative: Package manager installation\n# Ubuntu/Debian\nsudo apt install -y certbot python3-certbot-nginx\n\n# RHEL/CentOS (enable EPEL first)\nsudo yum install -y certbot python3-certbot-nginx\n\n# Fedora\nsudo dnf install -y certbot python3-certbot-nginx\n\n# Arch Linux\nsudo pacman -S certbot certbot-nginx\n\n# Obtain certificate\nsudo certbot --nginx -d example.com -d www.example.com\n\n# Auto-renewal setup (works on all distros)\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet &amp;&amp; systemctl reload nginx\n\n# Test auto-renewal\nsudo certbot renew --dry-run</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-ssl-configuration-self-signed-for-testing\" class=\"mobile-header\">Manual SSL Configuration (Self-signed for testing)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate self-signed certificate\nsudo mkdir -p /etc/ssl/private\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:4096 \\\n  -keyout /etc/ssl/private/nginx-selfsigned.key \\\n  -out /etc/ssl/certs/nginx-selfsigned.crt \\\n  -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=example.com&quot;\n\n# Create strong DH group\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n\n# Create SSL configuration snippet\nsudo tee /etc/nginx/snippets/self-signed.conf &gt; /dev/null &lt;&lt;EOF\nssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;\nssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;\nEOF\n\nsudo tee /etc/nginx/snippets/ssl-params.conf &gt; /dev/null &lt;&lt;EOF\nssl_protocols TLSv1.2 TLSv1.3;\nssl_prefer_server_ciphers on;\nssl_dhparam /etc/ssl/certs/dhparam.pem;\nssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;\nssl_ecdh_curve secp384r1;\nssl_session_timeout 10m;\nssl_session_cache shared:SSL:10m;\nssl_session_tickets off;\nssl_stapling on;\nssl_stapling_verify on;\nresolver 8.8.8.8 8.8.4.4 valid=300s;\nresolver_timeout 5s;\nadd_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;;\nadd_header X-Frame-Options DENY;\nadd_header X-Content-Type-Options nosniff;\nadd_header X-XSS-Protection &quot;1; mode=block&quot;;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration-all-platforms\" class=\"mobile-header\">Firewall Configuration (All Platforms)</h2>\n<h3 id=\"ufw-ubuntudebian\" class=\"mobile-header\">UFW (Ubuntu/Debian)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo ufw app list\nsudo ufw allow &#039;Nginx Full&#039;  # Allows both HTTP and HTTPS\nsudo ufw allow &#039;Nginx HTTP&#039;  # HTTP only\nsudo ufw allow &#039;Nginx HTTPS&#039; # HTTPS only\nsudo ufw enable\nsudo ufw status</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewalld-rhelcentosfedora\" class=\"mobile-header\">Firewalld (RHEL/CentOS/Fedora)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<h3 id=\"iptables-universal\" class=\"mobile-header\">iptables (Universal)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Allow HTTP and HTTPS\nsudo iptables -A INPUT -p tcp --dport 80 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 443 -j ACCEPT\n\n# Save rules (method varies by distro)\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save\n\n# Arch Linux\nsudo iptables-save &gt; /etc/iptables/iptables.rules</code></pre>\n      </div>\n    </div>\n<h3 id=\"selinux-configuration-rhelcentosfedora\" class=\"mobile-header\">SELinux Configuration (RHEL/CentOS/Fedora)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check SELinux status\ngetenforce\n\n# Set SELinux booleans for NGINX\nsudo setsebool -P httpd_can_network_connect 1\nsudo setsebool -P httpd_can_network_relay 1\nsudo setsebool -P httpd_execmem 1\n\n# Create SELinux policy for custom ports\nsudo semanage port -a -t http_port_t -p tcp 8080\n\n# Check SELinux denials\nsudo ausearch -m AVC,USER_AVC,SELINUX_ERR,USER_SELINUX_ERR -ts recent</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization-production\" class=\"mobile-header\">Performance Optimization (Production)</h2>\n<h3 id=\"system-level-optimizations\" class=\"mobile-header\">System-level Optimizations</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase system limits for NGINX\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;EOF\nnginx soft nofile 65535\nnginx hard nofile 65535\nEOF\n\n# Kernel parameters for high-traffic sites\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;EOF\n# Network tuning for NGINX\nnet.core.somaxconn = 65535\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.tcp_max_tw_buckets = 400000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 15000 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 16777216\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 65536 16777216\nnet.ipv4.tcp_wmem = 4096 65536 16777216\nfs.file-max = 100000\nEOF\n\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"worker-process-optimization\" class=\"mobile-header\">Worker Process Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Calculate optimal worker configuration\necho &quot;CPU cores: $(nproc)&quot;\necho &quot;Recommended worker_processes: auto (or $(nproc))&quot;\necho &quot;Recommended worker_connections: 1024-4096&quot;\n\n# Update main configuration\nsudo tee /etc/nginx/conf.d/performance.conf &gt; /dev/null &lt;&lt;EOF\n# Worker optimization\nworker_processes auto;\nworker_rlimit_nofile 65535;\nworker_cpu_affinity auto;\n\nevents {\n    worker_connections 4096;\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Connection optimization\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 30;\n    keepalive_requests 100;\n    reset_timedout_connection on;\n    \n    # Buffer optimization\n    client_body_buffer_size 128k;\n    client_max_body_size 10m;\n    client_header_buffer_size 1k;\n    large_client_header_buffers 4 4k;\n    output_buffers 1 32k;\n    postpone_output 1460;\n    \n    # Timeouts\n    client_header_timeout 3m;\n    client_body_timeout 3m;\n    send_timeout 3m;\n    \n    # Gzip optimization\n    gzip on;\n    gzip_vary on;\n    gzip_min_length 1000;\n    gzip_comp_level 6;\n    gzip_proxied any;\n    gzip_buffers 16 8k;\n    gzip_http_version 1.1;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"caching-configuration\" class=\"mobile-header\">Caching Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create caching configuration\nsudo tee /etc/nginx/conf.d/caching.conf &gt; /dev/null &lt;&lt;EOF\n# Proxy cache configuration\nproxy_cache_path /var/cache/nginx/proxy levels=1:2 keys_zone=my_cache:10m max_size=10g inactive=60m use_temp_path=off;\n\n# FastCGI cache configuration\nfastcgi_cache_path /var/cache/nginx/fastcgi levels=1:2 keys_zone=fastcgi_cache:10m max_size=10g inactive=60m use_temp_path=off;\n\n# Create cache directories\nsudo mkdir -p /var/cache/nginx/{proxy,fastcgi}\nsudo chown -R nginx:nginx /var/cache/nginx\nsudo chmod -R 755 /var/cache/nginx\n\n# Browser caching\nmap \\$sent_http_content_type \\$expires {\n    default                    off;\n    text/html                  epoch;\n    text/css                   max;\n    application/javascript     max;\n    ~image/                    1y;\n    ~font/                     1y;\n    application/pdf            1y;\n}\n\nexpires \\$expires;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"cross-platform-verification-commands\" class=\"mobile-header\">Cross-Platform Verification Commands</h2>\n<h3 id=\"service-management-all-distributions\" class=\"mobile-header\">Service Management (All Distributions)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># SystemD (Most modern distros)\nsudo systemctl status nginx\nsudo systemctl start nginx\nsudo systemctl stop nginx\nsudo systemctl restart nginx\nsudo systemctl reload nginx\n\n# Check if systemd is available\nif command -v systemctl &amp;&gt; /dev/null; then\n    echo &quot;Using systemd&quot;\n    sudo systemctl enable --now nginx\nelse\n    echo &quot;Using traditional init&quot;\n    # For older systems or Alpine\n    sudo service nginx start\n    sudo chkconfig nginx on  # RHEL/CentOS 6\n    sudo rc-update add nginx default  # Alpine\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"configuration-testing-universal\" class=\"mobile-header\">Configuration Testing (Universal)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test configuration syntax\nsudo nginx -t\n\n# Test specific configuration file\nsudo nginx -t -c /etc/nginx/nginx.conf\n\n# Check configuration details\nsudo nginx -T\n\n# Show version and build info\nnginx -v\nnginx -V\n\n# Show loaded modules\nnginx -V 2&gt;&amp;1 | grep -o with-[a-z_]*</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-management-cross-platform\" class=\"mobile-header\">Log Management (Cross-Platform)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation configuration (works on all distros)\nsudo tee /etc/logrotate.d/nginx &gt; /dev/null &lt;&lt;EOF\n/var/log/nginx/*.log {\n    daily\n    missingok\n    rotate 52\n    compress\n    delaycompress\n    notifempty\n    create 644 nginx nginx\n    postrotate\n        if [ -f /var/run/nginx.pid ]; then\n            kill -USR1 \\`cat /var/run/nginx.pid\\`\n        fi\n    endscript\n}\nEOF\n\n# Manual log rotation test\nsudo logrotate -d /etc/logrotate.d/nginx\nsudo logrotate -f /etc/logrotate.d/nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-monitoring-universal\" class=\"mobile-header\">Performance Monitoring (Universal)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor NGINX processes\nps aux | grep nginx\nhtop -p $(pgrep nginx | tr &#039;\\n&#039; &#039;,&#039; | sed &#039;s/,$//&#039;)\n\n# Check connection statistics\nsudo netstat -tulpn | grep nginx\nsudo ss -tulpn | grep nginx\n\n# Monitor real-time connections\nwhile true; do echo &quot;$(date): $(sudo netstat -an | grep :80 | wc -l) connections&quot;; sleep 5; done\n\n# Check worker process CPU usage\ntop -p $(pgrep nginx | head -1)\n\n# Monitor access patterns\nsudo tail -f /var/log/nginx/access.log | cut -d&#039; &#039; -f1 | sort | uniq -c | sort -nr</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Permission denied errors (SELinux/AppArmor)\n# RHEL/CentOS with SELinux\nsudo setsebool -P httpd_can_network_connect 1\nsudo chcon -Rt httpd_exec_t /usr/sbin/nginx\n\n# Ubuntu with AppArmor\nsudo aa-complain /usr/sbin/nginx\n\n# File permission issues\nsudo chown -R nginx:nginx /var/www/html  # RHEL/CentOS\nsudo chown -R www-data:www-data /var/www/html  # Ubuntu/Debian\n\n# Check file contexts (SELinux)\nls -laZ /var/www/html/\nsudo restorecon -Rv /var/www/html/\n\n# Port binding issues\nsudo lsof -i :80\nsudo netstat -tulpn | grep :80\n\n# Configuration syntax errors\nsudo nginx -t\nsudo journalctl -u nginx -f\n\n# Memory issues\nfree -h\nsudo systemctl status nginx\nps aux --sort=-%mem | grep nginx\n\n# Check for core dumps\nfind /var/crash -name &quot;nginx*&quot; 2&gt;/dev/null\nfind /var/lib/systemd/coredump -name &quot;*nginx*&quot; 2&gt;/dev/null</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode-and-logging\" class=\"mobile-header\">Debug Mode and Logging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nsudo nano /etc/nginx/nginx.conf\n# Change: error_log /var/log/nginx/error.log debug;\n\n# Test in foreground (debugging)\nsudo nginx -g &#039;daemon off;&#039;\n\n# Check which user nginx is running as\nps aux | grep nginx\n\n# Verify listening addresses\nsudo nginx -T | grep listen\n\n# Check loaded modules\nnginx -V 2&gt;&amp;1 | tr &#039; &#039; &#039;\\n&#039; | grep module\n\n# Test configuration with different user\nsudo -u nginx nginx -t</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">This updated nginx guide now includes:</p>\n<li class=\"mobile-list-item\">✅ <strong>Cross-platform support</strong> (Ubuntu, Debian, RHEL, CentOS, Rocky, Fedora, Arch, openSUSE, Alpine)</li>\n<li class=\"mobile-list-item\">✅ <strong>Complete security hardening</strong> (2024 best practices, ModSecurity WAF, Fail2Ban)</li>\n<li class=\"mobile-list-item\">✅ <strong>Performance optimization</strong> (system tuning, caching, worker optimization)</li>\n<li class=\"mobile-list-item\">✅ <strong>SSL/TLS configuration</strong> (Let's Encrypt, self-signed, modern ciphers)</li>\n<li class=\"mobile-list-item\">✅ <strong>Comprehensive troubleshooting</strong> (SELinux, AppArmor, cross-platform debugging)</li>\n<p class=\"mobile-paragraph\">Should I continue updating the other guides with this same level of comprehensive cross-platform coverage?</p>","readTime":"15 min","wordCount":2979,"lastBuilt":"2025-09-14T00:58:26.620Z"},{"name":"traefik","displayName":"Traefik","slug":"traefik","description":"Repo for traefik","category":"web-server","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/traefik","updatedAt":"2025-09-08T03:17:15Z","createdAt":"2025-09-08T03:17:04Z","readmeRaw":"## 👋 Welcome to traefik 🚀  \n\ntraefik README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-traefik\" class=\"mobile-header\">👋 Welcome to traefik 🚀  </h2>\n<p class=\"mobile-paragraph\">traefik README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T00:58:22.542Z"}]},"__N_SSG":true}