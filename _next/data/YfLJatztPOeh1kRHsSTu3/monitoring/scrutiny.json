{"pageProps":{"guide":{"name":"scrutiny","displayName":"Scrutiny Installation Guide","slug":"scrutiny","description":"Scrutiny is a free and open-source S.M.A.R.T. disk monitoring tool that provides web-based dashboards, alerting, and historical data analysis for hard drive health. It serves as a FOSS alternative to proprietary disk monitoring solutions like CrystalDiskInfo or Hard Disk Sentinel, offering comprehensive disk health monitoring with proactive failure detection.","category":"monitoring","subcategory":"disk-monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"20-40 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","fedora","macos","windows"],"defaultPorts":[8080,8086],"installationMethods":["docker-compose","binary-download","native-packages"],"features":["multi-os-support","smart-monitoring","web-dashboard","historical-data","alerting","multi-host","docker-support","influxdb-integration","notification-channels","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["smart","disk-monitoring","hard-drive-health","storage-monitoring","alerting","dashboard","ssd-monitoring","hdd-monitoring","failure-prediction"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"MIT","websiteUrl":"https://howtomgr.github.io/monitoring/scrutiny","documentationUrl":"https://howtomgr.github.io/monitoring/scrutiny","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/scrutiny","updatedAt":"2025-09-16T17:50:36Z","createdAt":"2025-09-16T11:02:19Z","readmeRaw":"# Scrutiny Installation Guide\n\nScrutiny is a free and open-source S.M.A.R.T. disk monitoring tool that provides web-based dashboards, alerting, and historical data analysis for hard drive health. It serves as a FOSS alternative to proprietary disk monitoring solutions like CrystalDiskInfo, Hard Disk Sentinel, or enterprise storage monitoring tools, offering comprehensive disk health monitoring with beautiful visualizations and proactive failure detection.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n### Hardware Requirements\n- **CPU**: 1+ cores\n- **RAM**: 512MB minimum (1GB+ recommended)\n- **Storage**: 100MB for application, additional for metrics storage\n- **Disks**: SATA, NVMe, or SAS drives with S.M.A.R.T. support\n\n### Software Requirements\n- **smartctl**: smartmontools package for S.M.A.R.T. data collection\n- **Docker**: Optional for containerized deployment\n- **Database**: SQLite (built-in) or InfluxDB for metrics storage\n\n### Network Requirements\n- **Ports**: \n  - 8080: Web interface (default)\n  - 8086: InfluxDB (if used)\n\n## 2. Supported Operating Systems\n\nScrutiny officially supports:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS\n- Arch Linux\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- Fedora 38+\n- macOS 12+ (limited S.M.A.R.T. support)\n- Windows 10/11 (via WSL2 or native)\n\n## 3. Installation\n\n### Method 1: Docker Compose (Recommended)\n\n#### All Linux Distributions\n\n```bash\n# Install Docker and Docker Compose\n# For RHEL/CentOS/Rocky/AlmaLinux:\nsudo dnf install -y docker docker-compose\nsudo systemctl enable --now docker\n\n# For Debian/Ubuntu:\nsudo apt update\nsudo apt install -y docker.io docker-compose\nsudo systemctl enable --now docker\n\n# For Arch Linux:\nsudo pacman -S docker docker-compose\nsudo systemctl enable --now docker\n\n# Add user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Create Scrutiny directory\nmkdir -p ~/scrutiny\ncd ~/scrutiny\n\n# Create docker-compose.yml\ncat > docker-compose.yml << 'EOF'\nversion: '3.8'\n\nservices:\n  scrutiny:\n    image: ghcr.io/analogj/scrutiny:master-omnibus\n    container_name: scrutiny\n    cap_add:\n      - SYS_RAWIO\n      - SYS_ADMIN\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - /run/udev:/run/udev:ro\n      - ./config:/opt/scrutiny/config\n      - ./influxdb:/opt/scrutiny/influxdb\n    devices:\n      - /dev/sda\n      - /dev/sdb\n      - /dev/nvme0n1\n    environment:\n      - SCRUTINY_WEB_LISTEN_PORT=8080\n      - SCRUTINY_WEB_LISTEN_HOST=0.0.0.0\n    restart: unless-stopped\nEOF\n\n# Start Scrutiny\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\ndocker-compose logs scrutiny\n```\n\n### Method 2: Native Installation\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install dependencies\nsudo dnf install -y smartmontools wget curl\n\n# Download Scrutiny binary\nSCRUTINY_VERSION=\"0.7.3\"  # Check latest version\nwget \"https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-web-linux-amd64\"\nwget \"https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-collector-metrics-linux-amd64\"\n\n# Install binaries\nsudo mv scrutiny-web-linux-amd64 /usr/local/bin/scrutiny-web\nsudo mv scrutiny-collector-metrics-linux-amd64 /usr/local/bin/scrutiny-collector-metrics\nsudo chmod +x /usr/local/bin/scrutiny-*\n\n# Create scrutiny user\nsudo useradd -r -s /bin/false -d /opt/scrutiny scrutiny\n\n# Create directories\nsudo mkdir -p /opt/scrutiny/{config,data}\nsudo chown -R scrutiny:scrutiny /opt/scrutiny\n\n# Create configuration\nsudo tee /opt/scrutiny/config/scrutiny.yaml > /dev/null << 'EOF'\nversion: 1\n\nweb:\n  listen:\n    port: 8080\n    host: 0.0.0.0\n  database:\n    location: /opt/scrutiny/data/scrutiny.db\n  src:\n    frontend:\n      path: ./dist\n\nlog:\n  level: INFO\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/scrutiny-web.service > /dev/null << 'EOF'\n[Unit]\nDescription=Scrutiny Web Dashboard\nAfter=network.target\n\n[Service]\nType=simple\nUser=scrutiny\nGroup=scrutiny\nExecStart=/usr/local/bin/scrutiny-web start --config /opt/scrutiny/config/scrutiny.yaml\nWorkingDirectory=/opt/scrutiny\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now scrutiny-web\n```\n\n#### Debian/Ubuntu\n\n```bash\n# Update system and install dependencies\nsudo apt update\nsudo apt install -y smartmontools wget curl\n\n# Download and install Scrutiny\nSCRUTINY_VERSION=\"0.7.3\"\nwget \"https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-web-linux-amd64\"\nwget \"https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-collector-metrics-linux-amd64\"\n\nsudo mv scrutiny-web-linux-amd64 /usr/local/bin/scrutiny-web\nsudo mv scrutiny-collector-metrics-linux-amd64 /usr/local/bin/scrutiny-collector-metrics\nsudo chmod +x /usr/local/bin/scrutiny-*\n\n# Create user and directories\nsudo useradd -r -s /bin/false -d /opt/scrutiny scrutiny\nsudo mkdir -p /opt/scrutiny/{config,data}\nsudo chown -R scrutiny:scrutiny /opt/scrutiny\n\n# Install configuration (same as RHEL above)\n# Install systemd service (same as RHEL above)\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now scrutiny-web\n```\n\n#### Arch Linux\n\n```bash\n# Install from AUR\nyay -S scrutiny-bin\n\n# Or install dependencies and manual setup\nsudo pacman -S smartmontools\n\n# Follow manual installation steps\n# (Same binary download and setup as above)\n```\n\n#### Alpine Linux\n\n```bash\n# Install dependencies\napk add --no-cache smartmontools wget\n\n# Download Scrutiny binaries\nSCRUTINY_VERSION=\"0.7.3\"\nwget \"https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-web-linux-amd64\"\nwget \"https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-collector-metrics-linux-amd64\"\n\nmv scrutiny-web-linux-amd64 /usr/local/bin/scrutiny-web\nmv scrutiny-collector-metrics-linux-amd64 /usr/local/bin/scrutiny-collector-metrics\nchmod +x /usr/local/bin/scrutiny-*\n\n# Create OpenRC service\ntee /etc/init.d/scrutiny-web > /dev/null << 'EOF'\n#!/sbin/openrc-run\n\ndescription=\"Scrutiny Web Dashboard\"\ncommand=\"/usr/local/bin/scrutiny-web\"\ncommand_args=\"start --config /opt/scrutiny/config/scrutiny.yaml\"\ncommand_user=\"scrutiny\"\ncommand_group=\"scrutiny\"\npidfile=\"/run/scrutiny-web.pid\"\ncommand_background=\"yes\"\n\ndepend() {\n    need net\n    after firewall\n}\n\nstart_pre() {\n    checkpath --directory --owner scrutiny:scrutiny --mode 0755 /opt/scrutiny/data\n}\nEOF\n\nchmod +x /etc/init.d/scrutiny-web\nrc-update add scrutiny-web default\nrc-service scrutiny-web start\n```\n\n### Method 3: Metrics Collector Setup\n\n```bash\n# Create collector configuration\nsudo tee /opt/scrutiny/config/collector.yaml > /dev/null << 'EOF'\nversion: 1\n\nhost:\n  id: \"\"\n\napi:\n  endpoint: \"http://localhost:8080\"\n\nlog:\n  level: INFO\n\ncommands:\n  metrics_scan_interval: 15m\nEOF\n\n# Create collector systemd service\nsudo tee /etc/systemd/system/scrutiny-collector.service > /dev/null << 'EOF'\n[Unit]\nDescription=Scrutiny Collector\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nExecStart=/usr/local/bin/scrutiny-collector-metrics run --config /opt/scrutiny/config/collector.yaml\nRestart=always\nRestartSec=60\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now scrutiny-collector\n```\n\n## 4. Configuration\n\n### Web Dashboard Configuration\n\nEdit `/opt/scrutiny/config/scrutiny.yaml`:\n```yaml\nversion: 1\n\nweb:\n  listen:\n    port: 8080\n    host: 0.0.0.0\n  \n  database:\n    location: /opt/scrutiny/data/scrutiny.db\n  \n  influxdb:\n    host: localhost\n    port: 8086\n    token: \"\"\n    org: \"\"\n    bucket: \"metrics\"\n    retention_policy: \"\"\n\nnotify:\n  urls:\n    - \"discord://webhook_id/webhook_token\"\n    - \"slack://webhook_url\"\n    - \"smtp://username:password@host:port/?to=user@example.com\"\n\nlog:\n  level: INFO\n  file: \"/opt/scrutiny/data/web.log\"\n```\n\n### Collector Configuration\n\nEdit `/opt/scrutiny/config/collector.yaml`:\n```yaml\nversion: 1\n\nhost:\n  id: \"\"\n\napi:\n  endpoint: \"http://localhost:8080\"\n\ncommands:\n  metrics_scan_interval: 15m\n  \ndevices:\n  include:\n    - /dev/sd*\n    - /dev/nvme*\n  exclude:\n    - /dev/loop*\n    - /dev/sr*\n\nlog:\n  level: INFO\n  file: \"/opt/scrutiny/data/collector.log\"\n```\n\n### Notification Setup\n\n```yaml\n# Discord Webhook\nnotify:\n  urls:\n    - \"discord://webhook_id/webhook_token?username=Scrutiny\"\n\n# Slack Webhook\nnotify:\n  urls:\n    - \"slack://webhook_url\"\n\n# Email SMTP\nnotify:\n  urls:\n    - \"smtp://user:pass@smtp.gmail.com:587/?to=admin@example.com&subject=Scrutiny%20Alert\"\n\n# Multiple notifications\nnotify:\n  urls:\n    - \"discord://webhook_id/webhook_token\"\n    - \"smtp://user:pass@smtp.gmail.com:587/?to=admin@example.com\"\n```\n\n## 5. Service Management\n\n### systemd Management\n\n```bash\n# Web dashboard\nsudo systemctl start scrutiny-web\nsudo systemctl stop scrutiny-web\nsudo systemctl restart scrutiny-web\nsudo systemctl status scrutiny-web\nsudo systemctl enable scrutiny-web\n\n# Collector\nsudo systemctl start scrutiny-collector\nsudo systemctl stop scrutiny-collector\nsudo systemctl restart scrutiny-collector\nsudo systemctl status scrutiny-collector\n\n# View logs\nsudo journalctl -u scrutiny-web -f\nsudo journalctl -u scrutiny-collector -f\n```\n\n### Docker Management\n\n```bash\n# Start/stop services\ndocker-compose up -d\ndocker-compose down\ndocker-compose restart\n\n# View logs\ndocker-compose logs -f scrutiny\n\n# Update to latest version\ndocker-compose pull\ndocker-compose up -d\n```\n\n### Manual Operations\n\n```bash\n# Run one-time disk scan\nsudo /usr/local/bin/scrutiny-collector-metrics run --config /opt/scrutiny/config/collector.yaml\n\n# Test SMART data collection\nsudo smartctl -a /dev/sda\nsudo smartctl -H /dev/nvme0n1\n\n# Force metrics collection\ncurl -X POST http://localhost:8080/api/health/notify\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **No disks detected**:\n```bash\n# Check if smartctl can detect disks\nsudo smartctl --scan\n\n# Verify disk permissions\nls -la /dev/sd* /dev/nvme*\n\n# Check if disks support SMART\nsudo smartctl -i /dev/sda\nsudo smartctl -c /dev/sda\n```\n\n2. **Permission errors**:\n```bash\n# Ensure scrutiny user has access to disks\nsudo usermod -a -G disk scrutiny\n\n# For Docker, check device mapping\ndocker-compose exec scrutiny smartctl --scan\n\n# Check udev rules\nls -la /run/udev\n```\n\n3. **Web interface not accessible**:\n```bash\n# Check if service is running\nsudo systemctl status scrutiny-web\n\n# Verify port binding\nsudo netstat -tlnp | grep 8080\n\n# Check firewall\nsudo firewall-cmd --list-ports\nsudo ufw status\n```\n\n4. **Database issues**:\n```bash\n# Check database permissions\nls -la /opt/scrutiny/data/scrutiny.db\n\n# Verify SQLite installation\nsqlite3 --version\n\n# Check database integrity\nsqlite3 /opt/scrutiny/data/scrutiny.db \"PRAGMA integrity_check;\"\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging in configuration\nlog:\n  level: DEBUG\n\n# Run collector manually with debug\nsudo /usr/local/bin/scrutiny-collector-metrics run \\\n    --config /opt/scrutiny/config/collector.yaml \\\n    --log-level DEBUG\n\n# Check SMART test results\nsudo smartctl -l selftest /dev/sda\n```\n\n## 7. Security Considerations\n\n### Access Control\n\n```bash\n# Bind to localhost only (behind reverse proxy)\nweb:\n  listen:\n    port: 8080\n    host: 127.0.0.1\n\n# Configure reverse proxy with authentication\n# nginx example:\nlocation /scrutiny {\n    auth_basic \"Scrutiny Access\";\n    auth_basic_user_file /etc/nginx/.htpasswd;\n    proxy_pass http://127.0.0.1:8080;\n}\n```\n\n### Firewall Configuration\n\n```bash\n# firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 8080/tcp\nsudo ufw enable\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 8080 -j ACCEPT\n```\n\n### File Permissions\n\n```bash\n# Secure configuration files\nsudo chmod 640 /opt/scrutiny/config/*.yaml\nsudo chown scrutiny:scrutiny /opt/scrutiny/config/*.yaml\n\n# Secure data directory\nsudo chmod 750 /opt/scrutiny/data\nsudo chown -R scrutiny:scrutiny /opt/scrutiny/data\n```\n\n### SSL/TLS Setup\n\n```nginx\n# nginx reverse proxy with SSL\nserver {\n    listen 443 ssl;\n    server_name scrutiny.example.com;\n    \n    ssl_certificate /etc/ssl/certs/scrutiny.crt;\n    ssl_certificate_key /etc/ssl/private/scrutiny.key;\n    \n    location / {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n## 8. Performance Tuning\n\n### Collector Optimization\n\n```yaml\n# Adjust scan intervals based on needs\ncommands:\n  metrics_scan_interval: 30m  # Longer intervals for less load\n  \n# Exclude unnecessary devices\ndevices:\n  exclude:\n    - /dev/loop*\n    - /dev/sr*\n    - /dev/ram*\n```\n\n### Database Optimization\n\n```bash\n# Optimize SQLite database\nsqlite3 /opt/scrutiny/data/scrutiny.db \"VACUUM;\"\nsqlite3 /opt/scrutiny/data/scrutiny.db \"ANALYZE;\"\n\n# Set SQLite performance pragmas\nsqlite3 /opt/scrutiny/data/scrutiny.db \"PRAGMA journal_mode = WAL;\"\nsqlite3 /opt/scrutiny/data/scrutiny.db \"PRAGMA synchronous = NORMAL;\"\n```\n\n### System Resource Optimization\n\n```bash\n# Limit memory usage for Docker\ndocker-compose.yml:\nservices:\n  scrutiny:\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n        reservations:\n          memory: 256M\n\n# CPU limits\n    deploy:\n      resources:\n        limits:\n          cpus: '1.0'\n```\n\n## 9. Backup and Restore\n\n### Database Backup\n\n```bash\n#!/bin/bash\n# backup-scrutiny-db.sh\n\nBACKUP_DIR=\"/var/backups/scrutiny\"\nDATE=$(date +%Y%m%d_%H%M%S)\nDB_PATH=\"/opt/scrutiny/data/scrutiny.db\"\n\nmkdir -p $BACKUP_DIR\n\n# Stop service for consistent backup\nsudo systemctl stop scrutiny-web\n\n# Backup database\nsudo cp $DB_PATH $BACKUP_DIR/scrutiny_db_$DATE.db\n\n# Compress backup\ngzip $BACKUP_DIR/scrutiny_db_$DATE.db\n\n# Start service\nsudo systemctl start scrutiny-web\n\necho \"Database backup completed: $BACKUP_DIR/scrutiny_db_$DATE.db.gz\"\n```\n\n### Configuration Backup\n\n```bash\n#!/bin/bash\n# backup-scrutiny-config.sh\n\nBACKUP_DIR=\"/var/backups/scrutiny\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup configuration\ntar -czf $BACKUP_DIR/scrutiny_config_$DATE.tar.gz \\\n    /opt/scrutiny/config/ \\\n    /etc/systemd/system/scrutiny*.service\n\necho \"Configuration backup completed\"\n```\n\n### Automated Backup\n\n```bash\n# Add to crontab\nsudo crontab -e\n\n# Daily database backup at 2 AM\n0 2 * * * /opt/scrutiny/scripts/backup-scrutiny-db.sh\n\n# Weekly configuration backup\n0 3 * * 0 /opt/scrutiny/scripts/backup-scrutiny-config.sh\n```\n\n### Restore Procedures\n\n```bash\n# Restore database\nsudo systemctl stop scrutiny-web\nsudo cp scrutiny_db_backup.db /opt/scrutiny/data/scrutiny.db\nsudo chown scrutiny:scrutiny /opt/scrutiny/data/scrutiny.db\nsudo systemctl start scrutiny-web\n\n# Restore configuration\nsudo tar -xzf scrutiny_config_backup.tar.gz -C /\nsudo systemctl daemon-reload\nsudo systemctl restart scrutiny-web scrutiny-collector\n```\n\n## 10. System Requirements\n\n### Minimum Requirements\n- **CPU**: 1 core\n- **RAM**: 512MB\n- **Storage**: 100MB + metrics storage\n- **Disks**: SMART-enabled drives\n\n### Recommended Requirements\n- **CPU**: 2+ cores\n- **RAM**: 1GB+\n- **Storage**: 1GB+ SSD for database\n- **Network**: Fast local network for multi-host setup\n\n### Scaling Guidelines\n- **Per disk**: ~1MB metrics data per day\n- **Retention**: Plan storage for historical data\n- **Collection frequency**: Balance between monitoring granularity and system load\n\n## 11. Support\n\n### Official Resources\n- **GitHub**: https://github.com/AnalogJ/scrutiny\n- **Documentation**: https://github.com/AnalogJ/scrutiny/blob/master/README.md\n- **Releases**: https://github.com/AnalogJ/scrutiny/releases\n\n### Community Support\n- **GitHub Issues**: https://github.com/AnalogJ/scrutiny/issues\n- **Discussions**: https://github.com/AnalogJ/scrutiny/discussions\n- **Reddit**: r/selfhosted\n\n## 12. Contributing\n\n### How to Contribute\n1. Fork the repository on GitHub\n2. Create a feature branch\n3. Submit pull request\n4. Follow Go and Angular coding standards\n5. Include tests and documentation\n\n### Development Setup\n```bash\n# Clone repository\ngit clone https://github.com/AnalogJ/scrutiny.git\ncd scrutiny\n\n# Install dependencies\ngo mod download\nnpm install\n\n# Build frontend\nnpm run build\n\n# Build backend\ngo build\n```\n\n## 13. License\n\nScrutiny is licensed under the MIT License.\n\nKey points:\n- Free to use, modify, and distribute\n- Commercial use allowed\n- No warranty provided\n- Attribution required\n\n## 14. Acknowledgments\n\n### Credits\n- **AnalogJ**: Creator and primary developer\n- **Community Contributors**: Feature development and testing\n- **smartmontools**: S.M.A.R.T. data collection foundation\n- **InfluxDB**: Time-series database support\n\n## 15. Version History\n\n### Recent Releases\n- **v0.7.x**: Latest stable with enhanced UI\n- **v0.6.x**: Added notification support\n- **v0.5.x**: Improved collector architecture\n\n### Major Features by Version\n- **v0.7**: Enhanced dashboard, better device detection\n- **v0.6**: Multiple notification channels\n- **v0.5**: Collector/dashboard separation\n\n## 16. Appendices\n\n### A. SMART Attribute Reference\n\nCommon SMART attributes monitored:\n- **01**: Read Error Rate\n- **05**: Reallocated Sectors Count\n- **09**: Power-On Hours\n- **0A**: Spin Retry Count\n- **0C**: Power Cycle Count\n- **C4**: Reallocation Event Count\n- **C5**: Current Pending Sector Count\n- **C6**: Uncorrectable Sector Count\n\n### B. API Usage Examples\n\n```bash\n# Get device list\ncurl http://localhost:8080/api/devices\n\n# Get device details\ncurl http://localhost:8080/api/device/{device_id}\n\n# Force metrics collection\ncurl -X POST http://localhost:8080/api/device/{device_id}/smart/scan\n\n# Get device smart data\ncurl http://localhost:8080/api/device/{device_id}/smart\n```\n\n### C. Integration Examples\n\n#### Prometheus Metrics Export\n```yaml\n# Add to docker-compose.yml\nservices:\n  scrutiny:\n    environment:\n      - SCRUTINY_WEB_INFLUXDB_INIT_USERNAME=admin\n      - SCRUTINY_WEB_INFLUXDB_INIT_PASSWORD=password123\n      - SCRUTINY_WEB_INFLUXDB_INIT_ORG=scrutiny\n      - SCRUTINY_WEB_INFLUXDB_INIT_BUCKET=metrics\n```\n\n### D. Multi-Host Setup\n\n```yaml\n# Central collector configuration\napi:\n  endpoint: \"http://scrutiny-central:8080\"\n\n# Host-specific collector setup\nhost:\n  id: \"storage-server-1\"\n```\n\n---\n\nFor more information and updates, visit https://github.com/howtomgr/scrutiny","readmeHtml":"<p class=\"mobile-paragraph\">Scrutiny is a free and open-source S.M.A.R.T. disk monitoring tool that provides web-based dashboards, alerting, and historical data analysis for hard drive health. It serves as a FOSS alternative to proprietary disk monitoring solutions like CrystalDiskInfo, Hard Disk Sentinel, or enterprise storage monitoring tools, offering comprehensive disk health monitoring with beautiful visualizations and proactive failure detection.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<h3 id=\"hardware-requirements\" class=\"mobile-header\">Hardware Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 1+ cores</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 512MB minimum (1GB+ recommended)</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 100MB for application, additional for metrics storage</li>\n<li class=\"mobile-list-item\"><strong>Disks</strong>: SATA, NVMe, or SAS drives with S.M.A.R.T. support</li>\n<h3 id=\"software-requirements\" class=\"mobile-header\">Software Requirements</h3>\n<li class=\"mobile-list-item\"><strong>smartctl</strong>: smartmontools package for S.M.A.R.T. data collection</li>\n<li class=\"mobile-list-item\"><strong>Docker</strong>: Optional for containerized deployment</li>\n<li class=\"mobile-list-item\"><strong>Database</strong>: SQLite (built-in) or InfluxDB for metrics storage</li>\n<h3 id=\"network-requirements\" class=\"mobile-header\">Network Requirements</h3>\n<li class=\"mobile-list-item\"><strong>Ports</strong>: </li>\n<li class=\"mobile-list-item\">8080: Web interface (default)</li>\n<li class=\"mobile-list-item\">8086: InfluxDB (if used)</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">Scrutiny officially supports:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04 LTS / 22.04 LTS / 24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">Fedora 38+</li>\n<li class=\"mobile-list-item\">macOS 12+ (limited S.M.A.R.T. support)</li>\n<li class=\"mobile-list-item\">Windows 10/11 (via WSL2 or native)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"method-1-docker-compose-recommended\" class=\"mobile-header\">Method 1: Docker Compose (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### All Linux Distributions</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker and Docker Compose\n# For RHEL/CentOS/Rocky/AlmaLinux:\nsudo dnf install -y docker docker-compose\nsudo systemctl enable --now docker\n\n# For Debian/Ubuntu:\nsudo apt update\nsudo apt install -y docker.io docker-compose\nsudo systemctl enable --now docker\n\n# For Arch Linux:\nsudo pacman -S docker docker-compose\nsudo systemctl enable --now docker\n\n# Add user to docker group\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Create Scrutiny directory\nmkdir -p ~/scrutiny\ncd ~/scrutiny\n\n# Create docker-compose.yml\ncat &gt; docker-compose.yml &lt;&lt; &#039;EOF&#039;\nversion: &#039;3.8&#039;\n\nservices:\n  scrutiny:\n    image: ghcr.io/analogj/scrutiny:master-omnibus\n    container_name: scrutiny\n    cap_add:\n      - SYS_RAWIO\n      - SYS_ADMIN\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - /run/udev:/run/udev:ro\n      - ./config:/opt/scrutiny/config\n      - ./influxdb:/opt/scrutiny/influxdb\n    devices:\n      - /dev/sda\n      - /dev/sdb\n      - /dev/nvme0n1\n    environment:\n      - SCRUTINY_WEB_LISTEN_PORT=8080\n      - SCRUTINY_WEB_LISTEN_HOST=0.0.0.0\n    restart: unless-stopped\nEOF\n\n# Start Scrutiny\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\ndocker-compose logs scrutiny</code></pre>\n      </div>\n    </div>\n<h3 id=\"method-2-native-installation\" class=\"mobile-header\">Method 2: Native Installation</h3>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\nsudo dnf install -y smartmontools wget curl\n\n# Download Scrutiny binary\nSCRUTINY_VERSION=&quot;0.7.3&quot;  # Check latest version\nwget &quot;https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-web-linux-amd64&quot;\nwget &quot;https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-collector-metrics-linux-amd64&quot;\n\n# Install binaries\nsudo mv scrutiny-web-linux-amd64 /usr/local/bin/scrutiny-web\nsudo mv scrutiny-collector-metrics-linux-amd64 /usr/local/bin/scrutiny-collector-metrics\nsudo chmod +x /usr/local/bin/scrutiny-*\n\n# Create scrutiny user\nsudo useradd -r -s /bin/false -d /opt/scrutiny scrutiny\n\n# Create directories\nsudo mkdir -p /opt/scrutiny/{config,data}\nsudo chown -R scrutiny:scrutiny /opt/scrutiny\n\n# Create configuration\nsudo tee /opt/scrutiny/config/scrutiny.yaml &gt; /dev/null &lt;&lt; &#039;EOF&#039;\nversion: 1\n\nweb:\n  listen:\n    port: 8080\n    host: 0.0.0.0\n  database:\n    location: /opt/scrutiny/data/scrutiny.db\n  src:\n    frontend:\n      path: ./dist\n\nlog:\n  level: INFO\nEOF\n\n# Create systemd service\nsudo tee /etc/systemd/system/scrutiny-web.service &gt; /dev/null &lt;&lt; &#039;EOF&#039;\n[Unit]\nDescription=Scrutiny Web Dashboard\nAfter=network.target\n\n[Service]\nType=simple\nUser=scrutiny\nGroup=scrutiny\nExecStart=/usr/local/bin/scrutiny-web start --config /opt/scrutiny/config/scrutiny.yaml\nWorkingDirectory=/opt/scrutiny\nRestart=always\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now scrutiny-web</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Debian/Ubuntu</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system and install dependencies\nsudo apt update\nsudo apt install -y smartmontools wget curl\n\n# Download and install Scrutiny\nSCRUTINY_VERSION=&quot;0.7.3&quot;\nwget &quot;https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-web-linux-amd64&quot;\nwget &quot;https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-collector-metrics-linux-amd64&quot;\n\nsudo mv scrutiny-web-linux-amd64 /usr/local/bin/scrutiny-web\nsudo mv scrutiny-collector-metrics-linux-amd64 /usr/local/bin/scrutiny-collector-metrics\nsudo chmod +x /usr/local/bin/scrutiny-*\n\n# Create user and directories\nsudo useradd -r -s /bin/false -d /opt/scrutiny scrutiny\nsudo mkdir -p /opt/scrutiny/{config,data}\nsudo chown -R scrutiny:scrutiny /opt/scrutiny\n\n# Install configuration (same as RHEL above)\n# Install systemd service (same as RHEL above)\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now scrutiny-web</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from AUR\nyay -S scrutiny-bin\n\n# Or install dependencies and manual setup\nsudo pacman -S smartmontools\n\n# Follow manual installation steps\n# (Same binary download and setup as above)</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dependencies\napk add --no-cache smartmontools wget\n\n# Download Scrutiny binaries\nSCRUTINY_VERSION=&quot;0.7.3&quot;\nwget &quot;https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-web-linux-amd64&quot;\nwget &quot;https://github.com/AnalogJ/scrutiny/releases/download/v${SCRUTINY_VERSION}/scrutiny-collector-metrics-linux-amd64&quot;\n\nmv scrutiny-web-linux-amd64 /usr/local/bin/scrutiny-web\nmv scrutiny-collector-metrics-linux-amd64 /usr/local/bin/scrutiny-collector-metrics\nchmod +x /usr/local/bin/scrutiny-*\n\n# Create OpenRC service\ntee /etc/init.d/scrutiny-web &gt; /dev/null &lt;&lt; &#039;EOF&#039;\n#!/sbin/openrc-run\n\ndescription=&quot;Scrutiny Web Dashboard&quot;\ncommand=&quot;/usr/local/bin/scrutiny-web&quot;\ncommand_args=&quot;start --config /opt/scrutiny/config/scrutiny.yaml&quot;\ncommand_user=&quot;scrutiny&quot;\ncommand_group=&quot;scrutiny&quot;\npidfile=&quot;/run/scrutiny-web.pid&quot;\ncommand_background=&quot;yes&quot;\n\ndepend() {\n    need net\n    after firewall\n}\n\nstart_pre() {\n    checkpath --directory --owner scrutiny:scrutiny --mode 0755 /opt/scrutiny/data\n}\nEOF\n\nchmod +x /etc/init.d/scrutiny-web\nrc-update add scrutiny-web default\nrc-service scrutiny-web start</code></pre>\n      </div>\n    </div>\n<h3 id=\"method-3-metrics-collector-setup\" class=\"mobile-header\">Method 3: Metrics Collector Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create collector configuration\nsudo tee /opt/scrutiny/config/collector.yaml &gt; /dev/null &lt;&lt; &#039;EOF&#039;\nversion: 1\n\nhost:\n  id: &quot;&quot;\n\napi:\n  endpoint: &quot;http://localhost:8080&quot;\n\nlog:\n  level: INFO\n\ncommands:\n  metrics_scan_interval: 15m\nEOF\n\n# Create collector systemd service\nsudo tee /etc/systemd/system/scrutiny-collector.service &gt; /dev/null &lt;&lt; &#039;EOF&#039;\n[Unit]\nDescription=Scrutiny Collector\nAfter=network.target\n\n[Service]\nType=simple\nUser=root\nExecStart=/usr/local/bin/scrutiny-collector-metrics run --config /opt/scrutiny/config/collector.yaml\nRestart=always\nRestartSec=60\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now scrutiny-collector</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-configuration\" class=\"mobile-header\">4. Configuration</h2>\n<h3 id=\"web-dashboard-configuration\" class=\"mobile-header\">Web Dashboard Configuration</h3>\n<p class=\"mobile-paragraph\">Edit <code class=\"mobile-inline-code\">/opt/scrutiny/config/scrutiny.yaml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: 1\n\nweb:\n  listen:\n    port: 8080\n    host: 0.0.0.0\n  \n  database:\n    location: /opt/scrutiny/data/scrutiny.db\n  \n  influxdb:\n    host: localhost\n    port: 8086\n    token: &quot;&quot;\n    org: &quot;&quot;\n    bucket: &quot;metrics&quot;\n    retention_policy: &quot;&quot;\n\nnotify:\n  urls:\n    - &quot;discord://webhook_id/webhook_token&quot;\n    - &quot;slack://webhook_url&quot;\n    - &quot;smtp://username:password@host:port/?to=user@example.com&quot;\n\nlog:\n  level: INFO\n  file: &quot;/opt/scrutiny/data/web.log&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"collector-configuration\" class=\"mobile-header\">Collector Configuration</h3>\n<p class=\"mobile-paragraph\">Edit <code class=\"mobile-inline-code\">/opt/scrutiny/config/collector.yaml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: 1\n\nhost:\n  id: &quot;&quot;\n\napi:\n  endpoint: &quot;http://localhost:8080&quot;\n\ncommands:\n  metrics_scan_interval: 15m\n  \ndevices:\n  include:\n    - /dev/sd*\n    - /dev/nvme*\n  exclude:\n    - /dev/loop*\n    - /dev/sr*\n\nlog:\n  level: INFO\n  file: &quot;/opt/scrutiny/data/collector.log&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"notification-setup\" class=\"mobile-header\">Notification Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Discord Webhook\nnotify:\n  urls:\n    - &quot;discord://webhook_id/webhook_token?username=Scrutiny&quot;\n\n# Slack Webhook\nnotify:\n  urls:\n    - &quot;slack://webhook_url&quot;\n\n# Email SMTP\nnotify:\n  urls:\n    - &quot;smtp://user:pass@smtp.gmail.com:587/?to=admin@example.com&amp;subject=Scrutiny%20Alert&quot;\n\n# Multiple notifications\nnotify:\n  urls:\n    - &quot;discord://webhook_id/webhook_token&quot;\n    - &quot;smtp://user:pass@smtp.gmail.com:587/?to=admin@example.com&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-management\" class=\"mobile-header\">systemd Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Web dashboard\nsudo systemctl start scrutiny-web\nsudo systemctl stop scrutiny-web\nsudo systemctl restart scrutiny-web\nsudo systemctl status scrutiny-web\nsudo systemctl enable scrutiny-web\n\n# Collector\nsudo systemctl start scrutiny-collector\nsudo systemctl stop scrutiny-collector\nsudo systemctl restart scrutiny-collector\nsudo systemctl status scrutiny-collector\n\n# View logs\nsudo journalctl -u scrutiny-web -f\nsudo journalctl -u scrutiny-collector -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-management\" class=\"mobile-header\">Docker Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Start/stop services\ndocker-compose up -d\ndocker-compose down\ndocker-compose restart\n\n# View logs\ndocker-compose logs -f scrutiny\n\n# Update to latest version\ndocker-compose pull\ndocker-compose up -d</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-operations\" class=\"mobile-header\">Manual Operations</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run one-time disk scan\nsudo /usr/local/bin/scrutiny-collector-metrics run --config /opt/scrutiny/config/collector.yaml\n\n# Test SMART data collection\nsudo smartctl -a /dev/sda\nsudo smartctl -H /dev/nvme0n1\n\n# Force metrics collection\ncurl -X POST http://localhost:8080/api/health/notify</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>No disks detected</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if smartctl can detect disks\nsudo smartctl --scan\n\n# Verify disk permissions\nls -la /dev/sd* /dev/nvme*\n\n# Check if disks support SMART\nsudo smartctl -i /dev/sda\nsudo smartctl -c /dev/sda</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Permission errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Ensure scrutiny user has access to disks\nsudo usermod -a -G disk scrutiny\n\n# For Docker, check device mapping\ndocker-compose exec scrutiny smartctl --scan\n\n# Check udev rules\nls -la /run/udev</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Web interface not accessible</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is running\nsudo systemctl status scrutiny-web\n\n# Verify port binding\nsudo netstat -tlnp | grep 8080\n\n# Check firewall\nsudo firewall-cmd --list-ports\nsudo ufw status</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Database issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check database permissions\nls -la /opt/scrutiny/data/scrutiny.db\n\n# Verify SQLite installation\nsqlite3 --version\n\n# Check database integrity\nsqlite3 /opt/scrutiny/data/scrutiny.db &quot;PRAGMA integrity_check;&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging in configuration\nlog:\n  level: DEBUG\n\n# Run collector manually with debug\nsudo /usr/local/bin/scrutiny-collector-metrics run \\\n    --config /opt/scrutiny/config/collector.yaml \\\n    --log-level DEBUG\n\n# Check SMART test results\nsudo smartctl -l selftest /dev/sda</code></pre>\n      </div>\n    </div>\n<h2 id=\"7-security-considerations\" class=\"mobile-header\">7. Security Considerations</h2>\n<h3 id=\"access-control\" class=\"mobile-header\">Access Control</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Bind to localhost only (behind reverse proxy)\nweb:\n  listen:\n    port: 8080\n    host: 127.0.0.1\n\n# Configure reverse proxy with authentication\n# nginx example:\nlocation /scrutiny {\n    auth_basic &quot;Scrutiny Access&quot;;\n    auth_basic_user_file /etc/nginx/.htpasswd;\n    proxy_pass http://127.0.0.1:8080;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=8080/tcp\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 8080/tcp\nsudo ufw enable\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 8080 -j ACCEPT</code></pre>\n      </div>\n    </div>\n<h3 id=\"file-permissions\" class=\"mobile-header\">File Permissions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure configuration files\nsudo chmod 640 /opt/scrutiny/config/*.yaml\nsudo chown scrutiny:scrutiny /opt/scrutiny/config/*.yaml\n\n# Secure data directory\nsudo chmod 750 /opt/scrutiny/data\nsudo chown -R scrutiny:scrutiny /opt/scrutiny/data</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-setup\" class=\"mobile-header\">SSL/TLS Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># nginx reverse proxy with SSL\nserver {\n    listen 443 ssl;\n    server_name scrutiny.example.com;\n    \n    ssl_certificate /etc/ssl/certs/scrutiny.crt;\n    ssl_certificate_key /etc/ssl/private/scrutiny.key;\n    \n    location / {\n        proxy_pass http://127.0.0.1:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"8-performance-tuning\" class=\"mobile-header\">8. Performance Tuning</h2>\n<h3 id=\"collector-optimization\" class=\"mobile-header\">Collector Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Adjust scan intervals based on needs\ncommands:\n  metrics_scan_interval: 30m  # Longer intervals for less load\n  \n# Exclude unnecessary devices\ndevices:\n  exclude:\n    - /dev/loop*\n    - /dev/sr*\n    - /dev/ram*</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize SQLite database\nsqlite3 /opt/scrutiny/data/scrutiny.db &quot;VACUUM;&quot;\nsqlite3 /opt/scrutiny/data/scrutiny.db &quot;ANALYZE;&quot;\n\n# Set SQLite performance pragmas\nsqlite3 /opt/scrutiny/data/scrutiny.db &quot;PRAGMA journal_mode = WAL;&quot;\nsqlite3 /opt/scrutiny/data/scrutiny.db &quot;PRAGMA synchronous = NORMAL;&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"system-resource-optimization\" class=\"mobile-header\">System Resource Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Limit memory usage for Docker\ndocker-compose.yml:\nservices:\n  scrutiny:\n    deploy:\n      resources:\n        limits:\n          memory: 512M\n        reservations:\n          memory: 256M\n\n# CPU limits\n    deploy:\n      resources:\n        limits:\n          cpus: &#039;1.0&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"database-backup\" class=\"mobile-header\">Database Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-scrutiny-db.sh\n\nBACKUP_DIR=&quot;/var/backups/scrutiny&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nDB_PATH=&quot;/opt/scrutiny/data/scrutiny.db&quot;\n\nmkdir -p $BACKUP_DIR\n\n# Stop service for consistent backup\nsudo systemctl stop scrutiny-web\n\n# Backup database\nsudo cp $DB_PATH $BACKUP_DIR/scrutiny_db_$DATE.db\n\n# Compress backup\ngzip $BACKUP_DIR/scrutiny_db_$DATE.db\n\n# Start service\nsudo systemctl start scrutiny-web\n\necho &quot;Database backup completed: $BACKUP_DIR/scrutiny_db_$DATE.db.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"configuration-backup\" class=\"mobile-header\">Configuration Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-scrutiny-config.sh\n\nBACKUP_DIR=&quot;/var/backups/scrutiny&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p $BACKUP_DIR\n\n# Backup configuration\ntar -czf $BACKUP_DIR/scrutiny_config_$DATE.tar.gz \\\n    /opt/scrutiny/config/ \\\n    /etc/systemd/system/scrutiny*.service\n\necho &quot;Configuration backup completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"automated-backup\" class=\"mobile-header\">Automated Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add to crontab\nsudo crontab -e\n\n# Daily database backup at 2 AM\n0 2 * * * /opt/scrutiny/scripts/backup-scrutiny-db.sh\n\n# Weekly configuration backup\n0 3 * * 0 /opt/scrutiny/scripts/backup-scrutiny-config.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedures\" class=\"mobile-header\">Restore Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Restore database\nsudo systemctl stop scrutiny-web\nsudo cp scrutiny_db_backup.db /opt/scrutiny/data/scrutiny.db\nsudo chown scrutiny:scrutiny /opt/scrutiny/data/scrutiny.db\nsudo systemctl start scrutiny-web\n\n# Restore configuration\nsudo tar -xzf scrutiny_config_backup.tar.gz -C /\nsudo systemctl daemon-reload\nsudo systemctl restart scrutiny-web scrutiny-collector</code></pre>\n      </div>\n    </div>\n<h2 id=\"10-system-requirements\" class=\"mobile-header\">10. System Requirements</h2>\n<h3 id=\"minimum-requirements\" class=\"mobile-header\">Minimum Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 1 core</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 512MB</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 100MB + metrics storage</li>\n<li class=\"mobile-list-item\"><strong>Disks</strong>: SMART-enabled drives</li>\n<h3 id=\"recommended-requirements\" class=\"mobile-header\">Recommended Requirements</h3>\n<li class=\"mobile-list-item\"><strong>CPU</strong>: 2+ cores</li>\n<li class=\"mobile-list-item\"><strong>RAM</strong>: 1GB+</li>\n<li class=\"mobile-list-item\"><strong>Storage</strong>: 1GB+ SSD for database</li>\n<li class=\"mobile-list-item\"><strong>Network</strong>: Fast local network for multi-host setup</li>\n<h3 id=\"scaling-guidelines\" class=\"mobile-header\">Scaling Guidelines</h3>\n<li class=\"mobile-list-item\"><strong>Per disk</strong>: ~1MB metrics data per day</li>\n<li class=\"mobile-list-item\"><strong>Retention</strong>: Plan storage for historical data</li>\n<li class=\"mobile-list-item\"><strong>Collection frequency</strong>: Balance between monitoring granularity and system load</li>\n<h2 id=\"11-support\" class=\"mobile-header\">11. Support</h2>\n<h3 id=\"official-resources\" class=\"mobile-header\">Official Resources</h3>\n<li class=\"mobile-list-item\"><strong>GitHub</strong>: https://github.com/AnalogJ/scrutiny</li>\n<li class=\"mobile-list-item\"><strong>Documentation</strong>: https://github.com/AnalogJ/scrutiny/blob/master/README.md</li>\n<li class=\"mobile-list-item\"><strong>Releases</strong>: https://github.com/AnalogJ/scrutiny/releases</li>\n<h3 id=\"community-support\" class=\"mobile-header\">Community Support</h3>\n<li class=\"mobile-list-item\"><strong>GitHub Issues</strong>: https://github.com/AnalogJ/scrutiny/issues</li>\n<li class=\"mobile-list-item\"><strong>Discussions</strong>: https://github.com/AnalogJ/scrutiny/discussions</li>\n<li class=\"mobile-list-item\"><strong>Reddit</strong>: r/selfhosted</li>\n<h2 id=\"12-contributing\" class=\"mobile-header\">12. Contributing</h2>\n<h3 id=\"how-to-contribute\" class=\"mobile-header\">How to Contribute</h3>\n<p class=\"mobile-paragraph\">1. Fork the repository on GitHub</p>\n<p class=\"mobile-paragraph\">2. Create a feature branch</p>\n<p class=\"mobile-paragraph\">3. Submit pull request</p>\n<p class=\"mobile-paragraph\">4. Follow Go and Angular coding standards</p>\n<p class=\"mobile-paragraph\">5. Include tests and documentation</p>\n<h3 id=\"development-setup\" class=\"mobile-header\">Development Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clone repository\ngit clone https://github.com/AnalogJ/scrutiny.git\ncd scrutiny\n\n# Install dependencies\ngo mod download\nnpm install\n\n# Build frontend\nnpm run build\n\n# Build backend\ngo build</code></pre>\n      </div>\n    </div>\n<h2 id=\"13-license\" class=\"mobile-header\">13. License</h2>\n<p class=\"mobile-paragraph\">Scrutiny is licensed under the MIT License.</p>\n<p class=\"mobile-paragraph\">Key points:</p>\n<li class=\"mobile-list-item\">Free to use, modify, and distribute</li>\n<li class=\"mobile-list-item\">Commercial use allowed</li>\n<li class=\"mobile-list-item\">No warranty provided</li>\n<li class=\"mobile-list-item\">Attribution required</li>\n<h2 id=\"14-acknowledgments\" class=\"mobile-header\">14. Acknowledgments</h2>\n<h3 id=\"credits\" class=\"mobile-header\">Credits</h3>\n<li class=\"mobile-list-item\"><strong>AnalogJ</strong>: Creator and primary developer</li>\n<li class=\"mobile-list-item\"><strong>Community Contributors</strong>: Feature development and testing</li>\n<li class=\"mobile-list-item\"><strong>smartmontools</strong>: S.M.A.R.T. data collection foundation</li>\n<li class=\"mobile-list-item\"><strong>InfluxDB</strong>: Time-series database support</li>\n<h2 id=\"15-version-history\" class=\"mobile-header\">15. Version History</h2>\n<h3 id=\"recent-releases\" class=\"mobile-header\">Recent Releases</h3>\n<li class=\"mobile-list-item\"><strong>v0.7.x</strong>: Latest stable with enhanced UI</li>\n<li class=\"mobile-list-item\"><strong>v0.6.x</strong>: Added notification support</li>\n<li class=\"mobile-list-item\"><strong>v0.5.x</strong>: Improved collector architecture</li>\n<h3 id=\"major-features-by-version\" class=\"mobile-header\">Major Features by Version</h3>\n<li class=\"mobile-list-item\"><strong>v0.7</strong>: Enhanced dashboard, better device detection</li>\n<li class=\"mobile-list-item\"><strong>v0.6</strong>: Multiple notification channels</li>\n<li class=\"mobile-list-item\"><strong>v0.5</strong>: Collector/dashboard separation</li>\n<h2 id=\"16-appendices\" class=\"mobile-header\">16. Appendices</h2>\n<h3 id=\"a-smart-attribute-reference\" class=\"mobile-header\">A. SMART Attribute Reference</h3>\n<p class=\"mobile-paragraph\">Common SMART attributes monitored:</p>\n<li class=\"mobile-list-item\"><strong>01</strong>: Read Error Rate</li>\n<li class=\"mobile-list-item\"><strong>05</strong>: Reallocated Sectors Count</li>\n<li class=\"mobile-list-item\"><strong>09</strong>: Power-On Hours</li>\n<li class=\"mobile-list-item\"><strong>0A</strong>: Spin Retry Count</li>\n<li class=\"mobile-list-item\"><strong>0C</strong>: Power Cycle Count</li>\n<li class=\"mobile-list-item\"><strong>C4</strong>: Reallocation Event Count</li>\n<li class=\"mobile-list-item\"><strong>C5</strong>: Current Pending Sector Count</li>\n<li class=\"mobile-list-item\"><strong>C6</strong>: Uncorrectable Sector Count</li>\n<h3 id=\"b-api-usage-examples\" class=\"mobile-header\">B. API Usage Examples</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Get device list\ncurl http://localhost:8080/api/devices\n\n# Get device details\ncurl http://localhost:8080/api/device/{device_id}\n\n# Force metrics collection\ncurl -X POST http://localhost:8080/api/device/{device_id}/smart/scan\n\n# Get device smart data\ncurl http://localhost:8080/api/device/{device_id}/smart</code></pre>\n      </div>\n    </div>\n<h3 id=\"c-integration-examples\" class=\"mobile-header\">C. Integration Examples</h3>\n<p class=\"mobile-paragraph\">#### Prometheus Metrics Export</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Add to docker-compose.yml\nservices:\n  scrutiny:\n    environment:\n      - SCRUTINY_WEB_INFLUXDB_INIT_USERNAME=admin\n      - SCRUTINY_WEB_INFLUXDB_INIT_PASSWORD=password123\n      - SCRUTINY_WEB_INFLUXDB_INIT_ORG=scrutiny\n      - SCRUTINY_WEB_INFLUXDB_INIT_BUCKET=metrics</code></pre>\n      </div>\n    </div>\n<h3 id=\"d-multi-host-setup\" class=\"mobile-header\">D. Multi-Host Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Central collector configuration\napi:\n  endpoint: &quot;http://scrutiny-central:8080&quot;\n\n# Host-specific collector setup\nhost:\n  id: &quot;storage-server-1&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\">For more information and updates, visit https://github.com/howtomgr/scrutiny</p>","readTime":"11 min","wordCount":2059,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":3,"text":"Hardware Requirements","id":"hardware-requirements"},{"level":3,"text":"Software Requirements","id":"software-requirements"},{"level":3,"text":"Network Requirements","id":"network-requirements"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"Method 1: Docker Compose (Recommended)","id":"method-1-docker-compose-recommended"},{"level":3,"text":"Method 2: Native Installation","id":"method-2-native-installation"},{"level":3,"text":"Method 3: Metrics Collector Setup","id":"method-3-metrics-collector-setup"},{"level":2,"text":"4. Configuration","id":"4-configuration"},{"level":3,"text":"Web Dashboard Configuration","id":"web-dashboard-configuration"},{"level":3,"text":"Collector Configuration","id":"collector-configuration"},{"level":3,"text":"Notification Setup","id":"notification-setup"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd Management","id":"systemd-management"},{"level":3,"text":"Docker Management","id":"docker-management"},{"level":3,"text":"Manual Operations","id":"manual-operations"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"7. Security Considerations","id":"7-security-considerations"},{"level":3,"text":"Access Control","id":"access-control"},{"level":3,"text":"Firewall Configuration","id":"firewall-configuration"},{"level":3,"text":"File Permissions","id":"file-permissions"},{"level":3,"text":"SSL/TLS Setup","id":"ssltls-setup"},{"level":2,"text":"8. Performance Tuning","id":"8-performance-tuning"},{"level":3,"text":"Collector Optimization","id":"collector-optimization"},{"level":3,"text":"Database Optimization","id":"database-optimization"},{"level":3,"text":"System Resource Optimization","id":"system-resource-optimization"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Database Backup","id":"database-backup"},{"level":3,"text":"Configuration Backup","id":"configuration-backup"},{"level":3,"text":"Automated Backup","id":"automated-backup"},{"level":3,"text":"Restore Procedures","id":"restore-procedures"},{"level":2,"text":"10. System Requirements","id":"10-system-requirements"},{"level":3,"text":"Minimum Requirements","id":"minimum-requirements"},{"level":3,"text":"Recommended Requirements","id":"recommended-requirements"},{"level":3,"text":"Scaling Guidelines","id":"scaling-guidelines"},{"level":2,"text":"11. Support","id":"11-support"},{"level":3,"text":"Official Resources","id":"official-resources"},{"level":3,"text":"Community Support","id":"community-support"},{"level":2,"text":"12. Contributing","id":"12-contributing"},{"level":3,"text":"How to Contribute","id":"how-to-contribute"},{"level":3,"text":"Development Setup","id":"development-setup"},{"level":2,"text":"13. License","id":"13-license"},{"level":2,"text":"14. Acknowledgments","id":"14-acknowledgments"},{"level":3,"text":"Credits","id":"credits"},{"level":2,"text":"15. Version History","id":"15-version-history"},{"level":3,"text":"Recent Releases","id":"recent-releases"},{"level":3,"text":"Major Features by Version","id":"major-features-by-version"},{"level":2,"text":"16. Appendices","id":"16-appendices"},{"level":3,"text":"A. SMART Attribute Reference","id":"a-smart-attribute-reference"},{"level":3,"text":"B. API Usage Examples","id":"b-api-usage-examples"},{"level":3,"text":"C. Integration Examples","id":"c-integration-examples"},{"level":3,"text":"D. Multi-Host Setup","id":"d-multi-host-setup"}],"lastBuilt":"2025-10-09T06:16:23.787Z","metadataVersion":"2.0"},"category":{"key":"monitoring","name":"Monitoring","description":"Monitoring tools and applications","icon":"📊","color":"#ffb86c"},"relatedGuides":[{"name":"blackbox-exporter","displayName":"Blackbox Exporter Installation Guide","slug":"blackbox-exporter","description":"Blackbox Exporter is a Prometheus exporter that allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC. It's essential for monitoring external services and endpoints from a user perspective.","category":"monitoring","subcategory":"monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["arch"],"defaultPorts":[5432,5672,6379,8080,9115],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["monitoring","containerization","observability","data-storage","security","networking"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/monitoring/blackbox-exporter","documentationUrl":"https://howtomgr.github.io/monitoring/blackbox-exporter","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/blackbox-exporter","updatedAt":"2025-09-16T17:00:38Z","createdAt":"2025-09-16T02:22:27Z","readmeRaw":"# Blackbox Exporter Installation Guide\n\nBlackbox Exporter is a Prometheus exporter that allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC. It's essential for monitoring external services and endpoints from a user perspective.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- Linux-based operating system\n- Prometheus server installed and configured\n- Basic understanding of Prometheus and monitoring concepts\n- Network access to targets you want to probe\n- For systemd service: systemd-based Linux distribution\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### Binary Installation\n\n1. **Download the latest release**:\n```bash\n# Check latest version at https://github.com/prometheus/blackbox_exporter/releases\nVERSION=\"0.24.0\"\nARCH=\"linux-amd64\"\n\n# Download binary\nwget https://github.com/prometheus/blackbox_exporter/releases/download/v${VERSION}/blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Extract archive\ntar xvfz blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Move binary to system path\nsudo mv blackbox_exporter-${VERSION}.${ARCH}/blackbox_exporter /usr/local/bin/\nsudo chown root:root /usr/local/bin/blackbox_exporter\nsudo chmod +x /usr/local/bin/blackbox_exporter\n```\n\n2. **Create user and directories**:\n```bash\n# Create system user\nsudo useradd --no-create-home --shell /bin/false blackbox_exporter\n\n# Create config directory\nsudo mkdir -p /etc/blackbox_exporter\nsudo chown blackbox_exporter:blackbox_exporter /etc/blackbox_exporter\n```\n\n### Docker Installation\n\n```bash\n# Run with Docker\ndocker run -d \\\n  --name blackbox_exporter \\\n  -p 9115:9115 \\\n  -v /path/to/blackbox.yml:/config/blackbox.yml \\\n  prom/blackbox-exporter:latest \\\n  --config.file=/config/blackbox.yml\n```\n\n### Package Manager Installation\n\n**Ubuntu/Debian**:\n```bash\n# Not available in default repos, use binary installation\n```\n\n**RHEL/CentOS/Fedora**:\n```bash\n# Not available in default repos, use binary installation\n```\n\n**Arch Linux**:\n```bash\nsudo pacman -S prometheus-blackbox-exporter\n```\n\n## 4. Configuration\n\n### Basic Configuration\n\nCreate `/etc/blackbox_exporter/blackbox.yml`:\n```yaml\nmodules:\n  # HTTP/HTTPS probe\n  http_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      preferred_ip_protocol: \"ip4\"\n      ip_protocol_fallback: false\n      valid_http_versions: [\"HTTP/1.1\", \"HTTP/2.0\"]\n      valid_status_codes: []  # Defaults to 2xx\n      method: GET\n      follow_redirects: true\n      fail_if_ssl: false\n      fail_if_not_ssl: false\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTPS with specific status codes\n  http_post_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      method: POST\n      headers:\n        Content-Type: application/json\n      body: '{\"test\": \"data\"}'\n      valid_status_codes: [200, 201, 202]\n\n  # TCP probe\n  tcp_connect:\n    prober: tcp\n    timeout: 5s\n\n  # ICMP ping probe\n  icmp:\n    prober: icmp\n    timeout: 5s\n    icmp:\n      preferred_ip_protocol: \"ip4\"\n\n  # DNS probe\n  dns_udp:\n    prober: dns\n    timeout: 5s\n    dns:\n      preferred_ip_protocol: \"ip4\"\n      query_name: \"www.example.com\"\n      query_type: \"A\"\n      valid_rcodes:\n        - NOERROR\n\n  # SSL certificate check\n  http_ssl_cert:\n    prober: http\n    timeout: 5s\n    http:\n      method: GET\n      fail_if_ssl: false\n      fail_if_not_ssl: true\n      tls_config:\n        insecure_skip_verify: false\n```\n\n### Advanced Modules\n\n```yaml\nmodules:\n  # HTTP with authentication\n  http_basic_auth:\n    prober: http\n    timeout: 5s\n    http:\n      basic_auth:\n        username: \"monitoring\"\n        password: \"secure_password\"\n      valid_status_codes: [200]\n\n  # HTTP with custom headers\n  http_custom_headers:\n    prober: http\n    timeout: 5s\n    http:\n      headers:\n        X-API-Key: \"your-api-key\"\n        Accept: \"application/json\"\n\n  # gRPC probe\n  grpc:\n    prober: grpc\n    timeout: 5s\n    grpc:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # TCP with TLS\n  tcp_tls:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTP with regex matching\n  http_content_match:\n    prober: http\n    timeout: 5s\n    http:\n      valid_status_codes: [200]\n      fail_if_body_not_matches_regexp:\n        - \"Welcome.*\"\n      fail_if_body_matches_regexp:\n        - \"Error.*\"\n\n  # Slow HTTP probe\n  http_slow:\n    prober: http\n    timeout: 30s\n    http:\n      method: GET\n```\n\n### Systemd Service\n\nCreate `/etc/systemd/system/blackbox_exporter.service`:\n```ini\n[Unit]\nDescription=Blackbox Exporter\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=blackbox_exporter\nGroup=blackbox_exporter\nExecStart=/usr/local/bin/blackbox_exporter \\\n  --config.file=/etc/blackbox_exporter/blackbox.yml \\\n  --web.listen-address=:9115\n\nRestart=on-failure\nRestartSec=5s\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/etc/blackbox_exporter\n\n# Required for ICMP probes\nAmbientCapabilities=CAP_NET_RAW\nCapabilityBoundingSet=CAP_NET_RAW\n\n[Install]\nWantedBy=multi-user.target\n```\n\nStart the service:\n```bash\nsudo systemctl daemon-reload\nsudo systemctl enable blackbox_exporter\nsudo systemctl start blackbox_exporter\nsudo systemctl status blackbox_exporter\n```\n\n## Prometheus Configuration\n\n### Configure Prometheus Scrape Jobs\n\nAdd to `prometheus.yml`:\n```yaml\nscrape_configs:\n  # Blackbox exporter itself\n  - job_name: 'blackbox'\n    static_configs:\n      - targets: ['localhost:9115']\n\n  # HTTP/HTTPS monitoring\n  - job_name: 'blackbox-http'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://api.example.com/health\n        - http://internal-service:8080\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # TCP port monitoring\n  - job_name: 'blackbox-tcp'\n    metrics_path: /probe\n    params:\n      module: [tcp_connect]\n    static_configs:\n      - targets:\n        - database.example.com:5432\n        - cache.example.com:6379\n        - message-broker.example.com:5672\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # ICMP ping monitoring\n  - job_name: 'blackbox-icmp'\n    metrics_path: /probe\n    params:\n      module: [icmp]\n    static_configs:\n      - targets:\n        - gateway.example.com\n        - dns1.example.com\n        - dns2.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # SSL certificate monitoring\n  - job_name: 'blackbox-ssl'\n    metrics_path: /probe\n    params:\n      module: [http_ssl_cert]\n    static_configs:\n      - targets:\n        - https://secure.example.com\n        - https://api.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n```\n\n### File-based Service Discovery\n\n```yaml\nscrape_configs:\n  - job_name: 'blackbox-http-file-sd'\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    file_sd_configs:\n      - files:\n        - '/etc/prometheus/blackbox-targets/*.yml'\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n```\n\nTarget file `/etc/prometheus/blackbox-targets/web.yml`:\n```yaml\n- targets:\n  - https://app1.example.com\n  - https://app2.example.com\n  labels:\n    service: web\n    env: production\n\n- targets:\n  - https://staging.example.com\n  labels:\n    service: web\n    env: staging\n```\n\n## Alert Rules\n\nCreate `/etc/prometheus/alerts/blackbox.yml`:\n```yaml\ngroups:\n  - name: blackbox\n    rules:\n      # Website down\n      - alert: WebsiteDown\n        expr: probe_success{job=\"blackbox-http\"} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"Website down (instance {{ $labels.instance }})\"\n          description: \"Website {{ $labels.instance }} has been down for more than 5 minutes.\"\n\n      # SSL certificate expiry\n      - alert: SSLCertificateExpiringSoon\n        expr: probe_ssl_earliest_cert_expiry - time() < 86400 * 30\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"SSL certificate expiring soon (instance {{ $labels.instance }})\"\n          description: \"SSL certificate for {{ $labels.instance }} expires in less than 30 days.\"\n\n      - alert: SSLCertificateExpired\n        expr: probe_ssl_earliest_cert_expiry - time() < 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"SSL certificate expired (instance {{ $labels.instance }})\"\n          description: \"SSL certificate for {{ $labels.instance }} has expired.\"\n\n      # Slow response time\n      - alert: SlowResponseTime\n        expr: probe_http_duration_seconds{job=\"blackbox-http\"} > 2\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"Slow HTTP response (instance {{ $labels.instance }})\"\n          description: \"HTTP response time for {{ $labels.instance }} is {{ $value }}s (> 2s).\"\n\n      # TCP port down\n      - alert: TCPPortDown\n        expr: probe_success{job=\"blackbox-tcp\"} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: \"TCP port down (instance {{ $labels.instance }})\"\n          description: \"TCP port {{ $labels.instance }} has been down for more than 5 minutes.\"\n\n      # High packet loss\n      - alert: HighPacketLoss\n        expr: (1 - avg_over_time(probe_success{job=\"blackbox-icmp\"}[5m])) > 0.1\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: \"High packet loss (instance {{ $labels.instance }})\"\n          description: \"Packet loss for {{ $labels.instance }} is {{ $value | humanizePercentage }}.\"\n```\n\n## Grafana Dashboard\n\nImport dashboard JSON or create custom dashboard with these queries:\n\n```promql\n# Probe success rate\nrate(probe_success{job=~\"blackbox-.*\"}[5m])\n\n# HTTP response time\nprobe_http_duration_seconds{job=\"blackbox-http\"}\n\n# SSL certificate days until expiry\n(probe_ssl_earliest_cert_expiry - time()) / 86400\n\n# DNS lookup time\nprobe_dns_lookup_time_seconds\n\n# TCP connection time\nprobe_tcp_duration_seconds\n\n# Uptime percentage (last 24h)\navg_over_time(probe_success{job=\"blackbox-http\"}[24h]) * 100\n\n# Status code distribution\nsum by (status_code) (probe_http_status_code)\n```\n\n## 7. Security Considerations\n\n### Network Security\n\n```bash\n# Firewall rules\nsudo ufw allow from prometheus_server_ip to any port 9115\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 9115 -s prometheus_server_ip -j ACCEPT\n```\n\n### Authentication\n\nEnable basic auth in blackbox exporter:\n```bash\n# Generate password hash\nhtpasswd -nBC 10 \"\" | tr -d ':\\n'\n\n# Add to blackbox_exporter command\n--web.config=/etc/blackbox_exporter/web.yml\n```\n\nCreate `/etc/blackbox_exporter/web.yml`:\n```yaml\nbasic_auth_users:\n  prometheus: $2b$10$...  # bcrypt hash\n```\n\n### TLS Configuration\n\n```yaml\ntls_server_config:\n  cert_file: /etc/blackbox_exporter/server.crt\n  key_file: /etc/blackbox_exporter/server.key\n```\n\n## 6. Troubleshooting\n\n### Testing Probes\n\n```bash\n# Test HTTP probe\ncurl \"http://localhost:9115/probe?target=https://example.com&module=http_2xx\"\n\n# Test with debug\ncurl \"http://localhost:9115/probe?target=https://example.com&module=http_2xx&debug=true\"\n\n# Check metrics\ncurl http://localhost:9115/metrics\n```\n\n### Common Issues\n\n1. **ICMP permission denied**:\n```bash\n# Set capability\nsudo setcap cap_net_raw+ep /usr/local/bin/blackbox_exporter\n\n# Or run as root (not recommended)\n```\n\n2. **Connection refused**:\n```bash\n# Check service status\nsudo systemctl status blackbox_exporter\n\n# Check logs\nsudo journalctl -u blackbox_exporter -f\n\n# Verify listening port\nsudo netstat -tlnp | grep 9115\n```\n\n3. **SSL verification failures**:\n```yaml\n# Temporarily disable verification (testing only)\ntls_config:\n  insecure_skip_verify: true\n```\n\n## 8. Performance Tuning\n\n### Concurrent Probes\n\n```bash\n# Increase concurrent probes\n--web.max-requests=100\n```\n\n### Timeout Optimization\n\n```yaml\n# Adjust timeouts based on network conditions\nmodules:\n  http_fast:\n    prober: http\n    timeout: 2s\n  http_slow:\n    prober: http\n    timeout: 30s\n```\n\n### Resource Limits\n\n```ini\n# In systemd service file\n[Service]\nLimitNOFILE=65535\nMemoryLimit=256M\nCPUQuota=50%\n```\n\n## Monitoring Best Practices\n\n1. **Probe frequency**: Balance between detection speed and load\n2. **Timeout values**: Set slightly below scrape interval\n3. **Module reuse**: Create specific modules for different use cases\n4. **Geographic distribution**: Deploy multiple blackbox exporters\n5. **Internal vs external**: Separate probes for internal/external services\n\n## Additional Resources\n\n- [Official Documentation](https://github.com/prometheus/blackbox_exporter)\n- [Configuration Examples](https://github.com/prometheus/blackbox_exporter/blob/master/example.yml)\n- [Prometheus Documentation](https://prometheus.io/docs/)\n- [Grafana Dashboards](https://grafana.com/grafana/dashboards?search=blackbox)\n- [Community Forum](https://groups.google.com/forum/#!forum/prometheus-users)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">Blackbox Exporter is a Prometheus exporter that allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP, ICMP and gRPC. It's essential for monitoring external services and endpoints from a user perspective.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux-based operating system</li>\n<li class=\"mobile-list-item\">Prometheus server installed and configured</li>\n<li class=\"mobile-list-item\">Basic understanding of Prometheus and monitoring concepts</li>\n<li class=\"mobile-list-item\">Network access to targets you want to probe</li>\n<li class=\"mobile-list-item\">For systemd service: systemd-based Linux distribution</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"binary-installation\" class=\"mobile-header\">Binary Installation</h3>\n<p class=\"mobile-paragraph\">1. <strong>Download the latest release</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check latest version at https://github.com/prometheus/blackbox_exporter/releases\nVERSION=&quot;0.24.0&quot;\nARCH=&quot;linux-amd64&quot;\n\n# Download binary\nwget https://github.com/prometheus/blackbox_exporter/releases/download/v${VERSION}/blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Extract archive\ntar xvfz blackbox_exporter-${VERSION}.${ARCH}.tar.gz\n\n# Move binary to system path\nsudo mv blackbox_exporter-${VERSION}.${ARCH}/blackbox_exporter /usr/local/bin/\nsudo chown root:root /usr/local/bin/blackbox_exporter\nsudo chmod +x /usr/local/bin/blackbox_exporter</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Create user and directories</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create system user\nsudo useradd --no-create-home --shell /bin/false blackbox_exporter\n\n# Create config directory\nsudo mkdir -p /etc/blackbox_exporter\nsudo chown blackbox_exporter:blackbox_exporter /etc/blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run with Docker\ndocker run -d \\\n  --name blackbox_exporter \\\n  -p 9115:9115 \\\n  -v /path/to/blackbox.yml:/config/blackbox.yml \\\n  prom/blackbox-exporter:latest \\\n  --config.file=/config/blackbox.yml</code></pre>\n      </div>\n    </div>\n<h3 id=\"package-manager-installation\" class=\"mobile-header\">Package Manager Installation</h3>\n<p class=\"mobile-paragraph\"><strong>Ubuntu/Debian</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Not available in default repos, use binary installation</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>RHEL/CentOS/Fedora</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Not available in default repos, use binary installation</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>Arch Linux</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo pacman -S prometheus-blackbox-exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"4-configuration\" class=\"mobile-header\">4. Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/blackbox_exporter/blackbox.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">modules:\n  # HTTP/HTTPS probe\n  http_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      preferred_ip_protocol: &quot;ip4&quot;\n      ip_protocol_fallback: false\n      valid_http_versions: [&quot;HTTP/1.1&quot;, &quot;HTTP/2.0&quot;]\n      valid_status_codes: []  # Defaults to 2xx\n      method: GET\n      follow_redirects: true\n      fail_if_ssl: false\n      fail_if_not_ssl: false\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTPS with specific status codes\n  http_post_2xx:\n    prober: http\n    timeout: 5s\n    http:\n      method: POST\n      headers:\n        Content-Type: application/json\n      body: &#039;{&quot;test&quot;: &quot;data&quot;}&#039;\n      valid_status_codes: [200, 201, 202]\n\n  # TCP probe\n  tcp_connect:\n    prober: tcp\n    timeout: 5s\n\n  # ICMP ping probe\n  icmp:\n    prober: icmp\n    timeout: 5s\n    icmp:\n      preferred_ip_protocol: &quot;ip4&quot;\n\n  # DNS probe\n  dns_udp:\n    prober: dns\n    timeout: 5s\n    dns:\n      preferred_ip_protocol: &quot;ip4&quot;\n      query_name: &quot;www.example.com&quot;\n      query_type: &quot;A&quot;\n      valid_rcodes:\n        - NOERROR\n\n  # SSL certificate check\n  http_ssl_cert:\n    prober: http\n    timeout: 5s\n    http:\n      method: GET\n      fail_if_ssl: false\n      fail_if_not_ssl: true\n      tls_config:\n        insecure_skip_verify: false</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-modules\" class=\"mobile-header\">Advanced Modules</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">modules:\n  # HTTP with authentication\n  http_basic_auth:\n    prober: http\n    timeout: 5s\n    http:\n      basic_auth:\n        username: &quot;monitoring&quot;\n        password: &quot;secure_password&quot;\n      valid_status_codes: [200]\n\n  # HTTP with custom headers\n  http_custom_headers:\n    prober: http\n    timeout: 5s\n    http:\n      headers:\n        X-API-Key: &quot;your-api-key&quot;\n        Accept: &quot;application/json&quot;\n\n  # gRPC probe\n  grpc:\n    prober: grpc\n    timeout: 5s\n    grpc:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # TCP with TLS\n  tcp_tls:\n    prober: tcp\n    timeout: 5s\n    tcp:\n      tls: true\n      tls_config:\n        insecure_skip_verify: false\n\n  # HTTP with regex matching\n  http_content_match:\n    prober: http\n    timeout: 5s\n    http:\n      valid_status_codes: [200]\n      fail_if_body_not_matches_regexp:\n        - &quot;Welcome.*&quot;\n      fail_if_body_matches_regexp:\n        - &quot;Error.*&quot;\n\n  # Slow HTTP probe\n  http_slow:\n    prober: http\n    timeout: 30s\n    http:\n      method: GET</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service\" class=\"mobile-header\">Systemd Service</h3>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/systemd/system/blackbox_exporter.service</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\">[Unit]\nDescription=Blackbox Exporter\nAfter=network-online.target\n\n[Service]\nType=simple\nUser=blackbox_exporter\nGroup=blackbox_exporter\nExecStart=/usr/local/bin/blackbox_exporter \\\n  --config.file=/etc/blackbox_exporter/blackbox.yml \\\n  --web.listen-address=:9115\n\nRestart=on-failure\nRestartSec=5s\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nProtectSystem=strict\nProtectHome=true\nReadWritePaths=/etc/blackbox_exporter\n\n# Required for ICMP probes\nAmbientCapabilities=CAP_NET_RAW\nCapabilityBoundingSet=CAP_NET_RAW\n\n[Install]\nWantedBy=multi-user.target</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Start the service:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo systemctl daemon-reload\nsudo systemctl enable blackbox_exporter\nsudo systemctl start blackbox_exporter\nsudo systemctl status blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"prometheus-configuration\" class=\"mobile-header\">Prometheus Configuration</h2>\n<h3 id=\"configure-prometheus-scrape-jobs\" class=\"mobile-header\">Configure Prometheus Scrape Jobs</h3>\n<p class=\"mobile-paragraph\">Add to <code class=\"mobile-inline-code\">prometheus.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">scrape_configs:\n  # Blackbox exporter itself\n  - job_name: &#039;blackbox&#039;\n    static_configs:\n      - targets: [&#039;localhost:9115&#039;]\n\n  # HTTP/HTTPS monitoring\n  - job_name: &#039;blackbox-http&#039;\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    static_configs:\n      - targets:\n        - https://example.com\n        - https://api.example.com/health\n        - http://internal-service:8080\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # TCP port monitoring\n  - job_name: &#039;blackbox-tcp&#039;\n    metrics_path: /probe\n    params:\n      module: [tcp_connect]\n    static_configs:\n      - targets:\n        - database.example.com:5432\n        - cache.example.com:6379\n        - message-broker.example.com:5672\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # ICMP ping monitoring\n  - job_name: &#039;blackbox-icmp&#039;\n    metrics_path: /probe\n    params:\n      module: [icmp]\n    static_configs:\n      - targets:\n        - gateway.example.com\n        - dns1.example.com\n        - dns2.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115\n\n  # SSL certificate monitoring\n  - job_name: &#039;blackbox-ssl&#039;\n    metrics_path: /probe\n    params:\n      module: [http_ssl_cert]\n    static_configs:\n      - targets:\n        - https://secure.example.com\n        - https://api.example.com\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115</code></pre>\n      </div>\n    </div>\n<h3 id=\"file-based-service-discovery\" class=\"mobile-header\">File-based Service Discovery</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">scrape_configs:\n  - job_name: &#039;blackbox-http-file-sd&#039;\n    metrics_path: /probe\n    params:\n      module: [http_2xx]\n    file_sd_configs:\n      - files:\n        - &#039;/etc/prometheus/blackbox-targets/*.yml&#039;\n    relabel_configs:\n      - source_labels: [__address__]\n        target_label: __param_target\n      - source_labels: [__param_target]\n        target_label: instance\n      - target_label: __address__\n        replacement: localhost:9115</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Target file <code class=\"mobile-inline-code\">/etc/prometheus/blackbox-targets/web.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">- targets:\n  - https://app1.example.com\n  - https://app2.example.com\n  labels:\n    service: web\n    env: production\n\n- targets:\n  - https://staging.example.com\n  labels:\n    service: web\n    env: staging</code></pre>\n      </div>\n    </div>\n<h2 id=\"alert-rules\" class=\"mobile-header\">Alert Rules</h2>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/prometheus/alerts/blackbox.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">groups:\n  - name: blackbox\n    rules:\n      # Website down\n      - alert: WebsiteDown\n        expr: probe_success{job=&quot;blackbox-http&quot;} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;Website down (instance {{ $labels.instance }})&quot;\n          description: &quot;Website {{ $labels.instance }} has been down for more than 5 minutes.&quot;\n\n      # SSL certificate expiry\n      - alert: SSLCertificateExpiringSoon\n        expr: probe_ssl_earliest_cert_expiry - time() &lt; 86400 * 30\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;SSL certificate expiring soon (instance {{ $labels.instance }})&quot;\n          description: &quot;SSL certificate for {{ $labels.instance }} expires in less than 30 days.&quot;\n\n      - alert: SSLCertificateExpired\n        expr: probe_ssl_earliest_cert_expiry - time() &lt; 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;SSL certificate expired (instance {{ $labels.instance }})&quot;\n          description: &quot;SSL certificate for {{ $labels.instance }} has expired.&quot;\n\n      # Slow response time\n      - alert: SlowResponseTime\n        expr: probe_http_duration_seconds{job=&quot;blackbox-http&quot;} &gt; 2\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;Slow HTTP response (instance {{ $labels.instance }})&quot;\n          description: &quot;HTTP response time for {{ $labels.instance }} is {{ $value }}s (&gt; 2s).&quot;\n\n      # TCP port down\n      - alert: TCPPortDown\n        expr: probe_success{job=&quot;blackbox-tcp&quot;} == 0\n        for: 5m\n        labels:\n          severity: critical\n        annotations:\n          summary: &quot;TCP port down (instance {{ $labels.instance }})&quot;\n          description: &quot;TCP port {{ $labels.instance }} has been down for more than 5 minutes.&quot;\n\n      # High packet loss\n      - alert: HighPacketLoss\n        expr: (1 - avg_over_time(probe_success{job=&quot;blackbox-icmp&quot;}[5m])) &gt; 0.1\n        for: 5m\n        labels:\n          severity: warning\n        annotations:\n          summary: &quot;High packet loss (instance {{ $labels.instance }})&quot;\n          description: &quot;Packet loss for {{ $labels.instance }} is {{ $value | humanizePercentage }}.&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"grafana-dashboard\" class=\"mobile-header\">Grafana Dashboard</h2>\n<p class=\"mobile-paragraph\">Import dashboard JSON or create custom dashboard with these queries:</p>\n<div class=\"mobile-code-block\" data-language=\"promql\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">promql</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-promql\"># Probe success rate\nrate(probe_success{job=~&quot;blackbox-.*&quot;}[5m])\n\n# HTTP response time\nprobe_http_duration_seconds{job=&quot;blackbox-http&quot;}\n\n# SSL certificate days until expiry\n(probe_ssl_earliest_cert_expiry - time()) / 86400\n\n# DNS lookup time\nprobe_dns_lookup_time_seconds\n\n# TCP connection time\nprobe_tcp_duration_seconds\n\n# Uptime percentage (last 24h)\navg_over_time(probe_success{job=&quot;blackbox-http&quot;}[24h]) * 100\n\n# Status code distribution\nsum by (status_code) (probe_http_status_code)</code></pre>\n      </div>\n    </div>\n<h2 id=\"7-security-considerations\" class=\"mobile-header\">7. Security Considerations</h2>\n<h3 id=\"network-security\" class=\"mobile-header\">Network Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Firewall rules\nsudo ufw allow from prometheus_server_ip to any port 9115\n\n# iptables\nsudo iptables -A INPUT -p tcp --dport 9115 -s prometheus_server_ip -j ACCEPT</code></pre>\n      </div>\n    </div>\n<h3 id=\"authentication\" class=\"mobile-header\">Authentication</h3>\n<p class=\"mobile-paragraph\">Enable basic auth in blackbox exporter:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate password hash\nhtpasswd -nBC 10 &quot;&quot; | tr -d &#039;:\\n&#039;\n\n# Add to blackbox_exporter command\n--web.config=/etc/blackbox_exporter/web.yml</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">Create <code class=\"mobile-inline-code\">/etc/blackbox_exporter/web.yml</code>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">basic_auth_users:\n  prometheus: $2b$10$...  # bcrypt hash</code></pre>\n      </div>\n    </div>\n<h3 id=\"tls-configuration\" class=\"mobile-header\">TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">tls_server_config:\n  cert_file: /etc/blackbox_exporter/server.crt\n  key_file: /etc/blackbox_exporter/server.key</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"testing-probes\" class=\"mobile-header\">Testing Probes</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test HTTP probe\ncurl &quot;http://localhost:9115/probe?target=https://example.com&amp;module=http_2xx&quot;\n\n# Test with debug\ncurl &quot;http://localhost:9115/probe?target=https://example.com&amp;module=http_2xx&amp;debug=true&quot;\n\n# Check metrics\ncurl http://localhost:9115/metrics</code></pre>\n      </div>\n    </div>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>ICMP permission denied</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set capability\nsudo setcap cap_net_raw+ep /usr/local/bin/blackbox_exporter\n\n# Or run as root (not recommended)</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status blackbox_exporter\n\n# Check logs\nsudo journalctl -u blackbox_exporter -f\n\n# Verify listening port\nsudo netstat -tlnp | grep 9115</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>SSL verification failures</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Temporarily disable verification (testing only)\ntls_config:\n  insecure_skip_verify: true</code></pre>\n      </div>\n    </div>\n<h2 id=\"8-performance-tuning\" class=\"mobile-header\">8. Performance Tuning</h2>\n<h3 id=\"concurrent-probes\" class=\"mobile-header\">Concurrent Probes</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Increase concurrent probes\n--web.max-requests=100</code></pre>\n      </div>\n    </div>\n<h3 id=\"timeout-optimization\" class=\"mobile-header\">Timeout Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Adjust timeouts based on network conditions\nmodules:\n  http_fast:\n    prober: http\n    timeout: 2s\n  http_slow:\n    prober: http\n    timeout: 30s</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"ini\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">ini</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-ini\"># In systemd service file\n[Service]\nLimitNOFILE=65535\nMemoryLimit=256M\nCPUQuota=50%</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-best-practices\" class=\"mobile-header\">Monitoring Best Practices</h2>\n<p class=\"mobile-paragraph\">1. <strong>Probe frequency</strong>: Balance between detection speed and load</p>\n<p class=\"mobile-paragraph\">2. <strong>Timeout values</strong>: Set slightly below scrape interval</p>\n<p class=\"mobile-paragraph\">3. <strong>Module reuse</strong>: Create specific modules for different use cases</p>\n<p class=\"mobile-paragraph\">4. <strong>Geographic distribution</strong>: Deploy multiple blackbox exporters</p>\n<p class=\"mobile-paragraph\">5. <strong>Internal vs external</strong>: Separate probes for internal/external services</p>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/prometheus/blackbox_exporter\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/prometheus/blackbox_exporter/blob/master/example.yml\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Configuration Examples</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://prometheus.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Prometheus Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://grafana.com/grafana/dashboards?search=blackbox\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Grafana Dashboards</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://groups.google.com/forum/#!forum/prometheus-users\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"8 min","wordCount":1453,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"Binary Installation","id":"binary-installation"},{"level":3,"text":"Docker Installation","id":"docker-installation"},{"level":3,"text":"Package Manager Installation","id":"package-manager-installation"},{"level":2,"text":"4. Configuration","id":"4-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Advanced Modules","id":"advanced-modules"},{"level":3,"text":"Systemd Service","id":"systemd-service"},{"level":2,"text":"Prometheus Configuration","id":"prometheus-configuration"},{"level":3,"text":"Configure Prometheus Scrape Jobs","id":"configure-prometheus-scrape-jobs"},{"level":3,"text":"File-based Service Discovery","id":"file-based-service-discovery"},{"level":2,"text":"Alert Rules","id":"alert-rules"},{"level":2,"text":"Grafana Dashboard","id":"grafana-dashboard"},{"level":2,"text":"7. Security Considerations","id":"7-security-considerations"},{"level":3,"text":"Network Security","id":"network-security"},{"level":3,"text":"Authentication","id":"authentication"},{"level":3,"text":"TLS Configuration","id":"tls-configuration"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Testing Probes","id":"testing-probes"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"8. Performance Tuning","id":"8-performance-tuning"},{"level":3,"text":"Concurrent Probes","id":"concurrent-probes"},{"level":3,"text":"Timeout Optimization","id":"timeout-optimization"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring Best Practices","id":"monitoring-best-practices"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-09T06:18:47.588Z","metadataVersion":"2.0"},{"name":"prometheus-blackbox-exporter","displayName":"blackbox-exporter Installation Guide","slug":"prometheus-blackbox-exporter","description":"blackbox-exporter is a free and open-source Prometheus exporter for probing endpoints. Blackbox Exporter allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP and ICMP, essential for monitoring external services with Prometheus","category":"monitoring","subcategory":"monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,9115],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["monitoring","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/monitoring/prometheus-blackbox-exporter","documentationUrl":"https://howtomgr.github.io/monitoring/prometheus-blackbox-exporter","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prometheus-blackbox-exporter","updatedAt":"2025-09-16T17:43:52Z","createdAt":"2025-09-16T08:04:40Z","readmeRaw":"# blackbox-exporter Installation Guide\n\nblackbox-exporter is a free and open-source Prometheus exporter for probing endpoints. Blackbox Exporter allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP and ICMP, essential for monitoring external services with Prometheus\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 100MB for installation\n  - Network: Network access to probe targets\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9115 (default blackbox-exporter port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install blackbox-exporter\nsudo dnf install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install blackbox-exporter\nsudo apt install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo ufw allow 9115\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### Arch Linux\n\n```bash\n# Install blackbox-exporter\nsudo pacman -S prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### Alpine Linux\n\n```bash\n# Install blackbox-exporter\napk add --no-cache prometheus-blackbox-exporter\n\n# Enable and start service\nrc-update add blackbox_exporter default\nrc-service blackbox_exporter start\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install blackbox-exporter\nsudo zypper install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install prometheus-blackbox-exporter\n\n# Start service\nbrew services start prometheus-blackbox-exporter\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install prometheus-blackbox-exporter\n\n# Enable in rc.conf\necho 'blackbox_exporter_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice blackbox_exporter start\n\n# Verify installation\nblackbox_exporter --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install prometheus-blackbox-exporter\n\n# Or using Scoop\nscoop install prometheus-blackbox-exporter\n\n# Verify installation\nblackbox_exporter --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/prometheus-blackbox-exporter\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nblackbox_exporter --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable blackbox_exporter\n\n# Start service\nsudo systemctl start blackbox_exporter\n\n# Stop service\nsudo systemctl stop blackbox_exporter\n\n# Restart service\nsudo systemctl restart blackbox_exporter\n\n# Check status\nsudo systemctl status blackbox_exporter\n\n# View logs\nsudo journalctl -u blackbox_exporter -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add blackbox_exporter default\n\n# Start service\nrc-service blackbox_exporter start\n\n# Stop service\nrc-service blackbox_exporter stop\n\n# Restart service\nrc-service blackbox_exporter restart\n\n# Check status\nrc-service blackbox_exporter status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'blackbox_exporter_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice blackbox_exporter start\n\n# Stop service\nservice blackbox_exporter stop\n\n# Restart service\nservice blackbox_exporter restart\n\n# Check status\nservice blackbox_exporter status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start prometheus-blackbox-exporter\nbrew services stop prometheus-blackbox-exporter\nbrew services restart prometheus-blackbox-exporter\n\n# Check status\nbrew services list | grep prometheus-blackbox-exporter\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start blackbox_exporter\n\n# Stop service\nnet stop blackbox_exporter\n\n# Using PowerShell\nStart-Service blackbox_exporter\nStop-Service blackbox_exporter\nRestart-Service blackbox_exporter\n\n# Check status\nGet-Service blackbox_exporter\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream prometheus-blackbox-exporter_backend {\n    server 127.0.0.1:9115;\n}\n\nserver {\n    listen 80;\n    server_name prometheus-blackbox-exporter.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prometheus-blackbox-exporter.example.com;\n\n    ssl_certificate /etc/ssl/certs/prometheus-blackbox-exporter.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/prometheus-blackbox-exporter.example.com.key;\n\n    location / {\n        proxy_pass http://prometheus-blackbox-exporter_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName prometheus-blackbox-exporter.example.com\n    Redirect permanent / https://prometheus-blackbox-exporter.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName prometheus-blackbox-exporter.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/prometheus-blackbox-exporter.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/prometheus-blackbox-exporter.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9115/\n    ProxyPassReverse / http://127.0.0.1:9115/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend prometheus-blackbox-exporter_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/prometheus-blackbox-exporter.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend prometheus-blackbox-exporter_backend\n\nbackend prometheus-blackbox-exporter_backend\n    balance roundrobin\n    server prometheus-blackbox-exporter1 127.0.0.1:9115 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R prometheus-blackbox-exporter:prometheus-blackbox-exporter /etc/prometheus-blackbox-exporter\nsudo chmod 750 /etc/prometheus-blackbox-exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status blackbox_exporter\n\n# View logs\nsudo journalctl -u blackbox_exporter -f\n\n# Monitor resource usage\ntop -p $(pgrep prometheus-blackbox-exporter)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/prometheus-blackbox-exporter\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/prometheus-blackbox-exporter-backup-$DATE.tar.gz\" /etc/prometheus-blackbox-exporter /var/lib/prometheus-blackbox-exporter\n\necho \"Backup completed: $BACKUP_DIR/prometheus-blackbox-exporter-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop blackbox_exporter\n\n# Restore from backup\ntar -xzf /backup/prometheus-blackbox-exporter/prometheus-blackbox-exporter-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start blackbox_exporter\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u blackbox_exporter -n 100\nsudo tail -f /var/log/prometheus-blackbox-exporter/prometheus-blackbox-exporter.log\n\n# Check configuration\nblackbox_exporter --version\n\n# Check permissions\nls -la /etc/prometheus-blackbox-exporter\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9115\n\n# Test connectivity\ntelnet localhost 9115\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep prometheus-blackbox-exporter)\n\n# Check disk I/O\niotop -p $(pgrep prometheus-blackbox-exporter)\n\n# Check connections\nss -an | grep 9115\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  prometheus-blackbox-exporter:\n    image: prometheus-blackbox-exporter:latest\n    ports:\n      - \"9115:9115\"\n    volumes:\n      - ./config:/etc/prometheus-blackbox-exporter\n      - ./data:/var/lib/prometheus-blackbox-exporter\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update prometheus-blackbox-exporter\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade prometheus-blackbox-exporter\n\n# Arch Linux\nsudo pacman -Syu prometheus-blackbox-exporter\n\n# Alpine Linux\napk update && apk upgrade prometheus-blackbox-exporter\n\n# openSUSE\nsudo zypper update prometheus-blackbox-exporter\n\n# FreeBSD\npkg update && pkg upgrade prometheus-blackbox-exporter\n\n# Always backup before updates\ntar -czf /backup/prometheus-blackbox-exporter-pre-update-$(date +%Y%m%d).tar.gz /etc/prometheus-blackbox-exporter\n\n# Restart after updates\nsudo systemctl restart blackbox_exporter\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/prometheus-blackbox-exporter\n\n# Clean old logs\nfind /var/log/prometheus-blackbox-exporter -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/prometheus-blackbox-exporter\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.prometheus-blackbox-exporter.org/\n- GitHub Repository: https://github.com/prometheus-blackbox-exporter/prometheus-blackbox-exporter\n- Community Forum: https://forum.prometheus-blackbox-exporter.org/\n- Best Practices Guide: https://docs.prometheus-blackbox-exporter.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">blackbox-exporter is a free and open-source Prometheus exporter for probing endpoints. Blackbox Exporter allows blackbox probing of endpoints over HTTP, HTTPS, DNS, TCP and ICMP, essential for monitoring external services with Prometheus</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: Network access to probe targets</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9115 (default blackbox-exporter port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install blackbox-exporter\nsudo dnf install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install blackbox-exporter\nsudo apt install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo ufw allow 9115\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install blackbox-exporter\nsudo pacman -S prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install blackbox-exporter\napk add --no-cache prometheus-blackbox-exporter\n\n# Enable and start service\nrc-update add blackbox_exporter default\nrc-service blackbox_exporter start\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install blackbox-exporter\nsudo zypper install -y prometheus-blackbox-exporter\n\n# Enable and start service\nsudo systemctl enable --now blackbox_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install prometheus-blackbox-exporter\n\n# Start service\nbrew services start prometheus-blackbox-exporter\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install prometheus-blackbox-exporter\n\n# Enable in rc.conf\necho &#039;blackbox_exporter_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice blackbox_exporter start\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install prometheus-blackbox-exporter\n\n# Or using Scoop\nscoop install prometheus-blackbox-exporter\n\n# Verify installation\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/prometheus-blackbox-exporter\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nblackbox_exporter --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable blackbox_exporter\n\n# Start service\nsudo systemctl start blackbox_exporter\n\n# Stop service\nsudo systemctl stop blackbox_exporter\n\n# Restart service\nsudo systemctl restart blackbox_exporter\n\n# Check status\nsudo systemctl status blackbox_exporter\n\n# View logs\nsudo journalctl -u blackbox_exporter -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add blackbox_exporter default\n\n# Start service\nrc-service blackbox_exporter start\n\n# Stop service\nrc-service blackbox_exporter stop\n\n# Restart service\nrc-service blackbox_exporter restart\n\n# Check status\nrc-service blackbox_exporter status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;blackbox_exporter_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice blackbox_exporter start\n\n# Stop service\nservice blackbox_exporter stop\n\n# Restart service\nservice blackbox_exporter restart\n\n# Check status\nservice blackbox_exporter status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start prometheus-blackbox-exporter\nbrew services stop prometheus-blackbox-exporter\nbrew services restart prometheus-blackbox-exporter\n\n# Check status\nbrew services list | grep prometheus-blackbox-exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start blackbox_exporter\n\n# Stop service\nnet stop blackbox_exporter\n\n# Using PowerShell\nStart-Service blackbox_exporter\nStop-Service blackbox_exporter\nRestart-Service blackbox_exporter\n\n# Check status\nGet-Service blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream prometheus-blackbox-exporter_backend {\n    server 127.0.0.1:9115;\n}\n\nserver {\n    listen 80;\n    server_name prometheus-blackbox-exporter.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prometheus-blackbox-exporter.example.com;\n\n    ssl_certificate /etc/ssl/certs/prometheus-blackbox-exporter.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/prometheus-blackbox-exporter.example.com.key;\n\n    location / {\n        proxy_pass http://prometheus-blackbox-exporter_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName prometheus-blackbox-exporter.example.com\n    Redirect permanent / https://prometheus-blackbox-exporter.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName prometheus-blackbox-exporter.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/prometheus-blackbox-exporter.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/prometheus-blackbox-exporter.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9115/\n    ProxyPassReverse / http://127.0.0.1:9115/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend prometheus-blackbox-exporter_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/prometheus-blackbox-exporter.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend prometheus-blackbox-exporter_backend\n\nbackend prometheus-blackbox-exporter_backend\n    balance roundrobin\n    server prometheus-blackbox-exporter1 127.0.0.1:9115 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R prometheus-blackbox-exporter:prometheus-blackbox-exporter /etc/prometheus-blackbox-exporter\nsudo chmod 750 /etc/prometheus-blackbox-exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9115/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status blackbox_exporter\n\n# View logs\nsudo journalctl -u blackbox_exporter -f\n\n# Monitor resource usage\ntop -p $(pgrep prometheus-blackbox-exporter)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/prometheus-blackbox-exporter&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/prometheus-blackbox-exporter-backup-$DATE.tar.gz&quot; /etc/prometheus-blackbox-exporter /var/lib/prometheus-blackbox-exporter\n\necho &quot;Backup completed: $BACKUP_DIR/prometheus-blackbox-exporter-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop blackbox_exporter\n\n# Restore from backup\ntar -xzf /backup/prometheus-blackbox-exporter/prometheus-blackbox-exporter-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u blackbox_exporter -n 100\nsudo tail -f /var/log/prometheus-blackbox-exporter/prometheus-blackbox-exporter.log\n\n# Check configuration\nblackbox_exporter --version\n\n# Check permissions\nls -la /etc/prometheus-blackbox-exporter</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9115\n\n# Test connectivity\ntelnet localhost 9115\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep prometheus-blackbox-exporter)\n\n# Check disk I/O\niotop -p $(pgrep prometheus-blackbox-exporter)\n\n# Check connections\nss -an | grep 9115</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  prometheus-blackbox-exporter:\n    image: prometheus-blackbox-exporter:latest\n    ports:\n      - &quot;9115:9115&quot;\n    volumes:\n      - ./config:/etc/prometheus-blackbox-exporter\n      - ./data:/var/lib/prometheus-blackbox-exporter\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update prometheus-blackbox-exporter\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade prometheus-blackbox-exporter\n\n# Arch Linux\nsudo pacman -Syu prometheus-blackbox-exporter\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade prometheus-blackbox-exporter\n\n# openSUSE\nsudo zypper update prometheus-blackbox-exporter\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade prometheus-blackbox-exporter\n\n# Always backup before updates\ntar -czf /backup/prometheus-blackbox-exporter-pre-update-$(date +%Y%m%d).tar.gz /etc/prometheus-blackbox-exporter\n\n# Restart after updates\nsudo systemctl restart blackbox_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/prometheus-blackbox-exporter\n\n# Clean old logs\nfind /var/log/prometheus-blackbox-exporter -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/prometheus-blackbox-exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.prometheus-blackbox-exporter.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/prometheus-blackbox-exporter/prometheus-blackbox-exporter</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.prometheus-blackbox-exporter.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.prometheus-blackbox-exporter.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1287,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-09T06:16:42.805Z","metadataVersion":"2.0"},{"name":"prometheus-mysqld-exporter","displayName":"mysqld-exporter Installation Guide","slug":"prometheus-mysqld-exporter","description":"mysqld-exporter is a free and open-source Prometheus exporter for MySQL server metrics. MySQL Exporter extracts metrics from MySQL/MariaDB servers for Prometheus monitoring, providing database performance insights","category":"monitoring","subcategory":"monitoring","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443,9104],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["monitoring","containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/monitoring/prometheus-mysqld-exporter","documentationUrl":"https://howtomgr.github.io/monitoring/prometheus-mysqld-exporter","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/prometheus-mysqld-exporter","updatedAt":"2025-09-16T17:43:59Z","createdAt":"2025-09-16T08:04:55Z","readmeRaw":"# mysqld-exporter Installation Guide\n\nmysqld-exporter is a free and open-source Prometheus exporter for MySQL server metrics. MySQL Exporter extracts metrics from MySQL/MariaDB servers for Prometheus monitoring, providing database performance insights\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 128MB minimum\n  - Storage: 50MB for installation\n  - Network: MySQL and HTTP access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9104 (default mysqld-exporter port)\n  - MySQL connection\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mysqld-exporter\nsudo dnf install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install mysqld-exporter\nsudo apt install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo ufw allow 9104\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### Arch Linux\n\n```bash\n# Install mysqld-exporter\nsudo pacman -S prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### Alpine Linux\n\n```bash\n# Install mysqld-exporter\napk add --no-cache prometheus-mysqld-exporter\n\n# Enable and start service\nrc-update add mysqld_exporter default\nrc-service mysqld_exporter start\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install mysqld-exporter\nsudo zypper install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install prometheus-mysqld-exporter\n\n# Start service\nbrew services start prometheus-mysqld-exporter\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install prometheus-mysqld-exporter\n\n# Enable in rc.conf\necho 'mysqld_exporter_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mysqld_exporter start\n\n# Verify installation\nmysqld_exporter --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install prometheus-mysqld-exporter\n\n# Or using Scoop\nscoop install prometheus-mysqld-exporter\n\n# Verify installation\nmysqld_exporter --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/prometheus-mysqld-exporter\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nmysqld_exporter --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable mysqld_exporter\n\n# Start service\nsudo systemctl start mysqld_exporter\n\n# Stop service\nsudo systemctl stop mysqld_exporter\n\n# Restart service\nsudo systemctl restart mysqld_exporter\n\n# Check status\nsudo systemctl status mysqld_exporter\n\n# View logs\nsudo journalctl -u mysqld_exporter -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add mysqld_exporter default\n\n# Start service\nrc-service mysqld_exporter start\n\n# Stop service\nrc-service mysqld_exporter stop\n\n# Restart service\nrc-service mysqld_exporter restart\n\n# Check status\nrc-service mysqld_exporter status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'mysqld_exporter_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice mysqld_exporter start\n\n# Stop service\nservice mysqld_exporter stop\n\n# Restart service\nservice mysqld_exporter restart\n\n# Check status\nservice mysqld_exporter status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start prometheus-mysqld-exporter\nbrew services stop prometheus-mysqld-exporter\nbrew services restart prometheus-mysqld-exporter\n\n# Check status\nbrew services list | grep prometheus-mysqld-exporter\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start mysqld_exporter\n\n# Stop service\nnet stop mysqld_exporter\n\n# Using PowerShell\nStart-Service mysqld_exporter\nStop-Service mysqld_exporter\nRestart-Service mysqld_exporter\n\n# Check status\nGet-Service mysqld_exporter\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream prometheus-mysqld-exporter_backend {\n    server 127.0.0.1:9104;\n}\n\nserver {\n    listen 80;\n    server_name prometheus-mysqld-exporter.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prometheus-mysqld-exporter.example.com;\n\n    ssl_certificate /etc/ssl/certs/prometheus-mysqld-exporter.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/prometheus-mysqld-exporter.example.com.key;\n\n    location / {\n        proxy_pass http://prometheus-mysqld-exporter_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName prometheus-mysqld-exporter.example.com\n    Redirect permanent / https://prometheus-mysqld-exporter.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName prometheus-mysqld-exporter.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/prometheus-mysqld-exporter.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/prometheus-mysqld-exporter.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9104/\n    ProxyPassReverse / http://127.0.0.1:9104/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend prometheus-mysqld-exporter_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/prometheus-mysqld-exporter.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend prometheus-mysqld-exporter_backend\n\nbackend prometheus-mysqld-exporter_backend\n    balance roundrobin\n    server prometheus-mysqld-exporter1 127.0.0.1:9104 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R prometheus-mysqld-exporter:prometheus-mysqld-exporter /etc/prometheus-mysqld-exporter\nsudo chmod 750 /etc/prometheus-mysqld-exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status mysqld_exporter\n\n# View logs\nsudo journalctl -u mysqld_exporter -f\n\n# Monitor resource usage\ntop -p $(pgrep prometheus-mysqld-exporter)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/prometheus-mysqld-exporter\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/prometheus-mysqld-exporter-backup-$DATE.tar.gz\" /etc/prometheus-mysqld-exporter /var/lib/prometheus-mysqld-exporter\n\necho \"Backup completed: $BACKUP_DIR/prometheus-mysqld-exporter-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop mysqld_exporter\n\n# Restore from backup\ntar -xzf /backup/prometheus-mysqld-exporter/prometheus-mysqld-exporter-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start mysqld_exporter\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u mysqld_exporter -n 100\nsudo tail -f /var/log/prometheus-mysqld-exporter/prometheus-mysqld-exporter.log\n\n# Check configuration\nmysqld_exporter --version\n\n# Check permissions\nls -la /etc/prometheus-mysqld-exporter\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9104\n\n# Test connectivity\ntelnet localhost 9104\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep prometheus-mysqld-exporter)\n\n# Check disk I/O\niotop -p $(pgrep prometheus-mysqld-exporter)\n\n# Check connections\nss -an | grep 9104\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  prometheus-mysqld-exporter:\n    image: prometheus-mysqld-exporter:latest\n    ports:\n      - \"9104:9104\"\n    volumes:\n      - ./config:/etc/prometheus-mysqld-exporter\n      - ./data:/var/lib/prometheus-mysqld-exporter\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update prometheus-mysqld-exporter\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade prometheus-mysqld-exporter\n\n# Arch Linux\nsudo pacman -Syu prometheus-mysqld-exporter\n\n# Alpine Linux\napk update && apk upgrade prometheus-mysqld-exporter\n\n# openSUSE\nsudo zypper update prometheus-mysqld-exporter\n\n# FreeBSD\npkg update && pkg upgrade prometheus-mysqld-exporter\n\n# Always backup before updates\ntar -czf /backup/prometheus-mysqld-exporter-pre-update-$(date +%Y%m%d).tar.gz /etc/prometheus-mysqld-exporter\n\n# Restart after updates\nsudo systemctl restart mysqld_exporter\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/prometheus-mysqld-exporter\n\n# Clean old logs\nfind /var/log/prometheus-mysqld-exporter -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/prometheus-mysqld-exporter\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.prometheus-mysqld-exporter.org/\n- GitHub Repository: https://github.com/prometheus-mysqld-exporter/prometheus-mysqld-exporter\n- Community Forum: https://forum.prometheus-mysqld-exporter.org/\n- Best Practices Guide: https://docs.prometheus-mysqld-exporter.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">mysqld-exporter is a free and open-source Prometheus exporter for MySQL server metrics. MySQL Exporter extracts metrics from MySQL/MariaDB servers for Prometheus monitoring, providing database performance insights</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 128MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 50MB for installation</li>\n<li class=\"mobile-list-item\">Network: MySQL and HTTP access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9104 (default mysqld-exporter port)</li>\n<li class=\"mobile-list-item\">MySQL connection</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install mysqld-exporter\nsudo dnf install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install mysqld-exporter\nsudo apt install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo ufw allow 9104\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mysqld-exporter\nsudo pacman -S prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mysqld-exporter\napk add --no-cache prometheus-mysqld-exporter\n\n# Enable and start service\nrc-update add mysqld_exporter default\nrc-service mysqld_exporter start\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install mysqld-exporter\nsudo zypper install -y prometheus-mysqld-exporter\n\n# Enable and start service\nsudo systemctl enable --now mysqld_exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install prometheus-mysqld-exporter\n\n# Start service\nbrew services start prometheus-mysqld-exporter\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install prometheus-mysqld-exporter\n\n# Enable in rc.conf\necho &#039;mysqld_exporter_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mysqld_exporter start\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install prometheus-mysqld-exporter\n\n# Or using Scoop\nscoop install prometheus-mysqld-exporter\n\n# Verify installation\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/prometheus-mysqld-exporter\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nmysqld_exporter --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable mysqld_exporter\n\n# Start service\nsudo systemctl start mysqld_exporter\n\n# Stop service\nsudo systemctl stop mysqld_exporter\n\n# Restart service\nsudo systemctl restart mysqld_exporter\n\n# Check status\nsudo systemctl status mysqld_exporter\n\n# View logs\nsudo journalctl -u mysqld_exporter -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add mysqld_exporter default\n\n# Start service\nrc-service mysqld_exporter start\n\n# Stop service\nrc-service mysqld_exporter stop\n\n# Restart service\nrc-service mysqld_exporter restart\n\n# Check status\nrc-service mysqld_exporter status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;mysqld_exporter_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice mysqld_exporter start\n\n# Stop service\nservice mysqld_exporter stop\n\n# Restart service\nservice mysqld_exporter restart\n\n# Check status\nservice mysqld_exporter status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start prometheus-mysqld-exporter\nbrew services stop prometheus-mysqld-exporter\nbrew services restart prometheus-mysqld-exporter\n\n# Check status\nbrew services list | grep prometheus-mysqld-exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start mysqld_exporter\n\n# Stop service\nnet stop mysqld_exporter\n\n# Using PowerShell\nStart-Service mysqld_exporter\nStop-Service mysqld_exporter\nRestart-Service mysqld_exporter\n\n# Check status\nGet-Service mysqld_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream prometheus-mysqld-exporter_backend {\n    server 127.0.0.1:9104;\n}\n\nserver {\n    listen 80;\n    server_name prometheus-mysqld-exporter.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name prometheus-mysqld-exporter.example.com;\n\n    ssl_certificate /etc/ssl/certs/prometheus-mysqld-exporter.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/prometheus-mysqld-exporter.example.com.key;\n\n    location / {\n        proxy_pass http://prometheus-mysqld-exporter_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName prometheus-mysqld-exporter.example.com\n    Redirect permanent / https://prometheus-mysqld-exporter.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName prometheus-mysqld-exporter.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/prometheus-mysqld-exporter.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/prometheus-mysqld-exporter.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9104/\n    ProxyPassReverse / http://127.0.0.1:9104/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend prometheus-mysqld-exporter_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/prometheus-mysqld-exporter.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend prometheus-mysqld-exporter_backend\n\nbackend prometheus-mysqld-exporter_backend\n    balance roundrobin\n    server prometheus-mysqld-exporter1 127.0.0.1:9104 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R prometheus-mysqld-exporter:prometheus-mysqld-exporter /etc/prometheus-mysqld-exporter\nsudo chmod 750 /etc/prometheus-mysqld-exporter\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9104/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status mysqld_exporter\n\n# View logs\nsudo journalctl -u mysqld_exporter -f\n\n# Monitor resource usage\ntop -p $(pgrep prometheus-mysqld-exporter)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/prometheus-mysqld-exporter&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/prometheus-mysqld-exporter-backup-$DATE.tar.gz&quot; /etc/prometheus-mysqld-exporter /var/lib/prometheus-mysqld-exporter\n\necho &quot;Backup completed: $BACKUP_DIR/prometheus-mysqld-exporter-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop mysqld_exporter\n\n# Restore from backup\ntar -xzf /backup/prometheus-mysqld-exporter/prometheus-mysqld-exporter-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start mysqld_exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u mysqld_exporter -n 100\nsudo tail -f /var/log/prometheus-mysqld-exporter/prometheus-mysqld-exporter.log\n\n# Check configuration\nmysqld_exporter --version\n\n# Check permissions\nls -la /etc/prometheus-mysqld-exporter</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9104\n\n# Test connectivity\ntelnet localhost 9104\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep prometheus-mysqld-exporter)\n\n# Check disk I/O\niotop -p $(pgrep prometheus-mysqld-exporter)\n\n# Check connections\nss -an | grep 9104</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  prometheus-mysqld-exporter:\n    image: prometheus-mysqld-exporter:latest\n    ports:\n      - &quot;9104:9104&quot;\n    volumes:\n      - ./config:/etc/prometheus-mysqld-exporter\n      - ./data:/var/lib/prometheus-mysqld-exporter\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update prometheus-mysqld-exporter\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade prometheus-mysqld-exporter\n\n# Arch Linux\nsudo pacman -Syu prometheus-mysqld-exporter\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade prometheus-mysqld-exporter\n\n# openSUSE\nsudo zypper update prometheus-mysqld-exporter\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade prometheus-mysqld-exporter\n\n# Always backup before updates\ntar -czf /backup/prometheus-mysqld-exporter-pre-update-$(date +%Y%m%d).tar.gz /etc/prometheus-mysqld-exporter\n\n# Restart after updates\nsudo systemctl restart mysqld_exporter</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/prometheus-mysqld-exporter\n\n# Clean old logs\nfind /var/log/prometheus-mysqld-exporter -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/prometheus-mysqld-exporter</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.prometheus-mysqld-exporter.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/prometheus-mysqld-exporter/prometheus-mysqld-exporter</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.prometheus-mysqld-exporter.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.prometheus-mysqld-exporter.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1281,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-09T06:16:42.438Z","metadataVersion":"2.0"}]},"__N_SSG":true}