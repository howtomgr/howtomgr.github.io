{"pageProps":{"guide":{"name":"terraform","displayName":"Terraform","slug":"terraform","description":"Repo for terraform","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/terraform","updatedAt":"2025-09-14T01:31:13Z","createdAt":"2025-09-08T03:16:51Z","readmeRaw":"# Terraform Installation Guide\n\nInfrastructure as Code (IaC) tool for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers. Industry standard for multi-cloud infrastructure management.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- Cloud provider account(s) (AWS, Azure, GCP, etc.)\n- Basic understanding of infrastructure concepts\n- 2GB RAM minimum, 4GB+ recommended for large infrastructures\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install Terraform\nsudo apt update\nsudo apt install -y terraform\n\n# Verify installation\nterraform version\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform\n\n# Verify installation\nterraform version\n```\n\n#### Fedora\n```bash\n# Add HashiCorp repository\nsudo dnf install -y dnf-plugins-core\nsudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo\n\n# Install Terraform\nsudo dnf install -y terraform\n\n# Verify installation\nterraform version\n```\n\n#### Arch Linux\n```bash\n# Install from AUR\nyay -S terraform\n\n# Or from community repository\nsudo pacman -Syu terraform\n\n# Verify installation\nterraform version\n```\n\n#### Alpine Linux\n```bash\n# Install from Alpine repositories\nsudo apk update\nsudo apk add terraform\n\n# Verify installation\nterraform version\n```\n\n### Manual Binary Installation\n```bash\n# Download latest Terraform\nTERRAFORM_VERSION=\"1.6.4\"\ncd /tmp\nwget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n\n# Install unzip if needed\nsudo apt install -y unzip  # Ubuntu/Debian\nsudo yum install -y unzip  # RHEL/CentOS\nsudo dnf install -y unzip  # Fedora\nsudo pacman -S unzip       # Arch Linux\n\n# Extract and install\nunzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\nsudo chmod +x /usr/local/bin/terraform\n\n# Verify installation\nterraform version\n\n# Clean up\nrm terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n```\n\n### Using Docker\n```bash\n# Create alias for Docker-based Terraform\necho 'alias terraform=\"docker run --rm -it -v $(pwd):/workspace -w /workspace hashicorp/terraform:latest\"' >> ~/.bashrc\nsource ~/.bashrc\n\n# Or create comprehensive wrapper script\nsudo tee /usr/local/bin/terraform > /dev/null <<'EOF'\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/workspace \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.config/gcloud:/root/.config/gcloud:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -e AWS_PROFILE \\\n  -e AZURE_SUBSCRIPTION_ID \\\n  -e GOOGLE_APPLICATION_CREDENTIALS \\\n  -w /workspace \\\n  hashicorp/terraform:latest \"$@\"\nEOF\nsudo chmod +x /usr/local/bin/terraform\n\n# Test Docker installation\nterraform version\n```\n\n### Using tfenv (Version Manager)\n```bash\n# Install tfenv for managing multiple Terraform versions\ngit clone https://github.com/tfutils/tfenv.git ~/.tfenv\necho 'export PATH=\"$HOME/.tfenv/bin:$PATH\"' >> ~/.bashrc\nsource ~/.bashrc\n\n# Install and use specific Terraform version\ntfenv install 1.6.4\ntfenv use 1.6.4\n\n# List available versions\ntfenv list-remote\ntfenv list\n\n# Auto-install based on .terraform-version file\necho \"1.6.4\" > .terraform-version\ntfenv install\n```\n\n## Multi-Cloud Provider Setup\n\n### AWS Configuration\n```bash\n# Install AWS CLI\ncurl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\nunzip awscliv2.zip\nsudo ./aws/install\n\n# Configure AWS credentials\naws configure\n# AWS Access Key ID: YOUR_ACCESS_KEY\n# AWS Secret Access Key: YOUR_SECRET_KEY  \n# Default region name: us-west-2\n# Default output format: json\n\n# Alternative: Use IAM roles (recommended for EC2)\n# Instance metadata service automatically provides credentials\n\n# Create Terraform AWS configuration\nmkdir -p ~/terraform/multi-cloud\ncd ~/terraform/multi-cloud\n\ncat > providers.tf <<EOF\nterraform {\n  required_version = \">= 1.5\"\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.0\"\n    }\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.0\"\n    }\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 5.0\"\n    }\n  }\n  \n  # Remote state configuration\n  backend \"s3\" {\n    bucket = \"your-terraform-state-bucket\"\n    key    = \"multi-cloud/terraform.tfstate\"\n    region = \"us-west-2\"\n    \n    # State locking with DynamoDB\n    dynamodb_table = \"terraform-state-lock\"\n    encrypt        = true\n  }\n}\n\n# AWS Provider\nprovider \"aws\" {\n  region = var.aws_region\n  \n  default_tags {\n    tags = {\n      Environment   = var.environment\n      ManagedBy     = \"terraform\"\n      Project       = var.project_name\n      Owner         = var.owner\n    }\n  }\n}\n\n# Azure Provider\nprovider \"azurerm\" {\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n    key_vault {\n      purge_soft_delete_on_destroy = true\n    }\n  }\n}\n\n# Google Cloud Provider\nprovider \"google\" {\n  project = var.gcp_project_id\n  region  = var.gcp_region\n  zone    = var.gcp_zone\n}\nEOF\n```\n\n### Azure Configuration\n```bash\n# Install Azure CLI\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Login to Azure\naz login\n\n# Create service principal for Terraform\naz ad sp create-for-rbac \\\n  --name \"terraform-sp\" \\\n  --role=\"Contributor\" \\\n  --scopes=\"/subscriptions/YOUR_SUBSCRIPTION_ID\"\n\n# Set environment variables (add to ~/.bashrc)\ncat >> ~/.bashrc <<EOF\n# Azure Terraform Authentication\nexport ARM_CLIENT_ID=\"your-client-id\"\nexport ARM_CLIENT_SECRET=\"your-client-secret\"\nexport ARM_SUBSCRIPTION_ID=\"your-subscription-id\"\nexport ARM_TENANT_ID=\"your-tenant-id\"\nEOF\n\nsource ~/.bashrc\n\n# Create Azure Terraform configuration\ncat > azure-main.tf <<EOF\n# Resource Group\nresource \"azurerm_resource_group\" \"main\" {\n  name     = \"\\${var.environment}-rg\"\n  location = var.azure_location\n  \n  tags = {\n    Environment = var.environment\n    ManagedBy   = \"terraform\"\n  }\n}\n\n# Virtual Network\nresource \"azurerm_virtual_network\" \"main\" {\n  name                = \"\\${var.environment}-vnet\"\n  address_space       = [\"10.1.0.0/16\"]\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Subnet\nresource \"azurerm_subnet\" \"internal\" {\n  name                 = \"internal\"\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = [\"10.1.2.0/24\"]\n}\n\n# Network Security Group\nresource \"azurerm_network_security_group\" \"main\" {\n  name                = \"\\${var.environment}-nsg\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"HTTP\"\n    priority                   = 1002\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"80\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"HTTPS\"\n    priority                   = 1003\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"443\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\nEOF\n```\n\n### Google Cloud Configuration\n```bash\n# Install Google Cloud SDK\necho \"deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main\" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\nsudo apt-get update && sudo apt-get install -y google-cloud-cli\n\n# Authenticate\ngcloud auth login\ngcloud config set project YOUR_PROJECT_ID\n\n# Create service account for Terraform\ngcloud iam service-accounts create terraform \\\n  --display-name=\"Terraform Service Account\"\n\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID \\\n  --member=\"serviceAccount:terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\" \\\n  --role=\"roles/editor\"\n\ngcloud iam service-accounts keys create ~/gcp-terraform-key.json \\\n  --iam-account=terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\n\n# Set environment variable\nexport GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/gcp-terraform-key.json\"\necho 'export GOOGLE_APPLICATION_CREDENTIALS=\"$HOME/gcp-terraform-key.json\"' >> ~/.bashrc\n\n# Create GCP Terraform configuration\ncat > gcp-main.tf <<EOF\n# VPC Network\nresource \"google_compute_network\" \"main\" {\n  name                    = \"\\${var.environment}-vpc\"\n  auto_create_subnetworks = false\n  project                 = var.gcp_project_id\n}\n\n# Subnet\nresource \"google_compute_subnetwork\" \"main\" {\n  name          = \"\\${var.environment}-subnet\"\n  ip_cidr_range = \"10.2.0.0/24\"\n  region        = var.gcp_region\n  network       = google_compute_network.main.id\n  project       = var.gcp_project_id\n}\n\n# Firewall rules\nresource \"google_compute_firewall\" \"allow-ssh\" {\n  name    = \"\\${var.environment}-allow-ssh\"\n  network = google_compute_network.main.name\n  project = var.gcp_project_id\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [\"ssh-allowed\"]\n}\n\nresource \"google_compute_firewall\" \"allow-http\" {\n  name    = \"\\${var.environment}-allow-http\"\n  network = google_compute_network.main.name\n  project = var.gcp_project_id\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\", \"443\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [\"http-server\", \"https-server\"]\n}\nEOF\n```\n\n## Security Best Practices\n\n### Secure State Management\n```bash\n# Create S3 backend with encryption and locking\ncat > backend.tf <<EOF\nterraform {\n  backend \"s3\" {\n    bucket         = \"your-terraform-state-bucket\"\n    key            = \"infrastructure/terraform.tfstate\"\n    region         = \"us-west-2\"\n    encrypt        = true\n    kms_key_id     = \"arn:aws:kms:us-west-2:ACCOUNT:key/KEY-ID\"\n    dynamodb_table = \"terraform-state-lock\"\n    \n    # Additional security\n    skip_region_validation      = false\n    skip_credentials_validation = false\n    skip_metadata_api_check     = false\n  }\n}\n\n# DynamoDB table for state locking\nresource \"aws_dynamodb_table\" \"terraform_state_lock\" {\n  name           = \"terraform-state-lock\"\n  billing_mode   = \"PAY_PER_REQUEST\"\n  hash_key       = \"LockID\"\n\n  attribute {\n    name = \"LockID\"\n    type = \"S\"\n  }\n\n  server_side_encryption {\n    enabled = true\n  }\n\n  point_in_time_recovery {\n    enabled = true\n  }\n\n  tags = {\n    Name        = \"Terraform State Lock Table\"\n    Environment = var.environment\n  }\n}\n\n# S3 bucket for state storage\nresource \"aws_s3_bucket\" \"terraform_state\" {\n  bucket        = \"your-terraform-state-bucket\"\n  force_destroy = false\n\n  tags = {\n    Name        = \"Terraform State Bucket\"\n    Environment = var.environment\n  }\n}\n\nresource \"aws_s3_bucket_encryption_configuration\" \"terraform_state_encryption\" {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  rule {\n    apply_server_side_encryption_by_default {\n      kms_master_key_id = aws_kms_key.terraform_bucket_key.arn\n      sse_algorithm     = \"aws:kms\"\n    }\n  }\n}\n\nresource \"aws_s3_bucket_versioning\" \"terraform_state_versioning\" {\n  bucket = aws_s3_bucket.terraform_state.id\n  versioning_configuration {\n    status = \"Enabled\"\n  }\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"terraform_state\" {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\n# KMS key for S3 encryption\nresource \"aws_kms_key\" \"terraform_bucket_key\" {\n  description             = \"KMS key for Terraform state bucket encryption\"\n  deletion_window_in_days = 7\n\n  tags = {\n    Name        = \"Terraform State Bucket Key\"\n    Environment = var.environment\n  }\n}\nEOF\n```\n\n### Variables and Secrets Management\n```bash\n# Create variables.tf with proper typing and validation\ncat > variables.tf <<EOF\n# AWS Variables\nvariable \"aws_region\" {\n  description = \"AWS region for resources\"\n  type        = string\n  default     = \"us-west-2\"\n  validation {\n    condition     = can(regex(\"^[a-z]{2}-[a-z]+-[0-9]{1}$\", var.aws_region))\n    error_message = \"AWS region must be a valid region format.\"\n  }\n}\n\nvariable \"aws_availability_zones\" {\n  description = \"List of AWS availability zones\"\n  type        = list(string)\n  default     = [\"us-west-2a\", \"us-west-2b\", \"us-west-2c\"]\n}\n\n# Azure Variables\nvariable \"azure_location\" {\n  description = \"Azure region for resources\"\n  type        = string\n  default     = \"East US\"\n  validation {\n    condition = contains([\n      \"East US\", \"East US 2\", \"West US\", \"West US 2\", \"West US 3\",\n      \"Central US\", \"North Central US\", \"South Central US\", \"West Central US\",\n      \"Canada Central\", \"Canada East\", \"Brazil South\", \"UK South\", \"UK West\",\n      \"West Europe\", \"North Europe\", \"France Central\", \"Germany West Central\",\n      \"Switzerland North\", \"Norway East\", \"UAE North\", \"South Africa North\",\n      \"Australia East\", \"Australia Southeast\", \"Central India\", \"South India\",\n      \"West India\", \"Japan East\", \"Japan West\", \"Korea Central\", \"Korea South\",\n      \"Southeast Asia\", \"East Asia\"\n    ], var.azure_location)\n    error_message = \"Azure location must be a valid Azure region.\"\n  }\n}\n\n# GCP Variables\nvariable \"gcp_project_id\" {\n  description = \"GCP project ID\"\n  type        = string\n  validation {\n    condition     = length(var.gcp_project_id) > 0\n    error_message = \"GCP project ID cannot be empty.\"\n  }\n}\n\nvariable \"gcp_region\" {\n  description = \"GCP region for resources\"\n  type        = string\n  default     = \"us-central1\"\n}\n\nvariable \"gcp_zone\" {\n  description = \"GCP zone for resources\"\n  type        = string\n  default     = \"us-central1-a\"\n}\n\n# Environment Variables\nvariable \"environment\" {\n  description = \"Environment name\"\n  type        = string\n  default     = \"development\"\n  validation {\n    condition     = contains([\"development\", \"staging\", \"production\"], var.environment)\n    error_message = \"Environment must be development, staging, or production.\"\n  }\n}\n\nvariable \"project_name\" {\n  description = \"Project name for resource naming\"\n  type        = string\n  validation {\n    condition     = length(var.project_name) > 0 && length(var.project_name) <= 20\n    error_message = \"Project name must be between 1 and 20 characters.\"\n  }\n}\n\nvariable \"owner\" {\n  description = \"Owner of the infrastructure\"\n  type        = string\n}\n\n# Networking Variables\nvariable \"vpc_cidr\" {\n  description = \"CIDR block for VPC\"\n  type        = string\n  default     = \"10.0.0.0/16\"\n  validation {\n    condition     = can(cidrhost(var.vpc_cidr, 0))\n    error_message = \"VPC CIDR must be a valid IPv4 CIDR block.\"\n  }\n}\n\n# Instance Variables\nvariable \"instance_type\" {\n  description = \"Instance types for different clouds\"\n  type = object({\n    aws   = string\n    azure = string\n    gcp   = string\n  })\n  default = {\n    aws   = \"t3.micro\"\n    azure = \"Standard_B1s\"\n    gcp   = \"e2-micro\"\n  }\n}\n\n# Sensitive Variables (use terraform.tfvars or environment variables)\nvariable \"database_password\" {\n  description = \"Database password\"\n  type        = string\n  sensitive   = true\n  validation {\n    condition     = length(var.database_password) >= 12\n    error_message = \"Database password must be at least 12 characters.\"\n  }\n}\n\nvariable \"ssh_public_key\" {\n  description = \"SSH public key for instance access\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^ssh-\", var.ssh_public_key))\n    error_message = \"SSH public key must be a valid SSH public key.\"\n  }\n}\nEOF\n\n# Create terraform.tfvars (never commit to version control)\ncat > terraform.tfvars.example <<EOF\n# Copy to terraform.tfvars and fill in your values\nproject_name     = \"myproject\"\nowner           = \"devops-team\"\nenvironment     = \"production\"\n\n# AWS\naws_region = \"us-west-2\"\n\n# Azure  \nazure_location = \"East US\"\n\n# GCP\ngcp_project_id = \"my-gcp-project-id\"\ngcp_region     = \"us-central1\"\ngcp_zone       = \"us-central1-a\"\n\n# Security\ndatabase_password = \"your-secure-database-password\"\nssh_public_key   = \"ssh-rsa AAAAB3NzaC1yc2E...\"\nEOF\n```\n\n### Secrets Management Integration\n```bash\n# HashiCorp Vault integration\ncat > vault.tf <<EOF\n# Vault provider for secrets management\nterraform {\n  required_providers {\n    vault = {\n      source  = \"hashicorp/vault\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n\nprovider \"vault\" {\n  address = var.vault_address\n  token   = var.vault_token\n}\n\n# Read secrets from Vault\ndata \"vault_generic_secret\" \"database\" {\n  path = \"secret/database\"\n}\n\n# Use secrets in resources\nresource \"aws_db_instance\" \"main\" {\n  identifier_prefix = var.project_name\n  \n  username = data.vault_generic_secret.database.data[\"username\"]\n  password = data.vault_generic_secret.database.data[\"password\"]\n  \n  # Other configuration...\n}\nEOF\n\n# AWS Secrets Manager integration\ncat > aws-secrets.tf <<EOF\n# Retrieve secrets from AWS Secrets Manager\ndata \"aws_secretsmanager_secret_version\" \"database_credentials\" {\n  secret_id = \"prod/database/credentials\"\n}\n\nlocals {\n  database_creds = jsondecode(data.aws_secretsmanager_secret_version.database_credentials.secret_string)\n}\n\nresource \"aws_db_instance\" \"main\" {\n  username = local.database_creds.username\n  password = local.database_creds.password\n  \n  # Other configuration...\n}\nEOF\n```\n\n## Advanced Multi-Cloud Architecture\n\n### Cross-Cloud Networking\n```bash\n# Create multi-cloud VPN connection\ncat > networking.tf <<EOF\n# AWS VPC and VPN Gateway\nresource \"aws_vpc\" \"main\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name = \"\\${var.environment}-aws-vpc\"\n  }\n}\n\nresource \"aws_vpn_gateway\" \"main\" {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name = \"\\${var.environment}-aws-vpn-gw\"\n  }\n}\n\n# Azure Virtual Network Gateway\nresource \"azurerm_virtual_network_gateway\" \"main\" {\n  name                = \"\\${var.environment}-azure-vpn-gw\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  type     = \"Vpn\"\n  vpn_type = \"RouteBased\"\n\n  active_active = false\n  enable_bgp    = false\n  sku           = \"VpnGw1\"\n\n  ip_configuration {\n    name                          = \"vnetGatewayConfig\"\n    public_ip_address_id          = azurerm_public_ip.vpn_gateway.id\n    private_ip_address_allocation = \"Dynamic\"\n    subnet_id                     = azurerm_subnet.gateway.id\n  }\n}\n\n# GCP VPN Gateway\nresource \"google_compute_vpn_gateway\" \"main\" {\n  name    = \"\\${var.environment}-gcp-vpn-gw\"\n  network = google_compute_network.main.id\n  project = var.gcp_project_id\n  region  = var.gcp_region\n}\n\n# Cross-cloud VPN tunnels\nresource \"aws_vpn_connection\" \"aws_to_azure\" {\n  vpn_gateway_id      = aws_vpn_gateway.main.id\n  customer_gateway_id = aws_customer_gateway.azure.id\n  type                = \"ipsec.1\"\n  static_routes_only  = true\n\n  tags = {\n    Name = \"\\${var.environment}-aws-to-azure-vpn\"\n  }\n}\n\n# Local values for cross-cloud coordination\nlocals {\n  aws_vpc_cidr   = \"10.0.0.0/16\"\n  azure_vnet_cidr = \"10.1.0.0/16\"\n  gcp_vpc_cidr   = \"10.2.0.0/16\"\n  \n  common_tags = {\n    Environment   = var.environment\n    Project       = var.project_name\n    ManagedBy     = \"terraform\"\n    Owner         = var.owner\n    CreatedAt     = timestamp()\n  }\n}\nEOF\n```\n\n### Global Load Balancing\n```bash\n# Multi-cloud global load balancer using Cloudflare\ncat > global-lb.tf <<EOF\nterraform {\n  required_providers {\n    cloudflare = {\n      source  = \"cloudflare/cloudflare\"\n      version = \"~> 4.0\"\n    }\n  }\n}\n\nprovider \"cloudflare\" {\n  api_token = var.cloudflare_api_token\n}\n\n# Cloudflare zone\ndata \"cloudflare_zone\" \"main\" {\n  name = var.domain_name\n}\n\n# AWS ALB DNS record\nresource \"cloudflare_record\" \"aws_lb\" {\n  zone_id = data.cloudflare_zone.main.id\n  name    = \"aws\"\n  value   = aws_lb.main.dns_name\n  type    = \"CNAME\"\n  ttl     = 300\n\n  comment = \"AWS Application Load Balancer\"\n}\n\n# Azure Load Balancer DNS record  \nresource \"cloudflare_record\" \"azure_lb\" {\n  zone_id = data.cloudflare_zone.main.id\n  name    = \"azure\"\n  value   = azurerm_public_ip.lb.fqdn\n  type    = \"CNAME\"\n  ttl     = 300\n\n  comment = \"Azure Load Balancer\"\n}\n\n# GCP Load Balancer DNS record\nresource \"cloudflare_record\" \"gcp_lb\" {\n  zone_id = data.cloudflare_zone.main.id\n  name    = \"gcp\"\n  value   = google_compute_global_address.main.address\n  type    = \"A\"\n  ttl     = 300\n\n  comment = \"GCP Global Load Balancer\"\n}\n\n# Global load balancer with health checks and failover\nresource \"cloudflare_load_balancer\" \"global\" {\n  zone_id = data.cloudflare_zone.main.id\n  name    = \"global-lb\"\n  \n  fallback_pool_id = cloudflare_load_balancer_pool.backup.id\n  default_pool_ids = [\n    cloudflare_load_balancer_pool.primary.id,\n    cloudflare_load_balancer_pool.secondary.id\n  ]\n\n  description = \"Multi-cloud global load balancer\"\n  ttl         = 30\n  proxied     = true\n\n  adaptive_routing {\n    failover_across_pools = true\n  }\n\n  location_strategy {\n    prefer_ecs = \"never\"\n    mode       = \"resolver_ip\"\n  }\n}\n\n# Primary pool (AWS)\nresource \"cloudflare_load_balancer_pool\" \"primary\" {\n  name = \"aws-primary\"\n\n  origins {\n    name    = \"aws-west\"\n    address = aws_lb.main.dns_name\n    enabled = true\n  }\n\n  monitor              = cloudflare_load_balancer_monitor.http.id\n  description          = \"AWS West Coast\"\n  enabled              = true\n  minimum_origins      = 1\n  notification_email   = \"alerts@example.com\"\n}\n\n# Secondary pool (Azure)\nresource \"cloudflare_load_balancer_pool\" \"secondary\" {\n  name = \"azure-secondary\"\n\n  origins {\n    name    = \"azure-east\"\n    address = azurerm_public_ip.lb.ip_address\n    enabled = true\n  }\n\n  monitor         = cloudflare_load_balancer_monitor.http.id\n  description     = \"Azure East Coast\"\n  enabled         = true\n  minimum_origins = 1\n}\n\n# Health monitor\nresource \"cloudflare_load_balancer_monitor\" \"http\" {\n  expected_codes = \"200\"\n  method         = \"GET\"\n  timeout        = 7\n  path           = \"/health\"\n  interval       = 60\n  retries        = 3\n  description    = \"HTTP health check\"\n\n  header {\n    header = \"Host\"\n    values = [\"example.com\"]\n  }\n}\nEOF\n```\n\n## CI/CD Integration\n\n### GitHub Actions Workflow\n```bash\nmkdir -p .github/workflows\ncat > .github/workflows/terraform.yml <<EOF\nname: Terraform Multi-Cloud Deployment\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  TF_VERSION: 1.6.4\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment: [development, staging, production]\n        \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v3\n      with:\n        terraform_version: \\${{ env.TF_VERSION }}\n        cli_config_credentials_token: \\${{ secrets.TF_CLOUD_TOKEN }}\n    \n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v4\n      with:\n        aws-access-key-id: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-west-2\n    \n    - name: Configure Azure credentials\n      uses: azure/login@v1\n      with:\n        creds: \\${{ secrets.AZURE_CREDENTIALS }}\n    \n    - name: Configure GCP credentials\n      uses: google-github-actions/setup-gcloud@v1\n      with:\n        service_account_key: \\${{ secrets.GCP_SA_KEY }}\n        project_id: \\${{ secrets.GCP_PROJECT_ID }}\n    \n    - name: Terraform Format Check\n      run: terraform fmt -check -recursive\n    \n    - name: Terraform Initialize\n      run: terraform init\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Plan\n      run: terraform plan -var-file=\"\\${{ matrix.environment }}.tfvars\"\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Apply (Production)\n      if: github.ref == 'refs/heads/main' && matrix.environment == 'production'\n      run: terraform apply -auto-approve -var-file=\"production.tfvars\"\n      working-directory: environments/production\n    \n    - name: Terraform Plan Status\n      if: steps.plan.outcome == 'failure'\n      run: exit 1\n    \n    - name: Security Scan with Checkov\n      uses: bridgecrewio/checkov-action@master\n      with:\n        directory: .\n        framework: terraform\n        output_format: sarif\n        output_file_path: checkov.sarif\n    \n    - name: Upload Checkov results to GitHub\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: checkov.sarif\nEOF\n```\n\n### GitLab CI Integration\n```bash\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - validate\n  - plan\n  - apply\n  - destroy\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_VERSION: \"1.6.4\"\n  TF_IN_AUTOMATION: \"true\"\n\ncache:\n  key: \"\\${TF_ROOT}\"\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform fmt -check -recursive\n    - terraform validate\n    - |\n      for dir in environments/*/; do\n        cd \"\\$dir\"\n        terraform validate\n        cd -\n      done\n  rules:\n    - if: '\\$CI_MERGE_REQUEST_IID'\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\nplan:development:\n  stage: plan\n  script:\n    - cd environments/development\n    - terraform plan -var-file=\"development.tfvars\" -out=\"development.tfplan\"\n  artifacts:\n    paths:\n      - environments/development/development.tfplan\n    expire_in: 1 week\n  rules:\n    - if: '\\$CI_MERGE_REQUEST_IID'\n    - if: '\\$CI_COMMIT_BRANCH == \"develop\"'\n\nplan:production:\n  stage: plan\n  script:\n    - cd environments/production\n    - terraform plan -var-file=\"production.tfvars\" -out=\"production.tfplan\"\n  artifacts:\n    paths:\n      - environments/production/production.tfplan\n    expire_in: 1 week\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n\napply:development:\n  stage: apply\n  script:\n    - cd environments/development\n    - terraform apply -input=false \"development.tfplan\"\n  dependencies:\n    - plan:development\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \"develop\"'\n      when: manual\n\napply:production:\n  stage: apply\n  script:\n    - cd environments/production\n    - terraform apply -input=false \"production.tfplan\"\n  dependencies:\n    - plan:production\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH'\n      when: manual\n\ndestroy:\n  stage: destroy\n  script:\n    - terraform destroy -auto-approve -var-file=\"\\${ENVIRONMENT}.tfvars\"\n  rules:\n    - if: '\\$CI_COMMIT_BRANCH'\n      when: manual\n  variables:\n    ENVIRONMENT: \"development\"  # Change as needed\nEOF\n```\n\n## Modules and Best Practices\n\n### Reusable Module Structure\n```bash\n# Create module directory structure\nmkdir -p modules/compute/{aws,azure,gcp}\n\n# AWS Compute Module\ncat > modules/compute/aws/main.tf <<EOF\n# AWS EC2 Instance Module\nresource \"aws_instance\" \"main\" {\n  count                  = var.instance_count\n  ami                    = data.aws_ami.ubuntu.id\n  instance_type          = var.instance_type\n  key_name              = aws_key_pair.main.key_name\n  vpc_security_group_ids = [aws_security_group.main.id]\n  subnet_id             = var.subnet_id\n\n  user_data = templatefile(\"\\${path.module}/user-data.sh\", {\n    hostname = \"\\${var.name_prefix}-\\${count.index + 1}\"\n  })\n\n  root_block_device {\n    volume_type           = \"gp3\"\n    volume_size           = var.disk_size\n    encrypted             = true\n    delete_on_termination = true\n  }\n\n  metadata_options {\n    http_endpoint = \"enabled\"\n    http_tokens   = \"required\"  # IMDSv2 only\n    http_put_response_hop_limit = 1\n  }\n\n  tags = merge(var.common_tags, {\n    Name = \"\\${var.name_prefix}-\\${count.index + 1}\"\n    Type = \"compute\"\n  })\n}\n\n# Security Group\nresource \"aws_security_group\" \"main\" {\n  name_prefix = \"\\${var.name_prefix}-\"\n  vpc_id      = var.vpc_id\n\n  ingress {\n    description = \"SSH\"\n    from_port   = 22\n    to_port     = 22\n    protocol    = \"tcp\"\n    cidr_blocks = [var.vpc_cidr]\n  }\n\n  ingress {\n    description = \"HTTP\"\n    from_port   = 80\n    to_port     = 80\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  ingress {\n    description = \"HTTPS\"\n    from_port   = 443\n    to_port     = 443\n    protocol    = \"tcp\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = \"-1\"\n    cidr_blocks = [\"0.0.0.0/0\"]\n  }\n\n  tags = var.common_tags\n}\n\n# Key pair\nresource \"aws_key_pair\" \"main\" {\n  key_name   = \"\\${var.name_prefix}-keypair\"\n  public_key = var.ssh_public_key\n\n  tags = var.common_tags\n}\n\n# Data source for latest Ubuntu AMI\ndata \"aws_ami\" \"ubuntu\" {\n  most_recent = true\n  owners      = [\"099720109477\"] # Canonical\n\n  filter {\n    name   = \"name\"\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*\"]\n  }\n\n  filter {\n    name   = \"virtualization-type\"\n    values = [\"hvm\"]\n  }\n}\nEOF\n\n# Module variables\ncat > modules/compute/aws/variables.tf <<EOF\nvariable \"instance_count\" {\n  description = \"Number of instances to create\"\n  type        = number\n  default     = 1\n}\n\nvariable \"instance_type\" {\n  description = \"AWS instance type\"\n  type        = string\n  default     = \"t3.micro\"\n}\n\nvariable \"disk_size\" {\n  description = \"Root disk size in GB\"\n  type        = number\n  default     = 20\n}\n\nvariable \"name_prefix\" {\n  description = \"Name prefix for resources\"\n  type        = string\n}\n\nvariable \"vpc_id\" {\n  description = \"VPC ID\"\n  type        = string\n}\n\nvariable \"subnet_id\" {\n  description = \"Subnet ID for instances\"\n  type        = string\n}\n\nvariable \"vpc_cidr\" {\n  description = \"VPC CIDR block\"\n  type        = string\n}\n\nvariable \"ssh_public_key\" {\n  description = \"SSH public key\"\n  type        = string\n}\n\nvariable \"common_tags\" {\n  description = \"Common tags for all resources\"\n  type        = map(string)\n  default     = {}\n}\nEOF\n\n# Module outputs\ncat > modules/compute/aws/outputs.tf <<EOF\noutput \"instance_ids\" {\n  description = \"List of instance IDs\"\n  value       = aws_instance.main[*].id\n}\n\noutput \"instance_ips\" {\n  description = \"List of instance private IP addresses\"\n  value       = aws_instance.main[*].private_ip\n}\n\noutput \"instance_public_ips\" {\n  description = \"List of instance public IP addresses\"\n  value       = aws_instance.main[*].public_ip\n}\n\noutput \"security_group_id\" {\n  description = \"Security group ID\"\n  value       = aws_security_group.main.id\n}\nEOF\n```\n\n### Environment-Specific Configurations\n```bash\n# Create environment directory structure\nmkdir -p environments/{development,staging,production}\n\n# Development environment\ncat > environments/development/main.tf <<EOF\n# Development Environment Configuration\nmodule \"aws_infrastructure\" {\n  source = \"../../modules/infrastructure/aws\"\n  \n  environment     = \"development\"\n  instance_type   = \"t3.micro\"\n  min_size       = 1\n  max_size       = 2\n  disk_size      = 20\n  \n  common_tags = local.common_tags\n}\n\nmodule \"azure_infrastructure\" {\n  source = \"../../modules/infrastructure/azure\"\n  \n  environment   = \"development\"\n  vm_size      = \"Standard_B1s\"\n  instance_count = 1\n  \n  common_tags = local.common_tags\n}\n\nlocals {\n  common_tags = {\n    Environment   = \"development\"\n    Project       = var.project_name\n    ManagedBy     = \"terraform\"\n    Owner         = var.owner\n    CostCenter    = \"development\"\n  }\n}\nEOF\n\ncat > environments/development/development.tfvars <<EOF\n# Development Environment Variables\nproject_name = \"myproject-dev\"\nenvironment  = \"development\"\nowner       = \"devops-team\"\n\n# AWS\naws_region = \"us-west-2\"\ninstance_type = {\n  aws   = \"t3.micro\"\n  azure = \"Standard_B1s\" \n  gcp   = \"e2-micro\"\n}\n\n# Networking\nvpc_cidr = \"10.0.0.0/16\"\n\n# Development-specific settings\nenable_detailed_monitoring = false\nbackup_retention_days     = 7\nlog_retention_days       = 30\nEOF\n\n# Production environment\ncat > environments/production/main.tf <<EOF\n# Production Environment Configuration\nmodule \"aws_infrastructure\" {\n  source = \"../../modules/infrastructure/aws\"\n  \n  environment     = \"production\"\n  instance_type   = \"t3.large\"\n  min_size       = 3\n  max_size       = 10\n  disk_size      = 100\n  \n  enable_monitoring = true\n  backup_enabled   = true\n  \n  common_tags = local.common_tags\n}\n\nmodule \"azure_infrastructure\" {\n  source = \"../../modules/infrastructure/azure\"\n  \n  environment    = \"production\"\n  vm_size       = \"Standard_D2s_v3\"\n  instance_count = 3\n  \n  enable_backup = true\n  \n  common_tags = local.common_tags\n}\n\nmodule \"gcp_infrastructure\" {\n  source = \"../../modules/infrastructure/gcp\"\n  \n  environment    = \"production\"\n  machine_type  = \"e2-standard-2\"\n  instance_count = 3\n  \n  enable_backup = true\n  \n  common_tags = local.common_tags\n}\n\nlocals {\n  common_tags = {\n    Environment   = \"production\"\n    Project       = var.project_name\n    ManagedBy     = \"terraform\"\n    Owner         = var.owner\n    CostCenter    = \"production\"\n    Compliance    = \"SOC2\"\n  }\n}\nEOF\n```\n\n## Security Scanning and Compliance\n\n### Pre-commit Hooks\n```bash\n# Install pre-commit\npip3 install pre-commit\n\n# Create .pre-commit-config.yaml\ncat > .pre-commit-config.yaml <<EOF\nrepos:\n- repo: https://github.com/antonbabenko/pre-commit-terraform\n  rev: v1.83.5\n  hooks:\n    - id: terraform_fmt\n    - id: terraform_validate\n    - id: terraform_docs\n    - id: terraform_tflint\n      args:\n        - --args=--config=__GIT_WORKING_DIR__/.tflint.hcl\n    - id: terraform_checkov\n      args:\n        - --args=--config-file __GIT_WORKING_DIR__/.checkov.yaml\n    - id: terraform_trivy\n\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.4.0\n  hooks:\n    - id: trailing-whitespace\n    - id: end-of-file-fixer\n    - id: check-yaml\n    - id: check-added-large-files\n    - id: check-merge-conflict\nEOF\n\n# Install pre-commit hooks\npre-commit install\n\n# Create security scanning configuration\ncat > .checkov.yaml <<EOF\nframework:\n  - terraform\n  - secrets\n\ncheck:\n  - CKV_AWS_79  # Ensure Instance Metadata Service Version 1 is not enabled\n  - CKV_AWS_8   # Ensure all data stored in the Launch configuration EBS is securely encrypted at rest\n  - CKV_AWS_3   # Ensure all data stored in the Launch configuration EBS is securely encrypted at rest\n\nskip-check:\n  - CKV_AWS_79  # Skip if IMDSv1 is required for legacy applications\n\noutput: cli\nquiet: false\ncompact: false\nEOF\n\n# TFLint configuration\ncat > .tflint.hcl <<EOF\nplugin \"aws\" {\n    enabled = true\n    version = \"0.21.2\"\n    source  = \"github.com/terraform-linters/tflint-ruleset-aws\"\n}\n\nplugin \"azurerm\" {\n    enabled = true\n    version = \"0.21.0\"\n    source  = \"github.com/terraform-linters/tflint-ruleset-azurerm\"\n}\n\nplugin \"google\" {\n    enabled = true\n    version = \"0.21.0\"\n    source  = \"github.com/terraform-linters/tflint-ruleset-google\"\n}\n\nrule \"aws_instance_invalid_type\" {\n  enabled = true\n}\n\nrule \"aws_instance_previous_type\" {\n  enabled = true\n}\n\nrule \"terraform_unused_declarations\" {\n  enabled = true\n}\n\nrule \"terraform_naming_convention\" {\n  enabled = true\n  format  = \"snake_case\"\n}\nEOF\n```\n\n## Terraform Workspace Management\n\n### Multi-Environment Workflows\n```bash\n# Create and manage workspaces\nterraform workspace new development\nterraform workspace new staging\nterraform workspace new production\n\n# List workspaces\nterraform workspace list\n\n# Switch workspace\nterraform workspace select production\n\n# Show current workspace\nterraform workspace show\n\n# Workspace-specific configurations\ncat > workspace-vars.tf <<EOF\nlocals {\n  workspace_config = {\n    development = {\n      instance_type = \"t3.micro\"\n      min_size     = 1\n      max_size     = 2\n      environment  = \"dev\"\n    }\n    staging = {\n      instance_type = \"t3.small\"\n      min_size     = 2\n      max_size     = 4\n      environment  = \"staging\"\n    }\n    production = {\n      instance_type = \"t3.large\"\n      min_size     = 3\n      max_size     = 10\n      environment  = \"prod\"\n    }\n  }\n  \n  current_config = local.workspace_config[terraform.workspace]\n}\n\n# Use workspace-specific configuration\nresource \"aws_instance\" \"web\" {\n  count         = local.current_config.min_size\n  instance_type = local.current_config.instance_type\n  \n  tags = {\n    Name        = \"\\${local.current_config.environment}-web-\\${count.index + 1}\"\n    Environment = local.current_config.environment\n    Workspace   = terraform.workspace\n  }\n}\nEOF\n```\n\n### State Management Best Practices\n```bash\n# Remote state configuration with different backends\ncat > backend-configs/s3.conf <<EOF\nbucket         = \"terraform-state-bucket\"\nkey            = \"infrastructure/terraform.tfstate\"\nregion         = \"us-west-2\"\nencrypt        = true\nkms_key_id     = \"arn:aws:kms:us-west-2:ACCOUNT:key/KEY-ID\"\ndynamodb_table = \"terraform-state-lock\"\nEOF\n\ncat > backend-configs/azurerm.conf <<EOF\nresource_group_name  = \"terraform-state-rg\"\nstorage_account_name = \"terraformstatestorage\"\ncontainer_name      = \"tfstate\"\nkey                 = \"infrastructure.terraform.tfstate\"\nEOF\n\ncat > backend-configs/gcs.conf <<EOF\nbucket  = \"terraform-state-bucket\"\nprefix  = \"infrastructure/state\"\nEOF\n\n# Initialize with specific backend\nterraform init -backend-config=backend-configs/s3.conf\n\n# Import existing resources\nterraform import aws_instance.web i-1234567890abcdef0\nterraform import azurerm_virtual_machine.main /subscriptions/.../resourceGroups/.../providers/Microsoft.Compute/virtualMachines/vm-name\n\n# State manipulation commands\nterraform state list\nterraform state show aws_instance.web\nterraform state mv aws_instance.web aws_instance.web_server\nterraform state rm aws_instance.old\n```\n\n## Security Hardening\n\n### Credential Management\n```bash\n# Use environment variables for credentials (never hardcode)\ncat > .env.example <<EOF\n# AWS\nAWS_ACCESS_KEY_ID=your_access_key\nAWS_SECRET_ACCESS_KEY=your_secret_key\nAWS_DEFAULT_REGION=us-west-2\n\n# Azure\nARM_CLIENT_ID=your_client_id\nARM_CLIENT_SECRET=your_client_secret\nARM_SUBSCRIPTION_ID=your_subscription_id\nARM_TENANT_ID=your_tenant_id\n\n# GCP\nGOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account-key.json\nGOOGLE_PROJECT=your_project_id\nGOOGLE_REGION=us-central1\n\n# Terraform Cloud/Enterprise\nTF_CLOUD_TOKEN=your_terraform_cloud_token\nEOF\n\n# Use IAM roles instead of access keys (AWS)\ncat > iam-role.tf <<EOF\n# IAM role for Terraform execution (when running on EC2)\nresource \"aws_iam_role\" \"terraform_execution\" {\n  name = \"TerraformExecutionRole\"\n\n  assume_role_policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Action = \"sts:AssumeRole\"\n        Effect = \"Allow\"\n        Principal = {\n          Service = \"ec2.amazonaws.com\"\n        }\n      },\n    ]\n  })\n}\n\n# Attach policies with least privilege\nresource \"aws_iam_role_policy\" \"terraform_execution\" {\n  name = \"TerraformExecutionPolicy\"\n  role = aws_iam_role.terraform_execution.id\n\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Statement = [\n      {\n        Effect = \"Allow\"\n        Action = [\n          \"ec2:*\",\n          \"vpc:*\",\n          \"iam:PassRole\",\n          \"s3:GetObject\",\n          \"s3:PutObject\"\n        ]\n        Resource = \"*\"\n      }\n    ]\n  })\n}\nEOF\n```\n\n### Policy as Code\n```bash\n# OPA (Open Policy Agent) integration\ncat > policy/security.rego <<EOF\npackage terraform.security\n\n# Deny instances without encryption\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == \"aws_instance\"\n    resource.change.after.root_block_device[_].encrypted == false\n    reason := \"AWS instances must have encrypted root volumes\"\n}\n\n# Deny public S3 buckets\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == \"aws_s3_bucket_public_access_block\"\n    resource.change.after.block_public_acls == false\n    reason := \"S3 buckets must block public access\"\n}\n\n# Require specific instance types in production\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == \"aws_instance\"\n    instance_type := resource.change.after.instance_type\n    not startswith(instance_type, \"t3.\")\n    not startswith(instance_type, \"m5.\")\n    workspace := input.terraform_version.workspace\n    workspace == \"production\"\n    reason := \"Production instances must use approved instance types\"\n}\nEOF\n\n# Conftest for policy validation\n# Install conftest\nCONFTEST_VERSION=\"0.46.0\"\nwget https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VERSION}/conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz\ntar xzf conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz\nsudo mv conftest /usr/local/bin/\n\n# Validate Terraform plan against policies\nterraform plan -out=tfplan\nterraform show -json tfplan > tfplan.json\nconftest test tfplan.json --policy policy/\n```\n\n### Compliance and Governance\n```bash\n# Sentinel policy example (Terraform Cloud/Enterprise)\ncat > sentinel/require-encryption.sentinel <<EOF\nimport \"tfplan/v2\" as tfplan\nimport \"strings\"\n\n# Main rule\nmain = rule {\n    all tfplan.resource_changes as _, changes {\n        changes.type is \"aws_instance\" implies\n            changes.change.after.root_block_device[0].encrypted is true\n    }\n}\n\n# Helper function\nis_encrypted = func(resource) {\n    return resource.change.after.root_block_device[0].encrypted else false\n}\nEOF\n\n# Cost estimation with Infracost\n# Install Infracost\ncurl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh\n\n# Configure Infracost\ninfracost auth login\n\n# Generate cost estimate\ninfracost breakdown --path .\ninfracost diff --path . --compare-to main\n```\n\n## Disaster Recovery and Business Continuity\n\n### Multi-Region Deployment\n```bash\ncat > multi-region.tf <<EOF\n# Multi-region deployment with disaster recovery\nmodule \"primary_region\" {\n  source = \"./modules/infrastructure\"\n  \n  providers = {\n    aws = aws.us-west-2\n  }\n  \n  environment = var.environment\n  region     = \"us-west-2\"\n  is_primary = true\n  \n  # Primary region configuration\n  instance_count    = var.primary_instance_count\n  database_backup  = true\n  cross_region_backup = true\n}\n\nmodule \"disaster_recovery_region\" {\n  source = \"./modules/infrastructure\"\n  \n  providers = {\n    aws = aws.us-east-1\n  }\n  \n  environment = var.environment\n  region     = \"us-east-1\"\n  is_primary = false\n  \n  # DR region configuration\n  instance_count = var.dr_instance_count\n  database_mode = \"read_replica\"\n  \n  # Dependency on primary region\n  depends_on = [module.primary_region]\n}\n\n# Provider configurations for multiple regions\nprovider \"aws\" {\n  alias  = \"us-west-2\"\n  region = \"us-west-2\"\n}\n\nprovider \"aws\" {\n  alias  = \"us-east-1\"\n  region = \"us-east-1\"\n}\n\n# Cross-region replication\nresource \"aws_s3_bucket_replication_configuration\" \"main\" {\n  role   = aws_iam_role.replication.arn\n  bucket = module.primary_region.s3_bucket_id\n\n  rule {\n    id     = \"replicate-everything\"\n    status = \"Enabled\"\n\n    destination {\n      bucket        = module.disaster_recovery_region.s3_bucket_arn\n      storage_class = \"STANDARD_IA\"\n    }\n  }\n\n  depends_on = [aws_s3_bucket_versioning.main]\n}\nEOF\n```\n\n### Backup and Recovery Automation\n```bash\n# Automated backup script for Terraform state and configurations\nsudo tee /usr/local/bin/terraform-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/terraform\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{state,configs,plans}\n\n# Backup Terraform configurations\nfind /opt/terraform -name \"*.tf\" -o -name \"*.tfvars\" | while read tf_file; do\n    relative_path=$(echo $tf_file | sed 's|^/opt/terraform/||')\n    mkdir -p ${BACKUP_DIR}/configs/$(dirname $relative_path)\n    cp \"$tf_file\" ${BACKUP_DIR}/configs/$relative_path\ndone\n\n# Backup state files (if using local backend)\nfind /opt/terraform -name \"terraform.tfstate*\" | while read state_file; do\n    relative_path=$(echo $state_file | sed 's|^/opt/terraform/||')\n    mkdir -p ${BACKUP_DIR}/state/$(dirname $relative_path)\n    cp \"$state_file\" ${BACKUP_DIR}/state/$relative_path\ndone\n\n# Backup remote state (if using S3)\naws s3 sync s3://terraform-state-bucket/ ${BACKUP_DIR}/remote-state/\n\n# Create archive\ntar -czf ${BACKUP_DIR}/terraform-complete-backup-${DATE}.tar.gz -C ${BACKUP_DIR} configs state remote-state\n\n# Upload to multiple cloud storage\naws s3 cp ${BACKUP_DIR}/terraform-complete-backup-${DATE}.tar.gz s3://terraform-backups/\naz storage blob upload --file ${BACKUP_DIR}/terraform-complete-backup-${DATE}.tar.gz --container-name terraform-backups --name terraform-complete-backup-${DATE}.tar.gz\ngsutil cp ${BACKUP_DIR}/terraform-complete-backup-${DATE}.tar.gz gs://terraform-backups/\n\n# Keep only last 30 backups\nfind ${BACKUP_DIR} -name \"terraform-complete-backup-*.tar.gz\" -mtime +30 -delete\n\necho \"Terraform backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/terraform-backup.sh\n\n# Schedule daily backup\necho \"0 1 * * * root /usr/local/bin/terraform-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Verification and Testing\n\n### Comprehensive Testing\n```bash\n# Test Terraform configuration\nterraform fmt -check -recursive\nterraform validate\n\n# Test across all environments\nfor env in development staging production; do\n    echo \"Testing $env environment...\"\n    cd environments/$env\n    terraform init\n    terraform validate\n    terraform plan -var-file=\"$env.tfvars\"\n    cd ../..\ndone\n\n# Security scanning\ncheckov --framework terraform --directory .\nterrascan scan -t aws\ntrivy config .\n\n# Cost estimation\ninfracost breakdown --path .\n\n# Compliance checking\nterraform-compliance -p . -f compliance-tests/\n\n# Integration testing with Terratest (Go)\ncat > test/integration_test.go <<EOF\npackage test\n\nimport (\n    \"testing\"\n    \"github.com/gruntwork-io/terratest/modules/terraform\"\n    \"github.com/stretchr/testify/assert\"\n)\n\nfunc TestTerraformAWSExample(t *testing.T) {\n    terraformOptions := &terraform.Options{\n        TerraformDir: \"../environments/development\",\n        VarFiles:     []string{\"development.tfvars\"},\n    }\n\n    defer terraform.Destroy(t, terraformOptions)\n    terraform.InitAndApply(t, terraformOptions)\n\n    # Test that resources were created\n    instanceID := terraform.Output(t, terraformOptions, \"instance_id\")\n    assert.NotEmpty(t, instanceID)\n}\nEOF\n```\n\n### Performance and Monitoring\n```bash\n# Monitor Terraform execution\nterraform apply -parallelism=10\n\n# Profile Terraform execution\nTF_LOG=DEBUG terraform apply\n\n# State file analysis\nterraform state list\nterraform show\n\n# Resource drift detection\nterraform plan -refresh-only\n\n# Dependency graphing\nterraform graph | dot -Tsvg > graph.svg\n\n# Resource import verification\nterraform plan -generate-config-out=generated.tf\n```\n\n## Advanced Use Cases\n\n### Multi-Cloud Kubernetes Deployment\n```bash\ncat > multi-cloud-k8s.tf <<EOF\n# EKS Cluster (AWS)\nmodule \"aws_eks\" {\n  source = \"terraform-aws-modules/eks/aws\"\n  version = \"~> 19.0\"\n\n  cluster_name    = \"\\${var.project_name}-eks-\\${var.environment}\"\n  cluster_version = \"1.28\"\n\n  vpc_id                          = module.aws_vpc.vpc_id\n  subnet_ids                      = module.aws_vpc.private_subnets\n  cluster_endpoint_public_access  = false\n  cluster_endpoint_private_access = true\n\n  eks_managed_node_groups = {\n    main = {\n      min_size     = 1\n      max_size     = 5\n      desired_size = 3\n\n      instance_types = [\"t3.medium\"]\n      capacity_type  = \"ON_DEMAND\"\n      \n      k8s_labels = {\n        Environment = var.environment\n        NodeGroup   = \"main\"\n      }\n    }\n  }\n\n  tags = var.common_tags\n}\n\n# AKS Cluster (Azure)\nresource \"azurerm_kubernetes_cluster\" \"main\" {\n  name                = \"\\${var.project_name}-aks-\\${var.environment}\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  dns_prefix          = \"\\${var.project_name}-aks\"\n\n  default_node_pool {\n    name       = \"default\"\n    node_count = 3\n    vm_size    = \"Standard_D2_v2\"\n    \n    upgrade_settings {\n      max_surge = \"10%\"\n    }\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n\n  network_profile {\n    network_plugin = \"azure\"\n    network_policy = \"calico\"\n  }\n\n  tags = var.common_tags\n}\n\n# GKE Cluster (GCP)\nresource \"google_container_cluster\" \"main\" {\n  name     = \"\\${var.project_name}-gke-\\${var.environment}\"\n  location = var.gcp_region\n  project  = var.gcp_project_id\n\n  # Remove default node pool\n  remove_default_node_pool = true\n  initial_node_count       = 1\n\n  network    = google_compute_network.main.name\n  subnetwork = google_compute_subnetwork.main.name\n\n  private_cluster_config {\n    enable_private_nodes    = true\n    enable_private_endpoint = false\n    master_ipv4_cidr_block  = \"172.16.0.0/28\"\n  }\n\n  workload_identity_config {\n    workload_pool = \"\\${var.gcp_project_id}.svc.id.goog\"\n  }\n}\n\nresource \"google_container_node_pool\" \"main\" {\n  name       = \"main\"\n  location   = var.gcp_region\n  cluster    = google_container_cluster.main.name\n  node_count = 1\n  project    = var.gcp_project_id\n\n  autoscaling {\n    min_node_count = 1\n    max_node_count = 5\n  }\n\n  node_config {\n    preemptible  = false\n    machine_type = \"e2-medium\"\n\n    oauth_scopes = [\n      \"https://www.googleapis.com/auth/cloud-platform\"\n    ]\n\n    workload_metadata_config {\n      mode = \"GKE_METADATA\"\n    }\n  }\n}\nEOF\n```\n\n### Infrastructure Monitoring with Terraform\n```bash\ncat > monitoring.tf <<EOF\n# CloudWatch alarms (AWS)\nresource \"aws_cloudwatch_metric_alarm\" \"high_cpu\" {\n  for_each = toset(module.aws_infrastructure.instance_ids)\n  \n  alarm_name          = \"high-cpu-\\${each.key}\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name        = \"CPUUtilization\"\n  namespace          = \"AWS/EC2\"\n  period             = \"300\"\n  statistic          = \"Average\"\n  threshold          = \"80\"\n  alarm_description  = \"This metric monitors ec2 cpu utilization\"\n\n  dimensions = {\n    InstanceId = each.value\n  }\n\n  alarm_actions = [aws_sns_topic.alerts.arn]\n}\n\n# Azure Monitor alerts\nresource \"azurerm_monitor_metric_alert\" \"cpu_alert\" {\n  name                = \"cpu-alert\"\n  resource_group_name = azurerm_resource_group.main.name\n  scopes              = [azurerm_virtual_machine.main.id]\n\n  criteria {\n    metric_namespace = \"Microsoft.Compute/virtualMachines\"\n    metric_name      = \"Percentage CPU\"\n    aggregation      = \"Average\"\n    operator         = \"GreaterThan\"\n    threshold        = 80\n  }\n\n  action {\n    action_group_id = azurerm_monitor_action_group.main.id\n  }\n}\n\n# GCP monitoring policy\nresource \"google_monitoring_alert_policy\" \"cpu_usage\" {\n  display_name = \"CPU Usage Alert\"\n  combiner     = \"OR\"\n  project      = var.gcp_project_id\n\n  conditions {\n    display_name = \"CPU usage condition\"\n\n    condition_threshold {\n      filter         = \"resource.type=\\\"gce_instance\\\"\"\n      duration       = \"300s\"\n      comparison     = \"COMPARISON_GREATER_THAN\"\n      threshold_value = 0.8\n\n      aggregations {\n        alignment_period   = \"300s\"\n        per_series_aligner = \"ALIGN_RATE\"\n      }\n    }\n  }\n\n  alert_strategy {\n    notification_rate_limit {\n      period = \"300s\"\n    }\n    auto_close = \"1800s\"\n  }\n\n  notification_channels = [google_monitoring_notification_channel.email.name]\n}\nEOF\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check Terraform configuration\nterraform fmt -check -diff\nterraform validate\n\n# Debug Terraform execution\nTF_LOG=DEBUG terraform apply\nTF_LOG=TRACE terraform apply\n\n# State file issues\nterraform state list\nterraform state show resource_name\n\n# Provider authentication issues\nterraform init -upgrade\nterraform providers\n\n# Lock issues\nterraform force-unlock LOCK_ID\n\n# Refresh state from real infrastructure\nterraform refresh\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Validate provider configurations\n# AWS\naws sts get-caller-identity\n\n# Azure\naz account show\n\n# GCP\ngcloud auth list\ngcloud config get-value project\n\n# Check resource quotas\naws service-quotas get-service-quota --service-code ec2 --quota-code L-1216C47A\naz vm list-usage --location \"East US\"\ngcloud compute project-info describe --project=$PROJECT_ID\n\n# Plan file analysis\nterraform show tfplan\nterraform show -json tfplan | jq '.resource_changes[] | {type: .type, name: .name, action: .change.actions}'\n```\n\n### Advanced Debugging\n```bash\n# Provider debug logging\nTF_LOG_PROVIDER=DEBUG terraform apply\n\n# Crash log analysis\ncat crash.log\n\n# Performance profiling\nterraform apply -parallelism=1  # Sequential execution for debugging\n\n# Resource graph visualization\nterraform graph -type=plan | dot -Tpng > plan.png\n\n# State manipulation for recovery\nterraform state rm problematic_resource\nterraform import resource_type.name resource_id\n\n# Force resource recreation\nterraform taint resource_type.name\nterraform apply\n\n# Workspace state recovery\nterraform workspace select production\nterraform state pull > production.tfstate.backup\n```\n\n## Additional Resources\n\n- [Official Documentation](https://developer.hashicorp.com/terraform/docs)\n- [Terraform Registry](https://registry.terraform.io/)\n- [Multi-Cloud Best Practices](https://developer.hashicorp.com/terraform/cloud-docs/recommended-practices)\n- [Security Best Practices](https://developer.hashicorp.com/terraform/language/values/sensitive)\n- [AWS Provider Documentation](https://registry.terraform.io/providers/hashicorp/aws/latest/docs)\n- [Azure Provider Documentation](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs)\n- [GCP Provider Documentation](https://registry.terraform.io/providers/hashicorp/google/latest/docs)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"terraform-installation-guide\" class=\"mobile-header\">Terraform Installation Guide</h1>\n<p class=\"mobile-paragraph\">Infrastructure as Code (IaC) tool for building, changing, and versioning infrastructure safely and efficiently across multiple cloud providers. Industry standard for multi-cloud infrastructure management.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">Cloud provider account(s) (AWS, Azure, GCP, etc.)</li>\n<li class=\"mobile-list-item\">Basic understanding of infrastructure concepts</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for large infrastructures</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho &quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install Terraform\nsudo apt update\nsudo apt install -y terraform\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Terraform\nsudo yum install -y terraform\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo dnf install -y dnf-plugins-core\nsudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo\n\n# Install Terraform\nsudo dnf install -y terraform\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from AUR\nyay -S terraform\n\n# Or from community repository\nsudo pacman -Syu terraform\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from Alpine repositories\nsudo apk update\nsudo apk add terraform\n\n# Verify installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-binary-installation\" class=\"mobile-header\">Manual Binary Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest Terraform\nTERRAFORM_VERSION=&quot;1.6.4&quot;\ncd /tmp\nwget https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip\n\n# Install unzip if needed\nsudo apt install -y unzip  # Ubuntu/Debian\nsudo yum install -y unzip  # RHEL/CentOS\nsudo dnf install -y unzip  # Fedora\nsudo pacman -S unzip       # Arch Linux\n\n# Extract and install\nunzip terraform_${TERRAFORM_VERSION}_linux_amd64.zip\nsudo mv terraform /usr/local/bin/\nsudo chmod +x /usr/local/bin/terraform\n\n# Verify installation\nterraform version\n\n# Clean up\nrm terraform_${TERRAFORM_VERSION}_linux_amd64.zip</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create alias for Docker-based Terraform\necho &#039;alias terraform=&quot;docker run --rm -it -v $(pwd):/workspace -w /workspace hashicorp/terraform:latest&quot;&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Or create comprehensive wrapper script\nsudo tee /usr/local/bin/terraform &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/workspace \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.config/gcloud:/root/.config/gcloud:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -e AWS_PROFILE \\\n  -e AZURE_SUBSCRIPTION_ID \\\n  -e GOOGLE_APPLICATION_CREDENTIALS \\\n  -w /workspace \\\n  hashicorp/terraform:latest &quot;$@&quot;\nEOF\nsudo chmod +x /usr/local/bin/terraform\n\n# Test Docker installation\nterraform version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-tfenv-version-manager\" class=\"mobile-header\">Using tfenv (Version Manager)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install tfenv for managing multiple Terraform versions\ngit clone https://github.com/tfutils/tfenv.git ~/.tfenv\necho &#039;export PATH=&quot;$HOME/.tfenv/bin:$PATH&quot;&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Install and use specific Terraform version\ntfenv install 1.6.4\ntfenv use 1.6.4\n\n# List available versions\ntfenv list-remote\ntfenv list\n\n# Auto-install based on .terraform-version file\necho &quot;1.6.4&quot; &gt; .terraform-version\ntfenv install</code></pre>\n      </div>\n    </div>\n<h2 id=\"multi-cloud-provider-setup\" class=\"mobile-header\">Multi-Cloud Provider Setup</h2>\n<h3 id=\"aws-configuration\" class=\"mobile-header\">AWS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install AWS CLI\ncurl &quot;https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip&quot; -o &quot;awscliv2.zip&quot;\nunzip awscliv2.zip\nsudo ./aws/install\n\n# Configure AWS credentials\naws configure\n# AWS Access Key ID: YOUR_ACCESS_KEY\n# AWS Secret Access Key: YOUR_SECRET_KEY  \n# Default region name: us-west-2\n# Default output format: json\n\n# Alternative: Use IAM roles (recommended for EC2)\n# Instance metadata service automatically provides credentials\n\n# Create Terraform AWS configuration\nmkdir -p ~/terraform/multi-cloud\ncd ~/terraform/multi-cloud\n\ncat &gt; providers.tf &lt;&lt;EOF\nterraform {\n  required_version = &quot;&gt;= 1.5&quot;\n  required_providers {\n    aws = {\n      source  = &quot;hashicorp/aws&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n    azurerm = {\n      source  = &quot;hashicorp/azurerm&quot;\n      version = &quot;~&gt; 3.0&quot;\n    }\n    google = {\n      source  = &quot;hashicorp/google&quot;\n      version = &quot;~&gt; 5.0&quot;\n    }\n  }\n  \n  # Remote state configuration\n  backend &quot;s3&quot; {\n    bucket = &quot;your-terraform-state-bucket&quot;\n    key    = &quot;multi-cloud/terraform.tfstate&quot;\n    region = &quot;us-west-2&quot;\n    \n    # State locking with DynamoDB\n    dynamodb_table = &quot;terraform-state-lock&quot;\n    encrypt        = true\n  }\n}\n\n# AWS Provider\nprovider &quot;aws&quot; {\n  region = var.aws_region\n  \n  default_tags {\n    tags = {\n      Environment   = var.environment\n      ManagedBy     = &quot;terraform&quot;\n      Project       = var.project_name\n      Owner         = var.owner\n    }\n  }\n}\n\n# Azure Provider\nprovider &quot;azurerm&quot; {\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n    key_vault {\n      purge_soft_delete_on_destroy = true\n    }\n  }\n}\n\n# Google Cloud Provider\nprovider &quot;google&quot; {\n  project = var.gcp_project_id\n  region  = var.gcp_region\n  zone    = var.gcp_zone\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"azure-configuration\" class=\"mobile-header\">Azure Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Azure CLI\ncurl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash\n\n# Login to Azure\naz login\n\n# Create service principal for Terraform\naz ad sp create-for-rbac \\\n  --name &quot;terraform-sp&quot; \\\n  --role=&quot;Contributor&quot; \\\n  --scopes=&quot;/subscriptions/YOUR_SUBSCRIPTION_ID&quot;\n\n# Set environment variables (add to ~/.bashrc)\ncat &gt;&gt; ~/.bashrc &lt;&lt;EOF\n# Azure Terraform Authentication\nexport ARM_CLIENT_ID=&quot;your-client-id&quot;\nexport ARM_CLIENT_SECRET=&quot;your-client-secret&quot;\nexport ARM_SUBSCRIPTION_ID=&quot;your-subscription-id&quot;\nexport ARM_TENANT_ID=&quot;your-tenant-id&quot;\nEOF\n\nsource ~/.bashrc\n\n# Create Azure Terraform configuration\ncat &gt; azure-main.tf &lt;&lt;EOF\n# Resource Group\nresource &quot;azurerm_resource_group&quot; &quot;main&quot; {\n  name     = &quot;\\${var.environment}-rg&quot;\n  location = var.azure_location\n  \n  tags = {\n    Environment = var.environment\n    ManagedBy   = &quot;terraform&quot;\n  }\n}\n\n# Virtual Network\nresource &quot;azurerm_virtual_network&quot; &quot;main&quot; {\n  name                = &quot;\\${var.environment}-vnet&quot;\n  address_space       = [&quot;10.1.0.0/16&quot;]\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  tags = {\n    Environment = var.environment\n  }\n}\n\n# Subnet\nresource &quot;azurerm_subnet&quot; &quot;internal&quot; {\n  name                 = &quot;internal&quot;\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes     = [&quot;10.1.2.0/24&quot;]\n}\n\n# Network Security Group\nresource &quot;azurerm_network_security_group&quot; &quot;main&quot; {\n  name                = &quot;\\${var.environment}-nsg&quot;\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  security_rule {\n    name                       = &quot;SSH&quot;\n    priority                   = 1001\n    direction                  = &quot;Inbound&quot;\n    access                     = &quot;Allow&quot;\n    protocol                   = &quot;Tcp&quot;\n    source_port_range          = &quot;*&quot;\n    destination_port_range     = &quot;22&quot;\n    source_address_prefix      = &quot;*&quot;\n    destination_address_prefix = &quot;*&quot;\n  }\n\n  security_rule {\n    name                       = &quot;HTTP&quot;\n    priority                   = 1002\n    direction                  = &quot;Inbound&quot;\n    access                     = &quot;Allow&quot;\n    protocol                   = &quot;Tcp&quot;\n    source_port_range          = &quot;*&quot;\n    destination_port_range     = &quot;80&quot;\n    source_address_prefix      = &quot;*&quot;\n    destination_address_prefix = &quot;*&quot;\n  }\n\n  security_rule {\n    name                       = &quot;HTTPS&quot;\n    priority                   = 1003\n    direction                  = &quot;Inbound&quot;\n    access                     = &quot;Allow&quot;\n    protocol                   = &quot;Tcp&quot;\n    source_port_range          = &quot;*&quot;\n    destination_port_range     = &quot;443&quot;\n    source_address_prefix      = &quot;*&quot;\n    destination_address_prefix = &quot;*&quot;\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"google-cloud-configuration\" class=\"mobile-header\">Google Cloud Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Google Cloud SDK\necho &quot;deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main&quot; | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -\nsudo apt-get update &amp;&amp; sudo apt-get install -y google-cloud-cli\n\n# Authenticate\ngcloud auth login\ngcloud config set project YOUR_PROJECT_ID\n\n# Create service account for Terraform\ngcloud iam service-accounts create terraform \\\n  --display-name=&quot;Terraform Service Account&quot;\n\ngcloud projects add-iam-policy-binding YOUR_PROJECT_ID \\\n  --member=&quot;serviceAccount:terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com&quot; \\\n  --role=&quot;roles/editor&quot;\n\ngcloud iam service-accounts keys create ~/gcp-terraform-key.json \\\n  --iam-account=terraform@YOUR_PROJECT_ID.iam.gserviceaccount.com\n\n# Set environment variable\nexport GOOGLE_APPLICATION_CREDENTIALS=&quot;$HOME/gcp-terraform-key.json&quot;\necho &#039;export GOOGLE_APPLICATION_CREDENTIALS=&quot;$HOME/gcp-terraform-key.json&quot;&#039; &gt;&gt; ~/.bashrc\n\n# Create GCP Terraform configuration\ncat &gt; gcp-main.tf &lt;&lt;EOF\n# VPC Network\nresource &quot;google_compute_network&quot; &quot;main&quot; {\n  name                    = &quot;\\${var.environment}-vpc&quot;\n  auto_create_subnetworks = false\n  project                 = var.gcp_project_id\n}\n\n# Subnet\nresource &quot;google_compute_subnetwork&quot; &quot;main&quot; {\n  name          = &quot;\\${var.environment}-subnet&quot;\n  ip_cidr_range = &quot;10.2.0.0/24&quot;\n  region        = var.gcp_region\n  network       = google_compute_network.main.id\n  project       = var.gcp_project_id\n}\n\n# Firewall rules\nresource &quot;google_compute_firewall&quot; &quot;allow-ssh&quot; {\n  name    = &quot;\\${var.environment}-allow-ssh&quot;\n  network = google_compute_network.main.name\n  project = var.gcp_project_id\n\n  allow {\n    protocol = &quot;tcp&quot;\n    ports    = [&quot;22&quot;]\n  }\n\n  source_ranges = [&quot;0.0.0.0/0&quot;]\n  target_tags   = [&quot;ssh-allowed&quot;]\n}\n\nresource &quot;google_compute_firewall&quot; &quot;allow-http&quot; {\n  name    = &quot;\\${var.environment}-allow-http&quot;\n  network = google_compute_network.main.name\n  project = var.gcp_project_id\n\n  allow {\n    protocol = &quot;tcp&quot;\n    ports    = [&quot;80&quot;, &quot;443&quot;]\n  }\n\n  source_ranges = [&quot;0.0.0.0/0&quot;]\n  target_tags   = [&quot;http-server&quot;, &quot;https-server&quot;]\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-best-practices\" class=\"mobile-header\">Security Best Practices</h2>\n<h3 id=\"secure-state-management\" class=\"mobile-header\">Secure State Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create S3 backend with encryption and locking\ncat &gt; backend.tf &lt;&lt;EOF\nterraform {\n  backend &quot;s3&quot; {\n    bucket         = &quot;your-terraform-state-bucket&quot;\n    key            = &quot;infrastructure/terraform.tfstate&quot;\n    region         = &quot;us-west-2&quot;\n    encrypt        = true\n    kms_key_id     = &quot;arn:aws:kms:us-west-2:ACCOUNT:key/KEY-ID&quot;\n    dynamodb_table = &quot;terraform-state-lock&quot;\n    \n    # Additional security\n    skip_region_validation      = false\n    skip_credentials_validation = false\n    skip_metadata_api_check     = false\n  }\n}\n\n# DynamoDB table for state locking\nresource &quot;aws_dynamodb_table&quot; &quot;terraform_state_lock&quot; {\n  name           = &quot;terraform-state-lock&quot;\n  billing_mode   = &quot;PAY_PER_REQUEST&quot;\n  hash_key       = &quot;LockID&quot;\n\n  attribute {\n    name = &quot;LockID&quot;\n    type = &quot;S&quot;\n  }\n\n  server_side_encryption {\n    enabled = true\n  }\n\n  point_in_time_recovery {\n    enabled = true\n  }\n\n  tags = {\n    Name        = &quot;Terraform State Lock Table&quot;\n    Environment = var.environment\n  }\n}\n\n# S3 bucket for state storage\nresource &quot;aws_s3_bucket&quot; &quot;terraform_state&quot; {\n  bucket        = &quot;your-terraform-state-bucket&quot;\n  force_destroy = false\n\n  tags = {\n    Name        = &quot;Terraform State Bucket&quot;\n    Environment = var.environment\n  }\n}\n\nresource &quot;aws_s3_bucket_encryption_configuration&quot; &quot;terraform_state_encryption&quot; {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  rule {\n    apply_server_side_encryption_by_default {\n      kms_master_key_id = aws_kms_key.terraform_bucket_key.arn\n      sse_algorithm     = &quot;aws:kms&quot;\n    }\n  }\n}\n\nresource &quot;aws_s3_bucket_versioning&quot; &quot;terraform_state_versioning&quot; {\n  bucket = aws_s3_bucket.terraform_state.id\n  versioning_configuration {\n    status = &quot;Enabled&quot;\n  }\n}\n\nresource &quot;aws_s3_bucket_public_access_block&quot; &quot;terraform_state&quot; {\n  bucket = aws_s3_bucket.terraform_state.id\n\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\n# KMS key for S3 encryption\nresource &quot;aws_kms_key&quot; &quot;terraform_bucket_key&quot; {\n  description             = &quot;KMS key for Terraform state bucket encryption&quot;\n  deletion_window_in_days = 7\n\n  tags = {\n    Name        = &quot;Terraform State Bucket Key&quot;\n    Environment = var.environment\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"variables-and-secrets-management\" class=\"mobile-header\">Variables and Secrets Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create variables.tf with proper typing and validation\ncat &gt; variables.tf &lt;&lt;EOF\n# AWS Variables\nvariable &quot;aws_region&quot; {\n  description = &quot;AWS region for resources&quot;\n  type        = string\n  default     = &quot;us-west-2&quot;\n  validation {\n    condition     = can(regex(&quot;^[a-z]{2}-[a-z]+-[0-9]{1}$&quot;, var.aws_region))\n    error_message = &quot;AWS region must be a valid region format.&quot;\n  }\n}\n\nvariable &quot;aws_availability_zones&quot; {\n  description = &quot;List of AWS availability zones&quot;\n  type        = list(string)\n  default     = [&quot;us-west-2a&quot;, &quot;us-west-2b&quot;, &quot;us-west-2c&quot;]\n}\n\n# Azure Variables\nvariable &quot;azure_location&quot; {\n  description = &quot;Azure region for resources&quot;\n  type        = string\n  default     = &quot;East US&quot;\n  validation {\n    condition = contains([\n      &quot;East US&quot;, &quot;East US 2&quot;, &quot;West US&quot;, &quot;West US 2&quot;, &quot;West US 3&quot;,\n      &quot;Central US&quot;, &quot;North Central US&quot;, &quot;South Central US&quot;, &quot;West Central US&quot;,\n      &quot;Canada Central&quot;, &quot;Canada East&quot;, &quot;Brazil South&quot;, &quot;UK South&quot;, &quot;UK West&quot;,\n      &quot;West Europe&quot;, &quot;North Europe&quot;, &quot;France Central&quot;, &quot;Germany West Central&quot;,\n      &quot;Switzerland North&quot;, &quot;Norway East&quot;, &quot;UAE North&quot;, &quot;South Africa North&quot;,\n      &quot;Australia East&quot;, &quot;Australia Southeast&quot;, &quot;Central India&quot;, &quot;South India&quot;,\n      &quot;West India&quot;, &quot;Japan East&quot;, &quot;Japan West&quot;, &quot;Korea Central&quot;, &quot;Korea South&quot;,\n      &quot;Southeast Asia&quot;, &quot;East Asia&quot;\n    ], var.azure_location)\n    error_message = &quot;Azure location must be a valid Azure region.&quot;\n  }\n}\n\n# GCP Variables\nvariable &quot;gcp_project_id&quot; {\n  description = &quot;GCP project ID&quot;\n  type        = string\n  validation {\n    condition     = length(var.gcp_project_id) &gt; 0\n    error_message = &quot;GCP project ID cannot be empty.&quot;\n  }\n}\n\nvariable &quot;gcp_region&quot; {\n  description = &quot;GCP region for resources&quot;\n  type        = string\n  default     = &quot;us-central1&quot;\n}\n\nvariable &quot;gcp_zone&quot; {\n  description = &quot;GCP zone for resources&quot;\n  type        = string\n  default     = &quot;us-central1-a&quot;\n}\n\n# Environment Variables\nvariable &quot;environment&quot; {\n  description = &quot;Environment name&quot;\n  type        = string\n  default     = &quot;development&quot;\n  validation {\n    condition     = contains([&quot;development&quot;, &quot;staging&quot;, &quot;production&quot;], var.environment)\n    error_message = &quot;Environment must be development, staging, or production.&quot;\n  }\n}\n\nvariable &quot;project_name&quot; {\n  description = &quot;Project name for resource naming&quot;\n  type        = string\n  validation {\n    condition     = length(var.project_name) &gt; 0 &amp;&amp; length(var.project_name) &lt;= 20\n    error_message = &quot;Project name must be between 1 and 20 characters.&quot;\n  }\n}\n\nvariable &quot;owner&quot; {\n  description = &quot;Owner of the infrastructure&quot;\n  type        = string\n}\n\n# Networking Variables\nvariable &quot;vpc_cidr&quot; {\n  description = &quot;CIDR block for VPC&quot;\n  type        = string\n  default     = &quot;10.0.0.0/16&quot;\n  validation {\n    condition     = can(cidrhost(var.vpc_cidr, 0))\n    error_message = &quot;VPC CIDR must be a valid IPv4 CIDR block.&quot;\n  }\n}\n\n# Instance Variables\nvariable &quot;instance_type&quot; {\n  description = &quot;Instance types for different clouds&quot;\n  type = object({\n    aws   = string\n    azure = string\n    gcp   = string\n  })\n  default = {\n    aws   = &quot;t3.micro&quot;\n    azure = &quot;Standard_B1s&quot;\n    gcp   = &quot;e2-micro&quot;\n  }\n}\n\n# Sensitive Variables (use terraform.tfvars or environment variables)\nvariable &quot;database_password&quot; {\n  description = &quot;Database password&quot;\n  type        = string\n  sensitive   = true\n  validation {\n    condition     = length(var.database_password) &gt;= 12\n    error_message = &quot;Database password must be at least 12 characters.&quot;\n  }\n}\n\nvariable &quot;ssh_public_key&quot; {\n  description = &quot;SSH public key for instance access&quot;\n  type        = string\n  validation {\n    condition     = can(regex(&quot;^ssh-&quot;, var.ssh_public_key))\n    error_message = &quot;SSH public key must be a valid SSH public key.&quot;\n  }\n}\nEOF\n\n# Create terraform.tfvars (never commit to version control)\ncat &gt; terraform.tfvars.example &lt;&lt;EOF\n# Copy to terraform.tfvars and fill in your values\nproject_name     = &quot;myproject&quot;\nowner           = &quot;devops-team&quot;\nenvironment     = &quot;production&quot;\n\n# AWS\naws_region = &quot;us-west-2&quot;\n\n# Azure  \nazure_location = &quot;East US&quot;\n\n# GCP\ngcp_project_id = &quot;my-gcp-project-id&quot;\ngcp_region     = &quot;us-central1&quot;\ngcp_zone       = &quot;us-central1-a&quot;\n\n# Security\ndatabase_password = &quot;your-secure-database-password&quot;\nssh_public_key   = &quot;ssh-rsa AAAAB3NzaC1yc2E...&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"secrets-management-integration\" class=\"mobile-header\">Secrets Management Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># HashiCorp Vault integration\ncat &gt; vault.tf &lt;&lt;EOF\n# Vault provider for secrets management\nterraform {\n  required_providers {\n    vault = {\n      source  = &quot;hashicorp/vault&quot;\n      version = &quot;~&gt; 3.0&quot;\n    }\n  }\n}\n\nprovider &quot;vault&quot; {\n  address = var.vault_address\n  token   = var.vault_token\n}\n\n# Read secrets from Vault\ndata &quot;vault_generic_secret&quot; &quot;database&quot; {\n  path = &quot;secret/database&quot;\n}\n\n# Use secrets in resources\nresource &quot;aws_db_instance&quot; &quot;main&quot; {\n  identifier_prefix = var.project_name\n  \n  username = data.vault_generic_secret.database.data[&quot;username&quot;]\n  password = data.vault_generic_secret.database.data[&quot;password&quot;]\n  \n  # Other configuration...\n}\nEOF\n\n# AWS Secrets Manager integration\ncat &gt; aws-secrets.tf &lt;&lt;EOF\n# Retrieve secrets from AWS Secrets Manager\ndata &quot;aws_secretsmanager_secret_version&quot; &quot;database_credentials&quot; {\n  secret_id = &quot;prod/database/credentials&quot;\n}\n\nlocals {\n  database_creds = jsondecode(data.aws_secretsmanager_secret_version.database_credentials.secret_string)\n}\n\nresource &quot;aws_db_instance&quot; &quot;main&quot; {\n  username = local.database_creds.username\n  password = local.database_creds.password\n  \n  # Other configuration...\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-multi-cloud-architecture\" class=\"mobile-header\">Advanced Multi-Cloud Architecture</h2>\n<h3 id=\"cross-cloud-networking\" class=\"mobile-header\">Cross-Cloud Networking</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create multi-cloud VPN connection\ncat &gt; networking.tf &lt;&lt;EOF\n# AWS VPC and VPN Gateway\nresource &quot;aws_vpc&quot; &quot;main&quot; {\n  cidr_block           = &quot;10.0.0.0/16&quot;\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name = &quot;\\${var.environment}-aws-vpc&quot;\n  }\n}\n\nresource &quot;aws_vpn_gateway&quot; &quot;main&quot; {\n  vpc_id = aws_vpc.main.id\n\n  tags = {\n    Name = &quot;\\${var.environment}-aws-vpn-gw&quot;\n  }\n}\n\n# Azure Virtual Network Gateway\nresource &quot;azurerm_virtual_network_gateway&quot; &quot;main&quot; {\n  name                = &quot;\\${var.environment}-azure-vpn-gw&quot;\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  type     = &quot;Vpn&quot;\n  vpn_type = &quot;RouteBased&quot;\n\n  active_active = false\n  enable_bgp    = false\n  sku           = &quot;VpnGw1&quot;\n\n  ip_configuration {\n    name                          = &quot;vnetGatewayConfig&quot;\n    public_ip_address_id          = azurerm_public_ip.vpn_gateway.id\n    private_ip_address_allocation = &quot;Dynamic&quot;\n    subnet_id                     = azurerm_subnet.gateway.id\n  }\n}\n\n# GCP VPN Gateway\nresource &quot;google_compute_vpn_gateway&quot; &quot;main&quot; {\n  name    = &quot;\\${var.environment}-gcp-vpn-gw&quot;\n  network = google_compute_network.main.id\n  project = var.gcp_project_id\n  region  = var.gcp_region\n}\n\n# Cross-cloud VPN tunnels\nresource &quot;aws_vpn_connection&quot; &quot;aws_to_azure&quot; {\n  vpn_gateway_id      = aws_vpn_gateway.main.id\n  customer_gateway_id = aws_customer_gateway.azure.id\n  type                = &quot;ipsec.1&quot;\n  static_routes_only  = true\n\n  tags = {\n    Name = &quot;\\${var.environment}-aws-to-azure-vpn&quot;\n  }\n}\n\n# Local values for cross-cloud coordination\nlocals {\n  aws_vpc_cidr   = &quot;10.0.0.0/16&quot;\n  azure_vnet_cidr = &quot;10.1.0.0/16&quot;\n  gcp_vpc_cidr   = &quot;10.2.0.0/16&quot;\n  \n  common_tags = {\n    Environment   = var.environment\n    Project       = var.project_name\n    ManagedBy     = &quot;terraform&quot;\n    Owner         = var.owner\n    CreatedAt     = timestamp()\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"global-load-balancing\" class=\"mobile-header\">Global Load Balancing</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Multi-cloud global load balancer using Cloudflare\ncat &gt; global-lb.tf &lt;&lt;EOF\nterraform {\n  required_providers {\n    cloudflare = {\n      source  = &quot;cloudflare/cloudflare&quot;\n      version = &quot;~&gt; 4.0&quot;\n    }\n  }\n}\n\nprovider &quot;cloudflare&quot; {\n  api_token = var.cloudflare_api_token\n}\n\n# Cloudflare zone\ndata &quot;cloudflare_zone&quot; &quot;main&quot; {\n  name = var.domain_name\n}\n\n# AWS ALB DNS record\nresource &quot;cloudflare_record&quot; &quot;aws_lb&quot; {\n  zone_id = data.cloudflare_zone.main.id\n  name    = &quot;aws&quot;\n  value   = aws_lb.main.dns_name\n  type    = &quot;CNAME&quot;\n  ttl     = 300\n\n  comment = &quot;AWS Application Load Balancer&quot;\n}\n\n# Azure Load Balancer DNS record  \nresource &quot;cloudflare_record&quot; &quot;azure_lb&quot; {\n  zone_id = data.cloudflare_zone.main.id\n  name    = &quot;azure&quot;\n  value   = azurerm_public_ip.lb.fqdn\n  type    = &quot;CNAME&quot;\n  ttl     = 300\n\n  comment = &quot;Azure Load Balancer&quot;\n}\n\n# GCP Load Balancer DNS record\nresource &quot;cloudflare_record&quot; &quot;gcp_lb&quot; {\n  zone_id = data.cloudflare_zone.main.id\n  name    = &quot;gcp&quot;\n  value   = google_compute_global_address.main.address\n  type    = &quot;A&quot;\n  ttl     = 300\n\n  comment = &quot;GCP Global Load Balancer&quot;\n}\n\n# Global load balancer with health checks and failover\nresource &quot;cloudflare_load_balancer&quot; &quot;global&quot; {\n  zone_id = data.cloudflare_zone.main.id\n  name    = &quot;global-lb&quot;\n  \n  fallback_pool_id = cloudflare_load_balancer_pool.backup.id\n  default_pool_ids = [\n    cloudflare_load_balancer_pool.primary.id,\n    cloudflare_load_balancer_pool.secondary.id\n  ]\n\n  description = &quot;Multi-cloud global load balancer&quot;\n  ttl         = 30\n  proxied     = true\n\n  adaptive_routing {\n    failover_across_pools = true\n  }\n\n  location_strategy {\n    prefer_ecs = &quot;never&quot;\n    mode       = &quot;resolver_ip&quot;\n  }\n}\n\n# Primary pool (AWS)\nresource &quot;cloudflare_load_balancer_pool&quot; &quot;primary&quot; {\n  name = &quot;aws-primary&quot;\n\n  origins {\n    name    = &quot;aws-west&quot;\n    address = aws_lb.main.dns_name\n    enabled = true\n  }\n\n  monitor              = cloudflare_load_balancer_monitor.http.id\n  description          = &quot;AWS West Coast&quot;\n  enabled              = true\n  minimum_origins      = 1\n  notification_email   = &quot;alerts@example.com&quot;\n}\n\n# Secondary pool (Azure)\nresource &quot;cloudflare_load_balancer_pool&quot; &quot;secondary&quot; {\n  name = &quot;azure-secondary&quot;\n\n  origins {\n    name    = &quot;azure-east&quot;\n    address = azurerm_public_ip.lb.ip_address\n    enabled = true\n  }\n\n  monitor         = cloudflare_load_balancer_monitor.http.id\n  description     = &quot;Azure East Coast&quot;\n  enabled         = true\n  minimum_origins = 1\n}\n\n# Health monitor\nresource &quot;cloudflare_load_balancer_monitor&quot; &quot;http&quot; {\n  expected_codes = &quot;200&quot;\n  method         = &quot;GET&quot;\n  timeout        = 7\n  path           = &quot;/health&quot;\n  interval       = 60\n  retries        = 3\n  description    = &quot;HTTP health check&quot;\n\n  header {\n    header = &quot;Host&quot;\n    values = [&quot;example.com&quot;]\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-integration\" class=\"mobile-header\">CI/CD Integration</h2>\n<h3 id=\"github-actions-workflow\" class=\"mobile-header\">GitHub Actions Workflow</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">mkdir -p .github/workflows\ncat &gt; .github/workflows/terraform.yml &lt;&lt;EOF\nname: Terraform Multi-Cloud Deployment\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\nenv:\n  TF_VERSION: 1.6.4\n\njobs:\n  terraform:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        environment: [development, staging, production]\n        \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Setup Terraform\n      uses: hashicorp/setup-terraform@v3\n      with:\n        terraform_version: \\${{ env.TF_VERSION }}\n        cli_config_credentials_token: \\${{ secrets.TF_CLOUD_TOKEN }}\n    \n    - name: Configure AWS credentials\n      uses: aws-actions/configure-aws-credentials@v4\n      with:\n        aws-access-key-id: \\${{ secrets.AWS_ACCESS_KEY_ID }}\n        aws-secret-access-key: \\${{ secrets.AWS_SECRET_ACCESS_KEY }}\n        aws-region: us-west-2\n    \n    - name: Configure Azure credentials\n      uses: azure/login@v1\n      with:\n        creds: \\${{ secrets.AZURE_CREDENTIALS }}\n    \n    - name: Configure GCP credentials\n      uses: google-github-actions/setup-gcloud@v1\n      with:\n        service_account_key: \\${{ secrets.GCP_SA_KEY }}\n        project_id: \\${{ secrets.GCP_PROJECT_ID }}\n    \n    - name: Terraform Format Check\n      run: terraform fmt -check -recursive\n    \n    - name: Terraform Initialize\n      run: terraform init\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Validate\n      run: terraform validate\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Plan\n      run: terraform plan -var-file=&quot;\\${{ matrix.environment }}.tfvars&quot;\n      working-directory: environments/\\${{ matrix.environment }}\n    \n    - name: Terraform Apply (Production)\n      if: github.ref == &#039;refs/heads/main&#039; &amp;&amp; matrix.environment == &#039;production&#039;\n      run: terraform apply -auto-approve -var-file=&quot;production.tfvars&quot;\n      working-directory: environments/production\n    \n    - name: Terraform Plan Status\n      if: steps.plan.outcome == &#039;failure&#039;\n      run: exit 1\n    \n    - name: Security Scan with Checkov\n      uses: bridgecrewio/checkov-action@master\n      with:\n        directory: .\n        framework: terraform\n        output_format: sarif\n        output_file_path: checkov.sarif\n    \n    - name: Upload Checkov results to GitHub\n      uses: github/codeql-action/upload-sarif@v2\n      if: always()\n      with:\n        sarif_file: checkov.sarif\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci-integration\" class=\"mobile-header\">GitLab CI Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - validate\n  - plan\n  - apply\n  - destroy\n\nvariables:\n  TF_ROOT: \\${CI_PROJECT_DIR}\n  TF_VERSION: &quot;1.6.4&quot;\n  TF_IN_AUTOMATION: &quot;true&quot;\n\ncache:\n  key: &quot;\\${TF_ROOT}&quot;\n  paths:\n    - \\${TF_ROOT}/.terraform\n\nbefore_script:\n  - cd \\${TF_ROOT}\n  - terraform version\n  - terraform init\n\nvalidate:\n  stage: validate\n  script:\n    - terraform fmt -check -recursive\n    - terraform validate\n    - |\n      for dir in environments/*/; do\n        cd &quot;\\$dir&quot;\n        terraform validate\n        cd -\n      done\n  rules:\n    - if: &#039;\\$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\nplan:development:\n  stage: plan\n  script:\n    - cd environments/development\n    - terraform plan -var-file=&quot;development.tfvars&quot; -out=&quot;development.tfplan&quot;\n  artifacts:\n    paths:\n      - environments/development/development.tfplan\n    expire_in: 1 week\n  rules:\n    - if: &#039;\\$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;\\$CI_COMMIT_BRANCH == &quot;develop&quot;&#039;\n\nplan:production:\n  stage: plan\n  script:\n    - cd environments/production\n    - terraform plan -var-file=&quot;production.tfvars&quot; -out=&quot;production.tfplan&quot;\n  artifacts:\n    paths:\n      - environments/production/production.tfplan\n    expire_in: 1 week\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n\napply:development:\n  stage: apply\n  script:\n    - cd environments/development\n    - terraform apply -input=false &quot;development.tfplan&quot;\n  dependencies:\n    - plan:development\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == &quot;develop&quot;&#039;\n      when: manual\n\napply:production:\n  stage: apply\n  script:\n    - cd environments/production\n    - terraform apply -input=false &quot;production.tfplan&quot;\n  dependencies:\n    - plan:production\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH == \\$CI_DEFAULT_BRANCH&#039;\n      when: manual\n\ndestroy:\n  stage: destroy\n  script:\n    - terraform destroy -auto-approve -var-file=&quot;\\${ENVIRONMENT}.tfvars&quot;\n  rules:\n    - if: &#039;\\$CI_COMMIT_BRANCH&#039;\n      when: manual\n  variables:\n    ENVIRONMENT: &quot;development&quot;  # Change as needed\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"modules-and-best-practices\" class=\"mobile-header\">Modules and Best Practices</h2>\n<h3 id=\"reusable-module-structure\" class=\"mobile-header\">Reusable Module Structure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create module directory structure\nmkdir -p modules/compute/{aws,azure,gcp}\n\n# AWS Compute Module\ncat &gt; modules/compute/aws/main.tf &lt;&lt;EOF\n# AWS EC2 Instance Module\nresource &quot;aws_instance&quot; &quot;main&quot; {\n  count                  = var.instance_count\n  ami                    = data.aws_ami.ubuntu.id\n  instance_type          = var.instance_type\n  key_name              = aws_key_pair.main.key_name\n  vpc_security_group_ids = [aws_security_group.main.id]\n  subnet_id             = var.subnet_id\n\n  user_data = templatefile(&quot;\\${path.module}/user-data.sh&quot;, {\n    hostname = &quot;\\${var.name_prefix}-\\${count.index + 1}&quot;\n  })\n\n  root_block_device {\n    volume_type           = &quot;gp3&quot;\n    volume_size           = var.disk_size\n    encrypted             = true\n    delete_on_termination = true\n  }\n\n  metadata_options {\n    http_endpoint = &quot;enabled&quot;\n    http_tokens   = &quot;required&quot;  # IMDSv2 only\n    http_put_response_hop_limit = 1\n  }\n\n  tags = merge(var.common_tags, {\n    Name = &quot;\\${var.name_prefix}-\\${count.index + 1}&quot;\n    Type = &quot;compute&quot;\n  })\n}\n\n# Security Group\nresource &quot;aws_security_group&quot; &quot;main&quot; {\n  name_prefix = &quot;\\${var.name_prefix}-&quot;\n  vpc_id      = var.vpc_id\n\n  ingress {\n    description = &quot;SSH&quot;\n    from_port   = 22\n    to_port     = 22\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [var.vpc_cidr]\n  }\n\n  ingress {\n    description = &quot;HTTP&quot;\n    from_port   = 80\n    to_port     = 80\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  ingress {\n    description = &quot;HTTPS&quot;\n    from_port   = 443\n    to_port     = 443\n    protocol    = &quot;tcp&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = &quot;-1&quot;\n    cidr_blocks = [&quot;0.0.0.0/0&quot;]\n  }\n\n  tags = var.common_tags\n}\n\n# Key pair\nresource &quot;aws_key_pair&quot; &quot;main&quot; {\n  key_name   = &quot;\\${var.name_prefix}-keypair&quot;\n  public_key = var.ssh_public_key\n\n  tags = var.common_tags\n}\n\n# Data source for latest Ubuntu AMI\ndata &quot;aws_ami&quot; &quot;ubuntu&quot; {\n  most_recent = true\n  owners      = [&quot;099720109477&quot;] # Canonical\n\n  filter {\n    name   = &quot;name&quot;\n    values = [&quot;ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*&quot;]\n  }\n\n  filter {\n    name   = &quot;virtualization-type&quot;\n    values = [&quot;hvm&quot;]\n  }\n}\nEOF\n\n# Module variables\ncat &gt; modules/compute/aws/variables.tf &lt;&lt;EOF\nvariable &quot;instance_count&quot; {\n  description = &quot;Number of instances to create&quot;\n  type        = number\n  default     = 1\n}\n\nvariable &quot;instance_type&quot; {\n  description = &quot;AWS instance type&quot;\n  type        = string\n  default     = &quot;t3.micro&quot;\n}\n\nvariable &quot;disk_size&quot; {\n  description = &quot;Root disk size in GB&quot;\n  type        = number\n  default     = 20\n}\n\nvariable &quot;name_prefix&quot; {\n  description = &quot;Name prefix for resources&quot;\n  type        = string\n}\n\nvariable &quot;vpc_id&quot; {\n  description = &quot;VPC ID&quot;\n  type        = string\n}\n\nvariable &quot;subnet_id&quot; {\n  description = &quot;Subnet ID for instances&quot;\n  type        = string\n}\n\nvariable &quot;vpc_cidr&quot; {\n  description = &quot;VPC CIDR block&quot;\n  type        = string\n}\n\nvariable &quot;ssh_public_key&quot; {\n  description = &quot;SSH public key&quot;\n  type        = string\n}\n\nvariable &quot;common_tags&quot; {\n  description = &quot;Common tags for all resources&quot;\n  type        = map(string)\n  default     = {}\n}\nEOF\n\n# Module outputs\ncat &gt; modules/compute/aws/outputs.tf &lt;&lt;EOF\noutput &quot;instance_ids&quot; {\n  description = &quot;List of instance IDs&quot;\n  value       = aws_instance.main[*].id\n}\n\noutput &quot;instance_ips&quot; {\n  description = &quot;List of instance private IP addresses&quot;\n  value       = aws_instance.main[*].private_ip\n}\n\noutput &quot;instance_public_ips&quot; {\n  description = &quot;List of instance public IP addresses&quot;\n  value       = aws_instance.main[*].public_ip\n}\n\noutput &quot;security_group_id&quot; {\n  description = &quot;Security group ID&quot;\n  value       = aws_security_group.main.id\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"environment-specific-configurations\" class=\"mobile-header\">Environment-Specific Configurations</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create environment directory structure\nmkdir -p environments/{development,staging,production}\n\n# Development environment\ncat &gt; environments/development/main.tf &lt;&lt;EOF\n# Development Environment Configuration\nmodule &quot;aws_infrastructure&quot; {\n  source = &quot;../../modules/infrastructure/aws&quot;\n  \n  environment     = &quot;development&quot;\n  instance_type   = &quot;t3.micro&quot;\n  min_size       = 1\n  max_size       = 2\n  disk_size      = 20\n  \n  common_tags = local.common_tags\n}\n\nmodule &quot;azure_infrastructure&quot; {\n  source = &quot;../../modules/infrastructure/azure&quot;\n  \n  environment   = &quot;development&quot;\n  vm_size      = &quot;Standard_B1s&quot;\n  instance_count = 1\n  \n  common_tags = local.common_tags\n}\n\nlocals {\n  common_tags = {\n    Environment   = &quot;development&quot;\n    Project       = var.project_name\n    ManagedBy     = &quot;terraform&quot;\n    Owner         = var.owner\n    CostCenter    = &quot;development&quot;\n  }\n}\nEOF\n\ncat &gt; environments/development/development.tfvars &lt;&lt;EOF\n# Development Environment Variables\nproject_name = &quot;myproject-dev&quot;\nenvironment  = &quot;development&quot;\nowner       = &quot;devops-team&quot;\n\n# AWS\naws_region = &quot;us-west-2&quot;\ninstance_type = {\n  aws   = &quot;t3.micro&quot;\n  azure = &quot;Standard_B1s&quot; \n  gcp   = &quot;e2-micro&quot;\n}\n\n# Networking\nvpc_cidr = &quot;10.0.0.0/16&quot;\n\n# Development-specific settings\nenable_detailed_monitoring = false\nbackup_retention_days     = 7\nlog_retention_days       = 30\nEOF\n\n# Production environment\ncat &gt; environments/production/main.tf &lt;&lt;EOF\n# Production Environment Configuration\nmodule &quot;aws_infrastructure&quot; {\n  source = &quot;../../modules/infrastructure/aws&quot;\n  \n  environment     = &quot;production&quot;\n  instance_type   = &quot;t3.large&quot;\n  min_size       = 3\n  max_size       = 10\n  disk_size      = 100\n  \n  enable_monitoring = true\n  backup_enabled   = true\n  \n  common_tags = local.common_tags\n}\n\nmodule &quot;azure_infrastructure&quot; {\n  source = &quot;../../modules/infrastructure/azure&quot;\n  \n  environment    = &quot;production&quot;\n  vm_size       = &quot;Standard_D2s_v3&quot;\n  instance_count = 3\n  \n  enable_backup = true\n  \n  common_tags = local.common_tags\n}\n\nmodule &quot;gcp_infrastructure&quot; {\n  source = &quot;../../modules/infrastructure/gcp&quot;\n  \n  environment    = &quot;production&quot;\n  machine_type  = &quot;e2-standard-2&quot;\n  instance_count = 3\n  \n  enable_backup = true\n  \n  common_tags = local.common_tags\n}\n\nlocals {\n  common_tags = {\n    Environment   = &quot;production&quot;\n    Project       = var.project_name\n    ManagedBy     = &quot;terraform&quot;\n    Owner         = var.owner\n    CostCenter    = &quot;production&quot;\n    Compliance    = &quot;SOC2&quot;\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-scanning-and-compliance\" class=\"mobile-header\">Security Scanning and Compliance</h2>\n<h3 id=\"pre-commit-hooks\" class=\"mobile-header\">Pre-commit Hooks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install pre-commit\npip3 install pre-commit\n\n# Create .pre-commit-config.yaml\ncat &gt; .pre-commit-config.yaml &lt;&lt;EOF\nrepos:\n- repo: https://github.com/antonbabenko/pre-commit-terraform\n  rev: v1.83.5\n  hooks:\n    - id: terraform_fmt\n    - id: terraform_validate\n    - id: terraform_docs\n    - id: terraform_tflint\n      args:\n        - --args=--config=__GIT_WORKING_DIR__/.tflint.hcl\n    - id: terraform_checkov\n      args:\n        - --args=--config-file __GIT_WORKING_DIR__/.checkov.yaml\n    - id: terraform_trivy\n\n- repo: https://github.com/pre-commit/pre-commit-hooks\n  rev: v4.4.0\n  hooks:\n    - id: trailing-whitespace\n    - id: end-of-file-fixer\n    - id: check-yaml\n    - id: check-added-large-files\n    - id: check-merge-conflict\nEOF\n\n# Install pre-commit hooks\npre-commit install\n\n# Create security scanning configuration\ncat &gt; .checkov.yaml &lt;&lt;EOF\nframework:\n  - terraform\n  - secrets\n\ncheck:\n  - CKV_AWS_79  # Ensure Instance Metadata Service Version 1 is not enabled\n  - CKV_AWS_8   # Ensure all data stored in the Launch configuration EBS is securely encrypted at rest\n  - CKV_AWS_3   # Ensure all data stored in the Launch configuration EBS is securely encrypted at rest\n\nskip-check:\n  - CKV_AWS_79  # Skip if IMDSv1 is required for legacy applications\n\noutput: cli\nquiet: false\ncompact: false\nEOF\n\n# TFLint configuration\ncat &gt; .tflint.hcl &lt;&lt;EOF\nplugin &quot;aws&quot; {\n    enabled = true\n    version = &quot;0.21.2&quot;\n    source  = &quot;github.com/terraform-linters/tflint-ruleset-aws&quot;\n}\n\nplugin &quot;azurerm&quot; {\n    enabled = true\n    version = &quot;0.21.0&quot;\n    source  = &quot;github.com/terraform-linters/tflint-ruleset-azurerm&quot;\n}\n\nplugin &quot;google&quot; {\n    enabled = true\n    version = &quot;0.21.0&quot;\n    source  = &quot;github.com/terraform-linters/tflint-ruleset-google&quot;\n}\n\nrule &quot;aws_instance_invalid_type&quot; {\n  enabled = true\n}\n\nrule &quot;aws_instance_previous_type&quot; {\n  enabled = true\n}\n\nrule &quot;terraform_unused_declarations&quot; {\n  enabled = true\n}\n\nrule &quot;terraform_naming_convention&quot; {\n  enabled = true\n  format  = &quot;snake_case&quot;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"terraform-workspace-management\" class=\"mobile-header\">Terraform Workspace Management</h2>\n<h3 id=\"multi-environment-workflows\" class=\"mobile-header\">Multi-Environment Workflows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create and manage workspaces\nterraform workspace new development\nterraform workspace new staging\nterraform workspace new production\n\n# List workspaces\nterraform workspace list\n\n# Switch workspace\nterraform workspace select production\n\n# Show current workspace\nterraform workspace show\n\n# Workspace-specific configurations\ncat &gt; workspace-vars.tf &lt;&lt;EOF\nlocals {\n  workspace_config = {\n    development = {\n      instance_type = &quot;t3.micro&quot;\n      min_size     = 1\n      max_size     = 2\n      environment  = &quot;dev&quot;\n    }\n    staging = {\n      instance_type = &quot;t3.small&quot;\n      min_size     = 2\n      max_size     = 4\n      environment  = &quot;staging&quot;\n    }\n    production = {\n      instance_type = &quot;t3.large&quot;\n      min_size     = 3\n      max_size     = 10\n      environment  = &quot;prod&quot;\n    }\n  }\n  \n  current_config = local.workspace_config[terraform.workspace]\n}\n\n# Use workspace-specific configuration\nresource &quot;aws_instance&quot; &quot;web&quot; {\n  count         = local.current_config.min_size\n  instance_type = local.current_config.instance_type\n  \n  tags = {\n    Name        = &quot;\\${local.current_config.environment}-web-\\${count.index + 1}&quot;\n    Environment = local.current_config.environment\n    Workspace   = terraform.workspace\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"state-management-best-practices\" class=\"mobile-header\">State Management Best Practices</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Remote state configuration with different backends\ncat &gt; backend-configs/s3.conf &lt;&lt;EOF\nbucket         = &quot;terraform-state-bucket&quot;\nkey            = &quot;infrastructure/terraform.tfstate&quot;\nregion         = &quot;us-west-2&quot;\nencrypt        = true\nkms_key_id     = &quot;arn:aws:kms:us-west-2:ACCOUNT:key/KEY-ID&quot;\ndynamodb_table = &quot;terraform-state-lock&quot;\nEOF\n\ncat &gt; backend-configs/azurerm.conf &lt;&lt;EOF\nresource_group_name  = &quot;terraform-state-rg&quot;\nstorage_account_name = &quot;terraformstatestorage&quot;\ncontainer_name      = &quot;tfstate&quot;\nkey                 = &quot;infrastructure.terraform.tfstate&quot;\nEOF\n\ncat &gt; backend-configs/gcs.conf &lt;&lt;EOF\nbucket  = &quot;terraform-state-bucket&quot;\nprefix  = &quot;infrastructure/state&quot;\nEOF\n\n# Initialize with specific backend\nterraform init -backend-config=backend-configs/s3.conf\n\n# Import existing resources\nterraform import aws_instance.web i-1234567890abcdef0\nterraform import azurerm_virtual_machine.main /subscriptions/.../resourceGroups/.../providers/Microsoft.Compute/virtualMachines/vm-name\n\n# State manipulation commands\nterraform state list\nterraform state show aws_instance.web\nterraform state mv aws_instance.web aws_instance.web_server\nterraform state rm aws_instance.old</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"credential-management\" class=\"mobile-header\">Credential Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use environment variables for credentials (never hardcode)\ncat &gt; .env.example &lt;&lt;EOF\n# AWS\nAWS_ACCESS_KEY_ID=your_access_key\nAWS_SECRET_ACCESS_KEY=your_secret_key\nAWS_DEFAULT_REGION=us-west-2\n\n# Azure\nARM_CLIENT_ID=your_client_id\nARM_CLIENT_SECRET=your_client_secret\nARM_SUBSCRIPTION_ID=your_subscription_id\nARM_TENANT_ID=your_tenant_id\n\n# GCP\nGOOGLE_APPLICATION_CREDENTIALS=/path/to/service-account-key.json\nGOOGLE_PROJECT=your_project_id\nGOOGLE_REGION=us-central1\n\n# Terraform Cloud/Enterprise\nTF_CLOUD_TOKEN=your_terraform_cloud_token\nEOF\n\n# Use IAM roles instead of access keys (AWS)\ncat &gt; iam-role.tf &lt;&lt;EOF\n# IAM role for Terraform execution (when running on EC2)\nresource &quot;aws_iam_role&quot; &quot;terraform_execution&quot; {\n  name = &quot;TerraformExecutionRole&quot;\n\n  assume_role_policy = jsonencode({\n    Version = &quot;2012-10-17&quot;\n    Statement = [\n      {\n        Action = &quot;sts:AssumeRole&quot;\n        Effect = &quot;Allow&quot;\n        Principal = {\n          Service = &quot;ec2.amazonaws.com&quot;\n        }\n      },\n    ]\n  })\n}\n\n# Attach policies with least privilege\nresource &quot;aws_iam_role_policy&quot; &quot;terraform_execution&quot; {\n  name = &quot;TerraformExecutionPolicy&quot;\n  role = aws_iam_role.terraform_execution.id\n\n  policy = jsonencode({\n    Version = &quot;2012-10-17&quot;\n    Statement = [\n      {\n        Effect = &quot;Allow&quot;\n        Action = [\n          &quot;ec2:*&quot;,\n          &quot;vpc:*&quot;,\n          &quot;iam:PassRole&quot;,\n          &quot;s3:GetObject&quot;,\n          &quot;s3:PutObject&quot;\n        ]\n        Resource = &quot;*&quot;\n      }\n    ]\n  })\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"policy-as-code\" class=\"mobile-header\">Policy as Code</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># OPA (Open Policy Agent) integration\ncat &gt; policy/security.rego &lt;&lt;EOF\npackage terraform.security\n\n# Deny instances without encryption\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == &quot;aws_instance&quot;\n    resource.change.after.root_block_device[_].encrypted == false\n    reason := &quot;AWS instances must have encrypted root volumes&quot;\n}\n\n# Deny public S3 buckets\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == &quot;aws_s3_bucket_public_access_block&quot;\n    resource.change.after.block_public_acls == false\n    reason := &quot;S3 buckets must block public access&quot;\n}\n\n# Require specific instance types in production\ndeny[reason] {\n    resource := input.resource_changes[_]\n    resource.type == &quot;aws_instance&quot;\n    instance_type := resource.change.after.instance_type\n    not startswith(instance_type, &quot;t3.&quot;)\n    not startswith(instance_type, &quot;m5.&quot;)\n    workspace := input.terraform_version.workspace\n    workspace == &quot;production&quot;\n    reason := &quot;Production instances must use approved instance types&quot;\n}\nEOF\n\n# Conftest for policy validation\n# Install conftest\nCONFTEST_VERSION=&quot;0.46.0&quot;\nwget https://github.com/open-policy-agent/conftest/releases/download/v${CONFTEST_VERSION}/conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz\ntar xzf conftest_${CONFTEST_VERSION}_Linux_x86_64.tar.gz\nsudo mv conftest /usr/local/bin/\n\n# Validate Terraform plan against policies\nterraform plan -out=tfplan\nterraform show -json tfplan &gt; tfplan.json\nconftest test tfplan.json --policy policy/</code></pre>\n      </div>\n    </div>\n<h3 id=\"compliance-and-governance\" class=\"mobile-header\">Compliance and Governance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Sentinel policy example (Terraform Cloud/Enterprise)\ncat &gt; sentinel/require-encryption.sentinel &lt;&lt;EOF\nimport &quot;tfplan/v2&quot; as tfplan\nimport &quot;strings&quot;\n\n# Main rule\nmain = rule {\n    all tfplan.resource_changes as _, changes {\n        changes.type is &quot;aws_instance&quot; implies\n            changes.change.after.root_block_device[0].encrypted is true\n    }\n}\n\n# Helper function\nis_encrypted = func(resource) {\n    return resource.change.after.root_block_device[0].encrypted else false\n}\nEOF\n\n# Cost estimation with Infracost\n# Install Infracost\ncurl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh\n\n# Configure Infracost\ninfracost auth login\n\n# Generate cost estimate\ninfracost breakdown --path .\ninfracost diff --path . --compare-to main</code></pre>\n      </div>\n    </div>\n<h2 id=\"disaster-recovery-and-business-continuity\" class=\"mobile-header\">Disaster Recovery and Business Continuity</h2>\n<h3 id=\"multi-region-deployment\" class=\"mobile-header\">Multi-Region Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; multi-region.tf &lt;&lt;EOF\n# Multi-region deployment with disaster recovery\nmodule &quot;primary_region&quot; {\n  source = &quot;./modules/infrastructure&quot;\n  \n  providers = {\n    aws = aws.us-west-2\n  }\n  \n  environment = var.environment\n  region     = &quot;us-west-2&quot;\n  is_primary = true\n  \n  # Primary region configuration\n  instance_count    = var.primary_instance_count\n  database_backup  = true\n  cross_region_backup = true\n}\n\nmodule &quot;disaster_recovery_region&quot; {\n  source = &quot;./modules/infrastructure&quot;\n  \n  providers = {\n    aws = aws.us-east-1\n  }\n  \n  environment = var.environment\n  region     = &quot;us-east-1&quot;\n  is_primary = false\n  \n  # DR region configuration\n  instance_count = var.dr_instance_count\n  database_mode = &quot;read_replica&quot;\n  \n  # Dependency on primary region\n  depends_on = [module.primary_region]\n}\n\n# Provider configurations for multiple regions\nprovider &quot;aws&quot; {\n  alias  = &quot;us-west-2&quot;\n  region = &quot;us-west-2&quot;\n}\n\nprovider &quot;aws&quot; {\n  alias  = &quot;us-east-1&quot;\n  region = &quot;us-east-1&quot;\n}\n\n# Cross-region replication\nresource &quot;aws_s3_bucket_replication_configuration&quot; &quot;main&quot; {\n  role   = aws_iam_role.replication.arn\n  bucket = module.primary_region.s3_bucket_id\n\n  rule {\n    id     = &quot;replicate-everything&quot;\n    status = &quot;Enabled&quot;\n\n    destination {\n      bucket        = module.disaster_recovery_region.s3_bucket_arn\n      storage_class = &quot;STANDARD_IA&quot;\n    }\n  }\n\n  depends_on = [aws_s3_bucket_versioning.main]\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-and-recovery-automation\" class=\"mobile-header\">Backup and Recovery Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Automated backup script for Terraform state and configurations\nsudo tee /usr/local/bin/terraform-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/terraform&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{state,configs,plans}\n\n# Backup Terraform configurations\nfind /opt/terraform -name &quot;*.tf&quot; -o -name &quot;*.tfvars&quot; | while read tf_file; do\n    relative_path=$(echo $tf_file | sed &#039;s|^/opt/terraform/||&#039;)\n    mkdir -p ${BACKUP_DIR}/configs/$(dirname $relative_path)\n    cp &quot;$tf_file&quot; ${BACKUP_DIR}/configs/$relative_path\ndone\n\n# Backup state files (if using local backend)\nfind /opt/terraform -name &quot;terraform.tfstate*&quot; | while read state_file; do\n    relative_path=$(echo $state_file | sed &#039;s|^/opt/terraform/||&#039;)\n    mkdir -p ${BACKUP_DIR}/state/$(dirname $relative_path)\n    cp &quot;$state_file&quot; ${BACKUP_DIR}/state/$relative_path\ndone\n\n# Backup remote state (if using S3)\naws s3 sync s3://terraform-state-bucket/ ${BACKUP_DIR}/remote-state/\n\n# Create archive\ntar -czf ${BACKUP_DIR}/terraform-complete-backup-${DATE}.tar.gz -C ${BACKUP_DIR} configs state remote-state\n\n# Upload to multiple cloud storage\naws s3 cp ${BACKUP_DIR}/terraform-complete-backup-${DATE}.tar.gz s3://terraform-backups/\naz storage blob upload --file ${BACKUP_DIR}/terraform-complete-backup-${DATE}.tar.gz --container-name terraform-backups --name terraform-complete-backup-${DATE}.tar.gz\ngsutil cp ${BACKUP_DIR}/terraform-complete-backup-${DATE}.tar.gz gs://terraform-backups/\n\n# Keep only last 30 backups\nfind ${BACKUP_DIR} -name &quot;terraform-complete-backup-*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Terraform backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/terraform-backup.sh\n\n# Schedule daily backup\necho &quot;0 1 * * * root /usr/local/bin/terraform-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-testing\" class=\"mobile-header\">Verification and Testing</h2>\n<h3 id=\"comprehensive-testing\" class=\"mobile-header\">Comprehensive Testing</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test Terraform configuration\nterraform fmt -check -recursive\nterraform validate\n\n# Test across all environments\nfor env in development staging production; do\n    echo &quot;Testing $env environment...&quot;\n    cd environments/$env\n    terraform init\n    terraform validate\n    terraform plan -var-file=&quot;$env.tfvars&quot;\n    cd ../..\ndone\n\n# Security scanning\ncheckov --framework terraform --directory .\nterrascan scan -t aws\ntrivy config .\n\n# Cost estimation\ninfracost breakdown --path .\n\n# Compliance checking\nterraform-compliance -p . -f compliance-tests/\n\n# Integration testing with Terratest (Go)\ncat &gt; test/integration_test.go &lt;&lt;EOF\npackage test\n\nimport (\n    &quot;testing&quot;\n    &quot;github.com/gruntwork-io/terratest/modules/terraform&quot;\n    &quot;github.com/stretchr/testify/assert&quot;\n)\n\nfunc TestTerraformAWSExample(t *testing.T) {\n    terraformOptions := &amp;terraform.Options{\n        TerraformDir: &quot;../environments/development&quot;,\n        VarFiles:     []string{&quot;development.tfvars&quot;},\n    }\n\n    defer terraform.Destroy(t, terraformOptions)\n    terraform.InitAndApply(t, terraformOptions)\n\n    # Test that resources were created\n    instanceID := terraform.Output(t, terraformOptions, &quot;instance_id&quot;)\n    assert.NotEmpty(t, instanceID)\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-and-monitoring\" class=\"mobile-header\">Performance and Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor Terraform execution\nterraform apply -parallelism=10\n\n# Profile Terraform execution\nTF_LOG=DEBUG terraform apply\n\n# State file analysis\nterraform state list\nterraform show\n\n# Resource drift detection\nterraform plan -refresh-only\n\n# Dependency graphing\nterraform graph | dot -Tsvg &gt; graph.svg\n\n# Resource import verification\nterraform plan -generate-config-out=generated.tf</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-use-cases\" class=\"mobile-header\">Advanced Use Cases</h2>\n<h3 id=\"multi-cloud-kubernetes-deployment\" class=\"mobile-header\">Multi-Cloud Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; multi-cloud-k8s.tf &lt;&lt;EOF\n# EKS Cluster (AWS)\nmodule &quot;aws_eks&quot; {\n  source = &quot;terraform-aws-modules/eks/aws&quot;\n  version = &quot;~&gt; 19.0&quot;\n\n  cluster_name    = &quot;\\${var.project_name}-eks-\\${var.environment}&quot;\n  cluster_version = &quot;1.28&quot;\n\n  vpc_id                          = module.aws_vpc.vpc_id\n  subnet_ids                      = module.aws_vpc.private_subnets\n  cluster_endpoint_public_access  = false\n  cluster_endpoint_private_access = true\n\n  eks_managed_node_groups = {\n    main = {\n      min_size     = 1\n      max_size     = 5\n      desired_size = 3\n\n      instance_types = [&quot;t3.medium&quot;]\n      capacity_type  = &quot;ON_DEMAND&quot;\n      \n      k8s_labels = {\n        Environment = var.environment\n        NodeGroup   = &quot;main&quot;\n      }\n    }\n  }\n\n  tags = var.common_tags\n}\n\n# AKS Cluster (Azure)\nresource &quot;azurerm_kubernetes_cluster&quot; &quot;main&quot; {\n  name                = &quot;\\${var.project_name}-aks-\\${var.environment}&quot;\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  dns_prefix          = &quot;\\${var.project_name}-aks&quot;\n\n  default_node_pool {\n    name       = &quot;default&quot;\n    node_count = 3\n    vm_size    = &quot;Standard_D2_v2&quot;\n    \n    upgrade_settings {\n      max_surge = &quot;10%&quot;\n    }\n  }\n\n  identity {\n    type = &quot;SystemAssigned&quot;\n  }\n\n  network_profile {\n    network_plugin = &quot;azure&quot;\n    network_policy = &quot;calico&quot;\n  }\n\n  tags = var.common_tags\n}\n\n# GKE Cluster (GCP)\nresource &quot;google_container_cluster&quot; &quot;main&quot; {\n  name     = &quot;\\${var.project_name}-gke-\\${var.environment}&quot;\n  location = var.gcp_region\n  project  = var.gcp_project_id\n\n  # Remove default node pool\n  remove_default_node_pool = true\n  initial_node_count       = 1\n\n  network    = google_compute_network.main.name\n  subnetwork = google_compute_subnetwork.main.name\n\n  private_cluster_config {\n    enable_private_nodes    = true\n    enable_private_endpoint = false\n    master_ipv4_cidr_block  = &quot;172.16.0.0/28&quot;\n  }\n\n  workload_identity_config {\n    workload_pool = &quot;\\${var.gcp_project_id}.svc.id.goog&quot;\n  }\n}\n\nresource &quot;google_container_node_pool&quot; &quot;main&quot; {\n  name       = &quot;main&quot;\n  location   = var.gcp_region\n  cluster    = google_container_cluster.main.name\n  node_count = 1\n  project    = var.gcp_project_id\n\n  autoscaling {\n    min_node_count = 1\n    max_node_count = 5\n  }\n\n  node_config {\n    preemptible  = false\n    machine_type = &quot;e2-medium&quot;\n\n    oauth_scopes = [\n      &quot;https://www.googleapis.com/auth/cloud-platform&quot;\n    ]\n\n    workload_metadata_config {\n      mode = &quot;GKE_METADATA&quot;\n    }\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"infrastructure-monitoring-with-terraform\" class=\"mobile-header\">Infrastructure Monitoring with Terraform</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; monitoring.tf &lt;&lt;EOF\n# CloudWatch alarms (AWS)\nresource &quot;aws_cloudwatch_metric_alarm&quot; &quot;high_cpu&quot; {\n  for_each = toset(module.aws_infrastructure.instance_ids)\n  \n  alarm_name          = &quot;high-cpu-\\${each.key}&quot;\n  comparison_operator = &quot;GreaterThanThreshold&quot;\n  evaluation_periods  = &quot;2&quot;\n  metric_name        = &quot;CPUUtilization&quot;\n  namespace          = &quot;AWS/EC2&quot;\n  period             = &quot;300&quot;\n  statistic          = &quot;Average&quot;\n  threshold          = &quot;80&quot;\n  alarm_description  = &quot;This metric monitors ec2 cpu utilization&quot;\n\n  dimensions = {\n    InstanceId = each.value\n  }\n\n  alarm_actions = [aws_sns_topic.alerts.arn]\n}\n\n# Azure Monitor alerts\nresource &quot;azurerm_monitor_metric_alert&quot; &quot;cpu_alert&quot; {\n  name                = &quot;cpu-alert&quot;\n  resource_group_name = azurerm_resource_group.main.name\n  scopes              = [azurerm_virtual_machine.main.id]\n\n  criteria {\n    metric_namespace = &quot;Microsoft.Compute/virtualMachines&quot;\n    metric_name      = &quot;Percentage CPU&quot;\n    aggregation      = &quot;Average&quot;\n    operator         = &quot;GreaterThan&quot;\n    threshold        = 80\n  }\n\n  action {\n    action_group_id = azurerm_monitor_action_group.main.id\n  }\n}\n\n# GCP monitoring policy\nresource &quot;google_monitoring_alert_policy&quot; &quot;cpu_usage&quot; {\n  display_name = &quot;CPU Usage Alert&quot;\n  combiner     = &quot;OR&quot;\n  project      = var.gcp_project_id\n\n  conditions {\n    display_name = &quot;CPU usage condition&quot;\n\n    condition_threshold {\n      filter         = &quot;resource.type=\\&quot;gce_instance\\&quot;&quot;\n      duration       = &quot;300s&quot;\n      comparison     = &quot;COMPARISON_GREATER_THAN&quot;\n      threshold_value = 0.8\n\n      aggregations {\n        alignment_period   = &quot;300s&quot;\n        per_series_aligner = &quot;ALIGN_RATE&quot;\n      }\n    }\n  }\n\n  alert_strategy {\n    notification_rate_limit {\n      period = &quot;300s&quot;\n    }\n    auto_close = &quot;1800s&quot;\n  }\n\n  notification_channels = [google_monitoring_notification_channel.email.name]\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Terraform configuration\nterraform fmt -check -diff\nterraform validate\n\n# Debug Terraform execution\nTF_LOG=DEBUG terraform apply\nTF_LOG=TRACE terraform apply\n\n# State file issues\nterraform state list\nterraform state show resource_name\n\n# Provider authentication issues\nterraform init -upgrade\nterraform providers\n\n# Lock issues\nterraform force-unlock LOCK_ID\n\n# Refresh state from real infrastructure\nterraform refresh\n\n# Import existing resources\nterraform import aws_instance.example i-1234567890abcdef0\n\n# Validate provider configurations\n# AWS\naws sts get-caller-identity\n\n# Azure\naz account show\n\n# GCP\ngcloud auth list\ngcloud config get-value project\n\n# Check resource quotas\naws service-quotas get-service-quota --service-code ec2 --quota-code L-1216C47A\naz vm list-usage --location &quot;East US&quot;\ngcloud compute project-info describe --project=$PROJECT_ID\n\n# Plan file analysis\nterraform show tfplan\nterraform show -json tfplan | jq &#039;.resource_changes[] | {type: .type, name: .name, action: .change.actions}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Provider debug logging\nTF_LOG_PROVIDER=DEBUG terraform apply\n\n# Crash log analysis\ncat crash.log\n\n# Performance profiling\nterraform apply -parallelism=1  # Sequential execution for debugging\n\n# Resource graph visualization\nterraform graph -type=plan | dot -Tpng &gt; plan.png\n\n# State manipulation for recovery\nterraform state rm problematic_resource\nterraform import resource_type.name resource_id\n\n# Force resource recreation\nterraform taint resource_type.name\nterraform apply\n\n# Workspace state recovery\nterraform workspace select production\nterraform state pull &gt; production.tfstate.backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Terraform Registry</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/cloud-docs/recommended-practices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Multi-Cloud Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.hashicorp.com/terraform/language/values/sensitive\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/aws/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">AWS Provider Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Azure Provider Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://registry.terraform.io/providers/hashicorp/google/latest/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GCP Provider Documentation</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"29 min","wordCount":5734,"lastBuilt":"2025-09-14T03:45:44.621Z"},"category":{"key":"infrastructure","name":"Infrastructure","description":"DevOps and infrastructure automation tools","icon":"🏗️","color":"#44475a","keywords":["ansible","terraform","gitlab","jenkins","consul","etcd"]},"relatedGuides":[{"name":"adguard-home","displayName":"Adguard Home","slug":"adguard-home","description":"Repo for adguard-home","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adguard-home","updatedAt":"2025-09-08T03:04:18Z","createdAt":"2025-09-08T03:04:08Z","readmeRaw":"## 👋 Welcome to adguard-home 🚀  \n\nadguard-home README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adguard-home\" class=\"mobile-header\">👋 Welcome to adguard-home 🚀  </h2>\n<p class=\"mobile-paragraph\">adguard-home README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T03:46:07.037Z"},{"name":"adminer","displayName":"Adminer","slug":"adminer","description":"Repo for adminer","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/adminer","updatedAt":"2025-09-08T03:04:32Z","createdAt":"2025-09-08T03:04:22Z","readmeRaw":"## 👋 Welcome to adminer 🚀  \n\nadminer README  \n  \n  \n## Author  \n\n🤖 casjay: [Github](https://github.com/casjay) 🤖  \n","readmeHtml":"<h2 id=\"welcome-to-adminer\" class=\"mobile-header\">👋 Welcome to adminer 🚀  </h2>\n<p class=\"mobile-paragraph\">adminer README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">🤖 casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> 🤖  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T03:46:06.794Z"},{"name":"ansible","displayName":"Ansible","slug":"ansible","description":"Repo for ansible","category":"infrastructure","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/ansible","updatedAt":"2025-09-14T01:29:39Z","createdAt":"2025-09-08T03:04:35Z","readmeRaw":"# Ansible Installation Guide\n\nAgentless automation platform for configuration management, application deployment, and task automation across multiple systems. Industry standard for infrastructure automation with enterprise-grade security.\n\n## Prerequisites\n\n- Linux control machine (any modern distribution)\n- Python 3.8+ on control machine\n- SSH access to target hosts\n- Python 2.7+ or 3.5+ on target hosts\n- 2GB RAM minimum, 4GB+ recommended for large infrastructures\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Fedora\n```bash\n# Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version\n```\n\n#### Arch Linux\n```bash\n# Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version\n```\n\n#### Alpine Linux\n```bash\n# Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version\n```\n\n### Using pip (Latest Version)\n```bash\n# Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho 'source ~/ansible-venv/bin/activate' >> ~/.bashrc\n\n# Verify installation\nansible --version\n```\n\n### Using Docker\n```bash\n# Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker > /dev/null <<'EOF'\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest \"$@\"\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho 'alias ansible=\"ansible-docker ansible\"' >> ~/.bashrc\necho 'alias ansible-playbook=\"ansible-docker ansible-playbook\"' >> ~/.bashrc\n```\n\n## Project Structure and Configuration\n\n### Professional Project Structure\n```bash\n# Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat > ansible.cfg <<EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF\n```\n\n### Advanced Inventory Management\n```bash\n# Create production inventory with groups and variables\ncat > inventories/production/hosts.yml <<EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: \"{{ vault_mysql_root_password }}\"\n        mysql_replication_user: \"{{ vault_mysql_replication_user }}\"\n        mysql_replication_password: \"{{ vault_mysql_replication_password }}\"\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: \"{{ vault_haproxy_stats_password }}\"\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: \"0 2 * * *\"\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: \"0 1 * * *\"\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat > inventories/production/aws_ec2.yml <<EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: \"'web' in tags.Role\"\n  databases: \"'db' in tags.Role\"\n  loadbalancers: \"'lb' in tags.Role\"\n  \n  # Group by environment\n  production: \"tags.Environment == 'production'\"\n  staging: \"tags.Environment == 'staging'\"\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == \"us-west-2a\"\n  us_west_2b: ec2_placement_availability_zone == \"us-west-2b\"\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF\n```\n\n### Ansible Vault Security\n```bash\n# Create strong vault password\nopenssl rand -base64 32 > ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat > group_vars/all/vars.yml <<EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: \"{{ vault_mysql_root_password }}\"\ngrafana_admin_password: \"{{ vault_grafana_admin_password }}\"\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: \"{{ vault_ssl_private_key }}\"\n\n# Security settings\nansible_ssh_common_args: '-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts'\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml\n```\n\n## Comprehensive Playbooks\n\n### System Hardening Playbook\n```bash\ncat > playbooks/system-hardening.yml <<EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [\"Debian\", \"RedHat\"]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: \"*\"\n        state: latest\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == \"Debian\"\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: \"{{ security_packages }}\"\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: 'ansible ALL=(ALL) NOPASSWD:ALL'\n        create: yes\n        mode: '0440'\n        validate: 'visudo -cf %s'\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: \"{{ item.regexp }}\"\n        line: \"{{ item.line }}\"\n        backup: yes\n      loop:\n        - { regexp: '^#?PermitRootLogin', line: 'PermitRootLogin no' }\n        - { regexp: '^#?PasswordAuthentication', line: 'PasswordAuthentication no' }\n        - { regexp: '^#?X11Forwarding', line: 'X11Forwarding no' }\n        - { regexp: '^#?MaxAuthTries', line: 'MaxAuthTries 3' }\n        - { regexp: '^#?ClientAliveInterval', line: 'ClientAliveInterval 300' }\n        - { regexp: '^#?ClientAliveCountMax', line: 'ClientAliveCountMax 0' }\n        - { regexp: '^#?Protocol', line: 'Protocol 2' }\n        - { regexp: '^#?LogLevel', line: 'LogLevel VERBOSE' }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == \"Debian\"\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: 'SSH access'\n      when: ansible_os_family == \"Debian\"\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == \"RedHat\"\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: \"{{ item }}\"\n        enabled: no\n        state: stopped\n      loop: \"{{ disabled_services }}\"\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: \"{{ item.path }}\"\n        mode: \"{{ item.mode }}\"\n        owner: root\n        group: root\n      loop:\n        - { path: '/etc/passwd', mode: '0644' }\n        - { path: '/etc/shadow', mode: '0640' }\n        - { path: '/etc/group', mode: '0644' }\n        - { path: '/etc/gshadow', mode: '0640' }\n        - { path: '/etc/ssh/sshd_config', mode: '0600' }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'net.ipv4.ip_forward', value: '0' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_source_route', value: '0' }\n        - { key: 'net.ipv4.conf.all.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.accept_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.secure_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'kernel.randomize_va_space', value: '2' }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: \"{{ 'ssh' if ansible_os_family == 'Debian' else 'sshd' }}\"\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF\n```\n\n### Application Deployment Playbook\n```bash\ncat > playbooks/web-application-deployment.yml <<EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: \"25%\"  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: \"{{ app_version | default('latest') }}\"\n    app_port: 3000\n    nginx_workers: \"{{ ansible_processor_cores }}\"\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: \"Server is in maintenance mode\"\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: \"{{ app_name }}\"\n        system: yes\n        shell: /bin/false\n        home: \"/opt/{{ app_name }}\"\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: \"{{ item }}\"\n        state: directory\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0755'\n      loop:\n        - \"/opt/{{ app_name }}\"\n        - \"/opt/{{ app_name }}/releases\"\n        - \"/opt/{{ app_name }}/shared\"\n        - \"/var/log/{{ app_name }}\"\n\n    - name: Download application release\n      get_url:\n        url: \"https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        mode: '0644'\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: \"/tmp/{{ app_name }}-{{ app_version }}.tar.gz\"\n        dest: \"/opt/{{ app_name }}/releases/\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        remote_src: yes\n        creates: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n\n    - name: Create symlink to current release\n      file:\n        src: \"/opt/{{ app_name }}/releases/{{ app_version }}\"\n        dest: \"/opt/{{ app_name }}/current\"\n        state: link\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: \"templates/{{ app_name }}.conf.j2\"\n        dest: \"/opt/{{ app_name }}/shared/{{ app_name }}.conf\"\n        owner: \"{{ app_name }}\"\n        group: \"{{ app_name }}\"\n        mode: '0640'\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: \"templates/{{ app_name }}.service.j2\"\n        dest: \"/etc/systemd/system/{{ app_name }}.service\"\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: \"{{ app_name }}\"\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: \"http://localhost:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: \"http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health\"\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: \"/var/log/{{ app_name }}/deployments.log\"\n        line: \"{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}\"\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: \"{{ app_name }}\"\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF\n```\n\n### Infrastructure as Code Playbook\n```bash\ncat > playbooks/infrastructure-provisioning.yml <<EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: \"{{ inventory_hostname }}\"\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: \"{{ ansible_default_ipv4.address }} {{ inventory_hostname }}\"\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: \"{{ base_packages[ansible_os_family] | default(base_packages['Debian']) }}\"\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chrony' }}\"\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: \"{{ 'ntp' if ansible_os_family == 'Debian' else 'chronyd' }}\"\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: '0644'\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: \"https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz\"\n        dest: /tmp/node_exporter.tar.gz\n        mode: '0644'\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: '0755'\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: '0644'\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: \"{{ item.key }}\"\n        value: \"{{ item.value }}\"\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: 'kernel.dmesg_restrict', value: '1' }\n        - { key: 'kernel.kptr_restrict', value: '2' }\n        - { key: 'kernel.yama.ptrace_scope', value: '1' }\n        - { key: 'net.ipv4.conf.all.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.default.log_martians', value: '1' }\n        - { key: 'net.ipv4.conf.all.send_redirects', value: '0' }\n        - { key: 'net.ipv4.conf.default.send_redirects', value: '0' }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check\"\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF\n```\n\n## Advanced Role Development\n\n### Comprehensive NGINX Role\n```bash\n# Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat > roles/nginx/tasks/main.yml <<EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: \"{{ ansible_os_family }}.yml\"\n\n- name: Install NGINX\n  include_tasks: \"install-{{ ansible_os_family }}.yml\"\n\n- name: Create NGINX directories\n  file:\n    path: \"{{ item }}\"\n    state: directory\n    owner: root\n    group: root\n    mode: '0755'\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: 'nginx -t -c %s'\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    backup: yes\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: \"/etc/nginx/sites-available/{{ item.name }}.conf\"\n    dest: \"/etc/nginx/sites-enabled/{{ item.name }}.conf\"\n    state: link\n  loop: \"{{ nginx_vhosts | default([]) }}\"\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: '0644'\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat > roles/nginx/tasks/install-Debian.yml <<EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: \"deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx\"\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat > roles/nginx/tasks/install-RedHat.yml <<EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: \"https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/\"\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat > roles/nginx/vars/main.yml <<EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - \"add_header X-Frame-Options SAMEORIGIN always;\"\n  - \"add_header X-Content-Type-Options nosniff always;\"\n  - \"add_header X-XSS-Protection '1; mode=block' always;\"\n  - \"add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains' always;\"\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: \"_\"\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat > roles/nginx/templates/nginx.conf.j2 <<EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                    '\\$status \\$body_bytes_sent \"\\$http_referer\" '\n                    '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat > roles/nginx/handlers/main.yml <<EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF\n```\n\n## Security and Compliance\n\n### Ansible Security Scanner Integration\n```bash\n# Create security scanning playbook\ncat > playbooks/security-scan.yml <<EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: \"/tmp/security-scans\"\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: \"{{ scan_results_dir }}\"\n        state: directory\n        mode: '0755'\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: \"https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip\"\n        dest: \"/tmp/cis-benchmark.zip\"\n        mode: '0644'\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh > {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: \"{{ lynis_result.stdout }}\"\n        dest: \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        mode: '0644'\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == \"RedHat\"\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == \"Debian\"\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [\"RedHat\", \"Debian\"]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: \"{{ item }}\"\n        dest: \"./security-reports/{{ inventory_hostname }}/\"\n        flat: yes\n      loop:\n        - \"{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt\"\n        - \"{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html\"\n        - \"{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json\"\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: \"{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt\"\n        mode: '0644'\nEOF\n```\n\n### Ansible AWX/Tower Integration\n```bash\n# Install Ansible AWX (open source)\ncat > playbooks/install-awx.yml <<EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: \"{{ vault_awx_admin_password }}\"\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: '0644'\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: \"http://localhost:80/api/v2/ping/\"\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: \"http://localhost:80/api/v2/organizations/\"\n        method: POST\n        user: \"{{ awx_admin_user }}\"\n        password: \"{{ awx_admin_password }}\"\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: \"Production\"\n          description: \"Production environment organization\"\n        status_code: [200, 201, 409]\nEOF\n```\n\n## Multi-Cloud Automation\n\n### AWS Infrastructure Automation\n```bash\ncat > playbooks/aws-infrastructure.yml <<EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: \"{{ aws_region | default('us-west-2') }}\"\n    vpc_cidr: \"{{ vpc_cidr | default('10.0.0.0/16') }}\"\n    environment: \"{{ environment | default('production') }}\"\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          \"tag:Name\": \"{{ environment }}-vpc\"\n        region: \"{{ aws_region }}\"\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: \"{{ environment }}-vpc\"\n        cidr_block: \"{{ vpc_cidr }}\"\n        region: \"{{ aws_region }}\"\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: \"{{ environment }}\"\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: \"{{ environment }}-web-sg\"\n        description: \"Security group for web servers\"\n        vpc_id: \"{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}\"\n        region: \"{{ aws_region }}\"\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: \"HTTP and HTTPS access\"\n          - proto: tcp\n            ports:\n              - 22\n            group_id: \"{{ environment }}-bastion-sg\"\n            rule_desc: \"SSH from bastion\"\n        tags:\n          Environment: \"{{ environment }}\"\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: \"{{ environment }}-web-{{ item }}\"\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: \"{{ ec2_key_name }}\"\n        vpc_subnet_id: \"{{ web_subnet_id }}\"\n        security_groups:\n          - \"{{ environment }}-web-sg\"\n        region: \"{{ aws_region }}\"\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: \"{{ environment }}\"\n          Role: webserver\n          Ansible: managed\n      loop: \"{{ range(1, web_server_count + 1) | list }}\"\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: \"{{ item.instances[0].tags.Name }}\"\n        hostname: \"{{ item.instances[0].public_ip_address }}\"\n        groups: webservers\n        ansible_ssh_private_key_file: \"~/.ssh/{{ ec2_key_name }}.pem\"\n        ansible_user: ec2-user\n      loop: \"{{ web_instances.results }}\"\n      changed_when: false\nEOF\n```\n\n### Kubernetes Cluster Management\n```bash\ncat > playbooks/k8s-cluster-management.yml <<EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: \"1.28.2\"\n    containerd_version: \"1.6.24\"\n    cni_version: \"1.3.0\"\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb >= 1700\n          - ansible_processor_cores >= 2\n        fail_msg: \"System doesn't meet minimum requirements\"\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: \"{{ item }}\"\n      loop: \"{{ groups['k8s_all'] }}\"\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: \"{{ containerd_version }}\"\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: \"{{ k8s_version }}\"\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: \"{{ ansible_env.HOME }}/.kube\"\n        state: directory\n        mode: '0755'\n\n    - name: Copy admin.conf to user's kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: \"{{ ansible_env.HOME }}/.kube/config\"\n        owner: \"{{ ansible_user }}\"\n        group: \"{{ ansible_user }}\"\n        mode: '0644'\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Join worker nodes to cluster\n      shell: \"{{ hostvars[groups['k8s_masters'][0]]['join_command'].stdout }}\"\n      when: inventory_hostname in groups['k8s_workers']\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: \"{{ ansible_env.HOME }}/.kube/config\"\n      register: cluster_status\n      when: inventory_hostname in groups['k8s_masters'][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups['k8s_masters'][0]\nEOF\n```\n\n## Performance Optimization and Scaling\n\n### Parallel Execution Strategies\n```bash\n# Create high-performance playbook configuration\ncat > playbooks/high-performance-deployment.yml <<EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: \"30%\"   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk '{print $(NF-2)}' | sed 's/,//'\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float > 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: \"*\"\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: \"{{ item.src }}\"\n        dest: \"{{ item.dest }}\"\n        mode: \"{{ item.mode | default('0644') }}\"\n        backup: yes\n      loop:\n        - { src: \"nginx.conf.j2\", dest: \"/etc/nginx/nginx.conf\" }\n        - { src: \"mysql.cnf.j2\", dest: \"/etc/mysql/my.cnf\" }\n        - { src: \"redis.conf.j2\", dest: \"/etc/redis/redis.conf\" }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: \"{{ item.ansible_job_id }}\"\n      loop: \"{{ config_deployment.results }}\"\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: \"{{ item }}\"\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: \"restart all services\"\nEOF\n\n# Performance monitoring playbook\ncat > playbooks/performance-monitoring.yml <<EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: \"{{ monitoring_tools }}\"\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Enable system statistics collection\n      service:\n        name: \"{{ 'sysstat' if ansible_os_family == 'Debian' else 'sysstat' }}\"\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: '0755'\n\n    - name: Schedule performance monitoring\n      cron:\n        name: \"Performance monitoring\"\n        minute: \"*/5\"\n        job: \"/usr/local/bin/performance-monitor.sh\"\n        user: root\nEOF\n```\n\n## Testing and Validation\n\n### Molecule Testing Framework\n```bash\n# Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat > molecule/default/molecule.yml <<EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat > molecule/default/converge.yml <<EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: \"Include nginx role\"\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat > molecule/default/verify.yml <<EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: \"NGINX is not responding correctly\"\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test\n```\n\n### Ansible Lint and Security Scanning\n```bash\n# Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat > .ansible-lint <<EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: ['true', 'false', 'yes', 'no']\nEOF\n\n# Create security-focused playbook linting\ncat > .yamllint <<EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .\n```\n\n## Backup and Disaster Recovery\n\n### Comprehensive Backup Automation\n```bash\ncat > playbooks/backup-automation.yml <<EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: \"0 2 * * *\"\n      files: \"0 3 * * *\"\n      configs: \"0 4 * * *\"\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: \"{{ backup_root }}/{{ item }}\"\n        state: directory\n        mode: '0755'\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: '0755'\n      when: \"'dbservers' in group_names\"\n\n    - name: Schedule database backups\n      cron:\n        name: \"MySQL backup\"\n        minute: \"0\"\n        hour: \"2\"\n        job: \"/usr/local/bin/mysql-backup.sh\"\n        user: root\n      when: \"'dbservers' in group_names\"\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: '0755'\n\n    - name: Schedule file backups\n      cron:\n        name: \"File system backup\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/local/bin/file-backup.sh\"\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: \"{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz\"\n        mode: '0600'\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: \"{{ backup_root }}/\"\n        dest: \"backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/\"\n        delete: yes\n        rsync_opts:\n          - \"--exclude=*.tmp\"\n          - \"--compress\"\n          - \"--archive\"\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: \"{{ backup_root }}\"\n        age: \"{{ backup_retention_days }}d\"\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: \"{{ item.path }}\"\n        state: absent\n      loop: \"{{ old_backups.files }}\"\nEOF\n```\n\n## Verification and Monitoring\n\n### Cross-Platform System Verification\n```bash\n# Create comprehensive verification playbook\ncat > playbooks/system-verification.yml <<EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - \"ansible_facts.services[item.service + '.service'].state == 'running'\"\n        fail_msg: \"Service {{ item.service }} is not running\"\n        success_msg: \"Service {{ item.service }} is healthy\"\n      loop: \"{{ health_checks }}\"\n      when: \"item.service + '.service' in ansible_facts.services\"\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: \"{{ item.host }}\"\n        port: \"{{ item.port }}\"\n        timeout: 5\n      loop:\n        - { host: \"8.8.8.8\", port: 53 }\n        - { host: \"1.1.1.1\", port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk '$5 > \"85%\" {print $0}'\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != \"\"\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk '{printf \"%.0f\", $3/$2 * 100.0}'\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: \"WARNING: Memory usage is {{ memory_usage.stdout }}%\"\n      when: memory_usage.stdout | int > 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep \"Failed password\" /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == \"Debian\"\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw >/dev/null 2>&1; then\n          ufw status\n        elif command -v firewall-cmd >/dev/null 2>&1; then\n          firewall-cmd --state\n        else\n          echo \"No supported firewall found\"\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        mode: '0644'\n\n    - name: Fetch health reports\n      fetch:\n        src: \"/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt\"\n        dest: \"./reports/\"\n        flat: yes\nEOF\n```\n\n### Continuous Compliance Monitoring\n```bash\ncat > playbooks/compliance-monitoring.yml <<EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: \"{{ 'auditd' if ansible_os_family == 'RedHat' else 'auditd' }}\"\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo \"CIS-CAT not installed, skipping\"\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: \"AIDE integrity check\"\n        minute: \"0\"\n        hour: \"3\"\n        job: \"/usr/bin/aide --check | mail -s 'AIDE Report' security@example.com\"\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF\n```\n\n## CI/CD Integration\n\n### Jenkins Pipeline Integration\n```bash\n# Create Jenkinsfile for Ansible automation\ncat > Jenkinsfile <<EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = 'ansible.cfg'\n        ANSIBLE_HOST_KEY_CHECKING = 'False'\n    }\n    \n    stages {\n        stage('Lint') {\n            steps {\n                sh 'ansible-lint playbooks/'\n                sh 'yamllint .'\n            }\n        }\n        \n        stage('Syntax Check') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --syntax-check'\n            }\n        }\n        \n        stage('Dry Run') {\n            steps {\n                sh 'ansible-playbook playbooks/site.yml --check --diff'\n            }\n        }\n        \n        stage('Deploy to Staging') {\n            when {\n                branch 'develop'\n            }\n            steps {\n                sh 'ansible-playbook -i inventories/staging playbooks/site.yml'\n            }\n        }\n        \n        stage('Deploy to Production') {\n            when {\n                branch 'main'\n            }\n            steps {\n                input 'Deploy to Production?'\n                sh 'ansible-playbook -i inventories/production playbooks/site.yml'\n            }\n        }\n        \n        stage('Verify Deployment') {\n            steps {\n                sh 'ansible-playbook playbooks/system-verification.yml'\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: 'logs/*.log', allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: 'reports',\n                reportFiles: '*.html',\n                reportName: 'Ansible Report'\n            ])\n        }\n        failure {\n            emailext (\n                subject: \"Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}\",\n                body: \"Something is wrong with ${env.BUILD_URL}\",\n                to: \"${env.DEFAULT_RECIPIENTS}\"\n            )\n        }\n    }\n}\nEOF\n```\n\n### GitLab CI Integration\n```bash\ncat > .gitlab-ci.yml <<EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: \"False\"\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: '$CI_MERGE_REQUEST_IID'\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == \"develop\"'\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a \"uptime\"\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=\"debug=true\" --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a \"path=/tmp/test state=touch\" --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=\"specific task name\"\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a \"var=hostvars\"\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name \"*.yml\" -exec ansible-playbook {} --syntax-check \\;\n```\n\n### Advanced Debugging\n```bash\n# Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=\"profile_tasks_sort_order=none\"\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=\"ansible_python_interpreter=/usr/bin/python3\"\n\n# Network debugging\nansible all -m command -a \"ss -tulpn\"\nansible all -m command -a \"netstat -rn\"\n\n# Process debugging\nansible all -m command -a \"ps aux --sort=-%mem | head -10\"\n\n# Disk usage analysis\nansible all -m command -a \"df -h\"\nansible all -m command -a \"du -sh /var/log/*\"\n\n# Service debugging\nansible all -m systemd -a \"name=nginx\" --become\nansible all -m command -a \"systemctl status nginx\" --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=\"debug_vars=true\" --tags debug_vars\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.ansible.com/)\n- [Ansible Galaxy](https://galaxy.ansible.com/)\n- [Best Practices Guide](https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html)\n- [Security Best Practices](https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices)\n- [Ansible Molecule Testing](https://molecule.readthedocs.io/)\n- [Community Collections](https://docs.ansible.com/ansible/latest/collections/index.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"ansible-installation-guide\" class=\"mobile-header\">Ansible Installation Guide</h1>\n<p class=\"mobile-paragraph\">Agentless automation platform for configuration management, application deployment, and task automation across multiple systems. Industry standard for infrastructure automation with enterprise-grade security.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux control machine (any modern distribution)</li>\n<li class=\"mobile-list-item\">Python 3.8+ on control machine</li>\n<li class=\"mobile-list-item\">SSH access to target hosts</li>\n<li class=\"mobile-list-item\">Python 2.7+ or 3.5+ on target hosts</li>\n<li class=\"mobile-list-item\">2GB RAM minimum, 4GB+ recommended for large infrastructures</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt update\n\n# Install Ansible and dependencies\nsudo apt install -y ansible python3-pip python3-venv sshpass\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Verify installation\nansible --version\nansible-galaxy collection list</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Ansible\nsudo yum install -y ansible python3-pip\n\n# For newer distributions\nsudo dnf install -y ansible python3-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo dnf install -y ansible python3-pip python3-virtualenv\n\n# Install additional collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo pacman -Syu ansible python-pip\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible\nsudo apk update\nsudo apk add ansible python3 py3-pip openssh\n\n# Install collections\nansible-galaxy collection install community.general\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-pip-latest-version\" class=\"mobile-header\">Using pip (Latest Version)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create virtual environment (recommended)\npython3 -m venv ~/ansible-venv\nsource ~/ansible-venv/bin/activate\n\n# Install Ansible via pip\npip install --upgrade pip\npip install ansible ansible-core\n\n# Install additional packages\npip install paramiko jinja2 PyYAML cryptography\n\n# Install cloud provider SDKs\npip install boto3 botocore azure-cli google-cloud-storage\n\n# Install collections\nansible-galaxy collection install community.general\nansible-galaxy collection install ansible.posix\nansible-galaxy collection install kubernetes.core\nansible-galaxy collection install amazon.aws\nansible-galaxy collection install azure.azcollection\nansible-galaxy collection install google.cloud\n\n# Add to PATH permanently\necho &#039;source ~/ansible-venv/bin/activate&#039; &gt;&gt; ~/.bashrc\n\n# Verify installation\nansible --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Ansible Docker container with mounted volumes\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  --workdir /ansible \\\n  ansible/ansible:latest\n\n# Create wrapper script for ease of use\nsudo tee /usr/local/bin/ansible-docker &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\ndocker run --rm -it \\\n  -v $(pwd):/ansible \\\n  -v ~/.ssh:/root/.ssh:ro \\\n  -v ~/.aws:/root/.aws:ro \\\n  -v ~/.azure:/root/.azure:ro \\\n  -v ~/.kube:/root/.kube:ro \\\n  --workdir /ansible \\\n  --network host \\\n  ansible/ansible:latest &quot;$@&quot;\nEOF\nsudo chmod +x /usr/local/bin/ansible-docker\n\n# Create aliases\necho &#039;alias ansible=&quot;ansible-docker ansible&quot;&#039; &gt;&gt; ~/.bashrc\necho &#039;alias ansible-playbook=&quot;ansible-docker ansible-playbook&quot;&#039; &gt;&gt; ~/.bashrc</code></pre>\n      </div>\n    </div>\n<h2 id=\"project-structure-and-configuration\" class=\"mobile-header\">Project Structure and Configuration</h2>\n<h3 id=\"professional-project-structure\" class=\"mobile-header\">Professional Project Structure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive Ansible project structure\nmkdir -p ~/ansible-infrastructure/{\n  inventories/{production,staging,development},\n  playbooks,\n  roles,\n  group_vars,\n  host_vars,\n  library,\n  filter_plugins,\n  callback_plugins,\n  vault,\n  collections,\n  logs\n}\n\ncd ~/ansible-infrastructure\n\n# Create ansible.cfg with security best practices\ncat &gt; ansible.cfg &lt;&lt;EOF\n[defaults]\ninventory = inventories/production/hosts.yml\nremote_user = ansible\nprivate_key_file = ~/.ssh/ansible_key\nhost_key_checking = True\ntimeout = 30\nretry_files_enabled = False\nstdout_callback = yaml\nbin_ansible_callbacks = True\ngathering = smart\nfact_caching = jsonfile\nfact_caching_connection = ~/.ansible/facts_cache\nfact_caching_timeout = 86400\ninterpreter_python = auto_silent\nvault_password_file = ~/.ansible_vault_pass\n\n# Logging\nlog_path = logs/ansible.log\ndisplay_skipped_hosts = False\ndisplay_ok_hosts = False\n\n# Performance\nforks = 20\npoll_interval = 15\ninternal_poll_interval = 0.001\n\n# Security\ncommand_warnings = True\ndeprecation_warnings = True\naction_warnings = True\nlocalhost_warning = True\n\n[ssh_connection]\nssh_args = -o ControlMaster=auto -o ControlPersist=3600s -o PreferredAuthentications=publickey\npipelining = True\ncontrol_path = ~/.ansible/cp/%%h-%%p-%%r\nretries = 3\n\n[privilege_escalation]\nbecome = False\nbecome_method = sudo\nbecome_user = root\nbecome_ask_pass = False\n\n[inventory]\nenable_plugins = host_list, script, auto, yaml, ini, toml\ncache = True\ncache_plugin = jsonfile\ncache_timeout = 3600\ncache_connection = ~/.ansible/inventory_cache\n\n[galaxy]\nserver_list = automation_hub, galaxy\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-inventory-management\" class=\"mobile-header\">Advanced Inventory Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production inventory with groups and variables\ncat &gt; inventories/production/hosts.yml &lt;&lt;EOF\nall:\n  children:\n    webservers:\n      hosts:\n        web-prod-01:\n          ansible_host: 10.0.1.10\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-02:\n          ansible_host: 10.0.1.11\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n        web-prod-03:\n          ansible_host: 10.0.1.12\n          ansible_user: ansible\n          server_role: frontend\n          backup_enabled: true\n      vars:\n        http_port: 80\n        https_port: 443\n        max_clients: 200\n        environment: production\n        monitoring_enabled: true\n\n    dbservers:\n      hosts:\n        db-prod-01:\n          ansible_host: 10.0.2.10\n          ansible_user: ansible\n          mysql_server_id: 1\n          mysql_role: master\n        db-prod-02:\n          ansible_host: 10.0.2.11\n          ansible_user: ansible\n          mysql_server_id: 2\n          mysql_role: slave\n      vars:\n        mysql_port: 3306\n        mysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\n        mysql_replication_user: &quot;{{ vault_mysql_replication_user }}&quot;\n        mysql_replication_password: &quot;{{ vault_mysql_replication_password }}&quot;\n\n    loadbalancers:\n      hosts:\n        lb-prod-01:\n          ansible_host: 10.0.3.10\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n        lb-prod-02:\n          ansible_host: 10.0.3.11\n          ansible_user: ansible\n          lb_algorithm: roundrobin\n      vars:\n        haproxy_stats_enabled: true\n        haproxy_stats_user: admin\n        haproxy_stats_password: &quot;{{ vault_haproxy_stats_password }}&quot;\n\n    monitoring:\n      hosts:\n        monitor-prod-01:\n          ansible_host: 10.0.4.10\n          ansible_user: ansible\n          prometheus_retention: 30d\n          grafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n    bastion:\n      hosts:\n        bastion-prod-01:\n          ansible_host: bastion.example.com\n          ansible_user: ansible\n          ansible_port: 22\n\n# Global variables for all hosts\nwebservers:\n  vars:\n    nginx_worker_processes: auto\n    nginx_worker_connections: 1024\n    ssl_certificate_path: /etc/ssl/certs\n    backup_schedule: &quot;0 2 * * *&quot;\n\ndbservers:\n  vars:\n    mysql_innodb_buffer_pool_size: 2G\n    mysql_max_connections: 200\n    backup_schedule: &quot;0 1 * * *&quot;\n    monitoring_enabled: true\nEOF\n\n# Create dynamic inventory script for cloud environments\ncat &gt; inventories/production/aws_ec2.yml &lt;&lt;EOF\nplugin: amazon.aws.aws_ec2\nregions:\n  - us-west-2\n  - us-east-1\nfilters:\n  tag:Environment: production\n  tag:Ansible: managed\n  instance-state-name: running\n\nhostnames:\n  - tag:Name\n  - dns-name\n  - private-ip-address\n\ncompose:\n  ansible_host: private_ip_address\n  ec2_state: ec2_state_name\n  ec2_arch: ec2_architecture\n\ngroups:\n  # Group by instance type\n  webservers: &quot;&#039;web&#039; in tags.Role&quot;\n  databases: &quot;&#039;db&#039; in tags.Role&quot;\n  loadbalancers: &quot;&#039;lb&#039; in tags.Role&quot;\n  \n  # Group by environment\n  production: &quot;tags.Environment == &#039;production&#039;&quot;\n  staging: &quot;tags.Environment == &#039;staging&#039;&quot;\n  \n  # Group by availability zone\n  us_west_2a: ec2_placement_availability_zone == &quot;us-west-2a&quot;\n  us_west_2b: ec2_placement_availability_zone == &quot;us-west-2b&quot;\n\nkeyed_groups:\n  # Create groups based on tags\n  - key: tags.Environment\n    prefix: env\n  - key: tags.Role  \n    prefix: role\n  - key: ec2_instance_type\n    prefix: type\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-vault-security\" class=\"mobile-header\">Ansible Vault Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create strong vault password\nopenssl rand -base64 32 &gt; ~/.ansible_vault_pass\nchmod 600 ~/.ansible_vault_pass\n\n# Create encrypted vault file for secrets\nansible-vault create group_vars/all/vault.yml\n# Enter secure passwords and API keys:\n# vault_mysql_root_password: your_secure_mysql_password\n# vault_grafana_admin_password: your_secure_grafana_password  \n# vault_ssl_private_key: |\n#   -----BEGIN PRIVATE KEY-----\n#   your_private_key_content\n#   -----END PRIVATE KEY-----\n\n# Create non-encrypted variables file\ncat &gt; group_vars/all/vars.yml &lt;&lt;EOF\n# Non-sensitive variables\nmysql_port: 3306\nnginx_port: 80\ngrafana_port: 3000\nprometheus_port: 9090\n\n# Reference vault variables\nmysql_root_password: &quot;{{ vault_mysql_root_password }}&quot;\ngrafana_admin_password: &quot;{{ vault_grafana_admin_password }}&quot;\n\n# SSL configuration\nssl_certificate_path: /etc/ssl/certs/server.crt\nssl_private_key_path: /etc/ssl/private/server.key\nssl_private_key_content: &quot;{{ vault_ssl_private_key }}&quot;\n\n# Security settings\nansible_ssh_common_args: &#039;-o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts&#039;\nansible_become_method: sudo\nansible_become_user: root\nEOF\n\n# Edit vault file\nansible-vault edit group_vars/all/vault.yml\n\n# View vault file (read-only)\nansible-vault view group_vars/all/vault.yml\n\n# Change vault password\nansible-vault rekey group_vars/all/vault.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"comprehensive-playbooks\" class=\"mobile-header\">Comprehensive Playbooks</h2>\n<h3 id=\"system-hardening-playbook\" class=\"mobile-header\">System Hardening Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/system-hardening.yml &lt;&lt;EOF\n---\n- name: System Security Hardening\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    security_packages:\n      - fail2ban\n      - ufw\n      - aide\n      - chkrootkit\n      - rkhunter\n      - clamav\n      - lynis\n    \n    disabled_services:\n      - telnet\n      - rsh\n      - rlogin\n      - tftp\n      - talk\n      - finger\n\n  pre_tasks:\n    - name: Update package cache\n      package:\n        update_cache: yes\n        cache_valid_time: 3600\n      when: ansible_os_family in [&quot;Debian&quot;, &quot;RedHat&quot;]\n\n  tasks:\n    # System updates\n    - name: Upgrade all packages\n      package:\n        name: &quot;*&quot;\n        state: latest\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Upgrade all packages (Debian/Ubuntu)\n      apt:\n        upgrade: dist\n        autoremove: yes\n        autoclean: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    # Install security packages\n    - name: Install security packages\n      package:\n        name: &quot;{{ security_packages }}&quot;\n        state: present\n\n    # User security\n    - name: Create ansible user with limited privileges\n      user:\n        name: ansible\n        groups: sudo\n        shell: /bin/bash\n        create_home: yes\n        generate_ssh_key: yes\n        ssh_key_bits: 4096\n        ssh_key_type: rsa\n\n    - name: Configure sudo for ansible user\n      lineinfile:\n        path: /etc/sudoers.d/ansible\n        line: &#039;ansible ALL=(ALL) NOPASSWD:ALL&#039;\n        create: yes\n        mode: &#039;0440&#039;\n        validate: &#039;visudo -cf %s&#039;\n\n    # SSH hardening\n    - name: Configure SSH security\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: &quot;{{ item.regexp }}&quot;\n        line: &quot;{{ item.line }}&quot;\n        backup: yes\n      loop:\n        - { regexp: &#039;^#?PermitRootLogin&#039;, line: &#039;PermitRootLogin no&#039; }\n        - { regexp: &#039;^#?PasswordAuthentication&#039;, line: &#039;PasswordAuthentication no&#039; }\n        - { regexp: &#039;^#?X11Forwarding&#039;, line: &#039;X11Forwarding no&#039; }\n        - { regexp: &#039;^#?MaxAuthTries&#039;, line: &#039;MaxAuthTries 3&#039; }\n        - { regexp: &#039;^#?ClientAliveInterval&#039;, line: &#039;ClientAliveInterval 300&#039; }\n        - { regexp: &#039;^#?ClientAliveCountMax&#039;, line: &#039;ClientAliveCountMax 0&#039; }\n        - { regexp: &#039;^#?Protocol&#039;, line: &#039;Protocol 2&#039; }\n        - { regexp: &#039;^#?LogLevel&#039;, line: &#039;LogLevel VERBOSE&#039; }\n      notify: restart ssh\n\n    # Firewall configuration\n    - name: Configure UFW firewall (Debian/Ubuntu)\n      ufw:\n        state: enabled\n        policy: deny\n        direction: incoming\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Allow SSH through UFW\n      ufw:\n        rule: allow\n        port: 22\n        proto: tcp\n        comment: &#039;SSH access&#039;\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Configure firewalld (RHEL/CentOS/Fedora)\n      firewalld:\n        state: enabled\n        permanent: yes\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Allow SSH through firewalld\n      firewalld:\n        service: ssh\n        permanent: yes\n        state: enabled\n        immediate: yes\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    # Disable unnecessary services\n    - name: Disable unnecessary services\n      systemd:\n        name: &quot;{{ item }}&quot;\n        enabled: no\n        state: stopped\n      loop: &quot;{{ disabled_services }}&quot;\n      ignore_errors: yes\n\n    # File system security\n    - name: Set proper permissions on sensitive files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        mode: &quot;{{ item.mode }}&quot;\n        owner: root\n        group: root\n      loop:\n        - { path: &#039;/etc/passwd&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/shadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/group&#039;, mode: &#039;0644&#039; }\n        - { path: &#039;/etc/gshadow&#039;, mode: &#039;0640&#039; }\n        - { path: &#039;/etc/ssh/sshd_config&#039;, mode: &#039;0600&#039; }\n\n    # Kernel security parameters\n    - name: Configure kernel security parameters\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;net.ipv4.ip_forward&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_source_route&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.accept_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.secure_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.randomize_va_space&#039;, value: &#039;2&#039; }\n\n    # Configure fail2ban\n    - name: Configure fail2ban for SSH protection\n      template:\n        src: templates/fail2ban-jail.local.j2\n        dest: /etc/fail2ban/jail.local\n        backup: yes\n      notify: restart fail2ban\n\n  handlers:\n    - name: restart ssh\n      service:\n        name: &quot;{{ &#039;ssh&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sshd&#039; }}&quot;\n        state: restarted\n\n    - name: restart fail2ban\n      service:\n        name: fail2ban\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"application-deployment-playbook\" class=\"mobile-header\">Application Deployment Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/web-application-deployment.yml &lt;&lt;EOF\n---\n- name: Deploy Web Application Stack\n  hosts: webservers\n  become: yes\n  serial: &quot;25%&quot;  # Rolling deployment\n  max_fail_percentage: 10\n  vars:\n    app_name: mywebapp\n    app_version: &quot;{{ app_version | default(&#039;latest&#039;) }}&quot;\n    app_port: 3000\n    nginx_workers: &quot;{{ ansible_processor_cores }}&quot;\n    \n  pre_tasks:\n    - name: Check if maintenance mode file exists\n      stat:\n        path: /var/www/html/maintenance.html\n      register: maintenance_mode\n\n    - name: Fail if in maintenance mode\n      fail:\n        msg: &quot;Server is in maintenance mode&quot;\n      when: maintenance_mode.stat.exists and not force_deployment | default(false)\n\n  tasks:\n    # Application deployment\n    - name: Create application user\n      user:\n        name: &quot;{{ app_name }}&quot;\n        system: yes\n        shell: /bin/false\n        home: &quot;/opt/{{ app_name }}&quot;\n        create_home: yes\n\n    - name: Create application directories\n      file:\n        path: &quot;{{ item }}&quot;\n        state: directory\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0755&#039;\n      loop:\n        - &quot;/opt/{{ app_name }}&quot;\n        - &quot;/opt/{{ app_name }}/releases&quot;\n        - &quot;/opt/{{ app_name }}/shared&quot;\n        - &quot;/var/log/{{ app_name }}&quot;\n\n    - name: Download application release\n      get_url:\n        url: &quot;https://releases.example.com/{{ app_name }}/{{ app_version }}/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        mode: &#039;0644&#039;\n        timeout: 300\n      register: download_result\n\n    - name: Extract application\n      unarchive:\n        src: &quot;/tmp/{{ app_name }}-{{ app_version }}.tar.gz&quot;\n        dest: &quot;/opt/{{ app_name }}/releases/&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        remote_src: yes\n        creates: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n\n    - name: Create symlink to current release\n      file:\n        src: &quot;/opt/{{ app_name }}/releases/{{ app_version }}&quot;\n        dest: &quot;/opt/{{ app_name }}/current&quot;\n        state: link\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n      notify:\n        - reload application\n        - reload nginx\n\n    # Configuration management\n    - name: Deploy application configuration\n      template:\n        src: &quot;templates/{{ app_name }}.conf.j2&quot;\n        dest: &quot;/opt/{{ app_name }}/shared/{{ app_name }}.conf&quot;\n        owner: &quot;{{ app_name }}&quot;\n        group: &quot;{{ app_name }}&quot;\n        mode: &#039;0640&#039;\n        backup: yes\n      notify: reload application\n\n    # Service management\n    - name: Deploy systemd service file\n      template:\n        src: &quot;templates/{{ app_name }}.service.j2&quot;\n        dest: &quot;/etc/systemd/system/{{ app_name }}.service&quot;\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart application\n\n    - name: Enable and start application service\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        enabled: yes\n        state: started\n        daemon_reload: yes\n\n    # Health check\n    - name: Wait for application to be ready\n      uri:\n        url: &quot;http://localhost:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      retries: 30\n      delay: 10\n\n    # Cleanup old releases\n    - name: Clean up old releases (keep last 3)\n      shell: |\n        cd /opt/{{ app_name }}/releases\n        ls -t | tail -n +4 | xargs rm -rf\n      args:\n        executable: /bin/bash\n\n  post_tasks:\n    - name: Verify application is running\n      uri:\n        url: &quot;http://{{ ansible_default_ipv4.address }}:{{ app_port }}/health&quot;\n        method: GET\n        status_code: 200\n      delegate_to: localhost\n\n    - name: Log deployment success\n      lineinfile:\n        path: &quot;/var/log/{{ app_name }}/deployments.log&quot;\n        line: &quot;{{ ansible_date_time.iso8601 }} - Successfully deployed {{ app_version }} to {{ inventory_hostname }}&quot;\n        create: yes\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: restarted\n\n    - name: reload application\n      systemd:\n        name: &quot;{{ app_name }}&quot;\n        state: reloaded\n\n    - name: reload nginx\n      service:\n        name: nginx\n        state: reloaded\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"infrastructure-as-code-playbook\" class=\"mobile-header\">Infrastructure as Code Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/infrastructure-provisioning.yml &lt;&lt;EOF\n---\n- name: Infrastructure Provisioning and Configuration\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  vars:\n    base_packages:\n      Debian:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n      RedHat:\n        - curl\n        - wget\n        - vim\n        - htop\n        - git\n        - python3\n        - python3-pip\n        - unzip\n        - tree\n        - epel-release\n\n  tasks:\n    # System preparation\n    - name: Set hostname\n      hostname:\n        name: &quot;{{ inventory_hostname }}&quot;\n\n    - name: Update /etc/hosts\n      lineinfile:\n        path: /etc/hosts\n        line: &quot;{{ ansible_default_ipv4.address }} {{ inventory_hostname }}&quot;\n        backup: yes\n\n    # Package management\n    - name: Install base packages\n      package:\n        name: &quot;{{ base_packages[ansible_os_family] | default(base_packages[&#039;Debian&#039;]) }}&quot;\n        state: present\n\n    # Time synchronization\n    - name: Install and configure NTP\n      package:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chrony&#039; }}&quot;\n        state: present\n\n    - name: Start and enable time synchronization\n      service:\n        name: &quot;{{ &#039;ntp&#039; if ansible_os_family == &#039;Debian&#039; else &#039;chronyd&#039; }}&quot;\n        state: started\n        enabled: yes\n\n    # Log management\n    - name: Configure logrotate for application logs\n      template:\n        src: templates/app-logrotate.j2\n        dest: /etc/logrotate.d/applications\n        mode: &#039;0644&#039;\n\n    # Monitoring agent installation\n    - name: Install Node Exporter for Prometheus monitoring\n      get_url:\n        url: &quot;https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz&quot;\n        dest: /tmp/node_exporter.tar.gz\n        mode: &#039;0644&#039;\n\n    - name: Extract Node Exporter\n      unarchive:\n        src: /tmp/node_exporter.tar.gz\n        dest: /tmp\n        remote_src: yes\n\n    - name: Copy Node Exporter binary\n      copy:\n        src: /tmp/node_exporter-1.6.1.linux-amd64/node_exporter\n        dest: /usr/local/bin/node_exporter\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n        remote_src: yes\n\n    - name: Create node_exporter systemd service\n      template:\n        src: templates/node_exporter.service.j2\n        dest: /etc/systemd/system/node_exporter.service\n        mode: &#039;0644&#039;\n      notify:\n        - daemon reload\n        - restart node_exporter\n\n    # Security configuration\n    - name: Configure kernel parameters for security\n      sysctl:\n        name: &quot;{{ item.key }}&quot;\n        value: &quot;{{ item.value }}&quot;\n        sysctl_set: yes\n        state: present\n        reload: yes\n      loop:\n        - { key: &#039;kernel.dmesg_restrict&#039;, value: &#039;1&#039; }\n        - { key: &#039;kernel.kptr_restrict&#039;, value: &#039;2&#039; }\n        - { key: &#039;kernel.yama.ptrace_scope&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.default.log_martians&#039;, value: &#039;1&#039; }\n        - { key: &#039;net.ipv4.conf.all.send_redirects&#039;, value: &#039;0&#039; }\n        - { key: &#039;net.ipv4.conf.default.send_redirects&#039;, value: &#039;0&#039; }\n\n    # File integrity monitoring\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check&quot;\n        user: root\n\n  handlers:\n    - name: daemon reload\n      systemd:\n        daemon_reload: yes\n\n    - name: restart node_exporter\n      service:\n        name: node_exporter\n        state: restarted\n        enabled: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-role-development\" class=\"mobile-header\">Advanced Role Development</h2>\n<h3 id=\"comprehensive-nginx-role\" class=\"mobile-header\">Comprehensive NGINX Role</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX role structure\nansible-galaxy init roles/nginx\n\n# Main tasks\ncat &gt; roles/nginx/tasks/main.yml &lt;&lt;EOF\n---\n# NGINX Installation and Configuration Role\n- name: Include OS-specific variables\n  include_vars: &quot;{{ ansible_os_family }}.yml&quot;\n\n- name: Install NGINX\n  include_tasks: &quot;install-{{ ansible_os_family }}.yml&quot;\n\n- name: Create NGINX directories\n  file:\n    path: &quot;{{ item }}&quot;\n    state: directory\n    owner: root\n    group: root\n    mode: &#039;0755&#039;\n  loop:\n    - /etc/nginx/sites-available\n    - /etc/nginx/sites-enabled\n    - /etc/nginx/conf.d\n    - /var/log/nginx\n    - /var/cache/nginx\n\n- name: Generate DH parameters\n  openssl_dhparam:\n    path: /etc/ssl/certs/dhparam.pem\n    size: 2048\n  when: nginx_ssl_enabled | default(false)\n\n- name: Deploy NGINX main configuration\n  template:\n    src: nginx.conf.j2\n    dest: /etc/nginx/nginx.conf\n    backup: yes\n    validate: &#039;nginx -t -c %s&#039;\n  notify: reload nginx\n\n- name: Deploy virtual host configurations\n  template:\n    src: vhost.conf.j2\n    dest: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    backup: yes\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  notify: reload nginx\n\n- name: Enable virtual hosts\n  file:\n    src: &quot;/etc/nginx/sites-available/{{ item.name }}.conf&quot;\n    dest: &quot;/etc/nginx/sites-enabled/{{ item.name }}.conf&quot;\n    state: link\n  loop: &quot;{{ nginx_vhosts | default([]) }}&quot;\n  when: item.enabled | default(true)\n  notify: reload nginx\n\n- name: Remove default site\n  file:\n    path: /etc/nginx/sites-enabled/default\n    state: absent\n  notify: reload nginx\n\n- name: Start and enable NGINX\n  service:\n    name: nginx\n    state: started\n    enabled: yes\n\n- name: Configure log rotation\n  template:\n    src: nginx-logrotate.j2\n    dest: /etc/logrotate.d/nginx\n    mode: &#039;0644&#039;\n\n- name: Setup NGINX monitoring\n  include_tasks: monitoring.yml\n  when: nginx_monitoring_enabled | default(false)\n\n- name: Configure SSL certificates\n  include_tasks: ssl.yml\n  when: nginx_ssl_enabled | default(false)\nEOF\n\n# OS-specific installation tasks\ncat &gt; roles/nginx/tasks/install-Debian.yml &lt;&lt;EOF\n---\n- name: Add NGINX signing key (Debian/Ubuntu)\n  apt_key:\n    url: https://nginx.org/keys/nginx_signing.key\n    state: present\n\n- name: Add NGINX repository (Debian/Ubuntu)\n  apt_repository:\n    repo: &quot;deb https://nginx.org/packages/{{ ansible_distribution | lower }}/ {{ ansible_distribution_release }} nginx&quot;\n    state: present\n\n- name: Install NGINX (Debian/Ubuntu)\n  apt:\n    name: nginx\n    state: present\n    update_cache: yes\nEOF\n\ncat &gt; roles/nginx/tasks/install-RedHat.yml &lt;&lt;EOF\n---\n- name: Add NGINX repository (RHEL/CentOS)\n  yum_repository:\n    name: nginx\n    description: NGINX Repository\n    baseurl: &quot;https://nginx.org/packages/centos/{{ ansible_distribution_major_version }}/$basearch/&quot;\n    gpgcheck: yes\n    gpgkey: https://nginx.org/keys/nginx_signing.key\n    enabled: yes\n\n- name: Install NGINX (RHEL/CentOS)\n  yum:\n    name: nginx\n    state: present\nEOF\n\n# Variables\ncat &gt; roles/nginx/vars/main.yml &lt;&lt;EOF\n---\nnginx_user: nginx\nnginx_worker_processes: auto\nnginx_worker_connections: 1024\nnginx_keepalive_timeout: 65\nnginx_ssl_enabled: false\nnginx_monitoring_enabled: true\n\nnginx_security_headers:\n  - &quot;add_header X-Frame-Options SAMEORIGIN always;&quot;\n  - &quot;add_header X-Content-Type-Options nosniff always;&quot;\n  - &quot;add_header X-XSS-Protection &#039;1; mode=block&#039; always;&quot;\n  - &quot;add_header Strict-Transport-Security &#039;max-age=31536000; includeSubDomains&#039; always;&quot;\n\nnginx_default_vhost:\n  name: default\n  listen: 80\n  server_name: &quot;_&quot;\n  root: /var/www/html\n  index: index.html\n  enabled: false\nEOF\n\n# Templates\ncat &gt; roles/nginx/templates/nginx.conf.j2 &lt;&lt;EOF\nuser {{ nginx_user }};\nworker_processes {{ nginx_worker_processes }};\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections {{ nginx_worker_connections }};\n    use epoll;\n    multi_accept on;\n}\n\nhttp {\n    # Basic settings\n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout {{ nginx_keepalive_timeout }};\n    types_hash_max_size 2048;\n    server_tokens off;\n\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n\n    # SSL configuration\n{% if nginx_ssl_enabled %}\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_prefer_server_ciphers off;\n    ssl_dhparam /etc/ssl/certs/dhparam.pem;\n{% endif %}\n\n    # Gzip compression\n    gzip on;\n    gzip_vary on;\n    gzip_proxied any;\n    gzip_comp_level 6;\n    gzip_types\n        application/javascript\n        application/json\n        application/xml\n        text/css\n        text/javascript\n        text/xml\n        text/plain;\n\n    # Security headers\n{% for header in nginx_security_headers %}\n    {{ header }}\n{% endfor %}\n\n    # Logging\n    log_format main &#039;\\$remote_addr - \\$remote_user [\\$time_local] &quot;\\$request&quot; &#039;\n                    &#039;\\$status \\$body_bytes_sent &quot;\\$http_referer&quot; &#039;\n                    &#039;&quot;\\$http_user_agent&quot; &quot;\\$http_x_forwarded_for&quot;&#039;;\n\n    access_log /var/log/nginx/access.log main;\n    error_log /var/log/nginx/error.log;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=login:10m rate=10r/m;\n    limit_conn_zone \\$binary_remote_addr zone=addr:10m;\n\n    # Include configurations\n    include /etc/nginx/conf.d/*.conf;\n    include /etc/nginx/sites-enabled/*;\n}\nEOF\n\n# Handlers\ncat &gt; roles/nginx/handlers/main.yml &lt;&lt;EOF\n---\n- name: restart nginx\n  service:\n    name: nginx\n    state: restarted\n\n- name: reload nginx\n  service:\n    name: nginx\n    state: reloaded\n\n- name: validate nginx config\n  command: nginx -t\n  changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-and-compliance\" class=\"mobile-header\">Security and Compliance</h2>\n<h3 id=\"ansible-security-scanner-integration\" class=\"mobile-header\">Ansible Security Scanner Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security scanning playbook\ncat &gt; playbooks/security-scan.yml &lt;&lt;EOF\n---\n- name: Security Compliance Scanning\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    scan_results_dir: &quot;/tmp/security-scans&quot;\n    \n  tasks:\n    - name: Create scan results directory\n      file:\n        path: &quot;{{ scan_results_dir }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    # CIS benchmark scanning\n    - name: Download CIS benchmark script\n      get_url:\n        url: &quot;https://github.com/dev-sec/cis-dil-benchmark/archive/master.zip&quot;\n        dest: &quot;/tmp/cis-benchmark.zip&quot;\n        mode: &#039;0644&#039;\n\n    - name: Run CIS benchmark scan\n      shell: |\n        cd /tmp\n        unzip -o cis-benchmark.zip\n        cd cis-dil-benchmark-master\n        bash cis_ubuntu2204.sh &gt; {{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt\n      args:\n        creates: &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n\n    # Lynis security audit\n    - name: Install Lynis\n      package:\n        name: lynis\n        state: present\n\n    - name: Run Lynis security audit\n      command: lynis audit system --quiet --cronjob\n      register: lynis_result\n      changed_when: false\n\n    - name: Save Lynis results\n      copy:\n        content: &quot;{{ lynis_result.stdout }}&quot;\n        dest: &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    # OpenSCAP compliance scanning\n    - name: Install OpenSCAP (RHEL/CentOS)\n      package:\n        name:\n          - openscap-scanner\n          - scap-security-guide\n        state: present\n      when: ansible_os_family == &quot;RedHat&quot;\n\n    - name: Install OpenSCAP (Debian/Ubuntu)\n      package:\n        name:\n          - libopenscap8\n          - ssg-debian\n        state: present\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Run OpenSCAP scan\n      shell: |\n        oscap xccdf eval --profile xccdf_org.ssgproject.content_profile_standard \\\n          --results {{ scan_results_dir }}/oscap-results-{{ inventory_hostname }}.xml \\\n          --report {{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html \\\n          /usr/share/xml/scap/ssg/content/ssg-{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-xccdf.xml\n      ignore_errors: yes\n      when: ansible_os_family in [&quot;RedHat&quot;, &quot;Debian&quot;]\n\n    # Vulnerability scanning with Trivy\n    - name: Install Trivy vulnerability scanner\n      shell: |\n        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin\n      args:\n        creates: /usr/local/bin/trivy\n\n    - name: Run Trivy filesystem scan\n      shell: |\n        trivy fs --format json --output {{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json /\n      ignore_errors: yes\n\n    # Collect scan results\n    - name: Fetch scan results to control machine\n      fetch:\n        src: &quot;{{ item }}&quot;\n        dest: &quot;./security-reports/{{ inventory_hostname }}/&quot;\n        flat: yes\n      loop:\n        - &quot;{{ scan_results_dir }}/cis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/lynis-scan-{{ inventory_hostname }}.txt&quot;\n        - &quot;{{ scan_results_dir }}/oscap-report-{{ inventory_hostname }}.html&quot;\n        - &quot;{{ scan_results_dir }}/trivy-scan-{{ inventory_hostname }}.json&quot;\n      ignore_errors: yes\n      delegate_to: localhost\n\n  post_tasks:\n    - name: Generate compliance summary\n      template:\n        src: templates/compliance-summary.j2\n        dest: &quot;{{ scan_results_dir }}/compliance-summary-{{ inventory_hostname }}.txt&quot;\n        mode: &#039;0644&#039;\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-awxtower-integration\" class=\"mobile-header\">Ansible AWX/Tower Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible AWX (open source)\ncat &gt; playbooks/install-awx.yml &lt;&lt;EOF\n---\n- name: Install Ansible AWX\n  hosts: localhost\n  connection: local\n  become: yes\n  vars:\n    awx_namespace: awx\n    awx_admin_user: admin\n    awx_admin_password: &quot;{{ vault_awx_admin_password }}&quot;\n\n  tasks:\n    - name: Install prerequisite packages\n      package:\n        name:\n          - git\n          - curl\n          - docker.io\n          - docker-compose\n        state: present\n\n    - name: Clone AWX repository\n      git:\n        repo: https://github.com/ansible/awx.git\n        dest: /opt/awx\n        version: devel\n\n    - name: Create AWX Docker inventory\n      template:\n        src: templates/awx-docker-inventory.j2\n        dest: /opt/awx/installer/inventory\n        mode: &#039;0644&#039;\n\n    - name: Install AWX using Ansible\n      shell: ansible-playbook -i inventory install.yml\n      args:\n        chdir: /opt/awx/installer\n      environment:\n        ANSIBLE_HOST_KEY_CHECKING: False\n\n    - name: Wait for AWX to be ready\n      uri:\n        url: &quot;http://localhost:80/api/v2/ping/&quot;\n        method: GET\n      retries: 30\n      delay: 10\n\n    - name: Configure AWX organizations and projects\n      uri:\n        url: &quot;http://localhost:80/api/v2/organizations/&quot;\n        method: POST\n        user: &quot;{{ awx_admin_user }}&quot;\n        password: &quot;{{ awx_admin_password }}&quot;\n        force_basic_auth: yes\n        body_format: json\n        body:\n          name: &quot;Production&quot;\n          description: &quot;Production environment organization&quot;\n        status_code: [200, 201, 409]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"multi-cloud-automation\" class=\"mobile-header\">Multi-Cloud Automation</h2>\n<h3 id=\"aws-infrastructure-automation\" class=\"mobile-header\">AWS Infrastructure Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/aws-infrastructure.yml &lt;&lt;EOF\n---\n- name: AWS Infrastructure Automation\n  hosts: localhost\n  connection: local\n  gather_facts: no\n  vars:\n    aws_region: &quot;{{ aws_region | default(&#039;us-west-2&#039;) }}&quot;\n    vpc_cidr: &quot;{{ vpc_cidr | default(&#039;10.0.0.0/16&#039;) }}&quot;\n    environment: &quot;{{ environment | default(&#039;production&#039;) }}&quot;\n\n  tasks:\n    # VPC Creation\n    - name: Create VPC\n      amazon.aws.ec2_vpc_info:\n        filters:\n          &quot;tag:Name&quot;: &quot;{{ environment }}-vpc&quot;\n        region: &quot;{{ aws_region }}&quot;\n      register: existing_vpc\n\n    - name: Create new VPC if not exists\n      amazon.aws.ec2_vpc_net:\n        name: &quot;{{ environment }}-vpc&quot;\n        cidr_block: &quot;{{ vpc_cidr }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: present\n        dns_hostnames: yes\n        dns_support: yes\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          ManagedBy: ansible\n      register: vpc\n      when: existing_vpc.vpcs | length == 0\n\n    # Security Groups\n    - name: Create web security group\n      amazon.aws.ec2_group:\n        name: &quot;{{ environment }}-web-sg&quot;\n        description: &quot;Security group for web servers&quot;\n        vpc_id: &quot;{{ vpc.vpc.id if vpc.vpc is defined else existing_vpc.vpcs[0].vpc_id }}&quot;\n        region: &quot;{{ aws_region }}&quot;\n        rules:\n          - proto: tcp\n            ports:\n              - 80\n              - 443\n            cidr_ip: 0.0.0.0/0\n            rule_desc: &quot;HTTP and HTTPS access&quot;\n          - proto: tcp\n            ports:\n              - 22\n            group_id: &quot;{{ environment }}-bastion-sg&quot;\n            rule_desc: &quot;SSH from bastion&quot;\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n\n    # Launch EC2 instances\n    - name: Launch web servers\n      amazon.aws.ec2_instance:\n        name: &quot;{{ environment }}-web-{{ item }}&quot;\n        instance_type: t3.medium\n        image_id: ami-0c02fb55956c7d316  # Amazon Linux 2\n        key_name: &quot;{{ ec2_key_name }}&quot;\n        vpc_subnet_id: &quot;{{ web_subnet_id }}&quot;\n        security_groups:\n          - &quot;{{ environment }}-web-sg&quot;\n        region: &quot;{{ aws_region }}&quot;\n        state: running\n        wait: yes\n        wait_timeout: 300\n        user_data: |\n          #!/bin/bash\n          yum update -y\n          yum install -y python3\n        tags:\n          Environment: &quot;{{ environment }}&quot;\n          Role: webserver\n          Ansible: managed\n      loop: &quot;{{ range(1, web_server_count + 1) | list }}&quot;\n      register: web_instances\n\n    # Add instances to inventory\n    - name: Add web servers to inventory\n      add_host:\n        name: &quot;{{ item.instances[0].tags.Name }}&quot;\n        hostname: &quot;{{ item.instances[0].public_ip_address }}&quot;\n        groups: webservers\n        ansible_ssh_private_key_file: &quot;~/.ssh/{{ ec2_key_name }}.pem&quot;\n        ansible_user: ec2-user\n      loop: &quot;{{ web_instances.results }}&quot;\n      changed_when: false\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-cluster-management\" class=\"mobile-header\">Kubernetes Cluster Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/k8s-cluster-management.yml &lt;&lt;EOF\n---\n- name: Kubernetes Cluster Management with Ansible\n  hosts: k8s_masters\n  become: yes\n  serial: 1\n  vars:\n    k8s_version: &quot;1.28.2&quot;\n    containerd_version: &quot;1.6.24&quot;\n    cni_version: &quot;1.3.0&quot;\n\n  tasks:\n    # Pre-flight checks\n    - name: Check system requirements\n      assert:\n        that:\n          - ansible_memtotal_mb &gt;= 1700\n          - ansible_processor_cores &gt;= 2\n        fail_msg: &quot;System doesn&#039;t meet minimum requirements&quot;\n\n    - name: Verify connectivity to all nodes\n      ping:\n      delegate_to: &quot;{{ item }}&quot;\n      loop: &quot;{{ groups[&#039;k8s_all&#039;] }}&quot;\n\n    # Container runtime setup\n    - name: Install containerd\n      include_role:\n        name: containerd\n      vars:\n        containerd_version: &quot;{{ containerd_version }}&quot;\n\n    # Kubernetes installation\n    - name: Install Kubernetes components\n      include_role:\n        name: kubernetes\n      vars:\n        kubernetes_version: &quot;{{ k8s_version }}&quot;\n\n    # Cluster initialization\n    - name: Initialize Kubernetes cluster\n      shell: |\n        kubeadm init \\\n          --pod-network-cidr=10.244.0.0/16 \\\n          --service-cidr=10.96.0.0/12 \\\n          --apiserver-advertise-address={{ ansible_default_ipv4.address }} \\\n          --node-name={{ inventory_hostname }}\n      args:\n        creates: /etc/kubernetes/admin.conf\n      register: kubeadm_init\n\n    - name: Create .kube directory\n      file:\n        path: &quot;{{ ansible_env.HOME }}/.kube&quot;\n        state: directory\n        mode: &#039;0755&#039;\n\n    - name: Copy admin.conf to user&#039;s kube config\n      copy:\n        src: /etc/kubernetes/admin.conf\n        dest: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n        owner: &quot;{{ ansible_user }}&quot;\n        group: &quot;{{ ansible_user }}&quot;\n        mode: &#039;0644&#039;\n        remote_src: yes\n\n    # Network plugin installation\n    - name: Install Flannel CNI\n      shell: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n\n    # Join worker nodes\n    - name: Get join command\n      shell: kubeadm token create --print-join-command\n      register: join_command\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Join worker nodes to cluster\n      shell: &quot;{{ hostvars[groups[&#039;k8s_masters&#039;][0]][&#039;join_command&#039;].stdout }}&quot;\n      when: inventory_hostname in groups[&#039;k8s_workers&#039;]\n\n  post_tasks:\n    - name: Verify cluster status\n      shell: kubectl get nodes\n      environment:\n        KUBECONFIG: &quot;{{ ansible_env.HOME }}/.kube/config&quot;\n      register: cluster_status\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\n\n    - name: Display cluster status\n      debug:\n        var: cluster_status.stdout_lines\n      when: inventory_hostname in groups[&#039;k8s_masters&#039;][0]\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization-and-scaling\" class=\"mobile-header\">Performance Optimization and Scaling</h2>\n<h3 id=\"parallel-execution-strategies\" class=\"mobile-header\">Parallel Execution Strategies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create high-performance playbook configuration\ncat &gt; playbooks/high-performance-deployment.yml &lt;&lt;EOF\n---\n- name: High-Performance Deployment\n  hosts: all\n  become: yes\n  strategy: free  # Parallel execution\n  serial: &quot;30%&quot;   # Process 30% of hosts at a time\n  max_fail_percentage: 10\n  gather_facts: yes\n  fact_caching: smart\n  vars:\n    deployment_batch_size: 10\n    max_concurrent_tasks: 50\n\n  pre_tasks:\n    - name: Check system load\n      shell: uptime | awk &#039;{print $(NF-2)}&#039; | sed &#039;s/,//&#039;\n      register: system_load\n      changed_when: false\n\n    - name: Skip high-load systems\n      meta: end_host\n      when: system_load.stdout | float &gt; 5.0\n\n  tasks:\n    - name: Update packages with retries\n      package:\n        name: &quot;*&quot;\n        state: latest\n      retries: 3\n      delay: 30\n      async: 300\n      poll: 10\n\n    - name: Deploy configuration files in parallel\n      template:\n        src: &quot;{{ item.src }}&quot;\n        dest: &quot;{{ item.dest }}&quot;\n        mode: &quot;{{ item.mode | default(&#039;0644&#039;) }}&quot;\n        backup: yes\n      loop:\n        - { src: &quot;nginx.conf.j2&quot;, dest: &quot;/etc/nginx/nginx.conf&quot; }\n        - { src: &quot;mysql.cnf.j2&quot;, dest: &quot;/etc/mysql/my.cnf&quot; }\n        - { src: &quot;redis.conf.j2&quot;, dest: &quot;/etc/redis/redis.conf&quot; }\n      async: 120\n      poll: 5\n      register: config_deployment\n\n    - name: Wait for all configuration deployments\n      async_status:\n        jid: &quot;{{ item.ansible_job_id }}&quot;\n      loop: &quot;{{ config_deployment.results }}&quot;\n      when: item.ansible_job_id is defined\n\n  handlers:\n    - name: restart services\n      service:\n        name: &quot;{{ item }}&quot;\n        state: restarted\n      loop:\n        - nginx\n        - mysql\n        - redis\n      listen: &quot;restart all services&quot;\nEOF\n\n# Performance monitoring playbook\ncat &gt; playbooks/performance-monitoring.yml &lt;&lt;EOF\n---\n- name: Performance Monitoring Setup\n  hosts: all\n  become: yes\n  vars:\n    monitoring_tools:\n      - htop\n      - iotop\n      - nethogs\n      - dstat\n      - sysstat\n      - perf\n\n  tasks:\n    - name: Install performance monitoring tools\n      package:\n        name: &quot;{{ monitoring_tools }}&quot;\n        state: present\n\n    - name: Configure system monitoring\n      template:\n        src: templates/sysstat.j2\n        dest: /etc/default/sysstat\n        backup: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Enable system statistics collection\n      service:\n        name: &quot;{{ &#039;sysstat&#039; if ansible_os_family == &#039;Debian&#039; else &#039;sysstat&#039; }}&quot;\n        enabled: yes\n        state: started\n\n    - name: Create performance monitoring script\n      template:\n        src: templates/performance-monitor.sh.j2\n        dest: /usr/local/bin/performance-monitor.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule performance monitoring\n      cron:\n        name: &quot;Performance monitoring&quot;\n        minute: &quot;*/5&quot;\n        job: &quot;/usr/local/bin/performance-monitor.sh&quot;\n        user: root\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"testing-and-validation\" class=\"mobile-header\">Testing and Validation</h2>\n<h3 id=\"molecule-testing-framework\" class=\"mobile-header\">Molecule Testing Framework</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Molecule for role testing\npip install molecule[docker] molecule[vagrant] molecule[libvirt]\n\n# Initialize Molecule in role directory\ncd roles/nginx\nmolecule init scenario --driver-name docker\n\n# Create molecule configuration\ncat &gt; molecule/default/molecule.yml &lt;&lt;EOF\n---\ndependency:\n  name: galaxy\ndriver:\n  name: docker\nplatforms:\n  - name: nginx-ubuntu\n    image: ubuntu:22.04\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /lib/systemd/systemd\n    networks:\n      - name: molecule\n  - name: nginx-centos\n    image: centos:8\n    pre_build_image: true\n    privileged: true\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup:ro\n    command: /usr/sbin/init\n    networks:\n      - name: molecule\nprovisioner:\n  name: ansible\n  config_options:\n    defaults:\n      callbacks_enabled: profile_tasks,timer,yaml\n  inventory:\n    host_vars:\n      nginx-ubuntu:\n        ansible_python_interpreter: /usr/bin/python3\n      nginx-centos:\n        ansible_python_interpreter: /usr/bin/python3\nverifier:\n  name: ansible\nlint: |\n  set -e\n  yamllint .\n  ansible-lint\n  flake8\nEOF\n\n# Create test playbook\ncat &gt; molecule/default/converge.yml &lt;&lt;EOF\n---\n- name: Converge\n  hosts: all\n  become: true\n  tasks:\n    - name: &quot;Include nginx role&quot;\n      include_role:\n        name: nginx\n      vars:\n        nginx_vhosts:\n          - name: default\n            server_name: localhost\n            listen: 80\n            root: /var/www/html\n            enabled: true\nEOF\n\n# Create test verification\ncat &gt; molecule/default/verify.yml &lt;&lt;EOF\n---\n- name: Verify\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: Check if NGINX is running\n      uri:\n        url: http://localhost\n        method: GET\n      register: nginx_check\n\n    - name: Verify NGINX is responding\n      assert:\n        that:\n          - nginx_check.status == 200\n        fail_msg: &quot;NGINX is not responding correctly&quot;\n\n    - name: Check NGINX configuration\n      shell: nginx -t\n      changed_when: false\n\n    - name: Verify NGINX process\n      shell: pgrep nginx\n      changed_when: false\nEOF\n\n# Run tests\nmolecule test</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-lint-and-security-scanning\" class=\"mobile-header\">Ansible Lint and Security Scanning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Ansible Lint\npip install ansible-lint\n\n# Create .ansible-lint configuration\ncat &gt; .ansible-lint &lt;&lt;EOF\n---\nprofile: production\n\nexclude_paths:\n  - .cache/\n  - .github/\n  - molecule/\n  - .venv/\n\nskip_list:\n  - yaml[line-length]  # Allow longer lines for readability\n\nwarn_list:\n  - experimental  # Warn about experimental features\n\n# Custom rules\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments:\n    min-spaces-from-content: 1\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  trailing-spaces: enable\n  truthy:\n    allowed-values: [&#039;true&#039;, &#039;false&#039;, &#039;yes&#039;, &#039;no&#039;]\nEOF\n\n# Create security-focused playbook linting\ncat &gt; .yamllint &lt;&lt;EOF\n---\nextends: default\n\nrules:\n  braces:\n    min-spaces-inside: 0\n    max-spaces-inside: 1\n  brackets:\n    min-spaces-inside: 0\n    max-spaces-inside: 0\n  colons:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  commas:\n    max-spaces-before: 0\n    min-spaces-after: 1\n    max-spaces-after: 1\n  comments: disable\n  comments-indentation: disable\n  document-start: disable\n  empty-lines:\n    max: 2\n    max-start: 0\n    max-end: 1\n  hyphens:\n    max-spaces-after: 1\n  indentation:\n    spaces: 2\n    indent-sequences: true\n    check-multi-line-strings: false\n  key-duplicates: enable\n  line-length:\n    max: 120\n  new-line-at-end-of-file: enable\n  octal-values:\n    forbid-implicit-octal: true\n  trailing-spaces: enable\n  truthy: disable\nEOF\n\n# Run linting\nansible-lint playbooks/\nyamllint .</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"comprehensive-backup-automation\" class=\"mobile-header\">Comprehensive Backup Automation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/backup-automation.yml &lt;&lt;EOF\n---\n- name: Automated Backup System\n  hosts: all\n  become: yes\n  vars:\n    backup_root: /backup\n    backup_retention_days: 30\n    backup_schedule:\n      databases: &quot;0 2 * * *&quot;\n      files: &quot;0 3 * * *&quot;\n      configs: &quot;0 4 * * *&quot;\n\n  tasks:\n    - name: Create backup directories\n      file:\n        path: &quot;{{ backup_root }}/{{ item }}&quot;\n        state: directory\n        mode: &#039;0755&#039;\n        owner: root\n        group: root\n      loop:\n        - databases\n        - files\n        - configs\n        - logs\n\n    # Database backups\n    - name: Create database backup script\n      template:\n        src: templates/mysql-backup.sh.j2\n        dest: /usr/local/bin/mysql-backup.sh\n        mode: &#039;0755&#039;\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    - name: Schedule database backups\n      cron:\n        name: &quot;MySQL backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;2&quot;\n        job: &quot;/usr/local/bin/mysql-backup.sh&quot;\n        user: root\n      when: &quot;&#039;dbservers&#039; in group_names&quot;\n\n    # File system backups\n    - name: Create file backup script\n      template:\n        src: templates/file-backup.sh.j2\n        dest: /usr/local/bin/file-backup.sh\n        mode: &#039;0755&#039;\n\n    - name: Schedule file backups\n      cron:\n        name: &quot;File system backup&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/local/bin/file-backup.sh&quot;\n        user: root\n\n    # Configuration backups\n    - name: Backup system configurations\n      archive:\n        path:\n          - /etc/nginx\n          - /etc/mysql\n          - /etc/systemd/system\n          - /etc/crontab\n          - /etc/hosts\n          - /etc/fstab\n        dest: &quot;{{ backup_root }}/configs/system-config-{{ ansible_date_time.epoch }}.tar.gz&quot;\n        mode: &#039;0600&#039;\n\n    # Remote backup synchronization\n    - name: Synchronize backups to remote storage\n      synchronize:\n        src: &quot;{{ backup_root }}/&quot;\n        dest: &quot;backup-server.example.com:{{ backup_root }}/{{ inventory_hostname }}/&quot;\n        delete: yes\n        rsync_opts:\n          - &quot;--exclude=*.tmp&quot;\n          - &quot;--compress&quot;\n          - &quot;--archive&quot;\n      when: backup_remote_sync | default(true)\n\n    # Cleanup old backups\n    - name: Clean up old backup files\n      find:\n        paths: &quot;{{ backup_root }}&quot;\n        age: &quot;{{ backup_retention_days }}d&quot;\n        file_type: file\n      register: old_backups\n\n    - name: Remove old backup files\n      file:\n        path: &quot;{{ item.path }}&quot;\n        state: absent\n      loop: &quot;{{ old_backups.files }}&quot;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-monitoring\" class=\"mobile-header\">Verification and Monitoring</h2>\n<h3 id=\"cross-platform-system-verification\" class=\"mobile-header\">Cross-Platform System Verification</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive verification playbook\ncat &gt; playbooks/system-verification.yml &lt;&lt;EOF\n---\n- name: System Verification and Health Check\n  hosts: all\n  become: yes\n  gather_facts: yes\n  vars:\n    health_checks:\n      - service: nginx\n        port: 80\n        process: nginx\n      - service: mysql\n        port: 3306\n        process: mysqld\n      - service: redis\n        port: 6379\n        process: redis-server\n\n  tasks:\n    # System information gathering\n    - name: Gather system information\n      setup:\n        gather_subset:\n          - all\n          - !facter\n          - !ohai\n\n    # Service verification\n    - name: Check critical services status\n      service_facts:\n\n    - name: Verify services are running\n      assert:\n        that:\n          - &quot;ansible_facts.services[item.service + &#039;.service&#039;].state == &#039;running&#039;&quot;\n        fail_msg: &quot;Service {{ item.service }} is not running&quot;\n        success_msg: &quot;Service {{ item.service }} is healthy&quot;\n      loop: &quot;{{ health_checks }}&quot;\n      when: &quot;item.service + &#039;.service&#039; in ansible_facts.services&quot;\n\n    # Network connectivity tests\n    - name: Test network connectivity\n      wait_for:\n        host: &quot;{{ item.host }}&quot;\n        port: &quot;{{ item.port }}&quot;\n        timeout: 5\n      loop:\n        - { host: &quot;8.8.8.8&quot;, port: 53 }\n        - { host: &quot;1.1.1.1&quot;, port: 53 }\n      ignore_errors: yes\n\n    # Disk space monitoring\n    - name: Check disk space usage\n      shell: df -h | awk &#039;$5 &gt; &quot;85%&quot; {print $0}&#039;\n      register: disk_usage\n      changed_when: false\n      failed_when: disk_usage.stdout != &quot;&quot;\n\n    # Memory usage check\n    - name: Check memory usage\n      shell: free | grep Mem | awk &#039;{printf &quot;%.0f&quot;, $3/$2 * 100.0}&#039;\n      register: memory_usage\n      changed_when: false\n\n    - name: Alert on high memory usage\n      debug:\n        msg: &quot;WARNING: Memory usage is {{ memory_usage.stdout }}%&quot;\n      when: memory_usage.stdout | int &gt; 85\n\n    # Security verification\n    - name: Check for failed login attempts\n      shell: grep &quot;Failed password&quot; /var/log/auth.log | tail -10\n      register: failed_logins\n      changed_when: false\n      ignore_errors: yes\n      when: ansible_os_family == &quot;Debian&quot;\n\n    - name: Check firewall status\n      shell: |\n        if command -v ufw &gt;/dev/null 2&gt;&amp;1; then\n          ufw status\n        elif command -v firewall-cmd &gt;/dev/null 2&gt;&amp;1; then\n          firewall-cmd --state\n        else\n          echo &quot;No supported firewall found&quot;\n        fi\n      register: firewall_status\n      changed_when: false\n\n  post_tasks:\n    - name: Generate system health report\n      template:\n        src: templates/health-report.j2\n        dest: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        mode: &#039;0644&#039;\n\n    - name: Fetch health reports\n      fetch:\n        src: &quot;/tmp/health-report-{{ inventory_hostname }}-{{ ansible_date_time.epoch }}.txt&quot;\n        dest: &quot;./reports/&quot;\n        flat: yes\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"continuous-compliance-monitoring\" class=\"mobile-header\">Continuous Compliance Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; playbooks/compliance-monitoring.yml &lt;&lt;EOF\n---\n- name: Continuous Compliance Monitoring\n  hosts: all\n  become: yes\n  vars:\n    compliance_standards:\n      - cis\n      - pci_dss\n      - soc2\n      - hipaa\n    \n    audit_log_paths:\n      - /var/log/auth.log\n      - /var/log/syslog\n      - /var/log/audit/audit.log\n\n  tasks:\n    # Install audit tools\n    - name: Install audit daemon\n      package:\n        name: &quot;{{ &#039;auditd&#039; if ansible_os_family == &#039;RedHat&#039; else &#039;auditd&#039; }}&quot;\n        state: present\n\n    - name: Configure audit rules\n      template:\n        src: templates/audit.rules.j2\n        dest: /etc/audit/rules.d/audit.rules\n        backup: yes\n      notify: restart auditd\n\n    # CIS compliance checks\n    - name: Run CIS benchmark checks\n      shell: |\n        if [ -f /opt/cis-cat/CIS-CAT.sh ]; then\n          /opt/cis-cat/CIS-CAT.sh -b /opt/cis-cat/benchmarks/\n        else\n          echo &quot;CIS-CAT not installed, skipping&quot;\n        fi\n      register: cis_results\n      ignore_errors: yes\n\n    # File integrity monitoring\n    - name: Install AIDE\n      package:\n        name: aide\n        state: present\n\n    - name: Initialize AIDE database\n      shell: |\n        aide --init\n        mv /var/lib/aide/aide.db.new /var/lib/aide/aide.db\n      args:\n        creates: /var/lib/aide/aide.db\n\n    - name: Schedule AIDE integrity checks\n      cron:\n        name: &quot;AIDE integrity check&quot;\n        minute: &quot;0&quot;\n        hour: &quot;3&quot;\n        job: &quot;/usr/bin/aide --check | mail -s &#039;AIDE Report&#039; security@example.com&quot;\n        user: root\n\n    # Log monitoring\n    - name: Install log monitoring tools\n      package:\n        name:\n          - logwatch\n          - rsyslog\n        state: present\n\n    - name: Configure centralized logging\n      template:\n        src: templates/rsyslog.conf.j2\n        dest: /etc/rsyslog.conf\n        backup: yes\n      notify: restart rsyslog\n\n  handlers:\n    - name: restart auditd\n      service:\n        name: auditd\n        state: restarted\n\n    - name: restart rsyslog\n      service:\n        name: rsyslog\n        state: restarted\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"cicd-integration\" class=\"mobile-header\">CI/CD Integration</h2>\n<h3 id=\"jenkins-pipeline-integration\" class=\"mobile-header\">Jenkins Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Jenkinsfile for Ansible automation\ncat &gt; Jenkinsfile &lt;&lt;EOF\npipeline {\n    agent any\n    \n    environment {\n        ANSIBLE_CONFIG = &#039;ansible.cfg&#039;\n        ANSIBLE_HOST_KEY_CHECKING = &#039;False&#039;\n    }\n    \n    stages {\n        stage(&#039;Lint&#039;) {\n            steps {\n                sh &#039;ansible-lint playbooks/&#039;\n                sh &#039;yamllint .&#039;\n            }\n        }\n        \n        stage(&#039;Syntax Check&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --syntax-check&#039;\n            }\n        }\n        \n        stage(&#039;Dry Run&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/site.yml --check --diff&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Staging&#039;) {\n            when {\n                branch &#039;develop&#039;\n            }\n            steps {\n                sh &#039;ansible-playbook -i inventories/staging playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Deploy to Production&#039;) {\n            when {\n                branch &#039;main&#039;\n            }\n            steps {\n                input &#039;Deploy to Production?&#039;\n                sh &#039;ansible-playbook -i inventories/production playbooks/site.yml&#039;\n            }\n        }\n        \n        stage(&#039;Verify Deployment&#039;) {\n            steps {\n                sh &#039;ansible-playbook playbooks/system-verification.yml&#039;\n            }\n        }\n    }\n    \n    post {\n        always {\n            archiveArtifacts artifacts: &#039;logs/*.log&#039;, allowEmptyArchive: true\n            publishHTML([\n                allowMissing: false,\n                alwaysLinkToLastBuild: true,\n                keepAll: true,\n                reportDir: &#039;reports&#039;,\n                reportFiles: &#039;*.html&#039;,\n                reportName: &#039;Ansible Report&#039;\n            ])\n        }\n        failure {\n            emailext (\n                subject: &quot;Failed Pipeline: ${env.JOB_NAME} - ${env.BUILD_NUMBER}&quot;,\n                body: &quot;Something is wrong with ${env.BUILD_URL}&quot;,\n                to: &quot;${env.DEFAULT_RECIPIENTS}&quot;\n            )\n        }\n    }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"gitlab-ci-integration\" class=\"mobile-header\">GitLab CI Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">cat &gt; .gitlab-ci.yml &lt;&lt;EOF\nstages:\n  - lint\n  - test\n  - deploy-staging\n  - deploy-production\n\nvariables:\n  ANSIBLE_CONFIG: ansible.cfg\n  ANSIBLE_HOST_KEY_CHECKING: &quot;False&quot;\n\nbefore_script:\n  - pip install ansible ansible-lint yamllint\n  - ansible-galaxy install -r requirements.yml\n\nlint:\n  stage: lint\n  script:\n    - ansible-lint playbooks/\n    - yamllint .\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\nsyntax-check:\n  stage: test\n  script:\n    - ansible-playbook playbooks/site.yml --syntax-check\n    - ansible-playbook playbooks/site.yml --check --diff -i inventories/staging\n  rules:\n    - if: &#039;$CI_MERGE_REQUEST_IID&#039;\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n\ndeploy-staging:\n  stage: deploy-staging\n  script:\n    - ansible-playbook -i inventories/staging playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == &quot;develop&quot;&#039;\n\ndeploy-production:\n  stage: deploy-production\n  script:\n    - ansible-playbook -i inventories/production playbooks/site.yml\n  rules:\n    - if: &#039;$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH&#039;\n      when: manual\n  environment:\n    name: production\n    url: https://production.example.com\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug connection issues\nansible all -m ping -vvv\n\n# Check SSH connectivity\nansible all -m setup --ask-pass --ask-become-pass\n\n# Verify inventory\nansible-inventory --list\nansible-inventory --graph\n\n# Test specific host\nansible target-host -m command -a &quot;uptime&quot;\n\n# Check syntax without execution\nansible-playbook playbooks/site.yml --syntax-check\n\n# Dry run with verbose output\nansible-playbook playbooks/site.yml --check --diff -vvv\n\n# Debug variable resolution\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug=true&quot; --tags debug\n\n# Check facts\nansible all -m setup | grep ansible_os_family\n\n# Connection troubleshooting\nssh -vvv user@target-host\n\n# Permission issues\nansible all -m file -a &quot;path=/tmp/test state=touch&quot; --become\n\n# Vault issues\nansible-vault view group_vars/all/vault.yml\n\n# Performance debugging\nansible-playbook playbooks/site.yml --start-at-task=&quot;specific task name&quot;\nansible-playbook playbooks/site.yml --step\n\n# Module testing\nansible localhost -m debug -a &quot;var=hostvars&quot;\nansible localhost -m setup\n\n# Check for syntax errors in roles\nfind roles/ -name &quot;*.yml&quot; -exec ansible-playbook {} --syntax-check \\;</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable comprehensive logging\nexport ANSIBLE_DEBUG=1\nexport ANSIBLE_VERBOSITY=4\nansible-playbook playbooks/site.yml\n\n# Profile playbook execution\nansible-playbook playbooks/site.yml --extra-vars=&quot;profile_tasks_sort_order=none&quot;\n\n# Memory usage analysis\nansible-playbook playbooks/site.yml --extra-vars=&quot;ansible_python_interpreter=/usr/bin/python3&quot;\n\n# Network debugging\nansible all -m command -a &quot;ss -tulpn&quot;\nansible all -m command -a &quot;netstat -rn&quot;\n\n# Process debugging\nansible all -m command -a &quot;ps aux --sort=-%mem | head -10&quot;\n\n# Disk usage analysis\nansible all -m command -a &quot;df -h&quot;\nansible all -m command -a &quot;du -sh /var/log/*&quot;\n\n# Service debugging\nansible all -m systemd -a &quot;name=nginx&quot; --become\nansible all -m command -a &quot;systemctl status nginx&quot; --become\n\n# Variable debugging\nansible-playbook playbooks/site.yml --extra-vars=&quot;debug_vars=true&quot; --tags debug_vars</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://galaxy.ansible.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Galaxy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/playbooks_best_practices.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/user_guide/become.html#security-best-practices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://molecule.readthedocs.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Ansible Molecule Testing</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.ansible.com/ansible/latest/collections/index.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Collections</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"31 min","wordCount":6191,"lastBuilt":"2025-09-14T03:45:51.595Z"}]},"__N_SSG":true}