{"pageProps":{"guide":{"name":"pihole","displayName":"Pi-hole","slug":"pihole","description":"Repo for pihole","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pihole","updatedAt":"2025-09-14T01:30:48Z","createdAt":"2025-09-08T03:14:08Z","readmeRaw":"# Pi-hole Installation Guide\n\nNetwork-wide ad and tracker blocking DNS sinkhole that protects your entire network from unwanted content without requiring client-side software. Essential tool for privacy, security, and performance improvement.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 1GB RAM minimum, 2GB recommended\n- Static IP address for DNS server\n- Port 53 available for DNS service\n- Web server port (80/443) available for admin interface\n\n## Installation\n\n### One-Line Installation (Recommended)\n```bash\n# Download and run the automated installer\ncurl -sSL https://install.pi-hole.net | bash\n\n# Alternative: Download and review before running\nwget -O basic-install.sh https://install.pi-hole.net\nless basic-install.sh  # Review the script\nsudo bash basic-install.sh\n```\n\n### Ubuntu/Debian Manual Installation\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install dependencies\nsudo apt install -y curl dnsutils net-tools\n\n# Create pihole user\nsudo useradd --system --shell /usr/sbin/nologin pihole\n\n# Download Pi-hole\ngit clone --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole\ncd Pi-hole\n\n# Run installer\nsudo bash automated\\ install/basic-install.sh\n\n# Verify installation\npihole status\ndig @localhost google.com\n```\n\n## Configuration\n\n### Enhanced Privacy Setup\n```bash\n# Configure maximum privacy\nsudo tee /etc/pihole/pihole-FTL.conf > /dev/null <<EOF\nPRIVACYLEVEL=2\nMAXLOGAGE=24\nIGNORE_LOCALHOST=yes\nBLOCKINGMODE=IP-AAAA-NODATA\nCNAME_INSPECTION=yes\nEOF\n\nsudo systemctl restart pihole-FTL\n```\n\n### Custom Blocklists\n```bash\n# Add comprehensive blocklists\npihole -a -l https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts\npihole -a -l https://mirror1.malwaredomains.com/files/justdomains\npihole -a -l https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt\n\n# Update blocklists\npihole -g\n```\n\n## Security and Monitoring\n\n### Security Hardening\n```bash\n# Secure web interface\nsudo tee /etc/lighttpd/conf-available/99-pihole-security.conf > /dev/null <<EOF\nserver.modules += ( \"mod_setenv\" )\nsetenv.add-response-header = (\n    \"X-Frame-Options\" => \"DENY\",\n    \"X-Content-Type-Options\" => \"nosniff\",\n    \"Strict-Transport-Security\" => \"max-age=31536000\"\n)\nEOF\n\nsudo lighttpd-enable-mod pihole-security\nsudo systemctl restart lighttpd\n```\n\n### Monitoring Script\n```bash\nsudo tee /usr/local/bin/pihole-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nLOG=\"/var/log/pihole-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active pihole-FTL >/dev/null; then\n    log_message \"âœ“ Pi-hole service running\"\nelse\n    log_message \"âœ— Pi-hole service not running\"\nfi\n\n# Check DNS resolution\nif dig @localhost google.com +short >/dev/null 2>&1; then\n    log_message \"âœ“ DNS resolution working\"\nelse\n    log_message \"âœ— DNS resolution failed\"\nfi\n\n# Check blocking\nif dig @localhost doubleclick.net +short | grep -q \"0.0.0.0\"; then\n    log_message \"âœ“ Ad blocking working\"\nelse\n    log_message \"âš  Ad blocking issues\"\nfi\n\nlog_message \"Pi-hole monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/pihole-monitor.sh\necho \"*/15 * * * * root /usr/local/bin/pihole-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n## Backup Strategy\n\n```bash\nsudo tee /usr/local/bin/pihole-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/pihole\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup Pi-hole configuration\npihole -a -t > ${BACKUP_DIR}/pihole-backup-${DATE}.tar.gz\n\n# Keep last 14 backups\nfind ${BACKUP_DIR} -name \"pihole-backup-*.tar.gz\" -mtime +14 -delete\n\necho \"Pi-hole backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/pihole-backup.sh\necho \"0 2 * * * root /usr/local/bin/pihole-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Additional Resources\n\n- [Pi-hole Documentation](https://docs.pi-hole.net/)\n- [Pi-hole Community](https://discourse.pi-hole.net/)\n- [Blocklist Collections](https://github.com/hectorm/hmirror)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"pi-hole-installation-guide\" class=\"mobile-header\">Pi-hole Installation Guide</h1>\n<p class=\"mobile-paragraph\">Network-wide ad and tracker blocking DNS sinkhole that protects your entire network from unwanted content without requiring client-side software. Essential tool for privacy, security, and performance improvement.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">1GB RAM minimum, 2GB recommended</li>\n<li class=\"mobile-list-item\">Static IP address for DNS server</li>\n<li class=\"mobile-list-item\">Port 53 available for DNS service</li>\n<li class=\"mobile-list-item\">Web server port (80/443) available for admin interface</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"one-line-installation-recommended\" class=\"mobile-header\">One-Line Installation (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download and run the automated installer\ncurl -sSL https://install.pi-hole.net | bash\n\n# Alternative: Download and review before running\nwget -O basic-install.sh https://install.pi-hole.net\nless basic-install.sh  # Review the script\nsudo bash basic-install.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"ubuntudebian-manual-installation\" class=\"mobile-header\">Ubuntu/Debian Manual Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install dependencies\nsudo apt install -y curl dnsutils net-tools\n\n# Create pihole user\nsudo useradd --system --shell /usr/sbin/nologin pihole\n\n# Download Pi-hole\ngit clone --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole\ncd Pi-hole\n\n# Run installer\nsudo bash automated\\ install/basic-install.sh\n\n# Verify installation\npihole status\ndig @localhost google.com</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"enhanced-privacy-setup\" class=\"mobile-header\">Enhanced Privacy Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure maximum privacy\nsudo tee /etc/pihole/pihole-FTL.conf &gt; /dev/null &lt;&lt;EOF\nPRIVACYLEVEL=2\nMAXLOGAGE=24\nIGNORE_LOCALHOST=yes\nBLOCKINGMODE=IP-AAAA-NODATA\nCNAME_INSPECTION=yes\nEOF\n\nsudo systemctl restart pihole-FTL</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-blocklists\" class=\"mobile-header\">Custom Blocklists</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add comprehensive blocklists\npihole -a -l https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts\npihole -a -l https://mirror1.malwaredomains.com/files/justdomains\npihole -a -l https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt\n\n# Update blocklists\npihole -g</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-and-monitoring\" class=\"mobile-header\">Security and Monitoring</h2>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure web interface\nsudo tee /etc/lighttpd/conf-available/99-pihole-security.conf &gt; /dev/null &lt;&lt;EOF\nserver.modules += ( &quot;mod_setenv&quot; )\nsetenv.add-response-header = (\n    &quot;X-Frame-Options&quot; =&gt; &quot;DENY&quot;,\n    &quot;X-Content-Type-Options&quot; =&gt; &quot;nosniff&quot;,\n    &quot;Strict-Transport-Security&quot; =&gt; &quot;max-age=31536000&quot;\n)\nEOF\n\nsudo lighttpd-enable-mod pihole-security\nsudo systemctl restart lighttpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"monitoring-script\" class=\"mobile-header\">Monitoring Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/pihole-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOG=&quot;/var/log/pihole-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active pihole-FTL &gt;/dev/null; then\n    log_message &quot;âœ“ Pi-hole service running&quot;\nelse\n    log_message &quot;âœ— Pi-hole service not running&quot;\nfi\n\n# Check DNS resolution\nif dig @localhost google.com +short &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ DNS resolution working&quot;\nelse\n    log_message &quot;âœ— DNS resolution failed&quot;\nfi\n\n# Check blocking\nif dig @localhost doubleclick.net +short | grep -q &quot;0.0.0.0&quot;; then\n    log_message &quot;âœ“ Ad blocking working&quot;\nelse\n    log_message &quot;âš  Ad blocking issues&quot;\nfi\n\nlog_message &quot;Pi-hole monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/pihole-monitor.sh\necho &quot;*/15 * * * * root /usr/local/bin/pihole-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-strategy\" class=\"mobile-header\">Backup Strategy</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/pihole-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/pihole&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup Pi-hole configuration\npihole -a -t &gt; ${BACKUP_DIR}/pihole-backup-${DATE}.tar.gz\n\n# Keep last 14 backups\nfind ${BACKUP_DIR} -name &quot;pihole-backup-*.tar.gz&quot; -mtime +14 -delete\n\necho &quot;Pi-hole backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/pihole-backup.sh\necho &quot;0 2 * * * root /usr/local/bin/pihole-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.pi-hole.net/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Pi-hole Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discourse.pi-hole.net/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Pi-hole Community</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/hectorm/hmirror\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Blocklist Collections</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"3 min","wordCount":479,"lastBuilt":"2025-09-14T03:45:46.712Z"},"category":{"key":"security","name":"Security","description":"Security tools and authentication systems","icon":"ðŸ”’","color":"#ff5555","keywords":["vault","authelia","keycloak","pihole","fail2ban","wireguard","openvpn"]},"relatedGuides":[{"name":"fail2ban","displayName":"Fail2ban","slug":"fail2ban","description":"Repo for fail2ban","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/fail2ban","updatedAt":"2025-09-14T01:29:56Z","createdAt":"2025-09-08T03:07:24Z","readmeRaw":"# Fail2Ban Installation Guide\n\nIntrusion prevention software that protects servers from brute-force attacks by monitoring log files and automatically banning malicious IP addresses. Essential security tool for any public-facing server.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- iptables or firewalld\n- Log files to monitor (SSH, web server, etc.)\n- Python 3.6+ (usually pre-installed)\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install Fail2Ban\nsudo apt install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\nfail2ban-client version\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Fail2Ban\nsudo yum install -y fail2ban fail2ban-systemd whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\n```\n\n### Fedora\n```bash\n# Install Fail2Ban\nsudo dnf install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\n```\n\n## Configuration\n\n### Basic Configuration\n```bash\n# Create local jail configuration (never edit jail.conf directly)\nsudo tee /etc/fail2ban/jail.local > /dev/null <<EOF\n# Fail2Ban Local Configuration\n\n[DEFAULT]\n# Ban settings\nbantime = 3600\nfindtime = 600\nmaxretry = 3\nbackend = auto\n\n# Notification settings\ndestemail = admin@example.com\nsender = fail2ban@example.com\nmta = sendmail\n\n# Actions\naction = %(action_mwl)s\n\n# Ignore IP addresses (whitelist)\nignoreip = 127.0.0.1/8 ::1 192.168.1.0/24 10.0.0.0/8\n\n# SSH protection\n[sshd]\nenabled = true\nport = ssh,2222\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\n\n# HTTP/HTTPS brute force protection\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nlogpath = /var/log/nginx/error.log\nmaxretry = 3\n\n[nginx-noscript]\nenabled = true\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 6\n\n[nginx-badbots]\nenabled = true\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n# Apache protection\n[apache-auth]\nenabled = false\nfilter = apache-auth\nlogpath = /var/log/apache2/error.log\nmaxretry = 3\n\n[apache-badbots]\nenabled = false\nfilter = apache-badbots\nlogpath = /var/log/apache2/access.log\nmaxretry = 2\n\n# Database protection\n[mysql]\nenabled = false\nfilter = mysql-auth\nlogpath = /var/log/mysql/error.log\nmaxretry = 3\nbantime = 7200\n\n[postgresql]\nenabled = false\nfilter = postgresql\nlogpath = /var/log/postgresql/postgresql-*-main.log\nmaxretry = 3\n\n# Mail server protection\n[postfix]\nenabled = false\nfilter = postfix\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n[dovecot]\nenabled = false\nfilter = dovecot\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n# FTP protection\n[vsftpd]\nenabled = false\nfilter = vsftpd\nlogpath = /var/log/vsftpd.log\nmaxretry = 3\n\n# Custom application protection\n[custom-app]\nenabled = false\nfilter = custom-app\nlogpath = /var/log/myapp/error.log\nmaxretry = 5\nbantime = 1800\nEOF\n```\n\n### Custom Filters\n```bash\n# Create custom filter for web applications\nsudo tee /etc/fail2ban/filter.d/nginx-custom.conf > /dev/null <<EOF\n# Custom NGINX filter for advanced protection\n\n[Definition]\nfailregex = \n    # Failed login attempts\n    ^<HOST> -.*POST.*(wp-login\\.php|login|signin|admin).*HTTP/[0-9\\.]+\\\" 200\n    # Directory traversal attempts\n    ^<HOST> -.*GET.*(\\.\\./|\\.\\.\\%2F).*HTTP/[0-9\\.]+\\\" 404\n    # SQL injection attempts  \n    ^<HOST> -.*GET.*(union|select|insert|cast|set|declare|drop|create|alter|delete|update|replace|truncate).*HTTP/[0-9\\.]+\\\" 200\n    # XSS attempts\n    ^<HOST> -.*GET.*(script|javascript|vbscript|onload|onerror|onclick).*HTTP/[0-9\\.]+\\\" 200\n    # Suspicious user agents\n    ^<HOST> -.*\\\"(.*sqlmap.*|.*nikto.*|.*nessus.*|.*openvas.*|.*python-requests.*|.*curl.*|.*wget.*)\\\"$\n    # Too many 404 errors\n    ^<HOST> -.*\\\" 404 \n\nignoreregex =\n    # Ignore legitimate requests\n    ^<HOST> -.*GET.*/favicon\\.ico.*HTTP/[0-9\\.]+\\\" 404\n    ^<HOST> -.*GET.*/robots\\.txt.*HTTP/[0-9\\.]+\\\" 404\nEOF\n\n# Create WordPress-specific filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf > /dev/null <<EOF\n[Definition]\nfailregex = \n    # WordPress login failures\n    ^<HOST> -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\\" 200\n    # WordPress admin access attempts\n    ^<HOST> -.*GET.*/wp-admin.*HTTP/[0-9\\.]+\\\" 403\n    # XML-RPC attacks\n    ^<HOST> -.*POST.*/xmlrpc\\.php.*HTTP/[0-9\\.]+\\\" 200\n\nignoreregex =\n    # Ignore successful admin logins (adjust pattern as needed)\n    ^<HOST> -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\\" 302\nEOF\n\n# Add WordPress jail to jail.local\nsudo tee -a /etc/fail2ban/jail.local > /dev/null <<EOF\n\n[wordpress]\nenabled = true\nfilter = wordpress\nlogpath = /var/log/nginx/access.log\nport = http,https\nmaxretry = 3\nbantime = 1800\nfindtime = 600\nEOF\n\nsudo systemctl restart fail2ban\n```\n\n### Advanced Configuration\n```bash\n# Create advanced fail2ban configuration with multiple actions\nsudo tee /etc/fail2ban/action.d/telegram.conf > /dev/null <<EOF\n# Telegram notification action\n\n[Definition]\nactionstart = \nactionstop = \nactioncheck = \nactionban = curl -s \"https://api.telegram.org/bot<bot_token>/sendMessage\" -d \"chat_id=<chat_id>&text=ðŸš« Fail2Ban: <name> banned <ip> for <failures> failures\"\nactionunban = curl -s \"https://api.telegram.org/bot<bot_token>/sendMessage\" -d \"chat_id=<chat_id>&text=âœ… Fail2Ban: <name> unbanned <ip>\"\n\n[Init]\nbot_token = your_telegram_bot_token\nchat_id = your_telegram_chat_id\nEOF\n\n# Create comprehensive protection configuration\nsudo tee /etc/fail2ban/jail.d/comprehensive.conf > /dev/null <<EOF\n# Comprehensive Security Configuration\n\n[DEFAULT]\n# Enhanced ban settings\nbantime.increment = true\nbantime.rndtime = 60\nbantime.maxtime = 86400\nbantime.factor = 2\nbantime.formula = ban.Time * (1<<(ban.Count if ban.Count<20 else 20)) * banFactor\n\n# Multiple actions (ban + notify)\naction = %(action_mwl)s[dest=security@example.com]\n         telegram[bot_token=your_bot_token, chat_id=your_chat_id]\n\n[sshd-aggressive]\nenabled = true\nport = ssh\nfilter = sshd[mode=aggressive]\nlogpath = /var/log/auth.log\nmaxretry = 2\nbantime = 7200\nfindtime = 300\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\nbantime = 3600\n\n[nginx-noproxy]\nenabled = true\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nbantime = 86400\n\n# Protect against port scans\n[port-scan]\nenabled = true\nfilter = port-scan\nlogpath = /var/log/messages\nmaxretry = 1\nbantime = 86400\n\n# DNS amplification protection\n[named-refused]\nenabled = false\nfilter = named-refused\nlogpath = /var/log/messages\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### Custom Filters for Applications\n```bash\n# Create filter for Node.js applications\nsudo tee /etc/fail2ban/filter.d/nodejs-auth.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^.*Authentication failed for.*from <HOST>.*$\n            ^.*Invalid login attempt.*IP: <HOST>.*$\n            ^.*Failed login.*remote_addr: <HOST>.*$\nignoreregex =\nEOF\n\n# Create filter for Grafana\nsudo tee /etc/fail2ban/filter.d/grafana.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^.*logger=context.*error=\"invalid username or password\".*remote_addr=<HOST>\n            ^.*logger=context.*error=\"user not found\".*remote_addr=<HOST>\nignoreregex =\nEOF\n\n# Create filter for GitLab\nsudo tee /etc/fail2ban/filter.d/gitlab.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^.*Failed Login:.*IP: <HOST>.*$\n            ^.*Rack_Attack.*Throttle.*IP: <HOST>.*$\nignoreregex =\nEOF\n\n# Add application-specific jails\nsudo tee /etc/fail2ban/jail.d/applications.conf > /dev/null <<EOF\n[nodejs-auth]\nenabled = false\nfilter = nodejs-auth\nlogpath = /var/log/nodejs/app.log\nmaxretry = 5\nbantime = 1800\n\n[grafana]\nenabled = false\nfilter = grafana\nlogpath = /var/log/grafana/grafana.log\nmaxretry = 5\nbantime = 3600\n\n[gitlab]\nenabled = false\nfilter = gitlab\nlogpath = /var/log/gitlab/gitlab-rails/production.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n## Monitoring and Management\n\n### Fail2Ban Management Script\n```bash\nsudo tee /usr/local/bin/fail2ban-manager.sh > /dev/null <<'EOF'\n#!/bin/bash\n\ncase \"${1}\" in\n    \"status\")\n        echo \"=== Fail2Ban Status ===\"\n        sudo fail2ban-client status\n        echo \"\"\n        echo \"=== Active Jails ===\"\n        for jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n            echo \"Jail: $jail\"\n            sudo fail2ban-client status $jail\n            echo \"\"\n        done\n        ;;\n        \n    \"unban\")\n        IP=\"${2}\"\n        if [ -z \"$IP\" ]; then\n            echo \"Usage: $0 unban <ip_address>\"\n            exit 1\n        fi\n        \n        echo \"Unbanning IP: $IP from all jails\"\n        for jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n            sudo fail2ban-client set $jail unbanip $IP 2>/dev/null && echo \"  - Unbanned from $jail\"\n        done\n        ;;\n        \n    \"ban\")\n        IP=\"${2}\"\n        JAIL=\"${3:-sshd}\"\n        if [ -z \"$IP\" ]; then\n            echo \"Usage: $0 ban <ip_address> [jail_name]\"\n            exit 1\n        fi\n        \n        echo \"Banning IP: $IP in jail: $JAIL\"\n        sudo fail2ban-client set $JAIL banip $IP\n        ;;\n        \n    \"whitelist\")\n        IP=\"${2}\"\n        if [ -z \"$IP\" ]; then\n            echo \"Usage: $0 whitelist <ip_address>\"\n            exit 1\n        fi\n        \n        echo \"Adding $IP to whitelist\"\n        sudo sed -i \"s/ignoreip = .*/& $IP/\" /etc/fail2ban/jail.local\n        sudo systemctl restart fail2ban\n        ;;\n        \n    \"logs\")\n        JAIL=\"${2:-sshd}\"\n        echo \"Recent bans for jail: $JAIL\"\n        sudo grep \"Ban\\|Unban\" /var/log/fail2ban.log | grep \"$JAIL\" | tail -20\n        ;;\n        \n    \"stats\")\n        echo \"=== Fail2Ban Statistics ===\"\n        echo \"Total bans today: $(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Ban \")\"\n        echo \"Total unbans today: $(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Unban \")\"\n        echo \"\"\n        echo \"Top banned IPs (last 1000 entries):\"\n        sudo tail -1000 /var/log/fail2ban.log | grep \"Ban \" | awk '{print $(NF-1)}' | sort | uniq -c | sort -nr | head -10\n        ;;\n        \n    \"test\")\n        JAIL=\"${2:-sshd}\"\n        LOG_FILE=\"${3:-/var/log/auth.log}\"\n        echo \"Testing filter for jail: $JAIL\"\n        echo \"Log file: $LOG_FILE\"\n        sudo fail2ban-regex $LOG_FILE /etc/fail2ban/filter.d/${JAIL}.conf\n        ;;\n        \n    \"reload\")\n        echo \"Reloading Fail2Ban configuration...\"\n        sudo fail2ban-client reload\n        echo \"Configuration reloaded\"\n        ;;\n        \n    *)\n        echo \"Fail2Ban Management Script\"\n        echo \"Usage: $0 {status|unban|ban|whitelist|logs|stats|test|reload}\"\n        echo \"\"\n        echo \"Examples:\"\n        echo \"  $0 status                    # Show status of all jails\"\n        echo \"  $0 unban 192.168.1.100      # Unban IP from all jails\"\n        echo \"  $0 ban 10.0.0.1 sshd        # Ban IP in specific jail\"\n        echo \"  $0 whitelist 192.168.1.50   # Add IP to whitelist\"\n        echo \"  $0 logs sshd                # Show recent logs for jail\"\n        echo \"  $0 stats                    # Show ban statistics\"\n        echo \"  $0 test sshd                # Test jail filter\"\n        echo \"  $0 reload                   # Reload configuration\"\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-manager.sh\n```\n\n### Security Monitoring\n```bash\n# Create comprehensive monitoring script\nsudo tee /usr/local/bin/fail2ban-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nMONITOR_LOG=\"/var/log/fail2ban-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${MONITOR_LOG}\n}\n\n# Check Fail2Ban service\nif systemctl is-active fail2ban >/dev/null 2>&1; then\n    log_message \"âœ“ Fail2Ban service is running\"\nelse\n    log_message \"âœ— Fail2Ban service is not running\"\n    exit 1\nfi\n\n# Check jail status\nACTIVE_JAILS=$(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g' | wc -w)\nlog_message \"â„¹ Active jails: ${ACTIVE_JAILS}\"\n\n# Check today's bans\nBANS_TODAY=$(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Ban \" 2>/dev/null || echo \"0\")\nUNBANS_TODAY=$(sudo grep \"$(date +'%Y-%m-%d')\" /var/log/fail2ban.log | grep -c \"Unban \" 2>/dev/null || echo \"0\")\nlog_message \"â„¹ Today's activity: ${BANS_TODAY} bans, ${UNBANS_TODAY} unbans\"\n\n# Check currently banned IPs\nTOTAL_BANNED=0\nfor jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n    JAIL_BANNED=$(sudo fail2ban-client status $jail | grep \"Currently banned:\" | awk '{print $3}')\n    TOTAL_BANNED=$((TOTAL_BANNED + JAIL_BANNED))\ndone\n\nlog_message \"â„¹ Currently banned IPs: ${TOTAL_BANNED}\"\n\n# Check for configuration errors\nif ! sudo fail2ban-client status >/dev/null 2>&1; then\n    log_message \"âš  Fail2Ban configuration errors detected\"\n    sudo fail2ban-client status 2>&1 | head -5 >> ${MONITOR_LOG}\nfi\n\n# Check log file accessibility\nfor jail in $(sudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g'); do\n    LOG_PATH=$(sudo fail2ban-client get $jail logpath 2>/dev/null)\n    if [ -n \"$LOG_PATH\" ] && [ ! -r \"$LOG_PATH\" ]; then\n        log_message \"âš  Cannot read log file for $jail: $LOG_PATH\"\n    fi\ndone\n\nlog_message \"Fail2Ban monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-monitor.sh\n\n# Schedule monitoring every 15 minutes\necho \"*/15 * * * * root /usr/local/bin/fail2ban-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n### Geographic Blocking Integration\n```bash\n# Install GeoIP for country-based blocking\nsudo apt install -y geoip-database geoip-bin  # Ubuntu/Debian\nsudo yum install -y GeoIP GeoIP-data          # RHEL/CentOS\n\n# Create geographic blocking filter\nsudo tee /etc/fail2ban/filter.d/geoip-block.conf > /dev/null <<EOF\n[Definition]\n# Block connections from specific countries\nfailregex = ^<HOST> -\nignoreregex =\n\n[Init]\n# Countries to block (ISO country codes)\ncountries = CN,RU,KP,IR\nEOF\n\n# Create action for geographic blocking\nsudo tee /etc/fail2ban/action.d/geoip-block.conf > /dev/null <<EOF\n[Definition]\nactioncheck = \nactionstart = \nactionstop = \nactionban = COUNTRY=$(geoiplookup <ip> | awk -F: '{print $2}' | awk '{print $1}'); if echo \"CN RU KP IR\" | grep -q \"$COUNTRY\"; then iptables -A f2b-<name> -s <ip> -j DROP; fi\nactionunban = iptables -D f2b-<name> -s <ip> -j DROP 2>/dev/null || true\n\n[Init]\nname = geoip-block\nEOF\n\n# Add geographic blocking jail\nsudo tee /etc/fail2ban/jail.d/geoip.conf > /dev/null <<EOF\n[geoip-block]\nenabled = false  # Enable if needed\nfilter = geoip-block\naction = geoip-block\nlogpath = /var/log/nginx/access.log\nmaxretry = 1\nbantime = 86400\nfindtime = 60\nEOF\n```\n\n## Integration Examples\n\n### Web Server Integration\n```bash\n# NGINX: Enable logging for Fail2Ban\nsudo tee -a /etc/nginx/nginx.conf > /dev/null <<EOF\n\nhttp {\n    # Log format for Fail2Ban\n    log_format fail2ban '\\$remote_addr - \\$remote_user [\\$time_local] '\n                       '\"\\$request\" \\$status \\$body_bytes_sent '\n                       '\"\\$http_referer\" \"\\$http_user_agent\"';\n    \n    # Enable access and error logging\n    access_log /var/log/nginx/access.log fail2ban;\n    error_log /var/log/nginx/error.log warn;\n}\nEOF\n\nsudo nginx -t && sudo systemctl reload nginx\n\n# Apache: Enable logging\nsudo tee -a /etc/apache2/apache2.conf > /dev/null <<EOF\n\n# Enhanced logging for Fail2Ban\nLogFormat \"%h %l %u %t \\\"%r\\\" %>s %O \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" fail2ban\nCustomLog \\${APACHE_LOG_DIR}/access.log fail2ban\nErrorLog \\${APACHE_LOG_DIR}/error.log\nLogLevel warn\nEOF\n\nsudo systemctl reload apache2\n```\n\n## Backup and Disaster Recovery\n\n### Configuration Backup\n```bash\nsudo tee /usr/local/bin/fail2ban-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/fail2ban\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\necho \"Starting Fail2Ban backup...\"\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/fail2ban-config-${DATE}.tar.gz \\\n    /etc/fail2ban/ \\\n    /var/lib/fail2ban/\n\n# Export current ban list\nsudo fail2ban-client status | grep \"Jail list:\" | sed -e 's/.*Jail list://' -e 's/,/ /g' > /tmp/jails.txt\nwhile read jail; do\n    sudo fail2ban-client status $jail | grep \"Banned IP list:\" > ${BACKUP_DIR}/banned-ips-${jail}-${DATE}.txt\ndone < /tmp/jails.txt\n\n# Keep last 30 backups\nfind ${BACKUP_DIR} -name \"fail2ban-*\" -type f -mtime +30 -delete\n\necho \"Fail2Ban backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-backup.sh\n\n# Schedule weekly backups\necho \"0 4 * * 0 root /usr/local/bin/fail2ban-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check Fail2Ban service status\nsudo systemctl status fail2ban\nsudo journalctl -u fail2ban -f\n\n# Check jail status\nsudo fail2ban-client status\nsudo fail2ban-client status sshd\n\n# Test filter patterns\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check banned IPs\nsudo fail2ban-client status sshd\nsudo iptables -L -n | grep f2b\n\n# View Fail2Ban logs\nsudo tail -f /var/log/fail2ban.log\n\n# Unban IP address\nsudo fail2ban-client set sshd unbanip 192.168.1.100\n\n# Ban IP manually\nsudo fail2ban-client set sshd banip 10.0.0.1\n\n# Reload configuration\nsudo fail2ban-client reload\n\n# Test SSH jail\nsudo grep \"Failed password\" /var/log/auth.log | head -5\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check iptables rules\nsudo iptables -L f2b-sshd -n\nsudo iptables -L INPUT -n | grep f2b\n\n# Debug mode\nsudo fail2ban-server -f -v\n\n# Configuration validation\nsudo fail2ban-client -t\n\n# Check log file permissions\nls -la /var/log/auth.log\nls -la /var/log/nginx/access.log\n\n# Monitor real-time bans\nsudo tail -f /var/log/fail2ban.log | grep \"Ban\\|Unban\"\n\n# Check jail configuration\nsudo fail2ban-client get sshd maxretry\nsudo fail2ban-client get sshd bantime\nsudo fail2ban-client get sshd findtime\n```\n\n## Additional Resources\n\n- [Fail2Ban Documentation](https://fail2ban.readthedocs.io/)\n- [Fail2Ban GitHub](https://github.com/fail2ban/fail2ban)\n- [Filter Configuration Guide](https://fail2ban.readthedocs.io/en/stable/filters.html)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"fail2ban-installation-guide\" class=\"mobile-header\">Fail2Ban Installation Guide</h1>\n<p class=\"mobile-paragraph\">Intrusion prevention software that protects servers from brute-force attacks by monitoring log files and automatically banning malicious IP addresses. Essential security tool for any public-facing server.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">iptables or firewalld</li>\n<li class=\"mobile-list-item\">Log files to monitor (SSH, web server, etc.)</li>\n<li class=\"mobile-list-item\">Python 3.6+ (usually pre-installed)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install Fail2Ban\nsudo apt install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban\nfail2ban-client version</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install Fail2Ban\nsudo yum install -y fail2ban fail2ban-systemd whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Fail2Ban\nsudo dnf install -y fail2ban whois\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nsudo systemctl status fail2ban</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create local jail configuration (never edit jail.conf directly)\nsudo tee /etc/fail2ban/jail.local &gt; /dev/null &lt;&lt;EOF\n# Fail2Ban Local Configuration\n\n[DEFAULT]\n# Ban settings\nbantime = 3600\nfindtime = 600\nmaxretry = 3\nbackend = auto\n\n# Notification settings\ndestemail = admin@example.com\nsender = fail2ban@example.com\nmta = sendmail\n\n# Actions\naction = %(action_mwl)s\n\n# Ignore IP addresses (whitelist)\nignoreip = 127.0.0.1/8 ::1 192.168.1.0/24 10.0.0.0/8\n\n# SSH protection\n[sshd]\nenabled = true\nport = ssh,2222\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\n\n# HTTP/HTTPS brute force protection\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nlogpath = /var/log/nginx/error.log\nmaxretry = 3\n\n[nginx-noscript]\nenabled = true\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 6\n\n[nginx-badbots]\nenabled = true\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n# Apache protection\n[apache-auth]\nenabled = false\nfilter = apache-auth\nlogpath = /var/log/apache2/error.log\nmaxretry = 3\n\n[apache-badbots]\nenabled = false\nfilter = apache-badbots\nlogpath = /var/log/apache2/access.log\nmaxretry = 2\n\n# Database protection\n[mysql]\nenabled = false\nfilter = mysql-auth\nlogpath = /var/log/mysql/error.log\nmaxretry = 3\nbantime = 7200\n\n[postgresql]\nenabled = false\nfilter = postgresql\nlogpath = /var/log/postgresql/postgresql-*-main.log\nmaxretry = 3\n\n# Mail server protection\n[postfix]\nenabled = false\nfilter = postfix\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n[dovecot]\nenabled = false\nfilter = dovecot\nlogpath = /var/log/mail.log\nmaxretry = 3\n\n# FTP protection\n[vsftpd]\nenabled = false\nfilter = vsftpd\nlogpath = /var/log/vsftpd.log\nmaxretry = 3\n\n# Custom application protection\n[custom-app]\nenabled = false\nfilter = custom-app\nlogpath = /var/log/myapp/error.log\nmaxretry = 5\nbantime = 1800\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-filters\" class=\"mobile-header\">Custom Filters</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create custom filter for web applications\nsudo tee /etc/fail2ban/filter.d/nginx-custom.conf &gt; /dev/null &lt;&lt;EOF\n# Custom NGINX filter for advanced protection\n\n[Definition]\nfailregex = \n    # Failed login attempts\n    ^&lt;HOST&gt; -.*POST.*(wp-login\\.php|login|signin|admin).*HTTP/[0-9\\.]+\\&quot; 200\n    # Directory traversal attempts\n    ^&lt;HOST&gt; -.*GET.*(\\.\\./|\\.\\.\\%2F).*HTTP/[0-9\\.]+\\&quot; 404\n    # SQL injection attempts  \n    ^&lt;HOST&gt; -.*GET.*(union|select|insert|cast|set|declare|drop|create|alter|delete|update|replace|truncate).*HTTP/[0-9\\.]+\\&quot; 200\n    # XSS attempts\n    ^&lt;HOST&gt; -.*GET.*(script|javascript|vbscript|onload|onerror|onclick).*HTTP/[0-9\\.]+\\&quot; 200\n    # Suspicious user agents\n    ^&lt;HOST&gt; -.*\\&quot;(.*sqlmap.*|.*nikto.*|.*nessus.*|.*openvas.*|.*python-requests.*|.*curl.*|.*wget.*)\\&quot;$\n    # Too many 404 errors\n    ^&lt;HOST&gt; -.*\\&quot; 404 \n\nignoreregex =\n    # Ignore legitimate requests\n    ^&lt;HOST&gt; -.*GET.*/favicon\\.ico.*HTTP/[0-9\\.]+\\&quot; 404\n    ^&lt;HOST&gt; -.*GET.*/robots\\.txt.*HTTP/[0-9\\.]+\\&quot; 404\nEOF\n\n# Create WordPress-specific filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = \n    # WordPress login failures\n    ^&lt;HOST&gt; -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\&quot; 200\n    # WordPress admin access attempts\n    ^&lt;HOST&gt; -.*GET.*/wp-admin.*HTTP/[0-9\\.]+\\&quot; 403\n    # XML-RPC attacks\n    ^&lt;HOST&gt; -.*POST.*/xmlrpc\\.php.*HTTP/[0-9\\.]+\\&quot; 200\n\nignoreregex =\n    # Ignore successful admin logins (adjust pattern as needed)\n    ^&lt;HOST&gt; -.*POST.*/wp-login\\.php.*HTTP/[0-9\\.]+\\&quot; 302\nEOF\n\n# Add WordPress jail to jail.local\nsudo tee -a /etc/fail2ban/jail.local &gt; /dev/null &lt;&lt;EOF\n\n[wordpress]\nenabled = true\nfilter = wordpress\nlogpath = /var/log/nginx/access.log\nport = http,https\nmaxretry = 3\nbantime = 1800\nfindtime = 600\nEOF\n\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create advanced fail2ban configuration with multiple actions\nsudo tee /etc/fail2ban/action.d/telegram.conf &gt; /dev/null &lt;&lt;EOF\n# Telegram notification action\n\n[Definition]\nactionstart = \nactionstop = \nactioncheck = \nactionban = curl -s &quot;https://api.telegram.org/bot&lt;bot_token&gt;/sendMessage&quot; -d &quot;chat_id=&lt;chat_id&gt;&amp;text=ðŸš« Fail2Ban: &lt;name&gt; banned &lt;ip&gt; for &lt;failures&gt; failures&quot;\nactionunban = curl -s &quot;https://api.telegram.org/bot&lt;bot_token&gt;/sendMessage&quot; -d &quot;chat_id=&lt;chat_id&gt;&amp;text=âœ… Fail2Ban: &lt;name&gt; unbanned &lt;ip&gt;&quot;\n\n[Init]\nbot_token = your_telegram_bot_token\nchat_id = your_telegram_chat_id\nEOF\n\n# Create comprehensive protection configuration\nsudo tee /etc/fail2ban/jail.d/comprehensive.conf &gt; /dev/null &lt;&lt;EOF\n# Comprehensive Security Configuration\n\n[DEFAULT]\n# Enhanced ban settings\nbantime.increment = true\nbantime.rndtime = 60\nbantime.maxtime = 86400\nbantime.factor = 2\nbantime.formula = ban.Time * (1&lt;&lt;(ban.Count if ban.Count&lt;20 else 20)) * banFactor\n\n# Multiple actions (ban + notify)\naction = %(action_mwl)s[dest=security@example.com]\n         telegram[bot_token=your_bot_token, chat_id=your_chat_id]\n\n[sshd-aggressive]\nenabled = true\nport = ssh\nfilter = sshd[mode=aggressive]\nlogpath = /var/log/auth.log\nmaxretry = 2\nbantime = 7200\nfindtime = 300\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\nbantime = 3600\n\n[nginx-noproxy]\nenabled = true\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nbantime = 86400\n\n# Protect against port scans\n[port-scan]\nenabled = true\nfilter = port-scan\nlogpath = /var/log/messages\nmaxretry = 1\nbantime = 86400\n\n# DNS amplification protection\n[named-refused]\nenabled = false\nfilter = named-refused\nlogpath = /var/log/messages\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-filters-for-applications\" class=\"mobile-header\">Custom Filters for Applications</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create filter for Node.js applications\nsudo tee /etc/fail2ban/filter.d/nodejs-auth.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^.*Authentication failed for.*from &lt;HOST&gt;.*$\n            ^.*Invalid login attempt.*IP: &lt;HOST&gt;.*$\n            ^.*Failed login.*remote_addr: &lt;HOST&gt;.*$\nignoreregex =\nEOF\n\n# Create filter for Grafana\nsudo tee /etc/fail2ban/filter.d/grafana.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^.*logger=context.*error=&quot;invalid username or password&quot;.*remote_addr=&lt;HOST&gt;\n            ^.*logger=context.*error=&quot;user not found&quot;.*remote_addr=&lt;HOST&gt;\nignoreregex =\nEOF\n\n# Create filter for GitLab\nsudo tee /etc/fail2ban/filter.d/gitlab.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^.*Failed Login:.*IP: &lt;HOST&gt;.*$\n            ^.*Rack_Attack.*Throttle.*IP: &lt;HOST&gt;.*$\nignoreregex =\nEOF\n\n# Add application-specific jails\nsudo tee /etc/fail2ban/jail.d/applications.conf &gt; /dev/null &lt;&lt;EOF\n[nodejs-auth]\nenabled = false\nfilter = nodejs-auth\nlogpath = /var/log/nodejs/app.log\nmaxretry = 5\nbantime = 1800\n\n[grafana]\nenabled = false\nfilter = grafana\nlogpath = /var/log/grafana/grafana.log\nmaxretry = 5\nbantime = 3600\n\n[gitlab]\nenabled = false\nfilter = gitlab\nlogpath = /var/log/gitlab/gitlab-rails/production.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-management\" class=\"mobile-header\">Monitoring and Management</h2>\n<h3 id=\"fail2ban-management-script\" class=\"mobile-header\">Fail2Ban Management Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/fail2ban-manager.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\ncase &quot;${1}&quot; in\n    &quot;status&quot;)\n        echo &quot;=== Fail2Ban Status ===&quot;\n        sudo fail2ban-client status\n        echo &quot;&quot;\n        echo &quot;=== Active Jails ===&quot;\n        for jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n            echo &quot;Jail: $jail&quot;\n            sudo fail2ban-client status $jail\n            echo &quot;&quot;\n        done\n        ;;\n        \n    &quot;unban&quot;)\n        IP=&quot;${2}&quot;\n        if [ -z &quot;$IP&quot; ]; then\n            echo &quot;Usage: $0 unban &lt;ip_address&gt;&quot;\n            exit 1\n        fi\n        \n        echo &quot;Unbanning IP: $IP from all jails&quot;\n        for jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n            sudo fail2ban-client set $jail unbanip $IP 2&gt;/dev/null &amp;&amp; echo &quot;  - Unbanned from $jail&quot;\n        done\n        ;;\n        \n    &quot;ban&quot;)\n        IP=&quot;${2}&quot;\n        JAIL=&quot;${3:-sshd}&quot;\n        if [ -z &quot;$IP&quot; ]; then\n            echo &quot;Usage: $0 ban &lt;ip_address&gt; [jail_name]&quot;\n            exit 1\n        fi\n        \n        echo &quot;Banning IP: $IP in jail: $JAIL&quot;\n        sudo fail2ban-client set $JAIL banip $IP\n        ;;\n        \n    &quot;whitelist&quot;)\n        IP=&quot;${2}&quot;\n        if [ -z &quot;$IP&quot; ]; then\n            echo &quot;Usage: $0 whitelist &lt;ip_address&gt;&quot;\n            exit 1\n        fi\n        \n        echo &quot;Adding $IP to whitelist&quot;\n        sudo sed -i &quot;s/ignoreip = .*/&amp; $IP/&quot; /etc/fail2ban/jail.local\n        sudo systemctl restart fail2ban\n        ;;\n        \n    &quot;logs&quot;)\n        JAIL=&quot;${2:-sshd}&quot;\n        echo &quot;Recent bans for jail: $JAIL&quot;\n        sudo grep &quot;Ban\\|Unban&quot; /var/log/fail2ban.log | grep &quot;$JAIL&quot; | tail -20\n        ;;\n        \n    &quot;stats&quot;)\n        echo &quot;=== Fail2Ban Statistics ===&quot;\n        echo &quot;Total bans today: $(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Ban &quot;)&quot;\n        echo &quot;Total unbans today: $(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Unban &quot;)&quot;\n        echo &quot;&quot;\n        echo &quot;Top banned IPs (last 1000 entries):&quot;\n        sudo tail -1000 /var/log/fail2ban.log | grep &quot;Ban &quot; | awk &#039;{print $(NF-1)}&#039; | sort | uniq -c | sort -nr | head -10\n        ;;\n        \n    &quot;test&quot;)\n        JAIL=&quot;${2:-sshd}&quot;\n        LOG_FILE=&quot;${3:-/var/log/auth.log}&quot;\n        echo &quot;Testing filter for jail: $JAIL&quot;\n        echo &quot;Log file: $LOG_FILE&quot;\n        sudo fail2ban-regex $LOG_FILE /etc/fail2ban/filter.d/${JAIL}.conf\n        ;;\n        \n    &quot;reload&quot;)\n        echo &quot;Reloading Fail2Ban configuration...&quot;\n        sudo fail2ban-client reload\n        echo &quot;Configuration reloaded&quot;\n        ;;\n        \n    *)\n        echo &quot;Fail2Ban Management Script&quot;\n        echo &quot;Usage: $0 {status|unban|ban|whitelist|logs|stats|test|reload}&quot;\n        echo &quot;&quot;\n        echo &quot;Examples:&quot;\n        echo &quot;  $0 status                    # Show status of all jails&quot;\n        echo &quot;  $0 unban 192.168.1.100      # Unban IP from all jails&quot;\n        echo &quot;  $0 ban 10.0.0.1 sshd        # Ban IP in specific jail&quot;\n        echo &quot;  $0 whitelist 192.168.1.50   # Add IP to whitelist&quot;\n        echo &quot;  $0 logs sshd                # Show recent logs for jail&quot;\n        echo &quot;  $0 stats                    # Show ban statistics&quot;\n        echo &quot;  $0 test sshd                # Test jail filter&quot;\n        echo &quot;  $0 reload                   # Reload configuration&quot;\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-manager.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-monitoring\" class=\"mobile-header\">Security Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive monitoring script\nsudo tee /usr/local/bin/fail2ban-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nMONITOR_LOG=&quot;/var/log/fail2ban-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${MONITOR_LOG}\n}\n\n# Check Fail2Ban service\nif systemctl is-active fail2ban &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ Fail2Ban service is running&quot;\nelse\n    log_message &quot;âœ— Fail2Ban service is not running&quot;\n    exit 1\nfi\n\n# Check jail status\nACTIVE_JAILS=$(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039; | wc -w)\nlog_message &quot;â„¹ Active jails: ${ACTIVE_JAILS}&quot;\n\n# Check today&#039;s bans\nBANS_TODAY=$(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Ban &quot; 2&gt;/dev/null || echo &quot;0&quot;)\nUNBANS_TODAY=$(sudo grep &quot;$(date +&#039;%Y-%m-%d&#039;)&quot; /var/log/fail2ban.log | grep -c &quot;Unban &quot; 2&gt;/dev/null || echo &quot;0&quot;)\nlog_message &quot;â„¹ Today&#039;s activity: ${BANS_TODAY} bans, ${UNBANS_TODAY} unbans&quot;\n\n# Check currently banned IPs\nTOTAL_BANNED=0\nfor jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n    JAIL_BANNED=$(sudo fail2ban-client status $jail | grep &quot;Currently banned:&quot; | awk &#039;{print $3}&#039;)\n    TOTAL_BANNED=$((TOTAL_BANNED + JAIL_BANNED))\ndone\n\nlog_message &quot;â„¹ Currently banned IPs: ${TOTAL_BANNED}&quot;\n\n# Check for configuration errors\nif ! sudo fail2ban-client status &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âš  Fail2Ban configuration errors detected&quot;\n    sudo fail2ban-client status 2&gt;&amp;1 | head -5 &gt;&gt; ${MONITOR_LOG}\nfi\n\n# Check log file accessibility\nfor jail in $(sudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039;); do\n    LOG_PATH=$(sudo fail2ban-client get $jail logpath 2&gt;/dev/null)\n    if [ -n &quot;$LOG_PATH&quot; ] &amp;&amp; [ ! -r &quot;$LOG_PATH&quot; ]; then\n        log_message &quot;âš  Cannot read log file for $jail: $LOG_PATH&quot;\n    fi\ndone\n\nlog_message &quot;Fail2Ban monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-monitor.sh\n\n# Schedule monitoring every 15 minutes\necho &quot;*/15 * * * * root /usr/local/bin/fail2ban-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"geographic-blocking-integration\" class=\"mobile-header\">Geographic Blocking Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install GeoIP for country-based blocking\nsudo apt install -y geoip-database geoip-bin  # Ubuntu/Debian\nsudo yum install -y GeoIP GeoIP-data          # RHEL/CentOS\n\n# Create geographic blocking filter\nsudo tee /etc/fail2ban/filter.d/geoip-block.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\n# Block connections from specific countries\nfailregex = ^&lt;HOST&gt; -\nignoreregex =\n\n[Init]\n# Countries to block (ISO country codes)\ncountries = CN,RU,KP,IR\nEOF\n\n# Create action for geographic blocking\nsudo tee /etc/fail2ban/action.d/geoip-block.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nactioncheck = \nactionstart = \nactionstop = \nactionban = COUNTRY=$(geoiplookup &lt;ip&gt; | awk -F: &#039;{print $2}&#039; | awk &#039;{print $1}&#039;); if echo &quot;CN RU KP IR&quot; | grep -q &quot;$COUNTRY&quot;; then iptables -A f2b-&lt;name&gt; -s &lt;ip&gt; -j DROP; fi\nactionunban = iptables -D f2b-&lt;name&gt; -s &lt;ip&gt; -j DROP 2&gt;/dev/null || true\n\n[Init]\nname = geoip-block\nEOF\n\n# Add geographic blocking jail\nsudo tee /etc/fail2ban/jail.d/geoip.conf &gt; /dev/null &lt;&lt;EOF\n[geoip-block]\nenabled = false  # Enable if needed\nfilter = geoip-block\naction = geoip-block\nlogpath = /var/log/nginx/access.log\nmaxretry = 1\nbantime = 86400\nfindtime = 60\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"web-server-integration\" class=\"mobile-header\">Web Server Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># NGINX: Enable logging for Fail2Ban\nsudo tee -a /etc/nginx/nginx.conf &gt; /dev/null &lt;&lt;EOF\n\nhttp {\n    # Log format for Fail2Ban\n    log_format fail2ban &#039;\\$remote_addr - \\$remote_user [\\$time_local] &#039;\n                       &#039;&quot;\\$request&quot; \\$status \\$body_bytes_sent &#039;\n                       &#039;&quot;\\$http_referer&quot; &quot;\\$http_user_agent&quot;&#039;;\n    \n    # Enable access and error logging\n    access_log /var/log/nginx/access.log fail2ban;\n    error_log /var/log/nginx/error.log warn;\n}\nEOF\n\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx\n\n# Apache: Enable logging\nsudo tee -a /etc/apache2/apache2.conf &gt; /dev/null &lt;&lt;EOF\n\n# Enhanced logging for Fail2Ban\nLogFormat &quot;%h %l %u %t \\&quot;%r\\&quot; %&gt;s %O \\&quot;%{Referer}i\\&quot; \\&quot;%{User-Agent}i\\&quot;&quot; fail2ban\nCustomLog \\${APACHE_LOG_DIR}/access.log fail2ban\nErrorLog \\${APACHE_LOG_DIR}/error.log\nLogLevel warn\nEOF\n\nsudo systemctl reload apache2</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"configuration-backup\" class=\"mobile-header\">Configuration Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/fail2ban-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/fail2ban&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\necho &quot;Starting Fail2Ban backup...&quot;\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/fail2ban-config-${DATE}.tar.gz \\\n    /etc/fail2ban/ \\\n    /var/lib/fail2ban/\n\n# Export current ban list\nsudo fail2ban-client status | grep &quot;Jail list:&quot; | sed -e &#039;s/.*Jail list://&#039; -e &#039;s/,/ /g&#039; &gt; /tmp/jails.txt\nwhile read jail; do\n    sudo fail2ban-client status $jail | grep &quot;Banned IP list:&quot; &gt; ${BACKUP_DIR}/banned-ips-${jail}-${DATE}.txt\ndone &lt; /tmp/jails.txt\n\n# Keep last 30 backups\nfind ${BACKUP_DIR} -name &quot;fail2ban-*&quot; -type f -mtime +30 -delete\n\necho &quot;Fail2Ban backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/fail2ban-backup.sh\n\n# Schedule weekly backups\necho &quot;0 4 * * 0 root /usr/local/bin/fail2ban-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Fail2Ban service status\nsudo systemctl status fail2ban\nsudo journalctl -u fail2ban -f\n\n# Check jail status\nsudo fail2ban-client status\nsudo fail2ban-client status sshd\n\n# Test filter patterns\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check banned IPs\nsudo fail2ban-client status sshd\nsudo iptables -L -n | grep f2b\n\n# View Fail2Ban logs\nsudo tail -f /var/log/fail2ban.log\n\n# Unban IP address\nsudo fail2ban-client set sshd unbanip 192.168.1.100\n\n# Ban IP manually\nsudo fail2ban-client set sshd banip 10.0.0.1\n\n# Reload configuration\nsudo fail2ban-client reload\n\n# Test SSH jail\nsudo grep &quot;Failed password&quot; /var/log/auth.log | head -5\nsudo fail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check iptables rules\nsudo iptables -L f2b-sshd -n\nsudo iptables -L INPUT -n | grep f2b\n\n# Debug mode\nsudo fail2ban-server -f -v\n\n# Configuration validation\nsudo fail2ban-client -t\n\n# Check log file permissions\nls -la /var/log/auth.log\nls -la /var/log/nginx/access.log\n\n# Monitor real-time bans\nsudo tail -f /var/log/fail2ban.log | grep &quot;Ban\\|Unban&quot;\n\n# Check jail configuration\nsudo fail2ban-client get sshd maxretry\nsudo fail2ban-client get sshd bantime\nsudo fail2ban-client get sshd findtime</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://fail2ban.readthedocs.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Fail2Ban Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/fail2ban/fail2ban\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Fail2Ban GitHub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://fail2ban.readthedocs.io/en/stable/filters.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Filter Configuration Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"12 min","wordCount":2249,"lastBuilt":"2025-09-14T03:45:50.261Z"},{"name":"keycloak","displayName":"Keycloak","slug":"keycloak","description":"Repo for keycloak","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/keycloak","updatedAt":"2025-09-08T03:10:05Z","createdAt":"2025-09-08T03:09:55Z","readmeRaw":"## ðŸ‘‹ Welcome to keycloak ðŸš€  \n\nkeycloak README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-keycloak\" class=\"mobile-header\">ðŸ‘‹ Welcome to keycloak ðŸš€  </h2>\n<p class=\"mobile-paragraph\">keycloak README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T03:46:02.159Z"},{"name":"openvpn","displayName":"Openvpn","slug":"openvpn","description":"Repo for openvpn","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/openvpn","updatedAt":"2025-09-08T03:13:07Z","createdAt":"2025-09-08T03:12:57Z","readmeRaw":"## ðŸ‘‹ Welcome to openvpn ðŸš€  \n\nopenvpn README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-openvpn\" class=\"mobile-header\">ðŸ‘‹ Welcome to openvpn ðŸš€  </h2>\n<p class=\"mobile-paragraph\">openvpn README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T03:45:59.027Z"}]},"__N_SSG":true}