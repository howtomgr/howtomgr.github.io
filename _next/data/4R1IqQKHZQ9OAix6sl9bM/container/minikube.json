{"pageProps":{"guide":{"name":"minikube","displayName":"Minikube","slug":"minikube","description":"Repo for minikube","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/minikube","updatedAt":"2025-09-08T03:11:25Z","createdAt":"2025-09-08T03:11:15Z","readmeRaw":"## ðŸ‘‹ Welcome to minikube ðŸš€  \n\nminikube README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-minikube\" class=\"mobile-header\">ðŸ‘‹ Welcome to minikube ðŸš€  </h2>\n<p class=\"mobile-paragraph\">minikube README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T03:46:00.660Z"},"category":{"key":"container","name":"Containers","description":"Container platforms and orchestration","icon":"ðŸ“¦","color":"#bd93f9","keywords":["docker","kubernetes","k3s","portainer","rancher","minikube"]},"relatedGuides":[{"name":"docker","displayName":"Docker","slug":"docker","description":"Repo for docker","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/docker","updatedAt":"2025-09-14T01:29:53Z","createdAt":"2023-08-28T03:47:37Z","readmeRaw":"# Docker Installation Guide\n\nDocker is a free and open-source containerization platform that enables developers to package applications and their dependencies into portable containers. Originally developed by Solomon Hykes at dotCloud, Docker revolutionized application deployment by providing OS-level virtualization. It serves as a FOSS alternative to proprietary virtualization solutions like VMware vSphere, Microsoft Hyper-V containers, or commercial container platforms, offering comparable functionality with features like image layering, container orchestration, and resource isolation.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 64-bit processor with virtualization support (Intel VT-x/AMD-V)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 20GB minimum (50GB+ recommended, SSD preferred)\n  - BIOS: Virtualization must be enabled\n- **Operating System**: \n  - Linux: Kernel 3.10+ with cgroups and namespaces support\n  - macOS: 10.15+ (Catalina or newer)\n  - Windows: Windows 10 64-bit Pro/Enterprise/Education (Build 19041+)\n- **Network Requirements**:\n  - Internet connection for pulling images\n  - Port 2375 (unencrypted) or 2376 (TLS) for Docker API\n  - Port 2377 for Swarm mode cluster management\n  - Port 7946 TCP/UDP for container network discovery\n  - Port 4789 UDP for overlay network traffic\n- **Dependencies**:\n  - iptables 1.4+ (Linux)\n  - Git (for building images)\n  - systemd or compatible init system (Linux)\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Remove old versions\nsudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-engine\n\n# Install required packages\nsudo yum install -y yum-utils\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker Engine\nsudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Verify installation\nsudo docker run hello-world\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt-get update\n\n# Install prerequisites\nsudo apt-get install -y \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n# Add Docker's official GPG key\nsudo mkdir -m 0755 -p /etc/apt/keyrings\nwget -O docker.gpg https://download.docker.com/linux/ubuntu/gpg\nsudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg < docker.gpg\nrm docker.gpg\n\n# Add repository\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install Docker Engine\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n```\n\n### Arch Linux\n\n```bash\n# Install Docker from official repositories\nsudo pacman -S docker docker-compose docker-buildx\n\n# Optional: Install Docker documentation\nsudo pacman -S docker-docs\n\n# Enable and start Docker service\nsudo systemctl enable --now docker\n\n# For rootless Docker\nsudo pacman -S fuse-overlayfs slirp4netns\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n```\n\n### Alpine Linux\n\n```bash\n# Add community repository if not enabled\necho \"http://dl-cdn.alpinelinux.org/alpine/v$(cat /etc/alpine-release | cut -d'.' -f1,2)/community\" >> /etc/apk/repositories\n\n# Update package index\napk update\n\n# Install Docker\napk add docker docker-cli docker-compose\n\n# Add Docker to boot services\nrc-update add docker boot\n\n# Start Docker service\nservice docker start\n\n# Install docker-compose (Python version)\napk add py3-pip\npip3 install docker-compose\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y docker docker-compose docker-buildx\n\n# For latest version from official Docker repository\nsudo zypper addrepo https://download.docker.com/linux/suse/docker-ce.repo\nsudo zypper refresh\nsudo zypper install -y docker-ce docker-ce-cli containerd.io\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n\n# SLES specific\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y docker\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install --cask docker\n\n# Start Docker Desktop\nopen /Applications/Docker.app\n\n# Wait for Docker to start, then verify\ndocker --version\ndocker compose version\n\n# Alternative: Install Docker CLI only (without Desktop)\nbrew install docker docker-compose\n\n# For docker-machine (managing remote Docker hosts)\nbrew install docker-machine\n```\n\n### FreeBSD\n\n```bash\n# Install Docker from packages\npkg install docker docker-compose\n\n# Or from ports\ncd /usr/ports/sysutils/docker\nmake install clean\n\n# Enable Docker\necho 'docker_enable=\"YES\"' >> /etc/rc.conf\n\n# Load required kernel modules\nkldload linux64\nkldload fdescfs\n\n# Start Docker\nservice docker start\n\n# Add user to docker group\npw groupmod docker -m $USER\n```\n\n### Windows\n\n```powershell\n# Enable WSL2 (required for Docker Desktop)\nwsl --install\n\n# Enable required Windows features\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n# Download and install Docker Desktop\n# Visit: https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe\n\n# Or use Chocolatey\nchoco install docker-desktop\n\n# Or use winget\nwinget install Docker.DockerDesktop\n\n# Start Docker Desktop from Start Menu\n# Verify installation in PowerShell\ndocker --version\ndocker compose version\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Configure Docker daemon**:\n```bash\n# Create daemon configuration directory\nsudo mkdir -p /etc/docker\n\n# Create daemon.json with optimized settings\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\"\n  },\n  \"storage-driver\": \"overlay2\",\n  \"live-restore\": true,\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    }\n  }\n}\nEOF\n\n# Restart Docker to apply changes\nsudo systemctl restart docker\n```\n\n2. **Configure user permissions**:\n```bash\n# Add current user to docker group (Linux)\nsudo usermod -aG docker $USER\n\n# Apply group changes (logout/login or use newgrp)\nnewgrp docker\n\n# Verify docker works without sudo\ndocker run hello-world\n```\n\n3. **Essential security settings**:\n```bash\n# Enable user namespace remapping for better isolation\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"userns-remap\": \"default\"\n}\nEOF\n\n# Create subuid/subgid entries\necho \"dockremap:100000:65536\" | sudo tee -a /etc/subuid\necho \"dockremap:100000:65536\" | sudo tee -a /etc/subgid\n\n# Restart Docker\nsudo systemctl restart docker\n```\n\n### Testing Initial Setup\n\n```bash\n# Check Docker version\ndocker version\n\n# View system information\ndocker info\n\n# Test container creation\ndocker run --rm alpine echo \"Docker is working!\"\n\n# Test networking\ndocker run --rm alpine ping -c 3 google.com\n\n# Test volume mounting\ndocker run --rm -v /tmp:/host alpine ls /host\n```\n\n**WARNING:** Never expose Docker daemon socket (2375/2376) to the internet without proper TLS authentication!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Docker to start on boot\nsudo systemctl enable docker\n\n# Start Docker service\nsudo systemctl start docker\n\n# Stop Docker service\nsudo systemctl stop docker\n\n# Restart Docker service\nsudo systemctl restart docker\n\n# Reload Docker configuration\nsudo systemctl reload docker\n\n# Check Docker status\nsudo systemctl status docker\n\n# View Docker logs\nsudo journalctl -u docker.service -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable Docker to start on boot\nrc-update add docker boot\n\n# Start Docker service\nrc-service docker start\n\n# Stop Docker service\nrc-service docker stop\n\n# Restart Docker service\nrc-service docker restart\n\n# Check Docker status\nrc-service docker status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'docker_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Docker\nservice docker start\n\n# Stop Docker\nservice docker stop\n\n# Restart Docker\nservice docker restart\n\n# Check status\nservice docker status\n```\n\n### launchd (macOS)\n\n```bash\n# Docker Desktop manages its own services\n# Control through the UI or command line\n\n# Stop Docker Desktop\nosascript -e 'quit app \"Docker\"'\n\n# Start Docker Desktop\nopen -a Docker\n\n# Check if Docker is running\ndocker system info >/dev/null 2>&1 && echo \"Docker is running\" || echo \"Docker is not running\"\n```\n\n### Windows Service Manager\n\n```powershell\n# Docker Desktop manages services automatically\n# For manual control:\n\n# Restart Docker Desktop\nStop-Process -Name \"Docker Desktop\" -Force\nStart-Process \"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe\"\n\n# Check Docker service status\nGet-Service -Name docker\n\n# Restart Docker service\nRestart-Service docker\n```\n\n## Advanced Configuration\n\n### Storage Driver Configuration\n\n```bash\n# Configure storage driver options\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"storage-driver\": \"overlay2\",\n  \"storage-opts\": [\n    \"overlay2.override_kernel_check=true\",\n    \"overlay2.size=20G\"\n  ],\n  \"data-root\": \"/var/lib/docker\"\n}\nEOF\n\n# For devicemapper (older systems)\n{\n  \"storage-driver\": \"devicemapper\",\n  \"storage-opts\": [\n    \"dm.thinpooldev=/dev/mapper/docker-thinpool\",\n    \"dm.use_deferred_removal=true\",\n    \"dm.use_deferred_deletion=true\"\n  ]\n}\n```\n\n### Network Configuration\n\n```bash\n# Configure default network settings\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"bip\": \"172.17.0.1/16\",\n  \"fixed-cidr\": \"172.17.0.0/16\",\n  \"default-address-pools\": [\n    {\n      \"base\": \"172.80.0.0/16\",\n      \"size\": 24\n    }\n  ],\n  \"dns\": [\"8.8.8.8\", \"8.8.4.4\"],\n  \"dns-search\": [\"example.com\"]\n}\nEOF\n\n# Enable IPv6 support\n{\n  \"ipv6\": true,\n  \"fixed-cidr-v6\": \"2001:db8::/64\"\n}\n```\n\n### Resource Limits\n\n```bash\n# Configure default container limits\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    },\n    \"nproc\": {\n      \"Name\": \"nproc\",\n      \"Hard\": 32000,\n      \"Soft\": 32000\n    }\n  },\n  \"default-runtime\": \"runc\",\n  \"runtimes\": {\n    \"nvidia\": {\n      \"path\": \"nvidia-container-runtime\",\n      \"runtimeArgs\": []\n    }\n  }\n}\nEOF\n```\n\n## Reverse Proxy Setup\n\n### nginx as Docker Registry Proxy\n\n```nginx\n# /etc/nginx/sites-available/docker-registry\nserver {\n    listen 443 ssl http2;\n    server_name registry.example.com;\n\n    ssl_certificate /etc/ssl/certs/registry.crt;\n    ssl_certificate_key /etc/ssl/private/registry.key;\n\n    # Docker Registry API\n    location /v2/ {\n        proxy_pass http://localhost:5000;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_read_timeout 900;\n        \n        # Required for docker client\n        chunked_transfer_encoding on;\n        client_max_body_size 0;\n    }\n}\n```\n\n### Apache as Docker Registry Proxy\n\n```apache\n# /etc/apache2/sites-available/docker-registry.conf\n<VirtualHost *:443>\n    ServerName registry.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/registry.crt\n    SSLCertificateKeyFile /etc/ssl/private/registry.key\n    \n    ProxyPreserveHost On\n    ProxyPass /v2 http://localhost:5000/v2\n    ProxyPassReverse /v2 http://localhost:5000/v2\n    \n    <Location /v2>\n        Order deny,allow\n        Allow from all\n        \n        # Authentication\n        AuthType Basic\n        AuthName \"Docker Registry\"\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    </Location>\n</VirtualHost>\n```\n\n### Caddy as Docker Registry Proxy\n\n```caddyfile\nregistry.example.com {\n    reverse_proxy localhost:5000 {\n        header_up Host {host}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    basicauth /v2/* {\n        admin $2a$14$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    }\n    \n    encode gzip\n}\n```\n\n### Traefik Configuration\n\n```yaml\n# docker-compose.yml for Traefik\nversion: '3.8'\n\nservices:\n  traefik:\n    image: traefik:v2.9\n    command:\n      - \"--api.insecure=true\"\n      - \"--providers.docker=true\"\n      - \"--entrypoints.websecure.address=:443\"\n    ports:\n      - \"443:443\"\n      - \"8080:8080\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./certs:/certs\n\n  registry:\n    image: registry:2\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.registry.rule=Host(`registry.example.com`)\"\n      - \"traefik.http.routers.registry.entrypoints=websecure\"\n      - \"traefik.http.routers.registry.tls=true\"\n```\n\n## Security Configuration\n\n### Docker Daemon Security\n\n```bash\n# Enable TLS for Docker daemon\n# Generate CA private key\nopenssl genrsa -aes256 -out ca-key.pem 4096\n\n# Generate CA certificate\nopenssl req -new -x509 -days 3650 -key ca-key.pem -sha256 -out ca.pem\n\n# Generate server key\nopenssl genrsa -out server-key.pem 4096\n\n# Generate certificate signing request\nopenssl req -subj \"/CN=$HOST\" -sha256 -new -key server-key.pem -out server.csr\n\n# Generate server certificate\necho subjectAltName = DNS:$HOST,IP:127.0.0.1 >> extfile.cnf\necho extendedKeyUsage = serverAuth >> extfile.cnf\nopenssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem -extfile extfile.cnf\n\n# Configure Docker to use TLS\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"hosts\": [\"tcp://0.0.0.0:2376\"],\n  \"tls\": true,\n  \"tlsverify\": true,\n  \"tlscert\": \"/etc/docker/certs/server-cert.pem\",\n  \"tlskey\": \"/etc/docker/certs/server-key.pem\",\n  \"tlscacert\": \"/etc/docker/certs/ca.pem\"\n}\nEOF\n```\n\n### AppArmor/SELinux Configuration\n\n```bash\n# AppArmor (Debian/Ubuntu)\n# Check if AppArmor is enabled\nsudo aa-status\n\n# Docker containers use docker-default profile by default\n# Create custom profile\nsudo tee /etc/apparmor.d/docker-custom <<EOF\n#include <tunables/global>\n\nprofile docker-custom flags=(attach_disconnected,mediate_deleted) {\n  #include <abstractions/base>\n  \n  network,\n  capability,\n  \n  # Deny dangerous capabilities\n  deny capability dac_override,\n  deny capability setuid,\n  deny capability setgid,\n  \n  # File access\n  deny /proc/sys/** w,\n  deny /sys/** w,\n  \n  # Allow necessary access\n  /usr/bin/** ix,\n  /bin/** ix,\n  /lib/** r,\n}\nEOF\n\n# Load profile\nsudo apparmor_parser -r /etc/apparmor.d/docker-custom\n\n# SELinux (RHEL/CentOS)\n# Enable SELinux for containers\nsudo setsebool -P container_manage_cgroup true\n\n# Check Docker SELinux context\nps -eZ | grep dockerd\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\n# Docker manages its own iptables rules\n# To integrate with UFW:\nsudo tee -a /etc/ufw/after.rules <<EOF\n*filter\n:ufw-user-forward - [0:0]\n:DOCKER-USER - [0:0]\n-A DOCKER-USER -j ufw-user-forward\n-A DOCKER-USER -j RETURN -s 10.0.0.0/8\n-A DOCKER-USER -j RETURN -s 172.16.0.0/12\n-A DOCKER-USER -j RETURN -s 192.168.0.0/16\n-A DOCKER-USER -j DROP\nCOMMIT\nEOF\n\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\n# Add Docker zone\nsudo firewall-cmd --permanent --new-zone=docker\nsudo firewall-cmd --permanent --zone=docker --add-interface=docker0\nsudo firewall-cmd --permanent --zone=docker --add-port=2377/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/udp\nsudo firewall-cmd --permanent --zone=docker --add-port=4789/udp\nsudo firewall-cmd --reload\n\n# iptables (manual)\n# Allow Docker subnet\nsudo iptables -A INPUT -s 172.17.0.0/16 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on docker0 all\npass out on docker0 all\n```\n\n## Database Setup\n\nDocker doesn't require a database, but here's how to run databases in Docker:\n\n### PostgreSQL in Docker\n\n```bash\n# Create volume for persistent data\ndocker volume create postgres_data\n\n# Run PostgreSQL container\ndocker run -d \\\n  --name postgres \\\n  --restart unless-stopped \\\n  -e POSTGRES_PASSWORD=securepassword \\\n  -e POSTGRES_USER=myuser \\\n  -e POSTGRES_DB=mydb \\\n  -v postgres_data:/var/lib/postgresql/data \\\n  -p 5432:5432 \\\n  postgres:15-alpine\n\n# Connect to PostgreSQL\ndocker exec -it postgres psql -U myuser -d mydb\n```\n\n### MySQL in Docker\n\n```bash\n# Create volume for persistent data\ndocker volume create mysql_data\n\n# Run MySQL container\ndocker run -d \\\n  --name mysql \\\n  --restart unless-stopped \\\n  -e MYSQL_ROOT_PASSWORD=rootpassword \\\n  -e MYSQL_DATABASE=mydb \\\n  -e MYSQL_USER=myuser \\\n  -e MYSQL_PASSWORD=securepassword \\\n  -v mysql_data:/var/lib/mysql \\\n  -p 3306:3306 \\\n  mysql:8.0\n\n# Connect to MySQL\ndocker exec -it mysql mysql -u myuser -p\n```\n\n## Performance Optimization\n\n### Kernel Parameters\n\n```bash\n# Optimize kernel parameters for Docker\nsudo tee -a /etc/sysctl.conf <<EOF\n# Docker optimization\nvm.max_map_count=262144\nfs.file-max=2097152\nfs.inotify.max_user_watches=524288\nfs.inotify.max_user_instances=512\n\n# Network optimization\nnet.core.somaxconn=32768\nnet.ipv4.tcp_max_syn_backlog=8192\nnet.core.netdev_max_backlog=5000\nnet.ipv4.ip_local_port_range=1024 65535\n\n# Bridge settings\nnet.bridge.bridge-nf-call-iptables=1\nnet.bridge.bridge-nf-call-ip6tables=1\nnet.ipv4.ip_forward=1\nEOF\n\n# Apply settings\nsudo sysctl -p\n```\n\n### Storage Optimization\n\n```bash\n# Use dedicated disk for Docker\n# Format with XFS for better performance\nsudo mkfs.xfs /dev/sdb1\nsudo mkdir -p /var/lib/docker\nsudo mount /dev/sdb1 /var/lib/docker\n\n# Add to /etc/fstab\necho \"/dev/sdb1 /var/lib/docker xfs defaults,noatime 0 2\" | sudo tee -a /etc/fstab\n\n# Configure storage driver options\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"storage-driver\": \"overlay2\",\n  \"storage-opts\": [\n    \"overlay2.override_kernel_check=true\"\n  ],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\"\n  }\n}\nEOF\n```\n\n### Build Optimization\n\n```bash\n# Enable BuildKit for faster builds\nexport DOCKER_BUILDKIT=1\n\n# Configure BuildKit in daemon\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"features\": {\n    \"buildkit\": true\n  }\n}\nEOF\n\n# Use build cache mount\n# In Dockerfile:\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN --mount=type=cache,target=/var/cache/apk \\\n    apk add --no-cache git\n```\n\n## Monitoring\n\n### Docker Stats and Events\n\n```bash\n# Monitor container resource usage\ndocker stats\n\n# Stream Docker events\ndocker events\n\n# Monitor specific container\ndocker stats container_name\n\n# Export metrics in JSON\ndocker stats --no-stream --format json > stats.json\n\n# Monitor Docker daemon\nsudo journalctl -u docker.service -f\n```\n\n### cAdvisor Setup\n\n```bash\n# Run cAdvisor for container metrics\ndocker run -d \\\n  --name=cadvisor \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -v /:/rootfs:ro \\\n  -v /var/run:/var/run:ro \\\n  -v /sys:/sys:ro \\\n  -v /var/lib/docker/:/var/lib/docker:ro \\\n  -v /dev/disk/:/dev/disk:ro \\\n  --privileged \\\n  gcr.io/cadvisor/cadvisor:latest\n\n# Access metrics at http://localhost:8080\n```\n\n### Prometheus Integration\n\n```yaml\n# docker-compose.yml for monitoring stack\nversion: '3.8'\n\nservices:\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    ports:\n      - \"9090:9090\"\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n\n  node-exporter:\n    image: prom/node-exporter\n    ports:\n      - \"9100:9100\"\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n\nvolumes:\n  prometheus_data:\n```\n\n## Backup and Restore\n\n### Container Backup\n\n```bash\n#!/bin/bash\n# backup-docker.sh\n\nBACKUP_DIR=\"/backup/docker\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p $BACKUP_DIR/{images,volumes,configs}\n\n# Backup running containers\ndocker ps -q | while read container; do\n    name=$(docker inspect -f '{{.Name}}' $container | sed 's/\\///')\n    docker commit $container backup_$name:$DATE\n    docker save backup_$name:$DATE | gzip > $BACKUP_DIR/images/${name}_${DATE}.tar.gz\n    docker inspect $container > $BACKUP_DIR/configs/${name}_${DATE}.json\ndone\n\n# Backup volumes\ndocker volume ls -q | while read volume; do\n    docker run --rm \\\n        -v $volume:/data \\\n        -v $BACKUP_DIR/volumes:/backup \\\n        alpine tar czf /backup/${volume}_${DATE}.tar.gz -C /data .\ndone\n\n# Backup Docker daemon config\ncp /etc/docker/daemon.json $BACKUP_DIR/configs/daemon_${DATE}.json\n\necho \"Backup completed: $DATE\"\n```\n\n### Volume Backup\n\n```bash\n# Backup named volume\ndocker run --rm \\\n    -v myvolume:/source:ro \\\n    -v $(pwd):/backup \\\n    alpine tar czf /backup/myvolume.tar.gz -C /source .\n\n# Restore volume\ndocker run --rm \\\n    -v myvolume:/target \\\n    -v $(pwd):/backup \\\n    alpine tar xzf /backup/myvolume.tar.gz -C /target\n```\n\n### Registry Backup\n\n```bash\n# Backup Docker registry data\ndocker exec registry tar czf - /var/lib/registry | gzip > registry_backup_$(date +%Y%m%d).tar.gz\n\n# Backup registry config\ndocker exec registry cat /etc/docker/registry/config.yml > registry_config_backup.yml\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Cannot connect to Docker daemon**:\n```bash\n# Check if Docker is running\nsudo systemctl status docker\n\n# Check Docker socket permissions\nls -la /var/run/docker.sock\n\n# Check if user is in docker group\ngroups $USER\n\n# Start Docker if not running\nsudo systemctl start docker\n```\n\n2. **Container networking issues**:\n```bash\n# Check Docker networks\ndocker network ls\n\n# Inspect bridge network\ndocker network inspect bridge\n\n# Check iptables rules\nsudo iptables -L -n -v\n\n# Reset Docker networking\nsudo systemctl stop docker\nsudo ip link delete docker0\nsudo systemctl start docker\n```\n\n3. **Storage space issues**:\n```bash\n# Check disk usage\ndocker system df\n\n# Clean up unused resources\ndocker system prune -a --volumes\n\n# Check Docker root directory\ndf -h /var/lib/docker\n\n# Find large containers/images\ndocker ps -s\ndocker images --format \"table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}\"\n```\n\n4. **Permission denied errors**:\n```bash\n# Fix socket permissions\nsudo chmod 666 /var/run/docker.sock\n\n# Fix user namespace issues\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Check SELinux/AppArmor\ngetenforce  # SELinux\nsudo aa-status  # AppArmor\n```\n\n### Debug Mode\n\n```bash\n# Run Docker in debug mode\nsudo dockerd --debug\n\n# Enable debug logging\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"debug\": true,\n  \"log-level\": \"debug\"\n}\nEOF\n\nsudo systemctl restart docker\n\n# Check debug logs\nsudo journalctl -u docker.service --no-pager\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum update docker-ce docker-ce-cli containerd.io\n\n# Debian/Ubuntu\nsudo apt-get update\nsudo apt-get upgrade docker-ce docker-ce-cli containerd.io\n\n# Arch Linux\nsudo pacman -Syu docker\n\n# Alpine Linux\napk update\napk upgrade docker\n\n# openSUSE\nsudo zypper update docker\n\n# FreeBSD\npkg update\npkg upgrade docker\n\n# Always restart after updates\nsudo systemctl restart docker\n```\n\n### Cleanup Tasks\n\n```bash\n#!/bin/bash\n# docker-cleanup.sh\n\necho \"Starting Docker cleanup...\"\n\n# Remove stopped containers\ndocker container prune -f\n\n# Remove unused images\ndocker image prune -a -f\n\n# Remove unused volumes\ndocker volume prune -f\n\n# Remove unused networks\ndocker network prune -f\n\n# Remove build cache\ndocker builder prune -f\n\n# Show disk usage after cleanup\ndocker system df\n\necho \"Cleanup completed\"\n```\n\n### Log Rotation\n\n```bash\n# Configure log rotation for containers\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\",\n    \"compress\": \"true\"\n  }\n}\nEOF\n\n# System-wide Docker logs rotation\nsudo tee /etc/logrotate.d/docker <<EOF\n/var/lib/docker/containers/*/*.log {\n    rotate 7\n    daily\n    compress\n    missingok\n    delaycompress\n    copytruncate\n}\nEOF\n```\n\n## Integration Examples\n\n### CI/CD Pipeline Integration\n\n```yaml\n# GitLab CI example\nstages:\n  - build\n  - test\n  - deploy\n\nvariables:\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: \"/certs\"\n\nbuild:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker build -t myapp:$CI_COMMIT_SHA .\n    - docker push myapp:$CI_COMMIT_SHA\n\n# Jenkins Pipeline example\npipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                script {\n                    docker.build(\"myapp:${env.BUILD_ID}\")\n                }\n            }\n        }\n    }\n}\n```\n\n### Kubernetes Integration\n\n```bash\n# Install CRI-Docker for Kubernetes\nCRI_VERSION=\"0.3.1\"\nwget https://github.com/Mirantis/cri-dockerd/releases/download/v${CRI_VERSION}/cri-dockerd-${CRI_VERSION}.amd64.tgz\ntar xzf cri-dockerd-${CRI_VERSION}.amd64.tgz\nsudo install -o root -g root -m 0755 cri-dockerd /usr/local/bin/cri-dockerd\nrm cri-dockerd-${CRI_VERSION}.amd64.tgz cri-dockerd\n\n# Create systemd service\nsudo tee /etc/systemd/system/cri-docker.service <<EOF\n[Unit]\nDescription=CRI Docker Interface\nAfter=network.target docker.service\nRequires=docker.service\n\n[Service]\nType=notify\nExecStart=/usr/local/bin/cri-dockerd --container-runtime-endpoint unix:///var/run/cri-dockerd.sock\nRestart=always\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now cri-docker\n```\n\n### Docker Compose Examples\n\n```yaml\n# Multi-tier application stack\nversion: '3.8'\n\nservices:\n  web:\n    build: ./web\n    ports:\n      - \"80:80\"\n    environment:\n      - DATABASE_URL=postgresql://user:pass@db:5432/mydb\n    depends_on:\n      - db\n    networks:\n      - frontend\n      - backend\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n      - POSTGRES_DB=mydb\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    networks:\n      - backend\n\n  redis:\n    image: redis:alpine\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db_data:\n```\n\n### SDK Integration\n\n```python\n# Python Docker SDK\nimport docker\n\nclient = docker.from_env()\n\n# Run container\ncontainer = client.containers.run(\n    \"alpine\",\n    \"echo hello world\",\n    detach=True\n)\n\n# List containers\nfor container in client.containers.list():\n    print(container.name)\n\n# Build image\nimage, logs = client.images.build(\n    path=\".\",\n    tag=\"myapp:latest\"\n)\n```\n\n```javascript\n// Node.js Docker SDK\nconst Docker = require('dockerode');\nconst docker = new Docker();\n\n// Run container\ndocker.createContainer({\n  Image: 'alpine',\n  Cmd: ['echo', 'hello world'],\n  name: 'mycontainer'\n}, (err, container) => {\n  if (!err) {\n    container.start();\n  }\n});\n\n// List containers\ndocker.listContainers((err, containers) => {\n  containers.forEach(containerInfo => {\n    console.log(containerInfo.Names);\n  });\n});\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.docker.com/)\n- [Docker Hub](https://hub.docker.com/)\n- [Docker GitHub Repository](https://github.com/docker)\n- [Docker Best Practices](https://docs.docker.com/develop/dev-best-practices/)\n- [Docker Security Documentation](https://docs.docker.com/engine/security/)\n- [Docker Compose Documentation](https://docs.docker.com/compose/)\n- [Docker Community Forums](https://forums.docker.com/)\n- [Play with Docker](https://labs.play-with-docker.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"docker-installation-guide\" class=\"mobile-header\">Docker Installation Guide</h1>\n<p class=\"mobile-paragraph\">Docker is a free and open-source containerization platform that enables developers to package applications and their dependencies into portable containers. Originally developed by Solomon Hykes at dotCloud, Docker revolutionized application deployment by providing OS-level virtualization. It serves as a FOSS alternative to proprietary virtualization solutions like VMware vSphere, Microsoft Hyper-V containers, or commercial container platforms, offering comparable functionality with features like image layering, container orchestration, and resource isolation.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 64-bit processor with virtualization support (Intel VT-x/AMD-V)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 20GB minimum (50GB+ recommended, SSD preferred)</li>\n<li class=\"mobile-list-item\">BIOS: Virtualization must be enabled</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Kernel 3.10+ with cgroups and namespaces support</li>\n<li class=\"mobile-list-item\">macOS: 10.15+ (Catalina or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows 10 64-bit Pro/Enterprise/Education (Build 19041+)</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Internet connection for pulling images</li>\n<li class=\"mobile-list-item\">Port 2375 (unencrypted) or 2376 (TLS) for Docker API</li>\n<li class=\"mobile-list-item\">Port 2377 for Swarm mode cluster management</li>\n<li class=\"mobile-list-item\">Port 7946 TCP/UDP for container network discovery</li>\n<li class=\"mobile-list-item\">Port 4789 UDP for overlay network traffic</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">iptables 1.4+ (Linux)</li>\n<li class=\"mobile-list-item\">Git (for building images)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Remove old versions\nsudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-engine\n\n# Install required packages\nsudo yum install -y yum-utils\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker Engine\nsudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Verify installation\nsudo docker run hello-world</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt-get update\n\n# Install prerequisites\nsudo apt-get install -y \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n# Add Docker&#039;s official GPG key\nsudo mkdir -m 0755 -p /etc/apt/keyrings\nwget -O docker.gpg https://download.docker.com/linux/ubuntu/gpg\nsudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg &lt; docker.gpg\nrm docker.gpg\n\n# Add repository\necho \\\n  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Install Docker Engine\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker from official repositories\nsudo pacman -S docker docker-compose docker-buildx\n\n# Optional: Install Docker documentation\nsudo pacman -S docker-docs\n\n# Enable and start Docker service\nsudo systemctl enable --now docker\n\n# For rootless Docker\nsudo pacman -S fuse-overlayfs slirp4netns\n\n# Add user to docker group\nsudo usermod -aG docker $USER</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add community repository if not enabled\necho &quot;http://dl-cdn.alpinelinux.org/alpine/v$(cat /etc/alpine-release | cut -d&#039;.&#039; -f1,2)/community&quot; &gt;&gt; /etc/apk/repositories\n\n# Update package index\napk update\n\n# Install Docker\napk add docker docker-cli docker-compose\n\n# Add Docker to boot services\nrc-update add docker boot\n\n# Start Docker service\nservice docker start\n\n# Install docker-compose (Python version)\napk add py3-pip\npip3 install docker-compose</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y docker docker-compose docker-buildx\n\n# For latest version from official Docker repository\nsudo zypper addrepo https://download.docker.com/linux/suse/docker-ce.repo\nsudo zypper refresh\nsudo zypper install -y docker-ce docker-ce-cli containerd.io\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n\n# SLES specific\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install --cask docker\n\n# Start Docker Desktop\nopen /Applications/Docker.app\n\n# Wait for Docker to start, then verify\ndocker --version\ndocker compose version\n\n# Alternative: Install Docker CLI only (without Desktop)\nbrew install docker docker-compose\n\n# For docker-machine (managing remote Docker hosts)\nbrew install docker-machine</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker from packages\npkg install docker docker-compose\n\n# Or from ports\ncd /usr/ports/sysutils/docker\nmake install clean\n\n# Enable Docker\necho &#039;docker_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Load required kernel modules\nkldload linux64\nkldload fdescfs\n\n# Start Docker\nservice docker start\n\n# Add user to docker group\npw groupmod docker -m $USER</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Enable WSL2 (required for Docker Desktop)\nwsl --install\n\n# Enable required Windows features\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n# Download and install Docker Desktop\n# Visit: https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe\n\n# Or use Chocolatey\nchoco install docker-desktop\n\n# Or use winget\nwinget install Docker.DockerDesktop\n\n# Start Docker Desktop from Start Menu\n# Verify installation in PowerShell\ndocker --version\ndocker compose version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Configure Docker daemon</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create daemon configuration directory\nsudo mkdir -p /etc/docker\n\n# Create daemon.json with optimized settings\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: {\n    &quot;max-size&quot;: &quot;10m&quot;,\n    &quot;max-file&quot;: &quot;3&quot;\n  },\n  &quot;storage-driver&quot;: &quot;overlay2&quot;,\n  &quot;live-restore&quot;: true,\n  &quot;default-ulimits&quot;: {\n    &quot;nofile&quot;: {\n      &quot;Name&quot;: &quot;nofile&quot;,\n      &quot;Hard&quot;: 64000,\n      &quot;Soft&quot;: 64000\n    }\n  }\n}\nEOF\n\n# Restart Docker to apply changes\nsudo systemctl restart docker</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Configure user permissions</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add current user to docker group (Linux)\nsudo usermod -aG docker $USER\n\n# Apply group changes (logout/login or use newgrp)\nnewgrp docker\n\n# Verify docker works without sudo\ndocker run hello-world</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Essential security settings</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable user namespace remapping for better isolation\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;userns-remap&quot;: &quot;default&quot;\n}\nEOF\n\n# Create subuid/subgid entries\necho &quot;dockremap:100000:65536&quot; | sudo tee -a /etc/subuid\necho &quot;dockremap:100000:65536&quot; | sudo tee -a /etc/subgid\n\n# Restart Docker\nsudo systemctl restart docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Docker version\ndocker version\n\n# View system information\ndocker info\n\n# Test container creation\ndocker run --rm alpine echo &quot;Docker is working!&quot;\n\n# Test networking\ndocker run --rm alpine ping -c 3 google.com\n\n# Test volume mounting\ndocker run --rm -v /tmp:/host alpine ls /host</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Never expose Docker daemon socket (2375/2376) to the internet without proper TLS authentication!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Docker to start on boot\nsudo systemctl enable docker\n\n# Start Docker service\nsudo systemctl start docker\n\n# Stop Docker service\nsudo systemctl stop docker\n\n# Restart Docker service\nsudo systemctl restart docker\n\n# Reload Docker configuration\nsudo systemctl reload docker\n\n# Check Docker status\nsudo systemctl status docker\n\n# View Docker logs\nsudo journalctl -u docker.service -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Docker to start on boot\nrc-update add docker boot\n\n# Start Docker service\nrc-service docker start\n\n# Stop Docker service\nrc-service docker stop\n\n# Restart Docker service\nrc-service docker restart\n\n# Check Docker status\nrc-service docker status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;docker_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Docker\nservice docker start\n\n# Stop Docker\nservice docker stop\n\n# Restart Docker\nservice docker restart\n\n# Check status\nservice docker status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Docker Desktop manages its own services\n# Control through the UI or command line\n\n# Stop Docker Desktop\nosascript -e &#039;quit app &quot;Docker&quot;&#039;\n\n# Start Docker Desktop\nopen -a Docker\n\n# Check if Docker is running\ndocker system info &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo &quot;Docker is running&quot; || echo &quot;Docker is not running&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Docker Desktop manages services automatically\n# For manual control:\n\n# Restart Docker Desktop\nStop-Process -Name &quot;Docker Desktop&quot; -Force\nStart-Process &quot;C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe&quot;\n\n# Check Docker service status\nGet-Service -Name docker\n\n# Restart Docker service\nRestart-Service docker</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"storage-driver-configuration\" class=\"mobile-header\">Storage Driver Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure storage driver options\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;storage-driver&quot;: &quot;overlay2&quot;,\n  &quot;storage-opts&quot;: [\n    &quot;overlay2.override_kernel_check=true&quot;,\n    &quot;overlay2.size=20G&quot;\n  ],\n  &quot;data-root&quot;: &quot;/var/lib/docker&quot;\n}\nEOF\n\n# For devicemapper (older systems)\n{\n  &quot;storage-driver&quot;: &quot;devicemapper&quot;,\n  &quot;storage-opts&quot;: [\n    &quot;dm.thinpooldev=/dev/mapper/docker-thinpool&quot;,\n    &quot;dm.use_deferred_removal=true&quot;,\n    &quot;dm.use_deferred_deletion=true&quot;\n  ]\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-configuration\" class=\"mobile-header\">Network Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure default network settings\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;bip&quot;: &quot;172.17.0.1/16&quot;,\n  &quot;fixed-cidr&quot;: &quot;172.17.0.0/16&quot;,\n  &quot;default-address-pools&quot;: [\n    {\n      &quot;base&quot;: &quot;172.80.0.0/16&quot;,\n      &quot;size&quot;: 24\n    }\n  ],\n  &quot;dns&quot;: [&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;],\n  &quot;dns-search&quot;: [&quot;example.com&quot;]\n}\nEOF\n\n# Enable IPv6 support\n{\n  &quot;ipv6&quot;: true,\n  &quot;fixed-cidr-v6&quot;: &quot;2001:db8::/64&quot;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure default container limits\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;default-ulimits&quot;: {\n    &quot;nofile&quot;: {\n      &quot;Name&quot;: &quot;nofile&quot;,\n      &quot;Hard&quot;: 64000,\n      &quot;Soft&quot;: 64000\n    },\n    &quot;nproc&quot;: {\n      &quot;Name&quot;: &quot;nproc&quot;,\n      &quot;Hard&quot;: 32000,\n      &quot;Soft&quot;: 32000\n    }\n  },\n  &quot;default-runtime&quot;: &quot;runc&quot;,\n  &quot;runtimes&quot;: {\n    &quot;nvidia&quot;: {\n      &quot;path&quot;: &quot;nvidia-container-runtime&quot;,\n      &quot;runtimeArgs&quot;: []\n    }\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-as-docker-registry-proxy\" class=\"mobile-header\">nginx as Docker Registry Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/docker-registry\nserver {\n    listen 443 ssl http2;\n    server_name registry.example.com;\n\n    ssl_certificate /etc/ssl/certs/registry.crt;\n    ssl_certificate_key /etc/ssl/private/registry.key;\n\n    # Docker Registry API\n    location /v2/ {\n        proxy_pass http://localhost:5000;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_read_timeout 900;\n        \n        # Required for docker client\n        chunked_transfer_encoding on;\n        client_max_body_size 0;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-as-docker-registry-proxy\" class=\"mobile-header\">Apache as Docker Registry Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/docker-registry.conf\n&lt;VirtualHost *:443&gt;\n    ServerName registry.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/registry.crt\n    SSLCertificateKeyFile /etc/ssl/private/registry.key\n    \n    ProxyPreserveHost On\n    ProxyPass /v2 http://localhost:5000/v2\n    ProxyPassReverse /v2 http://localhost:5000/v2\n    \n    &lt;Location /v2&gt;\n        Order deny,allow\n        Allow from all\n        \n        # Authentication\n        AuthType Basic\n        AuthName &quot;Docker Registry&quot;\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    &lt;/Location&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-as-docker-registry-proxy\" class=\"mobile-header\">Caddy as Docker Registry Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"caddyfile\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddyfile</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddyfile\">registry.example.com {\n    reverse_proxy localhost:5000 {\n        header_up Host {host}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    basicauth /v2/* {\n        admin $2a$14$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    }\n    \n    encode gzip\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"traefik-configuration\" class=\"mobile-header\">Traefik Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml for Traefik\nversion: &#039;3.8&#039;\n\nservices:\n  traefik:\n    image: traefik:v2.9\n    command:\n      - &quot;--api.insecure=true&quot;\n      - &quot;--providers.docker=true&quot;\n      - &quot;--entrypoints.websecure.address=:443&quot;\n    ports:\n      - &quot;443:443&quot;\n      - &quot;8080:8080&quot;\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./certs:/certs\n\n  registry:\n    image: registry:2\n    labels:\n      - &quot;traefik.enable=true&quot;\n      - &quot;traefik.http.routers.registry.rule=Host(`registry.example.com`)&quot;\n      - &quot;traefik.http.routers.registry.entrypoints=websecure&quot;\n      - &quot;traefik.http.routers.registry.tls=true&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"docker-daemon-security\" class=\"mobile-header\">Docker Daemon Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable TLS for Docker daemon\n# Generate CA private key\nopenssl genrsa -aes256 -out ca-key.pem 4096\n\n# Generate CA certificate\nopenssl req -new -x509 -days 3650 -key ca-key.pem -sha256 -out ca.pem\n\n# Generate server key\nopenssl genrsa -out server-key.pem 4096\n\n# Generate certificate signing request\nopenssl req -subj &quot;/CN=$HOST&quot; -sha256 -new -key server-key.pem -out server.csr\n\n# Generate server certificate\necho subjectAltName = DNS:$HOST,IP:127.0.0.1 &gt;&gt; extfile.cnf\necho extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf\nopenssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem -extfile extfile.cnf\n\n# Configure Docker to use TLS\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;hosts&quot;: [&quot;tcp://0.0.0.0:2376&quot;],\n  &quot;tls&quot;: true,\n  &quot;tlsverify&quot;: true,\n  &quot;tlscert&quot;: &quot;/etc/docker/certs/server-cert.pem&quot;,\n  &quot;tlskey&quot;: &quot;/etc/docker/certs/server-key.pem&quot;,\n  &quot;tlscacert&quot;: &quot;/etc/docker/certs/ca.pem&quot;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"apparmorselinux-configuration\" class=\"mobile-header\">AppArmor/SELinux Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># AppArmor (Debian/Ubuntu)\n# Check if AppArmor is enabled\nsudo aa-status\n\n# Docker containers use docker-default profile by default\n# Create custom profile\nsudo tee /etc/apparmor.d/docker-custom &lt;&lt;EOF\n#include &lt;tunables/global&gt;\n\nprofile docker-custom flags=(attach_disconnected,mediate_deleted) {\n  #include &lt;abstractions/base&gt;\n  \n  network,\n  capability,\n  \n  # Deny dangerous capabilities\n  deny capability dac_override,\n  deny capability setuid,\n  deny capability setgid,\n  \n  # File access\n  deny /proc/sys/** w,\n  deny /sys/** w,\n  \n  # Allow necessary access\n  /usr/bin/** ix,\n  /bin/** ix,\n  /lib/** r,\n}\nEOF\n\n# Load profile\nsudo apparmor_parser -r /etc/apparmor.d/docker-custom\n\n# SELinux (RHEL/CentOS)\n# Enable SELinux for containers\nsudo setsebool -P container_manage_cgroup true\n\n# Check Docker SELinux context\nps -eZ | grep dockerd</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\n# Docker manages its own iptables rules\n# To integrate with UFW:\nsudo tee -a /etc/ufw/after.rules &lt;&lt;EOF\n*filter\n:ufw-user-forward - [0:0]\n:DOCKER-USER - [0:0]\n-A DOCKER-USER -j ufw-user-forward\n-A DOCKER-USER -j RETURN -s 10.0.0.0/8\n-A DOCKER-USER -j RETURN -s 172.16.0.0/12\n-A DOCKER-USER -j RETURN -s 192.168.0.0/16\n-A DOCKER-USER -j DROP\nCOMMIT\nEOF\n\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\n# Add Docker zone\nsudo firewall-cmd --permanent --new-zone=docker\nsudo firewall-cmd --permanent --zone=docker --add-interface=docker0\nsudo firewall-cmd --permanent --zone=docker --add-port=2377/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/udp\nsudo firewall-cmd --permanent --zone=docker --add-port=4789/udp\nsudo firewall-cmd --reload\n\n# iptables (manual)\n# Allow Docker subnet\nsudo iptables -A INPUT -s 172.17.0.0/16 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on docker0 all\npass out on docker0 all</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">Docker doesn't require a database, but here's how to run databases in Docker:</p>\n<h3 id=\"postgresql-in-docker\" class=\"mobile-header\">PostgreSQL in Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create volume for persistent data\ndocker volume create postgres_data\n\n# Run PostgreSQL container\ndocker run -d \\\n  --name postgres \\\n  --restart unless-stopped \\\n  -e POSTGRES_PASSWORD=securepassword \\\n  -e POSTGRES_USER=myuser \\\n  -e POSTGRES_DB=mydb \\\n  -v postgres_data:/var/lib/postgresql/data \\\n  -p 5432:5432 \\\n  postgres:15-alpine\n\n# Connect to PostgreSQL\ndocker exec -it postgres psql -U myuser -d mydb</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-in-docker\" class=\"mobile-header\">MySQL in Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create volume for persistent data\ndocker volume create mysql_data\n\n# Run MySQL container\ndocker run -d \\\n  --name mysql \\\n  --restart unless-stopped \\\n  -e MYSQL_ROOT_PASSWORD=rootpassword \\\n  -e MYSQL_DATABASE=mydb \\\n  -e MYSQL_USER=myuser \\\n  -e MYSQL_PASSWORD=securepassword \\\n  -v mysql_data:/var/lib/mysql \\\n  -p 3306:3306 \\\n  mysql:8.0\n\n# Connect to MySQL\ndocker exec -it mysql mysql -u myuser -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"kernel-parameters\" class=\"mobile-header\">Kernel Parameters</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize kernel parameters for Docker\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Docker optimization\nvm.max_map_count=262144\nfs.file-max=2097152\nfs.inotify.max_user_watches=524288\nfs.inotify.max_user_instances=512\n\n# Network optimization\nnet.core.somaxconn=32768\nnet.ipv4.tcp_max_syn_backlog=8192\nnet.core.netdev_max_backlog=5000\nnet.ipv4.ip_local_port_range=1024 65535\n\n# Bridge settings\nnet.bridge.bridge-nf-call-iptables=1\nnet.bridge.bridge-nf-call-ip6tables=1\nnet.ipv4.ip_forward=1\nEOF\n\n# Apply settings\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-optimization\" class=\"mobile-header\">Storage Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use dedicated disk for Docker\n# Format with XFS for better performance\nsudo mkfs.xfs /dev/sdb1\nsudo mkdir -p /var/lib/docker\nsudo mount /dev/sdb1 /var/lib/docker\n\n# Add to /etc/fstab\necho &quot;/dev/sdb1 /var/lib/docker xfs defaults,noatime 0 2&quot; | sudo tee -a /etc/fstab\n\n# Configure storage driver options\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;storage-driver&quot;: &quot;overlay2&quot;,\n  &quot;storage-opts&quot;: [\n    &quot;overlay2.override_kernel_check=true&quot;\n  ],\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: {\n    &quot;max-size&quot;: &quot;10m&quot;,\n    &quot;max-file&quot;: &quot;3&quot;\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"build-optimization\" class=\"mobile-header\">Build Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable BuildKit for faster builds\nexport DOCKER_BUILDKIT=1\n\n# Configure BuildKit in daemon\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;features&quot;: {\n    &quot;buildkit&quot;: true\n  }\n}\nEOF\n\n# Use build cache mount\n# In Dockerfile:\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN --mount=type=cache,target=/var/cache/apk \\\n    apk add --no-cache git</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"docker-stats-and-events\" class=\"mobile-header\">Docker Stats and Events</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor container resource usage\ndocker stats\n\n# Stream Docker events\ndocker events\n\n# Monitor specific container\ndocker stats container_name\n\n# Export metrics in JSON\ndocker stats --no-stream --format json &gt; stats.json\n\n# Monitor Docker daemon\nsudo journalctl -u docker.service -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"cadvisor-setup\" class=\"mobile-header\">cAdvisor Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run cAdvisor for container metrics\ndocker run -d \\\n  --name=cadvisor \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -v /:/rootfs:ro \\\n  -v /var/run:/var/run:ro \\\n  -v /sys:/sys:ro \\\n  -v /var/lib/docker/:/var/lib/docker:ro \\\n  -v /dev/disk/:/dev/disk:ro \\\n  --privileged \\\n  gcr.io/cadvisor/cadvisor:latest\n\n# Access metrics at http://localhost:8080</code></pre>\n      </div>\n    </div>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml for monitoring stack\nversion: &#039;3.8&#039;\n\nservices:\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    ports:\n      - &quot;9090:9090&quot;\n    command:\n      - &#039;--config.file=/etc/prometheus/prometheus.yml&#039;\n      - &#039;--storage.tsdb.path=/prometheus&#039;\n\n  node-exporter:\n    image: prom/node-exporter\n    ports:\n      - &quot;9100:9100&quot;\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n\nvolumes:\n  prometheus_data:</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"container-backup\" class=\"mobile-header\">Container Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-docker.sh\n\nBACKUP_DIR=&quot;/backup/docker&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p $BACKUP_DIR/{images,volumes,configs}\n\n# Backup running containers\ndocker ps -q | while read container; do\n    name=$(docker inspect -f &#039;{{.Name}}&#039; $container | sed &#039;s/\\///&#039;)\n    docker commit $container backup_$name:$DATE\n    docker save backup_$name:$DATE | gzip &gt; $BACKUP_DIR/images/${name}_${DATE}.tar.gz\n    docker inspect $container &gt; $BACKUP_DIR/configs/${name}_${DATE}.json\ndone\n\n# Backup volumes\ndocker volume ls -q | while read volume; do\n    docker run --rm \\\n        -v $volume:/data \\\n        -v $BACKUP_DIR/volumes:/backup \\\n        alpine tar czf /backup/${volume}_${DATE}.tar.gz -C /data .\ndone\n\n# Backup Docker daemon config\ncp /etc/docker/daemon.json $BACKUP_DIR/configs/daemon_${DATE}.json\n\necho &quot;Backup completed: $DATE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"volume-backup\" class=\"mobile-header\">Volume Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup named volume\ndocker run --rm \\\n    -v myvolume:/source:ro \\\n    -v $(pwd):/backup \\\n    alpine tar czf /backup/myvolume.tar.gz -C /source .\n\n# Restore volume\ndocker run --rm \\\n    -v myvolume:/target \\\n    -v $(pwd):/backup \\\n    alpine tar xzf /backup/myvolume.tar.gz -C /target</code></pre>\n      </div>\n    </div>\n<h3 id=\"registry-backup\" class=\"mobile-header\">Registry Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup Docker registry data\ndocker exec registry tar czf - /var/lib/registry | gzip &gt; registry_backup_$(date +%Y%m%d).tar.gz\n\n# Backup registry config\ndocker exec registry cat /etc/docker/registry/config.yml &gt; registry_config_backup.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Cannot connect to Docker daemon</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if Docker is running\nsudo systemctl status docker\n\n# Check Docker socket permissions\nls -la /var/run/docker.sock\n\n# Check if user is in docker group\ngroups $USER\n\n# Start Docker if not running\nsudo systemctl start docker</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Container networking issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Docker networks\ndocker network ls\n\n# Inspect bridge network\ndocker network inspect bridge\n\n# Check iptables rules\nsudo iptables -L -n -v\n\n# Reset Docker networking\nsudo systemctl stop docker\nsudo ip link delete docker0\nsudo systemctl start docker</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Storage space issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check disk usage\ndocker system df\n\n# Clean up unused resources\ndocker system prune -a --volumes\n\n# Check Docker root directory\ndf -h /var/lib/docker\n\n# Find large containers/images\ndocker ps -s\ndocker images --format &quot;table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Permission denied errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Fix socket permissions\nsudo chmod 666 /var/run/docker.sock\n\n# Fix user namespace issues\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Check SELinux/AppArmor\ngetenforce  # SELinux\nsudo aa-status  # AppArmor</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run Docker in debug mode\nsudo dockerd --debug\n\n# Enable debug logging\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;debug&quot;: true,\n  &quot;log-level&quot;: &quot;debug&quot;\n}\nEOF\n\nsudo systemctl restart docker\n\n# Check debug logs\nsudo journalctl -u docker.service --no-pager</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum update docker-ce docker-ce-cli containerd.io\n\n# Debian/Ubuntu\nsudo apt-get update\nsudo apt-get upgrade docker-ce docker-ce-cli containerd.io\n\n# Arch Linux\nsudo pacman -Syu docker\n\n# Alpine Linux\napk update\napk upgrade docker\n\n# openSUSE\nsudo zypper update docker\n\n# FreeBSD\npkg update\npkg upgrade docker\n\n# Always restart after updates\nsudo systemctl restart docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"cleanup-tasks\" class=\"mobile-header\">Cleanup Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# docker-cleanup.sh\n\necho &quot;Starting Docker cleanup...&quot;\n\n# Remove stopped containers\ndocker container prune -f\n\n# Remove unused images\ndocker image prune -a -f\n\n# Remove unused volumes\ndocker volume prune -f\n\n# Remove unused networks\ndocker network prune -f\n\n# Remove build cache\ndocker builder prune -f\n\n# Show disk usage after cleanup\ndocker system df\n\necho &quot;Cleanup completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-rotation\" class=\"mobile-header\">Log Rotation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation for containers\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: {\n    &quot;max-size&quot;: &quot;10m&quot;,\n    &quot;max-file&quot;: &quot;3&quot;,\n    &quot;compress&quot;: &quot;true&quot;\n  }\n}\nEOF\n\n# System-wide Docker logs rotation\nsudo tee /etc/logrotate.d/docker &lt;&lt;EOF\n/var/lib/docker/containers/*/*.log {\n    rotate 7\n    daily\n    compress\n    missingok\n    delaycompress\n    copytruncate\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"cicd-pipeline-integration\" class=\"mobile-header\">CI/CD Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># GitLab CI example\nstages:\n  - build\n  - test\n  - deploy\n\nvariables:\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: &quot;/certs&quot;\n\nbuild:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker build -t myapp:$CI_COMMIT_SHA .\n    - docker push myapp:$CI_COMMIT_SHA\n\n# Jenkins Pipeline example\npipeline {\n    agent any\n    stages {\n        stage(&#039;Build&#039;) {\n            steps {\n                script {\n                    docker.build(&quot;myapp:${env.BUILD_ID}&quot;)\n                }\n            }\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-integration\" class=\"mobile-header\">Kubernetes Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install CRI-Docker for Kubernetes\nCRI_VERSION=&quot;0.3.1&quot;\nwget https://github.com/Mirantis/cri-dockerd/releases/download/v${CRI_VERSION}/cri-dockerd-${CRI_VERSION}.amd64.tgz\ntar xzf cri-dockerd-${CRI_VERSION}.amd64.tgz\nsudo install -o root -g root -m 0755 cri-dockerd /usr/local/bin/cri-dockerd\nrm cri-dockerd-${CRI_VERSION}.amd64.tgz cri-dockerd\n\n# Create systemd service\nsudo tee /etc/systemd/system/cri-docker.service &lt;&lt;EOF\n[Unit]\nDescription=CRI Docker Interface\nAfter=network.target docker.service\nRequires=docker.service\n\n[Service]\nType=notify\nExecStart=/usr/local/bin/cri-dockerd --container-runtime-endpoint unix:///var/run/cri-dockerd.sock\nRestart=always\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now cri-docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-compose-examples\" class=\"mobile-header\">Docker Compose Examples</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Multi-tier application stack\nversion: &#039;3.8&#039;\n\nservices:\n  web:\n    build: ./web\n    ports:\n      - &quot;80:80&quot;\n    environment:\n      - DATABASE_URL=postgresql://user:pass@db:5432/mydb\n    depends_on:\n      - db\n    networks:\n      - frontend\n      - backend\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n      - POSTGRES_DB=mydb\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    networks:\n      - backend\n\n  redis:\n    image: redis:alpine\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db_data:</code></pre>\n      </div>\n    </div>\n<h3 id=\"sdk-integration\" class=\"mobile-header\">SDK Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Python Docker SDK\nimport docker\n\nclient = docker.from_env()\n\n# Run container\ncontainer = client.containers.run(\n    &quot;alpine&quot;,\n    &quot;echo hello world&quot;,\n    detach=True\n)\n\n# List containers\nfor container in client.containers.list():\n    print(container.name)\n\n# Build image\nimage, logs = client.images.build(\n    path=&quot;.&quot;,\n    tag=&quot;myapp:latest&quot;\n)</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Node.js Docker SDK\nconst Docker = require(&#039;dockerode&#039;);\nconst docker = new Docker();\n\n// Run container\ndocker.createContainer({\n  Image: &#039;alpine&#039;,\n  Cmd: [&#039;echo&#039;, &#039;hello world&#039;],\n  name: &#039;mycontainer&#039;\n}, (err, container) =&gt; {\n  if (!err) {\n    container.start();\n  }\n});\n\n// List containers\ndocker.listContainers((err, containers) =&gt; {\n  containers.forEach(containerInfo =&gt; {\n    console.log(containerInfo.Names);\n  });\n});</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Hub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/docker\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/develop/dev-best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/engine/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Security Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Compose Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forums.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Community Forums</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://labs.play-with-docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Play with Docker</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"17 min","wordCount":3265,"lastBuilt":"2025-09-14T03:45:50.541Z"},{"name":"k3s","displayName":"K3s","slug":"k3s","description":"Repo for k3s","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/k3s","updatedAt":"2025-09-08T03:09:53Z","createdAt":"2025-09-08T03:09:43Z","readmeRaw":"## ðŸ‘‹ Welcome to k3s ðŸš€  \n\nk3s README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-k3s\" class=\"mobile-header\">ðŸ‘‹ Welcome to k3s ðŸš€  </h2>\n<p class=\"mobile-paragraph\">k3s README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-14T03:46:02.525Z"},{"name":"kubernetes","displayName":"Kubernetes","slug":"kubernetes","description":"Repo for kubernetes","category":"container","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/kubernetes","updatedAt":"2025-09-14T03:45:25Z","createdAt":"2025-09-08T03:10:10Z","readmeRaw":"# Kubernetes Installation Guide\n\nKubernetes is a free and open-source container orchestration platform for automating deployment, scaling, and management of containerized applications. Originally developed by Google and now maintained by the Cloud Native Computing Foundation (CNCF), Kubernetes serves as the industry standard for container orchestration. It provides enterprise-grade security, scalability, and reliability for cloud-native applications, offering a robust alternative to proprietary solutions like AWS ECS, Azure Container Instances, or Google Cloud Run without vendor lock-in.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores for control plane, 1+ core for worker nodes\n  - RAM: 2GB+ per control plane node, 1GB+ per worker node\n  - Storage: 20GB+ available disk space per node (SSD recommended)\n  - Network: Stable connectivity between all nodes (1Gbps+ recommended)\n- **Operating System**: \n  - Linux: Any modern distribution with kernel 3.10+ (4.x+ recommended)\n  - Container runtime support (containerd, Docker, CRI-O)\n  - macOS: Docker Desktop with Kubernetes enabled (development only)\n  - Windows: Docker Desktop with Kubernetes enabled (development only)\n- **Network Requirements**:\n  - Unique hostname, MAC address, and product_uuid for every node\n  - Port 6443 (Kubernetes API server)\n  - Port 2379-2380 (etcd server client API)\n  - Port 10250 (kubelet API)\n  - Port 10259 (kube-scheduler)\n  - Port 10257 (kube-controller-manager)\n  - Port 30000-32767 (NodePort Services)\n- **Dependencies**:\n  - Container runtime (containerd recommended)\n  - systemd or compatible init system\n  - iptables (for network rules)\n  - ebtables and ethtool (for networking)\n- **System Access**: root or sudo privileges required\n- **Special Requirements**:\n  - Swap must be disabled on all nodes\n  - SELinux in permissive mode (for RHEL/CentOS)\n  - Firewall configured to allow cluster communication\n\n## System Preparation (All Distributions)\n\n### Disable Swap (Required)\n```bash\n# Disable swap immediately\nsudo swapoff -a\n\n# Disable swap permanently\nsudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n\n# Verify swap is disabled\nfree -h\nswapon --show\n```\n\n### Configure Kernel Modules\n```bash\n# Load required kernel modules\ncat <<EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# Configure sysctl parameters\ncat <<EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\nsudo sysctl --system\n```\n\n## Container Runtime Installation\n\n### containerd (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Update package list\nsudo apt-get update\n\n# Install dependencies\nsudo apt-get install -y ca-certificates curl gnupg lsb-release\n\n# Add Docker repository for containerd\nsudo mkdir -m 0755 -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install containerd\nsudo apt-get update\nsudo apt-get install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install prerequisites\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install containerd\nsudo yum install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n```\n\n#### Fedora\n```bash\n# Install containerd\nsudo dnf install -y containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd\n```\n\n#### Arch Linux\n```bash\n# Install containerd\nsudo pacman -Syu containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Enable and start containerd\nsudo systemctl enable --now containerd\n```\n\n## Kubernetes Installation\n\n### kubeadm, kubelet, kubectl Installation\n\n#### Ubuntu/Debian\n```bash\n# Update package index and install packages needed for apt to use HTTPS\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\n\n# Download and add the Kubernetes signing key\ncurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n# Add Kubernetes repository\necho 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n# Update package index and install Kubernetes components\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\n\n# Hold packages to prevent automatic updates\nsudo apt-mark hold kubelet kubeadm kubectl\n\n# Enable kubelet\nsudo systemctl enable --now kubelet\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux/Fedora\n```bash\n# Create Kubernetes repository\ncat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/\nenabled=1\ngpgcheck=1\ngpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\nexclude=kubelet kubeadm kubectl cri-tools kubernetes-cni\nEOF\n\n# Set SELinux to permissive mode (required for cluster communication)\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\n# Install Kubernetes components\nsudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n\n# Enable kubelet\nsudo systemctl enable --now kubelet\n```\n\n#### Arch Linux\n```bash\n# Install from AUR (using yay)\nyay -S kubeadm-bin kubelet-bin kubectl-bin\n\n# Or build from source\ngit clone https://aur.archlinux.org/kubectl-bin.git\ncd kubectl-bin && makepkg -si\n\n# Enable kubelet\nsudo systemctl enable --now kubelet\n```\n\n#### openSUSE/SLES\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper refresh\n\n# Add Kubernetes repository\nsudo rpm --import https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\necho 'baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/' | sudo tee /etc/zypp/repos.d/kubernetes.repo\n\n# Install Kubernetes components\nsudo zypper install -y kubelet kubeadm kubectl\n\n# SLES 15 (requires additional modules)\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y kubelet kubeadm kubectl\n\n# Enable kubelet\nsudo systemctl enable --now kubelet\n```\n\n#### Alpine Linux\n```bash\n# Install containerd first\napk add --no-cache containerd\n\n# Add community repository for Kubernetes\necho \"http://dl-cdn.alpinelinux.org/alpine/edge/community\" >> /etc/apk/repositories\napk update\n\n# Install Kubernetes components (if available)\napk add --no-cache kubectl\n\n# Or install from binary\nKUBE_VERSION=\"v1.29.0\"\ncurl -LO \"https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubectl\"\ncurl -LO \"https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubeadm\"\ncurl -LO \"https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubelet\"\n\nchmod +x kubectl kubeadm kubelet\nsudo mv kubectl kubeadm kubelet /usr/local/bin/\n\n# Configure OpenRC service\nsudo tee /etc/init.d/kubelet > /dev/null <<'EOF'\n#!/sbin/openrc-run\nname=\"kubelet\"\ncommand=\"/usr/local/bin/kubelet\"\ncommand_args=\"--config=/var/lib/kubelet/config.yaml --kubeconfig=/etc/kubernetes/kubelet.conf\"\npidfile=\"/var/run/kubelet.pid\"\ncommand_background=\"yes\"\ndepend() {\n    need net\n    after containerd\n}\nEOF\n\nsudo chmod +x /etc/init.d/kubelet\nsudo rc-update add kubelet default\n```\n\n#### macOS (Development Only)\n```bash\n# Install Docker Desktop\n# Download from: https://www.docker.com/products/docker-desktop\n\n# Enable Kubernetes in Docker Desktop\n# Docker Desktop â†’ Preferences â†’ Kubernetes â†’ Enable Kubernetes\n\n# Install kubectl via Homebrew\nbrew install kubectl\n\n# Alternative: Install kubectl directly\ncurl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl\"\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin/\n\n# Verify installation\nkubectl version --client\nkubectl cluster-info\n\n# Configure kubectl context\nkubectl config use-context docker-desktop\n```\n\n#### FreeBSD\n```bash\n# Install from ports\ncd /usr/ports/sysutils/kubectl && make install clean\n\n# Or install from packages\npkg install kubectl\n\n# Note: Full Kubernetes cluster on FreeBSD requires manual compilation\n# For development, use kubectl to connect to remote clusters\n\n# Install container runtime (if needed)\npkg install containerd\n\n# Configure kubectl for remote cluster access\nmkdir -p ~/.kube\n# Copy kubeconfig from Linux cluster to ~/.kube/config\n```\n\n#### Windows (Development Only)\n```powershell\n# Method 1: Install Docker Desktop\n# Download from: https://www.docker.com/products/docker-desktop\n# Enable Kubernetes in Docker Desktop settings\n\n# Method 2: Install using Chocolatey\nchoco install kubernetes-cli\n\n# Method 3: Install using Scoop\nscoop install kubectl\n\n# Method 4: Manual installation\n# Download from https://dl.k8s.io/release/v1.29.0/bin/windows/amd64/kubectl.exe\n# Add to PATH environment variable\n\n# Enable Kubernetes in Docker Desktop\n# Docker Desktop â†’ Settings â†’ Kubernetes â†’ Enable Kubernetes\n\n# Verify installation\nkubectl version --client\nkubectl cluster-info\n\n# Configure PowerShell completion (optional)\nkubectl completion powershell | Out-String | Invoke-Expression\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Verify system requirements**:\n```bash\n# Check if swap is disabled\nfree -h\nswapon --show\n\n# Verify required ports are available\nsudo ss -tlnp | grep -E ':(6443|2379|2380|10250|10259|10257)'\n\n# Check container runtime\nsudo systemctl status containerd\n```\n\n2. **Configure container runtime**:\n```bash\n# Default containerd configuration directory\nsudo mkdir -p /etc/containerd\n\n# Generate default configuration\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup for better resource management\nsudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml\n\n# Restart containerd with new configuration\nsudo systemctl restart containerd\n```\n\n3. **Initialize cluster networking**:\n```bash\n# Load required kernel modules\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# Configure sysctl for networking\necho 'net.bridge.bridge-nf-call-iptables=1' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.ip_forward=1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n4. **Set up kubelet configuration**:\n```bash\n# Create kubelet configuration directory\nsudo mkdir -p /var/lib/kubelet\n\n# Set kubelet to automatically restart\nsudo systemctl enable kubelet\n```\n\n### Testing Initial Setup\n\n```bash\n# Verify container runtime is working\nsudo crictl version\nsudo crictl info\n\n# Check if kubelet is ready\nsudo systemctl status kubelet\n\n# Verify kernel modules are loaded\nlsmod | grep -E 'overlay|br_netfilter'\n\n# Test container runtime with a simple container\nsudo crictl pull k8s.gcr.io/pause:3.9\nsudo crictl images\n```\n\n**WARNING:** Ensure all prerequisite steps are completed before proceeding to cluster initialization!\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Kubernetes services to start on boot\nsudo systemctl enable kubelet\nsudo systemctl enable containerd\n\n# Start services\nsudo systemctl start containerd\nsudo systemctl start kubelet\n\n# Stop services\nsudo systemctl stop kubelet\nsudo systemctl stop containerd\n\n# Restart services\nsudo systemctl restart containerd\nsudo systemctl restart kubelet\n\n# Check service status\nsudo systemctl status kubelet\nsudo systemctl status containerd\n\n# View service logs\nsudo journalctl -u kubelet -f\nsudo journalctl -u containerd -f\n\n# Reload systemd daemon after config changes\nsudo systemctl daemon-reload\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable services to start on boot\nsudo rc-update add containerd default\nsudo rc-update add kubelet default\n\n# Start services\nsudo rc-service containerd start\nsudo rc-service kubelet start\n\n# Stop services\nsudo rc-service kubelet stop\nsudo rc-service containerd stop\n\n# Restart services\nsudo rc-service containerd restart\nsudo rc-service kubelet restart\n\n# Check service status\nsudo rc-service kubelet status\nsudo rc-service containerd status\n\n# View logs\nsudo tail -f /var/log/kubelet.log\n```\n\n### launchd (macOS with Docker Desktop)\n\n```bash\n# Docker Desktop manages Kubernetes services automatically\n# Use Docker Desktop interface to start/stop Kubernetes\n\n# Check Kubernetes status\nkubectl cluster-info\n\n# Restart Kubernetes through Docker Desktop\n# Docker Desktop â†’ Preferences â†’ Kubernetes â†’ Reset Kubernetes Cluster\n\n# View logs through Docker Desktop\n# Docker Desktop â†’ Troubleshoot â†’ Clean / Purge data\n```\n\n### Windows Service Manager\n\n```powershell\n# Docker Desktop manages Kubernetes services on Windows\n# Use Docker Desktop interface for management\n\n# Check Kubernetes status\nkubectl cluster-info\n\n# Restart Docker Desktop service\nRestart-Service com.docker.service\n\n# View Docker Desktop logs\nGet-EventLog -LogName Application -Source \"Docker Desktop\"\n```\n\n## Cluster Initialization\n\n### Control Plane Setup (Master Node)\n```bash\n# Initialize cluster with security best practices\nsudo kubeadm init \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --service-cidr=10.96.0.0/12 \\\n  --apiserver-advertise-address=$(hostname -I | awk '{print $1}') \\\n  --node-name=$(hostname) \\\n  --ignore-preflight-errors=NumCPU\n\n# Configure kubectl for regular user\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# Alternative: Root user configuration\nexport KUBECONFIG=/etc/kubernetes/admin.conf\necho 'export KUBECONFIG=/etc/kubernetes/admin.conf' >> ~/.bashrc\n\n# Verify control plane is running\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods --all-namespaces\n```\n\n### Network Plugin Installation\n\n#### Flannel (Simple, recommended for beginners)\n```bash\n# Install Flannel CNI\nkubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n\n# Verify Flannel pods are running\nkubectl get pods -n kube-flannel\n```\n\n#### Calico (Advanced networking and network policies)\n```bash\n# Install Calico CNI\nkubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml\n\n# Download and apply Calico custom resources\ncurl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O\nkubectl create -f custom-resources.yaml\n\n# Verify Calico is running\nkubectl get pods -n calico-system\n```\n\n#### Cilium (eBPF-based networking)\n```bash\n# Install Cilium CLI\nCILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)\nCLI_ARCH=amd64\nif [ \"$(uname -m)\" = \"aarch64\" ]; then CLI_ARCH=arm64; fi\ncurl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\nsha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum\nsudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin\nrm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\n\n# Install Cilium\ncilium install\n\n# Verify installation\ncilium status --wait\n```\n\n### Worker Node Setup\n```bash\n# On worker nodes, use the join command from control plane initialization\n# Example (replace with your actual token and hash):\nsudo kubeadm join 192.168.1.100:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234567890abcdef...\n\n# If you need to get the join command again:\n# On control plane:\nkubeadm token create --print-join-command\n\n# Verify nodes joined successfully\nkubectl get nodes -o wide\n```\n\n## Security Hardening (2024 Best Practices)\n\n### RBAC Configuration\n```bash\n# Create service account with limited permissions\nkubectl create serviceaccount developer-sa -n default\n\n# Create role with specific permissions\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: developer-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\", \"services\", \"configmaps\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"apps\"]\n  resources: [\"deployments\", \"replicasets\"]\n  verbs: [\"get\", \"list\", \"watch\", \"create\", \"update\", \"patch\", \"delete\"]\n- apiGroups: [\"\"]\n  resources: [\"pods/log\"]\n  verbs: [\"get\", \"list\"]\nEOF\n\n# Create role binding\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: developer-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: developer-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: developer-role\n  apiGroup: rbac.authorization.k8s.io\nEOF\n\n# Test RBAC configuration\nkubectl auth can-i create deployments --as=system:serviceaccount:default:developer-sa\n```\n\n### Pod Security Standards\n```bash\n# Enable Pod Security Standards (baseline level)\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: secure-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: baseline\n    pod-security.kubernetes.io/audit: baseline\n    pod-security.kubernetes.io/warn: baseline\nEOF\n\n# For restricted security (recommended for production)\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: restricted-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\nEOF\n\n# Example secure pod configuration\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secure-pod\n  namespace: restricted-namespace\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    runAsGroup: 3000\n    fsGroup: 2000\n    seccompProfile:\n      type: RuntimeDefault\n  containers:\n  - name: app\n    image: nginx:latest\n    securityContext:\n      allowPrivilegeEscalation: false\n      readOnlyRootFilesystem: true\n      capabilities:\n        drop:\n        - ALL\n    ports:\n    - containerPort: 80\n    volumeMounts:\n    - name: tmp-volume\n      mountPath: /tmp\n    - name: cache-volume\n      mountPath: /var/cache/nginx\n  volumes:\n  - name: tmp-volume\n    emptyDir: {}\n  - name: cache-volume\n    emptyDir: {}\nEOF\n```\n\n### Network Policies\n```bash\n# Default deny all network policy\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\nEOF\n\n# Allow specific communication\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-nginx-ingress\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: nginx\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    ports:\n    - protocol: TCP\n      port: 80\nEOF\n\n# Allow egress for DNS\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-dns-egress\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  - to: []\n    ports:\n    - protocol: UDP\n      port: 53\nEOF\n```\n\n### etcd Security\n```bash\n# Check etcd encryption at rest\nkubectl get secrets --all-namespaces -o json | kubectl replace -f-\n\n# Create encryption configuration\ncat <<EOF | sudo tee /etc/kubernetes/enc.yaml\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  - configmaps\n  - pandas.awesome.bears.example\n  providers:\n  - aescbc:\n      keys:\n      - name: key1\n        secret: $(head -c 32 /dev/urandom | base64)\n  - identity: {}\nEOF\n\n# Update kube-apiserver configuration\nsudo sed -i '/--encryption-provider-config=/d' /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i '/- kube-apiserver/a\\    - --encryption-provider-config=/etc/kubernetes/enc.yaml' /etc/kubernetes/manifests/kube-apiserver.yaml\n\n# Mount encryption config in kube-apiserver\nsudo sed -i '/volumeMounts:/a\\    - mountPath: /etc/kubernetes/enc.yaml\\n      name: encryption-config\\n      readOnly: true' /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i '/volumes:/a\\  - hostPath:\\n      path: /etc/kubernetes/enc.yaml\\n      type: FileOrCreate\\n    name: encryption-config' /etc/kubernetes/manifests/kube-apiserver.yaml\n```\n\n## Alternative Installation Methods\n\n### k3s (Lightweight Kubernetes)\n```bash\n# Install k3s on control plane\ncurl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644\n\n# Get node token for workers\nsudo cat /var/lib/rancher/k3s/server/node-token\n\n# Install on worker nodes\ncurl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\nsudo chown $(id -u):$(id -g) ~/.kube/config\nexport KUBECONFIG=~/.kube/config\n\n# Verify cluster\nkubectl get nodes\n```\n\n### k0s (Zero-deps Kubernetes)\n```bash\n# Download k0s\ncurl -sSLf https://get.k0s.sh | sudo sh\n\n# Initialize controller\nsudo k0s install controller --single\n\n# Start k0s\nsudo systemctl start k0scontroller\n\n# Generate worker join token\nsudo k0s token create --role=worker\n\n# On worker nodes:\nsudo k0s install worker --token-file /path/to/token/file\nsudo systemctl start k0sworker\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo k0s kubeconfig admin > ~/.kube/config\n```\n\n### MicroK8s (Ubuntu/Snap)\n```bash\n# Install MicroK8s\nsudo snap install microk8s --classic\n\n# Add user to microk8s group\nsudo usermod -a -G microk8s $USER\nsudo chown -f -R $USER ~/.kube\nnewgrp microk8s\n\n# Enable essential addons\nmicrok8s enable dns dashboard storage\n\n# Configure kubectl alias\necho 'alias kubectl=\"microk8s kubectl\"' >> ~/.bashrc\nsource ~/.bashrc\n\n# Get cluster info\nmicrok8s kubectl cluster-info\n```\n\n### Minikube (Development)\n```bash\n# Install minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Start cluster with specific configuration\nminikube start \\\n  --driver=containerd \\\n  --cpus=4 \\\n  --memory=8g \\\n  --disk-size=50g \\\n  --kubernetes-version=v1.29.0\n\n# Enable addons\nminikube addons enable dashboard\nminikube addons enable metrics-server\nminikube addons enable ingress\nminikube addons enable registry\n\n# Configure kubectl context\nkubectl config use-context minikube\n\n# Access dashboard\nminikube dashboard\n```\n\n## Essential Add-ons Installation\n\n### Metrics Server\n```bash\n# Install metrics-server for resource monitoring\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\n# For development clusters, may need to add --kubelet-insecure-tls\nkubectl patch deployment metrics-server -n kube-system --type='json' -p='[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/args/-\", \"value\": \"--kubelet-insecure-tls\"}]'\n\n# Verify metrics server\nkubectl top nodes\nkubectl top pods --all-namespaces\n```\n\n### Kubernetes Dashboard\n```bash\n# Install dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n# Create admin service account\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\nEOF\n\n# Get access token\nkubectl -n kubernetes-dashboard create token admin-user\n\n# Access dashboard\nkubectl proxy &\n# Visit: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/\n```\n\n### Ingress Controller (NGINX)\n```bash\n# Install NGINX Ingress Controller\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml\n\n# For bare metal installations\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/baremetal/deploy.yaml\n\n# Verify installation\nkubectl get pods -n ingress-nginx\nkubectl get svc -n ingress-nginx\n\n# Create sample ingress\ncat <<EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - example.com\n    secretName: example-tls\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: web-service\n            port:\n              number: 80\nEOF\n```\n\n## Reverse Proxy Setup\n\n### NGINX Ingress Controller Configuration\n\n```bash\n# Install NGINX Ingress Controller with custom configuration\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ingress-nginx\n---\napiVersion: helm.cattle.io/v1\nkind: HelmChart\nmetadata:\n  name: ingress-nginx\n  namespace: ingress-nginx\nspec:\n  chart: ingress-nginx\n  repo: https://kubernetes.github.io/ingress-nginx\n  targetNamespace: ingress-nginx\n  valuesContent: |-\n    controller:\n      replicaCount: 2\n      service:\n        type: LoadBalancer\n        externalTrafficPolicy: Local\n      config:\n        ssl-redirect: \"true\"\n        force-ssl-redirect: \"true\"\n        ssl-protocols: \"TLSv1.2 TLSv1.3\"\n        ssl-ciphers: \"ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384\"\n        client-body-buffer-size: \"64k\"\n        client-body-timeout: \"60\"\n        client-header-timeout: \"60\"\n        large-client-header-buffers: \"4 64k\"\n        proxy-body-size: \"50m\"\n        server-name-hash-bucket-size: \"128\"\n      metrics:\n        enabled: true\n        serviceMonitor:\n          enabled: true\nEOF\n```\n\n### Traefik Ingress Controller\n\n```bash\n# Install Traefik with custom configuration\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: traefik-system\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: traefik\n  namespace: argocd\nspec:\n  project: default\n  source:\n    chart: traefik\n    repoURL: https://traefik.github.io/charts\n    targetRevision: 21.1.0\n    helm:\n      values: |\n        deployment:\n          replicas: 2\n        service:\n          type: LoadBalancer\n        ingressRoute:\n          dashboard:\n            enabled: true\n        logs:\n          general:\n            level: INFO\n          access:\n            enabled: true\n        metrics:\n          prometheus:\n            enabled: true\n        certificatesResolvers:\n          letsencrypt:\n            acme:\n              email: admin@example.com\n              storage: /data/acme.json\n              httpChallenge:\n                entryPoint: web\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: traefik-system\nEOF\n```\n\n### HAProxy Load Balancer for API Server\n\n```bash\n# Install HAProxy for external load balancing\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: haproxy-config\n  namespace: kube-system\ndata:\n  haproxy.cfg: |\n    global\n        log stdout local0\n        daemon\n        \n    defaults\n        mode tcp\n        log global\n        option tcplog\n        timeout connect 5000ms\n        timeout client 50000ms\n        timeout server 50000ms\n        \n    frontend k8s-api-frontend\n        bind *:6443\n        mode tcp\n        default_backend k8s-api-backend\n        \n    backend k8s-api-backend\n        mode tcp\n        balance roundrobin\n        option tcp-check\n        server master1 10.0.1.10:6443 check\n        server master2 10.0.1.11:6443 check\n        server master3 10.0.1.12:6443 check\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: haproxy-lb\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app: haproxy-lb\n  template:\n    metadata:\n      labels:\n        app: haproxy-lb\n    spec:\n      hostNetwork: true\n      containers:\n      - name: haproxy\n        image: haproxy:2.8-alpine\n        ports:\n        - containerPort: 6443\n          hostPort: 6443\n        volumeMounts:\n        - name: haproxy-config\n          mountPath: /usr/local/etc/haproxy\n      volumes:\n      - name: haproxy-config\n        configMap:\n          name: haproxy-config\nEOF\n```\n\n## Database Setup\n\n### PostgreSQL StatefulSet with HA\n\n```bash\n# Deploy PostgreSQL cluster with replication\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: postgresql\n---\napiVersion: postgresql.cnpg.io/v1\nkind: Cluster\nmetadata:\n  name: postgresql-cluster\n  namespace: postgresql\nspec:\n  instances: 3\n  primaryUpdateStrategy: unsupervised\n  \n  postgresql:\n    parameters:\n      max_connections: \"200\"\n      shared_buffers: \"256MB\"\n      effective_cache_size: \"1GB\"\n      maintenance_work_mem: \"64MB\"\n      checkpoint_completion_target: \"0.9\"\n      wal_buffers: \"16MB\"\n      default_statistics_target: \"100\"\n      random_page_cost: \"1.1\"\n      effective_io_concurrency: \"200\"\n      \n  bootstrap:\n    initdb:\n      database: app_database\n      owner: app_user\n      secret:\n        name: postgresql-credentials\n        \n  storage:\n    storageClass: \"fast-ssd\"\n    size: \"100Gi\"\n    \n  monitoring:\n    enabled: true\n    \n  backup:\n    retentionPolicy: \"30d\"\n    barmanObjectStore:\n      destinationPath: s3://postgresql-backups/cluster1\n      s3Credentials:\n        accessKeyId:\n          name: backup-credentials\n          key: ACCESS_KEY_ID\n        secretAccessKey:\n          name: backup-credentials\n          key: SECRET_ACCESS_KEY\n      wal:\n        retention: \"5d\"\n      data:\n        retention: \"30d\"\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: postgresql-credentials\n  namespace: postgresql\ntype: kubernetes.io/basic-auth\ndata:\n  username: $(echo -n 'app_user' | base64)\n  password: $(echo -n 'secure_database_password_123!' | base64)\nEOF\n```\n\n### MySQL Cluster with Percona Operator\n\n```bash\n# Deploy MySQL cluster using Percona Operator\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: mysql\n---\napiVersion: pxc.percona.com/v1-12-0\nkind: PerconaXtraDBCluster\nmetadata:\n  name: mysql-cluster\n  namespace: mysql\nspec:\n  crVersion: 1.12.0\n  allowUnsafeConfigurations: false\n  secretsName: mysql-secrets\n  vaultSecretName: \"\"\n  sslSecretName: \"\"\n  sslInternalSecretName: \"\"\n  logCollectorSecretName: \"\"\n  \n  pxc:\n    size: 3\n    image: percona/percona-xtradb-cluster:8.0.32-24.2\n    autoRecovery: true\n    configuration: |\n      [mysqld]\n      wsrep_provider_options=\"debug=1;gcache.size=1G;gcache.page_size=1G\"\n      wsrep_debug=1\n      wsrep_cluster_address=gcomm://\n      binlog_format=ROW\n      default_storage_engine=InnoDB\n      innodb_autoinc_lock_mode=2\n      innodb_locks_unsafe_for_binlog=1\n      max_connections=350\n      innodb_buffer_pool_size=512M\n      \n    resources:\n      requests:\n        memory: 1G\n        cpu: 600m\n      limits:\n        memory: 1G\n        cpu: \"1\"\n        \n    volumeSpec:\n      persistentVolumeClaim:\n        storageClassName: fast-ssd\n        accessModes: [ \"ReadWriteOnce\" ]\n        resources:\n          requests:\n            storage: 80Gi\n            \n    affinity:\n      antiAffinityTopologyKey: \"kubernetes.io/hostname\"\n      \n  haproxy:\n    enabled: true\n    size: 2\n    image: percona/percona-xtradb-cluster-operator:1.12.0-haproxy\n    \n    resources:\n      requests:\n        memory: 256M\n        cpu: 250m\n      limits:\n        memory: 256M\n        cpu: 500m\n        \n  proxysql:\n    enabled: false\n    \n  backup:\n    image: percona/percona-xtradb-cluster-operator:1.12.0-pxc8.0-backup\n    schedule:\n      - name: \"daily-backup\"\n        schedule: \"0 2 * * *\"\n        keep: 7\n        storageName: s3-backup-storage\n        \n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secrets\n  namespace: mysql\ntype: Opaque\ndata:\n  root: $(echo -n 'secure_mysql_root_password!' | base64)\n  xtrabackup: $(echo -n 'backup_password_123!' | base64)\n  monitor: $(echo -n 'monitor_user_password!' | base64)\n  clustercheck: $(echo -n 'cluster_check_password!' | base64)\n  proxysql: $(echo -n 'proxysql_admin_password!' | base64)\n  operator: $(echo -n 'operator_user_password!' | base64)\nEOF\n```\n\n### Redis Cluster Deployment\n\n```bash\n# Deploy Redis cluster with Redis Operator\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: redis\n---\napiVersion: redis.redis.opstreelabs.in/v1beta1\nkind: RedisCluster\nmetadata:\n  name: redis-cluster\n  namespace: redis\nspec:\n  clusterSize: 6\n  clusterVersion: v7\n  persistenceEnabled: true\n  redisSecret:\n    name: redis-secret\n    key: password\n  redisConfig:\n    redis-config: |\n      maxmemory 512mb\n      maxmemory-policy allkeys-lru\n      save 900 1\n      save 300 10\n      save 60 10000\n      tcp-keepalive 60\n      tcp-backlog 8192\n      timeout 300\n      \n  storage:\n    volumeClaimTemplate:\n      spec:\n        accessModes: [\"ReadWriteOnce\"]\n        storageClassName: fast-ssd\n        resources:\n          requests:\n            storage: 50Gi\n            \n  resources:\n    requests:\n      memory: 512Mi\n      cpu: 250m\n    limits:\n      memory: 512Mi\n      cpu: 500m\n      \n  nodeSelector:\n    node-type: \"redis-optimized\"\n    \n  podSecurityContext:\n    runAsUser: 1000\n    runAsGroup: 1000\n    fsGroup: 1000\n    \n  securityContext:\n    allowPrivilegeEscalation: false\n    readOnlyRootFilesystem: true\n    runAsNonRoot: true\n    capabilities:\n      drop:\n      - ALL\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-secret\n  namespace: redis\ntype: Opaque\ndata:\n  password: $(echo -n 'secure_redis_password_123!' | base64)\nEOF\n```\n\n## Storage Configuration\n\n### Persistent Volumes and Storage Classes\n```bash\n# Create local storage class\ncat <<EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: local-storage\nprovisioner: kubernetes.io/no-provisioner\nvolumeBindingMode: WaitForFirstConsumer\nallowVolumeExpansion: true\nreclaimPolicy: Delete\nEOF\n\n# Create persistent volume\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: local-pv-1\nspec:\n  capacity:\n    storage: 10Gi\n  volumeMode: Filesystem\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Delete\n  storageClassName: local-storage\n  local:\n    path: /mnt/disk1\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/hostname\n          operator: In\n          values:\n          - node-1\nEOF\n\n# Create persistent volume claim\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: app-data-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: local-storage\n  resources:\n    requests:\n      storage: 5Gi\nEOF\n```\n\n### NFS Storage (Shared volumes)\n```bash\n# Install NFS client utilities (all nodes)\n# Ubuntu/Debian\nsudo apt install -y nfs-common\n\n# RHEL/CentOS\nsudo yum install -y nfs-utils\n\n# Create NFS storage class\ncat <<EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: nfs-storage\nprovisioner: example.com/nfs\nparameters:\n  server: 192.168.1.200\n  path: /exported/path\n  readOnly: \"false\"\nreclaimPolicy: Retain\nallowVolumeExpansion: true\nmountOptions:\n  - hard\n  - nfsvers=4.1\nEOF\n```\n\n## Firewall Configuration (Cross-Platform)\n\n### Required Ports\n```bash\n# Control plane ports\nsudo firewall-cmd --permanent --add-port=6443/tcp    # API server\nsudo firewall-cmd --permanent --add-port=2379-2380/tcp  # etcd\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=10259/tcp  # kube-scheduler\nsudo firewall-cmd --permanent --add-port=10257/tcp  # kube-controller-manager\n\n# Worker node ports\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=30000-32767/tcp  # NodePort services\n\n# CNI ports (Flannel)\nsudo firewall-cmd --permanent --add-port=8285/udp   # Flannel\nsudo firewall-cmd --permanent --add-port=8472/udp   # Flannel VXLAN\n\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 6443/tcp\nsudo ufw allow 2379:2380/tcp\nsudo ufw allow 10250/tcp\nsudo ufw allow 10259/tcp\nsudo ufw allow 10257/tcp\nsudo ufw allow 30000:32767/tcp\nsudo ufw allow 8285/udp\nsudo ufw allow 8472/udp\n\n# iptables (manual configuration)\nsudo iptables -A INPUT -p tcp --dport 6443 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 2379:2380 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 10250 -j ACCEPT\n```\n\n### SELinux Configuration (RHEL/CentOS)\n```bash\n# Configure SELinux for Kubernetes\nsudo setenforce 0\nsudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config\n\n# Alternative: Configure SELinux policies instead of disabling\nsudo setsebool -P container_manage_cgroup true\nsudo setsebool -P container_use_cgroup true\n\n# Install SELinux policies for containers\nsudo yum install -y container-selinux\n\n# Check for denials\nsudo ausearch -m AVC,USER_AVC -ts recent\n```\n\n## High Availability Setup\n\n### Multi-Master Cluster with kubeadm\n```bash\n# On first control plane node\nsudo kubeadm init \\\n  --control-plane-endpoint=\"k8s-cluster.example.com:6443\" \\\n  --upload-certs \\\n  --pod-network-cidr=10.244.0.0/16\n\n# Note the commands to join additional control plane nodes and workers\n\n# On additional control plane nodes:\nsudo kubeadm join k8s-cluster.example.com:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234... \\\n  --control-plane \\\n  --certificate-key 1234...\n\n# Configure load balancer (HAProxy example)\ncat <<EOF | sudo tee /etc/haproxy/haproxy.cfg\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode tcp\n    log global\n    option tcplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend k8s-api\n    bind *:6443\n    mode tcp\n    default_backend k8s-api-backend\n\nbackend k8s-api-backend\n    mode tcp\n    balance roundrobin\n    server k8s-master-1 192.168.1.101:6443 check\n    server k8s-master-2 192.168.1.102:6443 check\n    server k8s-master-3 192.168.1.103:6443 check\nEOF\n\nsudo systemctl restart haproxy\n```\n\n### External etcd Cluster\n```bash\n# Install etcd on dedicated nodes\nETCD_VER=v3.5.9\ncurl -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzf etcd-${ETCD_VER}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VER}-linux-amd64/{etcd,etcdctl} /usr/local/bin/\n\n# Create etcd configuration\nsudo tee /etc/systemd/system/etcd.service > /dev/null <<EOF\n[Unit]\nDescription=etcd\nDocumentation=https://github.com/coreos\n\n[Service]\nType=notify\nUser=etcd\nExecStart=/usr/local/bin/etcd \\\\\n  --name=etcd-1 \\\\\n  --data-dir=/var/lib/etcd \\\\\n  --listen-client-urls=https://192.168.1.201:2379 \\\\\n  --advertise-client-urls=https://192.168.1.201:2379 \\\\\n  --listen-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-advertise-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-cluster=etcd-1=https://192.168.1.201:2380,etcd-2=https://192.168.1.202:2380,etcd-3=https://192.168.1.203:2380 \\\\\n  --initial-cluster-token=etcd-cluster-1 \\\\\n  --initial-cluster-state=new \\\\\n  --cert-file=/etc/etcd/pki/server.crt \\\\\n  --key-file=/etc/etcd/pki/server.key \\\\\n  --peer-cert-file=/etc/etcd/pki/peer.crt \\\\\n  --peer-key-file=/etc/etcd/pki/peer.key \\\\\n  --trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-client-cert-auth \\\\\n  --client-cert-auth\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create etcd user and directories\nsudo useradd -r etcd\nsudo mkdir -p /var/lib/etcd /etc/etcd/pki\nsudo chown etcd:etcd /var/lib/etcd\nsudo systemctl enable --now etcd\n```\n\n## Application Deployment Examples\n\n### Secure Application Deployment\n```bash\n# Create namespace with network policies\ncat <<EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: myapp\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: myapp-sa\n  namespace: myapp\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: myapp\n  name: myapp-role\nrules:\n- apiGroups: [\"\"]\n  resources: [\"configmaps\", \"secrets\"]\n  verbs: [\"get\", \"list\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: myapp-rolebinding\n  namespace: myapp\nsubjects:\n- kind: ServiceAccount\n  name: myapp-sa\n  namespace: myapp\nroleRef:\n  kind: Role\n  name: myapp-role\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-deployment\n  namespace: myapp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      serviceAccountName: myapp-sa\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        runAsGroup: 3000\n        fsGroup: 2000\n        seccompProfile:\n          type: RuntimeDefault\n      containers:\n      - name: app\n        image: nginx:alpine\n        ports:\n        - containerPort: 80\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n        resources:\n          requests:\n            memory: \"64Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"128Mi\"\n            cpu: \"500m\"\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        volumeMounts:\n        - name: tmp-volume\n          mountPath: /tmp\n        - name: cache-volume\n          mountPath: /var/cache/nginx\n      volumes:\n      - name: tmp-volume\n        emptyDir: {}\n      - name: cache-volume\n        emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-service\n  namespace: myapp\nspec:\n  selector:\n    app: myapp\n  ports:\n  - port: 80\n    targetPort: 80\n  type: ClusterIP\nEOF\n```\n\n### StatefulSet with Persistent Storage\n```bash\n# Deploy StatefulSet application (database example)\ncat <<EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql-statefulset\n  namespace: myapp\nspec:\n  serviceName: mysql-service\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      securityContext:\n        runAsUser: 999\n        runAsGroup: 999\n        fsGroup: 999\n      containers:\n      - name: mysql\n        image: mysql:8.0\n        ports:\n        - containerPort: 3306\n          name: mysql\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: root-password\n        volumeMounts:\n        - name: mysql-storage\n          mountPath: /var/lib/mysql\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n  volumeClaimTemplates:\n  - metadata:\n      name: mysql-storage\n    spec:\n      accessModes: [\"ReadWriteOnce\"]\n      storageClassName: \"local-storage\"\n      resources:\n        requests:\n          storage: 10Gi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-service\n  namespace: myapp\nspec:\n  clusterIP: None\n  selector:\n    app: mysql\n  ports:\n  - port: 3306\n    targetPort: 3306\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secret\n  namespace: myapp\ntype: Opaque\ndata:\n  root-password: $(echo -n 'secure_mysql_password' | base64)\nEOF\n```\n\n## Backup and Disaster Recovery\n\n### etcd Backup\n```bash\n# Create etcd backup script\nsudo tee /usr/local/bin/etcd-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/etcd\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create etcd snapshot\nETCDCTL_API=3 etcdctl snapshot save ${BACKUP_DIR}/etcd-backup-${DATE}.db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Verify snapshot\nETCDCTL_API=3 etcdctl snapshot status ${BACKUP_DIR}/etcd-backup-${DATE}.db -w table\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"etcd-backup-*.db\" -type f -mtime +7 -delete\n\necho \"etcd backup completed: etcd-backup-${DATE}.db\"\nEOF\n\nsudo chmod +x /usr/local/bin/etcd-backup.sh\n\n# Schedule backup\necho \"0 2 * * * root /usr/local/bin/etcd-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Cluster State Backup\n```bash\n# Backup all cluster resources\nkubectl get all --all-namespaces -o yaml > cluster-backup-$(date +%Y%m%d).yaml\n\n# Backup specific resource types\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml > cluster-data-backup-$(date +%Y%m%d).yaml\n\n# Create backup script for all resources\nsudo tee /usr/local/bin/k8s-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/kubernetes\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup all cluster resources\nkubectl get all --all-namespaces -o yaml > ${BACKUP_DIR}/cluster-all-${DATE}.yaml\n\n# Backup critical resources separately\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml > ${BACKUP_DIR}/cluster-data-${DATE}.yaml\n\n# Backup custom resources\nkubectl get crd -o yaml > ${BACKUP_DIR}/cluster-crd-${DATE}.yaml\n\n# Backup RBAC\nkubectl get clusterroles,clusterrolebindings,roles,rolebindings --all-namespaces -o yaml > ${BACKUP_DIR}/cluster-rbac-${DATE}.yaml\n\n# etcd backup\n/usr/local/bin/etcd-backup.sh\n\n# Compress backups\ntar -czf ${BACKUP_DIR}/k8s-complete-backup-${DATE}.tar.gz ${BACKUP_DIR}/*-${DATE}.yaml\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"*-${DATE:0:8}*\" -type f -mtime +7 -delete\n\necho \"Kubernetes backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/k8s-backup.sh\necho \"0 3 * * * root /usr/local/bin/k8s-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Verification and Testing\n\n### Cluster Health Checks\n```bash\n# Check cluster components\nkubectl get componentstatuses\nkubectl cluster-info\nkubectl get nodes -o wide\n\n# Check all pods in system namespaces\nkubectl get pods --all-namespaces\nkubectl get events --all-namespaces --sort-by=.metadata.creationTimestamp\n\n# Test DNS resolution\nkubectl run test-dns --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default\n\n# Test pod networking\nkubectl run test-pod-1 --image=nginx --port=80\nkubectl expose pod test-pod-1 --port=80 --type=ClusterIP\nkubectl run test-pod-2 --image=busybox --rm -it --restart=Never -- wget -qO- test-pod-1\n\n# Check resource usage\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Verify RBAC\nkubectl auth can-i create deployments\nkubectl auth can-i get secrets --as=system:serviceaccount:default:default\n\n# Test persistent storage\nkubectl apply -f - <<EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: test-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-storage-pod\nspec:\n  containers:\n  - name: app\n    image: busybox\n    command: ['sh', '-c', 'echo \"Storage test\" > /data/test.txt && cat /data/test.txt && sleep 3600']\n    volumeMounts:\n    - name: storage\n      mountPath: /data\n  volumes:\n  - name: storage\n    persistentVolumeClaim:\n      claimName: test-pvc\nEOF\n\nkubectl logs test-storage-pod\nkubectl delete pod test-storage-pod\nkubectl delete pvc test-pvc\n```\n\n### Security Validation\n```bash\n# Run CIS Kubernetes Benchmark\ndocker run --rm -v $(pwd):/tmp aquasec/kube-bench:latest run --targets master,node,etcd,policies\n\n# Check pod security policies\nkubectl get psp  # For older versions\nkubectl get podsecuritypolicies  # For older versions\n\n# Verify network policies are working\nkubectl describe networkpolicy default-deny-all\n\n# Check for privileged containers\nkubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.securityContext.privileged}{\"\\n\"}{end}' | grep true\n\n# Audit security contexts\nkubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{\"\\t\"}{.metadata.name}{\"\\t\"}{.spec.securityContext}{\"\\n\"}{end}'\n\n# Check for containers running as root\nkubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.name}{\"\\t\"}{.spec.containers[*].securityContext.runAsUser}{\"\\n\"}{end}' | grep -E '\\t0$|\\t$'\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Node not ready issues\nkubectl describe node <node-name>\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Check kubelet logs\nsudo journalctl -u kubelet -f\n\n# Check container runtime\nsudo systemctl status containerd\nsudo crictl pods\n\n# Network issues\nkubectl get pods -n kube-system\nkubectl describe pod <cni-pod-name> -n kube-system\n\n# Permission issues (SELinux)\nsudo ausearch -m AVC -ts recent\nsudo setsebool -P container_manage_cgroup true\n\n# Certificate issues\nsudo kubeadm certs check-expiration\nopenssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout\n\n# Resource exhaustion\nkubectl describe node <node-name>\nkubectl top nodes\nkubectl top pods --all-namespaces --sort-by=memory\n\n# etcd issues\nsudo etcdctl endpoint health \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Reset cluster (if needed)\nsudo kubeadm reset\nsudo rm -rf /etc/cni/net.d\nsudo rm -rf $HOME/.kube/config\n```\n\n### Debug Pod Issues\n```bash\n# Debug failing pods\nkubectl describe pod <pod-name>\nkubectl logs <pod-name> -c <container-name>\nkubectl get events --field-selector involvedObject.name=<pod-name>\n\n# Debug networking\nkubectl run debug-pod --image=nicolaka/netshoot --rm -it --restart=Never\n\n# Check resource constraints\nkubectl describe resourcequota -n <namespace>\nkubectl describe limitrange -n <namespace>\n\n# Debug storage issues\nkubectl describe pvc <pvc-name>\nkubectl get events --field-selector involvedObject.name=<pvc-name>\n\n# Debug service connectivity\nkubectl run debug --image=busybox --rm -it --restart=Never -- nslookup <service-name>\nkubectl get endpoints <service-name>\n\n# Debug ingress issues\nkubectl describe ingress <ingress-name>\nkubectl get events --field-selector involvedObject.name=<ingress-name>\nkubectl logs -n ingress-nginx deployment/ingress-nginx-controller\n```\n\n## Performance Optimization\n\n### System-Level Tuning\n\n```bash\n# Kernel optimization for Kubernetes\nsudo tee -a /etc/sysctl.conf > /dev/null <<EOF\n# Kubernetes performance tuning\nnet.core.somaxconn = 32768\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.tcp_max_tw_buckets = 2000000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 1024 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 134217728\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 134217728\nnet.ipv4.tcp_rmem = 4096 87380 134217728\nnet.ipv4.tcp_wmem = 4096 65536 134217728\nfs.file-max = 2097152\nfs.inotify.max_user_instances = 8192\nfs.inotify.max_user_watches = 1048576\nvm.swappiness = 0\nvm.overcommit_memory = 1\nvm.dirty_ratio = 80\nvm.dirty_background_ratio = 5\nkernel.pid_max = 4194304\nEOF\n\nsudo sysctl -p\n\n# Set resource limits\nsudo tee -a /etc/security/limits.conf > /dev/null <<EOF\nroot soft nofile 65536\nroot hard nofile 65536\n* soft nofile 65536\n* hard nofile 65536\n* soft nproc 65536\n* hard nproc 65536\nEOF\n\n# Configure systemd limits for containerd and kubelet\nsudo mkdir -p /etc/systemd/system/containerd.service.d/\nsudo tee /etc/systemd/system/containerd.service.d/limits.conf > /dev/null <<EOF\n[Service]\nLimitNOFILE=1048576\nLimitNPROC=1048576\nLimitCORE=infinity\nOOMScoreAdjust=-999\nEOF\n\nsudo mkdir -p /etc/systemd/system/kubelet.service.d/\nsudo tee /etc/systemd/system/kubelet.service.d/limits.conf > /dev/null <<EOF\n[Service]\nLimitNOFILE=1048576\nLimitNPROC=1048576\nLimitCORE=infinity\nOOMScoreAdjust=-999\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart containerd kubelet\n```\n\n### Kubernetes Performance Configuration\n\n```bash\n# Optimize kubelet configuration\nsudo tee /var/lib/kubelet/config.yaml > /dev/null <<EOF\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\naddress: 0.0.0.0\nport: 10250\nreadOnlyPort: 0\nauthentication:\n  webhook:\n    enabled: true\nauthorization:\n  mode: Webhook\nclusterDomain: cluster.local\nclusterDNS:\n- 10.96.0.10\nmaxPods: 250\npodsPerCore: 10\ncgroupDriver: systemd\ncontainerLogMaxSize: 50Mi\ncontainerLogMaxFiles: 5\neventRecordQPS: 50\neventBurst: 100\nkubeAPIQPS: 50\nkubeAPIBurst: 100\nserializeImagePulls: false\nregistryPullQPS: 10\nregistryBurst: 20\nsyncFrequency: 1m\nfileCheckFrequency: 20s\nhttpCheckFrequency: 20s\nnodeStatusUpdateFrequency: 10s\nimageMinimumGCAge: 2m\nimageGCHighThresholdPercent: 85\nimageGCLowThresholdPercent: 80\nvolumeStatsAggPeriod: 1m\nsystemReserved:\n  cpu: 200m\n  memory: 512Mi\n  ephemeral-storage: 2Gi\nkubeReserved:\n  cpu: 200m\n  memory: 512Mi\n  ephemeral-storage: 2Gi\nEOF\n\n# Optimize API server configuration\nsudo sed -i '/- kube-apiserver/a\\\n    - --max-requests-inflight=2000\\\n    - --max-mutating-requests-inflight=1000\\\n    - --watch-cache-sizes=nodes#100,pods#1000,replicationcontrollers#500\\\n    - --target-ram-mb=2048\\\n    - --event-ttl=168h0m0s' /etc/kubernetes/manifests/kube-apiserver.yaml\n\n# Optimize etcd configuration\nsudo tee -a /etc/kubernetes/manifests/etcd.yaml > /dev/null <<EOF\n    - --max-request-bytes=33554432\n    - --quota-backend-bytes=8589934592\n    - --snapshot-count=10000\n    - --heartbeat-interval=100\n    - --election-timeout=1000\nEOF\n```\n\n## Integration Examples\n\n### Python Client Library\n\n```python\n# kubernetes-client example\nfrom kubernetes import client, config\nimport json\n\n# Load kubeconfig\nconfig.load_kube_config()  # or config.load_incluster_config() for in-cluster\n\n# Initialize API clients\nv1 = client.CoreV1Api()\napps_v1 = client.AppsV1Api()\nnetworking_v1 = client.NetworkingV1Api()\n\n# Create a namespace\nnamespace = client.V1Namespace(\n    metadata=client.V1ObjectMeta(name=\"python-app\")\n)\nv1.create_namespace(body=namespace)\n\n# Create a deployment\ndeployment = client.V1Deployment(\n    metadata=client.V1ObjectMeta(name=\"nginx-deployment\"),\n    spec=client.V1DeploymentSpec(\n        replicas=3,\n        selector=client.V1LabelSelector(\n            match_labels={\"app\": \"nginx\"}\n        ),\n        template=client.V1PodTemplateSpec(\n            metadata=client.V1ObjectMeta(\n                labels={\"app\": \"nginx\"}\n            ),\n            spec=client.V1PodSpec(\n                containers=[\n                    client.V1Container(\n                        name=\"nginx\",\n                        image=\"nginx:alpine\",\n                        ports=[client.V1ContainerPort(container_port=80)],\n                        resources=client.V1ResourceRequirements(\n                            requests={\"cpu\": \"100m\", \"memory\": \"128Mi\"},\n                            limits={\"cpu\": \"500m\", \"memory\": \"512Mi\"}\n                        )\n                    )\n                ]\n            )\n        )\n    )\n)\n\napps_v1.create_namespaced_deployment(\n    namespace=\"python-app\", \n    body=deployment\n)\n\n# Create a service\nservice = client.V1Service(\n    metadata=client.V1ObjectMeta(name=\"nginx-service\"),\n    spec=client.V1ServiceSpec(\n        selector={\"app\": \"nginx\"},\n        ports=[\n            client.V1ServicePort(port=80, target_port=80)\n        ],\n        type=\"LoadBalancer\"\n    )\n)\n\nv1.create_namespaced_service(namespace=\"python-app\", body=service)\n\n# Monitor pods\ndef monitor_pods():\n    pods = v1.list_namespaced_pod(namespace=\"python-app\")\n    for pod in pods.items:\n        print(f\"Pod: {pod.metadata.name}, Status: {pod.status.phase}\")\n\nmonitor_pods()\n\n# Stream logs\ndef stream_logs(pod_name):\n    for line in v1.read_namespaced_pod_log(\n        name=pod_name, \n        namespace=\"python-app\", \n        follow=True, \n        _preload_content=False\n    ).stream():\n        print(line.decode('utf-8'), end='')\n\n# Clean up\napps_v1.delete_namespaced_deployment(name=\"nginx-deployment\", namespace=\"python-app\")\nv1.delete_namespaced_service(name=\"nginx-service\", namespace=\"python-app\")\nv1.delete_namespace(name=\"python-app\")\n```\n\n### Node.js Client Example\n\n```javascript\n// kubernetes-example.js\nconst k8s = require('@kubernetes/client-node');\n\n// Load kubeconfig\nconst kc = new k8s.KubeConfig();\nkc.loadFromDefault();\n\nconst k8sApi = kc.makeApiClient(k8s.CoreV1Api);\nconst k8sAppsApi = kc.makeApiClient(k8s.AppsV1Api);\n\nconst namespace = 'nodejs-app';\n\nasync function createNamespace() {\n    const namespaceManifest = {\n        metadata: {\n            name: namespace\n        }\n    };\n    \n    try {\n        await k8sApi.createNamespace(namespaceManifest);\n        console.log(`Namespace ${namespace} created`);\n    } catch (error) {\n        console.error('Error creating namespace:', error.response?.body || error.message);\n    }\n}\n\nasync function createDeployment() {\n    const deploymentManifest = {\n        metadata: {\n            name: 'nginx-deployment'\n        },\n        spec: {\n            replicas: 3,\n            selector: {\n                matchLabels: {\n                    app: 'nginx'\n                }\n            },\n            template: {\n                metadata: {\n                    labels: {\n                        app: 'nginx'\n                    }\n                },\n                spec: {\n                    containers: [{\n                        name: 'nginx',\n                        image: 'nginx:alpine',\n                        ports: [{\n                            containerPort: 80\n                        }],\n                        resources: {\n                            requests: {\n                                cpu: '100m',\n                                memory: '128Mi'\n                            },\n                            limits: {\n                                cpu: '500m',\n                                memory: '512Mi'\n                            }\n                        }\n                    }]\n                }\n            }\n        }\n    };\n    \n    try {\n        await k8sAppsApi.createNamespacedDeployment(namespace, deploymentManifest);\n        console.log('Deployment created: nginx-deployment');\n    } catch (error) {\n        console.error('Error creating deployment:', error.response?.body || error.message);\n    }\n}\n\nasync function createService() {\n    const serviceManifest = {\n        metadata: {\n            name: 'nginx-service'\n        },\n        spec: {\n            selector: {\n                app: 'nginx'\n            },\n            ports: [{\n                port: 80,\n                targetPort: 80\n            }],\n            type: 'LoadBalancer'\n        }\n    };\n    \n    try {\n        await k8sApi.createNamespacedService(namespace, serviceManifest);\n        console.log('Service created: nginx-service');\n    } catch (error) {\n        console.error('Error creating service:', error.response?.body || error.message);\n    }\n}\n\nasync function listPods() {\n    try {\n        const response = await k8sApi.listNamespacedPod(namespace);\n        console.log(`Found ${response.body.items.length} pods:`);\n        response.body.items.forEach(pod => {\n            console.log(`Pod: ${pod.metadata.name}, Status: ${pod.status.phase}`);\n        });\n    } catch (error) {\n        console.error('Error listing pods:', error.response?.body || error.message);\n    }\n}\n\nasync function cleanup() {\n    try {\n        await k8sAppsApi.deleteNamespacedDeployment('nginx-deployment', namespace);\n        await k8sApi.deleteNamespacedService('nginx-service', namespace);\n        await k8sApi.deleteNamespace(namespace);\n        console.log('Resources cleaned up');\n    } catch (error) {\n        console.error('Error during cleanup:', error.response?.body || error.message);\n    }\n}\n\nasync function main() {\n    await createNamespace();\n    await createDeployment();\n    await createService();\n    \n    // Wait a bit for pods to start\n    setTimeout(async () => {\n        await listPods();\n        await cleanup();\n    }, 5000);\n}\n\nmain().catch(console.error);\n```\n\n### Java Client Example\n\n```java\n// KubernetesExample.java\nimport io.kubernetes.client.openapi.ApiClient;\nimport io.kubernetes.client.openapi.ApiException;\nimport io.kubernetes.client.openapi.Configuration;\nimport io.kubernetes.client.openapi.apis.AppsV1Api;\nimport io.kubernetes.client.openapi.apis.CoreV1Api;\nimport io.kubernetes.client.openapi.models.*;\nimport io.kubernetes.client.util.Config;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class KubernetesExample {\n    public static void main(String[] args) throws Exception {\n        // Load kubeconfig\n        ApiClient client = Config.defaultClient();\n        Configuration.setDefaultApiClient(client);\n        \n        CoreV1Api coreV1Api = new CoreV1Api();\n        AppsV1Api appsV1Api = new AppsV1Api();\n        \n        String namespace = \"java-app\";\n        \n        // Create namespace\n        V1Namespace ns = new V1Namespace()\n            .metadata(new V1ObjectMeta().name(namespace));\n        \n        try {\n            coreV1Api.createNamespace(ns, null, null, null, null);\n            System.out.println(\"Namespace created: \" + namespace);\n        } catch (ApiException e) {\n            System.err.println(\"Failed to create namespace: \" + e.getResponseBody());\n        }\n        \n        // Create deployment\n        Map<String, String> labels = new HashMap<>();\n        labels.put(\"app\", \"nginx\");\n        \n        V1Deployment deployment = new V1Deployment()\n            .metadata(new V1ObjectMeta().name(\"nginx-deployment\"))\n            .spec(new V1DeploymentSpec()\n                .replicas(3)\n                .selector(new V1LabelSelector().matchLabels(labels))\n                .template(new V1PodTemplateSpec()\n                    .metadata(new V1ObjectMeta().labels(labels))\n                    .spec(new V1PodSpec()\n                        .containers(Collections.singletonList(\n                            new V1Container()\n                                .name(\"nginx\")\n                                .image(\"nginx:alpine\")\n                                .ports(Collections.singletonList(\n                                    new V1ContainerPort().containerPort(80)\n                                ))\n                                .resources(new V1ResourceRequirements()\n                                    .requests(Map.of(\n                                        \"cpu\", Quantity.fromString(\"100m\"),\n                                        \"memory\", Quantity.fromString(\"128Mi\")\n                                    ))\n                                    .limits(Map.of(\n                                        \"cpu\", Quantity.fromString(\"500m\"),\n                                        \"memory\", Quantity.fromString(\"512Mi\")\n                                    ))\n                                )\n                        ))\n                    )\n                )\n            );\n            \n        try {\n            appsV1Api.createNamespacedDeployment(namespace, deployment, null, null, null, null);\n            System.out.println(\"Deployment created: nginx-deployment\");\n        } catch (ApiException e) {\n            System.err.println(\"Failed to create deployment: \" + e.getResponseBody());\n        }\n        \n        // Create service\n        V1Service service = new V1Service()\n            .metadata(new V1ObjectMeta().name(\"nginx-service\"))\n            .spec(new V1ServiceSpec()\n                .selector(labels)\n                .ports(Collections.singletonList(\n                    new V1ServicePort().port(80).targetPort(new IntOrString(80))\n                ))\n                .type(\"LoadBalancer\")\n            );\n            \n        try {\n            coreV1Api.createNamespacedService(namespace, service, null, null, null, null);\n            System.out.println(\"Service created: nginx-service\");\n        } catch (ApiException e) {\n            System.err.println(\"Failed to create service: \" + e.getResponseBody());\n        }\n        \n        // List pods\n        try {\n            V1PodList pods = coreV1Api.listNamespacedPod(namespace, null, null, null, null, null, null, null, null, null, null);\n            System.out.println(\"Found \" + pods.getItems().size() + \" pods:\");\n            for (V1Pod pod : pods.getItems()) {\n                System.out.println(\"Pod: \" + pod.getMetadata().getName() + \n                                 \", Status: \" + pod.getStatus().getPhase());\n            }\n        } catch (ApiException e) {\n            System.err.println(\"Failed to list pods: \" + e.getResponseBody());\n        }\n        \n        // Cleanup\n        try {\n            appsV1Api.deleteNamespacedDeployment(\"nginx-deployment\", namespace, null, null, null, null, null, null);\n            coreV1Api.deleteNamespacedService(\"nginx-service\", namespace, null, null, null, null, null, null);\n            coreV1Api.deleteNamespace(namespace, null, null, null, null, null, null);\n            System.out.println(\"Resources cleaned up\");\n        } catch (ApiException e) {\n            System.err.println(\"Failed to cleanup: \" + e.getResponseBody());\n        }\n    }\n}\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# Check current Kubernetes version\nkubectl version --short\n\n# Plan upgrade with kubeadm\nsudo kubeadm upgrade plan\n\n# Upgrade kubeadm first\nsudo apt update && sudo apt-mark unhold kubeadm\nsudo apt install -y kubeadm=1.29.1-00\nsudo apt-mark hold kubeadm\n\n# Or for RHEL/CentOS\nsudo yum update -y kubeadm-1.29.1\n\n# Upgrade control plane\nsudo kubeadm upgrade apply v1.29.1\n\n# Upgrade kubelet and kubectl\nsudo apt-mark unhold kubelet kubectl\nsudo apt install -y kubelet=1.29.1-00 kubectl=1.29.1-00\nsudo apt-mark hold kubelet kubectl\n\nsudo systemctl daemon-reload\nsudo systemctl restart kubelet\n\n# Drain and upgrade worker nodes\nkubectl drain <worker-node> --ignore-daemonsets --delete-emptydir-data\n# On worker node:\nsudo kubeadm upgrade node\nsudo apt install -y kubelet=1.29.1-00 kubectl=1.29.1-00\nsudo systemctl daemon-reload\nsudo systemctl restart kubelet\n\n# Uncordon worker node\nkubectl uncordon <worker-node>\n```\n\n### Maintenance Tasks\n\n```bash\n# Weekly maintenance script\n#!/bin/bash\n# k8s-maintenance.sh\n\n# Check cluster health\necho \"=== Cluster Health Check ===\"\nkubectl get nodes -o wide\nkubectl get pods --all-namespaces | grep -v Running | grep -v Completed\n\n# Check resource usage\necho \"=== Resource Usage ===\"\nkubectl top nodes\nkubectl top pods --all-namespaces --sort-by=cpu | head -10\n\n# Check certificate expiry\necho \"=== Certificate Expiry ===\"\nsudo kubeadm certs check-expiration\n\n# Clean up completed jobs\necho \"=== Cleanup ===\"\nkubectl get jobs --all-namespaces -o json | jq -r '.items[] | select(.status.conditions[]?.type == \"Complete\") | \"\\(.metadata.namespace) \\(.metadata.name)\"' | xargs -l bash -c 'kubectl delete job $1 -n $0'\n\n# Clean up evicted pods\nkubectl get pods --all-namespaces --field-selector=status.phase=Failed -o json | jq -r '.items[] | \"\\(.metadata.namespace) \\(.metadata.name)\"' | xargs -l bash -c 'kubectl delete pod $1 -n $0'\n\n# Check for security updates\necho \"=== Security Updates Available ===\"\nsudo apt list --upgradable | grep -i security\n\n# Backup etcd\necho \"=== etcd Backup ===\"\nsudo etcdctl snapshot save /backup/etcd-$(date +%Y%m%d_%H%M%S).db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\necho \"Maintenance completed at: $(date)\"\n```\n\n## Additional Resources\n\n- [Official Documentation](https://kubernetes.io/docs/)\n- [kubectl Reference](https://kubernetes.io/docs/reference/kubectl/)\n- [Security Best Practices](https://kubernetes.io/docs/concepts/security/)\n- [CIS Kubernetes Benchmark](https://www.cisecurity.org/benchmark/kubernetes)\n- [OWASP Kubernetes Security Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/Kubernetes_Security_Cheat_Sheet.html)\n- [Kubernetes The Hard Way](https://github.com/kelseyhightower/kubernetes-the-hard-way)\n- [Kubernetes Academy](https://kubernetes.academy/)\n- [CNCF Landscape](https://landscape.cncf.io/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"kubernetes-installation-guide\" class=\"mobile-header\">Kubernetes Installation Guide</h1>\n<p class=\"mobile-paragraph\">Kubernetes is a free and open-source container orchestration platform for automating deployment, scaling, and management of containerized applications. Originally developed by Google and now maintained by the Cloud Native Computing Foundation (CNCF), Kubernetes serves as the industry standard for container orchestration. It provides enterprise-grade security, scalability, and reliability for cloud-native applications, offering a robust alternative to proprietary solutions like AWS ECS, Azure Container Instances, or Google Cloud Run without vendor lock-in.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores for control plane, 1+ core for worker nodes</li>\n<li class=\"mobile-list-item\">RAM: 2GB+ per control plane node, 1GB+ per worker node</li>\n<li class=\"mobile-list-item\">Storage: 20GB+ available disk space per node (SSD recommended)</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity between all nodes (1Gbps+ recommended)</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with kernel 3.10+ (4.x+ recommended)</li>\n<li class=\"mobile-list-item\">Container runtime support (containerd, Docker, CRI-O)</li>\n<li class=\"mobile-list-item\">macOS: Docker Desktop with Kubernetes enabled (development only)</li>\n<li class=\"mobile-list-item\">Windows: Docker Desktop with Kubernetes enabled (development only)</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Unique hostname, MAC address, and product_uuid for every node</li>\n<li class=\"mobile-list-item\">Port 6443 (Kubernetes API server)</li>\n<li class=\"mobile-list-item\">Port 2379-2380 (etcd server client API)</li>\n<li class=\"mobile-list-item\">Port 10250 (kubelet API)</li>\n<li class=\"mobile-list-item\">Port 10259 (kube-scheduler)</li>\n<li class=\"mobile-list-item\">Port 10257 (kube-controller-manager)</li>\n<li class=\"mobile-list-item\">Port 30000-32767 (NodePort Services)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Container runtime (containerd recommended)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system</li>\n<li class=\"mobile-list-item\">iptables (for network rules)</li>\n<li class=\"mobile-list-item\">ebtables and ethtool (for networking)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<li class=\"mobile-list-item\"><strong>Special Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Swap must be disabled on all nodes</li>\n<li class=\"mobile-list-item\">SELinux in permissive mode (for RHEL/CentOS)</li>\n<li class=\"mobile-list-item\">Firewall configured to allow cluster communication</li>\n<h2 id=\"system-preparation-all-distributions\" class=\"mobile-header\">System Preparation (All Distributions)</h2>\n<h3 id=\"disable-swap-required\" class=\"mobile-header\">Disable Swap (Required)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Disable swap immediately\nsudo swapoff -a\n\n# Disable swap permanently\nsudo sed -i &#039;/ swap / s/^\\(.*\\)$/#\\1/g&#039; /etc/fstab\n\n# Verify swap is disabled\nfree -h\nswapon --show</code></pre>\n      </div>\n    </div>\n<h3 id=\"configure-kernel-modules\" class=\"mobile-header\">Configure Kernel Modules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Load required kernel modules\ncat &lt;&lt;EOF | sudo tee /etc/modules-load.d/k8s.conf\noverlay\nbr_netfilter\nEOF\n\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# Configure sysctl parameters\ncat &lt;&lt;EOF | sudo tee /etc/sysctl.d/k8s.conf\nnet.bridge.bridge-nf-call-iptables  = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.ipv4.ip_forward                 = 1\nEOF\n\nsudo sysctl --system</code></pre>\n      </div>\n    </div>\n<h2 id=\"container-runtime-installation\" class=\"mobile-header\">Container Runtime Installation</h2>\n<h3 id=\"containerd-recommended\" class=\"mobile-header\">containerd (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package list\nsudo apt-get update\n\n# Install dependencies\nsudo apt-get install -y ca-certificates curl gnupg lsb-release\n\n# Add Docker repository for containerd\nsudo mkdir -m 0755 -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\necho &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Install containerd\nsudo apt-get update\nsudo apt-get install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install prerequisites\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install containerd\nsudo yum install -y containerd.io\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup driver\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install containerd\nsudo dnf install -y containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Restart and enable containerd\nsudo systemctl restart containerd\nsudo systemctl enable containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install containerd\nsudo pacman -Syu containerd\n\n# Configure containerd\nsudo mkdir -p /etc/containerd\ncontainerd config default | sudo tee /etc/containerd/config.toml\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Enable and start containerd\nsudo systemctl enable --now containerd</code></pre>\n      </div>\n    </div>\n<h2 id=\"kubernetes-installation\" class=\"mobile-header\">Kubernetes Installation</h2>\n<h3 id=\"kubeadm-kubelet-kubectl-installation\" class=\"mobile-header\">kubeadm, kubelet, kubectl Installation</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index and install packages needed for apt to use HTTPS\nsudo apt-get update\nsudo apt-get install -y apt-transport-https ca-certificates curl gpg\n\n# Download and add the Kubernetes signing key\ncurl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg\n\n# Add Kubernetes repository\necho &#039;deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /&#039; | sudo tee /etc/apt/sources.list.d/kubernetes.list\n\n# Update package index and install Kubernetes components\nsudo apt-get update\nsudo apt-get install -y kubelet kubeadm kubectl\n\n# Hold packages to prevent automatic updates\nsudo apt-mark hold kubelet kubeadm kubectl\n\n# Enable kubelet\nsudo systemctl enable --now kubelet</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux/Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Kubernetes repository\ncat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/\nenabled=1\ngpgcheck=1\ngpgkey=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\nexclude=kubelet kubeadm kubectl cri-tools kubernetes-cni\nEOF\n\n# Set SELinux to permissive mode (required for cluster communication)\nsudo setenforce 0\nsudo sed -i &#039;s/^SELINUX=enforcing$/SELINUX=permissive/&#039; /etc/selinux/config\n\n# Install Kubernetes components\nsudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes\n\n# Enable kubelet\nsudo systemctl enable --now kubelet</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from AUR (using yay)\nyay -S kubeadm-bin kubelet-bin kubectl-bin\n\n# Or build from source\ngit clone https://aur.archlinux.org/kubectl-bin.git\ncd kubectl-bin &amp;&amp; makepkg -si\n\n# Enable kubelet\nsudo systemctl enable --now kubelet</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### openSUSE/SLES</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper refresh\n\n# Add Kubernetes repository\nsudo rpm --import https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key\necho &#039;baseurl=https://pkgs.k8s.io/core:/stable:/v1.29/rpm/&#039; | sudo tee /etc/zypp/repos.d/kubernetes.repo\n\n# Install Kubernetes components\nsudo zypper install -y kubelet kubeadm kubectl\n\n# SLES 15 (requires additional modules)\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y kubelet kubeadm kubectl\n\n# Enable kubelet\nsudo systemctl enable --now kubelet</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Alpine Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install containerd first\napk add --no-cache containerd\n\n# Add community repository for Kubernetes\necho &quot;http://dl-cdn.alpinelinux.org/alpine/edge/community&quot; &gt;&gt; /etc/apk/repositories\napk update\n\n# Install Kubernetes components (if available)\napk add --no-cache kubectl\n\n# Or install from binary\nKUBE_VERSION=&quot;v1.29.0&quot;\ncurl -LO &quot;https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubectl&quot;\ncurl -LO &quot;https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubeadm&quot;\ncurl -LO &quot;https://dl.k8s.io/release/${KUBE_VERSION}/bin/linux/amd64/kubelet&quot;\n\nchmod +x kubectl kubeadm kubelet\nsudo mv kubectl kubeadm kubelet /usr/local/bin/\n\n# Configure OpenRC service\nsudo tee /etc/init.d/kubelet &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/sbin/openrc-run\nname=&quot;kubelet&quot;\ncommand=&quot;/usr/local/bin/kubelet&quot;\ncommand_args=&quot;--config=/var/lib/kubelet/config.yaml --kubeconfig=/etc/kubernetes/kubelet.conf&quot;\npidfile=&quot;/var/run/kubelet.pid&quot;\ncommand_background=&quot;yes&quot;\ndepend() {\n    need net\n    after containerd\n}\nEOF\n\nsudo chmod +x /etc/init.d/kubelet\nsudo rc-update add kubelet default</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### macOS (Development Only)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker Desktop\n# Download from: https://www.docker.com/products/docker-desktop\n\n# Enable Kubernetes in Docker Desktop\n# Docker Desktop â†’ Preferences â†’ Kubernetes â†’ Enable Kubernetes\n\n# Install kubectl via Homebrew\nbrew install kubectl\n\n# Alternative: Install kubectl directly\ncurl -LO &quot;https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl&quot;\nchmod +x kubectl\nsudo mv kubectl /usr/local/bin/\n\n# Verify installation\nkubectl version --client\nkubectl cluster-info\n\n# Configure kubectl context\nkubectl config use-context docker-desktop</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### FreeBSD</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from ports\ncd /usr/ports/sysutils/kubectl &amp;&amp; make install clean\n\n# Or install from packages\npkg install kubectl\n\n# Note: Full Kubernetes cluster on FreeBSD requires manual compilation\n# For development, use kubectl to connect to remote clusters\n\n# Install container runtime (if needed)\npkg install containerd\n\n# Configure kubectl for remote cluster access\nmkdir -p ~/.kube\n# Copy kubeconfig from Linux cluster to ~/.kube/config</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Windows (Development Only)</p>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Method 1: Install Docker Desktop\n# Download from: https://www.docker.com/products/docker-desktop\n# Enable Kubernetes in Docker Desktop settings\n\n# Method 2: Install using Chocolatey\nchoco install kubernetes-cli\n\n# Method 3: Install using Scoop\nscoop install kubectl\n\n# Method 4: Manual installation\n# Download from https://dl.k8s.io/release/v1.29.0/bin/windows/amd64/kubectl.exe\n# Add to PATH environment variable\n\n# Enable Kubernetes in Docker Desktop\n# Docker Desktop â†’ Settings â†’ Kubernetes â†’ Enable Kubernetes\n\n# Verify installation\nkubectl version --client\nkubectl cluster-info\n\n# Configure PowerShell completion (optional)\nkubectl completion powershell | Out-String | Invoke-Expression</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Verify system requirements</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if swap is disabled\nfree -h\nswapon --show\n\n# Verify required ports are available\nsudo ss -tlnp | grep -E &#039;:(6443|2379|2380|10250|10259|10257)&#039;\n\n# Check container runtime\nsudo systemctl status containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Configure container runtime</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Default containerd configuration directory\nsudo mkdir -p /etc/containerd\n\n# Generate default configuration\ncontainerd config default | sudo tee /etc/containerd/config.toml\n\n# Enable SystemdCgroup for better resource management\nsudo sed -i &#039;s/SystemdCgroup = false/SystemdCgroup = true/&#039; /etc/containerd/config.toml\n\n# Restart containerd with new configuration\nsudo systemctl restart containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Initialize cluster networking</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Load required kernel modules\nsudo modprobe overlay\nsudo modprobe br_netfilter\n\n# Configure sysctl for networking\necho &#039;net.bridge.bridge-nf-call-iptables=1&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.ip_forward=1&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Set up kubelet configuration</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create kubelet configuration directory\nsudo mkdir -p /var/lib/kubelet\n\n# Set kubelet to automatically restart\nsudo systemctl enable kubelet</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Verify container runtime is working\nsudo crictl version\nsudo crictl info\n\n# Check if kubelet is ready\nsudo systemctl status kubelet\n\n# Verify kernel modules are loaded\nlsmod | grep -E &#039;overlay|br_netfilter&#039;\n\n# Test container runtime with a simple container\nsudo crictl pull k8s.gcr.io/pause:3.9\nsudo crictl images</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Ensure all prerequisite steps are completed before proceeding to cluster initialization!</p>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Kubernetes services to start on boot\nsudo systemctl enable kubelet\nsudo systemctl enable containerd\n\n# Start services\nsudo systemctl start containerd\nsudo systemctl start kubelet\n\n# Stop services\nsudo systemctl stop kubelet\nsudo systemctl stop containerd\n\n# Restart services\nsudo systemctl restart containerd\nsudo systemctl restart kubelet\n\n# Check service status\nsudo systemctl status kubelet\nsudo systemctl status containerd\n\n# View service logs\nsudo journalctl -u kubelet -f\nsudo journalctl -u containerd -f\n\n# Reload systemd daemon after config changes\nsudo systemctl daemon-reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable services to start on boot\nsudo rc-update add containerd default\nsudo rc-update add kubelet default\n\n# Start services\nsudo rc-service containerd start\nsudo rc-service kubelet start\n\n# Stop services\nsudo rc-service kubelet stop\nsudo rc-service containerd stop\n\n# Restart services\nsudo rc-service containerd restart\nsudo rc-service kubelet restart\n\n# Check service status\nsudo rc-service kubelet status\nsudo rc-service containerd status\n\n# View logs\nsudo tail -f /var/log/kubelet.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos-with-docker-desktop\" class=\"mobile-header\">launchd (macOS with Docker Desktop)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Docker Desktop manages Kubernetes services automatically\n# Use Docker Desktop interface to start/stop Kubernetes\n\n# Check Kubernetes status\nkubectl cluster-info\n\n# Restart Kubernetes through Docker Desktop\n# Docker Desktop â†’ Preferences â†’ Kubernetes â†’ Reset Kubernetes Cluster\n\n# View logs through Docker Desktop\n# Docker Desktop â†’ Troubleshoot â†’ Clean / Purge data</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Docker Desktop manages Kubernetes services on Windows\n# Use Docker Desktop interface for management\n\n# Check Kubernetes status\nkubectl cluster-info\n\n# Restart Docker Desktop service\nRestart-Service com.docker.service\n\n# View Docker Desktop logs\nGet-EventLog -LogName Application -Source &quot;Docker Desktop&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"cluster-initialization\" class=\"mobile-header\">Cluster Initialization</h2>\n<h3 id=\"control-plane-setup-master-node\" class=\"mobile-header\">Control Plane Setup (Master Node)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Initialize cluster with security best practices\nsudo kubeadm init \\\n  --pod-network-cidr=10.244.0.0/16 \\\n  --service-cidr=10.96.0.0/12 \\\n  --apiserver-advertise-address=$(hostname -I | awk &#039;{print $1}&#039;) \\\n  --node-name=$(hostname) \\\n  --ignore-preflight-errors=NumCPU\n\n# Configure kubectl for regular user\nmkdir -p $HOME/.kube\nsudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\nsudo chown $(id -u):$(id -g) $HOME/.kube/config\n\n# Alternative: Root user configuration\nexport KUBECONFIG=/etc/kubernetes/admin.conf\necho &#039;export KUBECONFIG=/etc/kubernetes/admin.conf&#039; &gt;&gt; ~/.bashrc\n\n# Verify control plane is running\nkubectl cluster-info\nkubectl get nodes\nkubectl get pods --all-namespaces</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-plugin-installation\" class=\"mobile-header\">Network Plugin Installation</h3>\n<p class=\"mobile-paragraph\">#### Flannel (Simple, recommended for beginners)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Flannel CNI\nkubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n\n# Verify Flannel pods are running\nkubectl get pods -n kube-flannel</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Calico (Advanced networking and network policies)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Calico CNI\nkubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml\n\n# Download and apply Calico custom resources\ncurl https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml -O\nkubectl create -f custom-resources.yaml\n\n# Verify Calico is running\nkubectl get pods -n calico-system</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Cilium (eBPF-based networking)</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Cilium CLI\nCILIUM_CLI_VERSION=$(curl -s https://raw.githubusercontent.com/cilium/cilium-cli/main/stable.txt)\nCLI_ARCH=amd64\nif [ &quot;$(uname -m)&quot; = &quot;aarch64&quot; ]; then CLI_ARCH=arm64; fi\ncurl -L --fail --remote-name-all https://github.com/cilium/cilium-cli/releases/download/${CILIUM_CLI_VERSION}/cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\nsha256sum --check cilium-linux-${CLI_ARCH}.tar.gz.sha256sum\nsudo tar xzvfC cilium-linux-${CLI_ARCH}.tar.gz /usr/local/bin\nrm cilium-linux-${CLI_ARCH}.tar.gz{,.sha256sum}\n\n# Install Cilium\ncilium install\n\n# Verify installation\ncilium status --wait</code></pre>\n      </div>\n    </div>\n<h3 id=\"worker-node-setup\" class=\"mobile-header\">Worker Node Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># On worker nodes, use the join command from control plane initialization\n# Example (replace with your actual token and hash):\nsudo kubeadm join 192.168.1.100:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234567890abcdef...\n\n# If you need to get the join command again:\n# On control plane:\nkubeadm token create --print-join-command\n\n# Verify nodes joined successfully\nkubectl get nodes -o wide</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening-2024-best-practices\" class=\"mobile-header\">Security Hardening (2024 Best Practices)</h2>\n<h3 id=\"rbac-configuration\" class=\"mobile-header\">RBAC Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create service account with limited permissions\nkubectl create serviceaccount developer-sa -n default\n\n# Create role with specific permissions\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: default\n  name: developer-role\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods&quot;, &quot;services&quot;, &quot;configmaps&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]\n- apiGroups: [&quot;apps&quot;]\n  resources: [&quot;deployments&quot;, &quot;replicasets&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;, &quot;watch&quot;, &quot;create&quot;, &quot;update&quot;, &quot;patch&quot;, &quot;delete&quot;]\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;pods/log&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;]\nEOF\n\n# Create role binding\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: developer-binding\n  namespace: default\nsubjects:\n- kind: ServiceAccount\n  name: developer-sa\n  namespace: default\nroleRef:\n  kind: Role\n  name: developer-role\n  apiGroup: rbac.authorization.k8s.io\nEOF\n\n# Test RBAC configuration\nkubectl auth can-i create deployments --as=system:serviceaccount:default:developer-sa</code></pre>\n      </div>\n    </div>\n<h3 id=\"pod-security-standards\" class=\"mobile-header\">Pod Security Standards</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Pod Security Standards (baseline level)\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: secure-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: baseline\n    pod-security.kubernetes.io/audit: baseline\n    pod-security.kubernetes.io/warn: baseline\nEOF\n\n# For restricted security (recommended for production)\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: restricted-namespace\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\nEOF\n\n# Example secure pod configuration\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Pod\nmetadata:\n  name: secure-pod\n  namespace: restricted-namespace\nspec:\n  securityContext:\n    runAsNonRoot: true\n    runAsUser: 1000\n    runAsGroup: 3000\n    fsGroup: 2000\n    seccompProfile:\n      type: RuntimeDefault\n  containers:\n  - name: app\n    image: nginx:latest\n    securityContext:\n      allowPrivilegeEscalation: false\n      readOnlyRootFilesystem: true\n      capabilities:\n        drop:\n        - ALL\n    ports:\n    - containerPort: 80\n    volumeMounts:\n    - name: tmp-volume\n      mountPath: /tmp\n    - name: cache-volume\n      mountPath: /var/cache/nginx\n  volumes:\n  - name: tmp-volume\n    emptyDir: {}\n  - name: cache-volume\n    emptyDir: {}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-policies\" class=\"mobile-header\">Network Policies</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Default deny all network policy\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny-all\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Ingress\n  - Egress\nEOF\n\n# Allow specific communication\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-nginx-ingress\n  namespace: default\nspec:\n  podSelector:\n    matchLabels:\n      app: nginx\n  policyTypes:\n  - Ingress\n  ingress:\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          name: ingress-nginx\n    ports:\n    - protocol: TCP\n      port: 80\nEOF\n\n# Allow egress for DNS\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-dns-egress\n  namespace: default\nspec:\n  podSelector: {}\n  policyTypes:\n  - Egress\n  egress:\n  - to: []\n    ports:\n    - protocol: UDP\n      port: 53\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"etcd-security\" class=\"mobile-header\">etcd Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check etcd encryption at rest\nkubectl get secrets --all-namespaces -o json | kubectl replace -f-\n\n# Create encryption configuration\ncat &lt;&lt;EOF | sudo tee /etc/kubernetes/enc.yaml\napiVersion: apiserver.config.k8s.io/v1\nkind: EncryptionConfiguration\nresources:\n- resources:\n  - secrets\n  - configmaps\n  - pandas.awesome.bears.example\n  providers:\n  - aescbc:\n      keys:\n      - name: key1\n        secret: $(head -c 32 /dev/urandom | base64)\n  - identity: {}\nEOF\n\n# Update kube-apiserver configuration\nsudo sed -i &#039;/--encryption-provider-config=/d&#039; /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i &#039;/- kube-apiserver/a\\    - --encryption-provider-config=/etc/kubernetes/enc.yaml&#039; /etc/kubernetes/manifests/kube-apiserver.yaml\n\n# Mount encryption config in kube-apiserver\nsudo sed -i &#039;/volumeMounts:/a\\    - mountPath: /etc/kubernetes/enc.yaml\\n      name: encryption-config\\n      readOnly: true&#039; /etc/kubernetes/manifests/kube-apiserver.yaml\nsudo sed -i &#039;/volumes:/a\\  - hostPath:\\n      path: /etc/kubernetes/enc.yaml\\n      type: FileOrCreate\\n    name: encryption-config&#039; /etc/kubernetes/manifests/kube-apiserver.yaml</code></pre>\n      </div>\n    </div>\n<h2 id=\"alternative-installation-methods\" class=\"mobile-header\">Alternative Installation Methods</h2>\n<h3 id=\"k3s-lightweight-kubernetes\" class=\"mobile-header\">k3s (Lightweight Kubernetes)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install k3s on control plane\ncurl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644\n\n# Get node token for workers\nsudo cat /var/lib/rancher/k3s/server/node-token\n\n# Install on worker nodes\ncurl -sfL https://get.k3s.io | K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config\nsudo chown $(id -u):$(id -g) ~/.kube/config\nexport KUBECONFIG=~/.kube/config\n\n# Verify cluster\nkubectl get nodes</code></pre>\n      </div>\n    </div>\n<h3 id=\"k0s-zero-deps-kubernetes\" class=\"mobile-header\">k0s (Zero-deps Kubernetes)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download k0s\ncurl -sSLf https://get.k0s.sh | sudo sh\n\n# Initialize controller\nsudo k0s install controller --single\n\n# Start k0s\nsudo systemctl start k0scontroller\n\n# Generate worker join token\nsudo k0s token create --role=worker\n\n# On worker nodes:\nsudo k0s install worker --token-file /path/to/token/file\nsudo systemctl start k0sworker\n\n# Configure kubectl\nmkdir -p ~/.kube\nsudo k0s kubeconfig admin &gt; ~/.kube/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"microk8s-ubuntusnap\" class=\"mobile-header\">MicroK8s (Ubuntu/Snap)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MicroK8s\nsudo snap install microk8s --classic\n\n# Add user to microk8s group\nsudo usermod -a -G microk8s $USER\nsudo chown -f -R $USER ~/.kube\nnewgrp microk8s\n\n# Enable essential addons\nmicrok8s enable dns dashboard storage\n\n# Configure kubectl alias\necho &#039;alias kubectl=&quot;microk8s kubectl&quot;&#039; &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Get cluster info\nmicrok8s kubectl cluster-info</code></pre>\n      </div>\n    </div>\n<h3 id=\"minikube-development\" class=\"mobile-header\">Minikube (Development)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install minikube\ncurl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64\nsudo install minikube-linux-amd64 /usr/local/bin/minikube\n\n# Start cluster with specific configuration\nminikube start \\\n  --driver=containerd \\\n  --cpus=4 \\\n  --memory=8g \\\n  --disk-size=50g \\\n  --kubernetes-version=v1.29.0\n\n# Enable addons\nminikube addons enable dashboard\nminikube addons enable metrics-server\nminikube addons enable ingress\nminikube addons enable registry\n\n# Configure kubectl context\nkubectl config use-context minikube\n\n# Access dashboard\nminikube dashboard</code></pre>\n      </div>\n    </div>\n<h2 id=\"essential-add-ons-installation\" class=\"mobile-header\">Essential Add-ons Installation</h2>\n<h3 id=\"metrics-server\" class=\"mobile-header\">Metrics Server</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install metrics-server for resource monitoring\nkubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\n# For development clusters, may need to add --kubelet-insecure-tls\nkubectl patch deployment metrics-server -n kube-system --type=&#039;json&#039; -p=&#039;[{&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/args/-&quot;, &quot;value&quot;: &quot;--kubelet-insecure-tls&quot;}]&#039;\n\n# Verify metrics server\nkubectl top nodes\nkubectl top pods --all-namespaces</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-dashboard\" class=\"mobile-header\">Kubernetes Dashboard</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dashboard\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml\n\n# Create admin service account\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: admin-user\n  namespace: kubernetes-dashboard\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: admin-user\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: cluster-admin\nsubjects:\n- kind: ServiceAccount\n  name: admin-user\n  namespace: kubernetes-dashboard\nEOF\n\n# Get access token\nkubectl -n kubernetes-dashboard create token admin-user\n\n# Access dashboard\nkubectl proxy &amp;\n# Visit: http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/</code></pre>\n      </div>\n    </div>\n<h3 id=\"ingress-controller-nginx\" class=\"mobile-header\">Ingress Controller (NGINX)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX Ingress Controller\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/cloud/deploy.yaml\n\n# For bare metal installations\nkubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.2/deploy/static/provider/baremetal/deploy.yaml\n\n# Verify installation\nkubectl get pods -n ingress-nginx\nkubectl get svc -n ingress-nginx\n\n# Create sample ingress\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: example-ingress\n  annotations:\n    nginx.ingress.kubernetes.io/rewrite-target: /\n    nginx.ingress.kubernetes.io/ssl-redirect: &quot;true&quot;\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - example.com\n    secretName: example-tls\n  rules:\n  - host: example.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: web-service\n            port:\n              number: 80\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-ingress-controller-configuration\" class=\"mobile-header\">NGINX Ingress Controller Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NGINX Ingress Controller with custom configuration\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: ingress-nginx\n---\napiVersion: helm.cattle.io/v1\nkind: HelmChart\nmetadata:\n  name: ingress-nginx\n  namespace: ingress-nginx\nspec:\n  chart: ingress-nginx\n  repo: https://kubernetes.github.io/ingress-nginx\n  targetNamespace: ingress-nginx\n  valuesContent: |-\n    controller:\n      replicaCount: 2\n      service:\n        type: LoadBalancer\n        externalTrafficPolicy: Local\n      config:\n        ssl-redirect: &quot;true&quot;\n        force-ssl-redirect: &quot;true&quot;\n        ssl-protocols: &quot;TLSv1.2 TLSv1.3&quot;\n        ssl-ciphers: &quot;ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384&quot;\n        client-body-buffer-size: &quot;64k&quot;\n        client-body-timeout: &quot;60&quot;\n        client-header-timeout: &quot;60&quot;\n        large-client-header-buffers: &quot;4 64k&quot;\n        proxy-body-size: &quot;50m&quot;\n        server-name-hash-bucket-size: &quot;128&quot;\n      metrics:\n        enabled: true\n        serviceMonitor:\n          enabled: true\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"traefik-ingress-controller\" class=\"mobile-header\">Traefik Ingress Controller</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Traefik with custom configuration\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: traefik-system\n---\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: traefik\n  namespace: argocd\nspec:\n  project: default\n  source:\n    chart: traefik\n    repoURL: https://traefik.github.io/charts\n    targetRevision: 21.1.0\n    helm:\n      values: |\n        deployment:\n          replicas: 2\n        service:\n          type: LoadBalancer\n        ingressRoute:\n          dashboard:\n            enabled: true\n        logs:\n          general:\n            level: INFO\n          access:\n            enabled: true\n        metrics:\n          prometheus:\n            enabled: true\n        certificatesResolvers:\n          letsencrypt:\n            acme:\n              email: admin@example.com\n              storage: /data/acme.json\n              httpChallenge:\n                entryPoint: web\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: traefik-system\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-load-balancer-for-api-server\" class=\"mobile-header\">HAProxy Load Balancer for API Server</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install HAProxy for external load balancing\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: haproxy-config\n  namespace: kube-system\ndata:\n  haproxy.cfg: |\n    global\n        log stdout local0\n        daemon\n        \n    defaults\n        mode tcp\n        log global\n        option tcplog\n        timeout connect 5000ms\n        timeout client 50000ms\n        timeout server 50000ms\n        \n    frontend k8s-api-frontend\n        bind *:6443\n        mode tcp\n        default_backend k8s-api-backend\n        \n    backend k8s-api-backend\n        mode tcp\n        balance roundrobin\n        option tcp-check\n        server master1 10.0.1.10:6443 check\n        server master2 10.0.1.11:6443 check\n        server master3 10.0.1.12:6443 check\n---\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: haproxy-lb\n  namespace: kube-system\nspec:\n  selector:\n    matchLabels:\n      app: haproxy-lb\n  template:\n    metadata:\n      labels:\n        app: haproxy-lb\n    spec:\n      hostNetwork: true\n      containers:\n      - name: haproxy\n        image: haproxy:2.8-alpine\n        ports:\n        - containerPort: 6443\n          hostPort: 6443\n        volumeMounts:\n        - name: haproxy-config\n          mountPath: /usr/local/etc/haproxy\n      volumes:\n      - name: haproxy-config\n        configMap:\n          name: haproxy-config\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-statefulset-with-ha\" class=\"mobile-header\">PostgreSQL StatefulSet with HA</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy PostgreSQL cluster with replication\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: postgresql\n---\napiVersion: postgresql.cnpg.io/v1\nkind: Cluster\nmetadata:\n  name: postgresql-cluster\n  namespace: postgresql\nspec:\n  instances: 3\n  primaryUpdateStrategy: unsupervised\n  \n  postgresql:\n    parameters:\n      max_connections: &quot;200&quot;\n      shared_buffers: &quot;256MB&quot;\n      effective_cache_size: &quot;1GB&quot;\n      maintenance_work_mem: &quot;64MB&quot;\n      checkpoint_completion_target: &quot;0.9&quot;\n      wal_buffers: &quot;16MB&quot;\n      default_statistics_target: &quot;100&quot;\n      random_page_cost: &quot;1.1&quot;\n      effective_io_concurrency: &quot;200&quot;\n      \n  bootstrap:\n    initdb:\n      database: app_database\n      owner: app_user\n      secret:\n        name: postgresql-credentials\n        \n  storage:\n    storageClass: &quot;fast-ssd&quot;\n    size: &quot;100Gi&quot;\n    \n  monitoring:\n    enabled: true\n    \n  backup:\n    retentionPolicy: &quot;30d&quot;\n    barmanObjectStore:\n      destinationPath: s3://postgresql-backups/cluster1\n      s3Credentials:\n        accessKeyId:\n          name: backup-credentials\n          key: ACCESS_KEY_ID\n        secretAccessKey:\n          name: backup-credentials\n          key: SECRET_ACCESS_KEY\n      wal:\n        retention: &quot;5d&quot;\n      data:\n        retention: &quot;30d&quot;\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: postgresql-credentials\n  namespace: postgresql\ntype: kubernetes.io/basic-auth\ndata:\n  username: $(echo -n &#039;app_user&#039; | base64)\n  password: $(echo -n &#039;secure_database_password_123!&#039; | base64)\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-cluster-with-percona-operator\" class=\"mobile-header\">MySQL Cluster with Percona Operator</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy MySQL cluster using Percona Operator\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: mysql\n---\napiVersion: pxc.percona.com/v1-12-0\nkind: PerconaXtraDBCluster\nmetadata:\n  name: mysql-cluster\n  namespace: mysql\nspec:\n  crVersion: 1.12.0\n  allowUnsafeConfigurations: false\n  secretsName: mysql-secrets\n  vaultSecretName: &quot;&quot;\n  sslSecretName: &quot;&quot;\n  sslInternalSecretName: &quot;&quot;\n  logCollectorSecretName: &quot;&quot;\n  \n  pxc:\n    size: 3\n    image: percona/percona-xtradb-cluster:8.0.32-24.2\n    autoRecovery: true\n    configuration: |\n      [mysqld]\n      wsrep_provider_options=&quot;debug=1;gcache.size=1G;gcache.page_size=1G&quot;\n      wsrep_debug=1\n      wsrep_cluster_address=gcomm://\n      binlog_format=ROW\n      default_storage_engine=InnoDB\n      innodb_autoinc_lock_mode=2\n      innodb_locks_unsafe_for_binlog=1\n      max_connections=350\n      innodb_buffer_pool_size=512M\n      \n    resources:\n      requests:\n        memory: 1G\n        cpu: 600m\n      limits:\n        memory: 1G\n        cpu: &quot;1&quot;\n        \n    volumeSpec:\n      persistentVolumeClaim:\n        storageClassName: fast-ssd\n        accessModes: [ &quot;ReadWriteOnce&quot; ]\n        resources:\n          requests:\n            storage: 80Gi\n            \n    affinity:\n      antiAffinityTopologyKey: &quot;kubernetes.io/hostname&quot;\n      \n  haproxy:\n    enabled: true\n    size: 2\n    image: percona/percona-xtradb-cluster-operator:1.12.0-haproxy\n    \n    resources:\n      requests:\n        memory: 256M\n        cpu: 250m\n      limits:\n        memory: 256M\n        cpu: 500m\n        \n  proxysql:\n    enabled: false\n    \n  backup:\n    image: percona/percona-xtradb-cluster-operator:1.12.0-pxc8.0-backup\n    schedule:\n      - name: &quot;daily-backup&quot;\n        schedule: &quot;0 2 * * *&quot;\n        keep: 7\n        storageName: s3-backup-storage\n        \n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secrets\n  namespace: mysql\ntype: Opaque\ndata:\n  root: $(echo -n &#039;secure_mysql_root_password!&#039; | base64)\n  xtrabackup: $(echo -n &#039;backup_password_123!&#039; | base64)\n  monitor: $(echo -n &#039;monitor_user_password!&#039; | base64)\n  clustercheck: $(echo -n &#039;cluster_check_password!&#039; | base64)\n  proxysql: $(echo -n &#039;proxysql_admin_password!&#039; | base64)\n  operator: $(echo -n &#039;operator_user_password!&#039; | base64)\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"redis-cluster-deployment\" class=\"mobile-header\">Redis Cluster Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy Redis cluster with Redis Operator\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: redis\n---\napiVersion: redis.redis.opstreelabs.in/v1beta1\nkind: RedisCluster\nmetadata:\n  name: redis-cluster\n  namespace: redis\nspec:\n  clusterSize: 6\n  clusterVersion: v7\n  persistenceEnabled: true\n  redisSecret:\n    name: redis-secret\n    key: password\n  redisConfig:\n    redis-config: |\n      maxmemory 512mb\n      maxmemory-policy allkeys-lru\n      save 900 1\n      save 300 10\n      save 60 10000\n      tcp-keepalive 60\n      tcp-backlog 8192\n      timeout 300\n      \n  storage:\n    volumeClaimTemplate:\n      spec:\n        accessModes: [&quot;ReadWriteOnce&quot;]\n        storageClassName: fast-ssd\n        resources:\n          requests:\n            storage: 50Gi\n            \n  resources:\n    requests:\n      memory: 512Mi\n      cpu: 250m\n    limits:\n      memory: 512Mi\n      cpu: 500m\n      \n  nodeSelector:\n    node-type: &quot;redis-optimized&quot;\n    \n  podSecurityContext:\n    runAsUser: 1000\n    runAsGroup: 1000\n    fsGroup: 1000\n    \n  securityContext:\n    allowPrivilegeEscalation: false\n    readOnlyRootFilesystem: true\n    runAsNonRoot: true\n    capabilities:\n      drop:\n      - ALL\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: redis-secret\n  namespace: redis\ntype: Opaque\ndata:\n  password: $(echo -n &#039;secure_redis_password_123!&#039; | base64)\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"storage-configuration\" class=\"mobile-header\">Storage Configuration</h2>\n<h3 id=\"persistent-volumes-and-storage-classes\" class=\"mobile-header\">Persistent Volumes and Storage Classes</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create local storage class\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: local-storage\nprovisioner: kubernetes.io/no-provisioner\nvolumeBindingMode: WaitForFirstConsumer\nallowVolumeExpansion: true\nreclaimPolicy: Delete\nEOF\n\n# Create persistent volume\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: local-pv-1\nspec:\n  capacity:\n    storage: 10Gi\n  volumeMode: Filesystem\n  accessModes:\n  - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Delete\n  storageClassName: local-storage\n  local:\n    path: /mnt/disk1\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: kubernetes.io/hostname\n          operator: In\n          values:\n          - node-1\nEOF\n\n# Create persistent volume claim\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: app-data-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  storageClassName: local-storage\n  resources:\n    requests:\n      storage: 5Gi\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"nfs-storage-shared-volumes\" class=\"mobile-header\">NFS Storage (Shared volumes)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install NFS client utilities (all nodes)\n# Ubuntu/Debian\nsudo apt install -y nfs-common\n\n# RHEL/CentOS\nsudo yum install -y nfs-utils\n\n# Create NFS storage class\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: nfs-storage\nprovisioner: example.com/nfs\nparameters:\n  server: 192.168.1.200\n  path: /exported/path\n  readOnly: &quot;false&quot;\nreclaimPolicy: Retain\nallowVolumeExpansion: true\nmountOptions:\n  - hard\n  - nfsvers=4.1\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"firewall-configuration-cross-platform\" class=\"mobile-header\">Firewall Configuration (Cross-Platform)</h2>\n<h3 id=\"required-ports\" class=\"mobile-header\">Required Ports</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Control plane ports\nsudo firewall-cmd --permanent --add-port=6443/tcp    # API server\nsudo firewall-cmd --permanent --add-port=2379-2380/tcp  # etcd\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=10259/tcp  # kube-scheduler\nsudo firewall-cmd --permanent --add-port=10257/tcp  # kube-controller-manager\n\n# Worker node ports\nsudo firewall-cmd --permanent --add-port=10250/tcp  # kubelet\nsudo firewall-cmd --permanent --add-port=30000-32767/tcp  # NodePort services\n\n# CNI ports (Flannel)\nsudo firewall-cmd --permanent --add-port=8285/udp   # Flannel\nsudo firewall-cmd --permanent --add-port=8472/udp   # Flannel VXLAN\n\nsudo firewall-cmd --reload\n\n# UFW (Ubuntu/Debian)\nsudo ufw allow 6443/tcp\nsudo ufw allow 2379:2380/tcp\nsudo ufw allow 10250/tcp\nsudo ufw allow 10259/tcp\nsudo ufw allow 10257/tcp\nsudo ufw allow 30000:32767/tcp\nsudo ufw allow 8285/udp\nsudo ufw allow 8472/udp\n\n# iptables (manual configuration)\nsudo iptables -A INPUT -p tcp --dport 6443 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 2379:2380 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 10250 -j ACCEPT</code></pre>\n      </div>\n    </div>\n<h3 id=\"selinux-configuration-rhelcentos\" class=\"mobile-header\">SELinux Configuration (RHEL/CentOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure SELinux for Kubernetes\nsudo setenforce 0\nsudo sed -i &#039;s/^SELINUX=enforcing$/SELINUX=permissive/&#039; /etc/selinux/config\n\n# Alternative: Configure SELinux policies instead of disabling\nsudo setsebool -P container_manage_cgroup true\nsudo setsebool -P container_use_cgroup true\n\n# Install SELinux policies for containers\nsudo yum install -y container-selinux\n\n# Check for denials\nsudo ausearch -m AVC,USER_AVC -ts recent</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h2>\n<h3 id=\"multi-master-cluster-with-kubeadm\" class=\"mobile-header\">Multi-Master Cluster with kubeadm</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># On first control plane node\nsudo kubeadm init \\\n  --control-plane-endpoint=&quot;k8s-cluster.example.com:6443&quot; \\\n  --upload-certs \\\n  --pod-network-cidr=10.244.0.0/16\n\n# Note the commands to join additional control plane nodes and workers\n\n# On additional control plane nodes:\nsudo kubeadm join k8s-cluster.example.com:6443 \\\n  --token abcdef.0123456789abcdef \\\n  --discovery-token-ca-cert-hash sha256:1234... \\\n  --control-plane \\\n  --certificate-key 1234...\n\n# Configure load balancer (HAProxy example)\ncat &lt;&lt;EOF | sudo tee /etc/haproxy/haproxy.cfg\nglobal\n    log stdout local0\n    chroot /var/lib/haproxy\n    stats socket /run/haproxy/admin.sock mode 660 level admin\n    stats timeout 30s\n    user haproxy\n    group haproxy\n    daemon\n\ndefaults\n    mode tcp\n    log global\n    option tcplog\n    option dontlognull\n    timeout connect 5000\n    timeout client 50000\n    timeout server 50000\n\nfrontend k8s-api\n    bind *:6443\n    mode tcp\n    default_backend k8s-api-backend\n\nbackend k8s-api-backend\n    mode tcp\n    balance roundrobin\n    server k8s-master-1 192.168.1.101:6443 check\n    server k8s-master-2 192.168.1.102:6443 check\n    server k8s-master-3 192.168.1.103:6443 check\nEOF\n\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"external-etcd-cluster\" class=\"mobile-header\">External etcd Cluster</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install etcd on dedicated nodes\nETCD_VER=v3.5.9\ncurl -L https://github.com/etcd-io/etcd/releases/download/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzf etcd-${ETCD_VER}-linux-amd64.tar.gz\nsudo mv etcd-${ETCD_VER}-linux-amd64/{etcd,etcdctl} /usr/local/bin/\n\n# Create etcd configuration\nsudo tee /etc/systemd/system/etcd.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=etcd\nDocumentation=https://github.com/coreos\n\n[Service]\nType=notify\nUser=etcd\nExecStart=/usr/local/bin/etcd \\\\\n  --name=etcd-1 \\\\\n  --data-dir=/var/lib/etcd \\\\\n  --listen-client-urls=https://192.168.1.201:2379 \\\\\n  --advertise-client-urls=https://192.168.1.201:2379 \\\\\n  --listen-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-advertise-peer-urls=https://192.168.1.201:2380 \\\\\n  --initial-cluster=etcd-1=https://192.168.1.201:2380,etcd-2=https://192.168.1.202:2380,etcd-3=https://192.168.1.203:2380 \\\\\n  --initial-cluster-token=etcd-cluster-1 \\\\\n  --initial-cluster-state=new \\\\\n  --cert-file=/etc/etcd/pki/server.crt \\\\\n  --key-file=/etc/etcd/pki/server.key \\\\\n  --peer-cert-file=/etc/etcd/pki/peer.crt \\\\\n  --peer-key-file=/etc/etcd/pki/peer.key \\\\\n  --trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-trusted-ca-file=/etc/etcd/pki/ca.crt \\\\\n  --peer-client-cert-auth \\\\\n  --client-cert-auth\nRestart=on-failure\nRestartSec=5\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Create etcd user and directories\nsudo useradd -r etcd\nsudo mkdir -p /var/lib/etcd /etc/etcd/pki\nsudo chown etcd:etcd /var/lib/etcd\nsudo systemctl enable --now etcd</code></pre>\n      </div>\n    </div>\n<h2 id=\"application-deployment-examples\" class=\"mobile-header\">Application Deployment Examples</h2>\n<h3 id=\"secure-application-deployment\" class=\"mobile-header\">Secure Application Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create namespace with network policies\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: myapp\n  labels:\n    pod-security.kubernetes.io/enforce: restricted\n    pod-security.kubernetes.io/audit: restricted\n    pod-security.kubernetes.io/warn: restricted\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: myapp-sa\n  namespace: myapp\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  namespace: myapp\n  name: myapp-role\nrules:\n- apiGroups: [&quot;&quot;]\n  resources: [&quot;configmaps&quot;, &quot;secrets&quot;]\n  verbs: [&quot;get&quot;, &quot;list&quot;]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: myapp-rolebinding\n  namespace: myapp\nsubjects:\n- kind: ServiceAccount\n  name: myapp-sa\n  namespace: myapp\nroleRef:\n  kind: Role\n  name: myapp-role\n  apiGroup: rbac.authorization.k8s.io\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-deployment\n  namespace: myapp\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      serviceAccountName: myapp-sa\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        runAsGroup: 3000\n        fsGroup: 2000\n        seccompProfile:\n          type: RuntimeDefault\n      containers:\n      - name: app\n        image: nginx:alpine\n        ports:\n        - containerPort: 80\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n        resources:\n          requests:\n            memory: &quot;64Mi&quot;\n            cpu: &quot;250m&quot;\n          limits:\n            memory: &quot;128Mi&quot;\n            cpu: &quot;500m&quot;\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        volumeMounts:\n        - name: tmp-volume\n          mountPath: /tmp\n        - name: cache-volume\n          mountPath: /var/cache/nginx\n      volumes:\n      - name: tmp-volume\n        emptyDir: {}\n      - name: cache-volume\n        emptyDir: {}\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: myapp-service\n  namespace: myapp\nspec:\n  selector:\n    app: myapp\n  ports:\n  - port: 80\n    targetPort: 80\n  type: ClusterIP\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"statefulset-with-persistent-storage\" class=\"mobile-header\">StatefulSet with Persistent Storage</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy StatefulSet application (database example)\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: mysql-statefulset\n  namespace: myapp\nspec:\n  serviceName: mysql-service\n  replicas: 3\n  selector:\n    matchLabels:\n      app: mysql\n  template:\n    metadata:\n      labels:\n        app: mysql\n    spec:\n      securityContext:\n        runAsUser: 999\n        runAsGroup: 999\n        fsGroup: 999\n      containers:\n      - name: mysql\n        image: mysql:8.0\n        ports:\n        - containerPort: 3306\n          name: mysql\n        env:\n        - name: MYSQL_ROOT_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: mysql-secret\n              key: root-password\n        volumeMounts:\n        - name: mysql-storage\n          mountPath: /var/lib/mysql\n        resources:\n          requests:\n            memory: &quot;1Gi&quot;\n            cpu: &quot;500m&quot;\n          limits:\n            memory: &quot;2Gi&quot;\n            cpu: &quot;1000m&quot;\n  volumeClaimTemplates:\n  - metadata:\n      name: mysql-storage\n    spec:\n      accessModes: [&quot;ReadWriteOnce&quot;]\n      storageClassName: &quot;local-storage&quot;\n      resources:\n        requests:\n          storage: 10Gi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: mysql-service\n  namespace: myapp\nspec:\n  clusterIP: None\n  selector:\n    app: mysql\n  ports:\n  - port: 3306\n    targetPort: 3306\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: mysql-secret\n  namespace: myapp\ntype: Opaque\ndata:\n  root-password: $(echo -n &#039;secure_mysql_password&#039; | base64)\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"etcd-backup\" class=\"mobile-header\">etcd Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create etcd backup script\nsudo tee /usr/local/bin/etcd-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/etcd&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Create etcd snapshot\nETCDCTL_API=3 etcdctl snapshot save ${BACKUP_DIR}/etcd-backup-${DATE}.db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Verify snapshot\nETCDCTL_API=3 etcdctl snapshot status ${BACKUP_DIR}/etcd-backup-${DATE}.db -w table\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;etcd-backup-*.db&quot; -type f -mtime +7 -delete\n\necho &quot;etcd backup completed: etcd-backup-${DATE}.db&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/etcd-backup.sh\n\n# Schedule backup\necho &quot;0 2 * * * root /usr/local/bin/etcd-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"cluster-state-backup\" class=\"mobile-header\">Cluster State Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup all cluster resources\nkubectl get all --all-namespaces -o yaml &gt; cluster-backup-$(date +%Y%m%d).yaml\n\n# Backup specific resource types\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml &gt; cluster-data-backup-$(date +%Y%m%d).yaml\n\n# Create backup script for all resources\nsudo tee /usr/local/bin/k8s-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/kubernetes&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup all cluster resources\nkubectl get all --all-namespaces -o yaml &gt; ${BACKUP_DIR}/cluster-all-${DATE}.yaml\n\n# Backup critical resources separately\nkubectl get configmaps,secrets,persistentvolumes,persistentvolumeclaims --all-namespaces -o yaml &gt; ${BACKUP_DIR}/cluster-data-${DATE}.yaml\n\n# Backup custom resources\nkubectl get crd -o yaml &gt; ${BACKUP_DIR}/cluster-crd-${DATE}.yaml\n\n# Backup RBAC\nkubectl get clusterroles,clusterrolebindings,roles,rolebindings --all-namespaces -o yaml &gt; ${BACKUP_DIR}/cluster-rbac-${DATE}.yaml\n\n# etcd backup\n/usr/local/bin/etcd-backup.sh\n\n# Compress backups\ntar -czf ${BACKUP_DIR}/k8s-complete-backup-${DATE}.tar.gz ${BACKUP_DIR}/*-${DATE}.yaml\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;*-${DATE:0:8}*&quot; -type f -mtime +7 -delete\n\necho &quot;Kubernetes backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/k8s-backup.sh\necho &quot;0 3 * * * root /usr/local/bin/k8s-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-testing\" class=\"mobile-header\">Verification and Testing</h2>\n<h3 id=\"cluster-health-checks\" class=\"mobile-header\">Cluster Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check cluster components\nkubectl get componentstatuses\nkubectl cluster-info\nkubectl get nodes -o wide\n\n# Check all pods in system namespaces\nkubectl get pods --all-namespaces\nkubectl get events --all-namespaces --sort-by=.metadata.creationTimestamp\n\n# Test DNS resolution\nkubectl run test-dns --image=busybox --rm -it --restart=Never -- nslookup kubernetes.default\n\n# Test pod networking\nkubectl run test-pod-1 --image=nginx --port=80\nkubectl expose pod test-pod-1 --port=80 --type=ClusterIP\nkubectl run test-pod-2 --image=busybox --rm -it --restart=Never -- wget -qO- test-pod-1\n\n# Check resource usage\nkubectl top nodes\nkubectl top pods --all-namespaces\n\n# Verify RBAC\nkubectl auth can-i create deployments\nkubectl auth can-i get secrets --as=system:serviceaccount:default:default\n\n# Test persistent storage\nkubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: test-pvc\nspec:\n  accessModes:\n  - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-storage-pod\nspec:\n  containers:\n  - name: app\n    image: busybox\n    command: [&#039;sh&#039;, &#039;-c&#039;, &#039;echo &quot;Storage test&quot; &gt; /data/test.txt &amp;&amp; cat /data/test.txt &amp;&amp; sleep 3600&#039;]\n    volumeMounts:\n    - name: storage\n      mountPath: /data\n  volumes:\n  - name: storage\n    persistentVolumeClaim:\n      claimName: test-pvc\nEOF\n\nkubectl logs test-storage-pod\nkubectl delete pod test-storage-pod\nkubectl delete pvc test-pvc</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-validation\" class=\"mobile-header\">Security Validation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run CIS Kubernetes Benchmark\ndocker run --rm -v $(pwd):/tmp aquasec/kube-bench:latest run --targets master,node,etcd,policies\n\n# Check pod security policies\nkubectl get psp  # For older versions\nkubectl get podsecuritypolicies  # For older versions\n\n# Verify network policies are working\nkubectl describe networkpolicy default-deny-all\n\n# Check for privileged containers\nkubectl get pods --all-namespaces -o jsonpath=&#039;{range .items[*]}{.metadata.name}{&quot;\\t&quot;}{.spec.securityContext.privileged}{&quot;\\n&quot;}{end}&#039; | grep true\n\n# Audit security contexts\nkubectl get pods --all-namespaces -o jsonpath=&#039;{range .items[*]}{.metadata.namespace}{&quot;\\t&quot;}{.metadata.name}{&quot;\\t&quot;}{.spec.securityContext}{&quot;\\n&quot;}{end}&#039;\n\n# Check for containers running as root\nkubectl get pods --all-namespaces -o jsonpath=&#039;{range .items[*]}{.metadata.name}{&quot;\\t&quot;}{.spec.containers[*].securityContext.runAsUser}{&quot;\\n&quot;}{end}&#039; | grep -E &#039;\\t0$|\\t$&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Node not ready issues\nkubectl describe node &lt;node-name&gt;\nkubectl get events --sort-by=.metadata.creationTimestamp\n\n# Check kubelet logs\nsudo journalctl -u kubelet -f\n\n# Check container runtime\nsudo systemctl status containerd\nsudo crictl pods\n\n# Network issues\nkubectl get pods -n kube-system\nkubectl describe pod &lt;cni-pod-name&gt; -n kube-system\n\n# Permission issues (SELinux)\nsudo ausearch -m AVC -ts recent\nsudo setsebool -P container_manage_cgroup true\n\n# Certificate issues\nsudo kubeadm certs check-expiration\nopenssl x509 -in /etc/kubernetes/pki/apiserver.crt -text -noout\n\n# Resource exhaustion\nkubectl describe node &lt;node-name&gt;\nkubectl top nodes\nkubectl top pods --all-namespaces --sort-by=memory\n\n# etcd issues\nsudo etcdctl endpoint health \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\n# Reset cluster (if needed)\nsudo kubeadm reset\nsudo rm -rf /etc/cni/net.d\nsudo rm -rf $HOME/.kube/config</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-pod-issues\" class=\"mobile-header\">Debug Pod Issues</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Debug failing pods\nkubectl describe pod &lt;pod-name&gt;\nkubectl logs &lt;pod-name&gt; -c &lt;container-name&gt;\nkubectl get events --field-selector involvedObject.name=&lt;pod-name&gt;\n\n# Debug networking\nkubectl run debug-pod --image=nicolaka/netshoot --rm -it --restart=Never\n\n# Check resource constraints\nkubectl describe resourcequota -n &lt;namespace&gt;\nkubectl describe limitrange -n &lt;namespace&gt;\n\n# Debug storage issues\nkubectl describe pvc &lt;pvc-name&gt;\nkubectl get events --field-selector involvedObject.name=&lt;pvc-name&gt;\n\n# Debug service connectivity\nkubectl run debug --image=busybox --rm -it --restart=Never -- nslookup &lt;service-name&gt;\nkubectl get endpoints &lt;service-name&gt;\n\n# Debug ingress issues\nkubectl describe ingress &lt;ingress-name&gt;\nkubectl get events --field-selector involvedObject.name=&lt;ingress-name&gt;\nkubectl logs -n ingress-nginx deployment/ingress-nginx-controller</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-level-tuning\" class=\"mobile-header\">System-Level Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel optimization for Kubernetes\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;EOF\n# Kubernetes performance tuning\nnet.core.somaxconn = 32768\nnet.core.netdev_max_backlog = 5000\nnet.ipv4.tcp_max_syn_backlog = 8192\nnet.ipv4.tcp_max_tw_buckets = 2000000\nnet.ipv4.tcp_tw_reuse = 1\nnet.ipv4.tcp_fin_timeout = 10\nnet.ipv4.ip_local_port_range = 1024 65000\nnet.core.rmem_default = 262144\nnet.core.rmem_max = 134217728\nnet.core.wmem_default = 262144\nnet.core.wmem_max = 134217728\nnet.ipv4.tcp_rmem = 4096 87380 134217728\nnet.ipv4.tcp_wmem = 4096 65536 134217728\nfs.file-max = 2097152\nfs.inotify.max_user_instances = 8192\nfs.inotify.max_user_watches = 1048576\nvm.swappiness = 0\nvm.overcommit_memory = 1\nvm.dirty_ratio = 80\nvm.dirty_background_ratio = 5\nkernel.pid_max = 4194304\nEOF\n\nsudo sysctl -p\n\n# Set resource limits\nsudo tee -a /etc/security/limits.conf &gt; /dev/null &lt;&lt;EOF\nroot soft nofile 65536\nroot hard nofile 65536\n* soft nofile 65536\n* hard nofile 65536\n* soft nproc 65536\n* hard nproc 65536\nEOF\n\n# Configure systemd limits for containerd and kubelet\nsudo mkdir -p /etc/systemd/system/containerd.service.d/\nsudo tee /etc/systemd/system/containerd.service.d/limits.conf &gt; /dev/null &lt;&lt;EOF\n[Service]\nLimitNOFILE=1048576\nLimitNPROC=1048576\nLimitCORE=infinity\nOOMScoreAdjust=-999\nEOF\n\nsudo mkdir -p /etc/systemd/system/kubelet.service.d/\nsudo tee /etc/systemd/system/kubelet.service.d/limits.conf &gt; /dev/null &lt;&lt;EOF\n[Service]\nLimitNOFILE=1048576\nLimitNPROC=1048576\nLimitCORE=infinity\nOOMScoreAdjust=-999\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart containerd kubelet</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-performance-configuration\" class=\"mobile-header\">Kubernetes Performance Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize kubelet configuration\nsudo tee /var/lib/kubelet/config.yaml &gt; /dev/null &lt;&lt;EOF\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\naddress: 0.0.0.0\nport: 10250\nreadOnlyPort: 0\nauthentication:\n  webhook:\n    enabled: true\nauthorization:\n  mode: Webhook\nclusterDomain: cluster.local\nclusterDNS:\n- 10.96.0.10\nmaxPods: 250\npodsPerCore: 10\ncgroupDriver: systemd\ncontainerLogMaxSize: 50Mi\ncontainerLogMaxFiles: 5\neventRecordQPS: 50\neventBurst: 100\nkubeAPIQPS: 50\nkubeAPIBurst: 100\nserializeImagePulls: false\nregistryPullQPS: 10\nregistryBurst: 20\nsyncFrequency: 1m\nfileCheckFrequency: 20s\nhttpCheckFrequency: 20s\nnodeStatusUpdateFrequency: 10s\nimageMinimumGCAge: 2m\nimageGCHighThresholdPercent: 85\nimageGCLowThresholdPercent: 80\nvolumeStatsAggPeriod: 1m\nsystemReserved:\n  cpu: 200m\n  memory: 512Mi\n  ephemeral-storage: 2Gi\nkubeReserved:\n  cpu: 200m\n  memory: 512Mi\n  ephemeral-storage: 2Gi\nEOF\n\n# Optimize API server configuration\nsudo sed -i &#039;/- kube-apiserver/a\\\n    - --max-requests-inflight=2000\\\n    - --max-mutating-requests-inflight=1000\\\n    - --watch-cache-sizes=nodes#100,pods#1000,replicationcontrollers#500\\\n    - --target-ram-mb=2048\\\n    - --event-ttl=168h0m0s&#039; /etc/kubernetes/manifests/kube-apiserver.yaml\n\n# Optimize etcd configuration\nsudo tee -a /etc/kubernetes/manifests/etcd.yaml &gt; /dev/null &lt;&lt;EOF\n    - --max-request-bytes=33554432\n    - --quota-backend-bytes=8589934592\n    - --snapshot-count=10000\n    - --heartbeat-interval=100\n    - --election-timeout=1000\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-client-library\" class=\"mobile-header\">Python Client Library</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># kubernetes-client example\nfrom kubernetes import client, config\nimport json\n\n# Load kubeconfig\nconfig.load_kube_config()  # or config.load_incluster_config() for in-cluster\n\n# Initialize API clients\nv1 = client.CoreV1Api()\napps_v1 = client.AppsV1Api()\nnetworking_v1 = client.NetworkingV1Api()\n\n# Create a namespace\nnamespace = client.V1Namespace(\n    metadata=client.V1ObjectMeta(name=&quot;python-app&quot;)\n)\nv1.create_namespace(body=namespace)\n\n# Create a deployment\ndeployment = client.V1Deployment(\n    metadata=client.V1ObjectMeta(name=&quot;nginx-deployment&quot;),\n    spec=client.V1DeploymentSpec(\n        replicas=3,\n        selector=client.V1LabelSelector(\n            match_labels={&quot;app&quot;: &quot;nginx&quot;}\n        ),\n        template=client.V1PodTemplateSpec(\n            metadata=client.V1ObjectMeta(\n                labels={&quot;app&quot;: &quot;nginx&quot;}\n            ),\n            spec=client.V1PodSpec(\n                containers=[\n                    client.V1Container(\n                        name=&quot;nginx&quot;,\n                        image=&quot;nginx:alpine&quot;,\n                        ports=[client.V1ContainerPort(container_port=80)],\n                        resources=client.V1ResourceRequirements(\n                            requests={&quot;cpu&quot;: &quot;100m&quot;, &quot;memory&quot;: &quot;128Mi&quot;},\n                            limits={&quot;cpu&quot;: &quot;500m&quot;, &quot;memory&quot;: &quot;512Mi&quot;}\n                        )\n                    )\n                ]\n            )\n        )\n    )\n)\n\napps_v1.create_namespaced_deployment(\n    namespace=&quot;python-app&quot;, \n    body=deployment\n)\n\n# Create a service\nservice = client.V1Service(\n    metadata=client.V1ObjectMeta(name=&quot;nginx-service&quot;),\n    spec=client.V1ServiceSpec(\n        selector={&quot;app&quot;: &quot;nginx&quot;},\n        ports=[\n            client.V1ServicePort(port=80, target_port=80)\n        ],\n        type=&quot;LoadBalancer&quot;\n    )\n)\n\nv1.create_namespaced_service(namespace=&quot;python-app&quot;, body=service)\n\n# Monitor pods\ndef monitor_pods():\n    pods = v1.list_namespaced_pod(namespace=&quot;python-app&quot;)\n    for pod in pods.items:\n        print(f&quot;Pod: {pod.metadata.name}, Status: {pod.status.phase}&quot;)\n\nmonitor_pods()\n\n# Stream logs\ndef stream_logs(pod_name):\n    for line in v1.read_namespaced_pod_log(\n        name=pod_name, \n        namespace=&quot;python-app&quot;, \n        follow=True, \n        _preload_content=False\n    ).stream():\n        print(line.decode(&#039;utf-8&#039;), end=&#039;&#039;)\n\n# Clean up\napps_v1.delete_namespaced_deployment(name=&quot;nginx-deployment&quot;, namespace=&quot;python-app&quot;)\nv1.delete_namespaced_service(name=&quot;nginx-service&quot;, namespace=&quot;python-app&quot;)\nv1.delete_namespace(name=&quot;python-app&quot;)</code></pre>\n      </div>\n    </div>\n<h3 id=\"nodejs-client-example\" class=\"mobile-header\">Node.js Client Example</h3>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// kubernetes-example.js\nconst k8s = require(&#039;@kubernetes/client-node&#039;);\n\n// Load kubeconfig\nconst kc = new k8s.KubeConfig();\nkc.loadFromDefault();\n\nconst k8sApi = kc.makeApiClient(k8s.CoreV1Api);\nconst k8sAppsApi = kc.makeApiClient(k8s.AppsV1Api);\n\nconst namespace = &#039;nodejs-app&#039;;\n\nasync function createNamespace() {\n    const namespaceManifest = {\n        metadata: {\n            name: namespace\n        }\n    };\n    \n    try {\n        await k8sApi.createNamespace(namespaceManifest);\n        console.log(`Namespace ${namespace} created`);\n    } catch (error) {\n        console.error(&#039;Error creating namespace:&#039;, error.response?.body || error.message);\n    }\n}\n\nasync function createDeployment() {\n    const deploymentManifest = {\n        metadata: {\n            name: &#039;nginx-deployment&#039;\n        },\n        spec: {\n            replicas: 3,\n            selector: {\n                matchLabels: {\n                    app: &#039;nginx&#039;\n                }\n            },\n            template: {\n                metadata: {\n                    labels: {\n                        app: &#039;nginx&#039;\n                    }\n                },\n                spec: {\n                    containers: [{\n                        name: &#039;nginx&#039;,\n                        image: &#039;nginx:alpine&#039;,\n                        ports: [{\n                            containerPort: 80\n                        }],\n                        resources: {\n                            requests: {\n                                cpu: &#039;100m&#039;,\n                                memory: &#039;128Mi&#039;\n                            },\n                            limits: {\n                                cpu: &#039;500m&#039;,\n                                memory: &#039;512Mi&#039;\n                            }\n                        }\n                    }]\n                }\n            }\n        }\n    };\n    \n    try {\n        await k8sAppsApi.createNamespacedDeployment(namespace, deploymentManifest);\n        console.log(&#039;Deployment created: nginx-deployment&#039;);\n    } catch (error) {\n        console.error(&#039;Error creating deployment:&#039;, error.response?.body || error.message);\n    }\n}\n\nasync function createService() {\n    const serviceManifest = {\n        metadata: {\n            name: &#039;nginx-service&#039;\n        },\n        spec: {\n            selector: {\n                app: &#039;nginx&#039;\n            },\n            ports: [{\n                port: 80,\n                targetPort: 80\n            }],\n            type: &#039;LoadBalancer&#039;\n        }\n    };\n    \n    try {\n        await k8sApi.createNamespacedService(namespace, serviceManifest);\n        console.log(&#039;Service created: nginx-service&#039;);\n    } catch (error) {\n        console.error(&#039;Error creating service:&#039;, error.response?.body || error.message);\n    }\n}\n\nasync function listPods() {\n    try {\n        const response = await k8sApi.listNamespacedPod(namespace);\n        console.log(`Found ${response.body.items.length} pods:`);\n        response.body.items.forEach(pod =&gt; {\n            console.log(`Pod: ${pod.metadata.name}, Status: ${pod.status.phase}`);\n        });\n    } catch (error) {\n        console.error(&#039;Error listing pods:&#039;, error.response?.body || error.message);\n    }\n}\n\nasync function cleanup() {\n    try {\n        await k8sAppsApi.deleteNamespacedDeployment(&#039;nginx-deployment&#039;, namespace);\n        await k8sApi.deleteNamespacedService(&#039;nginx-service&#039;, namespace);\n        await k8sApi.deleteNamespace(namespace);\n        console.log(&#039;Resources cleaned up&#039;);\n    } catch (error) {\n        console.error(&#039;Error during cleanup:&#039;, error.response?.body || error.message);\n    }\n}\n\nasync function main() {\n    await createNamespace();\n    await createDeployment();\n    await createService();\n    \n    // Wait a bit for pods to start\n    setTimeout(async () =&gt; {\n        await listPods();\n        await cleanup();\n    }, 5000);\n}\n\nmain().catch(console.error);</code></pre>\n      </div>\n    </div>\n<h3 id=\"java-client-example\" class=\"mobile-header\">Java Client Example</h3>\n<div class=\"mobile-code-block\" data-language=\"java\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">java</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-java\">// KubernetesExample.java\nimport io.kubernetes.client.openapi.ApiClient;\nimport io.kubernetes.client.openapi.ApiException;\nimport io.kubernetes.client.openapi.Configuration;\nimport io.kubernetes.client.openapi.apis.AppsV1Api;\nimport io.kubernetes.client.openapi.apis.CoreV1Api;\nimport io.kubernetes.client.openapi.models.*;\nimport io.kubernetes.client.util.Config;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class KubernetesExample {\n    public static void main(String[] args) throws Exception {\n        // Load kubeconfig\n        ApiClient client = Config.defaultClient();\n        Configuration.setDefaultApiClient(client);\n        \n        CoreV1Api coreV1Api = new CoreV1Api();\n        AppsV1Api appsV1Api = new AppsV1Api();\n        \n        String namespace = &quot;java-app&quot;;\n        \n        // Create namespace\n        V1Namespace ns = new V1Namespace()\n            .metadata(new V1ObjectMeta().name(namespace));\n        \n        try {\n            coreV1Api.createNamespace(ns, null, null, null, null);\n            System.out.println(&quot;Namespace created: &quot; + namespace);\n        } catch (ApiException e) {\n            System.err.println(&quot;Failed to create namespace: &quot; + e.getResponseBody());\n        }\n        \n        // Create deployment\n        Map&lt;String, String&gt; labels = new HashMap&lt;&gt;();\n        labels.put(&quot;app&quot;, &quot;nginx&quot;);\n        \n        V1Deployment deployment = new V1Deployment()\n            .metadata(new V1ObjectMeta().name(&quot;nginx-deployment&quot;))\n            .spec(new V1DeploymentSpec()\n                .replicas(3)\n                .selector(new V1LabelSelector().matchLabels(labels))\n                .template(new V1PodTemplateSpec()\n                    .metadata(new V1ObjectMeta().labels(labels))\n                    .spec(new V1PodSpec()\n                        .containers(Collections.singletonList(\n                            new V1Container()\n                                .name(&quot;nginx&quot;)\n                                .image(&quot;nginx:alpine&quot;)\n                                .ports(Collections.singletonList(\n                                    new V1ContainerPort().containerPort(80)\n                                ))\n                                .resources(new V1ResourceRequirements()\n                                    .requests(Map.of(\n                                        &quot;cpu&quot;, Quantity.fromString(&quot;100m&quot;),\n                                        &quot;memory&quot;, Quantity.fromString(&quot;128Mi&quot;)\n                                    ))\n                                    .limits(Map.of(\n                                        &quot;cpu&quot;, Quantity.fromString(&quot;500m&quot;),\n                                        &quot;memory&quot;, Quantity.fromString(&quot;512Mi&quot;)\n                                    ))\n                                )\n                        ))\n                    )\n                )\n            );\n            \n        try {\n            appsV1Api.createNamespacedDeployment(namespace, deployment, null, null, null, null);\n            System.out.println(&quot;Deployment created: nginx-deployment&quot;);\n        } catch (ApiException e) {\n            System.err.println(&quot;Failed to create deployment: &quot; + e.getResponseBody());\n        }\n        \n        // Create service\n        V1Service service = new V1Service()\n            .metadata(new V1ObjectMeta().name(&quot;nginx-service&quot;))\n            .spec(new V1ServiceSpec()\n                .selector(labels)\n                .ports(Collections.singletonList(\n                    new V1ServicePort().port(80).targetPort(new IntOrString(80))\n                ))\n                .type(&quot;LoadBalancer&quot;)\n            );\n            \n        try {\n            coreV1Api.createNamespacedService(namespace, service, null, null, null, null);\n            System.out.println(&quot;Service created: nginx-service&quot;);\n        } catch (ApiException e) {\n            System.err.println(&quot;Failed to create service: &quot; + e.getResponseBody());\n        }\n        \n        // List pods\n        try {\n            V1PodList pods = coreV1Api.listNamespacedPod(namespace, null, null, null, null, null, null, null, null, null, null);\n            System.out.println(&quot;Found &quot; + pods.getItems().size() + &quot; pods:&quot;);\n            for (V1Pod pod : pods.getItems()) {\n                System.out.println(&quot;Pod: &quot; + pod.getMetadata().getName() + \n                                 &quot;, Status: &quot; + pod.getStatus().getPhase());\n            }\n        } catch (ApiException e) {\n            System.err.println(&quot;Failed to list pods: &quot; + e.getResponseBody());\n        }\n        \n        // Cleanup\n        try {\n            appsV1Api.deleteNamespacedDeployment(&quot;nginx-deployment&quot;, namespace, null, null, null, null, null, null);\n            coreV1Api.deleteNamespacedService(&quot;nginx-service&quot;, namespace, null, null, null, null, null, null);\n            coreV1Api.deleteNamespace(namespace, null, null, null, null, null, null);\n            System.out.println(&quot;Resources cleaned up&quot;);\n        } catch (ApiException e) {\n            System.err.println(&quot;Failed to cleanup: &quot; + e.getResponseBody());\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check current Kubernetes version\nkubectl version --short\n\n# Plan upgrade with kubeadm\nsudo kubeadm upgrade plan\n\n# Upgrade kubeadm first\nsudo apt update &amp;&amp; sudo apt-mark unhold kubeadm\nsudo apt install -y kubeadm=1.29.1-00\nsudo apt-mark hold kubeadm\n\n# Or for RHEL/CentOS\nsudo yum update -y kubeadm-1.29.1\n\n# Upgrade control plane\nsudo kubeadm upgrade apply v1.29.1\n\n# Upgrade kubelet and kubectl\nsudo apt-mark unhold kubelet kubectl\nsudo apt install -y kubelet=1.29.1-00 kubectl=1.29.1-00\nsudo apt-mark hold kubelet kubectl\n\nsudo systemctl daemon-reload\nsudo systemctl restart kubelet\n\n# Drain and upgrade worker nodes\nkubectl drain &lt;worker-node&gt; --ignore-daemonsets --delete-emptydir-data\n# On worker node:\nsudo kubeadm upgrade node\nsudo apt install -y kubelet=1.29.1-00 kubectl=1.29.1-00\nsudo systemctl daemon-reload\nsudo systemctl restart kubelet\n\n# Uncordon worker node\nkubectl uncordon &lt;worker-node&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"maintenance-tasks\" class=\"mobile-header\">Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Weekly maintenance script\n#!/bin/bash\n# k8s-maintenance.sh\n\n# Check cluster health\necho &quot;=== Cluster Health Check ===&quot;\nkubectl get nodes -o wide\nkubectl get pods --all-namespaces | grep -v Running | grep -v Completed\n\n# Check resource usage\necho &quot;=== Resource Usage ===&quot;\nkubectl top nodes\nkubectl top pods --all-namespaces --sort-by=cpu | head -10\n\n# Check certificate expiry\necho &quot;=== Certificate Expiry ===&quot;\nsudo kubeadm certs check-expiration\n\n# Clean up completed jobs\necho &quot;=== Cleanup ===&quot;\nkubectl get jobs --all-namespaces -o json | jq -r &#039;.items[] | select(.status.conditions[]?.type == &quot;Complete&quot;) | &quot;\\(.metadata.namespace) \\(.metadata.name)&quot;&#039; | xargs -l bash -c &#039;kubectl delete job $1 -n $0&#039;\n\n# Clean up evicted pods\nkubectl get pods --all-namespaces --field-selector=status.phase=Failed -o json | jq -r &#039;.items[] | &quot;\\(.metadata.namespace) \\(.metadata.name)&quot;&#039; | xargs -l bash -c &#039;kubectl delete pod $1 -n $0&#039;\n\n# Check for security updates\necho &quot;=== Security Updates Available ===&quot;\nsudo apt list --upgradable | grep -i security\n\n# Backup etcd\necho &quot;=== etcd Backup ===&quot;\nsudo etcdctl snapshot save /backup/etcd-$(date +%Y%m%d_%H%M%S).db \\\n  --endpoints=https://127.0.0.1:2379 \\\n  --cacert=/etc/kubernetes/pki/etcd/ca.crt \\\n  --cert=/etc/kubernetes/pki/etcd/server.crt \\\n  --key=/etc/kubernetes/pki/etcd/server.key\n\necho &quot;Maintenance completed at: $(date)&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/reference/kubectl/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">kubectl Reference</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.io/docs/concepts/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.cisecurity.org/benchmark/kubernetes\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">CIS Kubernetes Benchmark</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Kubernetes_Security_Cheat_Sheet.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">OWASP Kubernetes Security Cheat Sheet</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/kelseyhightower/kubernetes-the-hard-way\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Kubernetes The Hard Way</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://kubernetes.academy/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Kubernetes Academy</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://landscape.cncf.io/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">CNCF Landscape</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"35 min","wordCount":6949,"lastBuilt":"2025-09-14T03:45:42.690Z"}]},"__N_SSG":true}