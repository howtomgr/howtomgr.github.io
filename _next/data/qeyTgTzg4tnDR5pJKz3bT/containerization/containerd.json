{"pageProps":{"guide":{"name":"containerd","displayName":"containerd Installation Guide","slug":"containerd","description":"containerd is a free and open-source industry-standard container runtime. containerd provides a reliable container runtime with an emphasis on simplicity, robustness, and portability","category":"containerization","subcategory":"containerization","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,443],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["containerization","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/containerization/containerd","documentationUrl":"https://howtomgr.github.io/containerization/containerd","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/containerd","updatedAt":"2025-09-16T17:05:31Z","createdAt":"2025-09-16T02:28:22Z","readmeRaw":"# containerd Installation Guide\n\ncontainerd is a free and open-source industry-standard container runtime. containerd provides a reliable container runtime with an emphasis on simplicity, robustness, and portability\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 1GB for installation\n  - Network: Container networking\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port N/A (default containerd port)\n  - Unix socket based\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install containerd\nsudo dnf install -y containerd\n\n# Enable and start service\nsudo systemctl enable --now containerd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncontainerd --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install containerd\nsudo apt install -y containerd\n\n# Enable and start service\nsudo systemctl enable --now containerd\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\ncontainerd --version\n```\n\n### Arch Linux\n\n```bash\n# Install containerd\nsudo pacman -S containerd\n\n# Enable and start service\nsudo systemctl enable --now containerd\n\n# Verify installation\ncontainerd --version\n```\n\n### Alpine Linux\n\n```bash\n# Install containerd\napk add --no-cache containerd\n\n# Enable and start service\nrc-update add containerd default\nrc-service containerd start\n\n# Verify installation\ncontainerd --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install containerd\nsudo zypper install -y containerd\n\n# Enable and start service\nsudo systemctl enable --now containerd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncontainerd --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install containerd\n\n# Start service\nbrew services start containerd\n\n# Verify installation\ncontainerd --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install containerd\n\n# Enable in rc.conf\necho 'containerd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice containerd start\n\n# Verify installation\ncontainerd --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install containerd\n\n# Or using Scoop\nscoop install containerd\n\n# Verify installation\ncontainerd --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/containerd\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncontainerd --version\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable containerd\n\n# Start service\nsudo systemctl start containerd\n\n# Stop service\nsudo systemctl stop containerd\n\n# Restart service\nsudo systemctl restart containerd\n\n# Check status\nsudo systemctl status containerd\n\n# View logs\nsudo journalctl -u containerd -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add containerd default\n\n# Start service\nrc-service containerd start\n\n# Stop service\nrc-service containerd stop\n\n# Restart service\nrc-service containerd restart\n\n# Check status\nrc-service containerd status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'containerd_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice containerd start\n\n# Stop service\nservice containerd stop\n\n# Restart service\nservice containerd restart\n\n# Check status\nservice containerd status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start containerd\nbrew services stop containerd\nbrew services restart containerd\n\n# Check status\nbrew services list | grep containerd\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start containerd\n\n# Stop service\nnet stop containerd\n\n# Using PowerShell\nStart-Service containerd\nStop-Service containerd\nRestart-Service containerd\n\n# Check status\nGet-Service containerd\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream containerd_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name containerd.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name containerd.example.com;\n\n    ssl_certificate /etc/ssl/certs/containerd.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/containerd.example.com.key;\n\n    location / {\n        proxy_pass http://containerd_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName containerd.example.com\n    Redirect permanent / https://containerd.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName containerd.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/containerd.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/containerd.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend containerd_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/containerd.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend containerd_backend\n\nbackend containerd_backend\n    balance roundrobin\n    server containerd1 127.0.0.1:N/A check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R containerd:containerd /etc/containerd\nsudo chmod 750 /etc/containerd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status containerd\n\n# View logs\nsudo journalctl -u containerd -f\n\n# Monitor resource usage\ntop -p $(pgrep containerd)\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/containerd\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/containerd-backup-$DATE.tar.gz\" /etc/containerd /var/lib/containerd\n\necho \"Backup completed: $BACKUP_DIR/containerd-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop containerd\n\n# Restore from backup\ntar -xzf /backup/containerd/containerd-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start containerd\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u containerd -n 100\nsudo tail -f /var/log/containerd/containerd.log\n\n# Check configuration\ncontainerd --version\n\n# Check permissions\nls -la /etc/containerd\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep containerd)\n\n# Check disk I/O\niotop -p $(pgrep containerd)\n\n# Check connections\nss -an | grep N/A\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  containerd:\n    image: containerd:latest\n    ports:\n      - \"N/A:N/A\"\n    volumes:\n      - ./config:/etc/containerd\n      - ./data:/var/lib/containerd\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update containerd\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade containerd\n\n# Arch Linux\nsudo pacman -Syu containerd\n\n# Alpine Linux\napk update && apk upgrade containerd\n\n# openSUSE\nsudo zypper update containerd\n\n# FreeBSD\npkg update && pkg upgrade containerd\n\n# Always backup before updates\ntar -czf /backup/containerd-pre-update-$(date +%Y%m%d).tar.gz /etc/containerd\n\n# Restart after updates\nsudo systemctl restart containerd\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/containerd\n\n# Clean old logs\nfind /var/log/containerd -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/containerd\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.containerd.org/\n- GitHub Repository: https://github.com/containerd/containerd\n- Community Forum: https://forum.containerd.org/\n- Best Practices Guide: https://docs.containerd.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">containerd is a free and open-source industry-standard container runtime. containerd provides a reliable container runtime with an emphasis on simplicity, robustness, and portability</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: Container networking</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port N/A (default containerd port)</li>\n<li class=\"mobile-list-item\">Unix socket based</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install containerd\nsudo dnf install -y containerd\n\n# Enable and start service\nsudo systemctl enable --now containerd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncontainerd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install containerd\nsudo apt install -y containerd\n\n# Enable and start service\nsudo systemctl enable --now containerd\n\n# Configure firewall\nsudo ufw allow N/A\n\n# Verify installation\ncontainerd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install containerd\nsudo pacman -S containerd\n\n# Enable and start service\nsudo systemctl enable --now containerd\n\n# Verify installation\ncontainerd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install containerd\napk add --no-cache containerd\n\n# Enable and start service\nrc-update add containerd default\nrc-service containerd start\n\n# Verify installation\ncontainerd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install containerd\nsudo zypper install -y containerd\n\n# Enable and start service\nsudo systemctl enable --now containerd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\ncontainerd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install containerd\n\n# Start service\nbrew services start containerd\n\n# Verify installation\ncontainerd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install containerd\n\n# Enable in rc.conf\necho &#039;containerd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice containerd start\n\n# Verify installation\ncontainerd --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install containerd\n\n# Or using Scoop\nscoop install containerd\n\n# Verify installation\ncontainerd --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/containerd\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\ncontainerd --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable containerd\n\n# Start service\nsudo systemctl start containerd\n\n# Stop service\nsudo systemctl stop containerd\n\n# Restart service\nsudo systemctl restart containerd\n\n# Check status\nsudo systemctl status containerd\n\n# View logs\nsudo journalctl -u containerd -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add containerd default\n\n# Start service\nrc-service containerd start\n\n# Stop service\nrc-service containerd stop\n\n# Restart service\nrc-service containerd restart\n\n# Check status\nrc-service containerd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;containerd_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice containerd start\n\n# Stop service\nservice containerd stop\n\n# Restart service\nservice containerd restart\n\n# Check status\nservice containerd status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start containerd\nbrew services stop containerd\nbrew services restart containerd\n\n# Check status\nbrew services list | grep containerd</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start containerd\n\n# Stop service\nnet stop containerd\n\n# Using PowerShell\nStart-Service containerd\nStop-Service containerd\nRestart-Service containerd\n\n# Check status\nGet-Service containerd</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream containerd_backend {\n    server 127.0.0.1:N/A;\n}\n\nserver {\n    listen 80;\n    server_name containerd.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name containerd.example.com;\n\n    ssl_certificate /etc/ssl/certs/containerd.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/containerd.example.com.key;\n\n    location / {\n        proxy_pass http://containerd_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName containerd.example.com\n    Redirect permanent / https://containerd.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName containerd.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/containerd.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/containerd.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:N/A/\n    ProxyPassReverse / http://127.0.0.1:N/A/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend containerd_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/containerd.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend containerd_backend\n\nbackend containerd_backend\n    balance roundrobin\n    server containerd1 127.0.0.1:N/A check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R containerd:containerd /etc/containerd\nsudo chmod 750 /etc/containerd\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=N/A/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status containerd\n\n# View logs\nsudo journalctl -u containerd -f\n\n# Monitor resource usage\ntop -p $(pgrep containerd)</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/containerd&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/containerd-backup-$DATE.tar.gz&quot; /etc/containerd /var/lib/containerd\n\necho &quot;Backup completed: $BACKUP_DIR/containerd-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop containerd\n\n# Restore from backup\ntar -xzf /backup/containerd/containerd-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start containerd</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u containerd -n 100\nsudo tail -f /var/log/containerd/containerd.log\n\n# Check configuration\ncontainerd --version\n\n# Check permissions\nls -la /etc/containerd</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep N/A\n\n# Test connectivity\ntelnet localhost N/A\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep containerd)\n\n# Check disk I/O\niotop -p $(pgrep containerd)\n\n# Check connections\nss -an | grep N/A</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  containerd:\n    image: containerd:latest\n    ports:\n      - &quot;N/A:N/A&quot;\n    volumes:\n      - ./config:/etc/containerd\n      - ./data:/var/lib/containerd\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update containerd\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade containerd\n\n# Arch Linux\nsudo pacman -Syu containerd\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade containerd\n\n# openSUSE\nsudo zypper update containerd\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade containerd\n\n# Always backup before updates\ntar -czf /backup/containerd-pre-update-$(date +%Y%m%d).tar.gz /etc/containerd\n\n# Restart after updates\nsudo systemctl restart containerd</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/containerd\n\n# Clean old logs\nfind /var/log/containerd -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/containerd</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.containerd.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/containerd/containerd</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.containerd.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.containerd.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"7 min","wordCount":1277,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Basic Monitoring","id":"basic-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose Example","id":"docker-compose-example"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance","id":"regular-maintenance"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-26T06:20:42.991Z","metadataVersion":"2.0"},"category":{"key":"containerization","name":"Containerization","description":"Containerization tools and applications","icon":"📦","color":"#bd93f9"},"relatedGuides":[{"name":"docker","displayName":"Docker Installation Guide","slug":"docker","description":"Docker is a free and open-source containerization platform that enables developers to package applications and their dependencies into portable containers. Originally developed by Solomon Hykes at dotCloud, Docker revolutionized application deployment by providing OS-level virtualization. It serves as a FOSS alternative to proprietary virtualization solutions like VMware vSphere, Microsoft Hyper-V containers, or commercial container platforms, offering comparable functionality with features like image layering, container orchestration, and resource isolation.","category":"containerization","subcategory":"containerization","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[0,1,2,8,15,80,127,443,2375,2376,2377,3306,4789,5000,5432,7946,8080,9090,9100],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["containerization","orchestration","observability","data-storage","networking","security","data-protection"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/containerization/docker","documentationUrl":"https://howtomgr.github.io/containerization/docker","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/docker","updatedAt":"2025-09-16T17:08:11Z","createdAt":"2023-08-28T03:47:37Z","readmeRaw":"# Docker Installation Guide\n\nDocker is a free and open-source containerization platform that enables developers to package applications and their dependencies into portable containers. Originally developed by Solomon Hykes at dotCloud, Docker revolutionized application deployment by providing OS-level virtualization. It serves as a FOSS alternative to proprietary virtualization solutions like VMware vSphere, Microsoft Hyper-V containers, or commercial container platforms, offering comparable functionality with features like image layering, container orchestration, and resource isolation.\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 64-bit processor with virtualization support (Intel VT-x/AMD-V)\n  - RAM: 2GB minimum (4GB+ recommended for production)\n  - Storage: 20GB minimum (50GB+ recommended, SSD preferred)\n  - BIOS: Virtualization must be enabled\n- **Operating System**: \n  - Linux: Kernel 3.10+ with cgroups and namespaces support\n  - macOS: 10.15+ (Catalina or newer)\n  - Windows: Windows 10 64-bit Pro/Enterprise/Education (Build 19041+)\n- **Network Requirements**:\n  - Internet connection for pulling images\n  - Port 2375 (unencrypted) or 2376 (TLS) for Docker API\n  - Port 2377 for Swarm mode cluster management\n  - Port 7946 TCP/UDP for container network discovery\n  - Port 4789 UDP for overlay network traffic\n- **Dependencies**:\n  - iptables 1.4+ (Linux)\n  - Git (for building images)\n  - systemd or compatible init system (Linux)\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Remove old versions\nsudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-engine\n\n# Install required packages\nsudo yum install -y yum-utils\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker Engine\nsudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Verify installation\nsudo docker run hello-world\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt-get update\n\n# Install prerequisites\nsudo apt-get install -y \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n# Add Docker's official GPG key\nsudo mkdir -m 0755 -p /etc/apt/keyrings\nwget -O docker.gpg https://download.docker.com/linux/ubuntu/gpg\nsudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg < docker.gpg\nrm docker.gpg\n\n# Add repository\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\n# Install Docker Engine\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n```\n\n### Arch Linux\n\n```bash\n# Install Docker from official repositories\nsudo pacman -S docker docker-compose docker-buildx\n\n# Optional: Install Docker documentation\nsudo pacman -S docker-docs\n\n# Enable and start Docker service\nsudo systemctl enable --now docker\n\n# For rootless Docker\nsudo pacman -S fuse-overlayfs slirp4netns\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n```\n\n### Alpine Linux\n\n```bash\n# Add community repository if not enabled\necho \"http://dl-cdn.alpinelinux.org/alpine/v$(cat /etc/alpine-release | cut -d'.' -f1,2)/community\" >> /etc/apk/repositories\n\n# Update package index\napk update\n\n# Install Docker\napk add docker docker-cli docker-compose\n\n# Add Docker to boot services\nrc-update add docker boot\n\n# Start Docker service\nservice docker start\n\n# Install docker-compose (Python version)\napk add py3-pip\npip3 install docker-compose\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y docker docker-compose docker-buildx\n\n# For latest version from official Docker repository\nsudo zypper addrepo https://download.docker.com/linux/suse/docker-ce.repo\nsudo zypper refresh\nsudo zypper install -y docker-ce docker-ce-cli containerd.io\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n\n# SLES specific\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y docker\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install --cask docker\n\n# Start Docker Desktop\nopen /Applications/Docker.app\n\n# Wait for Docker to start, then verify\ndocker --version\ndocker compose version\n\n# Alternative: Install Docker CLI only (without Desktop)\nbrew install docker docker-compose\n\n# For docker-machine (managing remote Docker hosts)\nbrew install docker-machine\n```\n\n### FreeBSD\n\n```bash\n# Install Docker from packages\npkg install docker docker-compose\n\n# Or from ports\ncd /usr/ports/sysutils/docker\nmake install clean\n\n# Enable Docker\necho 'docker_enable=\"YES\"' >> /etc/rc.conf\n\n# Load required kernel modules\nkldload linux64\nkldload fdescfs\n\n# Start Docker\nservice docker start\n\n# Add user to docker group\npw groupmod docker -m $USER\n```\n\n### Windows\n\n```powershell\n# Enable WSL2 (required for Docker Desktop)\nwsl --install\n\n# Enable required Windows features\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n# Download and install Docker Desktop\n# Visit: https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe\n\n# Or use Chocolatey\nchoco install docker-desktop\n\n# Or use winget\nwinget install Docker.DockerDesktop\n\n# Start Docker Desktop from Start Menu\n# Verify installation in PowerShell\ndocker --version\ndocker compose version\n```\n\n## Initial Configuration\n\n### First-Run Setup\n\n1. **Configure Docker daemon**:\n```bash\n# Create daemon configuration directory\nsudo mkdir -p /etc/docker\n\n# Create daemon.json with optimized settings\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\"\n  },\n  \"storage-driver\": \"overlay2\",\n  \"live-restore\": true,\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    }\n  }\n}\nEOF\n\n# Restart Docker to apply changes\nsudo systemctl restart docker\n```\n\n2. **Configure user permissions**:\n```bash\n# Add current user to docker group (Linux)\nsudo usermod -aG docker $USER\n\n# Apply group changes (logout/login or use newgrp)\nnewgrp docker\n\n# Verify docker works without sudo\ndocker run hello-world\n```\n\n3. **Essential security settings**:\n```bash\n# Enable user namespace remapping for better isolation\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"userns-remap\": \"default\"\n}\nEOF\n\n# Create subuid/subgid entries\necho \"dockremap:100000:65536\" | sudo tee -a /etc/subuid\necho \"dockremap:100000:65536\" | sudo tee -a /etc/subgid\n\n# Restart Docker\nsudo systemctl restart docker\n```\n\n### Testing Initial Setup\n\n```bash\n# Check Docker version\ndocker version\n\n# View system information\ndocker info\n\n# Test container creation\ndocker run --rm alpine echo \"Docker is working!\"\n\n# Test networking\ndocker run --rm alpine ping -c 3 google.com\n\n# Test volume mounting\ndocker run --rm -v /tmp:/host alpine ls /host\n```\n\n**WARNING:** Never expose Docker daemon socket (2375/2376) to the internet without proper TLS authentication!\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable Docker to start on boot\nsudo systemctl enable docker\n\n# Start Docker service\nsudo systemctl start docker\n\n# Stop Docker service\nsudo systemctl stop docker\n\n# Restart Docker service\nsudo systemctl restart docker\n\n# Reload Docker configuration\nsudo systemctl reload docker\n\n# Check Docker status\nsudo systemctl status docker\n\n# View Docker logs\nsudo journalctl -u docker.service -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable Docker to start on boot\nrc-update add docker boot\n\n# Start Docker service\nrc-service docker start\n\n# Stop Docker service\nrc-service docker stop\n\n# Restart Docker service\nrc-service docker restart\n\n# Check Docker status\nrc-service docker status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'docker_enable=\"YES\"' >> /etc/rc.conf\n\n# Start Docker\nservice docker start\n\n# Stop Docker\nservice docker stop\n\n# Restart Docker\nservice docker restart\n\n# Check status\nservice docker status\n```\n\n### launchd (macOS)\n\n```bash\n# Docker Desktop manages its own services\n# Control through the UI or command line\n\n# Stop Docker Desktop\nosascript -e 'quit app \"Docker\"'\n\n# Start Docker Desktop\nopen -a Docker\n\n# Check if Docker is running\ndocker system info >/dev/null 2>&1 && echo \"Docker is running\" || echo \"Docker is not running\"\n```\n\n### Windows Service Manager\n\n```powershell\n# Docker Desktop manages services automatically\n# For manual control:\n\n# Restart Docker Desktop\nStop-Process -Name \"Docker Desktop\" -Force\nStart-Process \"C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe\"\n\n# Check Docker service status\nGet-Service -Name docker\n\n# Restart Docker service\nRestart-Service docker\n```\n\n## Advanced Configuration\n\n### Storage Driver Configuration\n\n```bash\n# Configure storage driver options\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"storage-driver\": \"overlay2\",\n  \"storage-opts\": [\n    \"overlay2.override_kernel_check=true\",\n    \"overlay2.size=20G\"\n  ],\n  \"data-root\": \"/var/lib/docker\"\n}\nEOF\n\n# For devicemapper (older systems)\n{\n  \"storage-driver\": \"devicemapper\",\n  \"storage-opts\": [\n    \"dm.thinpooldev=/dev/mapper/docker-thinpool\",\n    \"dm.use_deferred_removal=true\",\n    \"dm.use_deferred_deletion=true\"\n  ]\n}\n```\n\n### Network Configuration\n\n```bash\n# Configure default network settings\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"bip\": \"172.17.0.1/16\",\n  \"fixed-cidr\": \"172.17.0.0/16\",\n  \"default-address-pools\": [\n    {\n      \"base\": \"172.80.0.0/16\",\n      \"size\": 24\n    }\n  ],\n  \"dns\": [\"8.8.8.8\", \"8.8.4.4\"],\n  \"dns-search\": [\"example.com\"]\n}\nEOF\n\n# Enable IPv6 support\n{\n  \"ipv6\": true,\n  \"fixed-cidr-v6\": \"2001:db8::/64\"\n}\n```\n\n### Resource Limits\n\n```bash\n# Configure default container limits\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"default-ulimits\": {\n    \"nofile\": {\n      \"Name\": \"nofile\",\n      \"Hard\": 64000,\n      \"Soft\": 64000\n    },\n    \"nproc\": {\n      \"Name\": \"nproc\",\n      \"Hard\": 32000,\n      \"Soft\": 32000\n    }\n  },\n  \"default-runtime\": \"runc\",\n  \"runtimes\": {\n    \"nvidia\": {\n      \"path\": \"nvidia-container-runtime\",\n      \"runtimeArgs\": []\n    }\n  }\n}\nEOF\n```\n\n## Reverse Proxy Setup\n\n### nginx as Docker Registry Proxy\n\n```nginx\n# /etc/nginx/sites-available/docker-registry\nserver {\n    listen 443 ssl http2;\n    server_name registry.example.com;\n\n    ssl_certificate /etc/ssl/certs/registry.crt;\n    ssl_certificate_key /etc/ssl/private/registry.key;\n\n    # Docker Registry API\n    location /v2/ {\n        proxy_pass http://localhost:5000;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_read_timeout 900;\n        \n        # Required for docker client\n        chunked_transfer_encoding on;\n        client_max_body_size 0;\n    }\n}\n```\n\n### Apache as Docker Registry Proxy\n\n```apache\n# /etc/apache2/sites-available/docker-registry.conf\n<VirtualHost *:443>\n    ServerName registry.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/registry.crt\n    SSLCertificateKeyFile /etc/ssl/private/registry.key\n    \n    ProxyPreserveHost On\n    ProxyPass /v2 http://localhost:5000/v2\n    ProxyPassReverse /v2 http://localhost:5000/v2\n    \n    <Location /v2>\n        Order deny,allow\n        Allow from all\n        \n        # Authentication\n        AuthType Basic\n        AuthName \"Docker Registry\"\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    </Location>\n</VirtualHost>\n```\n\n### Caddy as Docker Registry Proxy\n\n```caddyfile\nregistry.example.com {\n    reverse_proxy localhost:5000 {\n        header_up Host {host}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    basicauth /v2/* {\n        admin $2a$14$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    }\n    \n    encode gzip\n}\n```\n\n### Traefik Configuration\n\n```yaml\n# docker-compose.yml for Traefik\nversion: '3.8'\n\nservices:\n  traefik:\n    image: traefik:v2.9\n    command:\n      - \"--api.insecure=true\"\n      - \"--providers.docker=true\"\n      - \"--entrypoints.websecure.address=:443\"\n    ports:\n      - \"443:443\"\n      - \"8080:8080\"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./certs:/certs\n\n  registry:\n    image: registry:2\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.registry.rule=Host(`registry.example.com`)\"\n      - \"traefik.http.routers.registry.entrypoints=websecure\"\n      - \"traefik.http.routers.registry.tls=true\"\n```\n\n## Security Configuration\n\n### Docker Daemon Security\n\n```bash\n# Enable TLS for Docker daemon\n# Generate CA private key\nopenssl genrsa -aes256 -out ca-key.pem 4096\n\n# Generate CA certificate\nopenssl req -new -x509 -days 3650 -key ca-key.pem -sha256 -out ca.pem\n\n# Generate server key\nopenssl genrsa -out server-key.pem 4096\n\n# Generate certificate signing request\nopenssl req -subj \"/CN=$HOST\" -sha256 -new -key server-key.pem -out server.csr\n\n# Generate server certificate\necho subjectAltName = DNS:$HOST,IP:127.0.0.1 >> extfile.cnf\necho extendedKeyUsage = serverAuth >> extfile.cnf\nopenssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem -extfile extfile.cnf\n\n# Configure Docker to use TLS\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"hosts\": [\"tcp://0.0.0.0:2376\"],\n  \"tls\": true,\n  \"tlsverify\": true,\n  \"tlscert\": \"/etc/docker/certs/server-cert.pem\",\n  \"tlskey\": \"/etc/docker/certs/server-key.pem\",\n  \"tlscacert\": \"/etc/docker/certs/ca.pem\"\n}\nEOF\n```\n\n### AppArmor/SELinux Configuration\n\n```bash\n# AppArmor (Debian/Ubuntu)\n# Check if AppArmor is enabled\nsudo aa-status\n\n# Docker containers use docker-default profile by default\n# Create custom profile\nsudo tee /etc/apparmor.d/docker-custom <<EOF\n#include <tunables/global>\n\nprofile docker-custom flags=(attach_disconnected,mediate_deleted) {\n  #include <abstractions/base>\n  \n  network,\n  capability,\n  \n  # Deny dangerous capabilities\n  deny capability dac_override,\n  deny capability setuid,\n  deny capability setgid,\n  \n  # File access\n  deny /proc/sys/** w,\n  deny /sys/** w,\n  \n  # Allow necessary access\n  /usr/bin/** ix,\n  /bin/** ix,\n  /lib/** r,\n}\nEOF\n\n# Load profile\nsudo apparmor_parser -r /etc/apparmor.d/docker-custom\n\n# SELinux (RHEL/CentOS)\n# Enable SELinux for containers\nsudo setsebool -P container_manage_cgroup true\n\n# Check Docker SELinux context\nps -eZ | grep dockerd\n```\n\n### Firewall Rules\n\n```bash\n# UFW (Ubuntu/Debian)\n# Docker manages its own iptables rules\n# To integrate with UFW:\nsudo tee -a /etc/ufw/after.rules <<EOF\n*filter\n:ufw-user-forward - [0:0]\n:DOCKER-USER - [0:0]\n-A DOCKER-USER -j ufw-user-forward\n-A DOCKER-USER -j RETURN -s 10.0.0.0/8\n-A DOCKER-USER -j RETURN -s 172.16.0.0/12\n-A DOCKER-USER -j RETURN -s 192.168.0.0/16\n-A DOCKER-USER -j DROP\nCOMMIT\nEOF\n\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\n# Add Docker zone\nsudo firewall-cmd --permanent --new-zone=docker\nsudo firewall-cmd --permanent --zone=docker --add-interface=docker0\nsudo firewall-cmd --permanent --zone=docker --add-port=2377/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/udp\nsudo firewall-cmd --permanent --zone=docker --add-port=4789/udp\nsudo firewall-cmd --reload\n\n# iptables (manual)\n# Allow Docker subnet\nsudo iptables -A INPUT -s 172.17.0.0/16 -j ACCEPT\nsudo iptables-save > /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on docker0 all\npass out on docker0 all\n```\n\n## Database Setup\n\nDocker doesn't require a database, but here's how to run databases in Docker:\n\n### PostgreSQL in Docker\n\n```bash\n# Create volume for persistent data\ndocker volume create postgres_data\n\n# Run PostgreSQL container\ndocker run -d \\\n  --name postgres \\\n  --restart unless-stopped \\\n  -e POSTGRES_PASSWORD=securepassword \\\n  -e POSTGRES_USER=myuser \\\n  -e POSTGRES_DB=mydb \\\n  -v postgres_data:/var/lib/postgresql/data \\\n  -p 5432:5432 \\\n  postgres:15-alpine\n\n# Connect to PostgreSQL\ndocker exec -it postgres psql -U myuser -d mydb\n```\n\n### MySQL in Docker\n\n```bash\n# Create volume for persistent data\ndocker volume create mysql_data\n\n# Run MySQL container\ndocker run -d \\\n  --name mysql \\\n  --restart unless-stopped \\\n  -e MYSQL_ROOT_PASSWORD=rootpassword \\\n  -e MYSQL_DATABASE=mydb \\\n  -e MYSQL_USER=myuser \\\n  -e MYSQL_PASSWORD=securepassword \\\n  -v mysql_data:/var/lib/mysql \\\n  -p 3306:3306 \\\n  mysql:8.0\n\n# Connect to MySQL\ndocker exec -it mysql mysql -u myuser -p\n```\n\n## Performance Optimization\n\n### Kernel Parameters\n\n```bash\n# Optimize kernel parameters for Docker\nsudo tee -a /etc/sysctl.conf <<EOF\n# Docker optimization\nvm.max_map_count=262144\nfs.file-max=2097152\nfs.inotify.max_user_watches=524288\nfs.inotify.max_user_instances=512\n\n# Network optimization\nnet.core.somaxconn=32768\nnet.ipv4.tcp_max_syn_backlog=8192\nnet.core.netdev_max_backlog=5000\nnet.ipv4.ip_local_port_range=1024 65535\n\n# Bridge settings\nnet.bridge.bridge-nf-call-iptables=1\nnet.bridge.bridge-nf-call-ip6tables=1\nnet.ipv4.ip_forward=1\nEOF\n\n# Apply settings\nsudo sysctl -p\n```\n\n### Storage Optimization\n\n```bash\n# Use dedicated disk for Docker\n# Format with XFS for better performance\nsudo mkfs.xfs /dev/sdb1\nsudo mkdir -p /var/lib/docker\nsudo mount /dev/sdb1 /var/lib/docker\n\n# Add to /etc/fstab\necho \"/dev/sdb1 /var/lib/docker xfs defaults,noatime 0 2\" | sudo tee -a /etc/fstab\n\n# Configure storage driver options\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"storage-driver\": \"overlay2\",\n  \"storage-opts\": [\n    \"overlay2.override_kernel_check=true\"\n  ],\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\"\n  }\n}\nEOF\n```\n\n### Build Optimization\n\n```bash\n# Enable BuildKit for faster builds\nexport DOCKER_BUILDKIT=1\n\n# Configure BuildKit in daemon\nsudo tee -a /etc/docker/daemon.json <<EOF\n{\n  \"features\": {\n    \"buildkit\": true\n  }\n}\nEOF\n\n# Use build cache mount\n# In Dockerfile:\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN --mount=type=cache,target=/var/cache/apk \\\n    apk add --no-cache git\n```\n\n## Monitoring\n\n### Docker Stats and Events\n\n```bash\n# Monitor container resource usage\ndocker stats\n\n# Stream Docker events\ndocker events\n\n# Monitor specific container\ndocker stats container_name\n\n# Export metrics in JSON\ndocker stats --no-stream --format json > stats.json\n\n# Monitor Docker daemon\nsudo journalctl -u docker.service -f\n```\n\n### cAdvisor Setup\n\n```bash\n# Run cAdvisor for container metrics\ndocker run -d \\\n  --name=cadvisor \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -v /:/rootfs:ro \\\n  -v /var/run:/var/run:ro \\\n  -v /sys:/sys:ro \\\n  -v /var/lib/docker/:/var/lib/docker:ro \\\n  -v /dev/disk/:/dev/disk:ro \\\n  --privileged \\\n  gcr.io/cadvisor/cadvisor:latest\n\n# Access metrics at http://localhost:8080\n```\n\n### Prometheus Integration\n\n```yaml\n# docker-compose.yml for monitoring stack\nversion: '3.8'\n\nservices:\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    ports:\n      - \"9090:9090\"\n    command:\n      - '--config.file=/etc/prometheus/prometheus.yml'\n      - '--storage.tsdb.path=/prometheus'\n\n  node-exporter:\n    image: prom/node-exporter\n    ports:\n      - \"9100:9100\"\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n\nvolumes:\n  prometheus_data:\n```\n\n## 9. Backup and Restore\n\n### Container Backup\n\n```bash\n#!/bin/bash\n# backup-docker.sh\n\nBACKUP_DIR=\"/backup/docker\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p $BACKUP_DIR/{images,volumes,configs}\n\n# Backup running containers\ndocker ps -q | while read container; do\n    name=$(docker inspect -f '{{.Name}}' $container | sed 's/\\///')\n    docker commit $container backup_$name:$DATE\n    docker save backup_$name:$DATE | gzip > $BACKUP_DIR/images/${name}_${DATE}.tar.gz\n    docker inspect $container > $BACKUP_DIR/configs/${name}_${DATE}.json\ndone\n\n# Backup volumes\ndocker volume ls -q | while read volume; do\n    docker run --rm \\\n        -v $volume:/data \\\n        -v $BACKUP_DIR/volumes:/backup \\\n        alpine tar czf /backup/${volume}_${DATE}.tar.gz -C /data .\ndone\n\n# Backup Docker daemon config\ncp /etc/docker/daemon.json $BACKUP_DIR/configs/daemon_${DATE}.json\n\necho \"Backup completed: $DATE\"\n```\n\n### Volume Backup\n\n```bash\n# Backup named volume\ndocker run --rm \\\n    -v myvolume:/source:ro \\\n    -v $(pwd):/backup \\\n    alpine tar czf /backup/myvolume.tar.gz -C /source .\n\n# Restore volume\ndocker run --rm \\\n    -v myvolume:/target \\\n    -v $(pwd):/backup \\\n    alpine tar xzf /backup/myvolume.tar.gz -C /target\n```\n\n### Registry Backup\n\n```bash\n# Backup Docker registry data\ndocker exec registry tar czf - /var/lib/registry | gzip > registry_backup_$(date +%Y%m%d).tar.gz\n\n# Backup registry config\ndocker exec registry cat /etc/docker/registry/config.yml > registry_config_backup.yml\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Cannot connect to Docker daemon**:\n```bash\n# Check if Docker is running\nsudo systemctl status docker\n\n# Check Docker socket permissions\nls -la /var/run/docker.sock\n\n# Check if user is in docker group\ngroups $USER\n\n# Start Docker if not running\nsudo systemctl start docker\n```\n\n2. **Container networking issues**:\n```bash\n# Check Docker networks\ndocker network ls\n\n# Inspect bridge network\ndocker network inspect bridge\n\n# Check iptables rules\nsudo iptables -L -n -v\n\n# Reset Docker networking\nsudo systemctl stop docker\nsudo ip link delete docker0\nsudo systemctl start docker\n```\n\n3. **Storage space issues**:\n```bash\n# Check disk usage\ndocker system df\n\n# Clean up unused resources\ndocker system prune -a --volumes\n\n# Check Docker root directory\ndf -h /var/lib/docker\n\n# Find large containers/images\ndocker ps -s\ndocker images --format \"table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}\"\n```\n\n4. **Permission denied errors**:\n```bash\n# Fix socket permissions\nsudo chmod 666 /var/run/docker.sock\n\n# Fix user namespace issues\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Check SELinux/AppArmor\ngetenforce  # SELinux\nsudo aa-status  # AppArmor\n```\n\n### Debug Mode\n\n```bash\n# Run Docker in debug mode\nsudo dockerd --debug\n\n# Enable debug logging\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"debug\": true,\n  \"log-level\": \"debug\"\n}\nEOF\n\nsudo systemctl restart docker\n\n# Check debug logs\nsudo journalctl -u docker.service --no-pager\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo yum update docker-ce docker-ce-cli containerd.io\n\n# Debian/Ubuntu\nsudo apt-get update\nsudo apt-get upgrade docker-ce docker-ce-cli containerd.io\n\n# Arch Linux\nsudo pacman -Syu docker\n\n# Alpine Linux\napk update\napk upgrade docker\n\n# openSUSE\nsudo zypper update docker\n\n# FreeBSD\npkg update\npkg upgrade docker\n\n# Always restart after updates\nsudo systemctl restart docker\n```\n\n### Cleanup Tasks\n\n```bash\n#!/bin/bash\n# docker-cleanup.sh\n\necho \"Starting Docker cleanup...\"\n\n# Remove stopped containers\ndocker container prune -f\n\n# Remove unused images\ndocker image prune -a -f\n\n# Remove unused volumes\ndocker volume prune -f\n\n# Remove unused networks\ndocker network prune -f\n\n# Remove build cache\ndocker builder prune -f\n\n# Show disk usage after cleanup\ndocker system df\n\necho \"Cleanup completed\"\n```\n\n### Log Rotation\n\n```bash\n# Configure log rotation for containers\nsudo tee /etc/docker/daemon.json <<EOF\n{\n  \"log-driver\": \"json-file\",\n  \"log-opts\": {\n    \"max-size\": \"10m\",\n    \"max-file\": \"3\",\n    \"compress\": \"true\"\n  }\n}\nEOF\n\n# System-wide Docker logs rotation\nsudo tee /etc/logrotate.d/docker <<EOF\n/var/lib/docker/containers/*/*.log {\n    rotate 7\n    daily\n    compress\n    missingok\n    delaycompress\n    copytruncate\n}\nEOF\n```\n\n## Integration Examples\n\n### CI/CD Pipeline Integration\n\n```yaml\n# GitLab CI example\nstages:\n  - build\n  - test\n  - deploy\n\nvariables:\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: \"/certs\"\n\nbuild:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker build -t myapp:$CI_COMMIT_SHA .\n    - docker push myapp:$CI_COMMIT_SHA\n\n# Jenkins Pipeline example\npipeline {\n    agent any\n    stages {\n        stage('Build') {\n            steps {\n                script {\n                    docker.build(\"myapp:${env.BUILD_ID}\")\n                }\n            }\n        }\n    }\n}\n```\n\n### Kubernetes Integration\n\n```bash\n# Install CRI-Docker for Kubernetes\nCRI_VERSION=\"0.3.1\"\nwget https://github.com/Mirantis/cri-dockerd/releases/download/v${CRI_VERSION}/cri-dockerd-${CRI_VERSION}.amd64.tgz\ntar xzf cri-dockerd-${CRI_VERSION}.amd64.tgz\nsudo install -o root -g root -m 0755 cri-dockerd /usr/local/bin/cri-dockerd\nrm cri-dockerd-${CRI_VERSION}.amd64.tgz cri-dockerd\n\n# Create systemd service\nsudo tee /etc/systemd/system/cri-docker.service <<EOF\n[Unit]\nDescription=CRI Docker Interface\nAfter=network.target docker.service\nRequires=docker.service\n\n[Service]\nType=notify\nExecStart=/usr/local/bin/cri-dockerd --container-runtime-endpoint unix:///var/run/cri-dockerd.sock\nRestart=always\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now cri-docker\n```\n\n### Docker Compose Examples\n\n```yaml\n# Multi-tier application stack\nversion: '3.8'\n\nservices:\n  web:\n    build: ./web\n    ports:\n      - \"80:80\"\n    environment:\n      - DATABASE_URL=postgresql://user:pass@db:5432/mydb\n    depends_on:\n      - db\n    networks:\n      - frontend\n      - backend\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n      - POSTGRES_DB=mydb\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    networks:\n      - backend\n\n  redis:\n    image: redis:alpine\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db_data:\n```\n\n### SDK Integration\n\n```python\n# Python Docker SDK\nimport docker\n\nclient = docker.from_env()\n\n# Run container\ncontainer = client.containers.run(\n    \"alpine\",\n    \"echo hello world\",\n    detach=True\n)\n\n# List containers\nfor container in client.containers.list():\n    print(container.name)\n\n# Build image\nimage, logs = client.images.build(\n    path=\".\",\n    tag=\"myapp:latest\"\n)\n```\n\n```javascript\n// Node.js Docker SDK\nconst Docker = require('dockerode');\nconst docker = new Docker();\n\n// Run container\ndocker.createContainer({\n  Image: 'alpine',\n  Cmd: ['echo', 'hello world'],\n  name: 'mycontainer'\n}, (err, container) => {\n  if (!err) {\n    container.start();\n  }\n});\n\n// List containers\ndocker.listContainers((err, containers) => {\n  containers.forEach(containerInfo => {\n    console.log(containerInfo.Names);\n  });\n});\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.docker.com/)\n- [Docker Hub](https://hub.docker.com/)\n- [Docker GitHub Repository](https://github.com/docker)\n- [Docker Best Practices](https://docs.docker.com/develop/dev-best-practices/)\n- [Docker Security Documentation](https://docs.docker.com/engine/security/)\n- [Docker Compose Documentation](https://docs.docker.com/compose/)\n- [Docker Community Forums](https://forums.docker.com/)\n- [Play with Docker](https://labs.play-with-docker.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<p class=\"mobile-paragraph\">Docker is a free and open-source containerization platform that enables developers to package applications and their dependencies into portable containers. Originally developed by Solomon Hykes at dotCloud, Docker revolutionized application deployment by providing OS-level virtualization. It serves as a FOSS alternative to proprietary virtualization solutions like VMware vSphere, Microsoft Hyper-V containers, or commercial container platforms, offering comparable functionality with features like image layering, container orchestration, and resource isolation.</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 64-bit processor with virtualization support (Intel VT-x/AMD-V)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended for production)</li>\n<li class=\"mobile-list-item\">Storage: 20GB minimum (50GB+ recommended, SSD preferred)</li>\n<li class=\"mobile-list-item\">BIOS: Virtualization must be enabled</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Kernel 3.10+ with cgroups and namespaces support</li>\n<li class=\"mobile-list-item\">macOS: 10.15+ (Catalina or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows 10 64-bit Pro/Enterprise/Education (Build 19041+)</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Internet connection for pulling images</li>\n<li class=\"mobile-list-item\">Port 2375 (unencrypted) or 2376 (TLS) for Docker API</li>\n<li class=\"mobile-list-item\">Port 2377 for Swarm mode cluster management</li>\n<li class=\"mobile-list-item\">Port 7946 TCP/UDP for container network discovery</li>\n<li class=\"mobile-list-item\">Port 4789 UDP for overlay network traffic</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">iptables 1.4+ (Linux)</li>\n<li class=\"mobile-list-item\">Git (for building images)</li>\n<li class=\"mobile-list-item\">systemd or compatible init system (Linux)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Remove old versions\nsudo yum remove docker \\\n                docker-client \\\n                docker-client-latest \\\n                docker-common \\\n                docker-latest \\\n                docker-latest-logrotate \\\n                docker-logrotate \\\n                docker-engine\n\n# Install required packages\nsudo yum install -y yum-utils\n\n# Add Docker repository\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# Install Docker Engine\nsudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Verify installation\nsudo docker run hello-world</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt-get update\n\n# Install prerequisites\nsudo apt-get install -y \\\n    ca-certificates \\\n    curl \\\n    gnupg \\\n    lsb-release\n\n# Add Docker&#039;s official GPG key\nsudo mkdir -m 0755 -p /etc/apt/keyrings\nwget -O docker.gpg https://download.docker.com/linux/ubuntu/gpg\nsudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg &lt; docker.gpg\nrm docker.gpg\n\n# Add repository\necho \\\n  &quot;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\n  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n# Install Docker Engine\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Enable and start Docker\nsudo systemctl enable --now docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker from official repositories\nsudo pacman -S docker docker-compose docker-buildx\n\n# Optional: Install Docker documentation\nsudo pacman -S docker-docs\n\n# Enable and start Docker service\nsudo systemctl enable --now docker\n\n# For rootless Docker\nsudo pacman -S fuse-overlayfs slirp4netns\n\n# Add user to docker group\nsudo usermod -aG docker $USER</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add community repository if not enabled\necho &quot;http://dl-cdn.alpinelinux.org/alpine/v$(cat /etc/alpine-release | cut -d&#039;.&#039; -f1,2)/community&quot; &gt;&gt; /etc/apk/repositories\n\n# Update package index\napk update\n\n# Install Docker\napk add docker docker-cli docker-compose\n\n# Add Docker to boot services\nrc-update add docker boot\n\n# Start Docker service\nservice docker start\n\n# Install docker-compose (Python version)\napk add py3-pip\npip3 install docker-compose</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y docker docker-compose docker-buildx\n\n# For latest version from official Docker repository\nsudo zypper addrepo https://download.docker.com/linux/suse/docker-ce.repo\nsudo zypper refresh\nsudo zypper install -y docker-ce docker-ce-cli containerd.io\n\n# Enable and start Docker\nsudo systemctl enable --now docker\n\n# Add user to docker group\nsudo usermod -aG docker $USER\n\n# SLES specific\nsudo SUSEConnect -p sle-module-containers/15.5/x86_64\nsudo zypper install -y docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install --cask docker\n\n# Start Docker Desktop\nopen /Applications/Docker.app\n\n# Wait for Docker to start, then verify\ndocker --version\ndocker compose version\n\n# Alternative: Install Docker CLI only (without Desktop)\nbrew install docker docker-compose\n\n# For docker-machine (managing remote Docker hosts)\nbrew install docker-machine</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Docker from packages\npkg install docker docker-compose\n\n# Or from ports\ncd /usr/ports/sysutils/docker\nmake install clean\n\n# Enable Docker\necho &#039;docker_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Load required kernel modules\nkldload linux64\nkldload fdescfs\n\n# Start Docker\nservice docker start\n\n# Add user to docker group\npw groupmod docker -m $USER</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Enable WSL2 (required for Docker Desktop)\nwsl --install\n\n# Enable required Windows features\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n# Download and install Docker Desktop\n# Visit: https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe\n\n# Or use Chocolatey\nchoco install docker-desktop\n\n# Or use winget\nwinget install Docker.DockerDesktop\n\n# Start Docker Desktop from Start Menu\n# Verify installation in PowerShell\ndocker --version\ndocker compose version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"first-run-setup\" class=\"mobile-header\">First-Run Setup</h3>\n<p class=\"mobile-paragraph\">1. <strong>Configure Docker daemon</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create daemon configuration directory\nsudo mkdir -p /etc/docker\n\n# Create daemon.json with optimized settings\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: {\n    &quot;max-size&quot;: &quot;10m&quot;,\n    &quot;max-file&quot;: &quot;3&quot;\n  },\n  &quot;storage-driver&quot;: &quot;overlay2&quot;,\n  &quot;live-restore&quot;: true,\n  &quot;default-ulimits&quot;: {\n    &quot;nofile&quot;: {\n      &quot;Name&quot;: &quot;nofile&quot;,\n      &quot;Hard&quot;: 64000,\n      &quot;Soft&quot;: 64000\n    }\n  }\n}\nEOF\n\n# Restart Docker to apply changes\nsudo systemctl restart docker</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Configure user permissions</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add current user to docker group (Linux)\nsudo usermod -aG docker $USER\n\n# Apply group changes (logout/login or use newgrp)\nnewgrp docker\n\n# Verify docker works without sudo\ndocker run hello-world</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Essential security settings</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable user namespace remapping for better isolation\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;userns-remap&quot;: &quot;default&quot;\n}\nEOF\n\n# Create subuid/subgid entries\necho &quot;dockremap:100000:65536&quot; | sudo tee -a /etc/subuid\necho &quot;dockremap:100000:65536&quot; | sudo tee -a /etc/subgid\n\n# Restart Docker\nsudo systemctl restart docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"testing-initial-setup\" class=\"mobile-header\">Testing Initial Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Docker version\ndocker version\n\n# View system information\ndocker info\n\n# Test container creation\ndocker run --rm alpine echo &quot;Docker is working!&quot;\n\n# Test networking\ndocker run --rm alpine ping -c 3 google.com\n\n# Test volume mounting\ndocker run --rm -v /tmp:/host alpine ls /host</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\"><strong>WARNING:</strong> Never expose Docker daemon socket (2375/2376) to the internet without proper TLS authentication!</p>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Docker to start on boot\nsudo systemctl enable docker\n\n# Start Docker service\nsudo systemctl start docker\n\n# Stop Docker service\nsudo systemctl stop docker\n\n# Restart Docker service\nsudo systemctl restart docker\n\n# Reload Docker configuration\nsudo systemctl reload docker\n\n# Check Docker status\nsudo systemctl status docker\n\n# View Docker logs\nsudo journalctl -u docker.service -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Docker to start on boot\nrc-update add docker boot\n\n# Start Docker service\nrc-service docker start\n\n# Stop Docker service\nrc-service docker stop\n\n# Restart Docker service\nrc-service docker restart\n\n# Check Docker status\nrc-service docker status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;docker_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start Docker\nservice docker start\n\n# Stop Docker\nservice docker stop\n\n# Restart Docker\nservice docker restart\n\n# Check status\nservice docker status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Docker Desktop manages its own services\n# Control through the UI or command line\n\n# Stop Docker Desktop\nosascript -e &#039;quit app &quot;Docker&quot;&#039;\n\n# Start Docker Desktop\nopen -a Docker\n\n# Check if Docker is running\ndocker system info &gt;/dev/null 2&gt;&amp;1 &amp;&amp; echo &quot;Docker is running&quot; || echo &quot;Docker is not running&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Docker Desktop manages services automatically\n# For manual control:\n\n# Restart Docker Desktop\nStop-Process -Name &quot;Docker Desktop&quot; -Force\nStart-Process &quot;C:\\Program Files\\Docker\\Docker\\Docker Desktop.exe&quot;\n\n# Check Docker service status\nGet-Service -Name docker\n\n# Restart Docker service\nRestart-Service docker</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"storage-driver-configuration\" class=\"mobile-header\">Storage Driver Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure storage driver options\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;storage-driver&quot;: &quot;overlay2&quot;,\n  &quot;storage-opts&quot;: [\n    &quot;overlay2.override_kernel_check=true&quot;,\n    &quot;overlay2.size=20G&quot;\n  ],\n  &quot;data-root&quot;: &quot;/var/lib/docker&quot;\n}\nEOF\n\n# For devicemapper (older systems)\n{\n  &quot;storage-driver&quot;: &quot;devicemapper&quot;,\n  &quot;storage-opts&quot;: [\n    &quot;dm.thinpooldev=/dev/mapper/docker-thinpool&quot;,\n    &quot;dm.use_deferred_removal=true&quot;,\n    &quot;dm.use_deferred_deletion=true&quot;\n  ]\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"network-configuration\" class=\"mobile-header\">Network Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure default network settings\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;bip&quot;: &quot;172.17.0.1/16&quot;,\n  &quot;fixed-cidr&quot;: &quot;172.17.0.0/16&quot;,\n  &quot;default-address-pools&quot;: [\n    {\n      &quot;base&quot;: &quot;172.80.0.0/16&quot;,\n      &quot;size&quot;: 24\n    }\n  ],\n  &quot;dns&quot;: [&quot;8.8.8.8&quot;, &quot;8.8.4.4&quot;],\n  &quot;dns-search&quot;: [&quot;example.com&quot;]\n}\nEOF\n\n# Enable IPv6 support\n{\n  &quot;ipv6&quot;: true,\n  &quot;fixed-cidr-v6&quot;: &quot;2001:db8::/64&quot;\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure default container limits\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;default-ulimits&quot;: {\n    &quot;nofile&quot;: {\n      &quot;Name&quot;: &quot;nofile&quot;,\n      &quot;Hard&quot;: 64000,\n      &quot;Soft&quot;: 64000\n    },\n    &quot;nproc&quot;: {\n      &quot;Name&quot;: &quot;nproc&quot;,\n      &quot;Hard&quot;: 32000,\n      &quot;Soft&quot;: 32000\n    }\n  },\n  &quot;default-runtime&quot;: &quot;runc&quot;,\n  &quot;runtimes&quot;: {\n    &quot;nvidia&quot;: {\n      &quot;path&quot;: &quot;nvidia-container-runtime&quot;,\n      &quot;runtimeArgs&quot;: []\n    }\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-as-docker-registry-proxy\" class=\"mobile-header\">nginx as Docker Registry Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/sites-available/docker-registry\nserver {\n    listen 443 ssl http2;\n    server_name registry.example.com;\n\n    ssl_certificate /etc/ssl/certs/registry.crt;\n    ssl_certificate_key /etc/ssl/private/registry.key;\n\n    # Docker Registry API\n    location /v2/ {\n        proxy_pass http://localhost:5000;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_read_timeout 900;\n        \n        # Required for docker client\n        chunked_transfer_encoding on;\n        client_max_body_size 0;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-as-docker-registry-proxy\" class=\"mobile-header\">Apache as Docker Registry Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/docker-registry.conf\n&lt;VirtualHost *:443&gt;\n    ServerName registry.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/registry.crt\n    SSLCertificateKeyFile /etc/ssl/private/registry.key\n    \n    ProxyPreserveHost On\n    ProxyPass /v2 http://localhost:5000/v2\n    ProxyPassReverse /v2 http://localhost:5000/v2\n    \n    &lt;Location /v2&gt;\n        Order deny,allow\n        Allow from all\n        \n        # Authentication\n        AuthType Basic\n        AuthName &quot;Docker Registry&quot;\n        AuthUserFile /etc/apache2/.htpasswd\n        Require valid-user\n    &lt;/Location&gt;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"caddy-as-docker-registry-proxy\" class=\"mobile-header\">Caddy as Docker Registry Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"caddyfile\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">caddyfile</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-caddyfile\">registry.example.com {\n    reverse_proxy localhost:5000 {\n        header_up Host {host}\n        header_up X-Real-IP {remote}\n        header_up X-Forwarded-For {remote}\n        header_up X-Forwarded-Proto {scheme}\n    }\n    \n    basicauth /v2/* {\n        admin $2a$14$xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n    }\n    \n    encode gzip\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"traefik-configuration\" class=\"mobile-header\">Traefik Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml for Traefik\nversion: &#039;3.8&#039;\n\nservices:\n  traefik:\n    image: traefik:v2.9\n    command:\n      - &quot;--api.insecure=true&quot;\n      - &quot;--providers.docker=true&quot;\n      - &quot;--entrypoints.websecure.address=:443&quot;\n    ports:\n      - &quot;443:443&quot;\n      - &quot;8080:8080&quot;\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - ./certs:/certs\n\n  registry:\n    image: registry:2\n    labels:\n      - &quot;traefik.enable=true&quot;\n      - &quot;traefik.http.routers.registry.rule=Host(`registry.example.com`)&quot;\n      - &quot;traefik.http.routers.registry.entrypoints=websecure&quot;\n      - &quot;traefik.http.routers.registry.tls=true&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"docker-daemon-security\" class=\"mobile-header\">Docker Daemon Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable TLS for Docker daemon\n# Generate CA private key\nopenssl genrsa -aes256 -out ca-key.pem 4096\n\n# Generate CA certificate\nopenssl req -new -x509 -days 3650 -key ca-key.pem -sha256 -out ca.pem\n\n# Generate server key\nopenssl genrsa -out server-key.pem 4096\n\n# Generate certificate signing request\nopenssl req -subj &quot;/CN=$HOST&quot; -sha256 -new -key server-key.pem -out server.csr\n\n# Generate server certificate\necho subjectAltName = DNS:$HOST,IP:127.0.0.1 &gt;&gt; extfile.cnf\necho extendedKeyUsage = serverAuth &gt;&gt; extfile.cnf\nopenssl x509 -req -days 365 -sha256 -in server.csr -CA ca.pem -CAkey ca-key.pem -out server-cert.pem -extfile extfile.cnf\n\n# Configure Docker to use TLS\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;hosts&quot;: [&quot;tcp://0.0.0.0:2376&quot;],\n  &quot;tls&quot;: true,\n  &quot;tlsverify&quot;: true,\n  &quot;tlscert&quot;: &quot;/etc/docker/certs/server-cert.pem&quot;,\n  &quot;tlskey&quot;: &quot;/etc/docker/certs/server-key.pem&quot;,\n  &quot;tlscacert&quot;: &quot;/etc/docker/certs/ca.pem&quot;\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"apparmorselinux-configuration\" class=\"mobile-header\">AppArmor/SELinux Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># AppArmor (Debian/Ubuntu)\n# Check if AppArmor is enabled\nsudo aa-status\n\n# Docker containers use docker-default profile by default\n# Create custom profile\nsudo tee /etc/apparmor.d/docker-custom &lt;&lt;EOF\n#include &lt;tunables/global&gt;\n\nprofile docker-custom flags=(attach_disconnected,mediate_deleted) {\n  #include &lt;abstractions/base&gt;\n  \n  network,\n  capability,\n  \n  # Deny dangerous capabilities\n  deny capability dac_override,\n  deny capability setuid,\n  deny capability setgid,\n  \n  # File access\n  deny /proc/sys/** w,\n  deny /sys/** w,\n  \n  # Allow necessary access\n  /usr/bin/** ix,\n  /bin/** ix,\n  /lib/** r,\n}\nEOF\n\n# Load profile\nsudo apparmor_parser -r /etc/apparmor.d/docker-custom\n\n# SELinux (RHEL/CentOS)\n# Enable SELinux for containers\nsudo setsebool -P container_manage_cgroup true\n\n# Check Docker SELinux context\nps -eZ | grep dockerd</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-rules\" class=\"mobile-header\">Firewall Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\n# Docker manages its own iptables rules\n# To integrate with UFW:\nsudo tee -a /etc/ufw/after.rules &lt;&lt;EOF\n*filter\n:ufw-user-forward - [0:0]\n:DOCKER-USER - [0:0]\n-A DOCKER-USER -j ufw-user-forward\n-A DOCKER-USER -j RETURN -s 10.0.0.0/8\n-A DOCKER-USER -j RETURN -s 172.16.0.0/12\n-A DOCKER-USER -j RETURN -s 192.168.0.0/16\n-A DOCKER-USER -j DROP\nCOMMIT\nEOF\n\nsudo ufw reload\n\n# firewalld (RHEL/CentOS/openSUSE)\n# Add Docker zone\nsudo firewall-cmd --permanent --new-zone=docker\nsudo firewall-cmd --permanent --zone=docker --add-interface=docker0\nsudo firewall-cmd --permanent --zone=docker --add-port=2377/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/tcp\nsudo firewall-cmd --permanent --zone=docker --add-port=7946/udp\nsudo firewall-cmd --permanent --zone=docker --add-port=4789/udp\nsudo firewall-cmd --reload\n\n# iptables (manual)\n# Allow Docker subnet\nsudo iptables -A INPUT -s 172.17.0.0/16 -j ACCEPT\nsudo iptables-save &gt; /etc/iptables/rules.v4\n\n# pf (FreeBSD)\n# Add to /etc/pf.conf\npass in on docker0 all\npass out on docker0 all</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">Docker doesn't require a database, but here's how to run databases in Docker:</p>\n<h3 id=\"postgresql-in-docker\" class=\"mobile-header\">PostgreSQL in Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create volume for persistent data\ndocker volume create postgres_data\n\n# Run PostgreSQL container\ndocker run -d \\\n  --name postgres \\\n  --restart unless-stopped \\\n  -e POSTGRES_PASSWORD=securepassword \\\n  -e POSTGRES_USER=myuser \\\n  -e POSTGRES_DB=mydb \\\n  -v postgres_data:/var/lib/postgresql/data \\\n  -p 5432:5432 \\\n  postgres:15-alpine\n\n# Connect to PostgreSQL\ndocker exec -it postgres psql -U myuser -d mydb</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-in-docker\" class=\"mobile-header\">MySQL in Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create volume for persistent data\ndocker volume create mysql_data\n\n# Run MySQL container\ndocker run -d \\\n  --name mysql \\\n  --restart unless-stopped \\\n  -e MYSQL_ROOT_PASSWORD=rootpassword \\\n  -e MYSQL_DATABASE=mydb \\\n  -e MYSQL_USER=myuser \\\n  -e MYSQL_PASSWORD=securepassword \\\n  -v mysql_data:/var/lib/mysql \\\n  -p 3306:3306 \\\n  mysql:8.0\n\n# Connect to MySQL\ndocker exec -it mysql mysql -u myuser -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"kernel-parameters\" class=\"mobile-header\">Kernel Parameters</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize kernel parameters for Docker\nsudo tee -a /etc/sysctl.conf &lt;&lt;EOF\n# Docker optimization\nvm.max_map_count=262144\nfs.file-max=2097152\nfs.inotify.max_user_watches=524288\nfs.inotify.max_user_instances=512\n\n# Network optimization\nnet.core.somaxconn=32768\nnet.ipv4.tcp_max_syn_backlog=8192\nnet.core.netdev_max_backlog=5000\nnet.ipv4.ip_local_port_range=1024 65535\n\n# Bridge settings\nnet.bridge.bridge-nf-call-iptables=1\nnet.bridge.bridge-nf-call-ip6tables=1\nnet.ipv4.ip_forward=1\nEOF\n\n# Apply settings\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"storage-optimization\" class=\"mobile-header\">Storage Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use dedicated disk for Docker\n# Format with XFS for better performance\nsudo mkfs.xfs /dev/sdb1\nsudo mkdir -p /var/lib/docker\nsudo mount /dev/sdb1 /var/lib/docker\n\n# Add to /etc/fstab\necho &quot;/dev/sdb1 /var/lib/docker xfs defaults,noatime 0 2&quot; | sudo tee -a /etc/fstab\n\n# Configure storage driver options\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;storage-driver&quot;: &quot;overlay2&quot;,\n  &quot;storage-opts&quot;: [\n    &quot;overlay2.override_kernel_check=true&quot;\n  ],\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: {\n    &quot;max-size&quot;: &quot;10m&quot;,\n    &quot;max-file&quot;: &quot;3&quot;\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"build-optimization\" class=\"mobile-header\">Build Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable BuildKit for faster builds\nexport DOCKER_BUILDKIT=1\n\n# Configure BuildKit in daemon\nsudo tee -a /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;features&quot;: {\n    &quot;buildkit&quot;: true\n  }\n}\nEOF\n\n# Use build cache mount\n# In Dockerfile:\n# syntax=docker/dockerfile:1\nFROM alpine\nRUN --mount=type=cache,target=/var/cache/apk \\\n    apk add --no-cache git</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"docker-stats-and-events\" class=\"mobile-header\">Docker Stats and Events</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Monitor container resource usage\ndocker stats\n\n# Stream Docker events\ndocker events\n\n# Monitor specific container\ndocker stats container_name\n\n# Export metrics in JSON\ndocker stats --no-stream --format json &gt; stats.json\n\n# Monitor Docker daemon\nsudo journalctl -u docker.service -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"cadvisor-setup\" class=\"mobile-header\">cAdvisor Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run cAdvisor for container metrics\ndocker run -d \\\n  --name=cadvisor \\\n  --restart unless-stopped \\\n  -p 8080:8080 \\\n  -v /:/rootfs:ro \\\n  -v /var/run:/var/run:ro \\\n  -v /sys:/sys:ro \\\n  -v /var/lib/docker/:/var/lib/docker:ro \\\n  -v /dev/disk/:/dev/disk:ro \\\n  --privileged \\\n  gcr.io/cadvisor/cadvisor:latest\n\n# Access metrics at http://localhost:8080</code></pre>\n      </div>\n    </div>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># docker-compose.yml for monitoring stack\nversion: &#039;3.8&#039;\n\nservices:\n  prometheus:\n    image: prom/prometheus\n    volumes:\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\n      - prometheus_data:/prometheus\n    ports:\n      - &quot;9090:9090&quot;\n    command:\n      - &#039;--config.file=/etc/prometheus/prometheus.yml&#039;\n      - &#039;--storage.tsdb.path=/prometheus&#039;\n\n  node-exporter:\n    image: prom/node-exporter\n    ports:\n      - &quot;9100:9100&quot;\n    volumes:\n      - /proc:/host/proc:ro\n      - /sys:/host/sys:ro\n      - /:/rootfs:ro\n\nvolumes:\n  prometheus_data:</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"container-backup\" class=\"mobile-header\">Container Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# backup-docker.sh\n\nBACKUP_DIR=&quot;/backup/docker&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\n# Create backup directory\nmkdir -p $BACKUP_DIR/{images,volumes,configs}\n\n# Backup running containers\ndocker ps -q | while read container; do\n    name=$(docker inspect -f &#039;{{.Name}}&#039; $container | sed &#039;s/\\///&#039;)\n    docker commit $container backup_$name:$DATE\n    docker save backup_$name:$DATE | gzip &gt; $BACKUP_DIR/images/${name}_${DATE}.tar.gz\n    docker inspect $container &gt; $BACKUP_DIR/configs/${name}_${DATE}.json\ndone\n\n# Backup volumes\ndocker volume ls -q | while read volume; do\n    docker run --rm \\\n        -v $volume:/data \\\n        -v $BACKUP_DIR/volumes:/backup \\\n        alpine tar czf /backup/${volume}_${DATE}.tar.gz -C /data .\ndone\n\n# Backup Docker daemon config\ncp /etc/docker/daemon.json $BACKUP_DIR/configs/daemon_${DATE}.json\n\necho &quot;Backup completed: $DATE&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"volume-backup\" class=\"mobile-header\">Volume Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup named volume\ndocker run --rm \\\n    -v myvolume:/source:ro \\\n    -v $(pwd):/backup \\\n    alpine tar czf /backup/myvolume.tar.gz -C /source .\n\n# Restore volume\ndocker run --rm \\\n    -v myvolume:/target \\\n    -v $(pwd):/backup \\\n    alpine tar xzf /backup/myvolume.tar.gz -C /target</code></pre>\n      </div>\n    </div>\n<h3 id=\"registry-backup\" class=\"mobile-header\">Registry Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Backup Docker registry data\ndocker exec registry tar czf - /var/lib/registry | gzip &gt; registry_backup_$(date +%Y%m%d).tar.gz\n\n# Backup registry config\ndocker exec registry cat /etc/docker/registry/config.yml &gt; registry_config_backup.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Cannot connect to Docker daemon</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if Docker is running\nsudo systemctl status docker\n\n# Check Docker socket permissions\nls -la /var/run/docker.sock\n\n# Check if user is in docker group\ngroups $USER\n\n# Start Docker if not running\nsudo systemctl start docker</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Container networking issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Docker networks\ndocker network ls\n\n# Inspect bridge network\ndocker network inspect bridge\n\n# Check iptables rules\nsudo iptables -L -n -v\n\n# Reset Docker networking\nsudo systemctl stop docker\nsudo ip link delete docker0\nsudo systemctl start docker</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Storage space issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check disk usage\ndocker system df\n\n# Clean up unused resources\ndocker system prune -a --volumes\n\n# Check Docker root directory\ndf -h /var/lib/docker\n\n# Find large containers/images\ndocker ps -s\ndocker images --format &quot;table {{.Repository}}\\t{{.Tag}}\\t{{.Size}}&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">4. <strong>Permission denied errors</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Fix socket permissions\nsudo chmod 666 /var/run/docker.sock\n\n# Fix user namespace issues\nsudo usermod -aG docker $USER\nnewgrp docker\n\n# Check SELinux/AppArmor\ngetenforce  # SELinux\nsudo aa-status  # AppArmor</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run Docker in debug mode\nsudo dockerd --debug\n\n# Enable debug logging\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;debug&quot;: true,\n  &quot;log-level&quot;: &quot;debug&quot;\n}\nEOF\n\nsudo systemctl restart docker\n\n# Check debug logs\nsudo journalctl -u docker.service --no-pager</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo yum update docker-ce docker-ce-cli containerd.io\n\n# Debian/Ubuntu\nsudo apt-get update\nsudo apt-get upgrade docker-ce docker-ce-cli containerd.io\n\n# Arch Linux\nsudo pacman -Syu docker\n\n# Alpine Linux\napk update\napk upgrade docker\n\n# openSUSE\nsudo zypper update docker\n\n# FreeBSD\npkg update\npkg upgrade docker\n\n# Always restart after updates\nsudo systemctl restart docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"cleanup-tasks\" class=\"mobile-header\">Cleanup Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# docker-cleanup.sh\n\necho &quot;Starting Docker cleanup...&quot;\n\n# Remove stopped containers\ndocker container prune -f\n\n# Remove unused images\ndocker image prune -a -f\n\n# Remove unused volumes\ndocker volume prune -f\n\n# Remove unused networks\ndocker network prune -f\n\n# Remove build cache\ndocker builder prune -f\n\n# Show disk usage after cleanup\ndocker system df\n\necho &quot;Cleanup completed&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-rotation\" class=\"mobile-header\">Log Rotation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation for containers\nsudo tee /etc/docker/daemon.json &lt;&lt;EOF\n{\n  &quot;log-driver&quot;: &quot;json-file&quot;,\n  &quot;log-opts&quot;: {\n    &quot;max-size&quot;: &quot;10m&quot;,\n    &quot;max-file&quot;: &quot;3&quot;,\n    &quot;compress&quot;: &quot;true&quot;\n  }\n}\nEOF\n\n# System-wide Docker logs rotation\nsudo tee /etc/logrotate.d/docker &lt;&lt;EOF\n/var/lib/docker/containers/*/*.log {\n    rotate 7\n    daily\n    compress\n    missingok\n    delaycompress\n    copytruncate\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"cicd-pipeline-integration\" class=\"mobile-header\">CI/CD Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># GitLab CI example\nstages:\n  - build\n  - test\n  - deploy\n\nvariables:\n  DOCKER_DRIVER: overlay2\n  DOCKER_TLS_CERTDIR: &quot;/certs&quot;\n\nbuild:\n  stage: build\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker build -t myapp:$CI_COMMIT_SHA .\n    - docker push myapp:$CI_COMMIT_SHA\n\n# Jenkins Pipeline example\npipeline {\n    agent any\n    stages {\n        stage(&#039;Build&#039;) {\n            steps {\n                script {\n                    docker.build(&quot;myapp:${env.BUILD_ID}&quot;)\n                }\n            }\n        }\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-integration\" class=\"mobile-header\">Kubernetes Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install CRI-Docker for Kubernetes\nCRI_VERSION=&quot;0.3.1&quot;\nwget https://github.com/Mirantis/cri-dockerd/releases/download/v${CRI_VERSION}/cri-dockerd-${CRI_VERSION}.amd64.tgz\ntar xzf cri-dockerd-${CRI_VERSION}.amd64.tgz\nsudo install -o root -g root -m 0755 cri-dockerd /usr/local/bin/cri-dockerd\nrm cri-dockerd-${CRI_VERSION}.amd64.tgz cri-dockerd\n\n# Create systemd service\nsudo tee /etc/systemd/system/cri-docker.service &lt;&lt;EOF\n[Unit]\nDescription=CRI Docker Interface\nAfter=network.target docker.service\nRequires=docker.service\n\n[Service]\nType=notify\nExecStart=/usr/local/bin/cri-dockerd --container-runtime-endpoint unix:///var/run/cri-dockerd.sock\nRestart=always\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now cri-docker</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-compose-examples\" class=\"mobile-header\">Docker Compose Examples</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># Multi-tier application stack\nversion: &#039;3.8&#039;\n\nservices:\n  web:\n    build: ./web\n    ports:\n      - &quot;80:80&quot;\n    environment:\n      - DATABASE_URL=postgresql://user:pass@db:5432/mydb\n    depends_on:\n      - db\n    networks:\n      - frontend\n      - backend\n\n  db:\n    image: postgres:15\n    environment:\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=pass\n      - POSTGRES_DB=mydb\n    volumes:\n      - db_data:/var/lib/postgresql/data\n    networks:\n      - backend\n\n  redis:\n    image: redis:alpine\n    networks:\n      - backend\n\nnetworks:\n  frontend:\n  backend:\n\nvolumes:\n  db_data:</code></pre>\n      </div>\n    </div>\n<h3 id=\"sdk-integration\" class=\"mobile-header\">SDK Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\"># Python Docker SDK\nimport docker\n\nclient = docker.from_env()\n\n# Run container\ncontainer = client.containers.run(\n    &quot;alpine&quot;,\n    &quot;echo hello world&quot;,\n    detach=True\n)\n\n# List containers\nfor container in client.containers.list():\n    print(container.name)\n\n# Build image\nimage, logs = client.images.build(\n    path=&quot;.&quot;,\n    tag=&quot;myapp:latest&quot;\n)</code></pre>\n      </div>\n    </div>\n<div class=\"mobile-code-block\" data-language=\"javascript\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">javascript</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-javascript\">// Node.js Docker SDK\nconst Docker = require(&#039;dockerode&#039;);\nconst docker = new Docker();\n\n// Run container\ndocker.createContainer({\n  Image: &#039;alpine&#039;,\n  Cmd: [&#039;echo&#039;, &#039;hello world&#039;],\n  name: &#039;mycontainer&#039;\n}, (err, container) =&gt; {\n  if (!err) {\n    container.start();\n  }\n});\n\n// List containers\ndocker.listContainers((err, containers) =&gt; {\n  containers.forEach(containerInfo =&gt; {\n    console.log(containerInfo.Names);\n  });\n});</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Hub</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/docker\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/develop/dev-best-practices/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/engine/security/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Security Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.docker.com/compose/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Compose Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forums.docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Docker Community Forums</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://labs.play-with-docker.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Play with Docker</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"17 min","wordCount":3379,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"First-Run Setup","id":"first-run-setup"},{"level":3,"text":"Testing Initial Setup","id":"testing-initial-setup"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Storage Driver Configuration","id":"storage-driver-configuration"},{"level":3,"text":"Network Configuration","id":"network-configuration"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx as Docker Registry Proxy","id":"nginx-as-docker-registry-proxy"},{"level":3,"text":"Apache as Docker Registry Proxy","id":"apache-as-docker-registry-proxy"},{"level":3,"text":"Caddy as Docker Registry Proxy","id":"caddy-as-docker-registry-proxy"},{"level":3,"text":"Traefik Configuration","id":"traefik-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Docker Daemon Security","id":"docker-daemon-security"},{"level":3,"text":"AppArmor/SELinux Configuration","id":"apparmorselinux-configuration"},{"level":3,"text":"Firewall Rules","id":"firewall-rules"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL in Docker","id":"postgresql-in-docker"},{"level":3,"text":"MySQL in Docker","id":"mysql-in-docker"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Kernel Parameters","id":"kernel-parameters"},{"level":3,"text":"Storage Optimization","id":"storage-optimization"},{"level":3,"text":"Build Optimization","id":"build-optimization"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Docker Stats and Events","id":"docker-stats-and-events"},{"level":3,"text":"cAdvisor Setup","id":"cadvisor-setup"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Container Backup","id":"container-backup"},{"level":3,"text":"Volume Backup","id":"volume-backup"},{"level":3,"text":"Registry Backup","id":"registry-backup"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Cleanup Tasks","id":"cleanup-tasks"},{"level":3,"text":"Log Rotation","id":"log-rotation"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"CI/CD Pipeline Integration","id":"cicd-pipeline-integration"},{"level":3,"text":"Kubernetes Integration","id":"kubernetes-integration"},{"level":3,"text":"Docker Compose Examples","id":"docker-compose-examples"},{"level":3,"text":"SDK Integration","id":"sdk-integration"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-09-26T06:20:27.260Z","metadataVersion":"2.0"}]},"__N_SSG":true}