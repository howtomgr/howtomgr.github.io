{"pageProps":{"guide":{"name":"qmail","displayName":"Qmail Installation Guide","slug":"qmail","description":"Qmail is a free and open-source Mail Server. A secure, reliable, efficient mail server","category":"mail-servers","subcategory":"mail-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[25,80,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["mail-servers","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/mail-servers/qmail","documentationUrl":"https://howtomgr.github.io/mail-servers/qmail","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/qmail","updatedAt":"2025-09-16T17:46:07Z","createdAt":"2025-09-16T08:08:52Z","readmeRaw":"# Qmail Installation Guide\n\nQmail is a free and open-source Mail Server. A secure, reliable, efficient mail server\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 25/587 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 25/587 (default qmail port)\n- **Dependencies**:\n  - ucspi-tcp, daemontools\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install qmail\nsudo dnf install -y qmail ucspi-tcp, daemontools\n\n# Enable and start service\nsudo systemctl enable --now qmail\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=qmail\nsudo firewall-cmd --reload\n\n# Verify installation\nqmail --version || systemctl status qmail\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install qmail\nsudo apt install -y qmail ucspi-tcp, daemontools\n\n# Enable and start service\nsudo systemctl enable --now qmail\n\n# Configure firewall\nsudo ufw allow 25/587\n\n# Verify installation\nqmail --version || systemctl status qmail\n```\n\n### Arch Linux\n\n```bash\n# Install qmail\nsudo pacman -S qmail\n\n# Enable and start service\nsudo systemctl enable --now qmail\n\n# Verify installation\nqmail --version || systemctl status qmail\n```\n\n### Alpine Linux\n\n```bash\n# Install qmail\napk add --no-cache qmail\n\n# Enable and start service\nrc-update add qmail default\nrc-service qmail start\n\n# Verify installation\nqmail --version || rc-service qmail status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install qmail\nsudo zypper install -y qmail ucspi-tcp, daemontools\n\n# Enable and start service\nsudo systemctl enable --now qmail\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=qmail\nsudo firewall-cmd --reload\n\n# Verify installation\nqmail --version || systemctl status qmail\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install qmail\n\n# Start service\nbrew services start qmail\n\n# Verify installation\nqmail --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install qmail\n\n# Enable in rc.conf\necho 'qmail_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice qmail start\n\n# Verify installation\nqmail --version || service qmail status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install qmail\n\n# Or using Scoop\nscoop install qmail\n\n# Verify installation\nqmail --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /var/qmail/control\n\n# Set up basic configuration\nsudo tee /var/qmail/control/qmail.conf << 'EOF'\n# Qmail Configuration\nconcurrencyremote = 255\nEOF\n\n# Test configuration\nsudo qmail -t || sudo qmail configtest\n\n# Reload service\nsudo systemctl reload qmail\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R qmail:qmail /var/qmail/control\nsudo chmod 750 /var/qmail/control\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable qmail\n\n# Start service\nsudo systemctl start qmail\n\n# Stop service\nsudo systemctl stop qmail\n\n# Restart service\nsudo systemctl restart qmail\n\n# Reload configuration\nsudo systemctl reload qmail\n\n# Check status\nsudo systemctl status qmail\n\n# View logs\nsudo journalctl -u qmail -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add qmail default\n\n# Start service\nrc-service qmail start\n\n# Stop service\nrc-service qmail stop\n\n# Restart service\nrc-service qmail restart\n\n# Check status\nrc-service qmail status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'qmail_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice qmail start\n\n# Stop service\nservice qmail stop\n\n# Restart service\nservice qmail restart\n\n# Check status\nservice qmail status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start qmail\nbrew services stop qmail\nbrew services restart qmail\n\n# Check status\nbrew services list | grep qmail\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start qmail\n\n# Stop service\nnet stop qmail\n\n# Using PowerShell\nStart-Service qmail\nStop-Service qmail\nRestart-Service qmail\n\n# Check status\nGet-Service qmail\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /var/qmail/control/qmail.conf << 'EOF'\nconcurrencyremote = 255\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart qmail\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream qmail_backend {\n    server 127.0.0.1:25/587;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name qmail.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name qmail.example.com;\n\n    ssl_certificate /etc/ssl/certs/qmail.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/qmail.example.com.key;\n\n    location / {\n        proxy_pass http://qmail_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName qmail.example.com\n    Redirect permanent / https://qmail.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName qmail.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/qmail.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/qmail.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:25/587/\n    ProxyPassReverse / http://127.0.0.1:25/587/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:25/587/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend qmail_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/qmail.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend qmail_backend\n\nbackend qmail_backend\n    balance roundrobin\n    option httpchk GET /health\n    server qmail1 127.0.0.1:25/587 check\n    server qmail2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R qmail:qmail /var/qmail/control\nsudo chmod 750 /var/qmail/control\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=qmail\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/qmail.conf << 'EOF'\n[qmail]\nenabled = true\nport = 25/587\nfilter = qmail\nlogpath = /var/log/qmail/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/qmail.key \\\n    -out /etc/ssl/certs/qmail.crt\n\n# Configure SSL in qmail\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE qmail_db;\nCREATE USER qmail_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE qmail_db TO qmail_user;\nEOF\n\n# Configure qmail to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE qmail_db;\nCREATE USER 'qmail_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON qmail_db.* TO 'qmail_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Qmail specific tuning\nconcurrencyremote = 255\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nqmail soft nofile 65535\nqmail hard nofile 65535\nqmail soft nproc 32768\nqmail hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'qmail'\n    static_configs:\n      - targets: ['localhost:25/587']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet qmail; then\n    echo \"Qmail is running\"\n    exit 0\nelse\n    echo \"Qmail is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/qmail << 'EOF'\n/var/log/qmail/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 qmail qmail\n    postrotate\n        systemctl reload qmail > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Qmail backup script\nBACKUP_DIR=\"/backup/qmail\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop qmail\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/qmail-config-$DATE.tar.gz\" /var/qmail/control\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/qmail-data-$DATE.tar.gz\" /var/lib/qmail\n\n# Start service\nsystemctl start qmail\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop qmail\n\n# Restore configuration\nsudo tar -xzf /backup/qmail/qmail-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/qmail/qmail-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R qmail:qmail /var/qmail/control\nsudo chown -R qmail:qmail /var/lib/qmail\n\n# Start service\nsudo systemctl start qmail\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u qmail -n 100\nsudo tail -f /var/log/qmail/*.log\n\n# Check configuration\nsudo qmail -t || sudo qmail configtest\n\n# Check permissions\nls -la /var/qmail/control\nls -la /var/lib/qmail\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 25/587\nsudo netstat -tlnp | grep 25/587\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 25/587\nnc -zv localhost 25/587\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep qmail-send)\nhtop -p $(pgrep qmail-send)\n\n# Check connections\nss -ant | grep :25/587 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep qmail-send)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo qmail -d\n# or\nsudo qmail debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  qmail:\n    image: qmail:latest\n    container_name: qmail\n    ports:\n      - \"25/587:25/587\"\n    volumes:\n      - ./config:/var/qmail/control\n      - ./data:/var/lib/qmail\n    environment:\n      - qmail_CONFIG=/var/qmail/control/qmail.conf\n    restart: unless-stopped\n    networks:\n      - qmail_net\n\nnetworks:\n  qmail_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: qmail\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: qmail\n  template:\n    metadata:\n      labels:\n        app: qmail\n    spec:\n      containers:\n      - name: qmail\n        image: qmail:latest\n        ports:\n        - containerPort: 25/587\n        volumeMounts:\n        - name: config\n          mountPath: /var/qmail/control\n      volumes:\n      - name: config\n        configMap:\n          name: qmail-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: qmail\nspec:\n  selector:\n    app: qmail\n  ports:\n  - port: 25/587\n    targetPort: 25/587\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Qmail\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install qmail\n      package:\n        name: qmail\n        state: present\n    \n    - name: Configure qmail\n      template:\n        src: qmail.conf.j2\n        dest: /var/qmail/control/qmail.conf\n        owner: qmail\n        group: qmail\n        mode: '0640'\n      notify: restart qmail\n    \n    - name: Start and enable qmail\n      systemd:\n        name: qmail\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart qmail\n      systemd:\n        name: qmail\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update qmail\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade qmail\n\n# Arch Linux\nsudo pacman -Syu qmail\n\n# Alpine Linux\napk update && apk upgrade qmail\n\n# openSUSE\nsudo zypper update qmail\n\n# FreeBSD\npkg update && pkg upgrade qmail\n\n# Always backup before updates\ntar -czf /backup/qmail-pre-update-$(date +%Y%m%d).tar.gz /var/qmail/control\n\n# Restart after updates\nsudo systemctl restart qmail\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/qmail -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo qmail --verify || sudo qmail check\n\n# Update databases (if applicable)\nsudo qmail-update-db\n\n# Optimize performance\nsudo qmail-optimize\n\n# Check for security updates\nsudo qmail --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.qmail.org/\n- GitHub Repository: https://github.com/qmail/qmail\n- Community Forum: https://forum.qmail.org/\n- Wiki: https://wiki.qmail.org/\n- Comparison vs Postfix, Exim, Sendmail, OpenSMTPD: https://docs.qmail.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Qmail is a free and open-source Mail Server. A secure, reliable, efficient mail server</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 25/587 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 25/587 (default qmail port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">ucspi-tcp, daemontools</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install qmail\nsudo dnf install -y qmail ucspi-tcp, daemontools\n\n# Enable and start service\nsudo systemctl enable --now qmail\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=qmail\nsudo firewall-cmd --reload\n\n# Verify installation\nqmail --version || systemctl status qmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install qmail\nsudo apt install -y qmail ucspi-tcp, daemontools\n\n# Enable and start service\nsudo systemctl enable --now qmail\n\n# Configure firewall\nsudo ufw allow 25/587\n\n# Verify installation\nqmail --version || systemctl status qmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install qmail\nsudo pacman -S qmail\n\n# Enable and start service\nsudo systemctl enable --now qmail\n\n# Verify installation\nqmail --version || systemctl status qmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install qmail\napk add --no-cache qmail\n\n# Enable and start service\nrc-update add qmail default\nrc-service qmail start\n\n# Verify installation\nqmail --version || rc-service qmail status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install qmail\nsudo zypper install -y qmail ucspi-tcp, daemontools\n\n# Enable and start service\nsudo systemctl enable --now qmail\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=qmail\nsudo firewall-cmd --reload\n\n# Verify installation\nqmail --version || systemctl status qmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install qmail\n\n# Start service\nbrew services start qmail\n\n# Verify installation\nqmail --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install qmail\n\n# Enable in rc.conf\necho &#039;qmail_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice qmail start\n\n# Verify installation\nqmail --version || service qmail status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install qmail\n\n# Or using Scoop\nscoop install qmail\n\n# Verify installation\nqmail --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /var/qmail/control\n\n# Set up basic configuration\nsudo tee /var/qmail/control/qmail.conf &lt;&lt; &#039;EOF&#039;\n# Qmail Configuration\nconcurrencyremote = 255\nEOF\n\n# Test configuration\nsudo qmail -t || sudo qmail configtest\n\n# Reload service\nsudo systemctl reload qmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R qmail:qmail /var/qmail/control\nsudo chmod 750 /var/qmail/control\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable qmail\n\n# Start service\nsudo systemctl start qmail\n\n# Stop service\nsudo systemctl stop qmail\n\n# Restart service\nsudo systemctl restart qmail\n\n# Reload configuration\nsudo systemctl reload qmail\n\n# Check status\nsudo systemctl status qmail\n\n# View logs\nsudo journalctl -u qmail -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add qmail default\n\n# Start service\nrc-service qmail start\n\n# Stop service\nrc-service qmail stop\n\n# Restart service\nrc-service qmail restart\n\n# Check status\nrc-service qmail status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;qmail_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice qmail start\n\n# Stop service\nservice qmail stop\n\n# Restart service\nservice qmail restart\n\n# Check status\nservice qmail status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start qmail\nbrew services stop qmail\nbrew services restart qmail\n\n# Check status\nbrew services list | grep qmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start qmail\n\n# Stop service\nnet stop qmail\n\n# Using PowerShell\nStart-Service qmail\nStop-Service qmail\nRestart-Service qmail\n\n# Check status\nGet-Service qmail</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /var/qmail/control/qmail.conf &lt;&lt; &#039;EOF&#039;\nconcurrencyremote = 255\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart qmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream qmail_backend {\n    server 127.0.0.1:25/587;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name qmail.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name qmail.example.com;\n\n    ssl_certificate /etc/ssl/certs/qmail.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/qmail.example.com.key;\n\n    location / {\n        proxy_pass http://qmail_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName qmail.example.com\n    Redirect permanent / https://qmail.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName qmail.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/qmail.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/qmail.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:25/587/\n    ProxyPassReverse / http://127.0.0.1:25/587/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:25/587/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend qmail_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/qmail.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend qmail_backend\n\nbackend qmail_backend\n    balance roundrobin\n    option httpchk GET /health\n    server qmail1 127.0.0.1:25/587 check\n    server qmail2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R qmail:qmail /var/qmail/control\nsudo chmod 750 /var/qmail/control\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=qmail\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/qmail.conf &lt;&lt; &#039;EOF&#039;\n[qmail]\nenabled = true\nport = 25/587\nfilter = qmail\nlogpath = /var/log/qmail/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/qmail.key \\\n    -out /etc/ssl/certs/qmail.crt\n\n# Configure SSL in qmail\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE qmail_db;\nCREATE USER qmail_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE qmail_db TO qmail_user;\nEOF\n\n# Configure qmail to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE qmail_db;\nCREATE USER &#039;qmail_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON qmail_db.* TO &#039;qmail_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Qmail specific tuning\nconcurrencyremote = 255</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nqmail soft nofile 65535\nqmail hard nofile 65535\nqmail soft nproc 32768\nqmail hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;qmail&#039;\n    static_configs:\n      - targets: [&#039;localhost:25/587&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet qmail; then\n    echo &quot;Qmail is running&quot;\n    exit 0\nelse\n    echo &quot;Qmail is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/qmail &lt;&lt; &#039;EOF&#039;\n/var/log/qmail/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 qmail qmail\n    postrotate\n        systemctl reload qmail &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Qmail backup script\nBACKUP_DIR=&quot;/backup/qmail&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop qmail\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/qmail-config-$DATE.tar.gz&quot; /var/qmail/control\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/qmail-data-$DATE.tar.gz&quot; /var/lib/qmail\n\n# Start service\nsystemctl start qmail\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop qmail\n\n# Restore configuration\nsudo tar -xzf /backup/qmail/qmail-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/qmail/qmail-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R qmail:qmail /var/qmail/control\nsudo chown -R qmail:qmail /var/lib/qmail\n\n# Start service\nsudo systemctl start qmail</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u qmail -n 100\nsudo tail -f /var/log/qmail/*.log\n\n# Check configuration\nsudo qmail -t || sudo qmail configtest\n\n# Check permissions\nls -la /var/qmail/control\nls -la /var/lib/qmail</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 25/587\nsudo netstat -tlnp | grep 25/587\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 25/587\nnc -zv localhost 25/587</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep qmail-send)\nhtop -p $(pgrep qmail-send)\n\n# Check connections\nss -ant | grep :25/587 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep qmail-send)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo qmail -d\n# or\nsudo qmail debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  qmail:\n    image: qmail:latest\n    container_name: qmail\n    ports:\n      - &quot;25/587:25/587&quot;\n    volumes:\n      - ./config:/var/qmail/control\n      - ./data:/var/lib/qmail\n    environment:\n      - qmail_CONFIG=/var/qmail/control/qmail.conf\n    restart: unless-stopped\n    networks:\n      - qmail_net\n\nnetworks:\n  qmail_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: qmail\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: qmail\n  template:\n    metadata:\n      labels:\n        app: qmail\n    spec:\n      containers:\n      - name: qmail\n        image: qmail:latest\n        ports:\n        - containerPort: 25/587\n        volumeMounts:\n        - name: config\n          mountPath: /var/qmail/control\n      volumes:\n      - name: config\n        configMap:\n          name: qmail-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: qmail\nspec:\n  selector:\n    app: qmail\n  ports:\n  - port: 25/587\n    targetPort: 25/587\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Qmail\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install qmail\n      package:\n        name: qmail\n        state: present\n    \n    - name: Configure qmail\n      template:\n        src: qmail.conf.j2\n        dest: /var/qmail/control/qmail.conf\n        owner: qmail\n        group: qmail\n        mode: &#039;0640&#039;\n      notify: restart qmail\n    \n    - name: Start and enable qmail\n      systemd:\n        name: qmail\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart qmail\n      systemd:\n        name: qmail\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update qmail\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade qmail\n\n# Arch Linux\nsudo pacman -Syu qmail\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade qmail\n\n# openSUSE\nsudo zypper update qmail\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade qmail\n\n# Always backup before updates\ntar -czf /backup/qmail-pre-update-$(date +%Y%m%d).tar.gz /var/qmail/control\n\n# Restart after updates\nsudo systemctl restart qmail</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/qmail -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo qmail --verify || sudo qmail check\n\n# Update databases (if applicable)\nsudo qmail-update-db\n\n# Optimize performance\nsudo qmail-optimize\n\n# Check for security updates\nsudo qmail --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.qmail.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/qmail/qmail</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.qmail.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.qmail.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Postfix, Exim, Sendmail, OpenSMTPD: https://docs.qmail.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1988,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-20T18:16:31.402Z","metadataVersion":"2.0"},"category":{"key":"mail-servers","name":"Mail servers","description":"Mail servers tools and applications","icon":"🌐","color":"#50fa7b"},"relatedGuides":[{"name":"dovecot","displayName":"Dovecot Installation Guide","slug":"dovecot","description":"Dovecot is a free and open-source Mail Server. An open-source IMAP and POP3 server for Unix-like systems","category":"mail-servers","subcategory":"mail-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[80,143,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["mail-servers","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/mail-servers/dovecot","documentationUrl":"https://howtomgr.github.io/mail-servers/dovecot","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/dovecot","updatedAt":"2025-09-16T17:08:52Z","createdAt":"2025-09-16T02:32:39Z","readmeRaw":"# Dovecot Installation Guide\n\nDovecot is a free and open-source Mail Server. An open-source IMAP and POP3 server for Unix-like systems\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 143/993 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 143/993 (default dovecot port)\n- **Dependencies**:\n  - dovecot-imapd, dovecot-pop3d, dovecot-lmtpd\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dovecot\nsudo dnf install -y dovecot dovecot-imapd, dovecot-pop3d, dovecot-lmtpd\n\n# Enable and start service\nsudo systemctl enable --now dovecot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dovecot\nsudo firewall-cmd --reload\n\n# Verify installation\ndovecot --version || systemctl status dovecot\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install dovecot\nsudo apt install -y dovecot dovecot-imapd, dovecot-pop3d, dovecot-lmtpd\n\n# Enable and start service\nsudo systemctl enable --now dovecot\n\n# Configure firewall\nsudo ufw allow 143/993\n\n# Verify installation\ndovecot --version || systemctl status dovecot\n```\n\n### Arch Linux\n\n```bash\n# Install dovecot\nsudo pacman -S dovecot\n\n# Enable and start service\nsudo systemctl enable --now dovecot\n\n# Verify installation\ndovecot --version || systemctl status dovecot\n```\n\n### Alpine Linux\n\n```bash\n# Install dovecot\napk add --no-cache dovecot\n\n# Enable and start service\nrc-update add dovecot default\nrc-service dovecot start\n\n# Verify installation\ndovecot --version || rc-service dovecot status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install dovecot\nsudo zypper install -y dovecot dovecot-imapd, dovecot-pop3d, dovecot-lmtpd\n\n# Enable and start service\nsudo systemctl enable --now dovecot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dovecot\nsudo firewall-cmd --reload\n\n# Verify installation\ndovecot --version || systemctl status dovecot\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install dovecot\n\n# Start service\nbrew services start dovecot\n\n# Verify installation\ndovecot --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install dovecot\n\n# Enable in rc.conf\necho 'dovecot_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dovecot start\n\n# Verify installation\ndovecot --version || service dovecot status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install dovecot\n\n# Or using Scoop\nscoop install dovecot\n\n# Verify installation\ndovecot --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/dovecot\n\n# Set up basic configuration\nsudo tee /etc/dovecot/dovecot.conf << 'EOF'\n# Dovecot Configuration\nmail_max_userip_connections = 50, mail_plugins = $mail_plugins zlib\nEOF\n\n# Test configuration\nsudo dovecot -t || sudo dovecot configtest\n\n# Reload service\nsudo systemctl reload dovecot\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R dovecot:dovecot /etc/dovecot\nsudo chmod 750 /etc/dovecot\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable dovecot\n\n# Start service\nsudo systemctl start dovecot\n\n# Stop service\nsudo systemctl stop dovecot\n\n# Restart service\nsudo systemctl restart dovecot\n\n# Reload configuration\nsudo systemctl reload dovecot\n\n# Check status\nsudo systemctl status dovecot\n\n# View logs\nsudo journalctl -u dovecot -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add dovecot default\n\n# Start service\nrc-service dovecot start\n\n# Stop service\nrc-service dovecot stop\n\n# Restart service\nrc-service dovecot restart\n\n# Check status\nrc-service dovecot status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'dovecot_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dovecot start\n\n# Stop service\nservice dovecot stop\n\n# Restart service\nservice dovecot restart\n\n# Check status\nservice dovecot status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start dovecot\nbrew services stop dovecot\nbrew services restart dovecot\n\n# Check status\nbrew services list | grep dovecot\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start dovecot\n\n# Stop service\nnet stop dovecot\n\n# Using PowerShell\nStart-Service dovecot\nStop-Service dovecot\nRestart-Service dovecot\n\n# Check status\nGet-Service dovecot\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/dovecot/dovecot.conf << 'EOF'\nmail_max_userip_connections = 50, mail_plugins = $mail_plugins zlib\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart dovecot\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream dovecot_backend {\n    server 127.0.0.1:143/993;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name dovecot.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dovecot.example.com;\n\n    ssl_certificate /etc/ssl/certs/dovecot.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dovecot.example.com.key;\n\n    location / {\n        proxy_pass http://dovecot_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName dovecot.example.com\n    Redirect permanent / https://dovecot.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName dovecot.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dovecot.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dovecot.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:143/993/\n    ProxyPassReverse / http://127.0.0.1:143/993/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:143/993/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend dovecot_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dovecot.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dovecot_backend\n\nbackend dovecot_backend\n    balance roundrobin\n    option httpchk GET /health\n    server dovecot1 127.0.0.1:143/993 check\n    server dovecot2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R dovecot:dovecot /etc/dovecot\nsudo chmod 750 /etc/dovecot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dovecot\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/dovecot.conf << 'EOF'\n[dovecot]\nenabled = true\nport = 143/993\nfilter = dovecot\nlogpath = /var/log/dovecot/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/dovecot.key \\\n    -out /etc/ssl/certs/dovecot.crt\n\n# Configure SSL in dovecot\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE dovecot_db;\nCREATE USER dovecot_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE dovecot_db TO dovecot_user;\nEOF\n\n# Configure dovecot to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE dovecot_db;\nCREATE USER 'dovecot_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON dovecot_db.* TO 'dovecot_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Dovecot specific tuning\nmail_max_userip_connections = 50, mail_plugins = $mail_plugins zlib\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\ndovecot soft nofile 65535\ndovecot hard nofile 65535\ndovecot soft nproc 32768\ndovecot hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'dovecot'\n    static_configs:\n      - targets: ['localhost:143/993']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet dovecot; then\n    echo \"Dovecot is running\"\n    exit 0\nelse\n    echo \"Dovecot is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/dovecot << 'EOF'\n/var/log/dovecot/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 dovecot dovecot\n    postrotate\n        systemctl reload dovecot > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Dovecot backup script\nBACKUP_DIR=\"/backup/dovecot\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop dovecot\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/dovecot-config-$DATE.tar.gz\" /etc/dovecot\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/dovecot-data-$DATE.tar.gz\" /var/lib/dovecot\n\n# Start service\nsystemctl start dovecot\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop dovecot\n\n# Restore configuration\nsudo tar -xzf /backup/dovecot/dovecot-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/dovecot/dovecot-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R dovecot:dovecot /etc/dovecot\nsudo chown -R dovecot:dovecot /var/lib/dovecot\n\n# Start service\nsudo systemctl start dovecot\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u dovecot -n 100\nsudo tail -f /var/log/dovecot/*.log\n\n# Check configuration\nsudo dovecot -t || sudo dovecot configtest\n\n# Check permissions\nls -la /etc/dovecot\nls -la /var/lib/dovecot\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 143/993\nsudo netstat -tlnp | grep 143/993\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 143/993\nnc -zv localhost 143/993\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep dovecot)\nhtop -p $(pgrep dovecot)\n\n# Check connections\nss -ant | grep :143/993 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep dovecot)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo dovecot -d\n# or\nsudo dovecot debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  dovecot:\n    image: dovecot:latest\n    container_name: dovecot\n    ports:\n      - \"143/993:143/993\"\n    volumes:\n      - ./config:/etc/dovecot\n      - ./data:/var/lib/dovecot\n    environment:\n      - dovecot_CONFIG=/etc/dovecot/dovecot.conf\n    restart: unless-stopped\n    networks:\n      - dovecot_net\n\nnetworks:\n  dovecot_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dovecot\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: dovecot\n  template:\n    metadata:\n      labels:\n        app: dovecot\n    spec:\n      containers:\n      - name: dovecot\n        image: dovecot:latest\n        ports:\n        - containerPort: 143/993\n        volumeMounts:\n        - name: config\n          mountPath: /etc/dovecot\n      volumes:\n      - name: config\n        configMap:\n          name: dovecot-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: dovecot\nspec:\n  selector:\n    app: dovecot\n  ports:\n  - port: 143/993\n    targetPort: 143/993\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Dovecot\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install dovecot\n      package:\n        name: dovecot\n        state: present\n    \n    - name: Configure dovecot\n      template:\n        src: dovecot.conf.j2\n        dest: /etc/dovecot/dovecot.conf\n        owner: dovecot\n        group: dovecot\n        mode: '0640'\n      notify: restart dovecot\n    \n    - name: Start and enable dovecot\n      systemd:\n        name: dovecot\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart dovecot\n      systemd:\n        name: dovecot\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dovecot\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade dovecot\n\n# Arch Linux\nsudo pacman -Syu dovecot\n\n# Alpine Linux\napk update && apk upgrade dovecot\n\n# openSUSE\nsudo zypper update dovecot\n\n# FreeBSD\npkg update && pkg upgrade dovecot\n\n# Always backup before updates\ntar -czf /backup/dovecot-pre-update-$(date +%Y%m%d).tar.gz /etc/dovecot\n\n# Restart after updates\nsudo systemctl restart dovecot\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/dovecot -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo dovecot --verify || sudo dovecot check\n\n# Update databases (if applicable)\nsudo dovecot-update-db\n\n# Optimize performance\nsudo dovecot-optimize\n\n# Check for security updates\nsudo dovecot --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.dovecot.org/\n- GitHub Repository: https://github.com/dovecot/dovecot\n- Community Forum: https://forum.dovecot.org/\n- Wiki: https://wiki.dovecot.org/\n- Comparison vs Cyrus IMAP, Courier, Zimbra, Exchange: https://docs.dovecot.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Dovecot is a free and open-source Mail Server. An open-source IMAP and POP3 server for Unix-like systems</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 143/993 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 143/993 (default dovecot port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">dovecot-imapd, dovecot-pop3d, dovecot-lmtpd</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dovecot\nsudo dnf install -y dovecot dovecot-imapd, dovecot-pop3d, dovecot-lmtpd\n\n# Enable and start service\nsudo systemctl enable --now dovecot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dovecot\nsudo firewall-cmd --reload\n\n# Verify installation\ndovecot --version || systemctl status dovecot</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install dovecot\nsudo apt install -y dovecot dovecot-imapd, dovecot-pop3d, dovecot-lmtpd\n\n# Enable and start service\nsudo systemctl enable --now dovecot\n\n# Configure firewall\nsudo ufw allow 143/993\n\n# Verify installation\ndovecot --version || systemctl status dovecot</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dovecot\nsudo pacman -S dovecot\n\n# Enable and start service\nsudo systemctl enable --now dovecot\n\n# Verify installation\ndovecot --version || systemctl status dovecot</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dovecot\napk add --no-cache dovecot\n\n# Enable and start service\nrc-update add dovecot default\nrc-service dovecot start\n\n# Verify installation\ndovecot --version || rc-service dovecot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dovecot\nsudo zypper install -y dovecot dovecot-imapd, dovecot-pop3d, dovecot-lmtpd\n\n# Enable and start service\nsudo systemctl enable --now dovecot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dovecot\nsudo firewall-cmd --reload\n\n# Verify installation\ndovecot --version || systemctl status dovecot</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install dovecot\n\n# Start service\nbrew services start dovecot\n\n# Verify installation\ndovecot --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install dovecot\n\n# Enable in rc.conf\necho &#039;dovecot_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dovecot start\n\n# Verify installation\ndovecot --version || service dovecot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install dovecot\n\n# Or using Scoop\nscoop install dovecot\n\n# Verify installation\ndovecot --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/dovecot\n\n# Set up basic configuration\nsudo tee /etc/dovecot/dovecot.conf &lt;&lt; &#039;EOF&#039;\n# Dovecot Configuration\nmail_max_userip_connections = 50, mail_plugins = $mail_plugins zlib\nEOF\n\n# Test configuration\nsudo dovecot -t || sudo dovecot configtest\n\n# Reload service\nsudo systemctl reload dovecot</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R dovecot:dovecot /etc/dovecot\nsudo chmod 750 /etc/dovecot\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable dovecot\n\n# Start service\nsudo systemctl start dovecot\n\n# Stop service\nsudo systemctl stop dovecot\n\n# Restart service\nsudo systemctl restart dovecot\n\n# Reload configuration\nsudo systemctl reload dovecot\n\n# Check status\nsudo systemctl status dovecot\n\n# View logs\nsudo journalctl -u dovecot -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add dovecot default\n\n# Start service\nrc-service dovecot start\n\n# Stop service\nrc-service dovecot stop\n\n# Restart service\nrc-service dovecot restart\n\n# Check status\nrc-service dovecot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;dovecot_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dovecot start\n\n# Stop service\nservice dovecot stop\n\n# Restart service\nservice dovecot restart\n\n# Check status\nservice dovecot status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start dovecot\nbrew services stop dovecot\nbrew services restart dovecot\n\n# Check status\nbrew services list | grep dovecot</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start dovecot\n\n# Stop service\nnet stop dovecot\n\n# Using PowerShell\nStart-Service dovecot\nStop-Service dovecot\nRestart-Service dovecot\n\n# Check status\nGet-Service dovecot</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/dovecot/dovecot.conf &lt;&lt; &#039;EOF&#039;\nmail_max_userip_connections = 50, mail_plugins = $mail_plugins zlib\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart dovecot</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream dovecot_backend {\n    server 127.0.0.1:143/993;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name dovecot.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dovecot.example.com;\n\n    ssl_certificate /etc/ssl/certs/dovecot.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dovecot.example.com.key;\n\n    location / {\n        proxy_pass http://dovecot_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName dovecot.example.com\n    Redirect permanent / https://dovecot.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName dovecot.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dovecot.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dovecot.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:143/993/\n    ProxyPassReverse / http://127.0.0.1:143/993/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:143/993/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend dovecot_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dovecot.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dovecot_backend\n\nbackend dovecot_backend\n    balance roundrobin\n    option httpchk GET /health\n    server dovecot1 127.0.0.1:143/993 check\n    server dovecot2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R dovecot:dovecot /etc/dovecot\nsudo chmod 750 /etc/dovecot\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dovecot\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/dovecot.conf &lt;&lt; &#039;EOF&#039;\n[dovecot]\nenabled = true\nport = 143/993\nfilter = dovecot\nlogpath = /var/log/dovecot/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/dovecot.key \\\n    -out /etc/ssl/certs/dovecot.crt\n\n# Configure SSL in dovecot\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE dovecot_db;\nCREATE USER dovecot_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE dovecot_db TO dovecot_user;\nEOF\n\n# Configure dovecot to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE dovecot_db;\nCREATE USER &#039;dovecot_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON dovecot_db.* TO &#039;dovecot_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Dovecot specific tuning\nmail_max_userip_connections = 50, mail_plugins = $mail_plugins zlib</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\ndovecot soft nofile 65535\ndovecot hard nofile 65535\ndovecot soft nproc 32768\ndovecot hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;dovecot&#039;\n    static_configs:\n      - targets: [&#039;localhost:143/993&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet dovecot; then\n    echo &quot;Dovecot is running&quot;\n    exit 0\nelse\n    echo &quot;Dovecot is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/dovecot &lt;&lt; &#039;EOF&#039;\n/var/log/dovecot/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 dovecot dovecot\n    postrotate\n        systemctl reload dovecot &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Dovecot backup script\nBACKUP_DIR=&quot;/backup/dovecot&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop dovecot\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/dovecot-config-$DATE.tar.gz&quot; /etc/dovecot\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/dovecot-data-$DATE.tar.gz&quot; /var/lib/dovecot\n\n# Start service\nsystemctl start dovecot\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop dovecot\n\n# Restore configuration\nsudo tar -xzf /backup/dovecot/dovecot-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/dovecot/dovecot-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R dovecot:dovecot /etc/dovecot\nsudo chown -R dovecot:dovecot /var/lib/dovecot\n\n# Start service\nsudo systemctl start dovecot</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u dovecot -n 100\nsudo tail -f /var/log/dovecot/*.log\n\n# Check configuration\nsudo dovecot -t || sudo dovecot configtest\n\n# Check permissions\nls -la /etc/dovecot\nls -la /var/lib/dovecot</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 143/993\nsudo netstat -tlnp | grep 143/993\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 143/993\nnc -zv localhost 143/993</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep dovecot)\nhtop -p $(pgrep dovecot)\n\n# Check connections\nss -ant | grep :143/993 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep dovecot)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo dovecot -d\n# or\nsudo dovecot debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  dovecot:\n    image: dovecot:latest\n    container_name: dovecot\n    ports:\n      - &quot;143/993:143/993&quot;\n    volumes:\n      - ./config:/etc/dovecot\n      - ./data:/var/lib/dovecot\n    environment:\n      - dovecot_CONFIG=/etc/dovecot/dovecot.conf\n    restart: unless-stopped\n    networks:\n      - dovecot_net\n\nnetworks:\n  dovecot_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dovecot\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: dovecot\n  template:\n    metadata:\n      labels:\n        app: dovecot\n    spec:\n      containers:\n      - name: dovecot\n        image: dovecot:latest\n        ports:\n        - containerPort: 143/993\n        volumeMounts:\n        - name: config\n          mountPath: /etc/dovecot\n      volumes:\n      - name: config\n        configMap:\n          name: dovecot-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: dovecot\nspec:\n  selector:\n    app: dovecot\n  ports:\n  - port: 143/993\n    targetPort: 143/993\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Dovecot\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install dovecot\n      package:\n        name: dovecot\n        state: present\n    \n    - name: Configure dovecot\n      template:\n        src: dovecot.conf.j2\n        dest: /etc/dovecot/dovecot.conf\n        owner: dovecot\n        group: dovecot\n        mode: &#039;0640&#039;\n      notify: restart dovecot\n    \n    - name: Start and enable dovecot\n      systemd:\n        name: dovecot\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart dovecot\n      systemd:\n        name: dovecot\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dovecot\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade dovecot\n\n# Arch Linux\nsudo pacman -Syu dovecot\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade dovecot\n\n# openSUSE\nsudo zypper update dovecot\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade dovecot\n\n# Always backup before updates\ntar -czf /backup/dovecot-pre-update-$(date +%Y%m%d).tar.gz /etc/dovecot\n\n# Restart after updates\nsudo systemctl restart dovecot</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/dovecot -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo dovecot --verify || sudo dovecot check\n\n# Update databases (if applicable)\nsudo dovecot-update-db\n\n# Optimize performance\nsudo dovecot-optimize\n\n# Check for security updates\nsudo dovecot --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.dovecot.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/dovecot/dovecot</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.dovecot.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.dovecot.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Cyrus IMAP, Courier, Zimbra, Exchange: https://docs.dovecot.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"11 min","wordCount":2008,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-20T18:18:32.603Z","metadataVersion":"2.0"},{"name":"exim","displayName":"Exim Installation Guide","slug":"exim","description":"Exim is a free and open-source Mail Server. A message transfer agent (MTA) developed at Cambridge","category":"mail-servers","subcategory":"mail-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[25,80,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["mail-servers","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/mail-servers/exim","documentationUrl":"https://howtomgr.github.io/mail-servers/exim","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/exim","updatedAt":"2025-09-16T17:11:24Z","createdAt":"2025-09-16T02:35:45Z","readmeRaw":"# Exim Installation Guide\n\nExim is a free and open-source Mail Server. A message transfer agent (MTA) developed at Cambridge\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 25/587 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 25/587 (default exim port)\n- **Dependencies**:\n  - exim4-daemon-heavy, sa-exim\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install exim\nsudo dnf install -y exim exim4-daemon-heavy, sa-exim\n\n# Enable and start service\nsudo systemctl enable --now exim\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=exim\nsudo firewall-cmd --reload\n\n# Verify installation\nexim --version || systemctl status exim\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install exim\nsudo apt install -y exim exim4-daemon-heavy, sa-exim\n\n# Enable and start service\nsudo systemctl enable --now exim\n\n# Configure firewall\nsudo ufw allow 25/587\n\n# Verify installation\nexim --version || systemctl status exim\n```\n\n### Arch Linux\n\n```bash\n# Install exim\nsudo pacman -S exim\n\n# Enable and start service\nsudo systemctl enable --now exim\n\n# Verify installation\nexim --version || systemctl status exim\n```\n\n### Alpine Linux\n\n```bash\n# Install exim\napk add --no-cache exim\n\n# Enable and start service\nrc-update add exim default\nrc-service exim start\n\n# Verify installation\nexim --version || rc-service exim status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install exim\nsudo zypper install -y exim exim4-daemon-heavy, sa-exim\n\n# Enable and start service\nsudo systemctl enable --now exim\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=exim\nsudo firewall-cmd --reload\n\n# Verify installation\nexim --version || systemctl status exim\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install exim\n\n# Start service\nbrew services start exim\n\n# Verify installation\nexim --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install exim\n\n# Enable in rc.conf\necho 'exim_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice exim start\n\n# Verify installation\nexim --version || service exim status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install exim\n\n# Or using Scoop\nscoop install exim\n\n# Verify installation\nexim --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/exim\n\n# Set up basic configuration\nsudo tee /etc/exim/exim.conf << 'EOF'\n# Exim Configuration\nsmtp_accept_max = 100, smtp_accept_max_per_host = 10\nEOF\n\n# Test configuration\nsudo exim -t || sudo exim configtest\n\n# Reload service\nsudo systemctl reload exim\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R exim:exim /etc/exim\nsudo chmod 750 /etc/exim\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable exim\n\n# Start service\nsudo systemctl start exim\n\n# Stop service\nsudo systemctl stop exim\n\n# Restart service\nsudo systemctl restart exim\n\n# Reload configuration\nsudo systemctl reload exim\n\n# Check status\nsudo systemctl status exim\n\n# View logs\nsudo journalctl -u exim -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add exim default\n\n# Start service\nrc-service exim start\n\n# Stop service\nrc-service exim stop\n\n# Restart service\nrc-service exim restart\n\n# Check status\nrc-service exim status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'exim_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice exim start\n\n# Stop service\nservice exim stop\n\n# Restart service\nservice exim restart\n\n# Check status\nservice exim status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start exim\nbrew services stop exim\nbrew services restart exim\n\n# Check status\nbrew services list | grep exim\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start exim\n\n# Stop service\nnet stop exim\n\n# Using PowerShell\nStart-Service exim\nStop-Service exim\nRestart-Service exim\n\n# Check status\nGet-Service exim\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/exim/exim.conf << 'EOF'\nsmtp_accept_max = 100, smtp_accept_max_per_host = 10\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart exim\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream exim_backend {\n    server 127.0.0.1:25/587;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name exim.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name exim.example.com;\n\n    ssl_certificate /etc/ssl/certs/exim.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/exim.example.com.key;\n\n    location / {\n        proxy_pass http://exim_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName exim.example.com\n    Redirect permanent / https://exim.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName exim.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/exim.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/exim.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:25/587/\n    ProxyPassReverse / http://127.0.0.1:25/587/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:25/587/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend exim_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/exim.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend exim_backend\n\nbackend exim_backend\n    balance roundrobin\n    option httpchk GET /health\n    server exim1 127.0.0.1:25/587 check\n    server exim2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R exim:exim /etc/exim\nsudo chmod 750 /etc/exim\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=exim\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/exim.conf << 'EOF'\n[exim]\nenabled = true\nport = 25/587\nfilter = exim\nlogpath = /var/log/exim/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/exim.key \\\n    -out /etc/ssl/certs/exim.crt\n\n# Configure SSL in exim\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE exim_db;\nCREATE USER exim_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE exim_db TO exim_user;\nEOF\n\n# Configure exim to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE exim_db;\nCREATE USER 'exim_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON exim_db.* TO 'exim_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Exim specific tuning\nsmtp_accept_max = 100, smtp_accept_max_per_host = 10\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nexim soft nofile 65535\nexim hard nofile 65535\nexim soft nproc 32768\nexim hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'exim'\n    static_configs:\n      - targets: ['localhost:25/587']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet exim; then\n    echo \"Exim is running\"\n    exit 0\nelse\n    echo \"Exim is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/exim << 'EOF'\n/var/log/exim/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 exim exim\n    postrotate\n        systemctl reload exim > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Exim backup script\nBACKUP_DIR=\"/backup/exim\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop exim\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/exim-config-$DATE.tar.gz\" /etc/exim\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/exim-data-$DATE.tar.gz\" /var/lib/exim\n\n# Start service\nsystemctl start exim\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop exim\n\n# Restore configuration\nsudo tar -xzf /backup/exim/exim-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/exim/exim-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R exim:exim /etc/exim\nsudo chown -R exim:exim /var/lib/exim\n\n# Start service\nsudo systemctl start exim\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u exim -n 100\nsudo tail -f /var/log/exim/*.log\n\n# Check configuration\nsudo exim -t || sudo exim configtest\n\n# Check permissions\nls -la /etc/exim\nls -la /var/lib/exim\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 25/587\nsudo netstat -tlnp | grep 25/587\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 25/587\nnc -zv localhost 25/587\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep exim4)\nhtop -p $(pgrep exim4)\n\n# Check connections\nss -ant | grep :25/587 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep exim4)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo exim -d\n# or\nsudo exim debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  exim:\n    image: exim:latest\n    container_name: exim\n    ports:\n      - \"25/587:25/587\"\n    volumes:\n      - ./config:/etc/exim\n      - ./data:/var/lib/exim\n    environment:\n      - exim_CONFIG=/etc/exim/exim.conf\n    restart: unless-stopped\n    networks:\n      - exim_net\n\nnetworks:\n  exim_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: exim\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: exim\n  template:\n    metadata:\n      labels:\n        app: exim\n    spec:\n      containers:\n      - name: exim\n        image: exim:latest\n        ports:\n        - containerPort: 25/587\n        volumeMounts:\n        - name: config\n          mountPath: /etc/exim\n      volumes:\n      - name: config\n        configMap:\n          name: exim-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: exim\nspec:\n  selector:\n    app: exim\n  ports:\n  - port: 25/587\n    targetPort: 25/587\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Exim\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install exim\n      package:\n        name: exim\n        state: present\n    \n    - name: Configure exim\n      template:\n        src: exim.conf.j2\n        dest: /etc/exim/exim.conf\n        owner: exim\n        group: exim\n        mode: '0640'\n      notify: restart exim\n    \n    - name: Start and enable exim\n      systemd:\n        name: exim\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart exim\n      systemd:\n        name: exim\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update exim\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade exim\n\n# Arch Linux\nsudo pacman -Syu exim\n\n# Alpine Linux\napk update && apk upgrade exim\n\n# openSUSE\nsudo zypper update exim\n\n# FreeBSD\npkg update && pkg upgrade exim\n\n# Always backup before updates\ntar -czf /backup/exim-pre-update-$(date +%Y%m%d).tar.gz /etc/exim\n\n# Restart after updates\nsudo systemctl restart exim\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/exim -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo exim --verify || sudo exim check\n\n# Update databases (if applicable)\nsudo exim-update-db\n\n# Optimize performance\nsudo exim-optimize\n\n# Check for security updates\nsudo exim --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.exim.org/\n- GitHub Repository: https://github.com/exim/exim\n- Community Forum: https://forum.exim.org/\n- Wiki: https://wiki.exim.org/\n- Comparison vs Postfix, Sendmail, OpenSMTPD, Qmail: https://docs.exim.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Exim is a free and open-source Mail Server. A message transfer agent (MTA) developed at Cambridge</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 25/587 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 25/587 (default exim port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">exim4-daemon-heavy, sa-exim</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install exim\nsudo dnf install -y exim exim4-daemon-heavy, sa-exim\n\n# Enable and start service\nsudo systemctl enable --now exim\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=exim\nsudo firewall-cmd --reload\n\n# Verify installation\nexim --version || systemctl status exim</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install exim\nsudo apt install -y exim exim4-daemon-heavy, sa-exim\n\n# Enable and start service\nsudo systemctl enable --now exim\n\n# Configure firewall\nsudo ufw allow 25/587\n\n# Verify installation\nexim --version || systemctl status exim</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install exim\nsudo pacman -S exim\n\n# Enable and start service\nsudo systemctl enable --now exim\n\n# Verify installation\nexim --version || systemctl status exim</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install exim\napk add --no-cache exim\n\n# Enable and start service\nrc-update add exim default\nrc-service exim start\n\n# Verify installation\nexim --version || rc-service exim status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install exim\nsudo zypper install -y exim exim4-daemon-heavy, sa-exim\n\n# Enable and start service\nsudo systemctl enable --now exim\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=exim\nsudo firewall-cmd --reload\n\n# Verify installation\nexim --version || systemctl status exim</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install exim\n\n# Start service\nbrew services start exim\n\n# Verify installation\nexim --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install exim\n\n# Enable in rc.conf\necho &#039;exim_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice exim start\n\n# Verify installation\nexim --version || service exim status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install exim\n\n# Or using Scoop\nscoop install exim\n\n# Verify installation\nexim --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/exim\n\n# Set up basic configuration\nsudo tee /etc/exim/exim.conf &lt;&lt; &#039;EOF&#039;\n# Exim Configuration\nsmtp_accept_max = 100, smtp_accept_max_per_host = 10\nEOF\n\n# Test configuration\nsudo exim -t || sudo exim configtest\n\n# Reload service\nsudo systemctl reload exim</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R exim:exim /etc/exim\nsudo chmod 750 /etc/exim\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable exim\n\n# Start service\nsudo systemctl start exim\n\n# Stop service\nsudo systemctl stop exim\n\n# Restart service\nsudo systemctl restart exim\n\n# Reload configuration\nsudo systemctl reload exim\n\n# Check status\nsudo systemctl status exim\n\n# View logs\nsudo journalctl -u exim -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add exim default\n\n# Start service\nrc-service exim start\n\n# Stop service\nrc-service exim stop\n\n# Restart service\nrc-service exim restart\n\n# Check status\nrc-service exim status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;exim_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice exim start\n\n# Stop service\nservice exim stop\n\n# Restart service\nservice exim restart\n\n# Check status\nservice exim status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start exim\nbrew services stop exim\nbrew services restart exim\n\n# Check status\nbrew services list | grep exim</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start exim\n\n# Stop service\nnet stop exim\n\n# Using PowerShell\nStart-Service exim\nStop-Service exim\nRestart-Service exim\n\n# Check status\nGet-Service exim</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/exim/exim.conf &lt;&lt; &#039;EOF&#039;\nsmtp_accept_max = 100, smtp_accept_max_per_host = 10\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart exim</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream exim_backend {\n    server 127.0.0.1:25/587;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name exim.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name exim.example.com;\n\n    ssl_certificate /etc/ssl/certs/exim.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/exim.example.com.key;\n\n    location / {\n        proxy_pass http://exim_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName exim.example.com\n    Redirect permanent / https://exim.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName exim.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/exim.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/exim.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:25/587/\n    ProxyPassReverse / http://127.0.0.1:25/587/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:25/587/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend exim_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/exim.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend exim_backend\n\nbackend exim_backend\n    balance roundrobin\n    option httpchk GET /health\n    server exim1 127.0.0.1:25/587 check\n    server exim2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R exim:exim /etc/exim\nsudo chmod 750 /etc/exim\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=exim\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/exim.conf &lt;&lt; &#039;EOF&#039;\n[exim]\nenabled = true\nport = 25/587\nfilter = exim\nlogpath = /var/log/exim/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/exim.key \\\n    -out /etc/ssl/certs/exim.crt\n\n# Configure SSL in exim\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE exim_db;\nCREATE USER exim_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE exim_db TO exim_user;\nEOF\n\n# Configure exim to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE exim_db;\nCREATE USER &#039;exim_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON exim_db.* TO &#039;exim_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Exim specific tuning\nsmtp_accept_max = 100, smtp_accept_max_per_host = 10</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nexim soft nofile 65535\nexim hard nofile 65535\nexim soft nproc 32768\nexim hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;exim&#039;\n    static_configs:\n      - targets: [&#039;localhost:25/587&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet exim; then\n    echo &quot;Exim is running&quot;\n    exit 0\nelse\n    echo &quot;Exim is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/exim &lt;&lt; &#039;EOF&#039;\n/var/log/exim/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 exim exim\n    postrotate\n        systemctl reload exim &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Exim backup script\nBACKUP_DIR=&quot;/backup/exim&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop exim\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/exim-config-$DATE.tar.gz&quot; /etc/exim\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/exim-data-$DATE.tar.gz&quot; /var/lib/exim\n\n# Start service\nsystemctl start exim\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop exim\n\n# Restore configuration\nsudo tar -xzf /backup/exim/exim-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/exim/exim-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R exim:exim /etc/exim\nsudo chown -R exim:exim /var/lib/exim\n\n# Start service\nsudo systemctl start exim</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u exim -n 100\nsudo tail -f /var/log/exim/*.log\n\n# Check configuration\nsudo exim -t || sudo exim configtest\n\n# Check permissions\nls -la /etc/exim\nls -la /var/lib/exim</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 25/587\nsudo netstat -tlnp | grep 25/587\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 25/587\nnc -zv localhost 25/587</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep exim4)\nhtop -p $(pgrep exim4)\n\n# Check connections\nss -ant | grep :25/587 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep exim4)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo exim -d\n# or\nsudo exim debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  exim:\n    image: exim:latest\n    container_name: exim\n    ports:\n      - &quot;25/587:25/587&quot;\n    volumes:\n      - ./config:/etc/exim\n      - ./data:/var/lib/exim\n    environment:\n      - exim_CONFIG=/etc/exim/exim.conf\n    restart: unless-stopped\n    networks:\n      - exim_net\n\nnetworks:\n  exim_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: exim\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: exim\n  template:\n    metadata:\n      labels:\n        app: exim\n    spec:\n      containers:\n      - name: exim\n        image: exim:latest\n        ports:\n        - containerPort: 25/587\n        volumeMounts:\n        - name: config\n          mountPath: /etc/exim\n      volumes:\n      - name: config\n        configMap:\n          name: exim-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: exim\nspec:\n  selector:\n    app: exim\n  ports:\n  - port: 25/587\n    targetPort: 25/587\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Exim\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install exim\n      package:\n        name: exim\n        state: present\n    \n    - name: Configure exim\n      template:\n        src: exim.conf.j2\n        dest: /etc/exim/exim.conf\n        owner: exim\n        group: exim\n        mode: &#039;0640&#039;\n      notify: restart exim\n    \n    - name: Start and enable exim\n      systemd:\n        name: exim\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart exim\n      systemd:\n        name: exim\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update exim\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade exim\n\n# Arch Linux\nsudo pacman -Syu exim\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade exim\n\n# openSUSE\nsudo zypper update exim\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade exim\n\n# Always backup before updates\ntar -czf /backup/exim-pre-update-$(date +%Y%m%d).tar.gz /etc/exim\n\n# Restart after updates\nsudo systemctl restart exim</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/exim -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo exim --verify || sudo exim check\n\n# Update databases (if applicable)\nsudo exim-update-db\n\n# Optimize performance\nsudo exim-optimize\n\n# Check for security updates\nsudo exim --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.exim.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/exim/exim</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.exim.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.exim.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Postfix, Sendmail, OpenSMTPD, Qmail: https://docs.exim.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1999,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-20T18:18:24.206Z","metadataVersion":"2.0"},{"name":"haraka","displayName":"Haraka Installation Guide","slug":"haraka","description":"Haraka is a free and open-source Mail Server. A highly scalable node.js email server","category":"mail-servers","subcategory":"mail-servers","difficultyLevel":"intermediate","estimatedSetupTime":"15-30 minutes","supportedOS":["rhel","centos","rocky","almalinux","debian","ubuntu","arch","alpine","opensuse","sles","macos","freebsd","windows"],"defaultPorts":[25,80,443,2048],"installationMethods":["native-packages","source-compilation"],"features":["multi-os-support","comprehensive-documentation","security-hardening","performance-optimization","backup-restore-procedures","troubleshooting-guides"],"tags":["mail-servers","containerization","orchestration","observability","data-storage","networking","security","data-protection","communication"],"maintenanceStatus":"active","specVersion":"2.0","version":"1.0.0","license":"Open Source","websiteUrl":"https://howtomgr.github.io/mail-servers/haraka","documentationUrl":"https://howtomgr.github.io/mail-servers/haraka","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/haraka","updatedAt":"2025-09-16T17:18:27Z","createdAt":"2025-09-16T03:19:19Z","readmeRaw":"# Haraka Installation Guide\n\nHaraka is a free and open-source Mail Server. A highly scalable node.js email server\n\n## Table of Contents\n1. [Prerequisites](#prerequisites)\n2. [Supported Operating Systems](#supported-operating-systems)\n3. [Installation](#installation)\n4. [Configuration](#configuration)\n5. [Service Management](#service-management)\n6. [Troubleshooting](#troubleshooting)\n7. [Security Considerations](#security-considerations)\n8. [Performance Tuning](#performance-tuning)\n9. [Backup and Restore](#backup-and-restore)\n10. [System Requirements](#system-requirements)\n11. [Support](#support)\n12. [Contributing](#contributing)\n13. [License](#license)\n14. [Acknowledgments](#acknowledgments)\n15. [Version History](#version-history)\n16. [Appendices](#appendices)\n\n## 1. Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 25/587 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 25/587 (default haraka port)\n- **Dependencies**:\n  - nodejs, npm\n- **System Access**: root or sudo privileges required\n\n\n## 2. Supported Operating Systems\n\nThis guide supports installation on:\n- RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)\n- Debian 11/12\n- Ubuntu 20.04/22.04/24.04 LTS\n- Arch Linux (rolling release)\n- Alpine Linux 3.18+\n- openSUSE Leap 15.5+ / Tumbleweed\n- SUSE Linux Enterprise Server (SLES) 15+\n- macOS 12+ (Monterey and later) \n- FreeBSD 13+\n- Windows 10/11/Server 2019+ (where applicable)\n\n## 3. Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install haraka\nsudo dnf install -y haraka nodejs, npm\n\n# Enable and start service\nsudo systemctl enable --now haraka\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=haraka\nsudo firewall-cmd --reload\n\n# Verify installation\nharaka --version || systemctl status haraka\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install haraka\nsudo apt install -y haraka nodejs, npm\n\n# Enable and start service\nsudo systemctl enable --now haraka\n\n# Configure firewall\nsudo ufw allow 25/587\n\n# Verify installation\nharaka --version || systemctl status haraka\n```\n\n### Arch Linux\n\n```bash\n# Install haraka\nsudo pacman -S haraka\n\n# Enable and start service\nsudo systemctl enable --now haraka\n\n# Verify installation\nharaka --version || systemctl status haraka\n```\n\n### Alpine Linux\n\n```bash\n# Install haraka\napk add --no-cache haraka\n\n# Enable and start service\nrc-update add haraka default\nrc-service haraka start\n\n# Verify installation\nharaka --version || rc-service haraka status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install haraka\nsudo zypper install -y haraka nodejs, npm\n\n# Enable and start service\nsudo systemctl enable --now haraka\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=haraka\nsudo firewall-cmd --reload\n\n# Verify installation\nharaka --version || systemctl status haraka\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install haraka\n\n# Start service\nbrew services start haraka\n\n# Verify installation\nharaka --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install haraka\n\n# Enable in rc.conf\necho 'haraka_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice haraka start\n\n# Verify installation\nharaka --version || service haraka status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install haraka\n\n# Or using Scoop\nscoop install haraka\n\n# Verify installation\nharaka --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/haraka\n\n# Set up basic configuration\nsudo tee /etc/haraka/haraka.conf << 'EOF'\n# Haraka Configuration\nmax_connections=1000\nEOF\n\n# Test configuration\nsudo haraka -t || sudo haraka configtest\n\n# Reload service\nsudo systemctl reload haraka\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R haraka:haraka /etc/haraka\nsudo chmod 750 /etc/haraka\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## 5. Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable haraka\n\n# Start service\nsudo systemctl start haraka\n\n# Stop service\nsudo systemctl stop haraka\n\n# Restart service\nsudo systemctl restart haraka\n\n# Reload configuration\nsudo systemctl reload haraka\n\n# Check status\nsudo systemctl status haraka\n\n# View logs\nsudo journalctl -u haraka -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add haraka default\n\n# Start service\nrc-service haraka start\n\n# Stop service\nrc-service haraka stop\n\n# Restart service\nrc-service haraka restart\n\n# Check status\nrc-service haraka status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'haraka_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice haraka start\n\n# Stop service\nservice haraka stop\n\n# Restart service\nservice haraka restart\n\n# Check status\nservice haraka status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start haraka\nbrew services stop haraka\nbrew services restart haraka\n\n# Check status\nbrew services list | grep haraka\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start haraka\n\n# Stop service\nnet stop haraka\n\n# Using PowerShell\nStart-Service haraka\nStop-Service haraka\nRestart-Service haraka\n\n# Check status\nGet-Service haraka\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/haraka/haraka.conf << 'EOF'\nmax_connections=1000\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart haraka\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream haraka_backend {\n    server 127.0.0.1:25/587;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name haraka.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name haraka.example.com;\n\n    ssl_certificate /etc/ssl/certs/haraka.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/haraka.example.com.key;\n\n    location / {\n        proxy_pass http://haraka_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName haraka.example.com\n    Redirect permanent / https://haraka.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName haraka.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/haraka.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/haraka.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:25/587/\n    ProxyPassReverse / http://127.0.0.1:25/587/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:25/587/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend haraka_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/haraka.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend haraka_backend\n\nbackend haraka_backend\n    balance roundrobin\n    option httpchk GET /health\n    server haraka1 127.0.0.1:25/587 check\n    server haraka2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R haraka:haraka /etc/haraka\nsudo chmod 750 /etc/haraka\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=haraka\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/haraka.conf << 'EOF'\n[haraka]\nenabled = true\nport = 25/587\nfilter = haraka\nlogpath = /var/log/haraka/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/haraka.key \\\n    -out /etc/ssl/certs/haraka.crt\n\n# Configure SSL in haraka\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE haraka_db;\nCREATE USER haraka_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE haraka_db TO haraka_user;\nEOF\n\n# Configure haraka to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE haraka_db;\nCREATE USER 'haraka_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON haraka_db.* TO 'haraka_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Haraka specific tuning\nmax_connections=1000\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\nharaka soft nofile 65535\nharaka hard nofile 65535\nharaka soft nproc 32768\nharaka hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'haraka'\n    static_configs:\n      - targets: ['localhost:25/587']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet haraka; then\n    echo \"Haraka is running\"\n    exit 0\nelse\n    echo \"Haraka is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/haraka << 'EOF'\n/var/log/haraka/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 haraka haraka\n    postrotate\n        systemctl reload haraka > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## 9. Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Haraka backup script\nBACKUP_DIR=\"/backup/haraka\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop haraka\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/haraka-config-$DATE.tar.gz\" /etc/haraka\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/haraka-data-$DATE.tar.gz\" /var/lib/haraka\n\n# Start service\nsystemctl start haraka\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop haraka\n\n# Restore configuration\nsudo tar -xzf /backup/haraka/haraka-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/haraka/haraka-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R haraka:haraka /etc/haraka\nsudo chown -R haraka:haraka /var/lib/haraka\n\n# Start service\nsudo systemctl start haraka\n```\n\n## 6. Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u haraka -n 100\nsudo tail -f /var/log/haraka/*.log\n\n# Check configuration\nsudo haraka -t || sudo haraka configtest\n\n# Check permissions\nls -la /etc/haraka\nls -la /var/lib/haraka\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 25/587\nsudo netstat -tlnp | grep 25/587\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 25/587\nnc -zv localhost 25/587\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep haraka)\nhtop -p $(pgrep haraka)\n\n# Check connections\nss -ant | grep :25/587 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep haraka)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo haraka -d\n# or\nsudo haraka debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  haraka:\n    image: haraka:latest\n    container_name: haraka\n    ports:\n      - \"25/587:25/587\"\n    volumes:\n      - ./config:/etc/haraka\n      - ./data:/var/lib/haraka\n    environment:\n      - haraka_CONFIG=/etc/haraka/haraka.conf\n    restart: unless-stopped\n    networks:\n      - haraka_net\n\nnetworks:\n  haraka_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: haraka\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: haraka\n  template:\n    metadata:\n      labels:\n        app: haraka\n    spec:\n      containers:\n      - name: haraka\n        image: haraka:latest\n        ports:\n        - containerPort: 25/587\n        volumeMounts:\n        - name: config\n          mountPath: /etc/haraka\n      volumes:\n      - name: config\n        configMap:\n          name: haraka-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: haraka\nspec:\n  selector:\n    app: haraka\n  ports:\n  - port: 25/587\n    targetPort: 25/587\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Haraka\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install haraka\n      package:\n        name: haraka\n        state: present\n    \n    - name: Configure haraka\n      template:\n        src: haraka.conf.j2\n        dest: /etc/haraka/haraka.conf\n        owner: haraka\n        group: haraka\n        mode: '0640'\n      notify: restart haraka\n    \n    - name: Start and enable haraka\n      systemd:\n        name: haraka\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart haraka\n      systemd:\n        name: haraka\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update haraka\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade haraka\n\n# Arch Linux\nsudo pacman -Syu haraka\n\n# Alpine Linux\napk update && apk upgrade haraka\n\n# openSUSE\nsudo zypper update haraka\n\n# FreeBSD\npkg update && pkg upgrade haraka\n\n# Always backup before updates\ntar -czf /backup/haraka-pre-update-$(date +%Y%m%d).tar.gz /etc/haraka\n\n# Restart after updates\nsudo systemctl restart haraka\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/haraka -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo haraka --verify || sudo haraka check\n\n# Update databases (if applicable)\nsudo haraka-update-db\n\n# Optimize performance\nsudo haraka-optimize\n\n# Check for security updates\nsudo haraka --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.haraka.org/\n- GitHub Repository: https://github.com/haraka/haraka\n- Community Forum: https://forum.haraka.org/\n- Wiki: https://wiki.haraka.org/\n- Comparison vs Postfix, Exim, PowerMTA, MailerQ: https://docs.haraka.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<p class=\"mobile-paragraph\">Haraka is a free and open-source Mail Server. A highly scalable node.js email server</p>\n<h2 id=\"1-prerequisites\" class=\"mobile-header\">1. Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 25/587 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 25/587 (default haraka port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">nodejs, npm</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"2-supported-operating-systems\" class=\"mobile-header\">2. Supported Operating Systems</h2>\n<p class=\"mobile-paragraph\">This guide supports installation on:</p>\n<li class=\"mobile-list-item\">RHEL 8/9 and derivatives (CentOS Stream, Rocky Linux, AlmaLinux)</li>\n<li class=\"mobile-list-item\">Debian 11/12</li>\n<li class=\"mobile-list-item\">Ubuntu 20.04/22.04/24.04 LTS</li>\n<li class=\"mobile-list-item\">Arch Linux (rolling release)</li>\n<li class=\"mobile-list-item\">Alpine Linux 3.18+</li>\n<li class=\"mobile-list-item\">openSUSE Leap 15.5+ / Tumbleweed</li>\n<li class=\"mobile-list-item\">SUSE Linux Enterprise Server (SLES) 15+</li>\n<li class=\"mobile-list-item\">macOS 12+ (Monterey and later) </li>\n<li class=\"mobile-list-item\">FreeBSD 13+</li>\n<li class=\"mobile-list-item\">Windows 10/11/Server 2019+ (where applicable)</li>\n<h2 id=\"3-installation\" class=\"mobile-header\">3. Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install haraka\nsudo dnf install -y haraka nodejs, npm\n\n# Enable and start service\nsudo systemctl enable --now haraka\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=haraka\nsudo firewall-cmd --reload\n\n# Verify installation\nharaka --version || systemctl status haraka</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install haraka\nsudo apt install -y haraka nodejs, npm\n\n# Enable and start service\nsudo systemctl enable --now haraka\n\n# Configure firewall\nsudo ufw allow 25/587\n\n# Verify installation\nharaka --version || systemctl status haraka</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install haraka\nsudo pacman -S haraka\n\n# Enable and start service\nsudo systemctl enable --now haraka\n\n# Verify installation\nharaka --version || systemctl status haraka</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install haraka\napk add --no-cache haraka\n\n# Enable and start service\nrc-update add haraka default\nrc-service haraka start\n\n# Verify installation\nharaka --version || rc-service haraka status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install haraka\nsudo zypper install -y haraka nodejs, npm\n\n# Enable and start service\nsudo systemctl enable --now haraka\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=haraka\nsudo firewall-cmd --reload\n\n# Verify installation\nharaka --version || systemctl status haraka</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install haraka\n\n# Start service\nbrew services start haraka\n\n# Verify installation\nharaka --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install haraka\n\n# Enable in rc.conf\necho &#039;haraka_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice haraka start\n\n# Verify installation\nharaka --version || service haraka status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install haraka\n\n# Or using Scoop\nscoop install haraka\n\n# Verify installation\nharaka --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/haraka\n\n# Set up basic configuration\nsudo tee /etc/haraka/haraka.conf &lt;&lt; &#039;EOF&#039;\n# Haraka Configuration\nmax_connections=1000\nEOF\n\n# Test configuration\nsudo haraka -t || sudo haraka configtest\n\n# Reload service\nsudo systemctl reload haraka</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R haraka:haraka /etc/haraka\nsudo chmod 750 /etc/haraka\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"5-service-management\" class=\"mobile-header\">5. Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable haraka\n\n# Start service\nsudo systemctl start haraka\n\n# Stop service\nsudo systemctl stop haraka\n\n# Restart service\nsudo systemctl restart haraka\n\n# Reload configuration\nsudo systemctl reload haraka\n\n# Check status\nsudo systemctl status haraka\n\n# View logs\nsudo journalctl -u haraka -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add haraka default\n\n# Start service\nrc-service haraka start\n\n# Stop service\nrc-service haraka stop\n\n# Restart service\nrc-service haraka restart\n\n# Check status\nrc-service haraka status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;haraka_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice haraka start\n\n# Stop service\nservice haraka stop\n\n# Restart service\nservice haraka restart\n\n# Check status\nservice haraka status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start haraka\nbrew services stop haraka\nbrew services restart haraka\n\n# Check status\nbrew services list | grep haraka</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start haraka\n\n# Stop service\nnet stop haraka\n\n# Using PowerShell\nStart-Service haraka\nStop-Service haraka\nRestart-Service haraka\n\n# Check status\nGet-Service haraka</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/haraka/haraka.conf &lt;&lt; &#039;EOF&#039;\nmax_connections=1000\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart haraka</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream haraka_backend {\n    server 127.0.0.1:25/587;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name haraka.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name haraka.example.com;\n\n    ssl_certificate /etc/ssl/certs/haraka.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/haraka.example.com.key;\n\n    location / {\n        proxy_pass http://haraka_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName haraka.example.com\n    Redirect permanent / https://haraka.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName haraka.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/haraka.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/haraka.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:25/587/\n    ProxyPassReverse / http://127.0.0.1:25/587/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:25/587/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend haraka_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/haraka.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend haraka_backend\n\nbackend haraka_backend\n    balance roundrobin\n    option httpchk GET /health\n    server haraka1 127.0.0.1:25/587 check\n    server haraka2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R haraka:haraka /etc/haraka\nsudo chmod 750 /etc/haraka\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=haraka\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/haraka.conf &lt;&lt; &#039;EOF&#039;\n[haraka]\nenabled = true\nport = 25/587\nfilter = haraka\nlogpath = /var/log/haraka/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/haraka.key \\\n    -out /etc/ssl/certs/haraka.crt\n\n# Configure SSL in haraka\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE haraka_db;\nCREATE USER haraka_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE haraka_db TO haraka_user;\nEOF\n\n# Configure haraka to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE haraka_db;\nCREATE USER &#039;haraka_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON haraka_db.* TO &#039;haraka_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Haraka specific tuning\nmax_connections=1000</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\nharaka soft nofile 65535\nharaka hard nofile 65535\nharaka soft nproc 32768\nharaka hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;haraka&#039;\n    static_configs:\n      - targets: [&#039;localhost:25/587&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet haraka; then\n    echo &quot;Haraka is running&quot;\n    exit 0\nelse\n    echo &quot;Haraka is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/haraka &lt;&lt; &#039;EOF&#039;\n/var/log/haraka/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 haraka haraka\n    postrotate\n        systemctl reload haraka &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"9-backup-and-restore\" class=\"mobile-header\">9. Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Haraka backup script\nBACKUP_DIR=&quot;/backup/haraka&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop haraka\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/haraka-config-$DATE.tar.gz&quot; /etc/haraka\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/haraka-data-$DATE.tar.gz&quot; /var/lib/haraka\n\n# Start service\nsystemctl start haraka\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop haraka\n\n# Restore configuration\nsudo tar -xzf /backup/haraka/haraka-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/haraka/haraka-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R haraka:haraka /etc/haraka\nsudo chown -R haraka:haraka /var/lib/haraka\n\n# Start service\nsudo systemctl start haraka</code></pre>\n      </div>\n    </div>\n<h2 id=\"6-troubleshooting\" class=\"mobile-header\">6. Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u haraka -n 100\nsudo tail -f /var/log/haraka/*.log\n\n# Check configuration\nsudo haraka -t || sudo haraka configtest\n\n# Check permissions\nls -la /etc/haraka\nls -la /var/lib/haraka</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 25/587\nsudo netstat -tlnp | grep 25/587\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 25/587\nnc -zv localhost 25/587</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep haraka)\nhtop -p $(pgrep haraka)\n\n# Check connections\nss -ant | grep :25/587 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep haraka)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo haraka -d\n# or\nsudo haraka debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  haraka:\n    image: haraka:latest\n    container_name: haraka\n    ports:\n      - &quot;25/587:25/587&quot;\n    volumes:\n      - ./config:/etc/haraka\n      - ./data:/var/lib/haraka\n    environment:\n      - haraka_CONFIG=/etc/haraka/haraka.conf\n    restart: unless-stopped\n    networks:\n      - haraka_net\n\nnetworks:\n  haraka_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: haraka\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: haraka\n  template:\n    metadata:\n      labels:\n        app: haraka\n    spec:\n      containers:\n      - name: haraka\n        image: haraka:latest\n        ports:\n        - containerPort: 25/587\n        volumeMounts:\n        - name: config\n          mountPath: /etc/haraka\n      volumes:\n      - name: config\n        configMap:\n          name: haraka-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: haraka\nspec:\n  selector:\n    app: haraka\n  ports:\n  - port: 25/587\n    targetPort: 25/587\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Haraka\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install haraka\n      package:\n        name: haraka\n        state: present\n    \n    - name: Configure haraka\n      template:\n        src: haraka.conf.j2\n        dest: /etc/haraka/haraka.conf\n        owner: haraka\n        group: haraka\n        mode: &#039;0640&#039;\n      notify: restart haraka\n    \n    - name: Start and enable haraka\n      systemd:\n        name: haraka\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart haraka\n      systemd:\n        name: haraka\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update haraka\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade haraka\n\n# Arch Linux\nsudo pacman -Syu haraka\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade haraka\n\n# openSUSE\nsudo zypper update haraka\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade haraka\n\n# Always backup before updates\ntar -czf /backup/haraka-pre-update-$(date +%Y%m%d).tar.gz /etc/haraka\n\n# Restart after updates\nsudo systemctl restart haraka</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">📋</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/haraka -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo haraka --verify || sudo haraka check\n\n# Update databases (if applicable)\nsudo haraka-update-db\n\n# Optimize performance\nsudo haraka-optimize\n\n# Check for security updates\nsudo haraka --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.haraka.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/haraka/haraka</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.haraka.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.haraka.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Postfix, Exim, PowerMTA, MailerQ: https://docs.haraka.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1982,"tableOfContents":[{"level":2,"text":"1. Prerequisites","id":"1-prerequisites"},{"level":2,"text":"2. Supported Operating Systems","id":"2-supported-operating-systems"},{"level":2,"text":"3. Installation","id":"3-installation"},{"level":3,"text":"RHEL/CentOS/Rocky Linux/AlmaLinux","id":"rhelcentosrocky-linuxalmalinux"},{"level":3,"text":"Debian/Ubuntu","id":"debianubuntu"},{"level":3,"text":"Arch Linux","id":"arch-linux"},{"level":3,"text":"Alpine Linux","id":"alpine-linux"},{"level":3,"text":"openSUSE/SLES","id":"opensusesles"},{"level":3,"text":"macOS","id":"macos"},{"level":3,"text":"FreeBSD","id":"freebsd"},{"level":3,"text":"Windows","id":"windows"},{"level":2,"text":"Initial Configuration","id":"initial-configuration"},{"level":3,"text":"Basic Configuration","id":"basic-configuration"},{"level":3,"text":"Security Hardening","id":"security-hardening"},{"level":2,"text":"5. Service Management","id":"5-service-management"},{"level":3,"text":"systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)","id":"systemd-rhel-debian-ubuntu-arch-opensuse"},{"level":3,"text":"OpenRC (Alpine Linux)","id":"openrc-alpine-linux"},{"level":3,"text":"rc.d (FreeBSD)","id":"rcd-freebsd"},{"level":3,"text":"launchd (macOS)","id":"launchd-macos"},{"level":3,"text":"Windows Service Manager","id":"windows-service-manager"},{"level":2,"text":"Advanced Configuration","id":"advanced-configuration"},{"level":3,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"Clustering and High Availability","id":"clustering-and-high-availability"},{"level":2,"text":"Reverse Proxy Setup","id":"reverse-proxy-setup"},{"level":3,"text":"nginx Configuration","id":"nginx-configuration"},{"level":3,"text":"Apache Configuration","id":"apache-configuration"},{"level":3,"text":"HAProxy Configuration","id":"haproxy-configuration"},{"level":2,"text":"Security Configuration","id":"security-configuration"},{"level":3,"text":"Basic Security Setup","id":"basic-security-setup"},{"level":3,"text":"SSL/TLS Configuration","id":"ssltls-configuration"},{"level":2,"text":"Database Setup","id":"database-setup"},{"level":3,"text":"PostgreSQL Backend (if applicable)","id":"postgresql-backend-if-applicable"},{"level":3,"text":"MySQL/MariaDB Backend (if applicable)","id":"mysqlmariadb-backend-if-applicable"},{"level":2,"text":"Performance Optimization","id":"performance-optimization"},{"level":3,"text":"System Tuning","id":"system-tuning"},{"level":3,"text":"Resource Limits","id":"resource-limits"},{"level":2,"text":"Monitoring","id":"monitoring"},{"level":3,"text":"Prometheus Integration","id":"prometheus-integration"},{"level":3,"text":"Health Checks","id":"health-checks"},{"level":3,"text":"Log Monitoring","id":"log-monitoring"},{"level":2,"text":"9. Backup and Restore","id":"9-backup-and-restore"},{"level":3,"text":"Backup Script","id":"backup-script"},{"level":3,"text":"Restore Procedure","id":"restore-procedure"},{"level":2,"text":"6. Troubleshooting","id":"6-troubleshooting"},{"level":3,"text":"Common Issues","id":"common-issues"},{"level":3,"text":"Debug Mode","id":"debug-mode"},{"level":2,"text":"Integration Examples","id":"integration-examples"},{"level":3,"text":"Docker Compose","id":"docker-compose"},{"level":3,"text":"Kubernetes Deployment","id":"kubernetes-deployment"},{"level":3,"text":"Ansible Playbook","id":"ansible-playbook"},{"level":2,"text":"Maintenance","id":"maintenance"},{"level":3,"text":"Update Procedures","id":"update-procedures"},{"level":3,"text":"Regular Maintenance Tasks","id":"regular-maintenance-tasks"},{"level":2,"text":"Additional Resources","id":"additional-resources"}],"lastBuilt":"2025-10-20T18:18:01.111Z","metadataVersion":"2.0"}]},"__N_SSG":true}