{"pageProps":{"category":{"key":"communication","name":"Communication","description":"Team communication and collaboration platforms","icon":"ðŸ’¬","color":"#f1fa8c","keywords":["mattermost","rocketchat","matrix","mastodon","element","jitsi"]},"guides":[{"name":"dendrite","displayName":"Dendrite","slug":"dendrite","description":"Dendrite is a free and open-source Matrix Server. Second-generation Matrix homeserver","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/dendrite","updatedAt":"2025-09-16T02:31:53Z","createdAt":"2025-09-16T02:30:56Z","readmeRaw":"# Dendrite Installation Guide\n\nDendrite is a free and open-source Matrix Server. Second-generation Matrix homeserver\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2 cores minimum (4+ cores recommended)\n  - RAM: 2GB minimum (4GB+ recommended)\n  - Storage: 1GB for installation\n  - Network: 8008/8448 ports\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8008/8448 (default dendrite port)\n- **Dependencies**:\n  - postgresql\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dendrite\nsudo dnf install -y dendrite postgresql\n\n# Enable and start service\nsudo systemctl enable --now dendrite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dendrite\nsudo firewall-cmd --reload\n\n# Verify installation\ndendrite --version || systemctl status dendrite\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install dendrite\nsudo apt install -y dendrite postgresql\n\n# Enable and start service\nsudo systemctl enable --now dendrite\n\n# Configure firewall\nsudo ufw allow 8008/8448\n\n# Verify installation\ndendrite --version || systemctl status dendrite\n```\n\n### Arch Linux\n\n```bash\n# Install dendrite\nsudo pacman -S dendrite\n\n# Enable and start service\nsudo systemctl enable --now dendrite\n\n# Verify installation\ndendrite --version || systemctl status dendrite\n```\n\n### Alpine Linux\n\n```bash\n# Install dendrite\napk add --no-cache dendrite\n\n# Enable and start service\nrc-update add dendrite default\nrc-service dendrite start\n\n# Verify installation\ndendrite --version || rc-service dendrite status\n```\n\n### openSUSE/SLES\n\n```bash\n# Install dendrite\nsudo zypper install -y dendrite postgresql\n\n# Enable and start service\nsudo systemctl enable --now dendrite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dendrite\nsudo firewall-cmd --reload\n\n# Verify installation\ndendrite --version || systemctl status dendrite\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install dendrite\n\n# Start service\nbrew services start dendrite\n\n# Verify installation\ndendrite --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install dendrite\n\n# Enable in rc.conf\necho 'dendrite_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dendrite start\n\n# Verify installation\ndendrite --version || service dendrite status\n```\n\n### Windows\n\n```powershell\n# Using Chocolatey\nchoco install dendrite\n\n# Or using Scoop\nscoop install dendrite\n\n# Verify installation\ndendrite --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory if needed\nsudo mkdir -p /etc/dendrite\n\n# Set up basic configuration\nsudo tee /etc/dendrite/dendrite.conf << 'EOF'\n# Dendrite Configuration\nmax_open_conns: 100\nEOF\n\n# Test configuration\nsudo dendrite -t || sudo dendrite configtest\n\n# Reload service\nsudo systemctl reload dendrite\n```\n\n### Security Hardening\n\n```bash\n# Set appropriate permissions\nsudo chown -R dendrite:dendrite /etc/dendrite\nsudo chmod 750 /etc/dendrite\n\n# Enable security features\n# See security section for detailed hardening steps\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable dendrite\n\n# Start service\nsudo systemctl start dendrite\n\n# Stop service\nsudo systemctl stop dendrite\n\n# Restart service\nsudo systemctl restart dendrite\n\n# Reload configuration\nsudo systemctl reload dendrite\n\n# Check status\nsudo systemctl status dendrite\n\n# View logs\nsudo journalctl -u dendrite -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add dendrite default\n\n# Start service\nrc-service dendrite start\n\n# Stop service\nrc-service dendrite stop\n\n# Restart service\nrc-service dendrite restart\n\n# Check status\nrc-service dendrite status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'dendrite_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice dendrite start\n\n# Stop service\nservice dendrite stop\n\n# Restart service\nservice dendrite restart\n\n# Check status\nservice dendrite status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start dendrite\nbrew services stop dendrite\nbrew services restart dendrite\n\n# Check status\nbrew services list | grep dendrite\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start dendrite\n\n# Stop service\nnet stop dendrite\n\n# Using PowerShell\nStart-Service dendrite\nStop-Service dendrite\nRestart-Service dendrite\n\n# Check status\nGet-Service dendrite\n```\n\n## Advanced Configuration\n\n### Performance Optimization\n\n```bash\n# Configure performance settings\ncat >> /etc/dendrite/dendrite.conf << 'EOF'\nmax_open_conns: 100\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart dendrite\n```\n\n### Clustering and High Availability\n\n```bash\n# Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports\n```\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream dendrite_backend {\n    server 127.0.0.1:8008/8448;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name dendrite.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dendrite.example.com;\n\n    ssl_certificate /etc/ssl/certs/dendrite.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dendrite.example.com.key;\n\n    location / {\n        proxy_pass http://dendrite_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName dendrite.example.com\n    Redirect permanent / https://dendrite.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName dendrite.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dendrite.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dendrite.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8008/8448/\n    ProxyPassReverse / http://127.0.0.1:8008/8448/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) \"ws://127.0.0.1:8008/8448/$1\" [P,L]\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend dendrite_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dendrite.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dendrite_backend\n\nbackend dendrite_backend\n    balance roundrobin\n    option httpchk GET /health\n    server dendrite1 127.0.0.1:8008/8448 check\n    server dendrite2 127.0.0.1:{default_port}1 check backup\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R dendrite:dendrite /etc/dendrite\nsudo chmod 750 /etc/dendrite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dendrite\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/dendrite.conf << 'EOF'\n[dendrite]\nenabled = true\nport = 8008/8448\nfilter = dendrite\nlogpath = /var/log/dendrite/*.log\nmaxretry = 5\nbantime = 3600\nEOF\n```\n\n### SSL/TLS Configuration\n\n```bash\n# Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/dendrite.key \\\n    -out /etc/ssl/certs/dendrite.crt\n\n# Configure SSL in dendrite\n# See official documentation for SSL configuration\n```\n\n## Database Setup\n\n### PostgreSQL Backend (if applicable)\n\n```bash\n# Create database and user\nsudo -u postgres psql << EOF\nCREATE DATABASE dendrite_db;\nCREATE USER dendrite_user WITH ENCRYPTED PASSWORD 'secure_password';\nGRANT ALL PRIVILEGES ON DATABASE dendrite_db TO dendrite_user;\nEOF\n\n# Configure dendrite to use PostgreSQL\n# See official documentation for database configuration\n```\n\n### MySQL/MariaDB Backend (if applicable)\n\n```bash\n# Create database and user\nsudo mysql << EOF\nCREATE DATABASE dendrite_db;\nCREATE USER 'dendrite_user'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON dendrite_db.* TO 'dendrite_user'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Kernel parameters\nsudo tee -a /etc/sysctl.conf << EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Dendrite specific tuning\nmax_open_conns: 100\n```\n\n### Resource Limits\n\n```bash\n# Configure system limits\nsudo tee -a /etc/security/limits.conf << EOF\ndendrite soft nofile 65535\ndendrite hard nofile 65535\ndendrite soft nproc 32768\ndendrite hard nproc 32768\nEOF\n```\n\n## Monitoring\n\n### Prometheus Integration\n\n```yaml\n# prometheus.yml configuration\nscrape_configs:\n  - job_name: 'dendrite'\n    static_configs:\n      - targets: ['localhost:8008/8448']\n    metrics_path: '/metrics'\n```\n\n### Health Checks\n\n```bash\n# Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet dendrite; then\n    echo \"Dendrite is running\"\n    exit 0\nelse\n    echo \"Dendrite is not running\"\n    exit 1\nfi\n```\n\n### Log Monitoring\n\n```bash\n# Configure log rotation\nsudo tee /etc/logrotate.d/dendrite << 'EOF'\n/var/log/dendrite/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 dendrite dendrite\n    postrotate\n        systemctl reload dendrite > /dev/null 2>&1 || true\n    endscript\n}\nEOF\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Dendrite backup script\nBACKUP_DIR=\"/backup/dendrite\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop service (if required)\nsystemctl stop dendrite\n\n# Backup configuration\ntar -czf \"$BACKUP_DIR/dendrite-config-$DATE.tar.gz\" /etc/dendrite\n\n# Backup data (adjust paths as needed)\ntar -czf \"$BACKUP_DIR/dendrite-data-$DATE.tar.gz\" /var/lib/dendrite\n\n# Start service\nsystemctl start dendrite\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"*.tar.gz\" -mtime +30 -delete\n\necho \"Backup completed: $BACKUP_DIR\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop dendrite\n\n# Restore configuration\nsudo tar -xzf /backup/dendrite/dendrite-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/dendrite/dendrite-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R dendrite:dendrite /etc/dendrite\nsudo chown -R dendrite:dendrite /var/lib/dendrite\n\n# Start service\nsudo systemctl start dendrite\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u dendrite -n 100\nsudo tail -f /var/log/dendrite/*.log\n\n# Check configuration\nsudo dendrite -t || sudo dendrite configtest\n\n# Check permissions\nls -la /etc/dendrite\nls -la /var/lib/dendrite\n```\n\n2. **Connection refused**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8008/8448\nsudo netstat -tlnp | grep 8008/8448\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 8008/8448\nnc -zv localhost 8008/8448\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep dendrite)\nhtop -p $(pgrep dendrite)\n\n# Check connections\nss -ant | grep :8008/8448 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep dendrite)\n```\n\n### Debug Mode\n\n```bash\n# Run in debug mode\nsudo dendrite -d\n# or\nsudo dendrite debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging\n```\n\n## Integration Examples\n\n### Docker Compose\n\n```yaml\nversion: '3.8'\nservices:\n  dendrite:\n    image: dendrite:latest\n    container_name: dendrite\n    ports:\n      - \"8008/8448:8008/8448\"\n    volumes:\n      - ./config:/etc/dendrite\n      - ./data:/var/lib/dendrite\n    environment:\n      - dendrite_CONFIG=/etc/dendrite/dendrite.conf\n    restart: unless-stopped\n    networks:\n      - dendrite_net\n\nnetworks:\n  dendrite_net:\n    driver: bridge\n```\n\n### Kubernetes Deployment\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dendrite\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: dendrite\n  template:\n    metadata:\n      labels:\n        app: dendrite\n    spec:\n      containers:\n      - name: dendrite\n        image: dendrite:latest\n        ports:\n        - containerPort: 8008/8448\n        volumeMounts:\n        - name: config\n          mountPath: /etc/dendrite\n      volumes:\n      - name: config\n        configMap:\n          name: dendrite-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: dendrite\nspec:\n  selector:\n    app: dendrite\n  ports:\n  - port: 8008/8448\n    targetPort: 8008/8448\n  type: LoadBalancer\n```\n\n### Ansible Playbook\n\n```yaml\n---\n- name: Install and configure Dendrite\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install dendrite\n      package:\n        name: dendrite\n        state: present\n    \n    - name: Configure dendrite\n      template:\n        src: dendrite.conf.j2\n        dest: /etc/dendrite/dendrite.conf\n        owner: dendrite\n        group: dendrite\n        mode: '0640'\n      notify: restart dendrite\n    \n    - name: Start and enable dendrite\n      systemd:\n        name: dendrite\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart dendrite\n      systemd:\n        name: dendrite\n        state: restarted\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dendrite\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade dendrite\n\n# Arch Linux\nsudo pacman -Syu dendrite\n\n# Alpine Linux\napk update && apk upgrade dendrite\n\n# openSUSE\nsudo zypper update dendrite\n\n# FreeBSD\npkg update && pkg upgrade dendrite\n\n# Always backup before updates\ntar -czf /backup/dendrite-pre-update-$(date +%Y%m%d).tar.gz /etc/dendrite\n\n# Restart after updates\nsudo systemctl restart dendrite\n```\n\n### Regular Maintenance Tasks\n\n```bash\n# Clean logs\nfind /var/log/dendrite -name \"*.log\" -mtime +30 -delete\n\n# Verify integrity\nsudo dendrite --verify || sudo dendrite check\n\n# Update databases (if applicable)\nsudo dendrite-update-db\n\n# Optimize performance\nsudo dendrite-optimize\n\n# Check for security updates\nsudo dendrite --security-check\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.dendrite.org/\n- GitHub Repository: https://github.com/dendrite/dendrite\n- Community Forum: https://forum.dendrite.org/\n- Wiki: https://wiki.dendrite.org/\n- Comparison vs Synapse, Conduit, Construct: https://docs.dendrite.org/comparison\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"dendrite-installation-guide\" class=\"mobile-header\">Dendrite Installation Guide</h1>\n<p class=\"mobile-paragraph\">Dendrite is a free and open-source Matrix Server. Second-generation Matrix homeserver</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2 cores minimum (4+ cores recommended)</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum (4GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 1GB for installation</li>\n<li class=\"mobile-list-item\">Network: 8008/8448 ports</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8008/8448 (default dendrite port)</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">postgresql</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install dendrite\nsudo dnf install -y dendrite postgresql\n\n# Enable and start service\nsudo systemctl enable --now dendrite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dendrite\nsudo firewall-cmd --reload\n\n# Verify installation\ndendrite --version || systemctl status dendrite</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install dendrite\nsudo apt install -y dendrite postgresql\n\n# Enable and start service\nsudo systemctl enable --now dendrite\n\n# Configure firewall\nsudo ufw allow 8008/8448\n\n# Verify installation\ndendrite --version || systemctl status dendrite</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dendrite\nsudo pacman -S dendrite\n\n# Enable and start service\nsudo systemctl enable --now dendrite\n\n# Verify installation\ndendrite --version || systemctl status dendrite</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dendrite\napk add --no-cache dendrite\n\n# Enable and start service\nrc-update add dendrite default\nrc-service dendrite start\n\n# Verify installation\ndendrite --version || rc-service dendrite status</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install dendrite\nsudo zypper install -y dendrite postgresql\n\n# Enable and start service\nsudo systemctl enable --now dendrite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dendrite\nsudo firewall-cmd --reload\n\n# Verify installation\ndendrite --version || systemctl status dendrite</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install dendrite\n\n# Start service\nbrew services start dendrite\n\n# Verify installation\ndendrite --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install dendrite\n\n# Enable in rc.conf\necho &#039;dendrite_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dendrite start\n\n# Verify installation\ndendrite --version || service dendrite status</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Using Chocolatey\nchoco install dendrite\n\n# Or using Scoop\nscoop install dendrite\n\n# Verify installation\ndendrite --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory if needed\nsudo mkdir -p /etc/dendrite\n\n# Set up basic configuration\nsudo tee /etc/dendrite/dendrite.conf &lt;&lt; &#039;EOF&#039;\n# Dendrite Configuration\nmax_open_conns: 100\nEOF\n\n# Test configuration\nsudo dendrite -t || sudo dendrite configtest\n\n# Reload service\nsudo systemctl reload dendrite</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R dendrite:dendrite /etc/dendrite\nsudo chmod 750 /etc/dendrite\n\n# Enable security features\n# See security section for detailed hardening steps</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable dendrite\n\n# Start service\nsudo systemctl start dendrite\n\n# Stop service\nsudo systemctl stop dendrite\n\n# Restart service\nsudo systemctl restart dendrite\n\n# Reload configuration\nsudo systemctl reload dendrite\n\n# Check status\nsudo systemctl status dendrite\n\n# View logs\nsudo journalctl -u dendrite -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add dendrite default\n\n# Start service\nrc-service dendrite start\n\n# Stop service\nrc-service dendrite stop\n\n# Restart service\nrc-service dendrite restart\n\n# Check status\nrc-service dendrite status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;dendrite_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice dendrite start\n\n# Stop service\nservice dendrite stop\n\n# Restart service\nservice dendrite restart\n\n# Check status\nservice dendrite status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start dendrite\nbrew services stop dendrite\nbrew services restart dendrite\n\n# Check status\nbrew services list | grep dendrite</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start dendrite\n\n# Stop service\nnet stop dendrite\n\n# Using PowerShell\nStart-Service dendrite\nStop-Service dendrite\nRestart-Service dendrite\n\n# Check status\nGet-Service dendrite</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance settings\ncat &gt;&gt; /etc/dendrite/dendrite.conf &lt;&lt; &#039;EOF&#039;\nmax_open_conns: 100\nEOF\n\n# Apply system tuning\nsudo sysctl -w net.core.somaxconn=65535\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535\n\n# Restart service\nsudo systemctl restart dendrite</code></pre>\n      </div>\n    </div>\n<h3 id=\"clustering-and-high-availability\" class=\"mobile-header\">Clustering and High Availability</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure clustering (if supported)\n# See official documentation for cluster setup\n\n# Basic load balancing setup example\n# Configure multiple instances on different ports</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream dendrite_backend {\n    server 127.0.0.1:8008/8448;\n    server 127.0.0.1:{default_port}1 backup;\n}\n\nserver {\n    listen 80;\n    server_name dendrite.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name dendrite.example.com;\n\n    ssl_certificate /etc/ssl/certs/dendrite.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/dendrite.example.com.key;\n\n    location / {\n        proxy_pass http://dendrite_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        \n        # WebSocket support (if needed)\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName dendrite.example.com\n    Redirect permanent / https://dendrite.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName dendrite.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/dendrite.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/dendrite.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8008/8448/\n    ProxyPassReverse / http://127.0.0.1:8008/8448/\n    \n    # WebSocket support (if needed)\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} websocket [NC]\n    RewriteCond %{HTTP:Connection} upgrade [NC]\n    RewriteRule ^/?(.*) &quot;ws://127.0.0.1:8008/8448/$1&quot; [P,L]\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend dendrite_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/dendrite.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend dendrite_backend\n\nbackend dendrite_backend\n    balance roundrobin\n    option httpchk GET /health\n    server dendrite1 127.0.0.1:8008/8448 check\n    server dendrite2 127.0.0.1:{default_port}1 check backup</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R dendrite:dendrite /etc/dendrite\nsudo chmod 750 /etc/dendrite\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=dendrite\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n\n# Configure fail2ban\nsudo tee /etc/fail2ban/jail.d/dendrite.conf &lt;&lt; &#039;EOF&#039;\n[dendrite]\nenabled = true\nport = 8008/8448\nfilter = dendrite\nlogpath = /var/log/dendrite/*.log\nmaxretry = 5\nbantime = 3600\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssltls-configuration\" class=\"mobile-header\">SSL/TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate SSL certificates\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \\\n    -keyout /etc/ssl/private/dendrite.key \\\n    -out /etc/ssl/certs/dendrite.crt\n\n# Configure SSL in dendrite\n# See official documentation for SSL configuration</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"postgresql-backend-if-applicable\" class=\"mobile-header\">PostgreSQL Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo -u postgres psql &lt;&lt; EOF\nCREATE DATABASE dendrite_db;\nCREATE USER dendrite_user WITH ENCRYPTED PASSWORD &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON DATABASE dendrite_db TO dendrite_user;\nEOF\n\n# Configure dendrite to use PostgreSQL\n# See official documentation for database configuration</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysqlmariadb-backend-if-applicable\" class=\"mobile-header\">MySQL/MariaDB Backend (if applicable)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create database and user\nsudo mysql &lt;&lt; EOF\nCREATE DATABASE dendrite_db;\nCREATE USER &#039;dendrite_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON dendrite_db.* TO &#039;dendrite_user&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Kernel parameters\nsudo tee -a /etc/sysctl.conf &lt;&lt; EOF\nnet.core.somaxconn = 65535\nnet.ipv4.tcp_max_syn_backlog = 65535\nnet.ipv4.ip_local_port_range = 1024 65535\nnet.core.netdev_max_backlog = 5000\nvm.swappiness = 10\nEOF\n\nsudo sysctl -p\n\n# Dendrite specific tuning\nmax_open_conns: 100</code></pre>\n      </div>\n    </div>\n<h3 id=\"resource-limits\" class=\"mobile-header\">Resource Limits</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure system limits\nsudo tee -a /etc/security/limits.conf &lt;&lt; EOF\ndendrite soft nofile 65535\ndendrite hard nofile 65535\ndendrite soft nproc 32768\ndendrite hard nproc 32768\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\"># prometheus.yml configuration\nscrape_configs:\n  - job_name: &#039;dendrite&#039;\n    static_configs:\n      - targets: [&#039;localhost:8008/8448&#039;]\n    metrics_path: &#039;/metrics&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-checks\" class=\"mobile-header\">Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic health check script\n#!/bin/bash\nif systemctl is-active --quiet dendrite; then\n    echo &quot;Dendrite is running&quot;\n    exit 0\nelse\n    echo &quot;Dendrite is not running&quot;\n    exit 1\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-monitoring\" class=\"mobile-header\">Log Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure log rotation\nsudo tee /etc/logrotate.d/dendrite &lt;&lt; &#039;EOF&#039;\n/var/log/dendrite/*.log {\n    daily\n    rotate 14\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 0640 dendrite dendrite\n    postrotate\n        systemctl reload dendrite &gt; /dev/null 2&gt;&amp;1 || true\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Dendrite backup script\nBACKUP_DIR=&quot;/backup/dendrite&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop service (if required)\nsystemctl stop dendrite\n\n# Backup configuration\ntar -czf &quot;$BACKUP_DIR/dendrite-config-$DATE.tar.gz&quot; /etc/dendrite\n\n# Backup data (adjust paths as needed)\ntar -czf &quot;$BACKUP_DIR/dendrite-data-$DATE.tar.gz&quot; /var/lib/dendrite\n\n# Start service\nsystemctl start dendrite\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;*.tar.gz&quot; -mtime +30 -delete\n\necho &quot;Backup completed: $BACKUP_DIR&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop dendrite\n\n# Restore configuration\nsudo tar -xzf /backup/dendrite/dendrite-config-*.tar.gz -C /\n\n# Restore data\nsudo tar -xzf /backup/dendrite/dendrite-data-*.tar.gz -C /\n\n# Set permissions\nsudo chown -R dendrite:dendrite /etc/dendrite\nsudo chown -R dendrite:dendrite /var/lib/dendrite\n\n# Start service\nsudo systemctl start dendrite</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u dendrite -n 100\nsudo tail -f /var/log/dendrite/*.log\n\n# Check configuration\nsudo dendrite -t || sudo dendrite configtest\n\n# Check permissions\nls -la /etc/dendrite\nls -la /var/lib/dendrite</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection refused</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8008/8448\nsudo netstat -tlnp | grep 8008/8448\n\n# Check firewall\nsudo firewall-cmd --list-all\nsudo iptables -L -n\n\n# Test connection\ntelnet localhost 8008/8448\nnc -zv localhost 8008/8448</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep dendrite)\nhtop -p $(pgrep dendrite)\n\n# Check connections\nss -ant | grep :8008/8448 | wc -l\n\n# Monitor I/O\niotop -p $(pgrep dendrite)</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Run in debug mode\nsudo dendrite -d\n# or\nsudo dendrite debug\n\n# Increase log verbosity\n# Edit configuration to enable debug logging</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose\" class=\"mobile-header\">Docker Compose</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  dendrite:\n    image: dendrite:latest\n    container_name: dendrite\n    ports:\n      - &quot;8008/8448:8008/8448&quot;\n    volumes:\n      - ./config:/etc/dendrite\n      - ./data:/var/lib/dendrite\n    environment:\n      - dendrite_CONFIG=/etc/dendrite/dendrite.conf\n    restart: unless-stopped\n    networks:\n      - dendrite_net\n\nnetworks:\n  dendrite_net:\n    driver: bridge</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-deployment\" class=\"mobile-header\">Kubernetes Deployment</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: dendrite\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: dendrite\n  template:\n    metadata:\n      labels:\n        app: dendrite\n    spec:\n      containers:\n      - name: dendrite\n        image: dendrite:latest\n        ports:\n        - containerPort: 8008/8448\n        volumeMounts:\n        - name: config\n          mountPath: /etc/dendrite\n      volumes:\n      - name: config\n        configMap:\n          name: dendrite-config\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: dendrite\nspec:\n  selector:\n    app: dendrite\n  ports:\n  - port: 8008/8448\n    targetPort: 8008/8448\n  type: LoadBalancer</code></pre>\n      </div>\n    </div>\n<h3 id=\"ansible-playbook\" class=\"mobile-header\">Ansible Playbook</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">---\n- name: Install and configure Dendrite\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install dendrite\n      package:\n        name: dendrite\n        state: present\n    \n    - name: Configure dendrite\n      template:\n        src: dendrite.conf.j2\n        dest: /etc/dendrite/dendrite.conf\n        owner: dendrite\n        group: dendrite\n        mode: &#039;0640&#039;\n      notify: restart dendrite\n    \n    - name: Start and enable dendrite\n      systemd:\n        name: dendrite\n        state: started\n        enabled: yes\n  \n  handlers:\n    - name: restart dendrite\n      systemd:\n        name: dendrite\n        state: restarted</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update dendrite\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade dendrite\n\n# Arch Linux\nsudo pacman -Syu dendrite\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade dendrite\n\n# openSUSE\nsudo zypper update dendrite\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade dendrite\n\n# Always backup before updates\ntar -czf /backup/dendrite-pre-update-$(date +%Y%m%d).tar.gz /etc/dendrite\n\n# Restart after updates\nsudo systemctl restart dendrite</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Clean logs\nfind /var/log/dendrite -name &quot;*.log&quot; -mtime +30 -delete\n\n# Verify integrity\nsudo dendrite --verify || sudo dendrite check\n\n# Update databases (if applicable)\nsudo dendrite-update-db\n\n# Optimize performance\nsudo dendrite-optimize\n\n# Check for security updates\nsudo dendrite --security-check</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.dendrite.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/dendrite/dendrite</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.dendrite.org/</li>\n<li class=\"mobile-list-item\">Wiki: https://wiki.dendrite.org/</li>\n<li class=\"mobile-list-item\">Comparison vs Synapse, Conduit, Construct: https://docs.dendrite.org/comparison</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"10 min","wordCount":1863,"lastBuilt":"2025-09-16T02:44:23.010Z"},{"name":"element","displayName":"Element","slug":"element","description":"element README","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/element","updatedAt":"2025-09-16T02:33:54Z","createdAt":"2025-09-08T03:07:06Z","readmeRaw":"## ðŸ‘‹ Welcome to element ðŸš€  \n\nelement README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-element\" class=\"mobile-header\">ðŸ‘‹ Welcome to element ðŸš€  </h2>\n<p class=\"mobile-paragraph\">element README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-16T02:44:19.937Z"},{"name":"element-web","displayName":"Element Web","slug":"element-web","description":"element-web is a free and open-source Matrix web client. Element provides web-based Matrix client (formerly Riot)","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/element-web","updatedAt":"2025-09-16T02:37:48Z","createdAt":"2025-09-16T02:33:55Z","readmeRaw":"# element-web Installation Guide\n\nelement-web is a free and open-source Matrix web client. Element provides web-based Matrix client (formerly Riot)\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 100MB for app\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 80 (default element-web port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install element-web\nsudo dnf install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelement-web --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install element-web\nsudo apt install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nelement-web --version\n```\n\n### Arch Linux\n\n```bash\n# Install element-web\nsudo pacman -S element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Verify installation\nelement-web --version\n```\n\n### Alpine Linux\n\n```bash\n# Install element-web\napk add --no-cache element-web\n\n# Enable and start service\nrc-update add nginx default\nrc-service nginx start\n\n# Verify installation\nelement-web --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install element-web\nsudo zypper install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelement-web --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install element-web\n\n# Start service\nbrew services start element-web\n\n# Verify installation\nelement-web --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install element-web\n\n# Enable in rc.conf\necho 'nginx_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice nginx start\n\n# Verify installation\nelement-web --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install element-web\n\n# Or using Scoop\nscoop install element-web\n\n# Verify installation\nelement-web --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/element-web\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nelement-web --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable nginx\n\n# Start service\nsudo systemctl start nginx\n\n# Stop service\nsudo systemctl stop nginx\n\n# Restart service\nsudo systemctl restart nginx\n\n# Check status\nsudo systemctl status nginx\n\n# View logs\nsudo journalctl -u nginx -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add nginx default\n\n# Start service\nrc-service nginx start\n\n# Stop service\nrc-service nginx stop\n\n# Restart service\nrc-service nginx restart\n\n# Check status\nrc-service nginx status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'nginx_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice nginx start\n\n# Stop service\nservice nginx stop\n\n# Restart service\nservice nginx restart\n\n# Check status\nservice nginx status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start element-web\nbrew services stop element-web\nbrew services restart element-web\n\n# Check status\nbrew services list | grep element-web\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start nginx\n\n# Stop service\nnet stop nginx\n\n# Using PowerShell\nStart-Service nginx\nStop-Service nginx\nRestart-Service nginx\n\n# Check status\nGet-Service nginx\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream element-web_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name element-web.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name element-web.example.com;\n\n    ssl_certificate /etc/ssl/certs/element-web.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/element-web.example.com.key;\n\n    location / {\n        proxy_pass http://element-web_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName element-web.example.com\n    Redirect permanent / https://element-web.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName element-web.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/element-web.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/element-web.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend element-web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/element-web.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend element-web_backend\n\nbackend element-web_backend\n    balance roundrobin\n    server element-web1 127.0.0.1:80 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R element-web:element-web /etc/element-web\nsudo chmod 750 /etc/element-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status nginx\n\n# View logs\nsudo journalctl -u nginx -f\n\n# Monitor resource usage\ntop -p $(pgrep element-web)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/element-web\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/element-web-backup-$DATE.tar.gz\" /etc/element-web /var/lib/element-web\n\necho \"Backup completed: $BACKUP_DIR/element-web-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop nginx\n\n# Restore from backup\ntar -xzf /backup/element-web/element-web-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start nginx\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u nginx -n 100\nsudo tail -f /var/log/element-web/element-web.log\n\n# Check configuration\nelement-web --version\n\n# Check permissions\nls -la /etc/element-web\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep element-web)\n\n# Check disk I/O\niotop -p $(pgrep element-web)\n\n# Check connections\nss -an | grep 80\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  element-web:\n    image: element-web:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./config:/etc/element-web\n      - ./data:/var/lib/element-web\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update element-web\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade element-web\n\n# Arch Linux\nsudo pacman -Syu element-web\n\n# Alpine Linux\napk update && apk upgrade element-web\n\n# openSUSE\nsudo zypper update element-web\n\n# FreeBSD\npkg update && pkg upgrade element-web\n\n# Always backup before updates\ntar -czf /backup/element-web-pre-update-$(date +%Y%m%d).tar.gz /etc/element-web\n\n# Restart after updates\nsudo systemctl restart nginx\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/element-web\n\n# Clean old logs\nfind /var/log/element-web -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/element-web\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.element-web.org/\n- GitHub Repository: https://github.com/element-web/element-web\n- Community Forum: https://forum.element-web.org/\n- Best Practices Guide: https://docs.element-web.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"element-web-installation-guide\" class=\"mobile-header\">element-web Installation Guide</h1>\n<p class=\"mobile-paragraph\">element-web is a free and open-source Matrix web client. Element provides web-based Matrix client (formerly Riot)</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for app</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 80 (default element-web port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install element-web\nsudo dnf install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install element-web\nsudo apt install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo ufw allow 80\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install element-web\nsudo pacman -S element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install element-web\napk add --no-cache element-web\n\n# Enable and start service\nrc-update add nginx default\nrc-service nginx start\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install element-web\nsudo zypper install -y element-web\n\n# Enable and start service\nsudo systemctl enable --now nginx\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install element-web\n\n# Start service\nbrew services start element-web\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install element-web\n\n# Enable in rc.conf\necho &#039;nginx_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice nginx start\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install element-web\n\n# Or using Scoop\nscoop install element-web\n\n# Verify installation\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/element-web\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nelement-web --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable nginx\n\n# Start service\nsudo systemctl start nginx\n\n# Stop service\nsudo systemctl stop nginx\n\n# Restart service\nsudo systemctl restart nginx\n\n# Check status\nsudo systemctl status nginx\n\n# View logs\nsudo journalctl -u nginx -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add nginx default\n\n# Start service\nrc-service nginx start\n\n# Stop service\nrc-service nginx stop\n\n# Restart service\nrc-service nginx restart\n\n# Check status\nrc-service nginx status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;nginx_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice nginx start\n\n# Stop service\nservice nginx stop\n\n# Restart service\nservice nginx restart\n\n# Check status\nservice nginx status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start element-web\nbrew services stop element-web\nbrew services restart element-web\n\n# Check status\nbrew services list | grep element-web</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start nginx\n\n# Stop service\nnet stop nginx\n\n# Using PowerShell\nStart-Service nginx\nStop-Service nginx\nRestart-Service nginx\n\n# Check status\nGet-Service nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream element-web_backend {\n    server 127.0.0.1:80;\n}\n\nserver {\n    listen 80;\n    server_name element-web.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name element-web.example.com;\n\n    ssl_certificate /etc/ssl/certs/element-web.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/element-web.example.com.key;\n\n    location / {\n        proxy_pass http://element-web_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName element-web.example.com\n    Redirect permanent / https://element-web.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName element-web.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/element-web.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/element-web.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:80/\n    ProxyPassReverse / http://127.0.0.1:80/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend element-web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/element-web.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend element-web_backend\n\nbackend element-web_backend\n    balance roundrobin\n    server element-web1 127.0.0.1:80 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R element-web:element-web /etc/element-web\nsudo chmod 750 /etc/element-web\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=80/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status nginx\n\n# View logs\nsudo journalctl -u nginx -f\n\n# Monitor resource usage\ntop -p $(pgrep element-web)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/element-web&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/element-web-backup-$DATE.tar.gz&quot; /etc/element-web /var/lib/element-web\n\necho &quot;Backup completed: $BACKUP_DIR/element-web-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop nginx\n\n# Restore from backup\ntar -xzf /backup/element-web/element-web-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u nginx -n 100\nsudo tail -f /var/log/element-web/element-web.log\n\n# Check configuration\nelement-web --version\n\n# Check permissions\nls -la /etc/element-web</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 80\n\n# Test connectivity\ntelnet localhost 80\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep element-web)\n\n# Check disk I/O\niotop -p $(pgrep element-web)\n\n# Check connections\nss -an | grep 80</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  element-web:\n    image: element-web:latest\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./config:/etc/element-web\n      - ./data:/var/lib/element-web\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update element-web\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade element-web\n\n# Arch Linux\nsudo pacman -Syu element-web\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade element-web\n\n# openSUSE\nsudo zypper update element-web\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade element-web\n\n# Always backup before updates\ntar -czf /backup/element-web-pre-update-$(date +%Y%m%d).tar.gz /etc/element-web\n\n# Restart after updates\nsudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/element-web\n\n# Clean old logs\nfind /var/log/element-web -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/element-web</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.element-web.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/element-web/element-web</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.element-web.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.element-web.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1154,"lastBuilt":"2025-09-16T02:44:15.560Z"},{"name":"jitsi","displayName":"Jitsi","slug":"jitsi","description":"jitsi README","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jitsi","updatedAt":"2025-09-16T02:38:06Z","createdAt":"2025-09-08T03:09:16Z","readmeRaw":"## ðŸ‘‹ Welcome to jitsi ðŸš€  \n\njitsi README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-jitsi\" class=\"mobile-header\">ðŸ‘‹ Welcome to jitsi ðŸš€  </h2>\n<p class=\"mobile-paragraph\">jitsi README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-16T02:44:07.703Z"},{"name":"mastodon","displayName":"Mastodon","slug":"mastodon","description":"```shell","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mastodon","updatedAt":"2025-09-16T02:38:09Z","createdAt":"2023-08-28T03:48:35Z","readmeRaw":"## Mastodon Install guide\n\n```shell\ncurl --silent --location https://rpm.nodesource.com/setup_8.x | bash -  \nwget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo  \nrpm -Uvh https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm  \n  \nwget https://github.com/CasjaysDev/packages/raw/main/rhel/mastodon.txt -O /tmp/mastodon.txt  \nyum install -y $(cat /tmp/mastodon.txt)  \n  \n/usr/pgsql-9.6/bin/postgresql96-setup initdb  \n  \nsystemctl start postgresql-9.6 redis  \nsystemctl enable postgresql-9.6 redis  \n  \nvim /var/lib/pgsql/9.6/data/pg_hba.conf  \n  \n# TYPE  DATABASE        USER            ADDRESS                 METHOD  \n  \n# \"local\" is for Unix domain socket connections only  \nlocal   all             all                                     trust  \n# IPv4 local connections:  \nhost    all             all             127.0.0.1/32            md5  \n# IPv6 local connections:  \nhost    all             all             ::1/128                 md5  \n  \nadduser mastodon  \nsu - mastodon  \ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB  \ncurl -sSL https://get.rvm.io | bash -s stable  \nsource /home/mastodon/.rvm/scripts/rvm  \nrvm install 2.5.1  \n  \ngem install bundler  \ncd ~  \ngit clone https://github.com/tootsuite/mastodon.git app  \ncd ~/app  \ngit checkout $(git describe --tags `git rev-list --tags --max-count=1`)  \nbundle config build.pg --with-pg-config=/usr/pgsql-9.6/bin/pg_config  \nbundle install --deployment --without development test  \nexit  \n  \npasswd postgres  \nsu - postgres -c psql  \nCREATE USER mastodon CREATEDB;  \nALTER USER mastodon WITH ENCRYPTED password 'YOURSECUREPASSWORD' CREATEDB;  \n\\q  \n  \nsu - mastodon  \ncd ~/app  \nRAILS_ENV=production bundle exec rake mastodon:setup  \n  \nsu -  \ngit clone https://github.com/casjay-base/howtos /tmp/howtos\ncp -Rfv /tmp/howtos/mastodon/{etc,usr}* /  \n  \nsystemctl daemon-reload  \nsystemctl enable mastodon-web mastodon-queue mastodon-api  \nsystemctl start mastodon-web mastodon-queue mastodon-api  \nsystemctl status mastodon-web mastodon-queue mastodon-api  \n```  \n","readmeHtml":"<h2 id=\"mastodon-install-guide\" class=\"mobile-header\">Mastodon Install guide</h2>\n<div class=\"mobile-code-block\" data-language=\"shell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">shell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-shell\">curl --silent --location https://rpm.nodesource.com/setup_8.x | bash -  \nwget https://dl.yarnpkg.com/rpm/yarn.repo -O /etc/yum.repos.d/yarn.repo  \nrpm -Uvh https://download.postgresql.org/pub/repos/yum/9.6/redhat/rhel-7-x86_64/pgdg-centos96-9.6-3.noarch.rpm  \n  \nwget https://github.com/CasjaysDev/packages/raw/main/rhel/mastodon.txt -O /tmp/mastodon.txt  \nyum install -y $(cat /tmp/mastodon.txt)  \n  \n/usr/pgsql-9.6/bin/postgresql96-setup initdb  \n  \nsystemctl start postgresql-9.6 redis  \nsystemctl enable postgresql-9.6 redis  \n  \nvim /var/lib/pgsql/9.6/data/pg_hba.conf  \n  \n# TYPE  DATABASE        USER            ADDRESS                 METHOD  \n  \n# &quot;local&quot; is for Unix domain socket connections only  \nlocal   all             all                                     trust  \n# IPv4 local connections:  \nhost    all             all             127.0.0.1/32            md5  \n# IPv6 local connections:  \nhost    all             all             ::1/128                 md5  \n  \nadduser mastodon  \nsu - mastodon  \ngpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB  \ncurl -sSL https://get.rvm.io | bash -s stable  \nsource /home/mastodon/.rvm/scripts/rvm  \nrvm install 2.5.1  \n  \ngem install bundler  \ncd ~  \ngit clone https://github.com/tootsuite/mastodon.git app  \ncd ~/app  \ngit checkout $(git describe --tags `git rev-list --tags --max-count=1`)  \nbundle config build.pg --with-pg-config=/usr/pgsql-9.6/bin/pg_config  \nbundle install --deployment --without development test  \nexit  \n  \npasswd postgres  \nsu - postgres -c psql  \nCREATE USER mastodon CREATEDB;  \nALTER USER mastodon WITH ENCRYPTED password &#039;YOURSECUREPASSWORD&#039; CREATEDB;  \n\\q  \n  \nsu - mastodon  \ncd ~/app  \nRAILS_ENV=production bundle exec rake mastodon:setup  \n  \nsu -  \ngit clone https://github.com/casjay-base/howtos /tmp/howtos\ncp -Rfv /tmp/howtos/mastodon/{etc,usr}* /  \n  \nsystemctl daemon-reload  \nsystemctl enable mastodon-web mastodon-queue mastodon-api  \nsystemctl start mastodon-web mastodon-queue mastodon-api  \nsystemctl status mastodon-web mastodon-queue mastodon-api  </code></pre>\n      </div>\n    </div>","readTime":"1 min","wordCount":190,"lastBuilt":"2025-09-16T02:44:05.877Z"},{"name":"mattermost","displayName":"Mattermost","slug":"mattermost","description":"mattermost is a free and open-source open source team collaboration platform. Mattermost provides team messaging and collaboration features, serving as a self-hosted alternative to Slack, Microsoft Teams, or Discord","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/mattermost","updatedAt":"2025-09-16T02:38:10Z","createdAt":"2023-08-28T03:48:46Z","readmeRaw":"# Mattermost Installation Guide\n\nOpen-source, self-hosted team communication platform with enterprise-grade security. Complete alternative to Slack with advanced features for secure collaboration, workflow automation, and integrated voice/video calling.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for production\n- PostgreSQL 11+ or MySQL 8.0+ database\n- NGINX reverse proxy (recommended for production)\n- Domain name and SSL certificate for HTTPS\n\n## Installation\n\n### Ubuntu/Debian (Recommended)\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Download latest Mattermost server\nMATTERMOST_VERSION=\"9.2.4\"  # Check for latest at https://mattermost.com/download\nwget https://releases.mattermost.com/${MATTERMOST_VERSION}/mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\n\n# Extract and install\ntar -xzf mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\nsudo mv mattermost /opt/\n\n# Create system user\nsudo useradd --system --user-group mattermost\nsudo chown -R mattermost:mattermost /opt/mattermost\n\n# Create data directory\nsudo mkdir -p /opt/mattermost/data\nsudo chown mattermost:mattermost /opt/mattermost/data\nsudo chmod 755 /opt/mattermost/data\n\n# Set proper permissions\nsudo find /opt/mattermost -type d -exec chmod 755 {} \\;\nsudo find /opt/mattermost -type f -exec chmod 644 {} \\;\nsudo chmod +x /opt/mattermost/bin/mattermost\n\n# Create log directory\nsudo mkdir -p /var/log/mattermost\nsudo chown mattermost:mattermost /var/log/mattermost\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install prerequisites\nsudo yum update -y\nsudo yum install -y wget tar\n\n# Download and install Mattermost\nMATTERMOST_VERSION=\"9.2.4\"\nwget https://releases.mattermost.com/${MATTERMOST_VERSION}/mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\ntar -xzf mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\nsudo mv mattermost /opt/\n\n# Create system user and directories\nsudo useradd --system --user-group mattermost\nsudo chown -R mattermost:mattermost /opt/mattermost\nsudo mkdir -p /opt/mattermost/data /var/log/mattermost\nsudo chown mattermost:mattermost /opt/mattermost/data /var/log/mattermost\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8065/tcp\nsudo firewall-cmd --reload\n```\n\n### Docker Installation (Production Ready)\n```bash\n# Create Mattermost directory structure\nmkdir -p ~/mattermost/{config,data,logs,plugins,client-plugins}\n\n# Create Docker Compose configuration\ncat > ~/mattermost/docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  postgres:\n    image: postgres:15-alpine\n    container_name: mattermost-postgres\n    restart: unless-stopped\n    environment:\n      - POSTGRES_DB=mattermost\n      - POSTGRES_USER=mattermost\n      - POSTGRES_PASSWORD=secure_postgres_password_2024\n      - POSTGRES_INITDB_ARGS=\"--encoding=UTF8 --lc-collate=C --lc-ctype=C\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./postgres-custom.conf:/etc/postgresql/postgresql.conf\n    networks:\n      - mattermost\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n      - /var/run/postgresql\n\n  mattermost:\n    image: mattermost/mattermost-enterprise-edition:latest\n    container_name: mattermost\n    restart: unless-stopped\n    depends_on:\n      - postgres\n    environment:\n      # Database settings\n      - MM_SQLSETTINGS_DRIVERNAME=postgres\n      - MM_SQLSETTINGS_DATASOURCE=postgres://mattermost:secure_postgres_password_2024@postgres:5432/mattermost?sslmode=disable&connect_timeout=10\n      \n      # Server settings\n      - MM_SERVICESETTINGS_SITEURL=https://mattermost.example.com\n      - MM_SERVICESETTINGS_LISTENADDRESS=:8000\n      - MM_SERVICESETTINGS_ENABLELINKPREVIEWS=true\n      - MM_SERVICESETTINGS_ENABLEDEVELOPER=false\n      - MM_SERVICESETTINGS_ENABLESECURITYFIXALERT=true\n      - MM_SERVICESETTINGS_ENABLEINSECUREOUTGOINGCONNECTIONS=false\n      \n      # File settings\n      - MM_FILESETTINGS_MAXFILESIZE=104857600  # 100MB\n      - MM_FILESETTINGS_DRIVERNAME=local\n      - MM_FILESETTINGS_DIRECTORY=/mattermost/data\n      \n      # Email settings (configure SMTP)\n      - MM_EMAILSETTINGS_ENABLESIGNUPWITHEMAIL=false\n      - MM_EMAILSETTINGS_ENABLESIGNINWITHEMAIL=true\n      - MM_EMAILSETTINGS_ENABLESIGNINWITHUSERNAME=true\n      - MM_EMAILSETTINGS_SMTPSERVER=smtp.example.com\n      - MM_EMAILSETTINGS_SMTPPORT=587\n      - MM_EMAILSETTINGS_SMTPUSERNAME=mattermost@example.com\n      - MM_EMAILSETTINGS_SMTPPASSWORD=smtp_secure_password\n      - MM_EMAILSETTINGS_ENABLESMTPAUTH=true\n      - MM_EMAILSETTINGS_CONNECTIONSECURITY=STARTTLS\n      \n      # Security settings\n      - MM_TEAMSETTINGS_ENABLEOPENSERVER=false\n      - MM_TEAMSETTINGS_ENABLEUSERCREATION=false\n      - MM_TEAMSETTINGS_RESTRICTCREATIONTODOMAIN=example.com\n      - MM_PASSWORDSETTINGS_MINIMUMLENGTH=12\n      - MM_PASSWORDSETTINGS_REQUIRELOWERCASE=true\n      - MM_PASSWORDSETTINGS_REQUIREUPPERCASE=true\n      - MM_PASSWORDSETTINGS_REQUIRENUMBER=true\n      - MM_PASSWORDSETTINGS_REQUIRESYMBOL=true\n      \n      # Session settings\n      - MM_SESSIONSETTINGS_SESSIONLENGTHWEBINHOURS=720  # 30 days\n      - MM_SESSIONSETTINGS_SESSIONLENGTHMOBILEINHOURS=720\n      - MM_SESSIONSETTINGS_ENABLEUSERACCESSTOKENS=false\n      \n      # Rate limiting\n      - MM_RATELIMITSETTINGS_ENABLE=true\n      - MM_RATELIMITSETTINGS_PERSEC=10\n      - MM_RATELIMITSETTINGS_MAXBURST=100\n      \n      # Privacy settings\n      - MM_PRIVACYSETTINGS_SHOWEMAILADDRESS=false\n      - MM_PRIVACYSETTINGS_SHOWFULLNAME=false\n      \n      # Logging\n      - MM_LOGSETTINGS_ENABLECONSOLE=true\n      - MM_LOGSETTINGS_CONSOLELEVEL=INFO\n      - MM_LOGSETTINGS_ENABLEFILE=true\n      - MM_LOGSETTINGS_FILELEVEL=INFO\n      - MM_LOGSETTINGS_FILELOCATION=/mattermost/logs/mattermost.log\n      \n    volumes:\n      - ./config:/mattermost/config:rw\n      - ./data:/mattermost/data:rw\n      - ./logs:/mattermost/logs:rw\n      - ./plugins:/mattermost/plugins:rw\n      - ./client-plugins:/mattermost/client/plugins:rw\n    ports:\n      - \"127.0.0.1:8065:8000\"  # Bind to localhost only\n    networks:\n      - mattermost\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n\nnetworks:\n  mattermost:\n    driver: bridge\n\nvolumes:\n  postgres_data:\nEOF\n\n# Start Mattermost stack\ncd ~/mattermost\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f mattermost\n```\n\n### Kubernetes Installation (Enterprise)\n```bash\n# Install Mattermost Operator\nkubectl create namespace mattermost-operator\n\n# Install via Helm\nhelm repo add mattermost https://helm.mattermost.com\nhelm repo update\n\nhelm install mattermost-operator mattermost/mattermost-operator \\\n  --namespace mattermost-operator \\\n  --set image.tag=v2.0.0\n\n# Create Mattermost cluster configuration\ncat > mattermost-cluster.yaml <<EOF\napiVersion: mattermost.com/v1alpha1\nkind: Mattermost\nmetadata:\n  name: mattermost\n  namespace: mattermost\nspec:\n  size: 1000users  # Adjust based on user count\n  ingressName: mattermost.example.com\n  version: v9.2.4\n  \n  database:\n    external:\n      url: \"postgres://mattermost:secure_password@postgres.example.com:5432/mattermost?sslmode=require\"\n  \n  fileStore:\n    external:\n      url: \"s3://mattermost-files\"\n      bucket: \"mattermost-files\"\n      region: \"us-west-2\"\n      \n  elasticSearch:\n    host: \"elasticsearch.example.com:9200\"\n    username: \"mattermost\"\n    password: \"elasticsearch_password\"\n    \n  blueGreen:\n    enable: true\n    productionDeployment: blue\n    \n  resourceRequests:\n    cpu: \"1000m\"\n    memory: \"2Gi\"\n    \n  resourceLimits:\n    cpu: \"2000m\" \n    memory: \"4Gi\"\n    \n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: app\n                operator: In\n                values:\n                  - mattermost\n          topologyKey: kubernetes.io/hostname\n          \n  livenessProbe:\n    httpGet:\n      path: /api/v4/system/ping\n      port: 8000\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    \n  readinessProbe:\n    httpGet:\n      path: /api/v4/system/ping\n      port: 8000\n    initialDelaySeconds: 15\n    periodSeconds: 5\nEOF\n\nkubectl apply -f mattermost-cluster.yaml\n```\n\n## Database Configuration\n\n### PostgreSQL Setup (Recommended)\n```bash\n# Install PostgreSQL 15\nsudo apt install -y postgresql-15 postgresql-client-15\n\n# Create Mattermost database and user\nsudo -u postgres psql <<EOF\nCREATE DATABASE mattermost WITH ENCODING 'UTF8' LC_COLLATE='en_US.UTF-8' LC_CTYPE='en_US.UTF-8' TEMPLATE=template0;\nCREATE USER mattermost WITH ENCRYPTED PASSWORD 'MattermostDBPassword2024!';\nGRANT ALL PRIVILEGES ON DATABASE mattermost TO mattermost;\n\n-- Performance optimization for Mattermost\nALTER SYSTEM SET shared_buffers = '1GB';\nALTER SYSTEM SET effective_cache_size = '3GB';\nALTER SYSTEM SET work_mem = '16MB';\nALTER SYSTEM SET maintenance_work_mem = '256MB';\nALTER SYSTEM SET checkpoint_completion_target = 0.9;\nALTER SYSTEM SET wal_buffers = '16MB';\nALTER SYSTEM SET random_page_cost = 1.1;\n\n-- Mattermost-specific settings\nALTER DATABASE mattermost SET default_text_search_config = 'pg_catalog.english';\n\nSELECT pg_reload_conf();\nEOF\n\n# Configure PostgreSQL for Mattermost\nsudo tee -a /etc/postgresql/15/main/postgresql.conf > /dev/null <<EOF\n\n# Mattermost optimizations\nmax_connections = 300\nshared_preload_libraries = 'pg_stat_statements'\ntrack_activity_query_size = 2048\npg_stat_statements.track = all\nEOF\n\nsudo systemctl restart postgresql\n```\n\n### MySQL 8.0 Setup (Alternative)\n```bash\n# Install MySQL 8.0\nsudo apt install -y mysql-server\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Create Mattermost database\nmysql -u root -p <<EOF\nCREATE DATABASE mattermost CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER 'mattermost'@'localhost' IDENTIFIED BY 'MattermostDBPassword2024!';\nGRANT ALL PRIVILEGES ON mattermost.* TO 'mattermost'@'localhost';\n\n-- MySQL optimization for Mattermost\nSET GLOBAL innodb_buffer_pool_size = 1073741824;  -- 1GB\nSET GLOBAL max_connections = 300;\nSET GLOBAL wait_timeout = 600;\nSET GLOBAL interactive_timeout = 600;\n\nFLUSH PRIVILEGES;\nEOF\n```\n\n## Production Configuration\n\n### Mattermost Server Configuration\n```bash\n# Create production configuration\nsudo tee /opt/mattermost/config/config.json > /dev/null <<'EOF'\n{\n  \"ServiceSettings\": {\n    \"SiteURL\": \"https://mattermost.example.com\",\n    \"WebsocketURL\": \"\",\n    \"LicenseFileLocation\": \"\",\n    \"ListenAddress\": \":8065\",\n    \"ConnectionSecurity\": \"\",\n    \"TLSCertFile\": \"\",\n    \"TLSKeyFile\": \"\",\n    \"TLSMinVer\": \"1.2\",\n    \"TLSStrictTransport\": false,\n    \"TLSStrictTransportMaxAge\": 63072000,\n    \"TLSOverwriteCiphers\": [],\n    \"UseLetsEncrypt\": false,\n    \"LetsEncryptCertificateCacheFile\": \"./config/letsencrypt.cache\",\n    \"Forward80To443\": false,\n    \"ReadTimeout\": 300,\n    \"WriteTimeout\": 300,\n    \"IdleTimeout\": 60,\n    \"MaximumLoginAttempts\": 10,\n    \"GoroutineHealthThreshold\": -1,\n    \"GoogleDeveloperKey\": \"\",\n    \"EnableBotAccountCreation\": false,\n    \"EnableUserAccessTokens\": false,\n    \"EnableLinkPreviews\": false,\n    \"EnableTesting\": false,\n    \"EnableDeveloper\": false,\n    \"EnableOpenTracing\": false,\n    \"EnableSecurityFixAlert\": true,\n    \"EnableInsecureOutgoingConnections\": false,\n    \"AllowedUntrustedInternalConnections\": \"\",\n    \"EnablePostSearch\": true,\n    \"EnableUserStatuses\": true,\n    \"ExperimentalEnableAuthenticationTransfer\": true,\n    \"ClusterLogTimeoutMilliseconds\": 2000,\n    \"CloseUnusedDirectMessages\": false,\n    \"EnablePreviewFeatures\": true,\n    \"EnableTutorial\": true,\n    \"ExperimentalEnableDefaultChannelLeaveJoinMessages\": true,\n    \"ExperimentalGroupUnreadChannels\": \"disabled\",\n    \"ExperimentalChannelOrganization\": false,\n    \"EnableAPITeamDeletion\": false,\n    \"ExperimentalEnableHardenedMode\": false,\n    \"DisableLegacyMFA\": true,\n    \"ExperimentalStrictCSRFEnforcement\": false,\n    \"EnableEmailInvitations\": false,\n    \"DisableBotsWhenOwnerIsDeactivated\": true,\n    \"EnableBotAccountCreation\": false,\n    \"EnableSVGs\": false,\n    \"EnableLatex\": false,\n    \"EnableLocalMode\": false,\n    \"LocalModeSocketLocation\": \"/var/tmp/mattermost_local.socket\",\n    \"EnableAWSMetering\": false,\n    \"SplitKey\": \"\",\n    \"FeatureFlagSyncIntervalSeconds\": 30,\n    \"DebugSplit\": false,\n    \"ThreadAutoFollow\": true,\n    \"ManagedResourcePaths\": \"\",\n    \"EnableLegacySidebar\": false,\n    \"CollapsedThreads\": \"default_off\"\n  },\n  \n  \"TeamSettings\": {\n    \"SiteName\": \"Mattermost\",\n    \"MaxUsersPerTeam\": 50000,\n    \"EnableTeamCreation\": false,\n    \"EnableUserCreation\": false,\n    \"EnableOpenServer\": false,\n    \"EnableUserDeactivation\": true,\n    \"RestrictCreationToDomains\": \"example.com\",\n    \"EnableCustomBrand\": false,\n    \"CustomBrandText\": \"\",\n    \"CustomDescriptionText\": \"\",\n    \"RestrictDirectMessage\": \"any\",\n    \"RestrictTeamInvite\": \"all\",\n    \"RestrictPublicChannelManagement\": \"all\",\n    \"RestrictPrivateChannelManagement\": \"all\",\n    \"RestrictPublicChannelCreation\": \"all\",\n    \"RestrictPrivateChannelCreation\": \"all\",\n    \"RestrictPublicChannelDeletion\": \"all\",\n    \"RestrictPrivateChannelDeletion\": \"all\",\n    \"RestrictPrivateChannelManageMembers\": \"all\",\n    \"EnableXToLeaveChannelsFromLHS\": false,\n    \"UserStatusAwayTimeout\": 300,\n    \"MaxChannelsPerTeam\": 50000,\n    \"MaxNotificationsPerChannel\": 1000000,\n    \"EnableConfirmNotificationsToChannel\": true,\n    \"TeammateNameDisplay\": \"username\",\n    \"ExperimentalViewArchivedChannels\": false,\n    \"ExperimentalEnableAutomaticReplies\": false,\n    \"ExperimentalHideTownSquareinLHS\": false,\n    \"ExperimentalTownSquareIsReadOnly\": false,\n    \"LockTeammateNameDisplay\": false,\n    \"ExperimentalPrimaryTeam\": \"\",\n    \"ExperimentalDefaultChannels\": []\n  },\n  \n  \"SqlSettings\": {\n    \"DriverName\": \"postgres\",\n    \"DataSource\": \"postgres://mattermost:MattermostDBPassword2024!@localhost:5432/mattermost?sslmode=disable&connect_timeout=10\",\n    \"DataSourceReplicas\": [],\n    \"DataSourceSearchReplicas\": [],\n    \"MaxIdleConns\": 20,\n    \"ConnMaxLifetimeMilliseconds\": 3600000,\n    \"ConnMaxIdleTimeMilliseconds\": 300000,\n    \"MaxOpenConns\": 300,\n    \"Trace\": false,\n    \"AtRestEncryptKey\": \"\",\n    \"QueryTimeout\": 30,\n    \"DisableDatabaseSearch\": false\n  },\n  \n  \"LogSettings\": {\n    \"EnableConsole\": true,\n    \"ConsoleLevel\": \"INFO\",\n    \"ConsoleJson\": true,\n    \"EnableFile\": true,\n    \"FileLevel\": \"INFO\",\n    \"FileJson\": true,\n    \"FileLocation\": \"/mattermost/logs/mattermost.log\",\n    \"EnableWebhookDebugging\": true,\n    \"EnableDiagnostics\": false,\n    \"EnableSentry\": false,\n    \"AdvancedLoggingConfig\": \"\"\n  },\n  \n  \"PasswordSettings\": {\n    \"MinimumLength\": 12,\n    \"Lowercase\": true,\n    \"Number\": true,\n    \"Uppercase\": true,\n    \"Symbol\": true\n  },\n  \n  \"FileSettings\": {\n    \"EnableFileAttachments\": true,\n    \"EnableMobileUpload\": true,\n    \"EnableMobileDownload\": true,\n    \"MaxFileSize\": 104857600,\n    \"DriverName\": \"local\",\n    \"Directory\": \"/opt/mattermost/data/\",\n    \"EnablePublicLink\": false,\n    \"ExtractContent\": true,\n    \"ArchiveRecursion\": false,\n    \"PublicLinkSalt\": \"\",\n    \"InitialFont\": \"nunito-bold.ttf\",\n    \"AmazonS3AccessKeyId\": \"\",\n    \"AmazonS3SecretAccessKey\": \"\",\n    \"AmazonS3Bucket\": \"\",\n    \"AmazonS3PathPrefix\": \"\",\n    \"AmazonS3Region\": \"\",\n    \"AmazonS3Endpoint\": \"\",\n    \"AmazonS3SSL\": true,\n    \"AmazonS3SignV2\": false,\n    \"AmazonS3SSE\": false,\n    \"AmazonS3Trace\": false\n  },\n  \n  \"EmailSettings\": {\n    \"EnableSignUpWithEmail\": false,\n    \"EnableSignInWithEmail\": true,\n    \"EnableSignInWithUsername\": true,\n    \"SendEmailNotifications\": true,\n    \"UseChannelInEmailNotifications\": false,\n    \"RequireEmailVerification\": true,\n    \"FeedbackName\": \"Mattermost\",\n    \"FeedbackEmail\": \"mattermost@example.com\",\n    \"ReplyToAddress\": \"mattermost@example.com\",\n    \"FeedbackOrganization\": \"\",\n    \"EnableSMTPAuth\": true,\n    \"SMTPUsername\": \"mattermost@example.com\",\n    \"SMTPPassword\": \"smtp_secure_password\",\n    \"SMTPServer\": \"smtp.example.com\",\n    \"SMTPPort\": \"587\",\n    \"SMTPServerTimeout\": 10,\n    \"ConnectionSecurity\": \"STARTTLS\",\n    \"SendPushNotifications\": true,\n    \"PushNotificationServer\": \"https://push.mattermost.com\",\n    \"PushNotificationContents\": \"generic\",\n    \"PushNotificationBuffer\": 1000\n  },\n  \n  \"RateLimitSettings\": {\n    \"Enable\": true,\n    \"PerSec\": 10,\n    \"MaxBurst\": 100,\n    \"MemoryStoreSize\": 10000,\n    \"VaryByRemoteAddr\": true,\n    \"VaryByUser\": false,\n    \"VaryByHeader\": \"\"\n  },\n  \n  \"PrivacySettings\": {\n    \"ShowEmailAddress\": false,\n    \"ShowFullName\": false\n  },\n  \n  \"SupportSettings\": {\n    \"TermsOfServiceLink\": \"https://mattermost.org/terms-of-service/\",\n    \"PrivacyPolicyLink\": \"https://mattermost.org/privacy-policy/\",\n    \"AboutLink\": \"https://about.mattermost.com/default-about/\",\n    \"HelpLink\": \"https://about.mattermost.com/default-help/\",\n    \"ReportAProblemLink\": \"https://about.mattermost.com/default-report-a-problem/\",\n    \"SupportEmail\": \"feedback@mattermost.com\",\n    \"CustomTermsOfServiceEnabled\": false,\n    \"CustomTermsOfServiceReAcceptancePeriod\": 365,\n    \"EnableAskCommunityLink\": true\n  },\n  \n  \"AnnouncementSettings\": {\n    \"EnableBanner\": false,\n    \"BannerText\": \"\",\n    \"BannerColor\": \"#f2a93b\",\n    \"BannerTextColor\": \"#333333\",\n    \"AllowBannerDismissal\": true\n  },\n  \n  \"ThemeSettings\": {\n    \"EnableThemeSelection\": true,\n    \"DefaultTheme\": \"default\",\n    \"AllowCustomThemes\": true,\n    \"AllowedThemes\": []\n  },\n  \n  \"GitLabSettings\": {\n    \"Enable\": false,\n    \"Secret\": \"\",\n    \"Id\": \"\",\n    \"Scope\": \"\",\n    \"AuthEndpoint\": \"\",\n    \"TokenEndpoint\": \"\",\n    \"UserApiEndpoint\": \"\"\n  },\n  \n  \"GoogleSettings\": {\n    \"Enable\": false,\n    \"Secret\": \"\",\n    \"Id\": \"\",\n    \"Scope\": \"profile email\",\n    \"AuthEndpoint\": \"https://accounts.google.com/o/oauth2/v2/auth\",\n    \"TokenEndpoint\": \"https://www.googleapis.com/oauth2/v4/token\",\n    \"UserApiEndpoint\": \"https://people.googleapis.com/v1/people/me?personFields=names%2CemailAddresses%2Cnicknames%2Cmetadata\"\n  },\n  \n  \"Office365Settings\": {\n    \"Enable\": false,\n    \"Secret\": \"\",\n    \"Id\": \"\",\n    \"Scope\": \"User.Read\",\n    \"AuthEndpoint\": \"https://login.microsoftonline.com/common/oauth2/v2.0/authorize\",\n    \"TokenEndpoint\": \"https://login.microsoftonline.com/common/oauth2/v2.0/token\",\n    \"UserApiEndpoint\": \"https://graph.microsoft.com/v1.0/me\",\n    \"Directory\": \"\"\n  },\n  \n  \"LdapSettings\": {\n    \"Enable\": false,\n    \"EnableSync\": false,\n    \"LdapServer\": \"ldap.example.com\",\n    \"LdapPort\": 636,\n    \"ConnectionSecurity\": \"TLS\",\n    \"BaseDN\": \"DC=example,DC=com\",\n    \"BindUsername\": \"CN=mattermost,OU=Service Accounts,DC=example,DC=com\",\n    \"BindPassword\": \"ldap_service_password\",\n    \"UserFilter\": \"\",\n    \"GroupFilter\": \"\",\n    \"GuestFilter\": \"\",\n    \"EnableAdminFilter\": true,\n    \"AdminFilter\": \"(memberOf=CN=Mattermost Admins,OU=Groups,DC=example,DC=com)\",\n    \"GroupDisplayNameAttribute\": \"cn\",\n    \"GroupIdAttribute\": \"cn\",\n    \"FirstNameAttribute\": \"givenName\",\n    \"LastNameAttribute\": \"sn\",\n    \"EmailAttribute\": \"mail\",\n    \"UsernameAttribute\": \"sAMAccountName\",\n    \"NicknameAttribute\": \"\",\n    \"IdAttribute\": \"objectGUID\",\n    \"PositionAttribute\": \"title\",\n    \"LoginIdAttribute\": \"sAMAccountName\",\n    \"PictureAttribute\": \"\",\n    \"SyncIntervalMinutes\": 60,\n    \"SkipCertificateVerification\": false,\n    \"PublicCertificateFile\": \"\",\n    \"PrivateKeyFile\": \"\",\n    \"QueryTimeout\": 60,\n    \"MaxPageSize\": 0,\n    \"LoginFieldName\": \"\",\n    \"LoginButtonColor\": \"#0000\",\n    \"LoginButtonBorderColor\": \"#2389D7\",\n    \"LoginButtonTextColor\": \"#2389D7\"\n  }\n}\nEOF\n\nsudo chown mattermost:mattermost /opt/mattermost/config/config.json\nsudo chmod 600 /opt/mattermost/config/config.json\n```\n\n### SystemD Service Configuration\n```bash\n# Create secure systemd service\nsudo tee /etc/systemd/system/mattermost.service > /dev/null <<EOF\n[Unit]\nDescription=Mattermost Team Communication Service\nAfter=network.target postgresql.service mysql.service\nWants=network.target\n\n[Service]\nType=notify\nUser=mattermost\nGroup=mattermost\nExecStart=/opt/mattermost/bin/mattermost\nWorkingDirectory=/opt/mattermost\nLimitNOFILE=49152\nRestart=always\nRestartSec=10\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nPrivateDevices=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/opt/mattermost/data /opt/mattermost/logs /opt/mattermost/config /opt/mattermost/plugins\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\n\n# Resource limits\nMemoryMax=4G\nCPUQuota=200%\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now mattermost\n\n# Verify service status\nsudo systemctl status mattermost\n```\n\n## Security Hardening\n\n### NGINX Reverse Proxy with Security\n```bash\n# Create secure NGINX configuration\nsudo tee /etc/nginx/sites-available/mattermost > /dev/null <<EOF\n# Mattermost NGINX Configuration with Security Headers\n\nupstream mattermost {\n    server 127.0.0.1:8065;\n    keepalive 64;\n}\n\nproxy_cache_path /var/cache/nginx/mattermost levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off;\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name mattermost.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name mattermost.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/mattermost.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/mattermost.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets off;\n\n    # Security headers\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection \"1; mode=block\" always;\n    add_header Referrer-Policy \"strict-origin-when-cross-origin\" always;\n    add_header Content-Security-Policy \"frame-ancestors 'none'\" always;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=mattermost_ratelimit:10m rate=10r/s;\n    limit_req zone=mattermost_ratelimit burst=20 nodelay;\n\n    # Max upload size for file attachments\n    client_max_body_size 50M;\n\n    location ~ /api/v[0-9]+/(users/)?websocket\\$ {\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        client_max_body_size 50M;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        client_body_timeout 60;\n        send_timeout 300;\n        lingering_timeout 5;\n        proxy_connect_timeout 90;\n        proxy_send_timeout 300;\n        proxy_read_timeout 90s;\n        proxy_pass http://mattermost;\n    }\n\n    location / {\n        client_max_body_size 50M;\n        proxy_set_header Connection \"\";\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        proxy_read_timeout 600s;\n        proxy_cache mattermost_cache;\n        proxy_cache_revalidate on;\n        proxy_cache_min_uses 2;\n        proxy_cache_use_stale timeout;\n        proxy_cache_lock on;\n        proxy_http_version 1.1;\n        proxy_pass http://mattermost;\n    }\n}\nEOF\n\n# Enable site and install SSL\nsudo ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/\nsudo certbot --nginx -d mattermost.example.com\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n### Advanced Security Configuration\n```bash\n# Configure fail2ban for Mattermost\nsudo tee /etc/fail2ban/filter.d/mattermost.conf > /dev/null <<EOF\n[Definition]\nfailregex = ^.*\"level\":\"error\".*\"msg\":\"Invalid login attempt\".*\"user_id\":\"[^\"]*\".*\"ip\":\"<HOST>\"\nignoreregex =\nEOF\n\nsudo tee /etc/fail2ban/jail.d/mattermost.conf > /dev/null <<EOF\n[mattermost]\nenabled = true\nport = http,https\nfilter = mattermost\nlogpath = /opt/mattermost/logs/mattermost.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\naction = iptables-multiport[name=Mattermost, port=\"http,https\", protocol=tcp]\nEOF\n\nsudo systemctl restart fail2ban\n```\n\n## Backup and Monitoring\n\n### Backup Strategy\n```bash\nsudo tee /usr/local/bin/mattermost-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/mattermost\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,config,data,plugins}\n\necho \"Starting Mattermost backup...\"\n\n# Stop Mattermost service\nsystemctl stop mattermost\n\n# Backup database\nsudo -u postgres pg_dump mattermost > ${BACKUP_DIR}/database/mattermost-${DATE}.sql\ngzip ${BACKUP_DIR}/database/mattermost-${DATE}.sql\n\n# Backup configuration\ncp /opt/mattermost/config/config.json ${BACKUP_DIR}/config/config-${DATE}.json\n\n# Backup user data and files\ntar -czf ${BACKUP_DIR}/data/mattermost-data-${DATE}.tar.gz -C /opt/mattermost data/\n\n# Backup plugins\nif [ -d \"/opt/mattermost/plugins\" ]; then\n    tar -czf ${BACKUP_DIR}/plugins/mattermost-plugins-${DATE}.tar.gz -C /opt/mattermost plugins/\nfi\n\n# Start Mattermost\nsystemctl start mattermost\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://mattermost-backups/ --recursive\ngsutil cp -r ${BACKUP_DIR}/* gs://mattermost-backups/\n\n# Keep last 7 backups\nfind ${BACKUP_DIR} -name \"mattermost-*\" -type f -mtime +7 -delete\n\necho \"Mattermost backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/mattermost-backup.sh\necho \"0 2 * * * root /usr/local/bin/mattermost-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Health Monitoring\n```bash\nsudo tee /usr/local/bin/mattermost-health.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/mattermost-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active mattermost >/dev/null 2>&1; then\n    log_message \"âœ“ Mattermost service is running\"\nelse\n    log_message \"âœ— Mattermost service is not running\"\n    exit 1\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8065/api/v4/system/ping)\nif [ \"${HTTP_STATUS}\" = \"200\" ]; then\n    log_message \"âœ“ Mattermost API is responding\"\nelse\n    log_message \"âœ— Mattermost API issues (HTTP ${HTTP_STATUS})\"\nfi\n\n# Check database connectivity\nDB_STATUS=$(curl -s http://localhost:8065/api/v4/database/ping | jq -r '.database_status' 2>/dev/null)\nif [ \"$DB_STATUS\" = \"OK\" ]; then\n    log_message \"âœ“ Database connection healthy\"\nelse\n    log_message \"âš  Database connection issues\"\nfi\n\n# Check disk space\nDISK_USAGE=$(df /opt/mattermost | awk 'NR==2 {print $5}' | sed 's/%//')\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message \"âš  High disk usage: ${DISK_USAGE}%\"\nelse\n    log_message \"âœ“ Disk usage: ${DISK_USAGE}%\"\nfi\n\nlog_message \"Mattermost health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/mattermost-health.sh\necho \"*/15 * * * * root /usr/local/bin/mattermost-health.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check Mattermost service status\nsudo systemctl status mattermost\nsudo journalctl -u mattermost -f\n\n# Check Mattermost logs\nsudo tail -f /opt/mattermost/logs/mattermost.log\n\n# Test API connectivity\ncurl -i http://localhost:8065/api/v4/system/ping\n\n# Check database connection\nsudo -u postgres psql mattermost -c \"SELECT version();\"\n\n# Check file permissions\nls -la /opt/mattermost/\nsudo chown -R mattermost:mattermost /opt/mattermost\n\n# Memory usage\nps aux --sort=-%mem | grep mattermost\npmap -x $(pgrep mattermost)\n\n# Network connectivity\nss -tulpn | grep 8065\nnetstat -tulpn | grep mattermost\n\n# Configuration validation\n/opt/mattermost/bin/mattermost config validate\n\n# Reset admin password (CLI)\nsudo -u mattermost /opt/mattermost/bin/mattermost user password admin new_password\n\n# Check plugin status\nsudo -u mattermost /opt/mattermost/bin/mattermost plugin list\n\n# Database migration (if needed)\nsudo -u mattermost /opt/mattermost/bin/mattermost db migrate\n\n# Clear cache\nsudo rm -rf /opt/mattermost/data/cache/*\nsudo systemctl restart mattermost\n```\n\n## Additional Resources\n\n- [Mattermost Documentation](https://docs.mattermost.com/)\n- [Installation Guide](https://docs.mattermost.com/guides/deployment.html)\n- [Security Guide](https://docs.mattermost.com/overview/security.html)\n- [Admin Guide](https://docs.mattermost.com/guides/administration.html)\n- [Mattermost Community](https://community.mattermost.com/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"mattermost-installation-guide\" class=\"mobile-header\">Mattermost Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source, self-hosted team communication platform with enterprise-grade security. Complete alternative to Slack with advanced features for secure collaboration, workflow automation, and integrated voice/video calling.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for production</li>\n<li class=\"mobile-list-item\">PostgreSQL 11+ or MySQL 8.0+ database</li>\n<li class=\"mobile-list-item\">NGINX reverse proxy (recommended for production)</li>\n<li class=\"mobile-list-item\">Domain name and SSL certificate for HTTPS</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian-recommended\" class=\"mobile-header\">Ubuntu/Debian (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Download latest Mattermost server\nMATTERMOST_VERSION=&quot;9.2.4&quot;  # Check for latest at https://mattermost.com/download\nwget https://releases.mattermost.com/${MATTERMOST_VERSION}/mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\n\n# Extract and install\ntar -xzf mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\nsudo mv mattermost /opt/\n\n# Create system user\nsudo useradd --system --user-group mattermost\nsudo chown -R mattermost:mattermost /opt/mattermost\n\n# Create data directory\nsudo mkdir -p /opt/mattermost/data\nsudo chown mattermost:mattermost /opt/mattermost/data\nsudo chmod 755 /opt/mattermost/data\n\n# Set proper permissions\nsudo find /opt/mattermost -type d -exec chmod 755 {} \\;\nsudo find /opt/mattermost -type f -exec chmod 644 {} \\;\nsudo chmod +x /opt/mattermost/bin/mattermost\n\n# Create log directory\nsudo mkdir -p /var/log/mattermost\nsudo chown mattermost:mattermost /var/log/mattermost</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install prerequisites\nsudo yum update -y\nsudo yum install -y wget tar\n\n# Download and install Mattermost\nMATTERMOST_VERSION=&quot;9.2.4&quot;\nwget https://releases.mattermost.com/${MATTERMOST_VERSION}/mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\ntar -xzf mattermost-${MATTERMOST_VERSION}-linux-amd64.tar.gz\nsudo mv mattermost /opt/\n\n# Create system user and directories\nsudo useradd --system --user-group mattermost\nsudo chown -R mattermost:mattermost /opt/mattermost\nsudo mkdir -p /opt/mattermost/data /var/log/mattermost\nsudo chown mattermost:mattermost /opt/mattermost/data /var/log/mattermost\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8065/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation-production-ready\" class=\"mobile-header\">Docker Installation (Production Ready)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Mattermost directory structure\nmkdir -p ~/mattermost/{config,data,logs,plugins,client-plugins}\n\n# Create Docker Compose configuration\ncat &gt; ~/mattermost/docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  postgres:\n    image: postgres:15-alpine\n    container_name: mattermost-postgres\n    restart: unless-stopped\n    environment:\n      - POSTGRES_DB=mattermost\n      - POSTGRES_USER=mattermost\n      - POSTGRES_PASSWORD=secure_postgres_password_2024\n      - POSTGRES_INITDB_ARGS=&quot;--encoding=UTF8 --lc-collate=C --lc-ctype=C&quot;\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./postgres-custom.conf:/etc/postgresql/postgresql.conf\n    networks:\n      - mattermost\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n      - /var/run/postgresql\n\n  mattermost:\n    image: mattermost/mattermost-enterprise-edition:latest\n    container_name: mattermost\n    restart: unless-stopped\n    depends_on:\n      - postgres\n    environment:\n      # Database settings\n      - MM_SQLSETTINGS_DRIVERNAME=postgres\n      - MM_SQLSETTINGS_DATASOURCE=postgres://mattermost:secure_postgres_password_2024@postgres:5432/mattermost?sslmode=disable&amp;connect_timeout=10\n      \n      # Server settings\n      - MM_SERVICESETTINGS_SITEURL=https://mattermost.example.com\n      - MM_SERVICESETTINGS_LISTENADDRESS=:8000\n      - MM_SERVICESETTINGS_ENABLELINKPREVIEWS=true\n      - MM_SERVICESETTINGS_ENABLEDEVELOPER=false\n      - MM_SERVICESETTINGS_ENABLESECURITYFIXALERT=true\n      - MM_SERVICESETTINGS_ENABLEINSECUREOUTGOINGCONNECTIONS=false\n      \n      # File settings\n      - MM_FILESETTINGS_MAXFILESIZE=104857600  # 100MB\n      - MM_FILESETTINGS_DRIVERNAME=local\n      - MM_FILESETTINGS_DIRECTORY=/mattermost/data\n      \n      # Email settings (configure SMTP)\n      - MM_EMAILSETTINGS_ENABLESIGNUPWITHEMAIL=false\n      - MM_EMAILSETTINGS_ENABLESIGNINWITHEMAIL=true\n      - MM_EMAILSETTINGS_ENABLESIGNINWITHUSERNAME=true\n      - MM_EMAILSETTINGS_SMTPSERVER=smtp.example.com\n      - MM_EMAILSETTINGS_SMTPPORT=587\n      - MM_EMAILSETTINGS_SMTPUSERNAME=mattermost@example.com\n      - MM_EMAILSETTINGS_SMTPPASSWORD=smtp_secure_password\n      - MM_EMAILSETTINGS_ENABLESMTPAUTH=true\n      - MM_EMAILSETTINGS_CONNECTIONSECURITY=STARTTLS\n      \n      # Security settings\n      - MM_TEAMSETTINGS_ENABLEOPENSERVER=false\n      - MM_TEAMSETTINGS_ENABLEUSERCREATION=false\n      - MM_TEAMSETTINGS_RESTRICTCREATIONTODOMAIN=example.com\n      - MM_PASSWORDSETTINGS_MINIMUMLENGTH=12\n      - MM_PASSWORDSETTINGS_REQUIRELOWERCASE=true\n      - MM_PASSWORDSETTINGS_REQUIREUPPERCASE=true\n      - MM_PASSWORDSETTINGS_REQUIRENUMBER=true\n      - MM_PASSWORDSETTINGS_REQUIRESYMBOL=true\n      \n      # Session settings\n      - MM_SESSIONSETTINGS_SESSIONLENGTHWEBINHOURS=720  # 30 days\n      - MM_SESSIONSETTINGS_SESSIONLENGTHMOBILEINHOURS=720\n      - MM_SESSIONSETTINGS_ENABLEUSERACCESSTOKENS=false\n      \n      # Rate limiting\n      - MM_RATELIMITSETTINGS_ENABLE=true\n      - MM_RATELIMITSETTINGS_PERSEC=10\n      - MM_RATELIMITSETTINGS_MAXBURST=100\n      \n      # Privacy settings\n      - MM_PRIVACYSETTINGS_SHOWEMAILADDRESS=false\n      - MM_PRIVACYSETTINGS_SHOWFULLNAME=false\n      \n      # Logging\n      - MM_LOGSETTINGS_ENABLECONSOLE=true\n      - MM_LOGSETTINGS_CONSOLELEVEL=INFO\n      - MM_LOGSETTINGS_ENABLEFILE=true\n      - MM_LOGSETTINGS_FILELEVEL=INFO\n      - MM_LOGSETTINGS_FILELOCATION=/mattermost/logs/mattermost.log\n      \n    volumes:\n      - ./config:/mattermost/config:rw\n      - ./data:/mattermost/data:rw\n      - ./logs:/mattermost/logs:rw\n      - ./plugins:/mattermost/plugins:rw\n      - ./client-plugins:/mattermost/client/plugins:rw\n    ports:\n      - &quot;127.0.0.1:8065:8000&quot;  # Bind to localhost only\n    networks:\n      - mattermost\n    security_opt:\n      - no-new-privileges:true\n    read_only: true\n    tmpfs:\n      - /tmp\n\nnetworks:\n  mattermost:\n    driver: bridge\n\nvolumes:\n  postgres_data:\nEOF\n\n# Start Mattermost stack\ncd ~/mattermost\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f mattermost</code></pre>\n      </div>\n    </div>\n<h3 id=\"kubernetes-installation-enterprise\" class=\"mobile-header\">Kubernetes Installation (Enterprise)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Mattermost Operator\nkubectl create namespace mattermost-operator\n\n# Install via Helm\nhelm repo add mattermost https://helm.mattermost.com\nhelm repo update\n\nhelm install mattermost-operator mattermost/mattermost-operator \\\n  --namespace mattermost-operator \\\n  --set image.tag=v2.0.0\n\n# Create Mattermost cluster configuration\ncat &gt; mattermost-cluster.yaml &lt;&lt;EOF\napiVersion: mattermost.com/v1alpha1\nkind: Mattermost\nmetadata:\n  name: mattermost\n  namespace: mattermost\nspec:\n  size: 1000users  # Adjust based on user count\n  ingressName: mattermost.example.com\n  version: v9.2.4\n  \n  database:\n    external:\n      url: &quot;postgres://mattermost:secure_password@postgres.example.com:5432/mattermost?sslmode=require&quot;\n  \n  fileStore:\n    external:\n      url: &quot;s3://mattermost-files&quot;\n      bucket: &quot;mattermost-files&quot;\n      region: &quot;us-west-2&quot;\n      \n  elasticSearch:\n    host: &quot;elasticsearch.example.com:9200&quot;\n    username: &quot;mattermost&quot;\n    password: &quot;elasticsearch_password&quot;\n    \n  blueGreen:\n    enable: true\n    productionDeployment: blue\n    \n  resourceRequests:\n    cpu: &quot;1000m&quot;\n    memory: &quot;2Gi&quot;\n    \n  resourceLimits:\n    cpu: &quot;2000m&quot; \n    memory: &quot;4Gi&quot;\n    \n  affinity:\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchExpressions:\n              - key: app\n                operator: In\n                values:\n                  - mattermost\n          topologyKey: kubernetes.io/hostname\n          \n  livenessProbe:\n    httpGet:\n      path: /api/v4/system/ping\n      port: 8000\n    initialDelaySeconds: 30\n    periodSeconds: 10\n    \n  readinessProbe:\n    httpGet:\n      path: /api/v4/system/ping\n      port: 8000\n    initialDelaySeconds: 15\n    periodSeconds: 5\nEOF\n\nkubectl apply -f mattermost-cluster.yaml</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-configuration\" class=\"mobile-header\">Database Configuration</h2>\n<h3 id=\"postgresql-setup-recommended\" class=\"mobile-header\">PostgreSQL Setup (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install PostgreSQL 15\nsudo apt install -y postgresql-15 postgresql-client-15\n\n# Create Mattermost database and user\nsudo -u postgres psql &lt;&lt;EOF\nCREATE DATABASE mattermost WITH ENCODING &#039;UTF8&#039; LC_COLLATE=&#039;en_US.UTF-8&#039; LC_CTYPE=&#039;en_US.UTF-8&#039; TEMPLATE=template0;\nCREATE USER mattermost WITH ENCRYPTED PASSWORD &#039;MattermostDBPassword2024!&#039;;\nGRANT ALL PRIVILEGES ON DATABASE mattermost TO mattermost;\n\n-- Performance optimization for Mattermost\nALTER SYSTEM SET shared_buffers = &#039;1GB&#039;;\nALTER SYSTEM SET effective_cache_size = &#039;3GB&#039;;\nALTER SYSTEM SET work_mem = &#039;16MB&#039;;\nALTER SYSTEM SET maintenance_work_mem = &#039;256MB&#039;;\nALTER SYSTEM SET checkpoint_completion_target = 0.9;\nALTER SYSTEM SET wal_buffers = &#039;16MB&#039;;\nALTER SYSTEM SET random_page_cost = 1.1;\n\n-- Mattermost-specific settings\nALTER DATABASE mattermost SET default_text_search_config = &#039;pg_catalog.english&#039;;\n\nSELECT pg_reload_conf();\nEOF\n\n# Configure PostgreSQL for Mattermost\nsudo tee -a /etc/postgresql/15/main/postgresql.conf &gt; /dev/null &lt;&lt;EOF\n\n# Mattermost optimizations\nmax_connections = 300\nshared_preload_libraries = &#039;pg_stat_statements&#039;\ntrack_activity_query_size = 2048\npg_stat_statements.track = all\nEOF\n\nsudo systemctl restart postgresql</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-80-setup-alternative\" class=\"mobile-header\">MySQL 8.0 Setup (Alternative)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MySQL 8.0\nsudo apt install -y mysql-server\n\n# Secure installation\nsudo mysql_secure_installation\n\n# Create Mattermost database\nmysql -u root -p &lt;&lt;EOF\nCREATE DATABASE mattermost CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;\nCREATE USER &#039;mattermost&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;MattermostDBPassword2024!&#039;;\nGRANT ALL PRIVILEGES ON mattermost.* TO &#039;mattermost&#039;@&#039;localhost&#039;;\n\n-- MySQL optimization for Mattermost\nSET GLOBAL innodb_buffer_pool_size = 1073741824;  -- 1GB\nSET GLOBAL max_connections = 300;\nSET GLOBAL wait_timeout = 600;\nSET GLOBAL interactive_timeout = 600;\n\nFLUSH PRIVILEGES;\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"production-configuration\" class=\"mobile-header\">Production Configuration</h2>\n<h3 id=\"mattermost-server-configuration\" class=\"mobile-header\">Mattermost Server Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production configuration\nsudo tee /opt/mattermost/config/config.json &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n{\n  &quot;ServiceSettings&quot;: {\n    &quot;SiteURL&quot;: &quot;https://mattermost.example.com&quot;,\n    &quot;WebsocketURL&quot;: &quot;&quot;,\n    &quot;LicenseFileLocation&quot;: &quot;&quot;,\n    &quot;ListenAddress&quot;: &quot;:8065&quot;,\n    &quot;ConnectionSecurity&quot;: &quot;&quot;,\n    &quot;TLSCertFile&quot;: &quot;&quot;,\n    &quot;TLSKeyFile&quot;: &quot;&quot;,\n    &quot;TLSMinVer&quot;: &quot;1.2&quot;,\n    &quot;TLSStrictTransport&quot;: false,\n    &quot;TLSStrictTransportMaxAge&quot;: 63072000,\n    &quot;TLSOverwriteCiphers&quot;: [],\n    &quot;UseLetsEncrypt&quot;: false,\n    &quot;LetsEncryptCertificateCacheFile&quot;: &quot;./config/letsencrypt.cache&quot;,\n    &quot;Forward80To443&quot;: false,\n    &quot;ReadTimeout&quot;: 300,\n    &quot;WriteTimeout&quot;: 300,\n    &quot;IdleTimeout&quot;: 60,\n    &quot;MaximumLoginAttempts&quot;: 10,\n    &quot;GoroutineHealthThreshold&quot;: -1,\n    &quot;GoogleDeveloperKey&quot;: &quot;&quot;,\n    &quot;EnableBotAccountCreation&quot;: false,\n    &quot;EnableUserAccessTokens&quot;: false,\n    &quot;EnableLinkPreviews&quot;: false,\n    &quot;EnableTesting&quot;: false,\n    &quot;EnableDeveloper&quot;: false,\n    &quot;EnableOpenTracing&quot;: false,\n    &quot;EnableSecurityFixAlert&quot;: true,\n    &quot;EnableInsecureOutgoingConnections&quot;: false,\n    &quot;AllowedUntrustedInternalConnections&quot;: &quot;&quot;,\n    &quot;EnablePostSearch&quot;: true,\n    &quot;EnableUserStatuses&quot;: true,\n    &quot;ExperimentalEnableAuthenticationTransfer&quot;: true,\n    &quot;ClusterLogTimeoutMilliseconds&quot;: 2000,\n    &quot;CloseUnusedDirectMessages&quot;: false,\n    &quot;EnablePreviewFeatures&quot;: true,\n    &quot;EnableTutorial&quot;: true,\n    &quot;ExperimentalEnableDefaultChannelLeaveJoinMessages&quot;: true,\n    &quot;ExperimentalGroupUnreadChannels&quot;: &quot;disabled&quot;,\n    &quot;ExperimentalChannelOrganization&quot;: false,\n    &quot;EnableAPITeamDeletion&quot;: false,\n    &quot;ExperimentalEnableHardenedMode&quot;: false,\n    &quot;DisableLegacyMFA&quot;: true,\n    &quot;ExperimentalStrictCSRFEnforcement&quot;: false,\n    &quot;EnableEmailInvitations&quot;: false,\n    &quot;DisableBotsWhenOwnerIsDeactivated&quot;: true,\n    &quot;EnableBotAccountCreation&quot;: false,\n    &quot;EnableSVGs&quot;: false,\n    &quot;EnableLatex&quot;: false,\n    &quot;EnableLocalMode&quot;: false,\n    &quot;LocalModeSocketLocation&quot;: &quot;/var/tmp/mattermost_local.socket&quot;,\n    &quot;EnableAWSMetering&quot;: false,\n    &quot;SplitKey&quot;: &quot;&quot;,\n    &quot;FeatureFlagSyncIntervalSeconds&quot;: 30,\n    &quot;DebugSplit&quot;: false,\n    &quot;ThreadAutoFollow&quot;: true,\n    &quot;ManagedResourcePaths&quot;: &quot;&quot;,\n    &quot;EnableLegacySidebar&quot;: false,\n    &quot;CollapsedThreads&quot;: &quot;default_off&quot;\n  },\n  \n  &quot;TeamSettings&quot;: {\n    &quot;SiteName&quot;: &quot;Mattermost&quot;,\n    &quot;MaxUsersPerTeam&quot;: 50000,\n    &quot;EnableTeamCreation&quot;: false,\n    &quot;EnableUserCreation&quot;: false,\n    &quot;EnableOpenServer&quot;: false,\n    &quot;EnableUserDeactivation&quot;: true,\n    &quot;RestrictCreationToDomains&quot;: &quot;example.com&quot;,\n    &quot;EnableCustomBrand&quot;: false,\n    &quot;CustomBrandText&quot;: &quot;&quot;,\n    &quot;CustomDescriptionText&quot;: &quot;&quot;,\n    &quot;RestrictDirectMessage&quot;: &quot;any&quot;,\n    &quot;RestrictTeamInvite&quot;: &quot;all&quot;,\n    &quot;RestrictPublicChannelManagement&quot;: &quot;all&quot;,\n    &quot;RestrictPrivateChannelManagement&quot;: &quot;all&quot;,\n    &quot;RestrictPublicChannelCreation&quot;: &quot;all&quot;,\n    &quot;RestrictPrivateChannelCreation&quot;: &quot;all&quot;,\n    &quot;RestrictPublicChannelDeletion&quot;: &quot;all&quot;,\n    &quot;RestrictPrivateChannelDeletion&quot;: &quot;all&quot;,\n    &quot;RestrictPrivateChannelManageMembers&quot;: &quot;all&quot;,\n    &quot;EnableXToLeaveChannelsFromLHS&quot;: false,\n    &quot;UserStatusAwayTimeout&quot;: 300,\n    &quot;MaxChannelsPerTeam&quot;: 50000,\n    &quot;MaxNotificationsPerChannel&quot;: 1000000,\n    &quot;EnableConfirmNotificationsToChannel&quot;: true,\n    &quot;TeammateNameDisplay&quot;: &quot;username&quot;,\n    &quot;ExperimentalViewArchivedChannels&quot;: false,\n    &quot;ExperimentalEnableAutomaticReplies&quot;: false,\n    &quot;ExperimentalHideTownSquareinLHS&quot;: false,\n    &quot;ExperimentalTownSquareIsReadOnly&quot;: false,\n    &quot;LockTeammateNameDisplay&quot;: false,\n    &quot;ExperimentalPrimaryTeam&quot;: &quot;&quot;,\n    &quot;ExperimentalDefaultChannels&quot;: []\n  },\n  \n  &quot;SqlSettings&quot;: {\n    &quot;DriverName&quot;: &quot;postgres&quot;,\n    &quot;DataSource&quot;: &quot;postgres://mattermost:MattermostDBPassword2024!@localhost:5432/mattermost?sslmode=disable&amp;connect_timeout=10&quot;,\n    &quot;DataSourceReplicas&quot;: [],\n    &quot;DataSourceSearchReplicas&quot;: [],\n    &quot;MaxIdleConns&quot;: 20,\n    &quot;ConnMaxLifetimeMilliseconds&quot;: 3600000,\n    &quot;ConnMaxIdleTimeMilliseconds&quot;: 300000,\n    &quot;MaxOpenConns&quot;: 300,\n    &quot;Trace&quot;: false,\n    &quot;AtRestEncryptKey&quot;: &quot;&quot;,\n    &quot;QueryTimeout&quot;: 30,\n    &quot;DisableDatabaseSearch&quot;: false\n  },\n  \n  &quot;LogSettings&quot;: {\n    &quot;EnableConsole&quot;: true,\n    &quot;ConsoleLevel&quot;: &quot;INFO&quot;,\n    &quot;ConsoleJson&quot;: true,\n    &quot;EnableFile&quot;: true,\n    &quot;FileLevel&quot;: &quot;INFO&quot;,\n    &quot;FileJson&quot;: true,\n    &quot;FileLocation&quot;: &quot;/mattermost/logs/mattermost.log&quot;,\n    &quot;EnableWebhookDebugging&quot;: true,\n    &quot;EnableDiagnostics&quot;: false,\n    &quot;EnableSentry&quot;: false,\n    &quot;AdvancedLoggingConfig&quot;: &quot;&quot;\n  },\n  \n  &quot;PasswordSettings&quot;: {\n    &quot;MinimumLength&quot;: 12,\n    &quot;Lowercase&quot;: true,\n    &quot;Number&quot;: true,\n    &quot;Uppercase&quot;: true,\n    &quot;Symbol&quot;: true\n  },\n  \n  &quot;FileSettings&quot;: {\n    &quot;EnableFileAttachments&quot;: true,\n    &quot;EnableMobileUpload&quot;: true,\n    &quot;EnableMobileDownload&quot;: true,\n    &quot;MaxFileSize&quot;: 104857600,\n    &quot;DriverName&quot;: &quot;local&quot;,\n    &quot;Directory&quot;: &quot;/opt/mattermost/data/&quot;,\n    &quot;EnablePublicLink&quot;: false,\n    &quot;ExtractContent&quot;: true,\n    &quot;ArchiveRecursion&quot;: false,\n    &quot;PublicLinkSalt&quot;: &quot;&quot;,\n    &quot;InitialFont&quot;: &quot;nunito-bold.ttf&quot;,\n    &quot;AmazonS3AccessKeyId&quot;: &quot;&quot;,\n    &quot;AmazonS3SecretAccessKey&quot;: &quot;&quot;,\n    &quot;AmazonS3Bucket&quot;: &quot;&quot;,\n    &quot;AmazonS3PathPrefix&quot;: &quot;&quot;,\n    &quot;AmazonS3Region&quot;: &quot;&quot;,\n    &quot;AmazonS3Endpoint&quot;: &quot;&quot;,\n    &quot;AmazonS3SSL&quot;: true,\n    &quot;AmazonS3SignV2&quot;: false,\n    &quot;AmazonS3SSE&quot;: false,\n    &quot;AmazonS3Trace&quot;: false\n  },\n  \n  &quot;EmailSettings&quot;: {\n    &quot;EnableSignUpWithEmail&quot;: false,\n    &quot;EnableSignInWithEmail&quot;: true,\n    &quot;EnableSignInWithUsername&quot;: true,\n    &quot;SendEmailNotifications&quot;: true,\n    &quot;UseChannelInEmailNotifications&quot;: false,\n    &quot;RequireEmailVerification&quot;: true,\n    &quot;FeedbackName&quot;: &quot;Mattermost&quot;,\n    &quot;FeedbackEmail&quot;: &quot;mattermost@example.com&quot;,\n    &quot;ReplyToAddress&quot;: &quot;mattermost@example.com&quot;,\n    &quot;FeedbackOrganization&quot;: &quot;&quot;,\n    &quot;EnableSMTPAuth&quot;: true,\n    &quot;SMTPUsername&quot;: &quot;mattermost@example.com&quot;,\n    &quot;SMTPPassword&quot;: &quot;smtp_secure_password&quot;,\n    &quot;SMTPServer&quot;: &quot;smtp.example.com&quot;,\n    &quot;SMTPPort&quot;: &quot;587&quot;,\n    &quot;SMTPServerTimeout&quot;: 10,\n    &quot;ConnectionSecurity&quot;: &quot;STARTTLS&quot;,\n    &quot;SendPushNotifications&quot;: true,\n    &quot;PushNotificationServer&quot;: &quot;https://push.mattermost.com&quot;,\n    &quot;PushNotificationContents&quot;: &quot;generic&quot;,\n    &quot;PushNotificationBuffer&quot;: 1000\n  },\n  \n  &quot;RateLimitSettings&quot;: {\n    &quot;Enable&quot;: true,\n    &quot;PerSec&quot;: 10,\n    &quot;MaxBurst&quot;: 100,\n    &quot;MemoryStoreSize&quot;: 10000,\n    &quot;VaryByRemoteAddr&quot;: true,\n    &quot;VaryByUser&quot;: false,\n    &quot;VaryByHeader&quot;: &quot;&quot;\n  },\n  \n  &quot;PrivacySettings&quot;: {\n    &quot;ShowEmailAddress&quot;: false,\n    &quot;ShowFullName&quot;: false\n  },\n  \n  &quot;SupportSettings&quot;: {\n    &quot;TermsOfServiceLink&quot;: &quot;https://mattermost.org/terms-of-service/&quot;,\n    &quot;PrivacyPolicyLink&quot;: &quot;https://mattermost.org/privacy-policy/&quot;,\n    &quot;AboutLink&quot;: &quot;https://about.mattermost.com/default-about/&quot;,\n    &quot;HelpLink&quot;: &quot;https://about.mattermost.com/default-help/&quot;,\n    &quot;ReportAProblemLink&quot;: &quot;https://about.mattermost.com/default-report-a-problem/&quot;,\n    &quot;SupportEmail&quot;: &quot;feedback@mattermost.com&quot;,\n    &quot;CustomTermsOfServiceEnabled&quot;: false,\n    &quot;CustomTermsOfServiceReAcceptancePeriod&quot;: 365,\n    &quot;EnableAskCommunityLink&quot;: true\n  },\n  \n  &quot;AnnouncementSettings&quot;: {\n    &quot;EnableBanner&quot;: false,\n    &quot;BannerText&quot;: &quot;&quot;,\n    &quot;BannerColor&quot;: &quot;#f2a93b&quot;,\n    &quot;BannerTextColor&quot;: &quot;#333333&quot;,\n    &quot;AllowBannerDismissal&quot;: true\n  },\n  \n  &quot;ThemeSettings&quot;: {\n    &quot;EnableThemeSelection&quot;: true,\n    &quot;DefaultTheme&quot;: &quot;default&quot;,\n    &quot;AllowCustomThemes&quot;: true,\n    &quot;AllowedThemes&quot;: []\n  },\n  \n  &quot;GitLabSettings&quot;: {\n    &quot;Enable&quot;: false,\n    &quot;Secret&quot;: &quot;&quot;,\n    &quot;Id&quot;: &quot;&quot;,\n    &quot;Scope&quot;: &quot;&quot;,\n    &quot;AuthEndpoint&quot;: &quot;&quot;,\n    &quot;TokenEndpoint&quot;: &quot;&quot;,\n    &quot;UserApiEndpoint&quot;: &quot;&quot;\n  },\n  \n  &quot;GoogleSettings&quot;: {\n    &quot;Enable&quot;: false,\n    &quot;Secret&quot;: &quot;&quot;,\n    &quot;Id&quot;: &quot;&quot;,\n    &quot;Scope&quot;: &quot;profile email&quot;,\n    &quot;AuthEndpoint&quot;: &quot;https://accounts.google.com/o/oauth2/v2/auth&quot;,\n    &quot;TokenEndpoint&quot;: &quot;https://www.googleapis.com/oauth2/v4/token&quot;,\n    &quot;UserApiEndpoint&quot;: &quot;https://people.googleapis.com/v1/people/me?personFields=names%2CemailAddresses%2Cnicknames%2Cmetadata&quot;\n  },\n  \n  &quot;Office365Settings&quot;: {\n    &quot;Enable&quot;: false,\n    &quot;Secret&quot;: &quot;&quot;,\n    &quot;Id&quot;: &quot;&quot;,\n    &quot;Scope&quot;: &quot;User.Read&quot;,\n    &quot;AuthEndpoint&quot;: &quot;https://login.microsoftonline.com/common/oauth2/v2.0/authorize&quot;,\n    &quot;TokenEndpoint&quot;: &quot;https://login.microsoftonline.com/common/oauth2/v2.0/token&quot;,\n    &quot;UserApiEndpoint&quot;: &quot;https://graph.microsoft.com/v1.0/me&quot;,\n    &quot;Directory&quot;: &quot;&quot;\n  },\n  \n  &quot;LdapSettings&quot;: {\n    &quot;Enable&quot;: false,\n    &quot;EnableSync&quot;: false,\n    &quot;LdapServer&quot;: &quot;ldap.example.com&quot;,\n    &quot;LdapPort&quot;: 636,\n    &quot;ConnectionSecurity&quot;: &quot;TLS&quot;,\n    &quot;BaseDN&quot;: &quot;DC=example,DC=com&quot;,\n    &quot;BindUsername&quot;: &quot;CN=mattermost,OU=Service Accounts,DC=example,DC=com&quot;,\n    &quot;BindPassword&quot;: &quot;ldap_service_password&quot;,\n    &quot;UserFilter&quot;: &quot;&quot;,\n    &quot;GroupFilter&quot;: &quot;&quot;,\n    &quot;GuestFilter&quot;: &quot;&quot;,\n    &quot;EnableAdminFilter&quot;: true,\n    &quot;AdminFilter&quot;: &quot;(memberOf=CN=Mattermost Admins,OU=Groups,DC=example,DC=com)&quot;,\n    &quot;GroupDisplayNameAttribute&quot;: &quot;cn&quot;,\n    &quot;GroupIdAttribute&quot;: &quot;cn&quot;,\n    &quot;FirstNameAttribute&quot;: &quot;givenName&quot;,\n    &quot;LastNameAttribute&quot;: &quot;sn&quot;,\n    &quot;EmailAttribute&quot;: &quot;mail&quot;,\n    &quot;UsernameAttribute&quot;: &quot;sAMAccountName&quot;,\n    &quot;NicknameAttribute&quot;: &quot;&quot;,\n    &quot;IdAttribute&quot;: &quot;objectGUID&quot;,\n    &quot;PositionAttribute&quot;: &quot;title&quot;,\n    &quot;LoginIdAttribute&quot;: &quot;sAMAccountName&quot;,\n    &quot;PictureAttribute&quot;: &quot;&quot;,\n    &quot;SyncIntervalMinutes&quot;: 60,\n    &quot;SkipCertificateVerification&quot;: false,\n    &quot;PublicCertificateFile&quot;: &quot;&quot;,\n    &quot;PrivateKeyFile&quot;: &quot;&quot;,\n    &quot;QueryTimeout&quot;: 60,\n    &quot;MaxPageSize&quot;: 0,\n    &quot;LoginFieldName&quot;: &quot;&quot;,\n    &quot;LoginButtonColor&quot;: &quot;#0000&quot;,\n    &quot;LoginButtonBorderColor&quot;: &quot;#2389D7&quot;,\n    &quot;LoginButtonTextColor&quot;: &quot;#2389D7&quot;\n  }\n}\nEOF\n\nsudo chown mattermost:mattermost /opt/mattermost/config/config.json\nsudo chmod 600 /opt/mattermost/config/config.json</code></pre>\n      </div>\n    </div>\n<h3 id=\"systemd-service-configuration\" class=\"mobile-header\">SystemD Service Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure systemd service\nsudo tee /etc/systemd/system/mattermost.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=Mattermost Team Communication Service\nAfter=network.target postgresql.service mysql.service\nWants=network.target\n\n[Service]\nType=notify\nUser=mattermost\nGroup=mattermost\nExecStart=/opt/mattermost/bin/mattermost\nWorkingDirectory=/opt/mattermost\nLimitNOFILE=49152\nRestart=always\nRestartSec=10\n\n# Security settings\nNoNewPrivileges=true\nPrivateTmp=true\nPrivateDevices=true\nProtectHome=true\nProtectSystem=strict\nReadWritePaths=/opt/mattermost/data /opt/mattermost/logs /opt/mattermost/config /opt/mattermost/plugins\nProtectKernelTunables=true\nProtectKernelModules=true\nProtectControlGroups=true\n\n# Resource limits\nMemoryMax=4G\nCPUQuota=200%\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl enable --now mattermost\n\n# Verify service status\nsudo systemctl status mattermost</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h2>\n<h3 id=\"nginx-reverse-proxy-with-security\" class=\"mobile-header\">NGINX Reverse Proxy with Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create secure NGINX configuration\nsudo tee /etc/nginx/sites-available/mattermost &gt; /dev/null &lt;&lt;EOF\n# Mattermost NGINX Configuration with Security Headers\n\nupstream mattermost {\n    server 127.0.0.1:8065;\n    keepalive 64;\n}\n\nproxy_cache_path /var/cache/nginx/mattermost levels=1:2 keys_zone=mattermost_cache:10m max_size=3g inactive=120m use_temp_path=off;\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name mattermost.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\n# HTTPS server\nserver {\n    listen 443 ssl http2;\n    server_name mattermost.example.com;\n\n    # SSL configuration\n    ssl_certificate /etc/letsencrypt/live/mattermost.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/mattermost.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n    ssl_session_cache shared:SSL:50m;\n    ssl_session_timeout 1d;\n    ssl_session_tickets off;\n\n    # Security headers\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n    add_header X-Content-Type-Options nosniff always;\n    add_header X-Frame-Options DENY always;\n    add_header X-XSS-Protection &quot;1; mode=block&quot; always;\n    add_header Referrer-Policy &quot;strict-origin-when-cross-origin&quot; always;\n    add_header Content-Security-Policy &quot;frame-ancestors &#039;none&#039;&quot; always;\n\n    # Rate limiting\n    limit_req_zone \\$binary_remote_addr zone=mattermost_ratelimit:10m rate=10r/s;\n    limit_req zone=mattermost_ratelimit burst=20 nodelay;\n\n    # Max upload size for file attachments\n    client_max_body_size 50M;\n\n    location ~ /api/v[0-9]+/(users/)?websocket\\$ {\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        client_max_body_size 50M;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        client_body_timeout 60;\n        send_timeout 300;\n        lingering_timeout 5;\n        proxy_connect_timeout 90;\n        proxy_send_timeout 300;\n        proxy_read_timeout 90s;\n        proxy_pass http://mattermost;\n    }\n\n    location / {\n        client_max_body_size 50M;\n        proxy_set_header Connection &quot;&quot;;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Frame-Options SAMEORIGIN;\n        proxy_buffers 256 16k;\n        proxy_buffer_size 16k;\n        proxy_read_timeout 600s;\n        proxy_cache mattermost_cache;\n        proxy_cache_revalidate on;\n        proxy_cache_min_uses 2;\n        proxy_cache_use_stale timeout;\n        proxy_cache_lock on;\n        proxy_http_version 1.1;\n        proxy_pass http://mattermost;\n    }\n}\nEOF\n\n# Enable site and install SSL\nsudo ln -s /etc/nginx/sites-available/mattermost /etc/nginx/sites-enabled/\nsudo certbot --nginx -d mattermost.example.com\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-security-configuration\" class=\"mobile-header\">Advanced Security Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure fail2ban for Mattermost\nsudo tee /etc/fail2ban/filter.d/mattermost.conf &gt; /dev/null &lt;&lt;EOF\n[Definition]\nfailregex = ^.*&quot;level&quot;:&quot;error&quot;.*&quot;msg&quot;:&quot;Invalid login attempt&quot;.*&quot;user_id&quot;:&quot;[^&quot;]*&quot;.*&quot;ip&quot;:&quot;&lt;HOST&gt;&quot;\nignoreregex =\nEOF\n\nsudo tee /etc/fail2ban/jail.d/mattermost.conf &gt; /dev/null &lt;&lt;EOF\n[mattermost]\nenabled = true\nport = http,https\nfilter = mattermost\nlogpath = /opt/mattermost/logs/mattermost.log\nmaxretry = 5\nbantime = 3600\nfindtime = 600\naction = iptables-multiport[name=Mattermost, port=&quot;http,https&quot;, protocol=tcp]\nEOF\n\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-monitoring\" class=\"mobile-header\">Backup and Monitoring</h2>\n<h3 id=\"backup-strategy\" class=\"mobile-header\">Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/mattermost-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/mattermost&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,config,data,plugins}\n\necho &quot;Starting Mattermost backup...&quot;\n\n# Stop Mattermost service\nsystemctl stop mattermost\n\n# Backup database\nsudo -u postgres pg_dump mattermost &gt; ${BACKUP_DIR}/database/mattermost-${DATE}.sql\ngzip ${BACKUP_DIR}/database/mattermost-${DATE}.sql\n\n# Backup configuration\ncp /opt/mattermost/config/config.json ${BACKUP_DIR}/config/config-${DATE}.json\n\n# Backup user data and files\ntar -czf ${BACKUP_DIR}/data/mattermost-data-${DATE}.tar.gz -C /opt/mattermost data/\n\n# Backup plugins\nif [ -d &quot;/opt/mattermost/plugins&quot; ]; then\n    tar -czf ${BACKUP_DIR}/plugins/mattermost-plugins-${DATE}.tar.gz -C /opt/mattermost plugins/\nfi\n\n# Start Mattermost\nsystemctl start mattermost\n\n# Upload to cloud storage\naws s3 cp ${BACKUP_DIR}/ s3://mattermost-backups/ --recursive\ngsutil cp -r ${BACKUP_DIR}/* gs://mattermost-backups/\n\n# Keep last 7 backups\nfind ${BACKUP_DIR} -name &quot;mattermost-*&quot; -type f -mtime +7 -delete\n\necho &quot;Mattermost backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/mattermost-backup.sh\necho &quot;0 2 * * * root /usr/local/bin/mattermost-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/mattermost-health.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/mattermost-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check service status\nif systemctl is-active mattermost &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ Mattermost service is running&quot;\nelse\n    log_message &quot;âœ— Mattermost service is not running&quot;\n    exit 1\nfi\n\n# Check web interface\nHTTP_STATUS=$(curl -s -o /dev/null -w &quot;%{http_code}&quot; http://localhost:8065/api/v4/system/ping)\nif [ &quot;${HTTP_STATUS}&quot; = &quot;200&quot; ]; then\n    log_message &quot;âœ“ Mattermost API is responding&quot;\nelse\n    log_message &quot;âœ— Mattermost API issues (HTTP ${HTTP_STATUS})&quot;\nfi\n\n# Check database connectivity\nDB_STATUS=$(curl -s http://localhost:8065/api/v4/database/ping | jq -r &#039;.database_status&#039; 2&gt;/dev/null)\nif [ &quot;$DB_STATUS&quot; = &quot;OK&quot; ]; then\n    log_message &quot;âœ“ Database connection healthy&quot;\nelse\n    log_message &quot;âš  Database connection issues&quot;\nfi\n\n# Check disk space\nDISK_USAGE=$(df /opt/mattermost | awk &#039;NR==2 {print $5}&#039; | sed &#039;s/%//&#039;)\nif [ ${DISK_USAGE} -gt 85 ]; then\n    log_message &quot;âš  High disk usage: ${DISK_USAGE}%&quot;\nelse\n    log_message &quot;âœ“ Disk usage: ${DISK_USAGE}%&quot;\nfi\n\nlog_message &quot;Mattermost health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/mattermost-health.sh\necho &quot;*/15 * * * * root /usr/local/bin/mattermost-health.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Mattermost service status\nsudo systemctl status mattermost\nsudo journalctl -u mattermost -f\n\n# Check Mattermost logs\nsudo tail -f /opt/mattermost/logs/mattermost.log\n\n# Test API connectivity\ncurl -i http://localhost:8065/api/v4/system/ping\n\n# Check database connection\nsudo -u postgres psql mattermost -c &quot;SELECT version();&quot;\n\n# Check file permissions\nls -la /opt/mattermost/\nsudo chown -R mattermost:mattermost /opt/mattermost\n\n# Memory usage\nps aux --sort=-%mem | grep mattermost\npmap -x $(pgrep mattermost)\n\n# Network connectivity\nss -tulpn | grep 8065\nnetstat -tulpn | grep mattermost\n\n# Configuration validation\n/opt/mattermost/bin/mattermost config validate\n\n# Reset admin password (CLI)\nsudo -u mattermost /opt/mattermost/bin/mattermost user password admin new_password\n\n# Check plugin status\nsudo -u mattermost /opt/mattermost/bin/mattermost plugin list\n\n# Database migration (if needed)\nsudo -u mattermost /opt/mattermost/bin/mattermost db migrate\n\n# Clear cache\nsudo rm -rf /opt/mattermost/data/cache/*\nsudo systemctl restart mattermost</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mattermost.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Mattermost Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mattermost.com/guides/deployment.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Installation Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mattermost.com/overview/security.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.mattermost.com/guides/administration.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Admin Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://community.mattermost.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Mattermost Community</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"12 min","wordCount":2308,"lastBuilt":"2025-09-16T02:44:05.630Z"},{"name":"rocketchat","displayName":"Rocketchat","slug":"rocketchat","description":"rocketchat is a free and open-source open source team communication platform. Rocket.Chat offers real-time chat, video conferencing, and team collaboration, serving as an alternative to Slack or Microsoft Teams","category":"communication","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/rocketchat","updatedAt":"2025-09-16T02:38:25Z","createdAt":"2025-09-08T03:16:03Z","readmeRaw":"# Rocket.Chat Installation Guide\n\nOpen-source team communication platform with features like real-time messaging, video calls, file sharing, and extensive integrations.\n\n## Prerequisites\n\n- Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)\n- 4GB RAM minimum, 8GB recommended\n- MongoDB 4.4+ or 5.0+\n- Node.js 14.x\n- Domain name (for SSL setup)\n\n## Installation\n\n### Using Docker Compose (Recommended)\n```bash\n# Create project directory\nmkdir -p ~/rocketchat && cd ~/rocketchat\n\n# Create docker-compose.yml\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  rocketchat:\n    image: registry.rocket.chat/rocketchat/rocket.chat:latest\n    restart: unless-stopped\n    environment:\n      MONGO_URL: \"mongodb://mongo:27017/rocketchat?replicaSet=rs0\"\n      MONGO_OPLOG_URL: \"mongodb://mongo:27017/local?replicaSet=rs0\"\n      ROOT_URL: \"https://chat.example.com\"\n      PORT: 3000\n      DEPLOY_METHOD: docker\n      REG_TOKEN: \\${REG_TOKEN}\n    depends_on:\n      - mongo\n    ports:\n      - \"3000:3000\"\n    volumes:\n      - ./uploads:/app/uploads\n    networks:\n      - rocketchat\n\n  mongo:\n    image: docker.io/bitnami/mongodb:5.0\n    restart: unless-stopped\n    environment:\n      MONGODB_REPLICA_SET_MODE: primary\n      MONGODB_REPLICA_SET_NAME: rs0\n      MONGODB_PORT_NUMBER: 27017\n      MONGODB_INITIAL_PRIMARY_HOST: mongo\n      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: 27017\n      MONGODB_ADVERTISED_HOSTNAME: mongo\n      MONGODB_ENABLE_JOURNAL: true\n      ALLOW_EMPTY_PASSWORD: yes\n    volumes:\n      - mongodb_data:/bitnami/mongodb\n    networks:\n      - rocketchat\n\n  mongo-express:\n    image: mongo-express\n    restart: unless-stopped\n    environment:\n      ME_CONFIG_MONGODB_URL: \"mongodb://mongo:27017/\"\n      ME_CONFIG_BASICAUTH_USERNAME: admin\n      ME_CONFIG_BASICAUTH_PASSWORD: pass\n    ports:\n      - \"8081:8081\"\n    depends_on:\n      - mongo\n    networks:\n      - rocketchat\n\nnetworks:\n  rocketchat:\n    driver: bridge\n\nvolumes:\n  mongodb_data:\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f rocketchat\n```\n\n### Manual Installation (Ubuntu/Debian)\n\n#### MongoDB Setup\n```bash\n# Install MongoDB\nwget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -\necho \"deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse\" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list\n\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Configure MongoDB as replica set\nsudo systemctl enable --now mongod\n\n# Initialize replica set\nmongo --eval \"rs.initiate({_id: 'rs0', members: [{_id: 0, host: 'localhost:27017'}]})\"\n\n# Create Rocket.Chat database user\nmongo rocketchat --eval \"db.createUser({user: 'rocketchat', pwd: 'secure_password', roles: [{role: 'readWrite', db: 'rocketchat'}]})\"\n```\n\n#### Node.js and Rocket.Chat Setup\n```bash\n# Install Node.js 14.x\ncurl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Create rocketchat user\nsudo useradd -m -s /bin/bash rocketchat\n\n# Download and install Rocket.Chat\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\n\n# Install dependencies\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\n\n# Set environment variables\nsudo tee /etc/systemd/system/rocketchat.service > /dev/null <<EOF\n[Unit]\nDescription=The Rocket.Chat server\nAfter=network.target remote-fs.target nss-lookup.target nginx.service mongod.service\nWants=network.target\n\n[Service]\nExecStart=/usr/local/bin/node /opt/Rocket.Chat/main.js\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=rocketchat\nUser=rocketchat\nGroup=rocketchat\nEnvironment=MONGO_URL=mongodb://rocketchat:secure_password@localhost:27017/rocketchat?authSource=rocketchat&replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://rocketchat:secure_password@localhost:27017/local?authSource=admin&replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now rocketchat\n```\n\n### Snap Installation (Easiest)\n```bash\n# Install Rocket.Chat via snap\nsudo snap install rocketchat-server\n\n# Configure\nsudo snap set rocketchat-server mongodb-url=\"mongodb://localhost:27017/parties\"\nsudo snap set rocketchat-server root-url=\"https://chat.example.com\"\nsudo snap set rocketchat-server port=3000\n\n# Start service\nsudo systemctl enable --now snap.rocketchat-server.rocketchat-server\n```\n\n## Configuration\n\n### NGINX Reverse Proxy\n```bash\n# Create NGINX configuration\nsudo tee /etc/nginx/sites-available/rocketchat > /dev/null <<EOF\n# Upstreams\nupstream backend {\n    server 127.0.0.1:3000;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    server_name chat.example.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/letsencrypt/live/chat.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/chat.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header X-Frame-Options \"SAMEORIGIN\";\n    add_header X-XSS-Protection \"1; mode=block\";\n    add_header X-Content-Type-Options \"nosniff\";\n    add_header Referrer-Policy \"no-referrer-when-downgrade\";\n    add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;\n\n    # Proxy settings\n    location / {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_redirect off;\n    }\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name chat.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/rocketchat /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl restart nginx\n```\n\n### SSL Certificate Setup\n```bash\n# Install Certbot\nsudo apt install -y certbot python3-certbot-nginx\n\n# Obtain SSL certificate\nsudo certbot --nginx -d chat.example.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet && systemctl reload nginx\n```\n\n### Database Optimization\n```bash\n# MongoDB tuning for Rocket.Chat\nsudo tee -a /etc/mongod.conf > /dev/null <<EOF\n\n# Performance tuning\nstorage:\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 2\n\n# Replica set configuration\nreplication:\n  replSetName: rs0\n\n# Security\nsecurity:\n  authorization: enabled\n\n# Networking\nnet:\n  bindIp: 127.0.0.1\n  port: 27017\nEOF\n\nsudo systemctl restart mongod\n\n# Create indexes for better performance\nmongo rocketchat --eval \"\ndb.users.createIndex({'username': 1}, {background: true});\ndb.users.createIndex({'emails.address': 1}, {background: true});\ndb.rocketchat_room.createIndex({'name': 1}, {background: true});\ndb.rocketchat_message.createIndex({'rid': 1, 'ts': 1}, {background: true});\n\"\n```\n\n## Administration\n\n### User Management via API\n```bash\n# Get auth token (login as admin first)\ncurl -H \"Content-type:application/json\" \\\n     http://localhost:3000/api/v1/login \\\n     -d '{\"user\":\"admin\", \"password\":\"admin_password\"}'\n\n# Create user via API\ncurl -H \"Content-type:application/json\" \\\n     -H \"X-Auth-Token: AUTH_TOKEN\" \\\n     -H \"X-User-Id: USER_ID\" \\\n     http://localhost:3000/api/v1/users.create \\\n     -d '{\"name\":\"New User\", \"email\":\"user@example.com\", \"password\":\"user_password\", \"username\":\"newuser\"}'\n\n# Create channel\ncurl -H \"Content-type:application/json\" \\\n     -H \"X-Auth-Token: AUTH_TOKEN\" \\\n     -H \"X-User-Id: USER_ID\" \\\n     http://localhost:3000/api/v1/channels.create \\\n     -d '{\"name\":\"general\"}'\n```\n\n### Backup and Restore\n```bash\n# Create backup script\nsudo tee /usr/local/bin/rocketchat-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/rocketchat\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,uploads}\n\n# Backup MongoDB database\nmongodump --host localhost:27017 --db rocketchat --out ${BACKUP_DIR}/database/mongodb-${DATE}\ntar -czf ${BACKUP_DIR}/database/rocketchat-db-${DATE}.tar.gz -C ${BACKUP_DIR}/database mongodb-${DATE}\nrm -rf ${BACKUP_DIR}/database/mongodb-${DATE}\n\n# Backup uploads directory\ntar -czf ${BACKUP_DIR}/uploads/rocketchat-uploads-${DATE}.tar.gz -C /opt/Rocket.Chat uploads\n\n# Docker backup (if using Docker)\nif command -v docker &> /dev/null; then\n    docker-compose exec mongo mongodump --archive=/tmp/rocketchat-backup.archive --db=rocketchat\n    docker cp rocketchat_mongo_1:/tmp/rocketchat-backup.archive ${BACKUP_DIR}/database/rocketchat-docker-${DATE}.archive\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name \"rocketchat-*\" -type f -mtime +7 -delete\n\necho \"Backup completed: rocketchat-${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/rocketchat-backup.sh\n```\n\n### Performance Optimization\n```bash\n# Configure Node.js for production\nsudo tee -a /etc/systemd/system/rocketchat.service > /dev/null <<EOF\nEnvironment=NODE_ENV=production\nEnvironment=MONGO_URL=mongodb://localhost:27017/rocketchat?replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://localhost:27017/local?replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\nEnvironment=Accounts_AvatarResize=true\nEnvironment=INSTANCE_IP=127.0.0.1\nEOF\n\n# Restart service\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat\n```\n\n## Integrations\n\n### LDAP/Active Directory Integration\n```bash\n# Configure LDAP via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service > /dev/null <<EOF\nEnvironment=LDAP_ENABLE=true\nEnvironment=LDAP_HOST=ldap.example.com\nEnvironment=LDAP_PORT=389\nEnvironment=LDAP_ENCRYPTION=false\nEnvironment=LDAP_AUTHENTICATION=true\nEnvironment=LDAP_AUTHENTICATION_UserDN=cn=admin,dc=example,dc=com\nEnvironment=LDAP_AUTHENTICATION_Password=ldap_password\nEnvironment=LDAP_USER_SEARCH_FILTER=(objectclass=person)\nEnvironment=LDAP_USER_SEARCH_SCOPE=sub\nEnvironment=LDAP_USER_SEARCH_FIELD=sAMAccountName\nEnvironment=LDAP_SEARCH_PAGE_SIZE=250\nEnvironment=LDAP_SEARCH_SIZE_LIMIT=1000\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat\n```\n\n### Webhook Integrations\n```bash\n# Create incoming webhook\ncurl -H \"Content-type:application/json\" \\\n     -H \"X-Auth-Token: AUTH_TOKEN\" \\\n     -H \"X-User-Id: USER_ID\" \\\n     http://localhost:3000/api/v1/integrations.create \\\n     -d '{\n       \"type\": \"webhook-incoming\",\n       \"name\": \"webhook-name\",\n       \"enabled\": true,\n       \"username\": \"webhook\",\n       \"channel\": \"#general\"\n     }'\n\n# Test webhook\ncurl -X POST \\\n     -H \"Content-type:application/json\" \\\n     https://chat.example.com/hooks/WEBHOOK_TOKEN \\\n     -d '{\"text\":\"Hello from external system!\"}'\n```\n\n### Email Configuration\n```bash\n# Configure SMTP settings via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service > /dev/null <<EOF\nEnvironment=MAIL_URL=smtps://smtp.gmail.com:465\nEnvironment=MAIL_FROM=noreply@example.com\nEnvironment=SMTP_Username=your-email@gmail.com\nEnvironment=SMTP_Password=your-app-password\nEnvironment=SMTP_Host=smtp.gmail.com\nEnvironment=SMTP_Port=587\nEnvironment=SMTP_IgnoreTLS=false\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat\n```\n\n## Security Configuration\n\n### Firewall Setup\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow 3000/tcp   # Rocket.Chat\nsudo ufw allow 27017/tcp  # MongoDB (restrict to localhost in production)\nsudo ufw allow 'Nginx Full'\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload\n```\n\n### Security Hardening\n```bash\n# MongoDB security\nsudo tee -a /etc/mongod.conf > /dev/null <<EOF\n\n# Enable authentication\nsecurity:\n  authorization: enabled\n\n# Bind to localhost only\nnet:\n  bindIp: 127.0.0.1\nEOF\n\n# Create MongoDB admin user\nmongo admin --eval \"\ndb.createUser({\n  user: 'admin',\n  pwd: 'secure_password',\n  roles: [{role: 'userAdminAnyDatabase', db: 'admin'}]\n});\n\ndb.createUser({\n  user: 'rocketchat',\n  pwd: 'rocketchat_password',\n  roles: [{role: 'readWrite', db: 'rocketchat'}]\n});\n\"\n\nsudo systemctl restart mongod\n\n# Update Rocket.Chat MongoDB URL with authentication\nsudo sed -i 's|MONGO_URL=.*|MONGO_URL=mongodb://rocketchat:rocketchat_password@localhost:27017/rocketchat?authSource=rocketchat&replicaSet=rs0|' /etc/systemd/system/rocketchat.service\n```\n\n## High Availability Setup\n\n### Load Balancer Configuration\n```bash\n# HAProxy configuration for Rocket.Chat cluster\nsudo tee -a /etc/haproxy/haproxy.cfg > /dev/null <<EOF\n\n# Rocket.Chat frontend\nfrontend rocketchat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/chat.example.com.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rocketchat_servers\n\n# Rocket.Chat backend\nbackend rocketchat_servers\n    balance roundrobin\n    option httpchk GET /api/info\n    http-check expect status 200\n    \n    # WebSocket support\n    timeout tunnel 3600s\n    \n    server chat1 192.168.1.10:3000 check\n    server chat2 192.168.1.11:3000 check\n    server chat3 192.168.1.12:3000 check\nEOF\n\nsudo systemctl restart haproxy\n```\n\n### MongoDB Replica Set (Multi-node)\n```bash\n# On each MongoDB node, configure replica set\nsudo tee -a /etc/mongod.conf > /dev/null <<EOF\nreplication:\n  replSetName: rs0\n  \nnet:\n  bindIp: 0.0.0.0  # Allow connections from other nodes\nEOF\n\nsudo systemctl restart mongod\n\n# Initialize replica set (run on primary node only)\nmongo --eval \"\nrs.initiate({\n  _id: 'rs0',\n  members: [\n    {_id: 0, host: 'mongo1.example.com:27017', priority: 2},\n    {_id: 1, host: 'mongo2.example.com:27017', priority: 1},\n    {_id: 2, host: 'mongo3.example.com:27017', priority: 1, arbiterOnly: true}\n  ]\n});\n\"\n\n# Update Rocket.Chat MongoDB URL for replica set\nEnvironment=MONGO_URL=mongodb://mongo1.example.com:27017,mongo2.example.com:27017,mongo3.example.com:27017/rocketchat?replicaSet=rs0\n```\n\n## Verification\n\n```bash\n# Check service status\nsudo systemctl status rocketchat\nsudo systemctl status mongod\n\n# Docker verification\ndocker-compose ps\ndocker-compose logs rocketchat\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check MongoDB connection\nmongo --eval \"db.runCommand('ping')\"\n\n# Test API endpoint\ncurl http://localhost:3000/api/info\n\n# Check logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f  # For Docker installation\n\n# Check memory usage\nps aux | grep -E \"(rocket|mongo)\"\ndocker stats  # For Docker installation\n\n# Test webhooks\ncurl -X POST https://chat.example.com/hooks/YOUR_WEBHOOK_TOKEN \\\n     -H \"Content-type:application/json\" \\\n     -d '{\"text\":\"Test message from API\"}'\n```\n\n## Maintenance and Updates\n\n### Update Rocket.Chat\n```bash\n# Manual installation update\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo systemctl stop rocketchat\nsudo mv Rocket.Chat Rocket.Chat.backup\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\nsudo systemctl start rocketchat\n\n# Docker update\ncd ~/rocketchat\ndocker-compose pull\ndocker-compose up -d\n\n# Snap update\nsudo snap refresh rocketchat-server\n```\n\n### Database Maintenance\n```bash\n# MongoDB maintenance commands\nmongo rocketchat --eval \"db.stats()\"\nmongo rocketchat --eval \"db.runCommand({compact: 'rocketchat_message'})\"\n\n# Clean up old messages (optional)\nmongo rocketchat --eval \"\nvar cutoff = new Date();\ncutoff.setDate(cutoff.getDate() - 90);  // Keep 90 days\ndb.rocketchat_message.deleteMany({'ts': {\\$lt: cutoff}});\n\"\n\n# Repair database if needed\nmongod --repair --dbpath /var/lib/mongodb\n```\n\n## Troubleshooting\n\n```bash\n# Check Rocket.Chat logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f rocketchat  # Docker\n\n# Check MongoDB logs\nsudo journalctl -u mongod -f\ndocker-compose logs -f mongo  # Docker\n\n# Test MongoDB replica set status\nmongo --eval \"rs.status()\"\n\n# Check Node.js processes\nps aux | grep node\n\n# Test database connectivity\nmongo rocketchat --eval \"db.runCommand('ping')\"\n\n# Check disk space\ndf -h /opt/Rocket.Chat\ndf -h /var/lib/mongodb\n\n# Memory usage analysis\nfree -h\ntop -p $(pgrep -d',' node)\n\n# Network connectivity test\ntelnet localhost 3000\ntelnet localhost 27017\n\n# Check environment variables\nsudo systemctl show rocketchat --property=Environment\n\n# Reset admin password (emergency)\nmongo rocketchat --eval \"\ndb.users.update(\n  {username: 'admin'},\n  {\\$set: {'services.password.bcrypt': '\\$2a\\$10\\$n9CM8OgInDlwpvjLKLPML.eizXIzLlRtgCh3GRLafOdR9ldAUh/KG'}}  // password: admin\n);\n\"\n```\n\n## Additional Resources\n\n- [Official Documentation](https://docs.rocket.chat/)\n- [Administrator Guide](https://docs.rocket.chat/setup-and-configure/environment-configuration)\n- [API Documentation](https://developer.rocket.chat/reference/api)\n- [Community Forum](https://forums.rocket.chat/)\n- [GitHub Repository](https://github.com/RocketChat/Rocket.Chat)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"rocketchat-installation-guide\" class=\"mobile-header\">Rocket.Chat Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source team communication platform with features like real-time messaging, video calls, file sharing, and extensive integrations.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (Ubuntu/Debian, RHEL/CentOS, or compatible)</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB recommended</li>\n<li class=\"mobile-list-item\">MongoDB 4.4+ or 5.0+</li>\n<li class=\"mobile-list-item\">Node.js 14.x</li>\n<li class=\"mobile-list-item\">Domain name (for SSL setup)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-docker-compose-recommended\" class=\"mobile-header\">Using Docker Compose (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create project directory\nmkdir -p ~/rocketchat &amp;&amp; cd ~/rocketchat\n\n# Create docker-compose.yml\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  rocketchat:\n    image: registry.rocket.chat/rocketchat/rocket.chat:latest\n    restart: unless-stopped\n    environment:\n      MONGO_URL: &quot;mongodb://mongo:27017/rocketchat?replicaSet=rs0&quot;\n      MONGO_OPLOG_URL: &quot;mongodb://mongo:27017/local?replicaSet=rs0&quot;\n      ROOT_URL: &quot;https://chat.example.com&quot;\n      PORT: 3000\n      DEPLOY_METHOD: docker\n      REG_TOKEN: \\${REG_TOKEN}\n    depends_on:\n      - mongo\n    ports:\n      - &quot;3000:3000&quot;\n    volumes:\n      - ./uploads:/app/uploads\n    networks:\n      - rocketchat\n\n  mongo:\n    image: docker.io/bitnami/mongodb:5.0\n    restart: unless-stopped\n    environment:\n      MONGODB_REPLICA_SET_MODE: primary\n      MONGODB_REPLICA_SET_NAME: rs0\n      MONGODB_PORT_NUMBER: 27017\n      MONGODB_INITIAL_PRIMARY_HOST: mongo\n      MONGODB_INITIAL_PRIMARY_PORT_NUMBER: 27017\n      MONGODB_ADVERTISED_HOSTNAME: mongo\n      MONGODB_ENABLE_JOURNAL: true\n      ALLOW_EMPTY_PASSWORD: yes\n    volumes:\n      - mongodb_data:/bitnami/mongodb\n    networks:\n      - rocketchat\n\n  mongo-express:\n    image: mongo-express\n    restart: unless-stopped\n    environment:\n      ME_CONFIG_MONGODB_URL: &quot;mongodb://mongo:27017/&quot;\n      ME_CONFIG_BASICAUTH_USERNAME: admin\n      ME_CONFIG_BASICAUTH_PASSWORD: pass\n    ports:\n      - &quot;8081:8081&quot;\n    depends_on:\n      - mongo\n    networks:\n      - rocketchat\n\nnetworks:\n  rocketchat:\n    driver: bridge\n\nvolumes:\n  mongodb_data:\nEOF\n\n# Start services\ndocker-compose up -d\n\n# Check logs\ndocker-compose logs -f rocketchat</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-installation-ubuntudebian\" class=\"mobile-header\">Manual Installation (Ubuntu/Debian)</h3>\n<p class=\"mobile-paragraph\">#### MongoDB Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MongoDB\nwget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -\necho &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list\n\nsudo apt update\nsudo apt install -y mongodb-org\n\n# Configure MongoDB as replica set\nsudo systemctl enable --now mongod\n\n# Initialize replica set\nmongo --eval &quot;rs.initiate({_id: &#039;rs0&#039;, members: [{_id: 0, host: &#039;localhost:27017&#039;}]})&quot;\n\n# Create Rocket.Chat database user\nmongo rocketchat --eval &quot;db.createUser({user: &#039;rocketchat&#039;, pwd: &#039;secure_password&#039;, roles: [{role: &#039;readWrite&#039;, db: &#039;rocketchat&#039;}]})&quot;</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Node.js and Rocket.Chat Setup</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Node.js 14.x\ncurl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -\nsudo apt install -y nodejs\n\n# Create rocketchat user\nsudo useradd -m -s /bin/bash rocketchat\n\n# Download and install Rocket.Chat\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\n\n# Install dependencies\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\n\n# Set environment variables\nsudo tee /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=The Rocket.Chat server\nAfter=network.target remote-fs.target nss-lookup.target nginx.service mongod.service\nWants=network.target\n\n[Service]\nExecStart=/usr/local/bin/node /opt/Rocket.Chat/main.js\nStandardOutput=syslog\nStandardError=syslog\nSyslogIdentifier=rocketchat\nUser=rocketchat\nGroup=rocketchat\nEnvironment=MONGO_URL=mongodb://rocketchat:secure_password@localhost:27017/rocketchat?authSource=rocketchat&amp;replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://rocketchat:secure_password@localhost:27017/local?authSource=admin&amp;replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Enable and start service\nsudo systemctl daemon-reload\nsudo systemctl enable --now rocketchat</code></pre>\n      </div>\n    </div>\n<h3 id=\"snap-installation-easiest\" class=\"mobile-header\">Snap Installation (Easiest)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Rocket.Chat via snap\nsudo snap install rocketchat-server\n\n# Configure\nsudo snap set rocketchat-server mongodb-url=&quot;mongodb://localhost:27017/parties&quot;\nsudo snap set rocketchat-server root-url=&quot;https://chat.example.com&quot;\nsudo snap set rocketchat-server port=3000\n\n# Start service\nsudo systemctl enable --now snap.rocketchat-server.rocketchat-server</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"nginx-reverse-proxy\" class=\"mobile-header\">NGINX Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create NGINX configuration\nsudo tee /etc/nginx/sites-available/rocketchat &gt; /dev/null &lt;&lt;EOF\n# Upstreams\nupstream backend {\n    server 127.0.0.1:3000;\n}\n\n# HTTPS Server\nserver {\n    listen 443 ssl http2;\n    server_name chat.example.com;\n\n    # SSL Configuration\n    ssl_certificate /etc/letsencrypt/live/chat.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/chat.example.com/privkey.pem;\n    ssl_protocols TLSv1.2 TLSv1.3;\n    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;\n    ssl_prefer_server_ciphers off;\n\n    # Security headers\n    add_header X-Frame-Options &quot;SAMEORIGIN&quot;;\n    add_header X-XSS-Protection &quot;1; mode=block&quot;;\n    add_header X-Content-Type-Options &quot;nosniff&quot;;\n    add_header Referrer-Policy &quot;no-referrer-when-downgrade&quot;;\n    add_header Strict-Transport-Security &quot;max-age=31536000; includeSubDomains&quot; always;\n\n    # Proxy settings\n    location / {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n        proxy_set_header Host \\$http_host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header X-Nginx-Proxy true;\n\n        proxy_redirect off;\n    }\n}\n\n# HTTP to HTTPS redirect\nserver {\n    listen 80;\n    server_name chat.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\nEOF\n\n# Enable site\nsudo ln -s /etc/nginx/sites-available/rocketchat /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl restart nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"ssl-certificate-setup\" class=\"mobile-header\">SSL Certificate Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install Certbot\nsudo apt install -y certbot python3-certbot-nginx\n\n# Obtain SSL certificate\nsudo certbot --nginx -d chat.example.com\n\n# Auto-renewal\nsudo crontab -e\n# Add: 0 12 * * * /usr/bin/certbot renew --quiet &amp;&amp; systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-optimization\" class=\"mobile-header\">Database Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB tuning for Rocket.Chat\nsudo tee -a /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\n\n# Performance tuning\nstorage:\n  wiredTiger:\n    engineConfig:\n      cacheSizeGB: 2\n\n# Replica set configuration\nreplication:\n  replSetName: rs0\n\n# Security\nsecurity:\n  authorization: enabled\n\n# Networking\nnet:\n  bindIp: 127.0.0.1\n  port: 27017\nEOF\n\nsudo systemctl restart mongod\n\n# Create indexes for better performance\nmongo rocketchat --eval &quot;\ndb.users.createIndex({&#039;username&#039;: 1}, {background: true});\ndb.users.createIndex({&#039;emails.address&#039;: 1}, {background: true});\ndb.rocketchat_room.createIndex({&#039;name&#039;: 1}, {background: true});\ndb.rocketchat_message.createIndex({&#039;rid&#039;: 1, &#039;ts&#039;: 1}, {background: true});\n&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"administration\" class=\"mobile-header\">Administration</h2>\n<h3 id=\"user-management-via-api\" class=\"mobile-header\">User Management via API</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Get auth token (login as admin first)\ncurl -H &quot;Content-type:application/json&quot; \\\n     http://localhost:3000/api/v1/login \\\n     -d &#039;{&quot;user&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;admin_password&quot;}&#039;\n\n# Create user via API\ncurl -H &quot;Content-type:application/json&quot; \\\n     -H &quot;X-Auth-Token: AUTH_TOKEN&quot; \\\n     -H &quot;X-User-Id: USER_ID&quot; \\\n     http://localhost:3000/api/v1/users.create \\\n     -d &#039;{&quot;name&quot;:&quot;New User&quot;, &quot;email&quot;:&quot;user@example.com&quot;, &quot;password&quot;:&quot;user_password&quot;, &quot;username&quot;:&quot;newuser&quot;}&#039;\n\n# Create channel\ncurl -H &quot;Content-type:application/json&quot; \\\n     -H &quot;X-Auth-Token: AUTH_TOKEN&quot; \\\n     -H &quot;X-User-Id: USER_ID&quot; \\\n     http://localhost:3000/api/v1/channels.create \\\n     -d &#039;{&quot;name&quot;:&quot;general&quot;}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create backup script\nsudo tee /usr/local/bin/rocketchat-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/rocketchat&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{database,uploads}\n\n# Backup MongoDB database\nmongodump --host localhost:27017 --db rocketchat --out ${BACKUP_DIR}/database/mongodb-${DATE}\ntar -czf ${BACKUP_DIR}/database/rocketchat-db-${DATE}.tar.gz -C ${BACKUP_DIR}/database mongodb-${DATE}\nrm -rf ${BACKUP_DIR}/database/mongodb-${DATE}\n\n# Backup uploads directory\ntar -czf ${BACKUP_DIR}/uploads/rocketchat-uploads-${DATE}.tar.gz -C /opt/Rocket.Chat uploads\n\n# Docker backup (if using Docker)\nif command -v docker &amp;&gt; /dev/null; then\n    docker-compose exec mongo mongodump --archive=/tmp/rocketchat-backup.archive --db=rocketchat\n    docker cp rocketchat_mongo_1:/tmp/rocketchat-backup.archive ${BACKUP_DIR}/database/rocketchat-docker-${DATE}.archive\nfi\n\n# Keep only last 7 backups\nfind ${BACKUP_DIR} -name &quot;rocketchat-*&quot; -type f -mtime +7 -delete\n\necho &quot;Backup completed: rocketchat-${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/rocketchat-backup.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure Node.js for production\nsudo tee -a /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\nEnvironment=NODE_ENV=production\nEnvironment=MONGO_URL=mongodb://localhost:27017/rocketchat?replicaSet=rs0\nEnvironment=MONGO_OPLOG_URL=mongodb://localhost:27017/local?replicaSet=rs0\nEnvironment=ROOT_URL=https://chat.example.com\nEnvironment=PORT=3000\nEnvironment=Accounts_AvatarResize=true\nEnvironment=INSTANCE_IP=127.0.0.1\nEOF\n\n# Restart service\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat</code></pre>\n      </div>\n    </div>\n<h2 id=\"integrations\" class=\"mobile-header\">Integrations</h2>\n<h3 id=\"ldapactive-directory-integration\" class=\"mobile-header\">LDAP/Active Directory Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure LDAP via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\nEnvironment=LDAP_ENABLE=true\nEnvironment=LDAP_HOST=ldap.example.com\nEnvironment=LDAP_PORT=389\nEnvironment=LDAP_ENCRYPTION=false\nEnvironment=LDAP_AUTHENTICATION=true\nEnvironment=LDAP_AUTHENTICATION_UserDN=cn=admin,dc=example,dc=com\nEnvironment=LDAP_AUTHENTICATION_Password=ldap_password\nEnvironment=LDAP_USER_SEARCH_FILTER=(objectclass=person)\nEnvironment=LDAP_USER_SEARCH_SCOPE=sub\nEnvironment=LDAP_USER_SEARCH_FIELD=sAMAccountName\nEnvironment=LDAP_SEARCH_PAGE_SIZE=250\nEnvironment=LDAP_SEARCH_SIZE_LIMIT=1000\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat</code></pre>\n      </div>\n    </div>\n<h3 id=\"webhook-integrations\" class=\"mobile-header\">Webhook Integrations</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create incoming webhook\ncurl -H &quot;Content-type:application/json&quot; \\\n     -H &quot;X-Auth-Token: AUTH_TOKEN&quot; \\\n     -H &quot;X-User-Id: USER_ID&quot; \\\n     http://localhost:3000/api/v1/integrations.create \\\n     -d &#039;{\n       &quot;type&quot;: &quot;webhook-incoming&quot;,\n       &quot;name&quot;: &quot;webhook-name&quot;,\n       &quot;enabled&quot;: true,\n       &quot;username&quot;: &quot;webhook&quot;,\n       &quot;channel&quot;: &quot;#general&quot;\n     }&#039;\n\n# Test webhook\ncurl -X POST \\\n     -H &quot;Content-type:application/json&quot; \\\n     https://chat.example.com/hooks/WEBHOOK_TOKEN \\\n     -d &#039;{&quot;text&quot;:&quot;Hello from external system!&quot;}&#039;</code></pre>\n      </div>\n    </div>\n<h3 id=\"email-configuration\" class=\"mobile-header\">Email Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure SMTP settings via environment variables\nsudo tee -a /etc/systemd/system/rocketchat.service &gt; /dev/null &lt;&lt;EOF\nEnvironment=MAIL_URL=smtps://smtp.gmail.com:465\nEnvironment=MAIL_FROM=noreply@example.com\nEnvironment=SMTP_Username=your-email@gmail.com\nEnvironment=SMTP_Password=your-app-password\nEnvironment=SMTP_Host=smtp.gmail.com\nEnvironment=SMTP_Port=587\nEnvironment=SMTP_IgnoreTLS=false\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart rocketchat</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"firewall-setup\" class=\"mobile-header\">Firewall Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow 3000/tcp   # Rocket.Chat\nsudo ufw allow 27017/tcp  # MongoDB (restrict to localhost in production)\nsudo ufw allow &#039;Nginx Full&#039;\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=3000/tcp\nsudo firewall-cmd --permanent --add-service=http\nsudo firewall-cmd --permanent --add-service=https\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB security\nsudo tee -a /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\n\n# Enable authentication\nsecurity:\n  authorization: enabled\n\n# Bind to localhost only\nnet:\n  bindIp: 127.0.0.1\nEOF\n\n# Create MongoDB admin user\nmongo admin --eval &quot;\ndb.createUser({\n  user: &#039;admin&#039;,\n  pwd: &#039;secure_password&#039;,\n  roles: [{role: &#039;userAdminAnyDatabase&#039;, db: &#039;admin&#039;}]\n});\n\ndb.createUser({\n  user: &#039;rocketchat&#039;,\n  pwd: &#039;rocketchat_password&#039;,\n  roles: [{role: &#039;readWrite&#039;, db: &#039;rocketchat&#039;}]\n});\n&quot;\n\nsudo systemctl restart mongod\n\n# Update Rocket.Chat MongoDB URL with authentication\nsudo sed -i &#039;s|MONGO_URL=.*|MONGO_URL=mongodb://rocketchat:rocketchat_password@localhost:27017/rocketchat?authSource=rocketchat&amp;replicaSet=rs0|&#039; /etc/systemd/system/rocketchat.service</code></pre>\n      </div>\n    </div>\n<h2 id=\"high-availability-setup\" class=\"mobile-header\">High Availability Setup</h2>\n<h3 id=\"load-balancer-configuration\" class=\"mobile-header\">Load Balancer Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># HAProxy configuration for Rocket.Chat cluster\nsudo tee -a /etc/haproxy/haproxy.cfg &gt; /dev/null &lt;&lt;EOF\n\n# Rocket.Chat frontend\nfrontend rocketchat_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/chat.example.com.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend rocketchat_servers\n\n# Rocket.Chat backend\nbackend rocketchat_servers\n    balance roundrobin\n    option httpchk GET /api/info\n    http-check expect status 200\n    \n    # WebSocket support\n    timeout tunnel 3600s\n    \n    server chat1 192.168.1.10:3000 check\n    server chat2 192.168.1.11:3000 check\n    server chat3 192.168.1.12:3000 check\nEOF\n\nsudo systemctl restart haproxy</code></pre>\n      </div>\n    </div>\n<h3 id=\"mongodb-replica-set-multi-node\" class=\"mobile-header\">MongoDB Replica Set (Multi-node)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># On each MongoDB node, configure replica set\nsudo tee -a /etc/mongod.conf &gt; /dev/null &lt;&lt;EOF\nreplication:\n  replSetName: rs0\n  \nnet:\n  bindIp: 0.0.0.0  # Allow connections from other nodes\nEOF\n\nsudo systemctl restart mongod\n\n# Initialize replica set (run on primary node only)\nmongo --eval &quot;\nrs.initiate({\n  _id: &#039;rs0&#039;,\n  members: [\n    {_id: 0, host: &#039;mongo1.example.com:27017&#039;, priority: 2},\n    {_id: 1, host: &#039;mongo2.example.com:27017&#039;, priority: 1},\n    {_id: 2, host: &#039;mongo3.example.com:27017&#039;, priority: 1, arbiterOnly: true}\n  ]\n});\n&quot;\n\n# Update Rocket.Chat MongoDB URL for replica set\nEnvironment=MONGO_URL=mongodb://mongo1.example.com:27017,mongo2.example.com:27017,mongo3.example.com:27017/rocketchat?replicaSet=rs0</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification\" class=\"mobile-header\">Verification</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status rocketchat\nsudo systemctl status mongod\n\n# Docker verification\ndocker-compose ps\ndocker-compose logs rocketchat\n\n# Test web interface\ncurl -I http://localhost:3000\n\n# Check MongoDB connection\nmongo --eval &quot;db.runCommand(&#039;ping&#039;)&quot;\n\n# Test API endpoint\ncurl http://localhost:3000/api/info\n\n# Check logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f  # For Docker installation\n\n# Check memory usage\nps aux | grep -E &quot;(rocket|mongo)&quot;\ndocker stats  # For Docker installation\n\n# Test webhooks\ncurl -X POST https://chat.example.com/hooks/YOUR_WEBHOOK_TOKEN \\\n     -H &quot;Content-type:application/json&quot; \\\n     -d &#039;{&quot;text&quot;:&quot;Test message from API&quot;}&#039;</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance-and-updates\" class=\"mobile-header\">Maintenance and Updates</h2>\n<h3 id=\"update-rocketchat\" class=\"mobile-header\">Update Rocket.Chat</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Manual installation update\ncd /opt\nsudo wget https://releases.rocket.chat/latest/download -O rocket.chat.tgz\nsudo systemctl stop rocketchat\nsudo mv Rocket.Chat Rocket.Chat.backup\nsudo tar -xzf rocket.chat.tgz\nsudo mv bundle Rocket.Chat\nsudo chown -R rocketchat:rocketchat /opt/Rocket.Chat\ncd /opt/Rocket.Chat/programs/server\nsudo -u rocketchat npm install\nsudo systemctl start rocketchat\n\n# Docker update\ncd ~/rocketchat\ndocker-compose pull\ndocker-compose up -d\n\n# Snap update\nsudo snap refresh rocketchat-server</code></pre>\n      </div>\n    </div>\n<h3 id=\"database-maintenance\" class=\"mobile-header\">Database Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># MongoDB maintenance commands\nmongo rocketchat --eval &quot;db.stats()&quot;\nmongo rocketchat --eval &quot;db.runCommand({compact: &#039;rocketchat_message&#039;})&quot;\n\n# Clean up old messages (optional)\nmongo rocketchat --eval &quot;\nvar cutoff = new Date();\ncutoff.setDate(cutoff.getDate() - 90);  // Keep 90 days\ndb.rocketchat_message.deleteMany({&#039;ts&#039;: {\\$lt: cutoff}});\n&quot;\n\n# Repair database if needed\nmongod --repair --dbpath /var/lib/mongodb</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Rocket.Chat logs\nsudo journalctl -u rocketchat -f\ndocker-compose logs -f rocketchat  # Docker\n\n# Check MongoDB logs\nsudo journalctl -u mongod -f\ndocker-compose logs -f mongo  # Docker\n\n# Test MongoDB replica set status\nmongo --eval &quot;rs.status()&quot;\n\n# Check Node.js processes\nps aux | grep node\n\n# Test database connectivity\nmongo rocketchat --eval &quot;db.runCommand(&#039;ping&#039;)&quot;\n\n# Check disk space\ndf -h /opt/Rocket.Chat\ndf -h /var/lib/mongodb\n\n# Memory usage analysis\nfree -h\ntop -p $(pgrep -d&#039;,&#039; node)\n\n# Network connectivity test\ntelnet localhost 3000\ntelnet localhost 27017\n\n# Check environment variables\nsudo systemctl show rocketchat --property=Environment\n\n# Reset admin password (emergency)\nmongo rocketchat --eval &quot;\ndb.users.update(\n  {username: &#039;admin&#039;},\n  {\\$set: {&#039;services.password.bcrypt&#039;: &#039;\\$2a\\$10\\$n9CM8OgInDlwpvjLKLPML.eizXIzLlRtgCh3GRLafOdR9ldAUh/KG&#039;}}  // password: admin\n);\n&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.rocket.chat/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://docs.rocket.chat/setup-and-configure/environment-configuration\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Administrator Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://developer.rocket.chat/reference/api\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">API Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forums.rocket.chat/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/RocketChat/Rocket.Chat\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">GitHub Repository</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"9 min","wordCount":1673,"lastBuilt":"2025-09-16T02:43:58.304Z"}]},"__N_SSG":true}