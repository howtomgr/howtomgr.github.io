{"pageProps":{"category":{"key":"security","name":"Security","description":"Security tools and authentication systems","icon":"ðŸ”’","color":"#ff5555","keywords":["vault","authelia","keycloak","pihole","fail2ban","wireguard","openvpn"]},"guides":[{"name":"authelia","displayName":"Authelia","slug":"authelia","description":"authelia is a free and open-source authentication and authorization server. Authelia provides 2FA and SSO for your applications via a web portal, serving as an open-source alternative to Auth0 or Okta","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/authelia","updatedAt":"2025-09-16T02:31:16Z","createdAt":"2025-09-16T02:19:55Z","readmeRaw":"# authelia Installation Guide\n\nauthelia is a free and open-source authentication and authorization server. Authelia provides 2FA and SSO for your applications via a web portal, serving as an open-source alternative to Auth0 or Okta\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 512MB minimum\n  - Storage: 100MB for installation\n  - Network: HTTPS for authentication\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 9091 (default authelia port)\n  - LDAP backend if used\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install authelia\nsudo dnf install -y authelia\n\n# Enable and start service\nsudo systemctl enable --now authelia\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nauthelia --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install authelia\nsudo apt install -y authelia\n\n# Enable and start service\nsudo systemctl enable --now authelia\n\n# Configure firewall\nsudo ufw allow 9091\n\n# Verify installation\nauthelia --version\n```\n\n### Arch Linux\n\n```bash\n# Install authelia\nsudo pacman -S authelia\n\n# Enable and start service\nsudo systemctl enable --now authelia\n\n# Verify installation\nauthelia --version\n```\n\n### Alpine Linux\n\n```bash\n# Install authelia\napk add --no-cache authelia\n\n# Enable and start service\nrc-update add authelia default\nrc-service authelia start\n\n# Verify installation\nauthelia --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install authelia\nsudo zypper install -y authelia\n\n# Enable and start service\nsudo systemctl enable --now authelia\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nauthelia --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install authelia\n\n# Start service\nbrew services start authelia\n\n# Verify installation\nauthelia --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install authelia\n\n# Enable in rc.conf\necho 'authelia_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice authelia start\n\n# Verify installation\nauthelia --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install authelia\n\n# Or using Scoop\nscoop install authelia\n\n# Verify installation\nauthelia --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/authelia\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nauthelia --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable authelia\n\n# Start service\nsudo systemctl start authelia\n\n# Stop service\nsudo systemctl stop authelia\n\n# Restart service\nsudo systemctl restart authelia\n\n# Check status\nsudo systemctl status authelia\n\n# View logs\nsudo journalctl -u authelia -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add authelia default\n\n# Start service\nrc-service authelia start\n\n# Stop service\nrc-service authelia stop\n\n# Restart service\nrc-service authelia restart\n\n# Check status\nrc-service authelia status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'authelia_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice authelia start\n\n# Stop service\nservice authelia stop\n\n# Restart service\nservice authelia restart\n\n# Check status\nservice authelia status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start authelia\nbrew services stop authelia\nbrew services restart authelia\n\n# Check status\nbrew services list | grep authelia\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start authelia\n\n# Stop service\nnet stop authelia\n\n# Using PowerShell\nStart-Service authelia\nStop-Service authelia\nRestart-Service authelia\n\n# Check status\nGet-Service authelia\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream authelia_backend {\n    server 127.0.0.1:9091;\n}\n\nserver {\n    listen 80;\n    server_name authelia.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name authelia.example.com;\n\n    ssl_certificate /etc/ssl/certs/authelia.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/authelia.example.com.key;\n\n    location / {\n        proxy_pass http://authelia_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName authelia.example.com\n    Redirect permanent / https://authelia.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName authelia.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/authelia.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/authelia.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9091/\n    ProxyPassReverse / http://127.0.0.1:9091/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend authelia_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/authelia.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend authelia_backend\n\nbackend authelia_backend\n    balance roundrobin\n    server authelia1 127.0.0.1:9091 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R authelia:authelia /etc/authelia\nsudo chmod 750 /etc/authelia\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9091/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status authelia\n\n# View logs\nsudo journalctl -u authelia -f\n\n# Monitor resource usage\ntop -p $(pgrep authelia)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/authelia\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/authelia-backup-$DATE.tar.gz\" /etc/authelia /var/lib/authelia\n\necho \"Backup completed: $BACKUP_DIR/authelia-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop authelia\n\n# Restore from backup\ntar -xzf /backup/authelia/authelia-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start authelia\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u authelia -n 100\nsudo tail -f /var/log/authelia/authelia.log\n\n# Check configuration\nauthelia --version\n\n# Check permissions\nls -la /etc/authelia\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 9091\n\n# Test connectivity\ntelnet localhost 9091\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep authelia)\n\n# Check disk I/O\niotop -p $(pgrep authelia)\n\n# Check connections\nss -an | grep 9091\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  authelia:\n    image: authelia:latest\n    ports:\n      - \"9091:9091\"\n    volumes:\n      - ./config:/etc/authelia\n      - ./data:/var/lib/authelia\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update authelia\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade authelia\n\n# Arch Linux\nsudo pacman -Syu authelia\n\n# Alpine Linux\napk update && apk upgrade authelia\n\n# openSUSE\nsudo zypper update authelia\n\n# FreeBSD\npkg update && pkg upgrade authelia\n\n# Always backup before updates\ntar -czf /backup/authelia-pre-update-$(date +%Y%m%d).tar.gz /etc/authelia\n\n# Restart after updates\nsudo systemctl restart authelia\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/authelia\n\n# Clean old logs\nfind /var/log/authelia -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/authelia\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.authelia.org/\n- GitHub Repository: https://github.com/authelia/authelia\n- Community Forum: https://forum.authelia.org/\n- Best Practices Guide: https://docs.authelia.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"authelia-installation-guide\" class=\"mobile-header\">authelia Installation Guide</h1>\n<p class=\"mobile-paragraph\">authelia is a free and open-source authentication and authorization server. Authelia provides 2FA and SSO for your applications via a web portal, serving as an open-source alternative to Auth0 or Okta</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation</li>\n<li class=\"mobile-list-item\">Network: HTTPS for authentication</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 9091 (default authelia port)</li>\n<li class=\"mobile-list-item\">LDAP backend if used</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install authelia\nsudo dnf install -y authelia\n\n# Enable and start service\nsudo systemctl enable --now authelia\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nauthelia --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install authelia\nsudo apt install -y authelia\n\n# Enable and start service\nsudo systemctl enable --now authelia\n\n# Configure firewall\nsudo ufw allow 9091\n\n# Verify installation\nauthelia --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install authelia\nsudo pacman -S authelia\n\n# Enable and start service\nsudo systemctl enable --now authelia\n\n# Verify installation\nauthelia --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install authelia\napk add --no-cache authelia\n\n# Enable and start service\nrc-update add authelia default\nrc-service authelia start\n\n# Verify installation\nauthelia --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install authelia\nsudo zypper install -y authelia\n\n# Enable and start service\nsudo systemctl enable --now authelia\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9091/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nauthelia --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install authelia\n\n# Start service\nbrew services start authelia\n\n# Verify installation\nauthelia --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install authelia\n\n# Enable in rc.conf\necho &#039;authelia_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice authelia start\n\n# Verify installation\nauthelia --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install authelia\n\n# Or using Scoop\nscoop install authelia\n\n# Verify installation\nauthelia --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/authelia\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nauthelia --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable authelia\n\n# Start service\nsudo systemctl start authelia\n\n# Stop service\nsudo systemctl stop authelia\n\n# Restart service\nsudo systemctl restart authelia\n\n# Check status\nsudo systemctl status authelia\n\n# View logs\nsudo journalctl -u authelia -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add authelia default\n\n# Start service\nrc-service authelia start\n\n# Stop service\nrc-service authelia stop\n\n# Restart service\nrc-service authelia restart\n\n# Check status\nrc-service authelia status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;authelia_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice authelia start\n\n# Stop service\nservice authelia stop\n\n# Restart service\nservice authelia restart\n\n# Check status\nservice authelia status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start authelia\nbrew services stop authelia\nbrew services restart authelia\n\n# Check status\nbrew services list | grep authelia</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start authelia\n\n# Stop service\nnet stop authelia\n\n# Using PowerShell\nStart-Service authelia\nStop-Service authelia\nRestart-Service authelia\n\n# Check status\nGet-Service authelia</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream authelia_backend {\n    server 127.0.0.1:9091;\n}\n\nserver {\n    listen 80;\n    server_name authelia.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name authelia.example.com;\n\n    ssl_certificate /etc/ssl/certs/authelia.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/authelia.example.com.key;\n\n    location / {\n        proxy_pass http://authelia_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName authelia.example.com\n    Redirect permanent / https://authelia.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName authelia.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/authelia.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/authelia.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:9091/\n    ProxyPassReverse / http://127.0.0.1:9091/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend authelia_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/authelia.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend authelia_backend\n\nbackend authelia_backend\n    balance roundrobin\n    server authelia1 127.0.0.1:9091 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R authelia:authelia /etc/authelia\nsudo chmod 750 /etc/authelia\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=9091/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status authelia\n\n# View logs\nsudo journalctl -u authelia -f\n\n# Monitor resource usage\ntop -p $(pgrep authelia)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/authelia&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/authelia-backup-$DATE.tar.gz&quot; /etc/authelia /var/lib/authelia\n\necho &quot;Backup completed: $BACKUP_DIR/authelia-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop authelia\n\n# Restore from backup\ntar -xzf /backup/authelia/authelia-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start authelia</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u authelia -n 100\nsudo tail -f /var/log/authelia/authelia.log\n\n# Check configuration\nauthelia --version\n\n# Check permissions\nls -la /etc/authelia</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 9091\n\n# Test connectivity\ntelnet localhost 9091\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep authelia)\n\n# Check disk I/O\niotop -p $(pgrep authelia)\n\n# Check connections\nss -an | grep 9091</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  authelia:\n    image: authelia:latest\n    ports:\n      - &quot;9091:9091&quot;\n    volumes:\n      - ./config:/etc/authelia\n      - ./data:/var/lib/authelia\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update authelia\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade authelia\n\n# Arch Linux\nsudo pacman -Syu authelia\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade authelia\n\n# openSUSE\nsudo zypper update authelia\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade authelia\n\n# Always backup before updates\ntar -czf /backup/authelia-pre-update-$(date +%Y%m%d).tar.gz /etc/authelia\n\n# Restart after updates\nsudo systemctl restart authelia</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/authelia\n\n# Clean old logs\nfind /var/log/authelia -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/authelia</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.authelia.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/authelia/authelia</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.authelia.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.authelia.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1173,"lastBuilt":"2025-09-16T02:44:44.824Z"},{"name":"fail2ban","displayName":"Fail2ban","slug":"fail2ban","description":"Repo for fail2ban","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/fail2ban","updatedAt":"2025-09-16T02:36:26Z","createdAt":"2025-09-08T03:07:24Z","readmeRaw":"# Fail2ban Installation Guide\n\nFail2ban is a free and open-source intrusion prevention software framework that protects servers from brute-force attacks. Written in Python, it monitors log files and bans IP addresses that show malicious signs such as too many password failures or seeking exploits. It serves as a powerful FOSS alternative to commercial security solutions like Cloudflare Rate Limiting, AWS WAF, or proprietary IPS systems, providing enterprise-grade protection without licensing costs or vendor lock-in.\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum (2+ cores recommended for high-traffic servers)\n  - RAM: 512MB minimum (1GB+ recommended)\n  - Storage: 100MB for installation, plus log storage\n  - Network: Stable connectivity for updates\n- **Operating System**: \n  - Linux: Any modern distribution with systemd or init\n  - macOS: 10.14+ (limited support)\n  - Windows: WSL2 with Linux distribution\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Firewall access (iptables, nftables, pf, or ipfw)\n  - Root access to modify firewall rules\n- **Dependencies**:\n  - Python 3.5+ (3.8+ recommended)\n  - iptables, nftables, or equivalent firewall\n  - systemd or init system\n  - Log files to monitor (sshd, nginx, apache, etc.)\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install fail2ban\nsudo dnf install -y fail2ban fail2ban-systemd\n\n# Install additional dependencies\nsudo dnf install -y python3-systemd python3-pyinotify\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version\nsudo systemctl status fail2ban\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install fail2ban\nsudo apt install -y fail2ban\n\n# Install additional tools\nsudo apt install -y python3-systemd python3-pyinotify iptables-persistent\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version\nsudo systemctl status fail2ban\n```\n\n### Arch Linux\n\n```bash\n# Install fail2ban\nsudo pacman -S fail2ban\n\n# Install additional dependencies\nsudo pacman -S python-systemd python-pyinotify\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version\n```\n\n### Alpine Linux\n\n```bash\n# Install fail2ban\napk add --no-cache fail2ban fail2ban-openrc\n\n# Install additional dependencies\napk add --no-cache py3-systemd iptables ip6tables\n\n# Enable and start service\nrc-update add fail2ban default\nrc-service fail2ban start\n\n# Verify installation\nfail2ban-client --version\n```\n\n### openSUSE/SLES\n\n```bash\n# openSUSE Leap/Tumbleweed\nsudo zypper install -y fail2ban python3-systemd\n\n# SLES 15\nsudo SUSEConnect -p sle-module-basesystem/15.5/x86_64\nsudo zypper install -y fail2ban\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=fail2ban\nsudo firewall-cmd --reload\n\n# Verify installation\nfail2ban-client --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install fail2ban\n\n# Copy configuration files\nsudo cp /usr/local/etc/fail2ban/fail2ban.conf /usr/local/etc/fail2ban/fail2ban.local\nsudo cp /usr/local/etc/fail2ban/jail.conf /usr/local/etc/fail2ban/jail.local\n\n# Start service\nsudo brew services start fail2ban\n\n# Verify installation\nfail2ban-client --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install py39-fail2ban\n\n# Enable in rc.conf\necho 'fail2ban_enable=\"YES\"' >> /etc/rc.conf\n\n# Copy configuration\ncp /usr/local/etc/fail2ban/fail2ban.conf /usr/local/etc/fail2ban/fail2ban.local\ncp /usr/local/etc/fail2ban/jail.conf /usr/local/etc/fail2ban/jail.local\n\n# Start service\nservice fail2ban start\n\n# Verify installation\nfail2ban-client --version\n```\n\n### Windows (WSL2)\n\n```powershell\n# Install WSL2 with Ubuntu\nwsl --install -d Ubuntu-22.04\n\n# Inside WSL2 Ubuntu\nsudo apt update\nsudo apt install -y fail2ban\n\n# Configure for Windows logs monitoring\n# Note: Limited functionality - primarily for learning/testing\n\n# Verify installation\nfail2ban-client --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create local configuration files (never edit .conf files directly)\nsudo cp /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local\nsudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\n\n# Edit main configuration\nsudo tee /etc/fail2ban/fail2ban.local <<EOF\n[Definition]\nloglevel = INFO\nlogtarget = /var/log/fail2ban.log\nsyslogsocket = auto\nsocket = /var/run/fail2ban/fail2ban.sock\npidfile = /var/run/fail2ban/fail2ban.pid\ndbfile = /var/lib/fail2ban/fail2ban.sqlite3\ndbpurgeage = 1d\nEOF\n\n# Configure basic jail settings\nsudo tee /etc/fail2ban/jail.local <<EOF\n[DEFAULT]\n# Ban duration (in seconds)\nbantime = 3600\n# Time window for maxretry\nfindtime = 600\n# Number of failures before ban\nmaxretry = 5\n# Email notifications\ndestemail = admin@example.com\nsender = fail2ban@example.com\nmta = sendmail\n# Action to take\naction = %(action_mwl)s\n\n# Whitelist\nignoreip = 127.0.0.1/8 ::1 192.168.0.0/16\n\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\n\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nport = http,https\nlogpath = /var/log/nginx/error.log\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nport = http,https\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\nfindtime = 60\nbantime = 600\n\n[apache-auth]\nenabled = false\nport = http,https\nfilter = apache-auth\nlogpath = /var/log/apache*/*error.log\nmaxretry = 6\n\n[postfix]\nenabled = false\nport = smtp,465,submission\nfilter = postfix\nlogpath = /var/log/mail.log\nEOF\n\n# Restart fail2ban\nsudo systemctl restart fail2ban\n```\n\n### Custom Jail Configuration\n\n```bash\n# Create custom filter for application\nsudo tee /etc/fail2ban/filter.d/myapp.conf <<EOF\n[Definition]\nfailregex = ^<HOST> - - \\[.*\\] \"POST /login HTTP/.*\" 401\n            ^Failed login from <HOST>\n            ^Authentication failure for .* from <HOST>\nignoreregex =\nEOF\n\n# Create jail for custom application\nsudo tee -a /etc/fail2ban/jail.local <<EOF\n\n[myapp]\nenabled = true\nfilter = myapp\nport = 8080\nlogpath = /var/log/myapp/access.log\nmaxretry = 3\nbantime = 3600\nfindtime = 300\nEOF\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable fail2ban\n\n# Start service\nsudo systemctl start fail2ban\n\n# Stop service\nsudo systemctl stop fail2ban\n\n# Restart service\nsudo systemctl restart fail2ban\n\n# Reload configuration\nsudo systemctl reload fail2ban\n\n# Check status\nsudo systemctl status fail2ban\n\n# View logs\nsudo journalctl -u fail2ban -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add fail2ban default\n\n# Start service\nrc-service fail2ban start\n\n# Stop service\nrc-service fail2ban stop\n\n# Restart service\nrc-service fail2ban restart\n\n# Check status\nrc-service fail2ban status\n\n# View logs\ntail -f /var/log/fail2ban.log\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in rc.conf\necho 'fail2ban_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice fail2ban start\n\n# Stop service\nservice fail2ban stop\n\n# Restart service\nservice fail2ban restart\n\n# Check status\nservice fail2ban status\n```\n\n### launchd (macOS)\n\n```bash\n# Using brew services\nbrew services start fail2ban\nbrew services stop fail2ban\nbrew services restart fail2ban\n\n# Check status\nbrew services list | grep fail2ban\n\n# Manual control\nsudo /usr/local/bin/fail2ban-client start\nsudo /usr/local/bin/fail2ban-client stop\n```\n\n## Advanced Configuration\n\n### Multi-Service Protection\n\n```bash\n# Comprehensive jail configuration\nsudo tee /etc/fail2ban/jail.d/multi-service.conf <<EOF\n# SSH Protection\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\nfindtime = 600\n\n[sshd-ddos]\nenabled = true\nport = ssh\nfilter = sshd-ddos\nlogpath = /var/log/auth.log\nmaxretry = 10\nbantime = 600\nfindtime = 60\n\n# Web Server Protection\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nport = http,https\nlogpath = /var/log/nginx/error.log\nmaxretry = 3\n\n[nginx-noscript]\nenabled = true\nport = http,https\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 5\n\n[nginx-badbots]\nenabled = true\nport = http,https\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nbantime = 86400\n\n[nginx-noproxy]\nenabled = true\nport = http,https\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n# Database Protection\n[mysqld-auth]\nenabled = true\nfilter = mysqld-auth\nport = 3306\nlogpath = /var/log/mysql/error.log\nmaxretry = 5\n\n[postgresql]\nenabled = true\nport = 5432\nfilter = postgresql\nlogpath = /var/log/postgresql/*.log\nmaxretry = 5\n\n# Mail Server Protection\n[postfix]\nenabled = true\nport = smtp,465,submission\nfilter = postfix\nlogpath = /var/log/mail.log\n\n[postfix-sasl]\nenabled = true\nport = smtp,465,submission,imap,imaps,pop3,pop3s\nfilter = postfix-sasl\nlogpath = /var/log/mail.log\n\n[dovecot]\nenabled = true\nport = pop3,pop3s,imap,imaps,submission,465,sieve\nfilter = dovecot\nlogpath = /var/log/mail.log\nEOF\n```\n\n### GeoIP Blocking\n\n```bash\n# Install GeoIP database\nsudo apt install geoip-database geoip-bin  # Debian/Ubuntu\nsudo dnf install GeoIP GeoIP-data         # RHEL/CentOS\n\n# Create GeoIP action\nsudo tee /etc/fail2ban/action.d/geoip-block.conf <<EOF\n[Definition]\nactionstart = \nactionstop = \nactioncheck = \nactionban = if [ \"\\$(geoiplookup <ip> | grep -v 'US\\|CA\\|GB')\" ]; then iptables -I f2b-<name> 1 -s <ip> -j DROP; fi\nactionunban = iptables -D f2b-<name> -s <ip> -j DROP\nEOF\n\n# Use in jail\nsudo tee -a /etc/fail2ban/jail.local <<EOF\n\n[sshd-geoip]\nenabled = true\nfilter = sshd\naction = geoip-block[name=%(__name__)s]\nlogpath = /var/log/auth.log\nmaxretry = 3\nEOF\n```\n\n### Persistent Bans\n\n```bash\n# Create persistent ban action\nsudo tee /etc/fail2ban/action.d/iptables-persistent.conf <<EOF\n[Definition]\nactionstart = iptables -N f2b-<name>\n              iptables -A f2b-<name> -j RETURN\n              iptables -I <chain> -p <protocol> --dport <port> -j f2b-<name>\n              # Load persistent bans\n              [ -f /etc/fail2ban/persistent/<name>.bans ] && while read ip; do iptables -I f2b-<name> 1 -s \\$ip -j DROP; done < /etc/fail2ban/persistent/<name>.bans\n\nactionstop = iptables -D <chain> -p <protocol> --dport <port> -j f2b-<name>\n             iptables -F f2b-<name>\n             iptables -X f2b-<name>\n\nactionban = iptables -I f2b-<name> 1 -s <ip> -j DROP\n            echo '<ip>' >> /etc/fail2ban/persistent/<name>.bans\n            sort -u /etc/fail2ban/persistent/<name>.bans -o /etc/fail2ban/persistent/<name>.bans\n\nactionunban = iptables -D f2b-<name> -s <ip> -j DROP\n              sed -i '/<ip>/d' /etc/fail2ban/persistent/<name>.bans\nEOF\n\n# Create directory for persistent bans\nsudo mkdir -p /etc/fail2ban/persistent\n```\n\n## Reverse Proxy Setup\n\n### nginx Reverse Proxy Configuration\n\n```nginx\n# /etc/nginx/conf.d/fail2ban.conf\n# Pass real IP to backend for fail2ban processing\n\nmap $remote_addr $proxy_forwarded_elem {\n    ~^[0-9.]+$          \"for=$remote_addr\";\n    ~^[0-9A-Fa-f:.]+$   \"for=\\\"[$remote_addr]\\\"\";\n    default             \"for=unknown\";\n}\n\nmap $http_forwarded $proxy_add_forwarded {\n    \"\"      \"$proxy_forwarded_elem\";\n    default \"$http_forwarded, $proxy_forwarded_elem\";\n}\n\nserver {\n    listen 80;\n    server_name app.example.com;\n\n    location / {\n        proxy_pass http://backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Forwarded $proxy_add_forwarded;\n        \n        # Rate limiting\n        limit_req zone=app_limit burst=10 nodelay;\n        limit_req_status 429;\n    }\n}\n\n# Define rate limit zone\nlimit_req_zone $binary_remote_addr zone=app_limit:10m rate=10r/s;\n```\n\n### HAProxy Configuration\n\n```haproxy\n# /etc/haproxy/haproxy.cfg\nglobal\n    log /dev/log local0\n    log /dev/log local1 notice\n\ndefaults\n    log global\n    option httplog\n    option forwardfor\n\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cert.pem\n    \n    # Track abusive behavior\n    stick-table type ip size 100k expire 30m store conn_rate(3s),conn_cur,http_req_rate(10s)\n    \n    # Block if connection rate exceeds limit\n    tcp-request connection reject if { src_conn_rate gt 20 }\n    tcp-request connection track-sc0 src\n    \n    # Block if HTTP request rate exceeds limit\n    http-request deny if { sc_http_req_rate(0) gt 20 }\n    \n    default_backend web_servers\n\nbackend web_servers\n    # Forward real IP for fail2ban\n    option forwardfor header X-Real-IP\n    server web1 192.168.1.10:80 check\n    server web2 192.168.1.11:80 check\n```\n\n### Apache Reverse Proxy\n\n```apache\n# /etc/apache2/sites-available/reverse-proxy.conf\n<VirtualHost *:80>\n    ServerName app.example.com\n    \n    # Enable required modules\n    # a2enmod proxy proxy_http remoteip\n    \n    # Trust proxy headers from load balancer\n    RemoteIPHeader X-Forwarded-For\n    RemoteIPTrustedProxy 10.0.0.0/8\n    \n    # Log real IP\n    LogFormat \"%a %l %u %t \\\"%r\\\" %>s %O \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" proxy\n    CustomLog ${APACHE_LOG_DIR}/access.log proxy\n    \n    ProxyPass / http://backend/\n    ProxyPassReverse / http://backend/\n    \n    # Pass real IP to backend\n    ProxyPreserveHost On\n    RequestHeader set X-Real-IP \"%{REMOTE_ADDR}s\"\n    RequestHeader set X-Forwarded-For \"%{X-Forwarded-For}i\"\n</VirtualHost>\n```\n\n## Security Configuration\n\n### Enhanced Security Rules\n\n```bash\n# Create comprehensive security configuration\nsudo tee /etc/fail2ban/jail.d/security-enhanced.conf <<EOF\n[DEFAULT]\n# Aggressive ban settings for security\nbantime = 86400    # 24 hours\nfindtime = 3600    # 1 hour window\nmaxretry = 3       # Low tolerance\nchain = INPUT      # iptables chain\nprotocol = tcp     # Default protocol\naction = %(action_mwl)s\n\n# Recidive jail for repeat offenders\n[recidive]\nenabled = true\nfilter = recidive\nlogpath = /var/log/fail2ban.log\nbantime = 604800   # 1 week\nfindtime = 86400   # 1 day\nmaxretry = 3\naction = iptables-allports[name=recidive, protocol=all]\n         sendmail-whois-lines[name=recidive, logpath=/var/log/fail2ban.log]\n\n# Port scanning detection\n[portscan]\nenabled = true\nfilter = portscan\nlogpath = /var/log/syslog\nmaxretry = 6\nbantime = 7200\naction = iptables-allports[name=portscan, protocol=all]\n\n# Block bad bots\n[apache-badbots]\nenabled = true\nport = http,https\nfilter = apache-badbots\nlogpath = /var/log/apache*/*access.log\nbantime = 172800   # 2 days\nmaxretry = 1\n\n# WordPress protection\n[wordpress]\nenabled = true\nfilter = wordpress\nport = http,https\nlogpath = /var/log/apache*/*access.log\nmaxretry = 3\nbantime = 3600\n\n# Aggressive SSH protection\n[sshd-aggressive]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 2\nbantime = 86400\nfindtime = 300\nEOF\n```\n\n### Custom Security Filters\n\n```bash\n# Create port scan detection filter\nsudo tee /etc/fail2ban/filter.d/portscan.conf <<EOF\n[Definition]\nfailregex = UFW BLOCK.* SRC=<HOST>\n            rejected connection: .* SRC=<HOST>\n            dropped: .* SRC=<HOST>\nignoreregex =\nEOF\n\n# Create WordPress attack filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf <<EOF\n[Definition]\nfailregex = ^<HOST> .* \"POST /wp-login.php\n            ^<HOST> .* \"POST /xmlrpc.php\n            ^<HOST> .* \"GET /wp-admin/ HTTP/[0-9.]+\" 403\n            ^<HOST> .* \"GET /wp-content/.*/.*\\.php HTTP/[0-9.]+\" \nignoreregex = ^<HOST> .* \"GET /wp-admin/admin-ajax.php\nEOF\n\n# Create bad bot filter\nsudo tee /etc/fail2ban/filter.d/badbots.conf <<EOF\n[Definition]\nbadbotscustom = EmailCollector|WebEMailExtrac|TrackBack/1\\.02|sogou music spider|(?:Mozilla/\\d+\\.0\\s+)$\nbadbots = Atomic_Email_Hunter/4\\.0|atSpider/1\\.0|autoemailspider|bwh3_user_agent|China Local Browse 2\\.6|ContactBot/0\\.2|ContentSmartz|DataCha0s/2\\.0|DBrowse 1\\.4b|DBrowse 1\\.4d|Demo Bot DOT 16b|Demo Bot Z 16b|DSurf15a 01|DSurf15a 71|DSurf15a 81|DSurf15a VA|EBrowse 1\\.4b|Educate Search VxB|EmailSiphon|EmailSpider|EmailWolf 1\\.00|ESurf15a 15|ExtractorPro|Franklin Locator 1\\.8|FSurf15a 01|Full Web Bot 0416B|Full Web Bot 0516B|Full Web Bot 2816B|Guestbook Auto Submitter|Industry Program 1\\.0\\.x|ISC Systems iRc Search 2\\.1|IUPUI Research Bot v 1\\.9a|LARBIN-EXPERIMENTAL \\(efp@gmx\\.net\\)|LetsCrawl\\.com/1\\.0 \\+http\\://letscrawl\\.com/|Lincoln State Web Browser|LMQueueBot/0\\.2|LWP\\:\\:Simple/5\\.803|Mac Finder 1\\.0\\.xx|MFC Foundation Class Library 4\\.0|Microsoft URL Control - 6\\.00\\.8xxx|Missauga Locate 1\\.0\\.0|Missigua Locator 1\\.9|Missouri College Browse|Mizzu Labs 2\\.2|Mo College 1\\.9|MVAClient|Mozilla/2\\.0 \\(compatible; NEWT ActiveX; Win32\\)|Mozilla/3\\.0 \\(compatible; Indy Library\\)|Mozilla/3\\.0 \\(compatible; scan4mail \\(advanced version\\) http\\://www\\.peterspages\\.net/?scan4mail\\)|Mozilla/4\\.0 \\(compatible; Advanced Email Extractor v2\\.xx\\)|Mozilla/4\\.0 \\(compatible; Iplexx Spider/1\\.0 http\\://www\\.iplexx\\.at\\)|Mozilla/4\\.0 \\(compatible; MSIE 5\\.0; Windows NT; DigExt; DTS Agent|Mozilla/4\\.0 efp@gmx\\.net|Mozilla/5\\.0 \\(Version\\: xxxx Type\\:xx\\)|NameOfAgent \\(CMS Spider\\)|NASA Search 1\\.0|Nsauditor/1\\.x|PBrowse 1\\.4b|PEval 1\\.4b|Poirot|Port Huron Labs|Production Bot 0116B|Production Bot 2016B|Production Bot DOT 3016B|Program Shareware 1\\.0\\.2|PSurf15a 11|PSurf15a 51|PSurf15a VA|psycheclone|RSurf15a 41|RSurf15a 51|RSurf15a 81|searchbot admin@google\\.com|ShablastBot 1\\.0|snap\\.com beta crawler v0|Snapbot/1\\.0|Snapbot/1\\.0 \\(Snap Shots&#44; \\+http\\://www\\.snap\\.com\\)|sogou develop spider|Sogou Orion spider/3\\.0\\(\\+http\\://www\\.sogou\\.com/docs/help/webmasters\\.htm#07\\)|sogou spider|Sogou web spider/3\\.0\\(\\+http\\://www\\.sogou\\.com/docs/help/webmasters\\.htm#07\\)|sohu agent|SSurf15a 11 |TSurf15a 11|Under the Rainbow 2\\.2|User-Agent\\: Mozilla/4\\.0 \\(compatible; MSIE 6\\.0; Windows NT 5\\.1\\)|VadixBot|WebVulnCrawl\\.unknown/1\\.0 libwww-perl/5\\.803|Wells Search II|WEP Search 00\n\nfailregex = ^<HOST> -.*\"(GET|POST|HEAD).*HTTP.*\".*(?:%(badbots)s|%(badbotscustom)s).*\"$\nignoreregex =\nEOF\n```\n\n### Firewall Integration\n\n```bash\n# iptables integration\nsudo tee /etc/fail2ban/action.d/iptables-common.local <<EOF\n[Init]\n# Option: blocktype\n# Note: This is the default block type for all iptables actions\nblocktype = DROP\n\n# Option: iptables\n# Note: Path to iptables command\niptables = /sbin/iptables\n\n# Option: protocol\n# Note: Default protocol\nprotocol = tcp\n\n# Option: chain\n# Note: Default chain for filter table\nchain = INPUT\nEOF\n\n# nftables integration\nsudo tee /etc/fail2ban/action.d/nftables.local <<EOF\n[Definition]\nactionstart = nft add table inet fail2ban\n              nft add chain inet fail2ban f2b-<name> { type filter hook input priority 0 \\; }\n\nactionstop = nft delete chain inet fail2ban f2b-<name>\n\nactionban = nft add rule inet fail2ban f2b-<name> ip saddr <ip> drop\n\nactionunban = nft delete rule inet fail2ban f2b-<name> handle \\$(nft -a list chain inet fail2ban f2b-<name> | grep <ip> | awk '{print \\$NF}')\nEOF\n```\n\n## Database Setup\n\n### SQLite Database Configuration\n\n```bash\n# Default SQLite database location\nls -la /var/lib/fail2ban/fail2ban.sqlite3\n\n# Custom database configuration\nsudo tee -a /etc/fail2ban/fail2ban.local <<EOF\n\n[Definition]\n# Database configuration\ndbfile = /var/lib/fail2ban/fail2ban.sqlite3\ndbpurgeage = 7d\nEOF\n\n# View database content\nsudo sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"SELECT * FROM bans;\"\nsudo sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"SELECT jail, ip, COUNT(*) as count FROM bans GROUP BY jail, ip ORDER BY count DESC;\"\n```\n\n### MySQL Backend Configuration\n\n```bash\n# Install MySQL connector\nsudo apt install python3-pymysql  # Debian/Ubuntu\nsudo dnf install python3-PyMySQL   # RHEL/CentOS\n\n# Create database and user\nmysql -u root -p <<EOF\nCREATE DATABASE fail2ban;\nCREATE USER 'fail2ban'@'localhost' IDENTIFIED BY 'secure_password';\nGRANT ALL PRIVILEGES ON fail2ban.* TO 'fail2ban'@'localhost';\nFLUSH PRIVILEGES;\nEOF\n\n# Configure fail2ban for MySQL\nsudo tee /etc/fail2ban/fail2ban.d/mysql.conf <<EOF\n[Definition]\ndbdriver = mysql\ndbhost = localhost\ndbport = 3306\ndbuser = fail2ban\ndbpassword = secure_password\ndbname = fail2ban\nEOF\n```\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Optimize fail2ban performance\nsudo tee /etc/fail2ban/fail2ban.d/performance.conf <<EOF\n[Definition]\n# Use systemd journal instead of log files\nbackend = systemd\n\n# Use pyinotify for better performance\nbackend = pyinotify\n\n# Increase socket timeout\nsocket_timeout = 30\n\n# Database optimization\ndbmaxmatches = 100\ndbpurgeage = 1d\nEOF\n\n# Configure systemd limits\nsudo mkdir -p /etc/systemd/system/fail2ban.service.d\nsudo tee /etc/systemd/system/fail2ban.service.d/limits.conf <<EOF\n[Service]\n# Increase limits for better performance\nLimitNOFILE=65536\nLimitNPROC=4096\nMemoryLimit=512M\nCPUQuota=50%\nNice=-5\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart fail2ban\n```\n\n### Log Processing Optimization\n\n```bash\n# Use systemd journal backend for better performance\nsudo tee /etc/fail2ban/jail.d/systemd-backend.conf <<EOF\n[DEFAULT]\nbackend = systemd\n\n[sshd]\nenabled = true\nbackend = systemd\njournalmatch = _SYSTEMD_UNIT=ssh.service + _COMM=sshd\n\n[nginx]\nenabled = true\nbackend = systemd\njournalmatch = _SYSTEMD_UNIT=nginx.service\nEOF\n\n# Configure log rotation for fail2ban\nsudo tee /etc/logrotate.d/fail2ban <<EOF\n/var/log/fail2ban.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 root adm\n    sharedscripts\n    postrotate\n        fail2ban-client flushlogs 1>/dev/null\n    endscript\n}\nEOF\n```\n\n## Monitoring\n\n### Built-in Monitoring\n\n```bash\n# Check fail2ban status\nsudo fail2ban-client status\n\n# Check specific jail status\nsudo fail2ban-client status sshd\n\n# Get banned IPs for all jails\nfor jail in $(sudo fail2ban-client status | grep \"Jail list\" | sed 's/.*://;s/,//g'); do\n    echo \"=== $jail ===\"\n    sudo fail2ban-client status $jail | grep \"Banned IP\"\ndone\n\n# Monitor fail2ban in real-time\nsudo tail -f /var/log/fail2ban.log\n\n# Show ban statistics\nsudo fail2ban-client banned\n```\n\n### Monitoring Script\n\n```bash\n#!/bin/bash\n# fail2ban-monitor.sh\n\nLOG_FILE=\"/var/log/fail2ban-monitor.log\"\nALERT_EMAIL=\"admin@example.com\"\n\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\n# Check fail2ban service status\ncheck_service() {\n    if ! systemctl is-active --quiet fail2ban; then\n        log \"ERROR: fail2ban service is not running!\"\n        echo \"fail2ban service down on $(hostname)\" | mail -s \"fail2ban Alert\" \"$ALERT_EMAIL\"\n        return 1\n    fi\n    log \"fail2ban service is running\"\n}\n\n# Monitor ban activity\nmonitor_bans() {\n    local jail_list=$(fail2ban-client status | grep \"Jail list\" | sed 's/.*://;s/,//g')\n    \n    for jail in $jail_list; do\n        local status=$(fail2ban-client status \"$jail\")\n        local banned_count=$(echo \"$status\" | grep \"Currently banned:\" | awk '{print $NF}')\n        local total_banned=$(echo \"$status\" | grep \"Total banned:\" | awk '{print $NF}')\n        \n        log \"Jail: $jail - Currently banned: $banned_count, Total banned: $total_banned\"\n        \n        # Alert if too many bans\n        if [ \"$banned_count\" -gt 50 ]; then\n            log \"WARNING: High number of banned IPs in $jail jail\"\n            echo \"High ban count in $jail: $banned_count IPs\" | mail -s \"fail2ban Warning\" \"$ALERT_EMAIL\"\n        fi\n    done\n}\n\n# Check for suspicious patterns\ncheck_patterns() {\n    local recent_bans=$(tail -n 1000 /var/log/fail2ban.log | grep \"Ban\" | wc -l)\n    \n    if [ \"$recent_bans\" -gt 100 ]; then\n        log \"WARNING: High ban rate detected: $recent_bans bans in recent logs\"\n    fi\n}\n\n# Generate report\ngenerate_report() {\n    local report_file=\"/tmp/fail2ban-report-$(date +%Y%m%d).txt\"\n    \n    {\n        echo \"Fail2ban Report - $(date)\"\n        echo \"=========================\"\n        echo\n        fail2ban-client status\n        echo\n        echo \"Ban Statistics by Jail:\"\n        echo \"-----------------------\"\n        \n        for jail in $(fail2ban-client status | grep \"Jail list\" | sed 's/.*://;s/,//g'); do\n            echo\n            echo \"[$jail]\"\n            fail2ban-client status \"$jail\"\n        done\n        \n        echo\n        echo \"Recent Activity:\"\n        echo \"----------------\"\n        tail -n 50 /var/log/fail2ban.log | grep -E \"(Ban|Unban|Found|Restore)\"\n    } > \"$report_file\"\n    \n    log \"Report generated: $report_file\"\n    \n    # Email report\n    mail -s \"Fail2ban Daily Report - $(hostname)\" \"$ALERT_EMAIL\" < \"$report_file\"\n}\n\n# Main monitoring loop\nmain() {\n    log \"Starting fail2ban monitoring...\"\n    \n    check_service || exit 1\n    monitor_bans\n    check_patterns\n    generate_report\n    \n    log \"Monitoring completed\"\n}\n\n# Run monitoring\nmain\n\n# Add to cron:\n# */15 * * * * /usr/local/bin/fail2ban-monitor.sh\n```\n\n### Prometheus Integration\n\n```bash\n# Install fail2ban exporter\nwget https://github.com/hectorjsmith/fail2ban-prometheus-exporter/releases/download/v0.10.0/fail2ban_exporter\nchmod +x fail2ban_exporter\nsudo mv fail2ban_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/fail2ban-exporter.service <<EOF\n[Unit]\nDescription=Fail2ban Prometheus Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/fail2ban_exporter\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now fail2ban-exporter\n\n# Configure Prometheus\necho \"  - job_name: 'fail2ban'\n    static_configs:\n      - targets: ['localhost:9191']\" >> /etc/prometheus/prometheus.yml\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# fail2ban-backup.sh\n\nBACKUP_DIR=\"/backup/fail2ban\"\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=\"$BACKUP_DIR/fail2ban_backup_$DATE.tar.gz\"\n\n# Create backup directory\nmkdir -p \"$BACKUP_DIR\"\n\n# Stop fail2ban to ensure database consistency\nsystemctl stop fail2ban\n\n# Create backup\ntar -czf \"$BACKUP_FILE\" \\\n    /etc/fail2ban/ \\\n    /var/lib/fail2ban/ \\\n    /var/log/fail2ban.log* \\\n    2>/dev/null\n\n# Start fail2ban\nsystemctl start fail2ban\n\n# Encrypt backup\ngpg --cipher-algo AES256 --symmetric \"$BACKUP_FILE\"\nrm \"$BACKUP_FILE\"\n\necho \"Backup created: $BACKUP_FILE.gpg\"\n\n# Clean old backups (keep 30 days)\nfind \"$BACKUP_DIR\" -name \"fail2ban_backup_*.gpg\" -mtime +30 -delete\n\n# Backup banned IPs list\nfail2ban-client banned > \"$BACKUP_DIR/banned_ips_$DATE.txt\"\n```\n\n### Restore Script\n\n```bash\n#!/bin/bash\n# fail2ban-restore.sh\n\nBACKUP_FILE=\"$1\"\n\nif [ -z \"$BACKUP_FILE\" ]; then\n    echo \"Usage: $0 <backup-file.gpg>\"\n    exit 1\nfi\n\n# Decrypt backup\ngpg --decrypt \"$BACKUP_FILE\" > /tmp/fail2ban_restore.tar.gz\n\n# Stop fail2ban\nsystemctl stop fail2ban\n\n# Extract backup\ntar -xzf /tmp/fail2ban_restore.tar.gz -C /\n\n# Restore permissions\nchown -R root:root /etc/fail2ban\nchmod 644 /etc/fail2ban/*.conf\nchmod 644 /etc/fail2ban/*.local\n\n# Start fail2ban\nsystemctl start fail2ban\n\n# Clean up\nrm /tmp/fail2ban_restore.tar.gz\n\necho \"Restore completed\"\n\n# Reload jails\nfail2ban-client reload\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check for syntax errors\nfail2ban-client -t\n\n# Check logs\njournalctl -u fail2ban -n 100\ntail -f /var/log/fail2ban.log\n\n# Check permissions\nls -la /var/run/fail2ban/\nls -la /var/lib/fail2ban/\n\n# Start in foreground for debugging\nfail2ban-server -f -x -v\n```\n\n2. **IPs not getting banned**:\n```bash\n# Test regex patterns\nfail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check jail configuration\nfail2ban-client get sshd logpath\nfail2ban-client get sshd findtime\nfail2ban-client get sshd maxretry\n\n# Test specific log line\necho 'Dec 10 12:34:56 server sshd[12345]: Failed password for invalid user admin from 192.168.1.100 port 12345 ssh2' | fail2ban-regex - /etc/fail2ban/filter.d/sshd.conf\n```\n\n3. **Performance issues**:\n```bash\n# Check database size\nls -lh /var/lib/fail2ban/fail2ban.sqlite3\n\n# Purge old entries\nfail2ban-client set dbpurgeage 1d\nsqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"DELETE FROM bans WHERE timeofban < strftime('%s', 'now', '-7 days');\"\n\n# Monitor CPU usage\ntop -p $(pgrep fail2ban-server)\n\n# Check number of monitored files\nlsof -p $(pgrep fail2ban-server) | grep -c log\n```\n\n### Debug Mode\n\n```bash\n# Enable debug logging\nsudo tee -a /etc/fail2ban/fail2ban.local <<EOF\n[Definition]\nloglevel = DEBUG\nEOF\n\nsudo systemctl restart fail2ban\n\n# Watch debug logs\ntail -f /var/log/fail2ban.log | grep -E \"(DEBUG|ERROR|WARNING)\"\n\n# Test jail processing\nfail2ban-client set sshd addlogpath /var/log/auth.log\nfail2ban-client set sshd banip 192.168.1.100\nfail2ban-client set sshd unbanip 192.168.1.100\n```\n\n## Integration Examples\n\n### Python Integration\n\n```python\n#!/usr/bin/env python3\n# fail2ban_api.py\n\nimport subprocess\nimport json\nimport socket\nfrom datetime import datetime\n\nclass Fail2banManager:\n    def __init__(self):\n        self.socket_path = \"/var/run/fail2ban/fail2ban.sock\"\n    \n    def execute_command(self, command):\n        \"\"\"Execute fail2ban-client command\"\"\"\n        try:\n            result = subprocess.run(\n                ['fail2ban-client'] + command.split(),\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            return result.stdout.strip()\n        except subprocess.CalledProcessError as e:\n            return f\"Error: {e.stderr}\"\n    \n    def get_status(self):\n        \"\"\"Get overall status\"\"\"\n        return self.execute_command(\"status\")\n    \n    def get_jail_status(self, jail):\n        \"\"\"Get specific jail status\"\"\"\n        status = self.execute_command(f\"status {jail}\")\n        \n        # Parse status output\n        lines = status.split('\\n')\n        result = {\n            'filter': {},\n            'actions': {},\n            'currently_failed': 0,\n            'total_failed': 0,\n            'currently_banned': 0,\n            'total_banned': 0,\n            'banned_ips': []\n        }\n        \n        for line in lines:\n            if 'Currently failed:' in line:\n                result['currently_failed'] = int(line.split(':')[1].strip())\n            elif 'Total failed:' in line:\n                result['total_failed'] = int(line.split(':')[1].strip())\n            elif 'Currently banned:' in line:\n                result['currently_banned'] = int(line.split(':')[1].strip())\n            elif 'Total banned:' in line:\n                result['total_banned'] = int(line.split(':')[1].strip())\n            elif 'Banned IP list:' in line:\n                ips = line.split(':')[1].strip()\n                result['banned_ips'] = ips.split() if ips else []\n        \n        return result\n    \n    def ban_ip(self, jail, ip, duration=None):\n        \"\"\"Ban an IP address\"\"\"\n        if duration:\n            return self.execute_command(f\"set {jail} banip {ip} {duration}\")\n        else:\n            return self.execute_command(f\"set {jail} banip {ip}\")\n    \n    def unban_ip(self, jail, ip):\n        \"\"\"Unban an IP address\"\"\"\n        return self.execute_command(f\"set {jail} unbanip {ip}\")\n    \n    def get_banned_ips(self):\n        \"\"\"Get all banned IPs across all jails\"\"\"\n        banned = {}\n        jails = self.get_jail_list()\n        \n        for jail in jails:\n            status = self.get_jail_status(jail)\n            if status['banned_ips']:\n                banned[jail] = status['banned_ips']\n        \n        return banned\n    \n    def get_jail_list(self):\n        \"\"\"Get list of all jails\"\"\"\n        status = self.get_status()\n        for line in status.split('\\n'):\n            if 'Jail list:' in line:\n                jails = line.split(':')[1].strip()\n                return [j.strip() for j in jails.split(',')]\n        return []\n    \n    def add_jail(self, jail_config):\n        \"\"\"Add a new jail configuration\"\"\"\n        config_path = f\"/etc/fail2ban/jail.d/{jail_config['name']}.conf\"\n        \n        config_content = f\"\"\"[{jail_config['name']}]\nenabled = true\nport = {jail_config.get('port', 'http,https')}\nfilter = {jail_config.get('filter', jail_config['name'])}\nlogpath = {jail_config['logpath']}\nmaxretry = {jail_config.get('maxretry', 5)}\nbantime = {jail_config.get('bantime', 3600)}\nfindtime = {jail_config.get('findtime', 600)}\n\"\"\"\n        \n        with open(config_path, 'w') as f:\n            f.write(config_content)\n        \n        # Reload configuration\n        return self.execute_command(\"reload\")\n\n# Example usage\nif __name__ == '__main__':\n    f2b = Fail2banManager()\n    \n    # Get overall status\n    print(\"Fail2ban Status:\")\n    print(f2b.get_status())\n    print(\"\\n\" + \"=\"*50 + \"\\n\")\n    \n    # Get banned IPs\n    print(\"Banned IPs by Jail:\")\n    banned = f2b.get_banned_ips()\n    for jail, ips in banned.items():\n        print(f\"\\n{jail}: {', '.join(ips) if ips else 'None'}\")\n    \n    # Check specific jail\n    print(\"\\n\" + \"=\"*50 + \"\\n\")\n    print(\"SSH Jail Status:\")\n    ssh_status = f2b.get_jail_status('sshd')\n    print(json.dumps(ssh_status, indent=2))\n```\n\n### Web Dashboard\n\n```python\n#!/usr/bin/env python3\n# fail2ban_dashboard.py\n\nfrom flask import Flask, render_template, jsonify, request\nfrom fail2ban_api import Fail2banManager\nimport json\n\napp = Flask(__name__)\nf2b = Fail2banManager()\n\n@app.route('/')\ndef dashboard():\n    return render_template('dashboard.html')\n\n@app.route('/api/status')\ndef api_status():\n    jails = f2b.get_jail_list()\n    status = {\n        'jails': {},\n        'total_banned': 0,\n        'total_failed': 0\n    }\n    \n    for jail in jails:\n        jail_status = f2b.get_jail_status(jail)\n        status['jails'][jail] = jail_status\n        status['total_banned'] += jail_status['total_banned']\n        status['total_failed'] += jail_status['total_failed']\n    \n    return jsonify(status)\n\n@app.route('/api/ban', methods=['POST'])\ndef api_ban():\n    data = request.json\n    result = f2b.ban_ip(data['jail'], data['ip'], data.get('duration'))\n    return jsonify({'success': True, 'result': result})\n\n@app.route('/api/unban', methods=['POST'])\ndef api_unban():\n    data = request.json\n    result = f2b.unban_ip(data['jail'], data['ip'])\n    return jsonify({'success': True, 'result': result})\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000, debug=True)\n```\n\n### Shell Integration\n\n```bash\n#!/bin/bash\n# fail2ban-utils.sh - Fail2ban utility functions\n\n# Source this file in other scripts: source /usr/local/lib/fail2ban-utils.sh\n\n# Check if IP is banned\nis_ip_banned() {\n    local ip=\"$1\"\n    local jail=\"${2:-}\"\n    \n    if [ -z \"$jail\" ]; then\n        # Check all jails\n        for j in $(fail2ban-client status | grep \"Jail list\" | sed 's/.*://;s/,//g'); do\n            if fail2ban-client status \"$j\" | grep -q \"$ip\"; then\n                echo \"IP $ip is banned in jail: $j\"\n                return 0\n            fi\n        done\n    else\n        # Check specific jail\n        if fail2ban-client status \"$jail\" | grep -q \"$ip\"; then\n            return 0\n        fi\n    fi\n    \n    return 1\n}\n\n# Ban IP with reason logging\nban_ip_with_reason() {\n    local jail=\"$1\"\n    local ip=\"$2\"\n    local reason=\"$3\"\n    local duration=\"${4:-3600}\"\n    \n    echo \"[$(date)] Banning IP $ip in jail $jail for $duration seconds. Reason: $reason\" >> /var/log/fail2ban-manual-bans.log\n    fail2ban-client set \"$jail\" banip \"$ip\" \"$duration\"\n}\n\n# Get ban statistics\nget_ban_stats() {\n    local total_banned=0\n    local total_failed=0\n    \n    echo \"Fail2ban Statistics\"\n    echo \"==================\"\n    \n    for jail in $(fail2ban-client status | grep \"Jail list\" | sed 's/.*://;s/,//g'); do\n        local status=$(fail2ban-client status \"$jail\")\n        local banned=$(echo \"$status\" | grep \"Total banned:\" | awk '{print $NF}')\n        local failed=$(echo \"$status\" | grep \"Total failed:\" | awk '{print $NF}')\n        \n        echo \"[$jail]\"\n        echo \"  Failed: $failed\"\n        echo \"  Banned: $banned\"\n        \n        total_banned=$((total_banned + banned))\n        total_failed=$((total_failed + failed))\n    done\n    \n    echo\n    echo \"Totals:\"\n    echo \"  Failed: $total_failed\"\n    echo \"  Banned: $total_banned\"\n}\n\n# Whitelist management\nadd_to_whitelist() {\n    local ip=\"$1\"\n    \n    # Add to fail2ban whitelist\n    if grep -q \"ignoreip\" /etc/fail2ban/jail.local; then\n        sed -i \"/ignoreip/s/$/,$ip/\" /etc/fail2ban/jail.local\n    else\n        echo \"ignoreip = 127.0.0.1/8 ::1 $ip\" >> /etc/fail2ban/jail.local\n    fi\n    \n    # Reload configuration\n    fail2ban-client reload\n    \n    echo \"Added $ip to whitelist\"\n}\n\n# Export functions for use in other scripts\nexport -f is_ip_banned\nexport -f ban_ip_with_reason\nexport -f get_ban_stats\nexport -f add_to_whitelist\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update fail2ban\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade fail2ban\n\n# Arch Linux\nsudo pacman -Syu fail2ban\n\n# Alpine Linux\napk update && apk upgrade fail2ban\n\n# openSUSE\nsudo zypper update fail2ban\n\n# FreeBSD\npkg update && pkg upgrade py39-fail2ban\n\n# Always backup before updates\n/usr/local/bin/fail2ban-backup.sh\n\n# Restart after updates\nsudo systemctl restart fail2ban\n```\n\n### Regular Maintenance Tasks\n\n```bash\n#!/bin/bash\n# fail2ban-maintenance.sh\n\nLOG_FILE=\"/var/log/fail2ban-maintenance.log\"\n\nlog() {\n    echo \"[$(date '+%Y-%m-%d %H:%M:%S')] $1\" | tee -a \"$LOG_FILE\"\n}\n\n# Update filters from repository\nupdate_filters() {\n    log \"Updating fail2ban filters...\"\n    \n    cd /tmp\n    git clone https://github.com/fail2ban/fail2ban.git\n    \n    # Backup existing filters\n    cp -r /etc/fail2ban/filter.d /etc/fail2ban/filter.d.bak\n    \n    # Copy new filters\n    cp /tmp/fail2ban/config/filter.d/* /etc/fail2ban/filter.d/\n    \n    # Test configuration\n    if fail2ban-client -t; then\n        log \"Filter update successful\"\n    else\n        log \"ERROR: Filter update failed, restoring backup\"\n        rm -rf /etc/fail2ban/filter.d\n        mv /etc/fail2ban/filter.d.bak /etc/fail2ban/filter.d\n    fi\n    \n    rm -rf /tmp/fail2ban\n}\n\n# Clean old database entries\nclean_database() {\n    log \"Cleaning fail2ban database...\"\n    \n    # Get database size before\n    size_before=$(ls -lh /var/lib/fail2ban/fail2ban.sqlite3 | awk '{print $5}')\n    \n    # Clean entries older than 30 days\n    sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"DELETE FROM bans WHERE timeofban < strftime('%s', 'now', '-30 days');\"\n    sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"VACUUM;\"\n    \n    # Get database size after\n    size_after=$(ls -lh /var/lib/fail2ban/fail2ban.sqlite3 | awk '{print $5}')\n    \n    log \"Database cleaned. Size: $size_before -> $size_after\"\n}\n\n# Check and update GeoIP database\nupdate_geoip() {\n    log \"Updating GeoIP database...\"\n    \n    if command -v geoipupdate >/dev/null 2>&1; then\n        geoipupdate\n        log \"GeoIP database updated\"\n    else\n        log \"GeoIP update tool not installed\"\n    fi\n}\n\n# Generate monthly report\ngenerate_monthly_report() {\n    log \"Generating monthly report...\"\n    \n    report_file=\"/var/log/fail2ban-monthly-$(date +%Y%m).txt\"\n    \n    {\n        echo \"Fail2ban Monthly Report - $(date '+%B %Y')\"\n        echo \"========================================\"\n        echo\n        \n        # Get ban statistics from database\n        echo \"Top 10 Banned IPs:\"\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"SELECT ip, COUNT(*) as count FROM bans WHERE timeofban > strftime('%s', 'now', '-30 days') GROUP BY ip ORDER BY count DESC LIMIT 10;\"\n        \n        echo\n        echo \"Bans by Jail:\"\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"SELECT jail, COUNT(*) as count FROM bans WHERE timeofban > strftime('%s', 'now', '-30 days') GROUP BY jail ORDER BY count DESC;\"\n        \n        echo\n        echo \"Daily Ban Trend:\"\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 \"SELECT date(timeofban, 'unixepoch') as day, COUNT(*) as count FROM bans WHERE timeofban > strftime('%s', 'now', '-30 days') GROUP BY day ORDER BY day;\"\n    } > \"$report_file\"\n    \n    log \"Monthly report saved to: $report_file\"\n}\n\n# Main maintenance routine\nmain() {\n    log \"Starting fail2ban maintenance...\"\n    \n    update_filters\n    clean_database\n    update_geoip\n    generate_monthly_report\n    \n    # Reload fail2ban\n    fail2ban-client reload\n    \n    log \"Maintenance completed\"\n}\n\n# Run maintenance\nmain\n\n# Schedule in cron:\n# 0 2 1 * * /usr/local/bin/fail2ban-maintenance.sh\n```\n\n### Health Check Script\n\n```bash\n#!/bin/bash\n# fail2ban-health.sh\n\n# Check fail2ban health\ncheck_health() {\n    local status=0\n    \n    # Check service\n    if ! systemctl is-active --quiet fail2ban; then\n        echo \"CRITICAL: fail2ban service is not running\"\n        status=2\n    fi\n    \n    # Check database\n    if [ ! -f /var/lib/fail2ban/fail2ban.sqlite3 ]; then\n        echo \"WARNING: Database file missing\"\n        status=1\n    fi\n    \n    # Check socket\n    if [ ! -S /var/run/fail2ban/fail2ban.sock ]; then\n        echo \"WARNING: Socket file missing\"\n        status=1\n    fi\n    \n    # Check jails\n    active_jails=$(fail2ban-client status | grep \"Jail list\" | wc -w)\n    if [ \"$active_jails\" -lt 3 ]; then\n        echo \"WARNING: Only $active_jails jails active\"\n        status=1\n    fi\n    \n    if [ $status -eq 0 ]; then\n        echo \"OK: fail2ban is healthy\"\n    fi\n    \n    exit $status\n}\n\ncheck_health\n```\n\n## Additional Resources\n\n- [Official Fail2ban Documentation](https://www.fail2ban.org/)\n- [Fail2ban GitHub Repository](https://github.com/fail2ban/fail2ban)\n- [Fail2ban Wiki](https://github.com/fail2ban/fail2ban/wiki)\n- [Filter Development Guide](https://fail2ban.readthedocs.io/en/latest/filters.html)\n- [Action Development Guide](https://fail2ban.readthedocs.io/en/latest/actions.html)\n- [Community Filters](https://github.com/fail2ban/fail2ban/tree/master/config/filter.d)\n- [Best Practices Guide](https://www.fail2ban.org/wiki/index.php/Best_practices)\n- [Security Hardening Guide](https://www.fail2ban.org/wiki/index.php/Security)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.","readmeHtml":"<h1 id=\"fail2ban-installation-guide\" class=\"mobile-header\">Fail2ban Installation Guide</h1>\n<p class=\"mobile-paragraph\">Fail2ban is a free and open-source intrusion prevention software framework that protects servers from brute-force attacks. Written in Python, it monitors log files and bans IP addresses that show malicious signs such as too many password failures or seeking exploits. It serves as a powerful FOSS alternative to commercial security solutions like Cloudflare Rate Limiting, AWS WAF, or proprietary IPS systems, providing enterprise-grade protection without licensing costs or vendor lock-in.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum (2+ cores recommended for high-traffic servers)</li>\n<li class=\"mobile-list-item\">RAM: 512MB minimum (1GB+ recommended)</li>\n<li class=\"mobile-list-item\">Storage: 100MB for installation, plus log storage</li>\n<li class=\"mobile-list-item\">Network: Stable connectivity for updates</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution with systemd or init</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (limited support)</li>\n<li class=\"mobile-list-item\">Windows: WSL2 with Linux distribution</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Firewall access (iptables, nftables, pf, or ipfw)</li>\n<li class=\"mobile-list-item\">Root access to modify firewall rules</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">Python 3.5+ (3.8+ recommended)</li>\n<li class=\"mobile-list-item\">iptables, nftables, or equivalent firewall</li>\n<li class=\"mobile-list-item\">systemd or init system</li>\n<li class=\"mobile-list-item\">Log files to monitor (sshd, nginx, apache, etc.)</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo dnf install -y epel-release\n\n# Install fail2ban\nsudo dnf install -y fail2ban fail2ban-systemd\n\n# Install additional dependencies\nsudo dnf install -y python3-systemd python3-pyinotify\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version\nsudo systemctl status fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install fail2ban\nsudo apt install -y fail2ban\n\n# Install additional tools\nsudo apt install -y python3-systemd python3-pyinotify iptables-persistent\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version\nsudo systemctl status fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fail2ban\nsudo pacman -S fail2ban\n\n# Install additional dependencies\nsudo pacman -S python-systemd python-pyinotify\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fail2ban\napk add --no-cache fail2ban fail2ban-openrc\n\n# Install additional dependencies\napk add --no-cache py3-systemd iptables ip6tables\n\n# Enable and start service\nrc-update add fail2ban default\nrc-service fail2ban start\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># openSUSE Leap/Tumbleweed\nsudo zypper install -y fail2ban python3-systemd\n\n# SLES 15\nsudo SUSEConnect -p sle-module-basesystem/15.5/x86_64\nsudo zypper install -y fail2ban\n\n# Enable and start service\nsudo systemctl enable --now fail2ban\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-service=fail2ban\nsudo firewall-cmd --reload\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install fail2ban\n\n# Copy configuration files\nsudo cp /usr/local/etc/fail2ban/fail2ban.conf /usr/local/etc/fail2ban/fail2ban.local\nsudo cp /usr/local/etc/fail2ban/jail.conf /usr/local/etc/fail2ban/jail.local\n\n# Start service\nsudo brew services start fail2ban\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install py39-fail2ban\n\n# Enable in rc.conf\necho &#039;fail2ban_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Copy configuration\ncp /usr/local/etc/fail2ban/fail2ban.conf /usr/local/etc/fail2ban/fail2ban.local\ncp /usr/local/etc/fail2ban/jail.conf /usr/local/etc/fail2ban/jail.local\n\n# Start service\nservice fail2ban start\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-wsl2\" class=\"mobile-header\">Windows (WSL2)</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Install WSL2 with Ubuntu\nwsl --install -d Ubuntu-22.04\n\n# Inside WSL2 Ubuntu\nsudo apt update\nsudo apt install -y fail2ban\n\n# Configure for Windows logs monitoring\n# Note: Limited functionality - primarily for learning/testing\n\n# Verify installation\nfail2ban-client --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create local configuration files (never edit .conf files directly)\nsudo cp /etc/fail2ban/fail2ban.conf /etc/fail2ban/fail2ban.local\nsudo cp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\n\n# Edit main configuration\nsudo tee /etc/fail2ban/fail2ban.local &lt;&lt;EOF\n[Definition]\nloglevel = INFO\nlogtarget = /var/log/fail2ban.log\nsyslogsocket = auto\nsocket = /var/run/fail2ban/fail2ban.sock\npidfile = /var/run/fail2ban/fail2ban.pid\ndbfile = /var/lib/fail2ban/fail2ban.sqlite3\ndbpurgeage = 1d\nEOF\n\n# Configure basic jail settings\nsudo tee /etc/fail2ban/jail.local &lt;&lt;EOF\n[DEFAULT]\n# Ban duration (in seconds)\nbantime = 3600\n# Time window for maxretry\nfindtime = 600\n# Number of failures before ban\nmaxretry = 5\n# Email notifications\ndestemail = admin@example.com\nsender = fail2ban@example.com\nmta = sendmail\n# Action to take\naction = %(action_mwl)s\n\n# Whitelist\nignoreip = 127.0.0.1/8 ::1 192.168.0.0/16\n\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\n\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nport = http,https\nlogpath = /var/log/nginx/error.log\n\n[nginx-limit-req]\nenabled = true\nfilter = nginx-limit-req\nport = http,https\nlogpath = /var/log/nginx/error.log\nmaxretry = 10\nfindtime = 60\nbantime = 600\n\n[apache-auth]\nenabled = false\nport = http,https\nfilter = apache-auth\nlogpath = /var/log/apache*/*error.log\nmaxretry = 6\n\n[postfix]\nenabled = false\nport = smtp,465,submission\nfilter = postfix\nlogpath = /var/log/mail.log\nEOF\n\n# Restart fail2ban\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-jail-configuration\" class=\"mobile-header\">Custom Jail Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create custom filter for application\nsudo tee /etc/fail2ban/filter.d/myapp.conf &lt;&lt;EOF\n[Definition]\nfailregex = ^&lt;HOST&gt; - - \\[.*\\] &quot;POST /login HTTP/.*&quot; 401\n            ^Failed login from &lt;HOST&gt;\n            ^Authentication failure for .* from &lt;HOST&gt;\nignoreregex =\nEOF\n\n# Create jail for custom application\nsudo tee -a /etc/fail2ban/jail.local &lt;&lt;EOF\n\n[myapp]\nenabled = true\nfilter = myapp\nport = 8080\nlogpath = /var/log/myapp/access.log\nmaxretry = 3\nbantime = 3600\nfindtime = 300\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable fail2ban\n\n# Start service\nsudo systemctl start fail2ban\n\n# Stop service\nsudo systemctl stop fail2ban\n\n# Restart service\nsudo systemctl restart fail2ban\n\n# Reload configuration\nsudo systemctl reload fail2ban\n\n# Check status\nsudo systemctl status fail2ban\n\n# View logs\nsudo journalctl -u fail2ban -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add fail2ban default\n\n# Start service\nrc-service fail2ban start\n\n# Stop service\nrc-service fail2ban stop\n\n# Restart service\nrc-service fail2ban restart\n\n# Check status\nrc-service fail2ban status\n\n# View logs\ntail -f /var/log/fail2ban.log</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in rc.conf\necho &#039;fail2ban_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice fail2ban start\n\n# Stop service\nservice fail2ban stop\n\n# Restart service\nservice fail2ban restart\n\n# Check status\nservice fail2ban status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using brew services\nbrew services start fail2ban\nbrew services stop fail2ban\nbrew services restart fail2ban\n\n# Check status\nbrew services list | grep fail2ban\n\n# Manual control\nsudo /usr/local/bin/fail2ban-client start\nsudo /usr/local/bin/fail2ban-client stop</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<h3 id=\"multi-service-protection\" class=\"mobile-header\">Multi-Service Protection</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Comprehensive jail configuration\nsudo tee /etc/fail2ban/jail.d/multi-service.conf &lt;&lt;EOF\n# SSH Protection\n[sshd]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 3\nbantime = 3600\nfindtime = 600\n\n[sshd-ddos]\nenabled = true\nport = ssh\nfilter = sshd-ddos\nlogpath = /var/log/auth.log\nmaxretry = 10\nbantime = 600\nfindtime = 60\n\n# Web Server Protection\n[nginx-http-auth]\nenabled = true\nfilter = nginx-http-auth\nport = http,https\nlogpath = /var/log/nginx/error.log\nmaxretry = 3\n\n[nginx-noscript]\nenabled = true\nport = http,https\nfilter = nginx-noscript\nlogpath = /var/log/nginx/access.log\nmaxretry = 5\n\n[nginx-badbots]\nenabled = true\nport = http,https\nfilter = nginx-badbots\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\nbantime = 86400\n\n[nginx-noproxy]\nenabled = true\nport = http,https\nfilter = nginx-noproxy\nlogpath = /var/log/nginx/access.log\nmaxretry = 2\n\n# Database Protection\n[mysqld-auth]\nenabled = true\nfilter = mysqld-auth\nport = 3306\nlogpath = /var/log/mysql/error.log\nmaxretry = 5\n\n[postgresql]\nenabled = true\nport = 5432\nfilter = postgresql\nlogpath = /var/log/postgresql/*.log\nmaxretry = 5\n\n# Mail Server Protection\n[postfix]\nenabled = true\nport = smtp,465,submission\nfilter = postfix\nlogpath = /var/log/mail.log\n\n[postfix-sasl]\nenabled = true\nport = smtp,465,submission,imap,imaps,pop3,pop3s\nfilter = postfix-sasl\nlogpath = /var/log/mail.log\n\n[dovecot]\nenabled = true\nport = pop3,pop3s,imap,imaps,submission,465,sieve\nfilter = dovecot\nlogpath = /var/log/mail.log\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"geoip-blocking\" class=\"mobile-header\">GeoIP Blocking</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install GeoIP database\nsudo apt install geoip-database geoip-bin  # Debian/Ubuntu\nsudo dnf install GeoIP GeoIP-data         # RHEL/CentOS\n\n# Create GeoIP action\nsudo tee /etc/fail2ban/action.d/geoip-block.conf &lt;&lt;EOF\n[Definition]\nactionstart = \nactionstop = \nactioncheck = \nactionban = if [ &quot;\\$(geoiplookup &lt;ip&gt; | grep -v &#039;US\\|CA\\|GB&#039;)&quot; ]; then iptables -I f2b-&lt;name&gt; 1 -s &lt;ip&gt; -j DROP; fi\nactionunban = iptables -D f2b-&lt;name&gt; -s &lt;ip&gt; -j DROP\nEOF\n\n# Use in jail\nsudo tee -a /etc/fail2ban/jail.local &lt;&lt;EOF\n\n[sshd-geoip]\nenabled = true\nfilter = sshd\naction = geoip-block[name=%(__name__)s]\nlogpath = /var/log/auth.log\nmaxretry = 3\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"persistent-bans\" class=\"mobile-header\">Persistent Bans</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create persistent ban action\nsudo tee /etc/fail2ban/action.d/iptables-persistent.conf &lt;&lt;EOF\n[Definition]\nactionstart = iptables -N f2b-&lt;name&gt;\n              iptables -A f2b-&lt;name&gt; -j RETURN\n              iptables -I &lt;chain&gt; -p &lt;protocol&gt; --dport &lt;port&gt; -j f2b-&lt;name&gt;\n              # Load persistent bans\n              [ -f /etc/fail2ban/persistent/&lt;name&gt;.bans ] &amp;&amp; while read ip; do iptables -I f2b-&lt;name&gt; 1 -s \\$ip -j DROP; done &lt; /etc/fail2ban/persistent/&lt;name&gt;.bans\n\nactionstop = iptables -D &lt;chain&gt; -p &lt;protocol&gt; --dport &lt;port&gt; -j f2b-&lt;name&gt;\n             iptables -F f2b-&lt;name&gt;\n             iptables -X f2b-&lt;name&gt;\n\nactionban = iptables -I f2b-&lt;name&gt; 1 -s &lt;ip&gt; -j DROP\n            echo &#039;&lt;ip&gt;&#039; &gt;&gt; /etc/fail2ban/persistent/&lt;name&gt;.bans\n            sort -u /etc/fail2ban/persistent/&lt;name&gt;.bans -o /etc/fail2ban/persistent/&lt;name&gt;.bans\n\nactionunban = iptables -D f2b-&lt;name&gt; -s &lt;ip&gt; -j DROP\n              sed -i &#039;/&lt;ip&gt;/d&#039; /etc/fail2ban/persistent/&lt;name&gt;.bans\nEOF\n\n# Create directory for persistent bans\nsudo mkdir -p /etc/fail2ban/persistent</code></pre>\n      </div>\n    </div>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-reverse-proxy-configuration\" class=\"mobile-header\">nginx Reverse Proxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\"># /etc/nginx/conf.d/fail2ban.conf\n# Pass real IP to backend for fail2ban processing\n\nmap $remote_addr $proxy_forwarded_elem {\n    ~^[0-9.]+$          &quot;for=$remote_addr&quot;;\n    ~^[0-9A-Fa-f:.]+$   &quot;for=\\&quot;[$remote_addr]\\&quot;&quot;;\n    default             &quot;for=unknown&quot;;\n}\n\nmap $http_forwarded $proxy_add_forwarded {\n    &quot;&quot;      &quot;$proxy_forwarded_elem&quot;;\n    default &quot;$http_forwarded, $proxy_forwarded_elem&quot;;\n}\n\nserver {\n    listen 80;\n    server_name app.example.com;\n\n    location / {\n        proxy_pass http://backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Forwarded $proxy_add_forwarded;\n        \n        # Rate limiting\n        limit_req zone=app_limit burst=10 nodelay;\n        limit_req_status 429;\n    }\n}\n\n# Define rate limit zone\nlimit_req_zone $binary_remote_addr zone=app_limit:10m rate=10r/s;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\"># /etc/haproxy/haproxy.cfg\nglobal\n    log /dev/log local0\n    log /dev/log local1 notice\n\ndefaults\n    log global\n    option httplog\n    option forwardfor\n\nfrontend web_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/cert.pem\n    \n    # Track abusive behavior\n    stick-table type ip size 100k expire 30m store conn_rate(3s),conn_cur,http_req_rate(10s)\n    \n    # Block if connection rate exceeds limit\n    tcp-request connection reject if { src_conn_rate gt 20 }\n    tcp-request connection track-sc0 src\n    \n    # Block if HTTP request rate exceeds limit\n    http-request deny if { sc_http_req_rate(0) gt 20 }\n    \n    default_backend web_servers\n\nbackend web_servers\n    # Forward real IP for fail2ban\n    option forwardfor header X-Real-IP\n    server web1 192.168.1.10:80 check\n    server web2 192.168.1.11:80 check</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-reverse-proxy\" class=\"mobile-header\">Apache Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\"># /etc/apache2/sites-available/reverse-proxy.conf\n&lt;VirtualHost *:80&gt;\n    ServerName app.example.com\n    \n    # Enable required modules\n    # a2enmod proxy proxy_http remoteip\n    \n    # Trust proxy headers from load balancer\n    RemoteIPHeader X-Forwarded-For\n    RemoteIPTrustedProxy 10.0.0.0/8\n    \n    # Log real IP\n    LogFormat &quot;%a %l %u %t \\&quot;%r\\&quot; %&gt;s %O \\&quot;%{Referer}i\\&quot; \\&quot;%{User-Agent}i\\&quot;&quot; proxy\n    CustomLog ${APACHE_LOG_DIR}/access.log proxy\n    \n    ProxyPass / http://backend/\n    ProxyPassReverse / http://backend/\n    \n    # Pass real IP to backend\n    ProxyPreserveHost On\n    RequestHeader set X-Real-IP &quot;%{REMOTE_ADDR}s&quot;\n    RequestHeader set X-Forwarded-For &quot;%{X-Forwarded-For}i&quot;\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"enhanced-security-rules\" class=\"mobile-header\">Enhanced Security Rules</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive security configuration\nsudo tee /etc/fail2ban/jail.d/security-enhanced.conf &lt;&lt;EOF\n[DEFAULT]\n# Aggressive ban settings for security\nbantime = 86400    # 24 hours\nfindtime = 3600    # 1 hour window\nmaxretry = 3       # Low tolerance\nchain = INPUT      # iptables chain\nprotocol = tcp     # Default protocol\naction = %(action_mwl)s\n\n# Recidive jail for repeat offenders\n[recidive]\nenabled = true\nfilter = recidive\nlogpath = /var/log/fail2ban.log\nbantime = 604800   # 1 week\nfindtime = 86400   # 1 day\nmaxretry = 3\naction = iptables-allports[name=recidive, protocol=all]\n         sendmail-whois-lines[name=recidive, logpath=/var/log/fail2ban.log]\n\n# Port scanning detection\n[portscan]\nenabled = true\nfilter = portscan\nlogpath = /var/log/syslog\nmaxretry = 6\nbantime = 7200\naction = iptables-allports[name=portscan, protocol=all]\n\n# Block bad bots\n[apache-badbots]\nenabled = true\nport = http,https\nfilter = apache-badbots\nlogpath = /var/log/apache*/*access.log\nbantime = 172800   # 2 days\nmaxretry = 1\n\n# WordPress protection\n[wordpress]\nenabled = true\nfilter = wordpress\nport = http,https\nlogpath = /var/log/apache*/*access.log\nmaxretry = 3\nbantime = 3600\n\n# Aggressive SSH protection\n[sshd-aggressive]\nenabled = true\nport = ssh\nfilter = sshd\nlogpath = /var/log/auth.log\nmaxretry = 2\nbantime = 86400\nfindtime = 300\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-security-filters\" class=\"mobile-header\">Custom Security Filters</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create port scan detection filter\nsudo tee /etc/fail2ban/filter.d/portscan.conf &lt;&lt;EOF\n[Definition]\nfailregex = UFW BLOCK.* SRC=&lt;HOST&gt;\n            rejected connection: .* SRC=&lt;HOST&gt;\n            dropped: .* SRC=&lt;HOST&gt;\nignoreregex =\nEOF\n\n# Create WordPress attack filter\nsudo tee /etc/fail2ban/filter.d/wordpress.conf &lt;&lt;EOF\n[Definition]\nfailregex = ^&lt;HOST&gt; .* &quot;POST /wp-login.php\n            ^&lt;HOST&gt; .* &quot;POST /xmlrpc.php\n            ^&lt;HOST&gt; .* &quot;GET /wp-admin/ HTTP/[0-9.]+&quot; 403\n            ^&lt;HOST&gt; .* &quot;GET /wp-content/.*/.*\\.php HTTP/[0-9.]+&quot; \nignoreregex = ^&lt;HOST&gt; .* &quot;GET /wp-admin/admin-ajax.php\nEOF\n\n# Create bad bot filter\nsudo tee /etc/fail2ban/filter.d/badbots.conf &lt;&lt;EOF\n[Definition]\nbadbotscustom = EmailCollector|WebEMailExtrac|TrackBack/1\\.02|sogou music spider|(?:Mozilla/\\d+\\.0\\s+)$\nbadbots = Atomic_Email_Hunter/4\\.0|atSpider/1\\.0|autoemailspider|bwh3_user_agent|China Local Browse 2\\.6|ContactBot/0\\.2|ContentSmartz|DataCha0s/2\\.0|DBrowse 1\\.4b|DBrowse 1\\.4d|Demo Bot DOT 16b|Demo Bot Z 16b|DSurf15a 01|DSurf15a 71|DSurf15a 81|DSurf15a VA|EBrowse 1\\.4b|Educate Search VxB|EmailSiphon|EmailSpider|EmailWolf 1\\.00|ESurf15a 15|ExtractorPro|Franklin Locator 1\\.8|FSurf15a 01|Full Web Bot 0416B|Full Web Bot 0516B|Full Web Bot 2816B|Guestbook Auto Submitter|Industry Program 1\\.0\\.x|ISC Systems iRc Search 2\\.1|IUPUI Research Bot v 1\\.9a|LARBIN-EXPERIMENTAL \\(efp@gmx\\.net\\)|LetsCrawl\\.com/1\\.0 \\+http\\://letscrawl\\.com/|Lincoln State Web Browser|LMQueueBot/0\\.2|LWP\\:\\:Simple/5\\.803|Mac Finder 1\\.0\\.xx|MFC Foundation Class Library 4\\.0|Microsoft URL Control - 6\\.00\\.8xxx|Missauga Locate 1\\.0\\.0|Missigua Locator 1\\.9|Missouri College Browse|Mizzu Labs 2\\.2|Mo College 1\\.9|MVAClient|Mozilla/2\\.0 \\(compatible; NEWT ActiveX; Win32\\)|Mozilla/3\\.0 \\(compatible; Indy Library\\)|Mozilla/3\\.0 \\(compatible; scan4mail \\(advanced version\\) http\\://www\\.peterspages\\.net/?scan4mail\\)|Mozilla/4\\.0 \\(compatible; Advanced Email Extractor v2\\.xx\\)|Mozilla/4\\.0 \\(compatible; Iplexx Spider/1\\.0 http\\://www\\.iplexx\\.at\\)|Mozilla/4\\.0 \\(compatible; MSIE 5\\.0; Windows NT; DigExt; DTS Agent|Mozilla/4\\.0 efp@gmx\\.net|Mozilla/5\\.0 \\(Version\\: xxxx Type\\:xx\\)|NameOfAgent \\(CMS Spider\\)|NASA Search 1\\.0|Nsauditor/1\\.x|PBrowse 1\\.4b|PEval 1\\.4b|Poirot|Port Huron Labs|Production Bot 0116B|Production Bot 2016B|Production Bot DOT 3016B|Program Shareware 1\\.0\\.2|PSurf15a 11|PSurf15a 51|PSurf15a VA|psycheclone|RSurf15a 41|RSurf15a 51|RSurf15a 81|searchbot admin@google\\.com|ShablastBot 1\\.0|snap\\.com beta crawler v0|Snapbot/1\\.0|Snapbot/1\\.0 \\(Snap Shots&amp;#44; \\+http\\://www\\.snap\\.com\\)|sogou develop spider|Sogou Orion spider/3\\.0\\(\\+http\\://www\\.sogou\\.com/docs/help/webmasters\\.htm#07\\)|sogou spider|Sogou web spider/3\\.0\\(\\+http\\://www\\.sogou\\.com/docs/help/webmasters\\.htm#07\\)|sohu agent|SSurf15a 11 |TSurf15a 11|Under the Rainbow 2\\.2|User-Agent\\: Mozilla/4\\.0 \\(compatible; MSIE 6\\.0; Windows NT 5\\.1\\)|VadixBot|WebVulnCrawl\\.unknown/1\\.0 libwww-perl/5\\.803|Wells Search II|WEP Search 00\n\nfailregex = ^&lt;HOST&gt; -.*&quot;(GET|POST|HEAD).*HTTP.*&quot;.*(?:%(badbots)s|%(badbotscustom)s).*&quot;$\nignoreregex =\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-integration\" class=\"mobile-header\">Firewall Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># iptables integration\nsudo tee /etc/fail2ban/action.d/iptables-common.local &lt;&lt;EOF\n[Init]\n# Option: blocktype\n# Note: This is the default block type for all iptables actions\nblocktype = DROP\n\n# Option: iptables\n# Note: Path to iptables command\niptables = /sbin/iptables\n\n# Option: protocol\n# Note: Default protocol\nprotocol = tcp\n\n# Option: chain\n# Note: Default chain for filter table\nchain = INPUT\nEOF\n\n# nftables integration\nsudo tee /etc/fail2ban/action.d/nftables.local &lt;&lt;EOF\n[Definition]\nactionstart = nft add table inet fail2ban\n              nft add chain inet fail2ban f2b-&lt;name&gt; { type filter hook input priority 0 \\; }\n\nactionstop = nft delete chain inet fail2ban f2b-&lt;name&gt;\n\nactionban = nft add rule inet fail2ban f2b-&lt;name&gt; ip saddr &lt;ip&gt; drop\n\nactionunban = nft delete rule inet fail2ban f2b-&lt;name&gt; handle \\$(nft -a list chain inet fail2ban f2b-&lt;name&gt; | grep &lt;ip&gt; | awk &#039;{print \\$NF}&#039;)\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<h3 id=\"sqlite-database-configuration\" class=\"mobile-header\">SQLite Database Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Default SQLite database location\nls -la /var/lib/fail2ban/fail2ban.sqlite3\n\n# Custom database configuration\nsudo tee -a /etc/fail2ban/fail2ban.local &lt;&lt;EOF\n\n[Definition]\n# Database configuration\ndbfile = /var/lib/fail2ban/fail2ban.sqlite3\ndbpurgeage = 7d\nEOF\n\n# View database content\nsudo sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;SELECT * FROM bans;&quot;\nsudo sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;SELECT jail, ip, COUNT(*) as count FROM bans GROUP BY jail, ip ORDER BY count DESC;&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"mysql-backend-configuration\" class=\"mobile-header\">MySQL Backend Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install MySQL connector\nsudo apt install python3-pymysql  # Debian/Ubuntu\nsudo dnf install python3-PyMySQL   # RHEL/CentOS\n\n# Create database and user\nmysql -u root -p &lt;&lt;EOF\nCREATE DATABASE fail2ban;\nCREATE USER &#039;fail2ban&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;secure_password&#039;;\nGRANT ALL PRIVILEGES ON fail2ban.* TO &#039;fail2ban&#039;@&#039;localhost&#039;;\nFLUSH PRIVILEGES;\nEOF\n\n# Configure fail2ban for MySQL\nsudo tee /etc/fail2ban/fail2ban.d/mysql.conf &lt;&lt;EOF\n[Definition]\ndbdriver = mysql\ndbhost = localhost\ndbport = 3306\ndbuser = fail2ban\ndbpassword = secure_password\ndbname = fail2ban\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Optimize fail2ban performance\nsudo tee /etc/fail2ban/fail2ban.d/performance.conf &lt;&lt;EOF\n[Definition]\n# Use systemd journal instead of log files\nbackend = systemd\n\n# Use pyinotify for better performance\nbackend = pyinotify\n\n# Increase socket timeout\nsocket_timeout = 30\n\n# Database optimization\ndbmaxmatches = 100\ndbpurgeage = 1d\nEOF\n\n# Configure systemd limits\nsudo mkdir -p /etc/systemd/system/fail2ban.service.d\nsudo tee /etc/systemd/system/fail2ban.service.d/limits.conf &lt;&lt;EOF\n[Service]\n# Increase limits for better performance\nLimitNOFILE=65536\nLimitNPROC=4096\nMemoryLimit=512M\nCPUQuota=50%\nNice=-5\nEOF\n\nsudo systemctl daemon-reload\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"log-processing-optimization\" class=\"mobile-header\">Log Processing Optimization</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Use systemd journal backend for better performance\nsudo tee /etc/fail2ban/jail.d/systemd-backend.conf &lt;&lt;EOF\n[DEFAULT]\nbackend = systemd\n\n[sshd]\nenabled = true\nbackend = systemd\njournalmatch = _SYSTEMD_UNIT=ssh.service + _COMM=sshd\n\n[nginx]\nenabled = true\nbackend = systemd\njournalmatch = _SYSTEMD_UNIT=nginx.service\nEOF\n\n# Configure log rotation for fail2ban\nsudo tee /etc/logrotate.d/fail2ban &lt;&lt;EOF\n/var/log/fail2ban.log {\n    daily\n    rotate 7\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 640 root adm\n    sharedscripts\n    postrotate\n        fail2ban-client flushlogs 1&gt;/dev/null\n    endscript\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"built-in-monitoring\" class=\"mobile-header\">Built-in Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check fail2ban status\nsudo fail2ban-client status\n\n# Check specific jail status\nsudo fail2ban-client status sshd\n\n# Get banned IPs for all jails\nfor jail in $(sudo fail2ban-client status | grep &quot;Jail list&quot; | sed &#039;s/.*://;s/,//g&#039;); do\n    echo &quot;=== $jail ===&quot;\n    sudo fail2ban-client status $jail | grep &quot;Banned IP&quot;\ndone\n\n# Monitor fail2ban in real-time\nsudo tail -f /var/log/fail2ban.log\n\n# Show ban statistics\nsudo fail2ban-client banned</code></pre>\n      </div>\n    </div>\n<h3 id=\"monitoring-script\" class=\"mobile-header\">Monitoring Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-monitor.sh\n\nLOG_FILE=&quot;/var/log/fail2ban-monitor.log&quot;\nALERT_EMAIL=&quot;admin@example.com&quot;\n\nlog() {\n    echo &quot;[$(date &#039;+%Y-%m-%d %H:%M:%S&#039;)] $1&quot; | tee -a &quot;$LOG_FILE&quot;\n}\n\n# Check fail2ban service status\ncheck_service() {\n    if ! systemctl is-active --quiet fail2ban; then\n        log &quot;ERROR: fail2ban service is not running!&quot;\n        echo &quot;fail2ban service down on $(hostname)&quot; | mail -s &quot;fail2ban Alert&quot; &quot;$ALERT_EMAIL&quot;\n        return 1\n    fi\n    log &quot;fail2ban service is running&quot;\n}\n\n# Monitor ban activity\nmonitor_bans() {\n    local jail_list=$(fail2ban-client status | grep &quot;Jail list&quot; | sed &#039;s/.*://;s/,//g&#039;)\n    \n    for jail in $jail_list; do\n        local status=$(fail2ban-client status &quot;$jail&quot;)\n        local banned_count=$(echo &quot;$status&quot; | grep &quot;Currently banned:&quot; | awk &#039;{print $NF}&#039;)\n        local total_banned=$(echo &quot;$status&quot; | grep &quot;Total banned:&quot; | awk &#039;{print $NF}&#039;)\n        \n        log &quot;Jail: $jail - Currently banned: $banned_count, Total banned: $total_banned&quot;\n        \n        # Alert if too many bans\n        if [ &quot;$banned_count&quot; -gt 50 ]; then\n            log &quot;WARNING: High number of banned IPs in $jail jail&quot;\n            echo &quot;High ban count in $jail: $banned_count IPs&quot; | mail -s &quot;fail2ban Warning&quot; &quot;$ALERT_EMAIL&quot;\n        fi\n    done\n}\n\n# Check for suspicious patterns\ncheck_patterns() {\n    local recent_bans=$(tail -n 1000 /var/log/fail2ban.log | grep &quot;Ban&quot; | wc -l)\n    \n    if [ &quot;$recent_bans&quot; -gt 100 ]; then\n        log &quot;WARNING: High ban rate detected: $recent_bans bans in recent logs&quot;\n    fi\n}\n\n# Generate report\ngenerate_report() {\n    local report_file=&quot;/tmp/fail2ban-report-$(date +%Y%m%d).txt&quot;\n    \n    {\n        echo &quot;Fail2ban Report - $(date)&quot;\n        echo &quot;=========================&quot;\n        echo\n        fail2ban-client status\n        echo\n        echo &quot;Ban Statistics by Jail:&quot;\n        echo &quot;-----------------------&quot;\n        \n        for jail in $(fail2ban-client status | grep &quot;Jail list&quot; | sed &#039;s/.*://;s/,//g&#039;); do\n            echo\n            echo &quot;[$jail]&quot;\n            fail2ban-client status &quot;$jail&quot;\n        done\n        \n        echo\n        echo &quot;Recent Activity:&quot;\n        echo &quot;----------------&quot;\n        tail -n 50 /var/log/fail2ban.log | grep -E &quot;(Ban|Unban|Found|Restore)&quot;\n    } &gt; &quot;$report_file&quot;\n    \n    log &quot;Report generated: $report_file&quot;\n    \n    # Email report\n    mail -s &quot;Fail2ban Daily Report - $(hostname)&quot; &quot;$ALERT_EMAIL&quot; &lt; &quot;$report_file&quot;\n}\n\n# Main monitoring loop\nmain() {\n    log &quot;Starting fail2ban monitoring...&quot;\n    \n    check_service || exit 1\n    monitor_bans\n    check_patterns\n    generate_report\n    \n    log &quot;Monitoring completed&quot;\n}\n\n# Run monitoring\nmain\n\n# Add to cron:\n# */15 * * * * /usr/local/bin/fail2ban-monitor.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"prometheus-integration\" class=\"mobile-header\">Prometheus Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install fail2ban exporter\nwget https://github.com/hectorjsmith/fail2ban-prometheus-exporter/releases/download/v0.10.0/fail2ban_exporter\nchmod +x fail2ban_exporter\nsudo mv fail2ban_exporter /usr/local/bin/\n\n# Create systemd service\nsudo tee /etc/systemd/system/fail2ban-exporter.service &lt;&lt;EOF\n[Unit]\nDescription=Fail2ban Prometheus Exporter\nAfter=network.target\n\n[Service]\nType=simple\nUser=prometheus\nExecStart=/usr/local/bin/fail2ban_exporter\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl enable --now fail2ban-exporter\n\n# Configure Prometheus\necho &quot;  - job_name: &#039;fail2ban&#039;\n    static_configs:\n      - targets: [&#039;localhost:9191&#039;]&quot; &gt;&gt; /etc/prometheus/prometheus.yml</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-backup.sh\n\nBACKUP_DIR=&quot;/backup/fail2ban&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\nBACKUP_FILE=&quot;$BACKUP_DIR/fail2ban_backup_$DATE.tar.gz&quot;\n\n# Create backup directory\nmkdir -p &quot;$BACKUP_DIR&quot;\n\n# Stop fail2ban to ensure database consistency\nsystemctl stop fail2ban\n\n# Create backup\ntar -czf &quot;$BACKUP_FILE&quot; \\\n    /etc/fail2ban/ \\\n    /var/lib/fail2ban/ \\\n    /var/log/fail2ban.log* \\\n    2&gt;/dev/null\n\n# Start fail2ban\nsystemctl start fail2ban\n\n# Encrypt backup\ngpg --cipher-algo AES256 --symmetric &quot;$BACKUP_FILE&quot;\nrm &quot;$BACKUP_FILE&quot;\n\necho &quot;Backup created: $BACKUP_FILE.gpg&quot;\n\n# Clean old backups (keep 30 days)\nfind &quot;$BACKUP_DIR&quot; -name &quot;fail2ban_backup_*.gpg&quot; -mtime +30 -delete\n\n# Backup banned IPs list\nfail2ban-client banned &gt; &quot;$BACKUP_DIR/banned_ips_$DATE.txt&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-script\" class=\"mobile-header\">Restore Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-restore.sh\n\nBACKUP_FILE=&quot;$1&quot;\n\nif [ -z &quot;$BACKUP_FILE&quot; ]; then\n    echo &quot;Usage: $0 &lt;backup-file.gpg&gt;&quot;\n    exit 1\nfi\n\n# Decrypt backup\ngpg --decrypt &quot;$BACKUP_FILE&quot; &gt; /tmp/fail2ban_restore.tar.gz\n\n# Stop fail2ban\nsystemctl stop fail2ban\n\n# Extract backup\ntar -xzf /tmp/fail2ban_restore.tar.gz -C /\n\n# Restore permissions\nchown -R root:root /etc/fail2ban\nchmod 644 /etc/fail2ban/*.conf\nchmod 644 /etc/fail2ban/*.local\n\n# Start fail2ban\nsystemctl start fail2ban\n\n# Clean up\nrm /tmp/fail2ban_restore.tar.gz\n\necho &quot;Restore completed&quot;\n\n# Reload jails\nfail2ban-client reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check for syntax errors\nfail2ban-client -t\n\n# Check logs\njournalctl -u fail2ban -n 100\ntail -f /var/log/fail2ban.log\n\n# Check permissions\nls -la /var/run/fail2ban/\nls -la /var/lib/fail2ban/\n\n# Start in foreground for debugging\nfail2ban-server -f -x -v</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>IPs not getting banned</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Test regex patterns\nfail2ban-regex /var/log/auth.log /etc/fail2ban/filter.d/sshd.conf\n\n# Check jail configuration\nfail2ban-client get sshd logpath\nfail2ban-client get sshd findtime\nfail2ban-client get sshd maxretry\n\n# Test specific log line\necho &#039;Dec 10 12:34:56 server sshd[12345]: Failed password for invalid user admin from 192.168.1.100 port 12345 ssh2&#039; | fail2ban-regex - /etc/fail2ban/filter.d/sshd.conf</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check database size\nls -lh /var/lib/fail2ban/fail2ban.sqlite3\n\n# Purge old entries\nfail2ban-client set dbpurgeage 1d\nsqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;DELETE FROM bans WHERE timeofban &lt; strftime(&#039;%s&#039;, &#039;now&#039;, &#039;-7 days&#039;);&quot;\n\n# Monitor CPU usage\ntop -p $(pgrep fail2ban-server)\n\n# Check number of monitored files\nlsof -p $(pgrep fail2ban-server) | grep -c log</code></pre>\n      </div>\n    </div>\n<h3 id=\"debug-mode\" class=\"mobile-header\">Debug Mode</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nsudo tee -a /etc/fail2ban/fail2ban.local &lt;&lt;EOF\n[Definition]\nloglevel = DEBUG\nEOF\n\nsudo systemctl restart fail2ban\n\n# Watch debug logs\ntail -f /var/log/fail2ban.log | grep -E &quot;(DEBUG|ERROR|WARNING)&quot;\n\n# Test jail processing\nfail2ban-client set sshd addlogpath /var/log/auth.log\nfail2ban-client set sshd banip 192.168.1.100\nfail2ban-client set sshd unbanip 192.168.1.100</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"python-integration\" class=\"mobile-header\">Python Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">#!/usr/bin/env python3\n# fail2ban_api.py\n\nimport subprocess\nimport json\nimport socket\nfrom datetime import datetime\n\nclass Fail2banManager:\n    def __init__(self):\n        self.socket_path = &quot;/var/run/fail2ban/fail2ban.sock&quot;\n    \n    def execute_command(self, command):\n        &quot;&quot;&quot;Execute fail2ban-client command&quot;&quot;&quot;\n        try:\n            result = subprocess.run(\n                [&#039;fail2ban-client&#039;] + command.split(),\n                capture_output=True,\n                text=True,\n                check=True\n            )\n            return result.stdout.strip()\n        except subprocess.CalledProcessError as e:\n            return f&quot;Error: {e.stderr}&quot;\n    \n    def get_status(self):\n        &quot;&quot;&quot;Get overall status&quot;&quot;&quot;\n        return self.execute_command(&quot;status&quot;)\n    \n    def get_jail_status(self, jail):\n        &quot;&quot;&quot;Get specific jail status&quot;&quot;&quot;\n        status = self.execute_command(f&quot;status {jail}&quot;)\n        \n        # Parse status output\n        lines = status.split(&#039;\\n&#039;)\n        result = {\n            &#039;filter&#039;: {},\n            &#039;actions&#039;: {},\n            &#039;currently_failed&#039;: 0,\n            &#039;total_failed&#039;: 0,\n            &#039;currently_banned&#039;: 0,\n            &#039;total_banned&#039;: 0,\n            &#039;banned_ips&#039;: []\n        }\n        \n        for line in lines:\n            if &#039;Currently failed:&#039; in line:\n                result[&#039;currently_failed&#039;] = int(line.split(&#039;:&#039;)[1].strip())\n            elif &#039;Total failed:&#039; in line:\n                result[&#039;total_failed&#039;] = int(line.split(&#039;:&#039;)[1].strip())\n            elif &#039;Currently banned:&#039; in line:\n                result[&#039;currently_banned&#039;] = int(line.split(&#039;:&#039;)[1].strip())\n            elif &#039;Total banned:&#039; in line:\n                result[&#039;total_banned&#039;] = int(line.split(&#039;:&#039;)[1].strip())\n            elif &#039;Banned IP list:&#039; in line:\n                ips = line.split(&#039;:&#039;)[1].strip()\n                result[&#039;banned_ips&#039;] = ips.split() if ips else []\n        \n        return result\n    \n    def ban_ip(self, jail, ip, duration=None):\n        &quot;&quot;&quot;Ban an IP address&quot;&quot;&quot;\n        if duration:\n            return self.execute_command(f&quot;set {jail} banip {ip} {duration}&quot;)\n        else:\n            return self.execute_command(f&quot;set {jail} banip {ip}&quot;)\n    \n    def unban_ip(self, jail, ip):\n        &quot;&quot;&quot;Unban an IP address&quot;&quot;&quot;\n        return self.execute_command(f&quot;set {jail} unbanip {ip}&quot;)\n    \n    def get_banned_ips(self):\n        &quot;&quot;&quot;Get all banned IPs across all jails&quot;&quot;&quot;\n        banned = {}\n        jails = self.get_jail_list()\n        \n        for jail in jails:\n            status = self.get_jail_status(jail)\n            if status[&#039;banned_ips&#039;]:\n                banned[jail] = status[&#039;banned_ips&#039;]\n        \n        return banned\n    \n    def get_jail_list(self):\n        &quot;&quot;&quot;Get list of all jails&quot;&quot;&quot;\n        status = self.get_status()\n        for line in status.split(&#039;\\n&#039;):\n            if &#039;Jail list:&#039; in line:\n                jails = line.split(&#039;:&#039;)[1].strip()\n                return [j.strip() for j in jails.split(&#039;,&#039;)]\n        return []\n    \n    def add_jail(self, jail_config):\n        &quot;&quot;&quot;Add a new jail configuration&quot;&quot;&quot;\n        config_path = f&quot;/etc/fail2ban/jail.d/{jail_config[&#039;name&#039;]}.conf&quot;\n        \n        config_content = f&quot;&quot;&quot;[{jail_config[&#039;name&#039;]}]\nenabled = true\nport = {jail_config.get(&#039;port&#039;, &#039;http,https&#039;)}\nfilter = {jail_config.get(&#039;filter&#039;, jail_config[&#039;name&#039;])}\nlogpath = {jail_config[&#039;logpath&#039;]}\nmaxretry = {jail_config.get(&#039;maxretry&#039;, 5)}\nbantime = {jail_config.get(&#039;bantime&#039;, 3600)}\nfindtime = {jail_config.get(&#039;findtime&#039;, 600)}\n&quot;&quot;&quot;\n        \n        with open(config_path, &#039;w&#039;) as f:\n            f.write(config_content)\n        \n        # Reload configuration\n        return self.execute_command(&quot;reload&quot;)\n\n# Example usage\nif __name__ == &#039;__main__&#039;:\n    f2b = Fail2banManager()\n    \n    # Get overall status\n    print(&quot;Fail2ban Status:&quot;)\n    print(f2b.get_status())\n    print(&quot;\\n&quot; + &quot;=&quot;*50 + &quot;\\n&quot;)\n    \n    # Get banned IPs\n    print(&quot;Banned IPs by Jail:&quot;)\n    banned = f2b.get_banned_ips()\n    for jail, ips in banned.items():\n        print(f&quot;\\n{jail}: {&#039;, &#039;.join(ips) if ips else &#039;None&#039;}&quot;)\n    \n    # Check specific jail\n    print(&quot;\\n&quot; + &quot;=&quot;*50 + &quot;\\n&quot;)\n    print(&quot;SSH Jail Status:&quot;)\n    ssh_status = f2b.get_jail_status(&#039;sshd&#039;)\n    print(json.dumps(ssh_status, indent=2))</code></pre>\n      </div>\n    </div>\n<h3 id=\"web-dashboard\" class=\"mobile-header\">Web Dashboard</h3>\n<div class=\"mobile-code-block\" data-language=\"python\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">python</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-python\">#!/usr/bin/env python3\n# fail2ban_dashboard.py\n\nfrom flask import Flask, render_template, jsonify, request\nfrom fail2ban_api import Fail2banManager\nimport json\n\napp = Flask(__name__)\nf2b = Fail2banManager()\n\n@app.route(&#039;/&#039;)\ndef dashboard():\n    return render_template(&#039;dashboard.html&#039;)\n\n@app.route(&#039;/api/status&#039;)\ndef api_status():\n    jails = f2b.get_jail_list()\n    status = {\n        &#039;jails&#039;: {},\n        &#039;total_banned&#039;: 0,\n        &#039;total_failed&#039;: 0\n    }\n    \n    for jail in jails:\n        jail_status = f2b.get_jail_status(jail)\n        status[&#039;jails&#039;][jail] = jail_status\n        status[&#039;total_banned&#039;] += jail_status[&#039;total_banned&#039;]\n        status[&#039;total_failed&#039;] += jail_status[&#039;total_failed&#039;]\n    \n    return jsonify(status)\n\n@app.route(&#039;/api/ban&#039;, methods=[&#039;POST&#039;])\ndef api_ban():\n    data = request.json\n    result = f2b.ban_ip(data[&#039;jail&#039;], data[&#039;ip&#039;], data.get(&#039;duration&#039;))\n    return jsonify({&#039;success&#039;: True, &#039;result&#039;: result})\n\n@app.route(&#039;/api/unban&#039;, methods=[&#039;POST&#039;])\ndef api_unban():\n    data = request.json\n    result = f2b.unban_ip(data[&#039;jail&#039;], data[&#039;ip&#039;])\n    return jsonify({&#039;success&#039;: True, &#039;result&#039;: result})\n\nif __name__ == &#039;__main__&#039;:\n    app.run(host=&#039;0.0.0.0&#039;, port=5000, debug=True)</code></pre>\n      </div>\n    </div>\n<h3 id=\"shell-integration\" class=\"mobile-header\">Shell Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-utils.sh - Fail2ban utility functions\n\n# Source this file in other scripts: source /usr/local/lib/fail2ban-utils.sh\n\n# Check if IP is banned\nis_ip_banned() {\n    local ip=&quot;$1&quot;\n    local jail=&quot;${2:-}&quot;\n    \n    if [ -z &quot;$jail&quot; ]; then\n        # Check all jails\n        for j in $(fail2ban-client status | grep &quot;Jail list&quot; | sed &#039;s/.*://;s/,//g&#039;); do\n            if fail2ban-client status &quot;$j&quot; | grep -q &quot;$ip&quot;; then\n                echo &quot;IP $ip is banned in jail: $j&quot;\n                return 0\n            fi\n        done\n    else\n        # Check specific jail\n        if fail2ban-client status &quot;$jail&quot; | grep -q &quot;$ip&quot;; then\n            return 0\n        fi\n    fi\n    \n    return 1\n}\n\n# Ban IP with reason logging\nban_ip_with_reason() {\n    local jail=&quot;$1&quot;\n    local ip=&quot;$2&quot;\n    local reason=&quot;$3&quot;\n    local duration=&quot;${4:-3600}&quot;\n    \n    echo &quot;[$(date)] Banning IP $ip in jail $jail for $duration seconds. Reason: $reason&quot; &gt;&gt; /var/log/fail2ban-manual-bans.log\n    fail2ban-client set &quot;$jail&quot; banip &quot;$ip&quot; &quot;$duration&quot;\n}\n\n# Get ban statistics\nget_ban_stats() {\n    local total_banned=0\n    local total_failed=0\n    \n    echo &quot;Fail2ban Statistics&quot;\n    echo &quot;==================&quot;\n    \n    for jail in $(fail2ban-client status | grep &quot;Jail list&quot; | sed &#039;s/.*://;s/,//g&#039;); do\n        local status=$(fail2ban-client status &quot;$jail&quot;)\n        local banned=$(echo &quot;$status&quot; | grep &quot;Total banned:&quot; | awk &#039;{print $NF}&#039;)\n        local failed=$(echo &quot;$status&quot; | grep &quot;Total failed:&quot; | awk &#039;{print $NF}&#039;)\n        \n        echo &quot;[$jail]&quot;\n        echo &quot;  Failed: $failed&quot;\n        echo &quot;  Banned: $banned&quot;\n        \n        total_banned=$((total_banned + banned))\n        total_failed=$((total_failed + failed))\n    done\n    \n    echo\n    echo &quot;Totals:&quot;\n    echo &quot;  Failed: $total_failed&quot;\n    echo &quot;  Banned: $total_banned&quot;\n}\n\n# Whitelist management\nadd_to_whitelist() {\n    local ip=&quot;$1&quot;\n    \n    # Add to fail2ban whitelist\n    if grep -q &quot;ignoreip&quot; /etc/fail2ban/jail.local; then\n        sed -i &quot;/ignoreip/s/$/,$ip/&quot; /etc/fail2ban/jail.local\n    else\n        echo &quot;ignoreip = 127.0.0.1/8 ::1 $ip&quot; &gt;&gt; /etc/fail2ban/jail.local\n    fi\n    \n    # Reload configuration\n    fail2ban-client reload\n    \n    echo &quot;Added $ip to whitelist&quot;\n}\n\n# Export functions for use in other scripts\nexport -f is_ip_banned\nexport -f ban_ip_with_reason\nexport -f get_ban_stats\nexport -f add_to_whitelist</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update fail2ban\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade fail2ban\n\n# Arch Linux\nsudo pacman -Syu fail2ban\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade fail2ban\n\n# openSUSE\nsudo zypper update fail2ban\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade py39-fail2ban\n\n# Always backup before updates\n/usr/local/bin/fail2ban-backup.sh\n\n# Restart after updates\nsudo systemctl restart fail2ban</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance-tasks\" class=\"mobile-header\">Regular Maintenance Tasks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-maintenance.sh\n\nLOG_FILE=&quot;/var/log/fail2ban-maintenance.log&quot;\n\nlog() {\n    echo &quot;[$(date &#039;+%Y-%m-%d %H:%M:%S&#039;)] $1&quot; | tee -a &quot;$LOG_FILE&quot;\n}\n\n# Update filters from repository\nupdate_filters() {\n    log &quot;Updating fail2ban filters...&quot;\n    \n    cd /tmp\n    git clone https://github.com/fail2ban/fail2ban.git\n    \n    # Backup existing filters\n    cp -r /etc/fail2ban/filter.d /etc/fail2ban/filter.d.bak\n    \n    # Copy new filters\n    cp /tmp/fail2ban/config/filter.d/* /etc/fail2ban/filter.d/\n    \n    # Test configuration\n    if fail2ban-client -t; then\n        log &quot;Filter update successful&quot;\n    else\n        log &quot;ERROR: Filter update failed, restoring backup&quot;\n        rm -rf /etc/fail2ban/filter.d\n        mv /etc/fail2ban/filter.d.bak /etc/fail2ban/filter.d\n    fi\n    \n    rm -rf /tmp/fail2ban\n}\n\n# Clean old database entries\nclean_database() {\n    log &quot;Cleaning fail2ban database...&quot;\n    \n    # Get database size before\n    size_before=$(ls -lh /var/lib/fail2ban/fail2ban.sqlite3 | awk &#039;{print $5}&#039;)\n    \n    # Clean entries older than 30 days\n    sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;DELETE FROM bans WHERE timeofban &lt; strftime(&#039;%s&#039;, &#039;now&#039;, &#039;-30 days&#039;);&quot;\n    sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;VACUUM;&quot;\n    \n    # Get database size after\n    size_after=$(ls -lh /var/lib/fail2ban/fail2ban.sqlite3 | awk &#039;{print $5}&#039;)\n    \n    log &quot;Database cleaned. Size: $size_before -&gt; $size_after&quot;\n}\n\n# Check and update GeoIP database\nupdate_geoip() {\n    log &quot;Updating GeoIP database...&quot;\n    \n    if command -v geoipupdate &gt;/dev/null 2&gt;&amp;1; then\n        geoipupdate\n        log &quot;GeoIP database updated&quot;\n    else\n        log &quot;GeoIP update tool not installed&quot;\n    fi\n}\n\n# Generate monthly report\ngenerate_monthly_report() {\n    log &quot;Generating monthly report...&quot;\n    \n    report_file=&quot;/var/log/fail2ban-monthly-$(date +%Y%m).txt&quot;\n    \n    {\n        echo &quot;Fail2ban Monthly Report - $(date &#039;+%B %Y&#039;)&quot;\n        echo &quot;========================================&quot;\n        echo\n        \n        # Get ban statistics from database\n        echo &quot;Top 10 Banned IPs:&quot;\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;SELECT ip, COUNT(*) as count FROM bans WHERE timeofban &gt; strftime(&#039;%s&#039;, &#039;now&#039;, &#039;-30 days&#039;) GROUP BY ip ORDER BY count DESC LIMIT 10;&quot;\n        \n        echo\n        echo &quot;Bans by Jail:&quot;\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;SELECT jail, COUNT(*) as count FROM bans WHERE timeofban &gt; strftime(&#039;%s&#039;, &#039;now&#039;, &#039;-30 days&#039;) GROUP BY jail ORDER BY count DESC;&quot;\n        \n        echo\n        echo &quot;Daily Ban Trend:&quot;\n        sqlite3 /var/lib/fail2ban/fail2ban.sqlite3 &quot;SELECT date(timeofban, &#039;unixepoch&#039;) as day, COUNT(*) as count FROM bans WHERE timeofban &gt; strftime(&#039;%s&#039;, &#039;now&#039;, &#039;-30 days&#039;) GROUP BY day ORDER BY day;&quot;\n    } &gt; &quot;$report_file&quot;\n    \n    log &quot;Monthly report saved to: $report_file&quot;\n}\n\n# Main maintenance routine\nmain() {\n    log &quot;Starting fail2ban maintenance...&quot;\n    \n    update_filters\n    clean_database\n    update_geoip\n    generate_monthly_report\n    \n    # Reload fail2ban\n    fail2ban-client reload\n    \n    log &quot;Maintenance completed&quot;\n}\n\n# Run maintenance\nmain\n\n# Schedule in cron:\n# 0 2 1 * * /usr/local/bin/fail2ban-maintenance.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-check-script\" class=\"mobile-header\">Health Check Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# fail2ban-health.sh\n\n# Check fail2ban health\ncheck_health() {\n    local status=0\n    \n    # Check service\n    if ! systemctl is-active --quiet fail2ban; then\n        echo &quot;CRITICAL: fail2ban service is not running&quot;\n        status=2\n    fi\n    \n    # Check database\n    if [ ! -f /var/lib/fail2ban/fail2ban.sqlite3 ]; then\n        echo &quot;WARNING: Database file missing&quot;\n        status=1\n    fi\n    \n    # Check socket\n    if [ ! -S /var/run/fail2ban/fail2ban.sock ]; then\n        echo &quot;WARNING: Socket file missing&quot;\n        status=1\n    fi\n    \n    # Check jails\n    active_jails=$(fail2ban-client status | grep &quot;Jail list&quot; | wc -w)\n    if [ &quot;$active_jails&quot; -lt 3 ]; then\n        echo &quot;WARNING: Only $active_jails jails active&quot;\n        status=1\n    fi\n    \n    if [ $status -eq 0 ]; then\n        echo &quot;OK: fail2ban is healthy&quot;\n    fi\n    \n    exit $status\n}\n\ncheck_health</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.fail2ban.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Fail2ban Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/fail2ban/fail2ban\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Fail2ban GitHub Repository</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/fail2ban/fail2ban/wiki\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Fail2ban Wiki</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://fail2ban.readthedocs.io/en/latest/filters.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Filter Development Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://fail2ban.readthedocs.io/en/latest/actions.html\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Action Development Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/fail2ban/fail2ban/tree/master/config/filter.d\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Filters</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.fail2ban.org/wiki/index.php/Best_practices\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Best Practices Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.fail2ban.org/wiki/index.php/Security\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Hardening Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"24 min","wordCount":4745,"lastBuilt":"2025-09-16T02:44:19.420Z"},{"name":"keycloak","displayName":"Keycloak","slug":"keycloak","description":"keycloak is a free and open-source open source identity and access management solution. Keycloak provides single sign-on (SSO) with identity brokering and social login, serving as a powerful FOSS alternative to Auth0, Okta, or Azure AD B2C","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/keycloak","updatedAt":"2025-09-16T02:38:08Z","createdAt":"2025-09-08T03:09:55Z","readmeRaw":"## ðŸ‘‹ Welcome to keycloak ðŸš€  \n\nkeycloak README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-keycloak\" class=\"mobile-header\">ðŸ‘‹ Welcome to keycloak ðŸš€  </h2>\n<p class=\"mobile-paragraph\">keycloak README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-16T02:44:06.122Z"},{"name":"openvpn","displayName":"Openvpn","slug":"openvpn","description":"openvpn is a free and open-source full-featured SSL VPN solution. OpenVPN provides secure point-to-point or site-to-site connections, serving as an open-source alternative to commercial VPN solutions","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/openvpn","updatedAt":"2025-09-16T02:38:16Z","createdAt":"2025-09-08T03:12:57Z","readmeRaw":"## ðŸ‘‹ Welcome to openvpn ðŸš€  \n\nopenvpn README  \n  \n  \n## Author  \n\nðŸ¤– casjay: [Github](https://github.com/casjay) ðŸ¤–  \n","readmeHtml":"<h2 id=\"welcome-to-openvpn\" class=\"mobile-header\">ðŸ‘‹ Welcome to openvpn ðŸš€  </h2>\n<p class=\"mobile-paragraph\">openvpn README  </p>\n<h2 id=\"author\" class=\"mobile-header\">Author  </h2>\n<p class=\"mobile-paragraph\">ðŸ¤– casjay: <a href=\"https://github.com/casjay\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Github</a> ðŸ¤–  </p>","readTime":"1 min","wordCount":15,"lastBuilt":"2025-09-16T02:44:02.553Z"},{"name":"pihole","displayName":"Pi-hole","slug":"pihole","description":"pihole is a free and open-source network-wide ad blocker. Pi-hole acts as a DNS sinkhole to block ads and trackers network-wide, providing privacy and performance benefits","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/pihole","updatedAt":"2025-09-16T02:38:20Z","createdAt":"2025-09-08T03:14:08Z","readmeRaw":"# Pi-hole Installation Guide\n\nNetwork-wide ad and tracker blocking DNS sinkhole that protects your entire network from unwanted content without requiring client-side software. Essential tool for privacy, security, and performance improvement.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 1GB RAM minimum, 2GB recommended\n- Static IP address for DNS server\n- Port 53 available for DNS service\n- Web server port (80/443) available for admin interface\n\n## Installation\n\n### One-Line Installation (Recommended)\n```bash\n# Download and run the automated installer\ncurl -sSL https://install.pi-hole.net | bash\n\n# Alternative: Download and review before running\nwget -O basic-install.sh https://install.pi-hole.net\nless basic-install.sh  # Review the script\nsudo bash basic-install.sh\n```\n\n### Ubuntu/Debian Manual Installation\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install dependencies\nsudo apt install -y curl dnsutils net-tools\n\n# Create pihole user\nsudo useradd --system --shell /usr/sbin/nologin pihole\n\n# Download Pi-hole\ngit clone --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole\ncd Pi-hole\n\n# Run installer\nsudo bash automated\\ install/basic-install.sh\n\n# Verify installation\npihole status\ndig @localhost google.com\n```\n\n## Configuration\n\n### Enhanced Privacy Setup\n```bash\n# Configure maximum privacy\nsudo tee /etc/pihole/pihole-FTL.conf > /dev/null <<EOF\nPRIVACYLEVEL=2\nMAXLOGAGE=24\nIGNORE_LOCALHOST=yes\nBLOCKINGMODE=IP-AAAA-NODATA\nCNAME_INSPECTION=yes\nEOF\n\nsudo systemctl restart pihole-FTL\n```\n\n### Custom Blocklists\n```bash\n# Add comprehensive blocklists\npihole -a -l https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts\npihole -a -l https://mirror1.malwaredomains.com/files/justdomains\npihole -a -l https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt\n\n# Update blocklists\npihole -g\n```\n\n## Security and Monitoring\n\n### Security Hardening\n```bash\n# Secure web interface\nsudo tee /etc/lighttpd/conf-available/99-pihole-security.conf > /dev/null <<EOF\nserver.modules += ( \"mod_setenv\" )\nsetenv.add-response-header = (\n    \"X-Frame-Options\" => \"DENY\",\n    \"X-Content-Type-Options\" => \"nosniff\",\n    \"Strict-Transport-Security\" => \"max-age=31536000\"\n)\nEOF\n\nsudo lighttpd-enable-mod pihole-security\nsudo systemctl restart lighttpd\n```\n\n### Monitoring Script\n```bash\nsudo tee /usr/local/bin/pihole-monitor.sh > /dev/null <<'EOF'\n#!/bin/bash\nLOG=\"/var/log/pihole-monitor.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active pihole-FTL >/dev/null; then\n    log_message \"âœ“ Pi-hole service running\"\nelse\n    log_message \"âœ— Pi-hole service not running\"\nfi\n\n# Check DNS resolution\nif dig @localhost google.com +short >/dev/null 2>&1; then\n    log_message \"âœ“ DNS resolution working\"\nelse\n    log_message \"âœ— DNS resolution failed\"\nfi\n\n# Check blocking\nif dig @localhost doubleclick.net +short | grep -q \"0.0.0.0\"; then\n    log_message \"âœ“ Ad blocking working\"\nelse\n    log_message \"âš  Ad blocking issues\"\nfi\n\nlog_message \"Pi-hole monitoring completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/pihole-monitor.sh\necho \"*/15 * * * * root /usr/local/bin/pihole-monitor.sh\" | sudo tee -a /etc/crontab\n```\n\n## Backup Strategy\n\n```bash\nsudo tee /usr/local/bin/pihole-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/pihole\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup Pi-hole configuration\npihole -a -t > ${BACKUP_DIR}/pihole-backup-${DATE}.tar.gz\n\n# Keep last 14 backups\nfind ${BACKUP_DIR} -name \"pihole-backup-*.tar.gz\" -mtime +14 -delete\n\necho \"Pi-hole backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/pihole-backup.sh\necho \"0 2 * * * root /usr/local/bin/pihole-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Additional Resources\n\n- [Pi-hole Documentation](https://docs.pi-hole.net/)\n- [Pi-hole Community](https://discourse.pi-hole.net/)\n- [Blocklist Collections](https://github.com/hectorm/hmirror)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"pi-hole-installation-guide\" class=\"mobile-header\">Pi-hole Installation Guide</h1>\n<p class=\"mobile-paragraph\">Network-wide ad and tracker blocking DNS sinkhole that protects your entire network from unwanted content without requiring client-side software. Essential tool for privacy, security, and performance improvement.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">1GB RAM minimum, 2GB recommended</li>\n<li class=\"mobile-list-item\">Static IP address for DNS server</li>\n<li class=\"mobile-list-item\">Port 53 available for DNS service</li>\n<li class=\"mobile-list-item\">Web server port (80/443) available for admin interface</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"one-line-installation-recommended\" class=\"mobile-header\">One-Line Installation (Recommended)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download and run the automated installer\ncurl -sSL https://install.pi-hole.net | bash\n\n# Alternative: Download and review before running\nwget -O basic-install.sh https://install.pi-hole.net\nless basic-install.sh  # Review the script\nsudo bash basic-install.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"ubuntudebian-manual-installation\" class=\"mobile-header\">Ubuntu/Debian Manual Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install dependencies\nsudo apt install -y curl dnsutils net-tools\n\n# Create pihole user\nsudo useradd --system --shell /usr/sbin/nologin pihole\n\n# Download Pi-hole\ngit clone --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole\ncd Pi-hole\n\n# Run installer\nsudo bash automated\\ install/basic-install.sh\n\n# Verify installation\npihole status\ndig @localhost google.com</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"enhanced-privacy-setup\" class=\"mobile-header\">Enhanced Privacy Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure maximum privacy\nsudo tee /etc/pihole/pihole-FTL.conf &gt; /dev/null &lt;&lt;EOF\nPRIVACYLEVEL=2\nMAXLOGAGE=24\nIGNORE_LOCALHOST=yes\nBLOCKINGMODE=IP-AAAA-NODATA\nCNAME_INSPECTION=yes\nEOF\n\nsudo systemctl restart pihole-FTL</code></pre>\n      </div>\n    </div>\n<h3 id=\"custom-blocklists\" class=\"mobile-header\">Custom Blocklists</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add comprehensive blocklists\npihole -a -l https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts\npihole -a -l https://mirror1.malwaredomains.com/files/justdomains\npihole -a -l https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt\n\n# Update blocklists\npihole -g</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-and-monitoring\" class=\"mobile-header\">Security and Monitoring</h2>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Secure web interface\nsudo tee /etc/lighttpd/conf-available/99-pihole-security.conf &gt; /dev/null &lt;&lt;EOF\nserver.modules += ( &quot;mod_setenv&quot; )\nsetenv.add-response-header = (\n    &quot;X-Frame-Options&quot; =&gt; &quot;DENY&quot;,\n    &quot;X-Content-Type-Options&quot; =&gt; &quot;nosniff&quot;,\n    &quot;Strict-Transport-Security&quot; =&gt; &quot;max-age=31536000&quot;\n)\nEOF\n\nsudo lighttpd-enable-mod pihole-security\nsudo systemctl restart lighttpd</code></pre>\n      </div>\n    </div>\n<h3 id=\"monitoring-script\" class=\"mobile-header\">Monitoring Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/pihole-monitor.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOG=&quot;/var/log/pihole-monitor.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active pihole-FTL &gt;/dev/null; then\n    log_message &quot;âœ“ Pi-hole service running&quot;\nelse\n    log_message &quot;âœ— Pi-hole service not running&quot;\nfi\n\n# Check DNS resolution\nif dig @localhost google.com +short &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ DNS resolution working&quot;\nelse\n    log_message &quot;âœ— DNS resolution failed&quot;\nfi\n\n# Check blocking\nif dig @localhost doubleclick.net +short | grep -q &quot;0.0.0.0&quot;; then\n    log_message &quot;âœ“ Ad blocking working&quot;\nelse\n    log_message &quot;âš  Ad blocking issues&quot;\nfi\n\nlog_message &quot;Pi-hole monitoring completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/pihole-monitor.sh\necho &quot;*/15 * * * * root /usr/local/bin/pihole-monitor.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-strategy\" class=\"mobile-header\">Backup Strategy</h2>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/pihole-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/pihole&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup Pi-hole configuration\npihole -a -t &gt; ${BACKUP_DIR}/pihole-backup-${DATE}.tar.gz\n\n# Keep last 14 backups\nfind ${BACKUP_DIR} -name &quot;pihole-backup-*.tar.gz&quot; -mtime +14 -delete\n\necho &quot;Pi-hole backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/pihole-backup.sh\necho &quot;0 2 * * * root /usr/local/bin/pihole-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://docs.pi-hole.net/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Pi-hole Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discourse.pi-hole.net/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Pi-hole Community</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://github.com/hectorm/hmirror\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Blocklist Collections</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"3 min","wordCount":479,"lastBuilt":"2025-09-16T02:44:00.524Z"},{"name":"vault","displayName":"Vault","slug":"vault","description":"vault is a free and open-source secrets management and data protection platform. Developed by HashiCorp, Vault provides enterprise-grade secrets management, encryption as a service, and privileged access management, serving as an open-source alternative to AWS Secrets Manager, Azure Key Vault, or CyberArk","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/vault","updatedAt":"2025-09-16T02:38:29Z","createdAt":"2025-09-08T03:17:55Z","readmeRaw":"# HashiCorp Vault Installation Guide\n\nEnterprise-grade secrets management platform for securely storing and accessing API keys, passwords, certificates, and other sensitive data. Industry standard for secrets management with advanced security features.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for production\n- Persistent storage for Vault data (encrypted disk recommended)\n- TLS certificates for production deployment\n- HSM (optional, for enterprise compliance)\n\n## Installation\n\n### Using Package Manager (Recommended)\n\n#### Ubuntu/Debian\n```bash\n# Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main\" | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install Vault\nsudo apt update\nsudo apt install -y vault\n\n# Create vault user and directories\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\nsudo mkdir -p /opt/vault/{data,logs,tls} /etc/vault.d\nsudo chown -R vault:vault /opt/vault /etc/vault.d\n```\n\n#### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Vault\nsudo yum install -y vault\n\n# Create vault user and directories\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\nsudo mkdir -p /opt/vault/{data,logs,tls} /etc/vault.d\nsudo chown -R vault:vault /opt/vault /etc/vault.d\n```\n\n#### Fedora\n```bash\n# Add HashiCorp repository\nsudo dnf install -y dnf-plugins-core\nsudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo\n\n# Install Vault\nsudo dnf install -y vault\n\n# Setup directories and user\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\nsudo mkdir -p /opt/vault/{data,logs,tls} /etc/vault.d\nsudo chown -R vault:vault /opt/vault /etc/vault.d\n```\n\n#### Arch Linux\n```bash\n# Install from AUR\nyay -S vault\n\n# Or from community repository\nsudo pacman -Syu vault\n\n# Setup vault user and directories\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\nsudo mkdir -p /opt/vault/{data,logs,tls} /etc/vault.d\nsudo chown -R vault:vault /opt/vault /etc/vault.d\n```\n\n### Manual Binary Installation\n```bash\n# Download latest Vault\nVAULT_VERSION=\"1.15.2\"\ncd /tmp\nwget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip\n\n# Install unzip if needed\nsudo apt install -y unzip  # Ubuntu/Debian\nsudo yum install -y unzip  # RHEL/CentOS\nsudo pacman -S unzip       # Arch Linux\n\n# Extract and install\nunzip vault_${VAULT_VERSION}_linux_amd64.zip\nsudo mv vault /usr/local/bin/\nsudo chmod +x /usr/local/bin/vault\n\n# Create vault user\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\n\n# Create directories\nsudo mkdir -p /opt/vault/{data,logs,tls} /etc/vault.d\nsudo chown -R vault:vault /opt/vault /etc/vault.d\n\n# Verify installation\nvault version\n\n# Clean up\nrm vault_${VAULT_VERSION}_linux_amd64.zip\n```\n\n### Using Docker\n```bash\n# Create directories for persistent data\nmkdir -p ~/vault/{data,config,logs,tls}\n\n# Generate TLS certificates for Docker\nopenssl req -x509 -nodes -newkey rsa:4096 -keyout ~/vault/tls/vault.key -out ~/vault/tls/vault.crt -days 365 -subj \"/C=US/ST=State/L=City/O=Organization/CN=vault.example.com\"\n\n# Create production-ready configuration\ncat > ~/vault/config/vault.hcl <<EOF\nui = true\ndisable_mlock = false\n\n# Storage backend\nstorage \"file\" {\n  path = \"/vault/data\"\n}\n\n# HTTPS listener\nlistener \"tcp\" {\n  address       = \"0.0.0.0:8200\"\n  tls_cert_file = \"/vault/tls/vault.crt\"\n  tls_key_file  = \"/vault/tls/vault.key\"\n  tls_min_version = \"tls12\"\n}\n\n# Cluster configuration\napi_addr = \"https://vault.example.com:8200\"\ncluster_addr = \"https://vault.example.com:8201\"\n\n# Logging\nlog_level = \"Info\"\nlog_file  = \"/vault/logs/vault.log\"\nlog_rotate_duration = \"24h\"\nlog_rotate_max_files = 15\n\n# Telemetry\ntelemetry {\n  prometheus_retention_time = \"30s\"\n  disable_hostname = true\n}\n\n# Enterprise features (if using Vault Enterprise)\nlicense_path = \"/vault/license/vault.hclic\"\n\n# Performance replication (Enterprise)\nreplication {\n  resolver_discover_servers = false\n}\nEOF\n\n# Run Vault container with security settings\ndocker run -d \\\n  --name vault \\\n  --restart unless-stopped \\\n  --cap-add=IPC_LOCK \\\n  --ulimit memlock=-1:-1 \\\n  -p 8200:8200 \\\n  -v ~/vault/data:/vault/data \\\n  -v ~/vault/config:/vault/config \\\n  -v ~/vault/logs:/vault/logs \\\n  -v ~/vault/tls:/vault/tls \\\n  vault:latest server -config=/vault/config/vault.hcl\n```\n\n## Production Configuration\n\n### Enterprise Production Configuration\n```bash\n# Create comprehensive production configuration\nsudo tee /etc/vault.d/vault.hcl > /dev/null <<EOF\n# Vault Enterprise Production Configuration\n\n# UI and basic settings\nui = true\ndisable_mlock = false\n\n# Storage backend - Consul (HA) or Integrated Storage (Raft)\nstorage \"raft\" {\n  path    = \"/opt/vault/data\"\n  node_id = \"vault-node-1\"\n\n  retry_join {\n    leader_api_addr = \"https://vault-node-2.example.com:8200\"\n  }\n  \n  retry_join {\n    leader_api_addr = \"https://vault-node-3.example.com:8200\"\n  }\n\n  # Enterprise: Performance replication\n  autopilot {\n    cleanup_dead_servers = true\n    last_contact_threshold = \"200ms\"\n    max_trailing_logs = 250\n    min_quorum = 3\n    server_stabilization_time = \"10s\"\n  }\n}\n\n# Alternative: Consul backend for HA\n# storage \"consul\" {\n#   address = \"127.0.0.1:8500\"\n#   path    = \"vault/\"\n#   service = \"vault\"\n#   check_timeout = \"5s\"\n#   disable_registration = false\n# }\n\n# HTTPS listener with modern TLS\nlistener \"tcp\" {\n  address       = \"0.0.0.0:8200\"\n  tls_cert_file = \"/opt/vault/tls/vault.crt\"\n  tls_key_file  = \"/opt/vault/tls/vault.key\"\n  tls_min_version = \"tls12\"\n  tls_cipher_suites = \"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\"\n  tls_require_and_verify_client_cert = false\n  tls_client_ca_file = \"/opt/vault/tls/ca.crt\"\n}\n\n# Cluster listener for HA\nlistener \"tcp\" {\n  address = \"0.0.0.0:8201\" \n  cluster_address = \"0.0.0.0:8201\"\n  tls_cert_file = \"/opt/vault/tls/vault.crt\"\n  tls_key_file  = \"/opt/vault/tls/vault.key\"\n}\n\n# API and cluster addresses\napi_addr = \"https://vault.example.com:8200\"\ncluster_addr = \"https://vault.example.com:8201\"\n\n# Enterprise license\nlicense_path = \"/opt/vault/license/vault.hclic\"\n\n# Logging configuration\nlog_level = \"Info\"\nlog_file  = \"/opt/vault/logs/vault.log\"\nlog_rotate_duration = \"24h\"\nlog_rotate_max_files = 30\n\n# Telemetry and monitoring\ntelemetry {\n  prometheus_retention_time = \"30s\"\n  disable_hostname = true\n  usage_gauge_period = \"5m\"\n}\n\n# Seal configuration - Auto-unseal with cloud KMS (Enterprise)\nseal \"awskms\" {\n  region     = \"us-west-2\"\n  kms_key_id = \"arn:aws:kms:us-west-2:123456789012:key/12345678-1234-1234-1234-123456789012\"\n}\n\n# Alternative: Azure Key Vault\n# seal \"azurekeyvault\" {\n#   tenant_id      = \"46646709-b63e-4747-be42-516edeaf1e14\"\n#   client_id      = \"03dc33fc-16d9-4b77-8152-3ec568f8af6e\"\n#   client_secret  = \"DUJDS3...\"\n#   vault_name     = \"hc-vault\"\n#   key_name       = \"vault_key\"\n# }\n\n# Alternative: Google Cloud KMS\n# seal \"gcpckms\" {\n#   project     = \"vault-project\"\n#   region      = \"us-central1\"\n#   key_ring    = \"vault-keyring\"\n#   crypto_key  = \"vault-key\"\n# }\n\n# Performance replication (Enterprise)\nreplication {\n  resolver_discover_servers = false\n}\n\n# HSM configuration (Enterprise with HSM)\n# seal \"pkcs11\" {\n#   lib            = \"/usr/lib/softhsm/libsofthsm2.so\"\n#   slot           = \"0\"\n#   pin            = \"1234\"\n#   key_label      = \"vault-hsm-key\"\n#   hmac_key_label = \"vault-hsm-hmac-key\"\n# }\nEOF\n\nsudo chown vault:vault /etc/vault.d/vault.hcl\nsudo chmod 640 /etc/vault.d/vault.hcl\n```\n\n### Advanced TLS Configuration\n```bash\n# Generate production-grade TLS certificates\nsudo mkdir -p /opt/vault/tls\n\n# Create CA certificate\nsudo openssl genrsa -out /opt/vault/tls/ca-key.pem 4096\nsudo openssl req -new -x509 -days 3650 -key /opt/vault/tls/ca-key.pem -out /opt/vault/tls/ca.crt -subj \"/C=US/ST=State/L=City/O=Organization/CN=Vault-CA\"\n\n# Create server certificate\nsudo openssl genrsa -out /opt/vault/tls/vault-key.pem 4096\nsudo openssl req -new -key /opt/vault/tls/vault-key.pem -out /opt/vault/tls/vault.csr -subj \"/C=US/ST=State/L=City/O=Organization/CN=vault.example.com\"\n\n# Create certificate with SAN extensions\nsudo tee /opt/vault/tls/vault.conf > /dev/null <<EOF\n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\n\n[req_distinguished_name]\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = vault.example.com\nDNS.2 = vault-node-1.example.com\nDNS.3 = vault-node-2.example.com\nDNS.4 = vault-node-3.example.com\nDNS.5 = localhost\nIP.1 = 127.0.0.1\nIP.2 = 10.0.1.10\nIP.3 = 10.0.1.11\nIP.4 = 10.0.1.12\nEOF\n\nsudo openssl x509 -req -days 365 -in /opt/vault/tls/vault.csr -CA /opt/vault/tls/ca.crt -CAkey /opt/vault/tls/ca-key.pem -CAcreateserial -out /opt/vault/tls/vault.crt -extensions v3_req -extfile /opt/vault/tls/vault.conf\n\n# Set secure permissions\nsudo chmod 600 /opt/vault/tls/*-key.pem\nsudo chmod 644 /opt/vault/tls/*.crt\nsudo chown -R vault:vault /opt/vault/tls\n\n# For Let's Encrypt certificates (production)\nsudo apt install -y certbot  # Ubuntu/Debian\nsudo yum install -y certbot  # RHEL/CentOS\n\nsudo certbot certonly --standalone -d vault.example.com\nsudo cp /etc/letsencrypt/live/vault.example.com/fullchain.pem /opt/vault/tls/vault.crt\nsudo cp /etc/letsencrypt/live/vault.example.com/privkey.pem /opt/vault/tls/vault-key.pem\nsudo chown vault:vault /opt/vault/tls/vault.*\n```\n\n### Enterprise SystemD Service with Security Hardening\n```bash\nsudo tee /etc/systemd/system/vault.service > /dev/null <<EOF\n[Unit]\nDescription=HashiCorp Vault - A tool for managing secrets\nDocumentation=https://www.vaultproject.io/docs/\nRequires=network-online.target\nAfter=network-online.target\nConditionFileNotEmpty=/etc/vault.d/vault.hcl\nStartLimitIntervalSec=60\nStartLimitBurst=3\n\n[Service]\nType=notify\nUser=vault\nGroup=vault\nExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl\nExecReload=/bin/kill --signal HUP \\$MAINPID\nKillMode=process\nRestart=on-failure\nRestartSec=5\nTimeoutStopSec=30\nStartLimitInterval=60\nStartLimitBurst=3\n\n# File system isolation\nProtectSystem=full\nProtectHome=read-only\nPrivateTmp=yes\nPrivateDevices=yes\n\n# Secure computing\nNoNewPrivileges=yes\nSecureBits=keep-caps\nCapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK\n\n# Additional security features\nAmbientCapabilities=CAP_IPC_LOCK\nCapabilities=CAP_IPC_LOCK+ep\n\n# Resource limits\nLimitNOFILE=65536\nLimitMEMLOCK=infinity\nLimitCORE=0\n\n# Network isolation\nRestrictNamespaces=yes\nRestrictRealtime=yes\n\n# Read-only paths\nReadOnlyPaths=/etc /usr\n\n# Writable paths\nReadWritePaths=/opt/vault/data\nReadWritePaths=/opt/vault/logs\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload\n```\n\n### High Availability Cluster Setup\n```bash\n# Configure HA cluster with Integrated Storage (Raft)\n# Node 1 configuration\nsudo tee /etc/vault.d/vault.hcl > /dev/null <<EOF\nui = true\ndisable_mlock = false\n\nstorage \"raft\" {\n  path    = \"/opt/vault/data\"\n  node_id = \"vault-node-1\"\n}\n\nlistener \"tcp\" {\n  address       = \"0.0.0.0:8200\"\n  tls_cert_file = \"/opt/vault/tls/vault.crt\"\n  tls_key_file  = \"/opt/vault/tls/vault-key.pem\"\n  tls_min_version = \"tls12\"\n}\n\nlistener \"tcp\" {\n  address       = \"0.0.0.0:8201\"\n  cluster_address = \"10.0.1.10:8201\"\n  tls_cert_file = \"/opt/vault/tls/vault.crt\"\n  tls_key_file  = \"/opt/vault/tls/vault-key.pem\"\n}\n\napi_addr = \"https://10.0.1.10:8200\"\ncluster_addr = \"https://10.0.1.10:8201\"\n\n# Enterprise features\nlicense_path = \"/opt/vault/license/vault.hclic\"\n\n# Auto-unseal with AWS KMS\nseal \"awskms\" {\n  region     = \"us-west-2\"\n  kms_key_id = \"arn:aws:kms:us-west-2:123456789012:key/vault-unseal-key\"\n}\n\n# Performance replication (Enterprise)\nreplication {\n  resolver_discover_servers = false\n}\nEOF\n\n# Initialize cluster on first node\nsudo systemctl start vault\nexport VAULT_ADDR='https://127.0.0.1:8200'\nexport VAULT_SKIP_VERIFY=true  # Only for self-signed certs\nvault operator init -recovery-shares=5 -recovery-threshold=3\n\n# Join additional nodes to cluster\n# Node 2 and 3: Add retry_join blocks to their vault.hcl\nsudo tee -a /etc/vault.d/vault.hcl > /dev/null <<EOF\n\nstorage \"raft\" {\n  path    = \"/opt/vault/data\"\n  node_id = \"vault-node-2\"  # Change to node-3 for third node\n  \n  retry_join {\n    leader_api_addr = \"https://10.0.1.10:8200\"\n  }\n}\nEOF\n```\n\n## Security Hardening (2024 Best Practices)\n\n### System-Level Security\n```bash\n# Disable swap (critical for security)\nsudo swapoff -a\nsudo sed -i '/ swap / s/^\\(.*\\)$/#\\1/g' /etc/fstab\n\n# Disable core dumps\necho '* hard core 0' | sudo tee -a /etc/security/limits.conf\necho '* soft core 0' | sudo tee -a /etc/security/limits.conf\necho 'vault hard core 0' | sudo tee -a /etc/security/limits.conf\necho 'vault soft core 0' | sudo tee -a /etc/security/limits.conf\n\n# Configure kernel parameters for security\nsudo tee -a /etc/sysctl.conf > /dev/null <<EOF\n# Vault security hardening\nkernel.dmesg_restrict = 1\nkernel.kptr_restrict = 2\nkernel.yama.ptrace_scope = 1\nfs.suid_dumpable = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0\nEOF\n\nsudo sysctl -p\n\n# SELinux configuration (RHEL/CentOS/Fedora)\nif command -v getenforce >/dev/null 2>&1; then\n    sudo setsebool -P authlogin_nsswitch_use_ldap 1\n    sudo setsebool -P allow_execheap 0\n    sudo setsebool -P allow_execmem 0\n    sudo setsebool -P allow_execmod 0\n    sudo setsebool -P allow_execstack 0\n    \n    # Custom SELinux policy for Vault\n    sudo tee vault.te > /dev/null <<EOF\nmodule vault 1.0;\n\nrequire {\n    type unconfined_t;\n    type vault_t;\n    class capability { ipc_lock sys_admin };\n    class process { setrlimit };\n}\n\n#============= vault_t ==============\nallow vault_t self:capability { ipc_lock sys_admin };\nallow vault_t self:process setrlimit;\nEOF\n\n    checkmodule -M -m -o vault.mod vault.te\n    semodule_package -o vault.pp -m vault.mod\n    sudo semodule -i vault.pp\nfi\n\n# AppArmor configuration (Ubuntu/Debian)\nif command -v apparmor_status >/dev/null 2>&1; then\n    sudo tee /etc/apparmor.d/vault > /dev/null <<EOF\n#include <tunables/global>\n\n/usr/local/bin/vault {\n  #include <abstractions/base>\n  #include <abstractions/nameservice>\n  #include <abstractions/ssl_certs>\n\n  capability ipc_lock,\n  capability setuid,\n  capability setgid,\n\n  /usr/local/bin/vault mr,\n  /etc/vault.d/** r,\n  /opt/vault/** rwk,\n  /proc/meminfo r,\n  /proc/sys/kernel/random/uuid r,\n  /sys/kernel/mm/transparent_hugepage/hpage_pmd_size r,\n\n  # Network access\n  network inet dgram,\n  network inet stream,\n\n  # Deny dangerous operations\n  deny /proc/kcore rwklx,\n  deny /proc/sysrq-trigger rwklx,\n  deny /proc/kmem rwklx,\n  deny /proc/mem rwklx,\n}\nEOF\n\n    sudo apparmor_parser -r /etc/apparmor.d/vault\nfi\n```\n\n### Firewall Configuration (Cross-Platform)\n```bash\n# UFW (Ubuntu/Debian)\nsudo ufw allow from 10.0.0.0/8 to any port 8200 comment 'Vault API - internal network only'\nsudo ufw allow from 10.0.0.0/8 to any port 8201 comment 'Vault cluster - internal network only'\nsudo ufw deny 8200 comment 'Block Vault API from public'\nsudo ufw deny 8201 comment 'Block Vault cluster from public'\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS/Fedora)\nsudo firewall-cmd --permanent --new-zone=vault\nsudo firewall-cmd --permanent --zone=vault --add-source=10.0.0.0/8\nsudo firewall-cmd --permanent --zone=vault --add-port=8200/tcp\nsudo firewall-cmd --permanent --zone=vault --add-port=8201/tcp\nsudo firewall-cmd --reload\n\n# iptables (Universal)\nsudo iptables -A INPUT -p tcp -s 10.0.0.0/8 --dport 8200 -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 10.0.0.0/8 --dport 8201 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 8200 -j DROP\nsudo iptables -A INPUT -p tcp --dport 8201 -j DROP\n\n# Save iptables rules\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save\n```\n\n### Audit Logging and Monitoring\n```bash\n# Enable comprehensive audit logging\nexport VAULT_ADDR='https://127.0.0.1:8200'\nvault auth <root-token>\n\n# Enable file audit device\nvault audit enable file file_path=/opt/vault/logs/audit.log\n\n# Enable syslog audit device\nvault audit enable syslog tag=\"vault\" facility=\"LOCAL0\"\n\n# Configure log rotation for audit logs\nsudo tee /etc/logrotate.d/vault-audit > /dev/null <<EOF\n/opt/vault/logs/audit.log {\n    daily\n    missingok\n    rotate 90\n    compress\n    delaycompress\n    notifempty\n    create 640 vault vault\n    postrotate\n        /bin/kill -HUP \\`cat /var/run/vault.pid 2>/dev/null\\` 2>/dev/null || true\n    endscript\n}\nEOF\n\n# Setup centralized logging (rsyslog configuration)\nsudo tee -a /etc/rsyslog.conf > /dev/null <<EOF\n\n# Vault audit logging\nlocal0.*    /var/log/vault-audit.log\n& stop\nEOF\n\nsudo systemctl restart rsyslog\n\n# Prometheus monitoring configuration\nvault write sys/metrics/config enabled=true\n```\n\n## Authentication Methods and Policies\n\n### Enterprise Authentication Setup\n```bash\n# Enable and configure LDAP authentication\nvault auth enable ldap\n\nvault write auth/ldap/config \\\n    url=\"ldaps://ldap.example.com\" \\\n    userdn=\"ou=Users,dc=example,dc=com\" \\\n    userattr=\"sAMAccountName\" \\\n    groupdn=\"ou=Groups,dc=example,dc=com\" \\\n    groupfilter=\"(&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))\" \\\n    groupattr=\"cn\" \\\n    binddn=\"cn=vault,ou=Service Accounts,dc=example,dc=com\" \\\n    bindpass=\"ldap_service_password\" \\\n    starttls=true \\\n    insecure_tls=false \\\n    certificate=@/opt/vault/tls/ldap-ca.crt\n\n# Configure OIDC authentication (Azure AD example)\nvault auth enable oidc\n\nvault write auth/oidc/config \\\n    oidc_discovery_url=\"https://login.microsoftonline.com/your-tenant-id/v2.0\" \\\n    oidc_client_id=\"your-application-id\" \\\n    oidc_client_secret=\"your-client-secret\" \\\n    default_role=\"azure-ad-users\"\n\nvault write auth/oidc/role/azure-ad-users \\\n    bound_audiences=\"your-application-id\" \\\n    allowed_redirect_uris=\"https://vault.example.com:8200/ui/vault/auth/oidc/oidc/callback\" \\\n    user_claim=\"email\" \\\n    policies=\"azure-ad-policy\"\n\n# Enable GitHub authentication\nvault auth enable github\n\nvault write auth/github/config \\\n    organization=\"your-organization\" \\\n    base_url=\"https://github.com/\" \\\n    max_ttl=\"8h\" \\\n    ttl=\"1h\"\n\nvault write auth/github/map/teams/vault-admins value=admin-policy\nvault write auth/github/map/teams/developers value=developer-policy\n\n# AWS IAM authentication\nvault auth enable aws\n\nvault write auth/aws/config/client \\\n    secret_key=\"your-secret-key\" \\\n    access_key=\"your-access-key\"\n\nvault write auth/aws/role/ec2-role \\\n    auth_type=\"ec2\" \\\n    policies=\"ec2-policy\" \\\n    max_ttl=\"1h\" \\\n    bound_instances=\"i-1234567890abcdef0,i-0987654321fedcba0\"\n\n# Kubernetes authentication\nvault auth enable kubernetes\n\nvault write auth/kubernetes/config \\\n    token_reviewer_jwt=\"$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" \\\n    kubernetes_host=\"https://kubernetes.example.com:6443\" \\\n    kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\nvault write auth/kubernetes/role/myapp \\\n    bound_service_account_names=\"vault-auth\" \\\n    bound_service_account_namespaces=\"default,production\" \\\n    policies=\"myapp-policy\" \\\n    ttl=\"1h\"\n```\n\n### Advanced Policy Management\n```bash\n# Create comprehensive policies with fine-grained access control\ncat > admin-policy.hcl <<EOF\n# Admin policy with full access and audit capabilities\npath \"*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# Audit log access for compliance\npath \"sys/audit/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# Manage authentication methods\npath \"sys/auth/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# Mount/unmount secrets engines\npath \"sys/mounts/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\", \"sudo\"]\n}\n\n# Configure and manage the audit devices\npath \"sys/audit\" {\n  capabilities = [\"read\", \"list\"]\n}\nEOF\n\ncat > developer-policy.hcl <<EOF\n# Developer policy with limited access to application secrets\npath \"secret/data/applications/{{identity.entity.aliases.auth_github_*.name}}/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\n\npath \"secret/metadata/applications/{{identity.entity.aliases.auth_github_*.name}}/*\" {\n  capabilities = [\"list\"]\n}\n\n# Read-only access to shared secrets\npath \"secret/data/shared/*\" {\n  capabilities = [\"read\", \"list\"]\n}\n\n# Database credentials with time-bound access\npath \"database/creds/readonly\" {\n  capabilities = [\"read\"]\n}\n\n# PKI certificate generation for specific domains\npath \"pki/issue/developer-role\" {\n  capabilities = [\"create\", \"update\"]\n}\n\n# Self-service capabilities\npath \"auth/token/lookup-self\" {\n  capabilities = [\"read\"]\n}\n\npath \"auth/token/renew-self\" {\n  capabilities = [\"update\"]\n}\n\npath \"auth/token/revoke-self\" {\n  capabilities = [\"update\"]\n}\nEOF\n\ncat > cicd-policy.hcl <<EOF\n# CI/CD policy for automated systems\npath \"secret/data/cicd/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\n\n# Database credentials for deployments\npath \"database/creds/application-user\" {\n  capabilities = [\"read\"]\n}\n\n# PKI for service certificates\npath \"pki/issue/service-role\" {\n  capabilities = [\"create\", \"update\"]\n}\n\n# Kubernetes service account tokens\npath \"kubernetes/creds/application-role\" {\n  capabilities = [\"read\"]\n}\n\n# AWS credentials for deployment\npath \"aws/creds/deployment-role\" {\n  capabilities = [\"read\"]\n}\nEOF\n\n# Apply policies\nvault policy write admin admin-policy.hcl\nvault policy write developer developer-policy.hcl\nvault policy write cicd cicd-policy.hcl\n\n# Create entity for identity management\nvault write identity/entity \\\n    name=\"john.doe\" \\\n    policies=\"developer\" \\\n    metadata=department=\"engineering\" \\\n    metadata=team=\"platform\"\n```\n\n## Advanced Secrets Engines\n\n### Database Secrets Engine\n```bash\n# Enable database secrets engine\nvault secrets enable database\n\n# Configure MySQL connection\nvault write database/config/mysql-prod \\\n    plugin_name=mysql-database-plugin \\\n    connection_url=\"{{username}}:{{password}}@tcp(mysql.example.com:3306)/\" \\\n    allowed_roles=\"mysql-admin,mysql-readonly,mysql-application\" \\\n    username=\"vault\" \\\n    password=\"vault-service-password\" \\\n    max_open_connections=5 \\\n    max_idle_connections=0 \\\n    max_connection_lifetime=\"10m\"\n\n# Create roles for different access levels\nvault write database/roles/mysql-admin \\\n    db_name=mysql-prod \\\n    creation_statements=\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}'; GRANT ALL ON *.* TO '{{name}}'@'%';\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n\nvault write database/roles/mysql-readonly \\\n    db_name=mysql-prod \\\n    creation_statements=\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}'; GRANT SELECT ON *.* TO '{{name}}'@'%';\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"8h\"\n\nvault write database/roles/mysql-application \\\n    db_name=mysql-prod \\\n    creation_statements=\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}'; GRANT SELECT, INSERT, UPDATE, DELETE ON app_db.* TO '{{name}}'@'%';\" \\\n    default_ttl=\"30m\" \\\n    max_ttl=\"2h\"\n\n# PostgreSQL configuration\nvault write database/config/postgres-prod \\\n    plugin_name=postgresql-database-plugin \\\n    connection_url=\"postgresql://{{username}}:{{password}}@postgres.example.com:5432/postgres?sslmode=require\" \\\n    allowed_roles=\"postgres-admin,postgres-readonly\" \\\n    username=\"vault\" \\\n    password=\"vault-postgres-password\"\n\nvault write database/roles/postgres-admin \\\n    db_name=postgres-prod \\\n    creation_statements=\"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; GRANT ALL PRIVILEGES ON DATABASE app_db TO \\\"{{name}}\\\";\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n```\n\n### PKI Secrets Engine (Enterprise Certificate Management)\n```bash\n# Enable PKI secrets engine for internal CA\nvault secrets enable -path=pki pki\n\n# Configure CA\nvault secrets tune -max-lease-ttl=87600h pki\n\n# Generate internal CA certificate\nvault write -field=certificate pki/root/generate/internal \\\n    common_name=\"Internal CA\" \\\n    issuer_name=\"internal-ca\" \\\n    ttl=87600h > /opt/vault/tls/internal-ca.crt\n\n# Configure certificate URLs\nvault write pki/config/urls \\\n    issuing_certificates=\"https://vault.example.com:8200/v1/pki/ca\" \\\n    crl_distribution_points=\"https://vault.example.com:8200/v1/pki/crl\"\n\n# Create intermediate CA\nvault secrets enable -path=pki_int pki\n\nvault secrets tune -max-lease-ttl=43800h pki_int\n\n# Generate intermediate CSR\nvault write -format=json pki_int/intermediate/generate/internal \\\n    common_name=\"Internal Intermediate CA\" \\\n    issuer_name=\"internal-intermediate-ca\" \\\n    | jq -r '.data.csr' > pki_intermediate.csr\n\n# Sign intermediate certificate\nvault write -format=json pki/root/sign-intermediate \\\n    issuer_ref=\"internal-ca\" \\\n    csr=@pki_intermediate.csr \\\n    format=pem_bundle ttl=\"43800h\" \\\n    | jq -r '.data.certificate' > intermediate.cert.pem\n\n# Import signed certificate\nvault write pki_int/intermediate/set-signed certificate=@intermediate.cert.pem\n\n# Create role for service certificates\nvault write pki_int/roles/service-role \\\n    issuer_ref=\"internal-intermediate-ca\" \\\n    allowed_domains=\"example.com,internal.example.com\" \\\n    allow_subdomains=true \\\n    max_ttl=\"72h\" \\\n    generate_lease=true\n\n# Create role for client certificates\nvault write pki_int/roles/client-role \\\n    issuer_ref=\"internal-intermediate-ca\" \\\n    allowed_domains=\"client.example.com\" \\\n    allow_subdomains=false \\\n    client_flag=true \\\n    max_ttl=\"24h\"\n\n# Generate certificate\nvault write pki_int/issue/service-role common_name=\"api.example.com\" ttl=\"24h\"\n```\n\n### Cloud Provider Integration\n\n#### AWS Secrets Engine\n```bash\n# Enable AWS secrets engine\nvault secrets enable aws\n\n# Configure AWS credentials\nvault write aws/config/root \\\n    access_key=\"vault-aws-access-key\" \\\n    secret_key=\"vault-aws-secret-key\" \\\n    region=\"us-west-2\"\n\n# Create AWS roles\nvault write aws/roles/ec2-admin \\\n    credential_type=\"iam_user\" \\\n    policy_document='-' <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:*\",\n        \"vpc:*\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n\nvault write aws/roles/s3-readonly \\\n    credential_type=\"iam_user\" \\\n    policy_arns=\"arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess\" \\\n    default_sts_ttl=\"1h\" \\\n    max_sts_ttl=\"12h\"\n\n# Generate temporary AWS credentials\nvault read aws/creds/ec2-admin\n```\n\n#### Azure Secrets Engine\n```bash\n# Enable Azure secrets engine\nvault secrets enable azure\n\n# Configure Azure credentials\nvault write azure/config \\\n    subscription_id=\"your-subscription-id\" \\\n    tenant_id=\"your-tenant-id\" \\\n    client_id=\"vault-service-principal-id\" \\\n    client_secret=\"vault-service-principal-secret\"\n\n# Create Azure roles\nvault write azure/roles/contributor \\\n    azure_roles='-' <<EOF\n[\n    {\n        \"role_name\": \"Contributor\",\n        \"scope\":  \"/subscriptions/your-subscription-id\"\n    }\n]\nEOF\n\nvault write azure/roles/storage-admin \\\n    azure_roles='-' <<EOF\n[\n    {\n        \"role_name\": \"Storage Account Contributor\",\n        \"scope\":  \"/subscriptions/your-subscription-id/resourceGroups/production\"\n    }\n]\nEOF\n\n# Generate Azure credentials\nvault read azure/creds/contributor\n```\n\n## Enterprise Features\n\n### Performance Replication\n```bash\n# Configure performance replication (Enterprise)\n# On primary cluster\nvault write -f sys/replication/performance/primary/enable\n\n# Generate secondary token\nvault write sys/replication/performance/primary/secondary-token id=\"dr-secondary\"\n\n# On secondary cluster\nvault write sys/replication/performance/secondary/enable token=\"<secondary-token>\"\n\n# Monitor replication status\nvault read sys/replication/status\nvault read sys/replication/performance/status\n```\n\n### Disaster Recovery Replication\n```bash\n# Enable DR replication on primary\nvault write -f sys/replication/dr/primary/enable\n\n# Generate DR token\nvault write sys/replication/dr/primary/secondary-token id=\"dr-cluster\"\n\n# On DR cluster\nvault write sys/replication/dr/secondary/enable token=\"<dr-token>\"\n\n# Promote DR secondary (in disaster scenario)\nvault write -f sys/replication/dr/secondary/promote\n\n# Demote and revert\nvault write -f sys/replication/dr/secondary/reindex\nvault write sys/replication/dr/secondary/update-primary dr_operation_token=\"<operation-token>\"\n```\n\n### Namespaces (Enterprise)\n```bash\n# Create namespaces for multi-tenancy\nvault namespace create engineering\nvault namespace create finance\nvault namespace create operations\n\n# Work within specific namespace\nexport VAULT_NAMESPACE=engineering\n\n# Configure namespace-specific policies and auth methods\nvault policy write -namespace=engineering eng-admin - <<EOF\npath \"*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"]\n}\nEOF\n\n# Enable auth method in namespace\nvault auth enable -namespace=engineering userpass\n\nvault write -namespace=engineering auth/userpass/users/alice \\\n    password=\"secure-password\" \\\n    policies=\"eng-admin\"\n```\n\n### Transform Secrets Engine (Enterprise)\n```bash\n# Enable transform secrets engine for data protection\nvault secrets enable transform\n\n# Create transformation for credit card numbers\nvault write transform/role/payments \\\n    transformations=credit-card-transformation\n\nvault write transform/transformation/credit-card-transformation \\\n    type=fpe \\\n    template=\"credit-card\" \\\n    tweak_source=supplied \\\n    allowed_roles=payments\n\nvault write transform/template/credit-card \\\n    type=regex \\\n    pattern='\\d{4}-\\d{4}-\\d{4}-(\\d{4})' \\\n    alphabet=numerics\n\n# Encode sensitive data\nvault write transform/encode/payments \\\n    transformation=credit-card-transformation \\\n    value=\"1234-5678-9012-3456\" \\\n    tweak=\"user-123\"\n\n# Decode when needed\nvault write transform/decode/payments \\\n    transformation=credit-card-transformation \\\n    value=\"encoded-value\" \\\n    tweak=\"user-123\"\n```\n\n## Backup and Disaster Recovery\n\n### Enterprise Backup Strategy\n```bash\n# Create comprehensive backup script\nsudo tee /usr/local/bin/vault-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/vault\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{snapshots,configs,certificates}\n\n# Raft storage snapshot (Enterprise)\nvault operator raft snapshot save ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/configs/vault-config-${DATE}.tar.gz \\\n    /etc/vault.d/ \\\n    /etc/systemd/system/vault.service\n\n# Backup TLS certificates\ntar -czf ${BACKUP_DIR}/certificates/vault-tls-${DATE}.tar.gz \\\n    /opt/vault/tls/\n\n# Backup to cloud storage\n# AWS S3\naws s3 cp ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap s3://vault-backups/snapshots/\naws s3 cp ${BACKUP_DIR}/configs/vault-config-${DATE}.tar.gz s3://vault-backups/configs/\n\n# Azure Blob Storage\naz storage blob upload \\\n    --file ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap \\\n    --container-name vault-backups \\\n    --name snapshots/vault-snapshot-${DATE}.snap\n\n# Google Cloud Storage\ngsutil cp ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap gs://vault-backups/snapshots/\n\n# Verify snapshot integrity\nvault operator raft snapshot inspect ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap\n\n# Keep only last 30 backups locally\nfind ${BACKUP_DIR} -name \"vault-*\" -type f -mtime +30 -delete\n\n# Encrypt backup files\ngpg --symmetric --cipher-algo AES256 ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap\n\necho \"Vault backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/vault-backup.sh\n\n# Schedule automated backups\necho \"0 2 * * * root /usr/local/bin/vault-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Disaster Recovery Testing\n```bash\n# Create DR testing script\nsudo tee /usr/local/bin/vault-dr-test.sh > /dev/null <<'EOF'\n#!/bin/bash\nTEST_DIR=\"/tmp/vault-dr-test\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${TEST_DIR}\n\n# Test snapshot restore capability\nvault operator raft snapshot save ${TEST_DIR}/test-snapshot-${DATE}.snap\n\n# Verify snapshot\nvault operator raft snapshot inspect ${TEST_DIR}/test-snapshot-${DATE}.snap\n\n# Test unsealing process\nvault operator key-status\n\n# Test authentication methods\nvault auth list\n\n# Test secrets engines\nvault secrets list\n\n# Test policy enforcement\nvault policy list\n\n# Generate test report\ncat > ${TEST_DIR}/dr-test-report-${DATE}.txt <<EOL\nVault DR Test Report - ${DATE}\n================================\n\nSnapshot Creation: $([ -f ${TEST_DIR}/test-snapshot-${DATE}.snap ] && echo \"PASS\" || echo \"FAIL\")\nVault Status: $(vault status -format=json | jq -r .sealed)\nActive Auth Methods: $(vault auth list -format=json | jq -r 'keys | length')\nActive Secrets Engines: $(vault secrets list -format=json | jq -r 'keys | length')\nPolicies Count: $(vault policy list | wc -l)\n\nTest completed at: $(date)\nEOL\n\necho \"DR test completed. Report: ${TEST_DIR}/dr-test-report-${DATE}.txt\"\nEOF\n\nsudo chmod +x /usr/local/bin/vault-dr-test.sh\n\n# Schedule monthly DR tests\necho \"0 2 1 * * root /usr/local/bin/vault-dr-test.sh\" | sudo tee -a /etc/crontab\n```\n\n## Application Integration Examples\n\n### Kubernetes Integration with Vault Agent\n```bash\n# Deploy Vault Agent as sidecar for Kubernetes workloads\ncat > vault-agent-k8s.yaml <<EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: vault-agent-config\ndata:\n  vault-agent.hcl: |\n    exit_after_auth = false\n    pid_file = \"/home/vault/pidfile\"\n\n    auto_auth {\n      method \"kubernetes\" {\n        mount_path = \"auth/kubernetes\"\n        config = {\n          role = \"myapp\"\n        }\n      }\n\n      sink \"file\" {\n        config = {\n          path = \"/home/vault/.vault-token\"\n        }\n      }\n    }\n\n    cache {\n      use_auto_auth_token = true\n    }\n\n    listener \"tcp\" {\n      address = \"127.0.0.1:8080\"\n      tls_disable = true\n    }\n\n    vault {\n      address = \"https://vault.example.com:8200\"\n    }\n\n    template {\n      source      = \"/vault/templates/database.conf.tpl\"\n      destination = \"/vault/secrets/database.conf\"\n      perms       = 0640\n      command     = \"pkill -SIGHUP myapp\"\n    }\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-with-vault\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      serviceAccountName: vault-auth\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        fsGroup: 1000\n      containers:\n      - name: vault-agent\n        image: vault:latest\n        command: [\"vault\", \"agent\", \"-config=/vault/config/vault-agent.hcl\"]\n        volumeMounts:\n        - name: vault-config\n          mountPath: /vault/config\n        - name: vault-secrets\n          mountPath: /vault/secrets\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n      - name: myapp\n        image: myapp:latest\n        volumeMounts:\n        - name: vault-secrets\n          mountPath: /app/config\n          readOnly: true\n        env:\n        - name: DB_CONFIG_FILE\n          value: \"/app/config/database.conf\"\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n      volumes:\n      - name: vault-config\n        configMap:\n          name: vault-agent-config\n      - name: vault-secrets\n        emptyDir:\n          medium: Memory\nEOF\n\nkubectl apply -f vault-agent-k8s.yaml\n```\n\n### CI/CD Pipeline Integration\n```bash\n# GitHub Actions integration\ncat > .github/workflows/vault-secrets.yml <<EOF\nname: Deploy with Vault Secrets\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: read\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Configure Vault authentication\n      uses: hashicorp/vault-action@v2\n      with:\n        url: https://vault.example.com:8200\n        method: jwt\n        role: github-actions-role\n        secrets: |\n          secret/data/database username | DB_USER ;\n          secret/data/database password | DB_PASS ;\n          aws/creds/deployment-role access_key | AWS_ACCESS_KEY_ID ;\n          aws/creds/deployment-role secret_key | AWS_SECRET_ACCESS_KEY ;\n          pki_int/issue/service-role common_name=api.example.com ttl=1h | API_TLS_CERT\n    \n    - name: Deploy application\n      run: |\n        echo \"Deploying with secrets from Vault\"\n        echo \"Database user: \\${{ env.DB_USER }}\"\n        # Application deployment logic here\n      env:\n        DB_USER: \\${{ env.DB_USER }}\n        DB_PASS: \\${{ env.DB_PASS }}\n        AWS_ACCESS_KEY_ID: \\${{ env.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ env.AWS_SECRET_ACCESS_KEY }}\nEOF\n\n# Configure GitHub Actions authentication in Vault\nvault auth enable jwt\n\nvault write auth/jwt/config \\\n    bound_issuer=\"https://token.actions.githubusercontent.com\" \\\n    oidc_discovery_url=\"https://token.actions.githubusercontent.com\"\n\nvault write auth/jwt/role/github-actions-role \\\n    bound_audiences=\"https://github.com/your-org\" \\\n    bound_subject=\"repo:your-org/your-repo:ref:refs/heads/main\" \\\n    user_claim=\"actor\" \\\n    role_type=\"jwt\" \\\n    policies=\"cicd-policy\" \\\n    ttl=\"10m\"\n```\n\n### Terraform Integration\n```bash\n# Vault provider for Terraform\ncat > terraform-vault.tf <<EOF\nterraform {\n  required_providers {\n    vault = {\n      source  = \"hashicorp/vault\"\n      version = \"~> 3.0\"\n    }\n  }\n}\n\nprovider \"vault\" {\n  address = \"https://vault.example.com:8200\"\n  token   = var.vault_token\n}\n\n# Read secrets from Vault\ndata \"vault_generic_secret\" \"database\" {\n  path = \"secret/database\"\n}\n\ndata \"vault_aws_access_credentials\" \"deployment\" {\n  backend = \"aws\"\n  role    = \"deployment-role\"\n}\n\n# Use secrets in resources\nresource \"aws_db_instance\" \"main\" {\n  identifier_prefix = var.project_name\n  \n  username = data.vault_generic_secret.database.data[\"username\"]\n  password = data.vault_generic_secret.database.data[\"password\"]\n  \n  # Other configuration...\n}\n\n# Store Terraform-generated secrets back in Vault\nresource \"vault_generic_secret\" \"terraform_outputs\" {\n  path = \"secret/terraform/outputs\"\n\n  data_json = jsonencode({\n    rds_endpoint = aws_db_instance.main.endpoint\n    vpc_id       = aws_vpc.main.id\n    subnet_ids   = aws_subnet.main[*].id\n  })\n}\nEOF\n```\n\n## Monitoring and Observability\n\n### Vault Metrics and Monitoring\n```bash\n# Enable Vault metrics collection\nvault write sys/metrics/config \\\n    enabled=true \\\n    enable_hostname_label=false \\\n    default_lease_duration=\"1h\" \\\n    max_lease_duration=\"24h\"\n\n# Prometheus monitoring configuration\ncat > /etc/prometheus/vault-monitoring.yml <<EOF\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: 'vault'\n    scheme: https\n    tls_config:\n      ca_file: /opt/vault/tls/ca.crt\n      cert_file: /opt/prometheus/tls/client.crt\n      key_file: /opt/prometheus/tls/client.key\n    static_configs:\n      - targets: \n        - 'vault-1.example.com:8200'\n        - 'vault-2.example.com:8200'\n        - 'vault-3.example.com:8200'\n    metrics_path: /v1/sys/metrics\n    params:\n      format: ['prometheus']\n    bearer_token: \"prometheus-vault-token\"\n\n  # Monitor Vault process metrics\n  - job_name: 'vault-node-exporter'\n    static_configs:\n      - targets:\n        - 'vault-1.example.com:9100'\n        - 'vault-2.example.com:9100'\n        - 'vault-3.example.com:9100'\nEOF\n\n# Create Grafana dashboards for Vault monitoring\ncurl -X POST http://admin:admin@grafana.example.com/api/dashboards/db \\\n  -H 'Content-Type: application/json' \\\n  -d @vault-dashboard.json\n```\n\n### Advanced Audit Analysis\n```bash\n# Create audit log analysis script\nsudo tee /usr/local/bin/vault-audit-analysis.sh > /dev/null <<'EOF'\n#!/bin/bash\nAUDIT_LOG=\"/opt/vault/logs/audit.log\"\nANALYSIS_DIR=\"/var/log/vault-analysis\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${ANALYSIS_DIR}\n\n# Failed authentication attempts\necho \"Failed Authentication Analysis - ${DATE}\" > ${ANALYSIS_DIR}/failed-auth-${DATE}.txt\njq -r 'select(.type==\"response\" and .error != null) | [.time, .request.remote_address, .error] | @tsv' ${AUDIT_LOG} | tail -100 >> ${ANALYSIS_DIR}/failed-auth-${DATE}.txt\n\n# Most active users\necho \"Most Active Users - ${DATE}\" > ${ANALYSIS_DIR}/active-users-${DATE}.txt\njq -r 'select(.type==\"request\" and .auth != null) | .auth.display_name' ${AUDIT_LOG} | sort | uniq -c | sort -nr | head -20 >> ${ANALYSIS_DIR}/active-users-${DATE}.txt\n\n# Secret access patterns\necho \"Secret Access Patterns - ${DATE}\" > ${ANALYSIS_DIR}/secret-access-${DATE}.txt\njq -r 'select(.type==\"request\" and .request.path | test(\"^secret/data/\")) | [.time, .auth.display_name, .request.path] | @tsv' ${AUDIT_LOG} | tail -100 >> ${ANALYSIS_DIR}/secret-access-${DATE}.txt\n\n# Policy violations\necho \"Policy Violations - ${DATE}\" > ${ANALYSIS_DIR}/policy-violations-${DATE}.txt\njq -r 'select(.type==\"response\" and .error != null and (.error | test(\"permission denied\"))) | [.time, .auth.display_name, .request.path, .error] | @tsv' ${AUDIT_LOG} | tail -50 >> ${ANALYSIS_DIR}/policy-violations-${DATE}.txt\n\n# Generate summary report\ncat > ${ANALYSIS_DIR}/audit-summary-${DATE}.txt <<EOL\nVault Audit Summary - ${DATE}\n==============================\n\nTotal Requests: $(jq -s 'length' ${AUDIT_LOG})\nFailed Authentications: $(jq -s 'map(select(.type==\"response\" and .error != null)) | length' ${AUDIT_LOG})\nPolicy Violations: $(jq -s 'map(select(.type==\"response\" and .error != null and (.error | test(\"permission denied\")))) | length' ${AUDIT_LOG})\nUnique Users: $(jq -r 'select(.type==\"request\" and .auth != null) | .auth.display_name' ${AUDIT_LOG} | sort -u | wc -l)\n\nTop 5 Accessed Paths:\n$(jq -r 'select(.type==\"request\") | .request.path' ${AUDIT_LOG} | sort | uniq -c | sort -nr | head -5)\n\nAnalysis completed at: $(date)\nEOL\n\necho \"Audit analysis completed. Reports in: ${ANALYSIS_DIR}/\"\nEOF\n\nsudo chmod +x /usr/local/bin/vault-audit-analysis.sh\n\n# Schedule weekly audit analysis\necho \"0 6 * * 1 root /usr/local/bin/vault-audit-analysis.sh\" | sudo tee -a /etc/crontab\n```\n\n## Verification and Testing\n\n### Comprehensive Health Checks\n```bash\n# Create Vault health monitoring script\nsudo tee /usr/local/bin/vault-health-check.sh > /dev/null <<'EOF'\n#!/bin/bash\nVAULT_ADDR=\"https://vault.example.com:8200\"\nHEALTH_LOG=\"/var/log/vault-health.log\"\n\n# Function to log with timestamp\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check Vault service status\nif systemctl is-active vault >/dev/null 2>&1; then\n    log_message \"âœ“ Vault service is running\"\nelse\n    log_message \"âœ— Vault service is not running\"\n    exit 1\nfi\n\n# Check Vault HTTP health\nif curl -k -sf ${VAULT_ADDR}/v1/sys/health >/dev/null 2>&1; then\n    log_message \"âœ“ Vault HTTP endpoint is responding\"\nelse\n    log_message \"âœ— Vault HTTP endpoint is not responding\"\n    exit 1\nfi\n\n# Check if Vault is sealed\nSEALED_STATUS=$(vault status -format=json | jq -r .sealed)\nif [ \"$SEALED_STATUS\" = \"false\" ]; then\n    log_message \"âœ“ Vault is unsealed\"\nelse\n    log_message \"âœ— Vault is sealed\"\n    exit 1\nfi\n\n# Check cluster status (if HA)\nif vault status -format=json | jq -r .ha_enabled | grep -q \"true\"; then\n    CLUSTER_HEALTH=$(vault operator raft list-peers -format=json | jq '.data.config.servers | length')\n    log_message \"âœ“ Cluster has ${CLUSTER_HEALTH} nodes\"\nfi\n\n# Check replication status (Enterprise)\nREPLICATION_STATUS=$(vault read -format=json sys/replication/status 2>/dev/null)\nif [ $? -eq 0 ]; then\n    DR_MODE=$(echo $REPLICATION_STATUS | jq -r .data.dr.mode)\n    PERF_MODE=$(echo $REPLICATION_STATUS | jq -r .data.performance.mode)\n    log_message \"âœ“ Replication status - DR: ${DR_MODE}, Performance: ${PERF_MODE}\"\nfi\n\n# Check auth methods\nAUTH_METHODS=$(vault auth list -format=json | jq -r 'keys | length')\nlog_message \"âœ“ ${AUTH_METHODS} authentication methods enabled\"\n\n# Check secrets engines\nSECRETS_ENGINES=$(vault secrets list -format=json | jq -r 'keys | length')\nlog_message \"âœ“ ${SECRETS_ENGINES} secrets engines enabled\"\n\n# Check policy count\nPOLICIES=$(vault policy list | wc -l)\nlog_message \"âœ“ ${POLICIES} policies configured\"\n\n# Test secret read/write\nTEST_SECRET=\"secret/health-check/test-$(date +%s)\"\nif vault kv put ${TEST_SECRET} test=true >/dev/null 2>&1; then\n    if vault kv get ${TEST_SECRET} >/dev/null 2>&1; then\n        log_message \"âœ“ Secret read/write test passed\"\n        vault kv delete ${TEST_SECRET} >/dev/null 2>&1\n    else\n        log_message \"âœ— Secret read test failed\"\n    fi\nelse\n    log_message \"âœ— Secret write test failed\"\nfi\n\n# Check audit devices\nAUDIT_DEVICES=$(vault audit list -format=json | jq -r 'keys | length')\nlog_message \"âœ“ ${AUDIT_DEVICES} audit devices enabled\"\n\nlog_message \"Vault health check completed successfully\"\nEOF\n\nsudo chmod +x /usr/local/bin/vault-health-check.sh\n\n# Schedule health checks every 15 minutes\necho \"*/15 * * * * root /usr/local/bin/vault-health-check.sh\" | sudo tee -a /etc/crontab\n```\n\n### Security Validation Testing\n```bash\n# Create security testing script\nsudo tee /usr/local/bin/vault-security-test.sh > /dev/null <<'EOF'\n#!/bin/bash\nVAULT_ADDR=\"https://vault.example.com:8200\"\nTEST_RESULTS=\"/tmp/vault-security-test-$(date +%Y%m%d_%H%M%S).txt\"\n\necho \"Vault Security Validation Test\" > ${TEST_RESULTS}\necho \"==============================\" >> ${TEST_RESULTS}\necho \"Date: $(date)\" >> ${TEST_RESULTS}\necho \"\" >> ${TEST_RESULTS}\n\n# Test 1: TLS Configuration\necho \"Testing TLS Configuration...\" >> ${TEST_RESULTS}\nTLS_VERSION=$(openssl s_client -connect vault.example.com:8200 -brief 2>/dev/null | grep \"Protocol version\")\necho \"TLS Version: ${TLS_VERSION}\" >> ${TEST_RESULTS}\n\n# Test 2: Authentication requirements\necho \"Testing authentication requirements...\" >> ${TEST_RESULTS}\nUNAUTH_ACCESS=$(curl -k -s -w \"%{http_code}\" -o /dev/null ${VAULT_ADDR}/v1/secret/test)\nif [ \"$UNAUTH_ACCESS\" = \"403\" ]; then\n    echo \"âœ“ Unauthenticated access properly denied\" >> ${TEST_RESULTS}\nelse\n    echo \"âœ— Unauthenticated access not properly restricted\" >> ${TEST_RESULTS}\nfi\n\n# Test 3: Seal status\necho \"Testing seal status...\" >> ${TEST_RESULTS}\nSEALED=$(vault status -format=json | jq -r .sealed)\nif [ \"$SEALED\" = \"false\" ]; then\n    echo \"âœ“ Vault is properly unsealed\" >> ${TEST_RESULTS}\nelse\n    echo \"âœ— Vault is sealed\" >> ${TEST_RESULTS}\nfi\n\n# Test 4: Audit logging\necho \"Testing audit logging...\" >> ${TEST_RESULTS}\nAUDIT_COUNT=$(vault audit list -format=json | jq -r 'keys | length')\nif [ \"$AUDIT_COUNT\" -gt \"0\" ]; then\n    echo \"âœ“ ${AUDIT_COUNT} audit devices enabled\" >> ${TEST_RESULTS}\nelse\n    echo \"âœ— No audit devices enabled\" >> ${TEST_RESULTS}\nfi\n\n# Test 5: Policy enforcement\necho \"Testing policy enforcement...\" >> ${TEST_RESULTS}\nvault token create -policy=developer -ttl=1m -format=json > /tmp/test-token.json\nTEST_TOKEN=$(jq -r .auth.client_token /tmp/test-token.json)\n\n# Test with limited token\nVAULT_TOKEN=${TEST_TOKEN} vault auth -method=token ${TEST_TOKEN} >/dev/null 2>&1\nLIMITED_ACCESS=$(VAULT_TOKEN=${TEST_TOKEN} curl -k -s -w \"%{http_code}\" -o /dev/null -H \"X-Vault-Token: ${TEST_TOKEN}\" ${VAULT_ADDR}/v1/sys/auth)\nif [ \"$LIMITED_ACCESS\" = \"403\" ]; then\n    echo \"âœ“ Policy enforcement working correctly\" >> ${TEST_RESULTS}\nelse\n    echo \"âœ— Policy enforcement may be misconfigured\" >> ${TEST_RESULTS}\nfi\n\n# Revoke test token\nvault token revoke ${TEST_TOKEN}\nrm /tmp/test-token.json\n\necho \"\" >> ${TEST_RESULTS}\necho \"Security test completed at: $(date)\" >> ${TEST_RESULTS}\n\necho \"Security test completed. Results: ${TEST_RESULTS}\"\nEOF\n\nsudo chmod +x /usr/local/bin/vault-security-test.sh\n\n# Run security tests weekly\necho \"0 8 * * 1 root /usr/local/bin/vault-security-test.sh\" | sudo tee -a /etc/crontab\n```\n\n## Troubleshooting (Cross-Platform)\n\n### Common Issues and Solutions\n```bash\n# Check Vault status and logs\nvault status\nsudo journalctl -u vault -f\n\n# Debug unsealing issues\nvault operator key-status\nvault status -format=json | jq .recovery_seal\n\n# Memory lock issues\ncat /proc/$(pgrep vault)/status | grep VmLck\nulimit -l\n\n# Permission issues\nsudo chown -R vault:vault /opt/vault\nsudo chmod 640 /etc/vault.d/vault.hcl\nls -laZ /opt/vault  # SELinux context\n\n# Network connectivity tests\ncurl -k https://vault.example.com:8200/v1/sys/health\nopenssl s_client -connect vault.example.com:8200\n\n# Storage backend issues\n# For Raft storage\nvault operator raft list-peers\nvault operator raft autopilot status\n\n# For Consul storage\nconsul members\nconsul kv get -recurse vault/\n\n# Certificate issues\nopenssl x509 -in /opt/vault/tls/vault.crt -text -noout\nvault auth -method=cert \\\n    -ca-cert=/opt/vault/tls/ca.crt \\\n    -client-cert=/opt/vault/tls/client.crt \\\n    -client-key=/opt/vault/tls/client.key\n\n# Performance troubleshooting\nvault read sys/metrics\nvault read sys/host-info\nvault read sys/pprof/profile  # Enterprise\n\n# Audit log analysis\ntail -f /opt/vault/logs/audit.log | jq .\ngrep \"error\" /opt/vault/logs/audit.log | jq .\n\n# Token debugging\nvault token lookup\nvault token capabilities secret/data/test\n\n# Seal/unseal debugging\nvault operator unseal -migrate  # For seal migration\nvault operator rekey  # For changing unseal keys\n\n# Cluster debugging\nvault operator raft snapshot save debug-snapshot.snap\nvault operator raft snapshot inspect debug-snapshot.snap\n```\n\n### Advanced Debugging\n```bash\n# Enable debug logging\nsudo systemctl edit vault.service\n# Add:\n[Service]\nExecStart=\nExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl -log-level=debug\n\nsudo systemctl daemon-reload\nsudo systemctl restart vault\n\n# Monitor real-time operations\ntail -f /opt/vault/logs/vault.log | grep -E \"(ERROR|WARN|DEBUG)\"\n\n# Database connection debugging\nvault read database/config/mysql-prod\n\n# PKI debugging\nvault read pki/cert/ca\nvault read pki/crl\n\n# Replication debugging (Enterprise)\nvault read sys/replication/performance/status\nvault read sys/replication/dr/status\n\n# HSM debugging (Enterprise)\nvault read sys/seal-status\nvault read sys/hsm/status\n\n# Memory and performance analysis\npmap -x $(pgrep vault)\nstrace -p $(pgrep vault) -e trace=file\n\n# Network debugging\nss -tulpn | grep vault\nnetstat -tulpn | grep vault\n```\n\n## Additional Resources\n\n- [Official Documentation](https://www.vaultproject.io/docs)\n- [API Documentation](https://www.vaultproject.io/api-docs)\n- [Production Hardening Guide](https://learn.hashicorp.com/tutorials/vault/production-hardening)\n- [Enterprise Features](https://www.hashicorp.com/products/vault/enterprise)\n- [Security Best Practices](https://learn.hashicorp.com/tutorials/vault/security-intro)\n- [Community Forum](https://discuss.hashicorp.com/c/vault)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"hashicorp-vault-installation-guide\" class=\"mobile-header\">HashiCorp Vault Installation Guide</h1>\n<p class=\"mobile-paragraph\">Enterprise-grade secrets management platform for securely storing and accessing API keys, passwords, certificates, and other sensitive data. Industry standard for secrets management with advanced security features.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for production</li>\n<li class=\"mobile-list-item\">Persistent storage for Vault data (encrypted disk recommended)</li>\n<li class=\"mobile-list-item\">TLS certificates for production deployment</li>\n<li class=\"mobile-list-item\">HSM (optional, for enterprise compliance)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"using-package-manager-recommended\" class=\"mobile-header\">Using Package Manager (Recommended)</h3>\n<p class=\"mobile-paragraph\">#### Ubuntu/Debian</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp GPG key\nwget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg\n\n# Add HashiCorp repository\necho &quot;deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/hashicorp.list\n\n# Update and install Vault\nsudo apt update\nsudo apt install -y vault\n\n# Create vault user and directories\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\nsudo mkdir -p /opt/vault/{data,logs,tls} /etc/vault.d\nsudo chown -R vault:vault /opt/vault /etc/vault.d</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### RHEL/CentOS/Rocky Linux/AlmaLinux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo yum install -y yum-utils\nsudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/RHEL/hashicorp.repo\n\n# Install Vault\nsudo yum install -y vault\n\n# Create vault user and directories\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\nsudo mkdir -p /opt/vault/{data,logs,tls} /etc/vault.d\nsudo chown -R vault:vault /opt/vault /etc/vault.d</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Fedora</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add HashiCorp repository\nsudo dnf install -y dnf-plugins-core\nsudo dnf config-manager --add-repo https://rpm.releases.hashicorp.com/fedora/hashicorp.repo\n\n# Install Vault\nsudo dnf install -y vault\n\n# Setup directories and user\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\nsudo mkdir -p /opt/vault/{data,logs,tls} /etc/vault.d\nsudo chown -R vault:vault /opt/vault /etc/vault.d</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Arch Linux</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install from AUR\nyay -S vault\n\n# Or from community repository\nsudo pacman -Syu vault\n\n# Setup vault user and directories\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\nsudo mkdir -p /opt/vault/{data,logs,tls} /etc/vault.d\nsudo chown -R vault:vault /opt/vault /etc/vault.d</code></pre>\n      </div>\n    </div>\n<h3 id=\"manual-binary-installation\" class=\"mobile-header\">Manual Binary Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download latest Vault\nVAULT_VERSION=&quot;1.15.2&quot;\ncd /tmp\nwget https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip\n\n# Install unzip if needed\nsudo apt install -y unzip  # Ubuntu/Debian\nsudo yum install -y unzip  # RHEL/CentOS\nsudo pacman -S unzip       # Arch Linux\n\n# Extract and install\nunzip vault_${VAULT_VERSION}_linux_amd64.zip\nsudo mv vault /usr/local/bin/\nsudo chmod +x /usr/local/bin/vault\n\n# Create vault user\nsudo useradd --system --home /etc/vault.d --shell /bin/false vault\n\n# Create directories\nsudo mkdir -p /opt/vault/{data,logs,tls} /etc/vault.d\nsudo chown -R vault:vault /opt/vault /etc/vault.d\n\n# Verify installation\nvault version\n\n# Clean up\nrm vault_${VAULT_VERSION}_linux_amd64.zip</code></pre>\n      </div>\n    </div>\n<h3 id=\"using-docker\" class=\"mobile-header\">Using Docker</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create directories for persistent data\nmkdir -p ~/vault/{data,config,logs,tls}\n\n# Generate TLS certificates for Docker\nopenssl req -x509 -nodes -newkey rsa:4096 -keyout ~/vault/tls/vault.key -out ~/vault/tls/vault.crt -days 365 -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=vault.example.com&quot;\n\n# Create production-ready configuration\ncat &gt; ~/vault/config/vault.hcl &lt;&lt;EOF\nui = true\ndisable_mlock = false\n\n# Storage backend\nstorage &quot;file&quot; {\n  path = &quot;/vault/data&quot;\n}\n\n# HTTPS listener\nlistener &quot;tcp&quot; {\n  address       = &quot;0.0.0.0:8200&quot;\n  tls_cert_file = &quot;/vault/tls/vault.crt&quot;\n  tls_key_file  = &quot;/vault/tls/vault.key&quot;\n  tls_min_version = &quot;tls12&quot;\n}\n\n# Cluster configuration\napi_addr = &quot;https://vault.example.com:8200&quot;\ncluster_addr = &quot;https://vault.example.com:8201&quot;\n\n# Logging\nlog_level = &quot;Info&quot;\nlog_file  = &quot;/vault/logs/vault.log&quot;\nlog_rotate_duration = &quot;24h&quot;\nlog_rotate_max_files = 15\n\n# Telemetry\ntelemetry {\n  prometheus_retention_time = &quot;30s&quot;\n  disable_hostname = true\n}\n\n# Enterprise features (if using Vault Enterprise)\nlicense_path = &quot;/vault/license/vault.hclic&quot;\n\n# Performance replication (Enterprise)\nreplication {\n  resolver_discover_servers = false\n}\nEOF\n\n# Run Vault container with security settings\ndocker run -d \\\n  --name vault \\\n  --restart unless-stopped \\\n  --cap-add=IPC_LOCK \\\n  --ulimit memlock=-1:-1 \\\n  -p 8200:8200 \\\n  -v ~/vault/data:/vault/data \\\n  -v ~/vault/config:/vault/config \\\n  -v ~/vault/logs:/vault/logs \\\n  -v ~/vault/tls:/vault/tls \\\n  vault:latest server -config=/vault/config/vault.hcl</code></pre>\n      </div>\n    </div>\n<h2 id=\"production-configuration\" class=\"mobile-header\">Production Configuration</h2>\n<h3 id=\"enterprise-production-configuration\" class=\"mobile-header\">Enterprise Production Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive production configuration\nsudo tee /etc/vault.d/vault.hcl &gt; /dev/null &lt;&lt;EOF\n# Vault Enterprise Production Configuration\n\n# UI and basic settings\nui = true\ndisable_mlock = false\n\n# Storage backend - Consul (HA) or Integrated Storage (Raft)\nstorage &quot;raft&quot; {\n  path    = &quot;/opt/vault/data&quot;\n  node_id = &quot;vault-node-1&quot;\n\n  retry_join {\n    leader_api_addr = &quot;https://vault-node-2.example.com:8200&quot;\n  }\n  \n  retry_join {\n    leader_api_addr = &quot;https://vault-node-3.example.com:8200&quot;\n  }\n\n  # Enterprise: Performance replication\n  autopilot {\n    cleanup_dead_servers = true\n    last_contact_threshold = &quot;200ms&quot;\n    max_trailing_logs = 250\n    min_quorum = 3\n    server_stabilization_time = &quot;10s&quot;\n  }\n}\n\n# Alternative: Consul backend for HA\n# storage &quot;consul&quot; {\n#   address = &quot;127.0.0.1:8500&quot;\n#   path    = &quot;vault/&quot;\n#   service = &quot;vault&quot;\n#   check_timeout = &quot;5s&quot;\n#   disable_registration = false\n# }\n\n# HTTPS listener with modern TLS\nlistener &quot;tcp&quot; {\n  address       = &quot;0.0.0.0:8200&quot;\n  tls_cert_file = &quot;/opt/vault/tls/vault.crt&quot;\n  tls_key_file  = &quot;/opt/vault/tls/vault.key&quot;\n  tls_min_version = &quot;tls12&quot;\n  tls_cipher_suites = &quot;TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256&quot;\n  tls_require_and_verify_client_cert = false\n  tls_client_ca_file = &quot;/opt/vault/tls/ca.crt&quot;\n}\n\n# Cluster listener for HA\nlistener &quot;tcp&quot; {\n  address = &quot;0.0.0.0:8201&quot; \n  cluster_address = &quot;0.0.0.0:8201&quot;\n  tls_cert_file = &quot;/opt/vault/tls/vault.crt&quot;\n  tls_key_file  = &quot;/opt/vault/tls/vault.key&quot;\n}\n\n# API and cluster addresses\napi_addr = &quot;https://vault.example.com:8200&quot;\ncluster_addr = &quot;https://vault.example.com:8201&quot;\n\n# Enterprise license\nlicense_path = &quot;/opt/vault/license/vault.hclic&quot;\n\n# Logging configuration\nlog_level = &quot;Info&quot;\nlog_file  = &quot;/opt/vault/logs/vault.log&quot;\nlog_rotate_duration = &quot;24h&quot;\nlog_rotate_max_files = 30\n\n# Telemetry and monitoring\ntelemetry {\n  prometheus_retention_time = &quot;30s&quot;\n  disable_hostname = true\n  usage_gauge_period = &quot;5m&quot;\n}\n\n# Seal configuration - Auto-unseal with cloud KMS (Enterprise)\nseal &quot;awskms&quot; {\n  region     = &quot;us-west-2&quot;\n  kms_key_id = &quot;arn:aws:kms:us-west-2:123456789012:key/12345678-1234-1234-1234-123456789012&quot;\n}\n\n# Alternative: Azure Key Vault\n# seal &quot;azurekeyvault&quot; {\n#   tenant_id      = &quot;46646709-b63e-4747-be42-516edeaf1e14&quot;\n#   client_id      = &quot;03dc33fc-16d9-4b77-8152-3ec568f8af6e&quot;\n#   client_secret  = &quot;DUJDS3...&quot;\n#   vault_name     = &quot;hc-vault&quot;\n#   key_name       = &quot;vault_key&quot;\n# }\n\n# Alternative: Google Cloud KMS\n# seal &quot;gcpckms&quot; {\n#   project     = &quot;vault-project&quot;\n#   region      = &quot;us-central1&quot;\n#   key_ring    = &quot;vault-keyring&quot;\n#   crypto_key  = &quot;vault-key&quot;\n# }\n\n# Performance replication (Enterprise)\nreplication {\n  resolver_discover_servers = false\n}\n\n# HSM configuration (Enterprise with HSM)\n# seal &quot;pkcs11&quot; {\n#   lib            = &quot;/usr/lib/softhsm/libsofthsm2.so&quot;\n#   slot           = &quot;0&quot;\n#   pin            = &quot;1234&quot;\n#   key_label      = &quot;vault-hsm-key&quot;\n#   hmac_key_label = &quot;vault-hsm-hmac-key&quot;\n# }\nEOF\n\nsudo chown vault:vault /etc/vault.d/vault.hcl\nsudo chmod 640 /etc/vault.d/vault.hcl</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-tls-configuration\" class=\"mobile-header\">Advanced TLS Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Generate production-grade TLS certificates\nsudo mkdir -p /opt/vault/tls\n\n# Create CA certificate\nsudo openssl genrsa -out /opt/vault/tls/ca-key.pem 4096\nsudo openssl req -new -x509 -days 3650 -key /opt/vault/tls/ca-key.pem -out /opt/vault/tls/ca.crt -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=Vault-CA&quot;\n\n# Create server certificate\nsudo openssl genrsa -out /opt/vault/tls/vault-key.pem 4096\nsudo openssl req -new -key /opt/vault/tls/vault-key.pem -out /opt/vault/tls/vault.csr -subj &quot;/C=US/ST=State/L=City/O=Organization/CN=vault.example.com&quot;\n\n# Create certificate with SAN extensions\nsudo tee /opt/vault/tls/vault.conf &gt; /dev/null &lt;&lt;EOF\n[req]\ndistinguished_name = req_distinguished_name\nreq_extensions = v3_req\n\n[req_distinguished_name]\n\n[v3_req]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = vault.example.com\nDNS.2 = vault-node-1.example.com\nDNS.3 = vault-node-2.example.com\nDNS.4 = vault-node-3.example.com\nDNS.5 = localhost\nIP.1 = 127.0.0.1\nIP.2 = 10.0.1.10\nIP.3 = 10.0.1.11\nIP.4 = 10.0.1.12\nEOF\n\nsudo openssl x509 -req -days 365 -in /opt/vault/tls/vault.csr -CA /opt/vault/tls/ca.crt -CAkey /opt/vault/tls/ca-key.pem -CAcreateserial -out /opt/vault/tls/vault.crt -extensions v3_req -extfile /opt/vault/tls/vault.conf\n\n# Set secure permissions\nsudo chmod 600 /opt/vault/tls/*-key.pem\nsudo chmod 644 /opt/vault/tls/*.crt\nsudo chown -R vault:vault /opt/vault/tls\n\n# For Let&#039;s Encrypt certificates (production)\nsudo apt install -y certbot  # Ubuntu/Debian\nsudo yum install -y certbot  # RHEL/CentOS\n\nsudo certbot certonly --standalone -d vault.example.com\nsudo cp /etc/letsencrypt/live/vault.example.com/fullchain.pem /opt/vault/tls/vault.crt\nsudo cp /etc/letsencrypt/live/vault.example.com/privkey.pem /opt/vault/tls/vault-key.pem\nsudo chown vault:vault /opt/vault/tls/vault.*</code></pre>\n      </div>\n    </div>\n<h3 id=\"enterprise-systemd-service-with-security-hardening\" class=\"mobile-header\">Enterprise SystemD Service with Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/systemd/system/vault.service &gt; /dev/null &lt;&lt;EOF\n[Unit]\nDescription=HashiCorp Vault - A tool for managing secrets\nDocumentation=https://www.vaultproject.io/docs/\nRequires=network-online.target\nAfter=network-online.target\nConditionFileNotEmpty=/etc/vault.d/vault.hcl\nStartLimitIntervalSec=60\nStartLimitBurst=3\n\n[Service]\nType=notify\nUser=vault\nGroup=vault\nExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl\nExecReload=/bin/kill --signal HUP \\$MAINPID\nKillMode=process\nRestart=on-failure\nRestartSec=5\nTimeoutStopSec=30\nStartLimitInterval=60\nStartLimitBurst=3\n\n# File system isolation\nProtectSystem=full\nProtectHome=read-only\nPrivateTmp=yes\nPrivateDevices=yes\n\n# Secure computing\nNoNewPrivileges=yes\nSecureBits=keep-caps\nCapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK\n\n# Additional security features\nAmbientCapabilities=CAP_IPC_LOCK\nCapabilities=CAP_IPC_LOCK+ep\n\n# Resource limits\nLimitNOFILE=65536\nLimitMEMLOCK=infinity\nLimitCORE=0\n\n# Network isolation\nRestrictNamespaces=yes\nRestrictRealtime=yes\n\n# Read-only paths\nReadOnlyPaths=/etc /usr\n\n# Writable paths\nReadWritePaths=/opt/vault/data\nReadWritePaths=/opt/vault/logs\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsudo systemctl daemon-reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"high-availability-cluster-setup\" class=\"mobile-header\">High Availability Cluster Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure HA cluster with Integrated Storage (Raft)\n# Node 1 configuration\nsudo tee /etc/vault.d/vault.hcl &gt; /dev/null &lt;&lt;EOF\nui = true\ndisable_mlock = false\n\nstorage &quot;raft&quot; {\n  path    = &quot;/opt/vault/data&quot;\n  node_id = &quot;vault-node-1&quot;\n}\n\nlistener &quot;tcp&quot; {\n  address       = &quot;0.0.0.0:8200&quot;\n  tls_cert_file = &quot;/opt/vault/tls/vault.crt&quot;\n  tls_key_file  = &quot;/opt/vault/tls/vault-key.pem&quot;\n  tls_min_version = &quot;tls12&quot;\n}\n\nlistener &quot;tcp&quot; {\n  address       = &quot;0.0.0.0:8201&quot;\n  cluster_address = &quot;10.0.1.10:8201&quot;\n  tls_cert_file = &quot;/opt/vault/tls/vault.crt&quot;\n  tls_key_file  = &quot;/opt/vault/tls/vault-key.pem&quot;\n}\n\napi_addr = &quot;https://10.0.1.10:8200&quot;\ncluster_addr = &quot;https://10.0.1.10:8201&quot;\n\n# Enterprise features\nlicense_path = &quot;/opt/vault/license/vault.hclic&quot;\n\n# Auto-unseal with AWS KMS\nseal &quot;awskms&quot; {\n  region     = &quot;us-west-2&quot;\n  kms_key_id = &quot;arn:aws:kms:us-west-2:123456789012:key/vault-unseal-key&quot;\n}\n\n# Performance replication (Enterprise)\nreplication {\n  resolver_discover_servers = false\n}\nEOF\n\n# Initialize cluster on first node\nsudo systemctl start vault\nexport VAULT_ADDR=&#039;https://127.0.0.1:8200&#039;\nexport VAULT_SKIP_VERIFY=true  # Only for self-signed certs\nvault operator init -recovery-shares=5 -recovery-threshold=3\n\n# Join additional nodes to cluster\n# Node 2 and 3: Add retry_join blocks to their vault.hcl\nsudo tee -a /etc/vault.d/vault.hcl &gt; /dev/null &lt;&lt;EOF\n\nstorage &quot;raft&quot; {\n  path    = &quot;/opt/vault/data&quot;\n  node_id = &quot;vault-node-2&quot;  # Change to node-3 for third node\n  \n  retry_join {\n    leader_api_addr = &quot;https://10.0.1.10:8200&quot;\n  }\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-hardening-2024-best-practices\" class=\"mobile-header\">Security Hardening (2024 Best Practices)</h2>\n<h3 id=\"system-level-security\" class=\"mobile-header\">System-Level Security</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Disable swap (critical for security)\nsudo swapoff -a\nsudo sed -i &#039;/ swap / s/^\\(.*\\)$/#\\1/g&#039; /etc/fstab\n\n# Disable core dumps\necho &#039;* hard core 0&#039; | sudo tee -a /etc/security/limits.conf\necho &#039;* soft core 0&#039; | sudo tee -a /etc/security/limits.conf\necho &#039;vault hard core 0&#039; | sudo tee -a /etc/security/limits.conf\necho &#039;vault soft core 0&#039; | sudo tee -a /etc/security/limits.conf\n\n# Configure kernel parameters for security\nsudo tee -a /etc/sysctl.conf &gt; /dev/null &lt;&lt;EOF\n# Vault security hardening\nkernel.dmesg_restrict = 1\nkernel.kptr_restrict = 2\nkernel.yama.ptrace_scope = 1\nfs.suid_dumpable = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0\nEOF\n\nsudo sysctl -p\n\n# SELinux configuration (RHEL/CentOS/Fedora)\nif command -v getenforce &gt;/dev/null 2&gt;&amp;1; then\n    sudo setsebool -P authlogin_nsswitch_use_ldap 1\n    sudo setsebool -P allow_execheap 0\n    sudo setsebool -P allow_execmem 0\n    sudo setsebool -P allow_execmod 0\n    sudo setsebool -P allow_execstack 0\n    \n    # Custom SELinux policy for Vault\n    sudo tee vault.te &gt; /dev/null &lt;&lt;EOF\nmodule vault 1.0;\n\nrequire {\n    type unconfined_t;\n    type vault_t;\n    class capability { ipc_lock sys_admin };\n    class process { setrlimit };\n}\n\n#============= vault_t ==============\nallow vault_t self:capability { ipc_lock sys_admin };\nallow vault_t self:process setrlimit;\nEOF\n\n    checkmodule -M -m -o vault.mod vault.te\n    semodule_package -o vault.pp -m vault.mod\n    sudo semodule -i vault.pp\nfi\n\n# AppArmor configuration (Ubuntu/Debian)\nif command -v apparmor_status &gt;/dev/null 2&gt;&amp;1; then\n    sudo tee /etc/apparmor.d/vault &gt; /dev/null &lt;&lt;EOF\n#include &lt;tunables/global&gt;\n\n/usr/local/bin/vault {\n  #include &lt;abstractions/base&gt;\n  #include &lt;abstractions/nameservice&gt;\n  #include &lt;abstractions/ssl_certs&gt;\n\n  capability ipc_lock,\n  capability setuid,\n  capability setgid,\n\n  /usr/local/bin/vault mr,\n  /etc/vault.d/** r,\n  /opt/vault/** rwk,\n  /proc/meminfo r,\n  /proc/sys/kernel/random/uuid r,\n  /sys/kernel/mm/transparent_hugepage/hpage_pmd_size r,\n\n  # Network access\n  network inet dgram,\n  network inet stream,\n\n  # Deny dangerous operations\n  deny /proc/kcore rwklx,\n  deny /proc/sysrq-trigger rwklx,\n  deny /proc/kmem rwklx,\n  deny /proc/mem rwklx,\n}\nEOF\n\n    sudo apparmor_parser -r /etc/apparmor.d/vault\nfi</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-configuration-cross-platform\" class=\"mobile-header\">Firewall Configuration (Cross-Platform)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># UFW (Ubuntu/Debian)\nsudo ufw allow from 10.0.0.0/8 to any port 8200 comment &#039;Vault API - internal network only&#039;\nsudo ufw allow from 10.0.0.0/8 to any port 8201 comment &#039;Vault cluster - internal network only&#039;\nsudo ufw deny 8200 comment &#039;Block Vault API from public&#039;\nsudo ufw deny 8201 comment &#039;Block Vault cluster from public&#039;\nsudo ufw enable\n\n# Firewalld (RHEL/CentOS/Fedora)\nsudo firewall-cmd --permanent --new-zone=vault\nsudo firewall-cmd --permanent --zone=vault --add-source=10.0.0.0/8\nsudo firewall-cmd --permanent --zone=vault --add-port=8200/tcp\nsudo firewall-cmd --permanent --zone=vault --add-port=8201/tcp\nsudo firewall-cmd --reload\n\n# iptables (Universal)\nsudo iptables -A INPUT -p tcp -s 10.0.0.0/8 --dport 8200 -j ACCEPT\nsudo iptables -A INPUT -p tcp -s 10.0.0.0/8 --dport 8201 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport 8200 -j DROP\nsudo iptables -A INPUT -p tcp --dport 8201 -j DROP\n\n# Save iptables rules\n# Ubuntu/Debian\nsudo apt install -y iptables-persistent\nsudo netfilter-persistent save\n\n# RHEL/CentOS\nsudo service iptables save</code></pre>\n      </div>\n    </div>\n<h3 id=\"audit-logging-and-monitoring\" class=\"mobile-header\">Audit Logging and Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable comprehensive audit logging\nexport VAULT_ADDR=&#039;https://127.0.0.1:8200&#039;\nvault auth &lt;root-token&gt;\n\n# Enable file audit device\nvault audit enable file file_path=/opt/vault/logs/audit.log\n\n# Enable syslog audit device\nvault audit enable syslog tag=&quot;vault&quot; facility=&quot;LOCAL0&quot;\n\n# Configure log rotation for audit logs\nsudo tee /etc/logrotate.d/vault-audit &gt; /dev/null &lt;&lt;EOF\n/opt/vault/logs/audit.log {\n    daily\n    missingok\n    rotate 90\n    compress\n    delaycompress\n    notifempty\n    create 640 vault vault\n    postrotate\n        /bin/kill -HUP \\`cat /var/run/vault.pid 2&gt;/dev/null\\` 2&gt;/dev/null || true\n    endscript\n}\nEOF\n\n# Setup centralized logging (rsyslog configuration)\nsudo tee -a /etc/rsyslog.conf &gt; /dev/null &lt;&lt;EOF\n\n# Vault audit logging\nlocal0.*    /var/log/vault-audit.log\n&amp; stop\nEOF\n\nsudo systemctl restart rsyslog\n\n# Prometheus monitoring configuration\nvault write sys/metrics/config enabled=true</code></pre>\n      </div>\n    </div>\n<h2 id=\"authentication-methods-and-policies\" class=\"mobile-header\">Authentication Methods and Policies</h2>\n<h3 id=\"enterprise-authentication-setup\" class=\"mobile-header\">Enterprise Authentication Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable and configure LDAP authentication\nvault auth enable ldap\n\nvault write auth/ldap/config \\\n    url=&quot;ldaps://ldap.example.com&quot; \\\n    userdn=&quot;ou=Users,dc=example,dc=com&quot; \\\n    userattr=&quot;sAMAccountName&quot; \\\n    groupdn=&quot;ou=Groups,dc=example,dc=com&quot; \\\n    groupfilter=&quot;(&amp;(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))&quot; \\\n    groupattr=&quot;cn&quot; \\\n    binddn=&quot;cn=vault,ou=Service Accounts,dc=example,dc=com&quot; \\\n    bindpass=&quot;ldap_service_password&quot; \\\n    starttls=true \\\n    insecure_tls=false \\\n    certificate=@/opt/vault/tls/ldap-ca.crt\n\n# Configure OIDC authentication (Azure AD example)\nvault auth enable oidc\n\nvault write auth/oidc/config \\\n    oidc_discovery_url=&quot;https://login.microsoftonline.com/your-tenant-id/v2.0&quot; \\\n    oidc_client_id=&quot;your-application-id&quot; \\\n    oidc_client_secret=&quot;your-client-secret&quot; \\\n    default_role=&quot;azure-ad-users&quot;\n\nvault write auth/oidc/role/azure-ad-users \\\n    bound_audiences=&quot;your-application-id&quot; \\\n    allowed_redirect_uris=&quot;https://vault.example.com:8200/ui/vault/auth/oidc/oidc/callback&quot; \\\n    user_claim=&quot;email&quot; \\\n    policies=&quot;azure-ad-policy&quot;\n\n# Enable GitHub authentication\nvault auth enable github\n\nvault write auth/github/config \\\n    organization=&quot;your-organization&quot; \\\n    base_url=&quot;https://github.com/&quot; \\\n    max_ttl=&quot;8h&quot; \\\n    ttl=&quot;1h&quot;\n\nvault write auth/github/map/teams/vault-admins value=admin-policy\nvault write auth/github/map/teams/developers value=developer-policy\n\n# AWS IAM authentication\nvault auth enable aws\n\nvault write auth/aws/config/client \\\n    secret_key=&quot;your-secret-key&quot; \\\n    access_key=&quot;your-access-key&quot;\n\nvault write auth/aws/role/ec2-role \\\n    auth_type=&quot;ec2&quot; \\\n    policies=&quot;ec2-policy&quot; \\\n    max_ttl=&quot;1h&quot; \\\n    bound_instances=&quot;i-1234567890abcdef0,i-0987654321fedcba0&quot;\n\n# Kubernetes authentication\nvault auth enable kubernetes\n\nvault write auth/kubernetes/config \\\n    token_reviewer_jwt=&quot;$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)&quot; \\\n    kubernetes_host=&quot;https://kubernetes.example.com:6443&quot; \\\n    kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n\nvault write auth/kubernetes/role/myapp \\\n    bound_service_account_names=&quot;vault-auth&quot; \\\n    bound_service_account_namespaces=&quot;default,production&quot; \\\n    policies=&quot;myapp-policy&quot; \\\n    ttl=&quot;1h&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-policy-management\" class=\"mobile-header\">Advanced Policy Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive policies with fine-grained access control\ncat &gt; admin-policy.hcl &lt;&lt;EOF\n# Admin policy with full access and audit capabilities\npath &quot;*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;, &quot;sudo&quot;]\n}\n\n# Audit log access for compliance\npath &quot;sys/audit/*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;, &quot;sudo&quot;]\n}\n\n# Manage authentication methods\npath &quot;sys/auth/*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;, &quot;sudo&quot;]\n}\n\n# Mount/unmount secrets engines\npath &quot;sys/mounts/*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;, &quot;sudo&quot;]\n}\n\n# Configure and manage the audit devices\npath &quot;sys/audit&quot; {\n  capabilities = [&quot;read&quot;, &quot;list&quot;]\n}\nEOF\n\ncat &gt; developer-policy.hcl &lt;&lt;EOF\n# Developer policy with limited access to application secrets\npath &quot;secret/data/applications/{{identity.entity.aliases.auth_github_*.name}}/*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;]\n}\n\npath &quot;secret/metadata/applications/{{identity.entity.aliases.auth_github_*.name}}/*&quot; {\n  capabilities = [&quot;list&quot;]\n}\n\n# Read-only access to shared secrets\npath &quot;secret/data/shared/*&quot; {\n  capabilities = [&quot;read&quot;, &quot;list&quot;]\n}\n\n# Database credentials with time-bound access\npath &quot;database/creds/readonly&quot; {\n  capabilities = [&quot;read&quot;]\n}\n\n# PKI certificate generation for specific domains\npath &quot;pki/issue/developer-role&quot; {\n  capabilities = [&quot;create&quot;, &quot;update&quot;]\n}\n\n# Self-service capabilities\npath &quot;auth/token/lookup-self&quot; {\n  capabilities = [&quot;read&quot;]\n}\n\npath &quot;auth/token/renew-self&quot; {\n  capabilities = [&quot;update&quot;]\n}\n\npath &quot;auth/token/revoke-self&quot; {\n  capabilities = [&quot;update&quot;]\n}\nEOF\n\ncat &gt; cicd-policy.hcl &lt;&lt;EOF\n# CI/CD policy for automated systems\npath &quot;secret/data/cicd/*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;]\n}\n\n# Database credentials for deployments\npath &quot;database/creds/application-user&quot; {\n  capabilities = [&quot;read&quot;]\n}\n\n# PKI for service certificates\npath &quot;pki/issue/service-role&quot; {\n  capabilities = [&quot;create&quot;, &quot;update&quot;]\n}\n\n# Kubernetes service account tokens\npath &quot;kubernetes/creds/application-role&quot; {\n  capabilities = [&quot;read&quot;]\n}\n\n# AWS credentials for deployment\npath &quot;aws/creds/deployment-role&quot; {\n  capabilities = [&quot;read&quot;]\n}\nEOF\n\n# Apply policies\nvault policy write admin admin-policy.hcl\nvault policy write developer developer-policy.hcl\nvault policy write cicd cicd-policy.hcl\n\n# Create entity for identity management\nvault write identity/entity \\\n    name=&quot;john.doe&quot; \\\n    policies=&quot;developer&quot; \\\n    metadata=department=&quot;engineering&quot; \\\n    metadata=team=&quot;platform&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-secrets-engines\" class=\"mobile-header\">Advanced Secrets Engines</h2>\n<h3 id=\"database-secrets-engine\" class=\"mobile-header\">Database Secrets Engine</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable database secrets engine\nvault secrets enable database\n\n# Configure MySQL connection\nvault write database/config/mysql-prod \\\n    plugin_name=mysql-database-plugin \\\n    connection_url=&quot;{{username}}:{{password}}@tcp(mysql.example.com:3306)/&quot; \\\n    allowed_roles=&quot;mysql-admin,mysql-readonly,mysql-application&quot; \\\n    username=&quot;vault&quot; \\\n    password=&quot;vault-service-password&quot; \\\n    max_open_connections=5 \\\n    max_idle_connections=0 \\\n    max_connection_lifetime=&quot;10m&quot;\n\n# Create roles for different access levels\nvault write database/roles/mysql-admin \\\n    db_name=mysql-prod \\\n    creation_statements=&quot;CREATE USER &#039;{{name}}&#039;@&#039;%&#039; IDENTIFIED BY &#039;{{password}}&#039;; GRANT ALL ON *.* TO &#039;{{name}}&#039;@&#039;%&#039;;&quot; \\\n    default_ttl=&quot;1h&quot; \\\n    max_ttl=&quot;24h&quot;\n\nvault write database/roles/mysql-readonly \\\n    db_name=mysql-prod \\\n    creation_statements=&quot;CREATE USER &#039;{{name}}&#039;@&#039;%&#039; IDENTIFIED BY &#039;{{password}}&#039;; GRANT SELECT ON *.* TO &#039;{{name}}&#039;@&#039;%&#039;;&quot; \\\n    default_ttl=&quot;1h&quot; \\\n    max_ttl=&quot;8h&quot;\n\nvault write database/roles/mysql-application \\\n    db_name=mysql-prod \\\n    creation_statements=&quot;CREATE USER &#039;{{name}}&#039;@&#039;%&#039; IDENTIFIED BY &#039;{{password}}&#039;; GRANT SELECT, INSERT, UPDATE, DELETE ON app_db.* TO &#039;{{name}}&#039;@&#039;%&#039;;&quot; \\\n    default_ttl=&quot;30m&quot; \\\n    max_ttl=&quot;2h&quot;\n\n# PostgreSQL configuration\nvault write database/config/postgres-prod \\\n    plugin_name=postgresql-database-plugin \\\n    connection_url=&quot;postgresql://{{username}}:{{password}}@postgres.example.com:5432/postgres?sslmode=require&quot; \\\n    allowed_roles=&quot;postgres-admin,postgres-readonly&quot; \\\n    username=&quot;vault&quot; \\\n    password=&quot;vault-postgres-password&quot;\n\nvault write database/roles/postgres-admin \\\n    db_name=postgres-prod \\\n    creation_statements=&quot;CREATE ROLE \\&quot;{{name}}\\&quot; WITH LOGIN PASSWORD &#039;{{password}}&#039; VALID UNTIL &#039;{{expiration}}&#039;; GRANT ALL PRIVILEGES ON DATABASE app_db TO \\&quot;{{name}}\\&quot;;&quot; \\\n    default_ttl=&quot;1h&quot; \\\n    max_ttl=&quot;24h&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"pki-secrets-engine-enterprise-certificate-management\" class=\"mobile-header\">PKI Secrets Engine (Enterprise Certificate Management)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable PKI secrets engine for internal CA\nvault secrets enable -path=pki pki\n\n# Configure CA\nvault secrets tune -max-lease-ttl=87600h pki\n\n# Generate internal CA certificate\nvault write -field=certificate pki/root/generate/internal \\\n    common_name=&quot;Internal CA&quot; \\\n    issuer_name=&quot;internal-ca&quot; \\\n    ttl=87600h &gt; /opt/vault/tls/internal-ca.crt\n\n# Configure certificate URLs\nvault write pki/config/urls \\\n    issuing_certificates=&quot;https://vault.example.com:8200/v1/pki/ca&quot; \\\n    crl_distribution_points=&quot;https://vault.example.com:8200/v1/pki/crl&quot;\n\n# Create intermediate CA\nvault secrets enable -path=pki_int pki\n\nvault secrets tune -max-lease-ttl=43800h pki_int\n\n# Generate intermediate CSR\nvault write -format=json pki_int/intermediate/generate/internal \\\n    common_name=&quot;Internal Intermediate CA&quot; \\\n    issuer_name=&quot;internal-intermediate-ca&quot; \\\n    | jq -r &#039;.data.csr&#039; &gt; pki_intermediate.csr\n\n# Sign intermediate certificate\nvault write -format=json pki/root/sign-intermediate \\\n    issuer_ref=&quot;internal-ca&quot; \\\n    csr=@pki_intermediate.csr \\\n    format=pem_bundle ttl=&quot;43800h&quot; \\\n    | jq -r &#039;.data.certificate&#039; &gt; intermediate.cert.pem\n\n# Import signed certificate\nvault write pki_int/intermediate/set-signed certificate=@intermediate.cert.pem\n\n# Create role for service certificates\nvault write pki_int/roles/service-role \\\n    issuer_ref=&quot;internal-intermediate-ca&quot; \\\n    allowed_domains=&quot;example.com,internal.example.com&quot; \\\n    allow_subdomains=true \\\n    max_ttl=&quot;72h&quot; \\\n    generate_lease=true\n\n# Create role for client certificates\nvault write pki_int/roles/client-role \\\n    issuer_ref=&quot;internal-intermediate-ca&quot; \\\n    allowed_domains=&quot;client.example.com&quot; \\\n    allow_subdomains=false \\\n    client_flag=true \\\n    max_ttl=&quot;24h&quot;\n\n# Generate certificate\nvault write pki_int/issue/service-role common_name=&quot;api.example.com&quot; ttl=&quot;24h&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"cloud-provider-integration\" class=\"mobile-header\">Cloud Provider Integration</h3>\n<p class=\"mobile-paragraph\">#### AWS Secrets Engine</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable AWS secrets engine\nvault secrets enable aws\n\n# Configure AWS credentials\nvault write aws/config/root \\\n    access_key=&quot;vault-aws-access-key&quot; \\\n    secret_key=&quot;vault-aws-secret-key&quot; \\\n    region=&quot;us-west-2&quot;\n\n# Create AWS roles\nvault write aws/roles/ec2-admin \\\n    credential_type=&quot;iam_user&quot; \\\n    policy_document=&#039;-&#039; &lt;&lt;EOF\n{\n  &quot;Version&quot;: &quot;2012-10-17&quot;,\n  &quot;Statement&quot;: [\n    {\n      &quot;Effect&quot;: &quot;Allow&quot;,\n      &quot;Action&quot;: [\n        &quot;ec2:*&quot;,\n        &quot;vpc:*&quot;\n      ],\n      &quot;Resource&quot;: &quot;*&quot;\n    }\n  ]\n}\nEOF\n\nvault write aws/roles/s3-readonly \\\n    credential_type=&quot;iam_user&quot; \\\n    policy_arns=&quot;arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess&quot; \\\n    default_sts_ttl=&quot;1h&quot; \\\n    max_sts_ttl=&quot;12h&quot;\n\n# Generate temporary AWS credentials\nvault read aws/creds/ec2-admin</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">#### Azure Secrets Engine</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Azure secrets engine\nvault secrets enable azure\n\n# Configure Azure credentials\nvault write azure/config \\\n    subscription_id=&quot;your-subscription-id&quot; \\\n    tenant_id=&quot;your-tenant-id&quot; \\\n    client_id=&quot;vault-service-principal-id&quot; \\\n    client_secret=&quot;vault-service-principal-secret&quot;\n\n# Create Azure roles\nvault write azure/roles/contributor \\\n    azure_roles=&#039;-&#039; &lt;&lt;EOF\n[\n    {\n        &quot;role_name&quot;: &quot;Contributor&quot;,\n        &quot;scope&quot;:  &quot;/subscriptions/your-subscription-id&quot;\n    }\n]\nEOF\n\nvault write azure/roles/storage-admin \\\n    azure_roles=&#039;-&#039; &lt;&lt;EOF\n[\n    {\n        &quot;role_name&quot;: &quot;Storage Account Contributor&quot;,\n        &quot;scope&quot;:  &quot;/subscriptions/your-subscription-id/resourceGroups/production&quot;\n    }\n]\nEOF\n\n# Generate Azure credentials\nvault read azure/creds/contributor</code></pre>\n      </div>\n    </div>\n<h2 id=\"enterprise-features\" class=\"mobile-header\">Enterprise Features</h2>\n<h3 id=\"performance-replication\" class=\"mobile-header\">Performance Replication</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure performance replication (Enterprise)\n# On primary cluster\nvault write -f sys/replication/performance/primary/enable\n\n# Generate secondary token\nvault write sys/replication/performance/primary/secondary-token id=&quot;dr-secondary&quot;\n\n# On secondary cluster\nvault write sys/replication/performance/secondary/enable token=&quot;&lt;secondary-token&gt;&quot;\n\n# Monitor replication status\nvault read sys/replication/status\nvault read sys/replication/performance/status</code></pre>\n      </div>\n    </div>\n<h3 id=\"disaster-recovery-replication\" class=\"mobile-header\">Disaster Recovery Replication</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable DR replication on primary\nvault write -f sys/replication/dr/primary/enable\n\n# Generate DR token\nvault write sys/replication/dr/primary/secondary-token id=&quot;dr-cluster&quot;\n\n# On DR cluster\nvault write sys/replication/dr/secondary/enable token=&quot;&lt;dr-token&gt;&quot;\n\n# Promote DR secondary (in disaster scenario)\nvault write -f sys/replication/dr/secondary/promote\n\n# Demote and revert\nvault write -f sys/replication/dr/secondary/reindex\nvault write sys/replication/dr/secondary/update-primary dr_operation_token=&quot;&lt;operation-token&gt;&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"namespaces-enterprise\" class=\"mobile-header\">Namespaces (Enterprise)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create namespaces for multi-tenancy\nvault namespace create engineering\nvault namespace create finance\nvault namespace create operations\n\n# Work within specific namespace\nexport VAULT_NAMESPACE=engineering\n\n# Configure namespace-specific policies and auth methods\nvault policy write -namespace=engineering eng-admin - &lt;&lt;EOF\npath &quot;*&quot; {\n  capabilities = [&quot;create&quot;, &quot;read&quot;, &quot;update&quot;, &quot;delete&quot;, &quot;list&quot;]\n}\nEOF\n\n# Enable auth method in namespace\nvault auth enable -namespace=engineering userpass\n\nvault write -namespace=engineering auth/userpass/users/alice \\\n    password=&quot;secure-password&quot; \\\n    policies=&quot;eng-admin&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"transform-secrets-engine-enterprise\" class=\"mobile-header\">Transform Secrets Engine (Enterprise)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable transform secrets engine for data protection\nvault secrets enable transform\n\n# Create transformation for credit card numbers\nvault write transform/role/payments \\\n    transformations=credit-card-transformation\n\nvault write transform/transformation/credit-card-transformation \\\n    type=fpe \\\n    template=&quot;credit-card&quot; \\\n    tweak_source=supplied \\\n    allowed_roles=payments\n\nvault write transform/template/credit-card \\\n    type=regex \\\n    pattern=&#039;\\d{4}-\\d{4}-\\d{4}-(\\d{4})&#039; \\\n    alphabet=numerics\n\n# Encode sensitive data\nvault write transform/encode/payments \\\n    transformation=credit-card-transformation \\\n    value=&quot;1234-5678-9012-3456&quot; \\\n    tweak=&quot;user-123&quot;\n\n# Decode when needed\nvault write transform/decode/payments \\\n    transformation=credit-card-transformation \\\n    value=&quot;encoded-value&quot; \\\n    tweak=&quot;user-123&quot;</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-disaster-recovery\" class=\"mobile-header\">Backup and Disaster Recovery</h2>\n<h3 id=\"enterprise-backup-strategy\" class=\"mobile-header\">Enterprise Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create comprehensive backup script\nsudo tee /usr/local/bin/vault-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/vault&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{snapshots,configs,certificates}\n\n# Raft storage snapshot (Enterprise)\nvault operator raft snapshot save ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap\n\n# Backup configuration files\ntar -czf ${BACKUP_DIR}/configs/vault-config-${DATE}.tar.gz \\\n    /etc/vault.d/ \\\n    /etc/systemd/system/vault.service\n\n# Backup TLS certificates\ntar -czf ${BACKUP_DIR}/certificates/vault-tls-${DATE}.tar.gz \\\n    /opt/vault/tls/\n\n# Backup to cloud storage\n# AWS S3\naws s3 cp ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap s3://vault-backups/snapshots/\naws s3 cp ${BACKUP_DIR}/configs/vault-config-${DATE}.tar.gz s3://vault-backups/configs/\n\n# Azure Blob Storage\naz storage blob upload \\\n    --file ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap \\\n    --container-name vault-backups \\\n    --name snapshots/vault-snapshot-${DATE}.snap\n\n# Google Cloud Storage\ngsutil cp ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap gs://vault-backups/snapshots/\n\n# Verify snapshot integrity\nvault operator raft snapshot inspect ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap\n\n# Keep only last 30 backups locally\nfind ${BACKUP_DIR} -name &quot;vault-*&quot; -type f -mtime +30 -delete\n\n# Encrypt backup files\ngpg --symmetric --cipher-algo AES256 ${BACKUP_DIR}/snapshots/vault-snapshot-${DATE}.snap\n\necho &quot;Vault backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/vault-backup.sh\n\n# Schedule automated backups\necho &quot;0 2 * * * root /usr/local/bin/vault-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"disaster-recovery-testing\" class=\"mobile-header\">Disaster Recovery Testing</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create DR testing script\nsudo tee /usr/local/bin/vault-dr-test.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nTEST_DIR=&quot;/tmp/vault-dr-test&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${TEST_DIR}\n\n# Test snapshot restore capability\nvault operator raft snapshot save ${TEST_DIR}/test-snapshot-${DATE}.snap\n\n# Verify snapshot\nvault operator raft snapshot inspect ${TEST_DIR}/test-snapshot-${DATE}.snap\n\n# Test unsealing process\nvault operator key-status\n\n# Test authentication methods\nvault auth list\n\n# Test secrets engines\nvault secrets list\n\n# Test policy enforcement\nvault policy list\n\n# Generate test report\ncat &gt; ${TEST_DIR}/dr-test-report-${DATE}.txt &lt;&lt;EOL\nVault DR Test Report - ${DATE}\n================================\n\nSnapshot Creation: $([ -f ${TEST_DIR}/test-snapshot-${DATE}.snap ] &amp;&amp; echo &quot;PASS&quot; || echo &quot;FAIL&quot;)\nVault Status: $(vault status -format=json | jq -r .sealed)\nActive Auth Methods: $(vault auth list -format=json | jq -r &#039;keys | length&#039;)\nActive Secrets Engines: $(vault secrets list -format=json | jq -r &#039;keys | length&#039;)\nPolicies Count: $(vault policy list | wc -l)\n\nTest completed at: $(date)\nEOL\n\necho &quot;DR test completed. Report: ${TEST_DIR}/dr-test-report-${DATE}.txt&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/vault-dr-test.sh\n\n# Schedule monthly DR tests\necho &quot;0 2 1 * * root /usr/local/bin/vault-dr-test.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"application-integration-examples\" class=\"mobile-header\">Application Integration Examples</h2>\n<h3 id=\"kubernetes-integration-with-vault-agent\" class=\"mobile-header\">Kubernetes Integration with Vault Agent</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Deploy Vault Agent as sidecar for Kubernetes workloads\ncat &gt; vault-agent-k8s.yaml &lt;&lt;EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: vault-agent-config\ndata:\n  vault-agent.hcl: |\n    exit_after_auth = false\n    pid_file = &quot;/home/vault/pidfile&quot;\n\n    auto_auth {\n      method &quot;kubernetes&quot; {\n        mount_path = &quot;auth/kubernetes&quot;\n        config = {\n          role = &quot;myapp&quot;\n        }\n      }\n\n      sink &quot;file&quot; {\n        config = {\n          path = &quot;/home/vault/.vault-token&quot;\n        }\n      }\n    }\n\n    cache {\n      use_auto_auth_token = true\n    }\n\n    listener &quot;tcp&quot; {\n      address = &quot;127.0.0.1:8080&quot;\n      tls_disable = true\n    }\n\n    vault {\n      address = &quot;https://vault.example.com:8200&quot;\n    }\n\n    template {\n      source      = &quot;/vault/templates/database.conf.tpl&quot;\n      destination = &quot;/vault/secrets/database.conf&quot;\n      perms       = 0640\n      command     = &quot;pkill -SIGHUP myapp&quot;\n    }\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: myapp-with-vault\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: myapp\n  template:\n    metadata:\n      labels:\n        app: myapp\n    spec:\n      serviceAccountName: vault-auth\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1000\n        fsGroup: 1000\n      containers:\n      - name: vault-agent\n        image: vault:latest\n        command: [&quot;vault&quot;, &quot;agent&quot;, &quot;-config=/vault/config/vault-agent.hcl&quot;]\n        volumeMounts:\n        - name: vault-config\n          mountPath: /vault/config\n        - name: vault-secrets\n          mountPath: /vault/secrets\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n      - name: myapp\n        image: myapp:latest\n        volumeMounts:\n        - name: vault-secrets\n          mountPath: /app/config\n          readOnly: true\n        env:\n        - name: DB_CONFIG_FILE\n          value: &quot;/app/config/database.conf&quot;\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n      volumes:\n      - name: vault-config\n        configMap:\n          name: vault-agent-config\n      - name: vault-secrets\n        emptyDir:\n          medium: Memory\nEOF\n\nkubectl apply -f vault-agent-k8s.yaml</code></pre>\n      </div>\n    </div>\n<h3 id=\"cicd-pipeline-integration\" class=\"mobile-header\">CI/CD Pipeline Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># GitHub Actions integration\ncat &gt; .github/workflows/vault-secrets.yml &lt;&lt;EOF\nname: Deploy with Vault Secrets\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    permissions:\n      id-token: write\n      contents: read\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n    \n    - name: Configure Vault authentication\n      uses: hashicorp/vault-action@v2\n      with:\n        url: https://vault.example.com:8200\n        method: jwt\n        role: github-actions-role\n        secrets: |\n          secret/data/database username | DB_USER ;\n          secret/data/database password | DB_PASS ;\n          aws/creds/deployment-role access_key | AWS_ACCESS_KEY_ID ;\n          aws/creds/deployment-role secret_key | AWS_SECRET_ACCESS_KEY ;\n          pki_int/issue/service-role common_name=api.example.com ttl=1h | API_TLS_CERT\n    \n    - name: Deploy application\n      run: |\n        echo &quot;Deploying with secrets from Vault&quot;\n        echo &quot;Database user: \\${{ env.DB_USER }}&quot;\n        # Application deployment logic here\n      env:\n        DB_USER: \\${{ env.DB_USER }}\n        DB_PASS: \\${{ env.DB_PASS }}\n        AWS_ACCESS_KEY_ID: \\${{ env.AWS_ACCESS_KEY_ID }}\n        AWS_SECRET_ACCESS_KEY: \\${{ env.AWS_SECRET_ACCESS_KEY }}\nEOF\n\n# Configure GitHub Actions authentication in Vault\nvault auth enable jwt\n\nvault write auth/jwt/config \\\n    bound_issuer=&quot;https://token.actions.githubusercontent.com&quot; \\\n    oidc_discovery_url=&quot;https://token.actions.githubusercontent.com&quot;\n\nvault write auth/jwt/role/github-actions-role \\\n    bound_audiences=&quot;https://github.com/your-org&quot; \\\n    bound_subject=&quot;repo:your-org/your-repo:ref:refs/heads/main&quot; \\\n    user_claim=&quot;actor&quot; \\\n    role_type=&quot;jwt&quot; \\\n    policies=&quot;cicd-policy&quot; \\\n    ttl=&quot;10m&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"terraform-integration\" class=\"mobile-header\">Terraform Integration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Vault provider for Terraform\ncat &gt; terraform-vault.tf &lt;&lt;EOF\nterraform {\n  required_providers {\n    vault = {\n      source  = &quot;hashicorp/vault&quot;\n      version = &quot;~&gt; 3.0&quot;\n    }\n  }\n}\n\nprovider &quot;vault&quot; {\n  address = &quot;https://vault.example.com:8200&quot;\n  token   = var.vault_token\n}\n\n# Read secrets from Vault\ndata &quot;vault_generic_secret&quot; &quot;database&quot; {\n  path = &quot;secret/database&quot;\n}\n\ndata &quot;vault_aws_access_credentials&quot; &quot;deployment&quot; {\n  backend = &quot;aws&quot;\n  role    = &quot;deployment-role&quot;\n}\n\n# Use secrets in resources\nresource &quot;aws_db_instance&quot; &quot;main&quot; {\n  identifier_prefix = var.project_name\n  \n  username = data.vault_generic_secret.database.data[&quot;username&quot;]\n  password = data.vault_generic_secret.database.data[&quot;password&quot;]\n  \n  # Other configuration...\n}\n\n# Store Terraform-generated secrets back in Vault\nresource &quot;vault_generic_secret&quot; &quot;terraform_outputs&quot; {\n  path = &quot;secret/terraform/outputs&quot;\n\n  data_json = jsonencode({\n    rds_endpoint = aws_db_instance.main.endpoint\n    vpc_id       = aws_vpc.main.id\n    subnet_ids   = aws_subnet.main[*].id\n  })\n}\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-observability\" class=\"mobile-header\">Monitoring and Observability</h2>\n<h3 id=\"vault-metrics-and-monitoring\" class=\"mobile-header\">Vault Metrics and Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable Vault metrics collection\nvault write sys/metrics/config \\\n    enabled=true \\\n    enable_hostname_label=false \\\n    default_lease_duration=&quot;1h&quot; \\\n    max_lease_duration=&quot;24h&quot;\n\n# Prometheus monitoring configuration\ncat &gt; /etc/prometheus/vault-monitoring.yml &lt;&lt;EOF\nglobal:\n  scrape_interval: 15s\n\nscrape_configs:\n  - job_name: &#039;vault&#039;\n    scheme: https\n    tls_config:\n      ca_file: /opt/vault/tls/ca.crt\n      cert_file: /opt/prometheus/tls/client.crt\n      key_file: /opt/prometheus/tls/client.key\n    static_configs:\n      - targets: \n        - &#039;vault-1.example.com:8200&#039;\n        - &#039;vault-2.example.com:8200&#039;\n        - &#039;vault-3.example.com:8200&#039;\n    metrics_path: /v1/sys/metrics\n    params:\n      format: [&#039;prometheus&#039;]\n    bearer_token: &quot;prometheus-vault-token&quot;\n\n  # Monitor Vault process metrics\n  - job_name: &#039;vault-node-exporter&#039;\n    static_configs:\n      - targets:\n        - &#039;vault-1.example.com:9100&#039;\n        - &#039;vault-2.example.com:9100&#039;\n        - &#039;vault-3.example.com:9100&#039;\nEOF\n\n# Create Grafana dashboards for Vault monitoring\ncurl -X POST http://admin:admin@grafana.example.com/api/dashboards/db \\\n  -H &#039;Content-Type: application/json&#039; \\\n  -d @vault-dashboard.json</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-audit-analysis\" class=\"mobile-header\">Advanced Audit Analysis</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create audit log analysis script\nsudo tee /usr/local/bin/vault-audit-analysis.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nAUDIT_LOG=&quot;/opt/vault/logs/audit.log&quot;\nANALYSIS_DIR=&quot;/var/log/vault-analysis&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${ANALYSIS_DIR}\n\n# Failed authentication attempts\necho &quot;Failed Authentication Analysis - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/failed-auth-${DATE}.txt\njq -r &#039;select(.type==&quot;response&quot; and .error != null) | [.time, .request.remote_address, .error] | @tsv&#039; ${AUDIT_LOG} | tail -100 &gt;&gt; ${ANALYSIS_DIR}/failed-auth-${DATE}.txt\n\n# Most active users\necho &quot;Most Active Users - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/active-users-${DATE}.txt\njq -r &#039;select(.type==&quot;request&quot; and .auth != null) | .auth.display_name&#039; ${AUDIT_LOG} | sort | uniq -c | sort -nr | head -20 &gt;&gt; ${ANALYSIS_DIR}/active-users-${DATE}.txt\n\n# Secret access patterns\necho &quot;Secret Access Patterns - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/secret-access-${DATE}.txt\njq -r &#039;select(.type==&quot;request&quot; and .request.path | test(&quot;^secret/data/&quot;)) | [.time, .auth.display_name, .request.path] | @tsv&#039; ${AUDIT_LOG} | tail -100 &gt;&gt; ${ANALYSIS_DIR}/secret-access-${DATE}.txt\n\n# Policy violations\necho &quot;Policy Violations - ${DATE}&quot; &gt; ${ANALYSIS_DIR}/policy-violations-${DATE}.txt\njq -r &#039;select(.type==&quot;response&quot; and .error != null and (.error | test(&quot;permission denied&quot;))) | [.time, .auth.display_name, .request.path, .error] | @tsv&#039; ${AUDIT_LOG} | tail -50 &gt;&gt; ${ANALYSIS_DIR}/policy-violations-${DATE}.txt\n\n# Generate summary report\ncat &gt; ${ANALYSIS_DIR}/audit-summary-${DATE}.txt &lt;&lt;EOL\nVault Audit Summary - ${DATE}\n==============================\n\nTotal Requests: $(jq -s &#039;length&#039; ${AUDIT_LOG})\nFailed Authentications: $(jq -s &#039;map(select(.type==&quot;response&quot; and .error != null)) | length&#039; ${AUDIT_LOG})\nPolicy Violations: $(jq -s &#039;map(select(.type==&quot;response&quot; and .error != null and (.error | test(&quot;permission denied&quot;)))) | length&#039; ${AUDIT_LOG})\nUnique Users: $(jq -r &#039;select(.type==&quot;request&quot; and .auth != null) | .auth.display_name&#039; ${AUDIT_LOG} | sort -u | wc -l)\n\nTop 5 Accessed Paths:\n$(jq -r &#039;select(.type==&quot;request&quot;) | .request.path&#039; ${AUDIT_LOG} | sort | uniq -c | sort -nr | head -5)\n\nAnalysis completed at: $(date)\nEOL\n\necho &quot;Audit analysis completed. Reports in: ${ANALYSIS_DIR}/&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/vault-audit-analysis.sh\n\n# Schedule weekly audit analysis\necho &quot;0 6 * * 1 root /usr/local/bin/vault-audit-analysis.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"verification-and-testing\" class=\"mobile-header\">Verification and Testing</h2>\n<h3 id=\"comprehensive-health-checks\" class=\"mobile-header\">Comprehensive Health Checks</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Vault health monitoring script\nsudo tee /usr/local/bin/vault-health-check.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nVAULT_ADDR=&quot;https://vault.example.com:8200&quot;\nHEALTH_LOG=&quot;/var/log/vault-health.log&quot;\n\n# Function to log with timestamp\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check Vault service status\nif systemctl is-active vault &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ Vault service is running&quot;\nelse\n    log_message &quot;âœ— Vault service is not running&quot;\n    exit 1\nfi\n\n# Check Vault HTTP health\nif curl -k -sf ${VAULT_ADDR}/v1/sys/health &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ Vault HTTP endpoint is responding&quot;\nelse\n    log_message &quot;âœ— Vault HTTP endpoint is not responding&quot;\n    exit 1\nfi\n\n# Check if Vault is sealed\nSEALED_STATUS=$(vault status -format=json | jq -r .sealed)\nif [ &quot;$SEALED_STATUS&quot; = &quot;false&quot; ]; then\n    log_message &quot;âœ“ Vault is unsealed&quot;\nelse\n    log_message &quot;âœ— Vault is sealed&quot;\n    exit 1\nfi\n\n# Check cluster status (if HA)\nif vault status -format=json | jq -r .ha_enabled | grep -q &quot;true&quot;; then\n    CLUSTER_HEALTH=$(vault operator raft list-peers -format=json | jq &#039;.data.config.servers | length&#039;)\n    log_message &quot;âœ“ Cluster has ${CLUSTER_HEALTH} nodes&quot;\nfi\n\n# Check replication status (Enterprise)\nREPLICATION_STATUS=$(vault read -format=json sys/replication/status 2&gt;/dev/null)\nif [ $? -eq 0 ]; then\n    DR_MODE=$(echo $REPLICATION_STATUS | jq -r .data.dr.mode)\n    PERF_MODE=$(echo $REPLICATION_STATUS | jq -r .data.performance.mode)\n    log_message &quot;âœ“ Replication status - DR: ${DR_MODE}, Performance: ${PERF_MODE}&quot;\nfi\n\n# Check auth methods\nAUTH_METHODS=$(vault auth list -format=json | jq -r &#039;keys | length&#039;)\nlog_message &quot;âœ“ ${AUTH_METHODS} authentication methods enabled&quot;\n\n# Check secrets engines\nSECRETS_ENGINES=$(vault secrets list -format=json | jq -r &#039;keys | length&#039;)\nlog_message &quot;âœ“ ${SECRETS_ENGINES} secrets engines enabled&quot;\n\n# Check policy count\nPOLICIES=$(vault policy list | wc -l)\nlog_message &quot;âœ“ ${POLICIES} policies configured&quot;\n\n# Test secret read/write\nTEST_SECRET=&quot;secret/health-check/test-$(date +%s)&quot;\nif vault kv put ${TEST_SECRET} test=true &gt;/dev/null 2&gt;&amp;1; then\n    if vault kv get ${TEST_SECRET} &gt;/dev/null 2&gt;&amp;1; then\n        log_message &quot;âœ“ Secret read/write test passed&quot;\n        vault kv delete ${TEST_SECRET} &gt;/dev/null 2&gt;&amp;1\n    else\n        log_message &quot;âœ— Secret read test failed&quot;\n    fi\nelse\n    log_message &quot;âœ— Secret write test failed&quot;\nfi\n\n# Check audit devices\nAUDIT_DEVICES=$(vault audit list -format=json | jq -r &#039;keys | length&#039;)\nlog_message &quot;âœ“ ${AUDIT_DEVICES} audit devices enabled&quot;\n\nlog_message &quot;Vault health check completed successfully&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/vault-health-check.sh\n\n# Schedule health checks every 15 minutes\necho &quot;*/15 * * * * root /usr/local/bin/vault-health-check.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-validation-testing\" class=\"mobile-header\">Security Validation Testing</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create security testing script\nsudo tee /usr/local/bin/vault-security-test.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nVAULT_ADDR=&quot;https://vault.example.com:8200&quot;\nTEST_RESULTS=&quot;/tmp/vault-security-test-$(date +%Y%m%d_%H%M%S).txt&quot;\n\necho &quot;Vault Security Validation Test&quot; &gt; ${TEST_RESULTS}\necho &quot;==============================&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Date: $(date)&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;&quot; &gt;&gt; ${TEST_RESULTS}\n\n# Test 1: TLS Configuration\necho &quot;Testing TLS Configuration...&quot; &gt;&gt; ${TEST_RESULTS}\nTLS_VERSION=$(openssl s_client -connect vault.example.com:8200 -brief 2&gt;/dev/null | grep &quot;Protocol version&quot;)\necho &quot;TLS Version: ${TLS_VERSION}&quot; &gt;&gt; ${TEST_RESULTS}\n\n# Test 2: Authentication requirements\necho &quot;Testing authentication requirements...&quot; &gt;&gt; ${TEST_RESULTS}\nUNAUTH_ACCESS=$(curl -k -s -w &quot;%{http_code}&quot; -o /dev/null ${VAULT_ADDR}/v1/secret/test)\nif [ &quot;$UNAUTH_ACCESS&quot; = &quot;403&quot; ]; then\n    echo &quot;âœ“ Unauthenticated access properly denied&quot; &gt;&gt; ${TEST_RESULTS}\nelse\n    echo &quot;âœ— Unauthenticated access not properly restricted&quot; &gt;&gt; ${TEST_RESULTS}\nfi\n\n# Test 3: Seal status\necho &quot;Testing seal status...&quot; &gt;&gt; ${TEST_RESULTS}\nSEALED=$(vault status -format=json | jq -r .sealed)\nif [ &quot;$SEALED&quot; = &quot;false&quot; ]; then\n    echo &quot;âœ“ Vault is properly unsealed&quot; &gt;&gt; ${TEST_RESULTS}\nelse\n    echo &quot;âœ— Vault is sealed&quot; &gt;&gt; ${TEST_RESULTS}\nfi\n\n# Test 4: Audit logging\necho &quot;Testing audit logging...&quot; &gt;&gt; ${TEST_RESULTS}\nAUDIT_COUNT=$(vault audit list -format=json | jq -r &#039;keys | length&#039;)\nif [ &quot;$AUDIT_COUNT&quot; -gt &quot;0&quot; ]; then\n    echo &quot;âœ“ ${AUDIT_COUNT} audit devices enabled&quot; &gt;&gt; ${TEST_RESULTS}\nelse\n    echo &quot;âœ— No audit devices enabled&quot; &gt;&gt; ${TEST_RESULTS}\nfi\n\n# Test 5: Policy enforcement\necho &quot;Testing policy enforcement...&quot; &gt;&gt; ${TEST_RESULTS}\nvault token create -policy=developer -ttl=1m -format=json &gt; /tmp/test-token.json\nTEST_TOKEN=$(jq -r .auth.client_token /tmp/test-token.json)\n\n# Test with limited token\nVAULT_TOKEN=${TEST_TOKEN} vault auth -method=token ${TEST_TOKEN} &gt;/dev/null 2&gt;&amp;1\nLIMITED_ACCESS=$(VAULT_TOKEN=${TEST_TOKEN} curl -k -s -w &quot;%{http_code}&quot; -o /dev/null -H &quot;X-Vault-Token: ${TEST_TOKEN}&quot; ${VAULT_ADDR}/v1/sys/auth)\nif [ &quot;$LIMITED_ACCESS&quot; = &quot;403&quot; ]; then\n    echo &quot;âœ“ Policy enforcement working correctly&quot; &gt;&gt; ${TEST_RESULTS}\nelse\n    echo &quot;âœ— Policy enforcement may be misconfigured&quot; &gt;&gt; ${TEST_RESULTS}\nfi\n\n# Revoke test token\nvault token revoke ${TEST_TOKEN}\nrm /tmp/test-token.json\n\necho &quot;&quot; &gt;&gt; ${TEST_RESULTS}\necho &quot;Security test completed at: $(date)&quot; &gt;&gt; ${TEST_RESULTS}\n\necho &quot;Security test completed. Results: ${TEST_RESULTS}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/vault-security-test.sh\n\n# Run security tests weekly\necho &quot;0 8 * * 1 root /usr/local/bin/vault-security-test.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting-cross-platform\" class=\"mobile-header\">Troubleshooting (Cross-Platform)</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check Vault status and logs\nvault status\nsudo journalctl -u vault -f\n\n# Debug unsealing issues\nvault operator key-status\nvault status -format=json | jq .recovery_seal\n\n# Memory lock issues\ncat /proc/$(pgrep vault)/status | grep VmLck\nulimit -l\n\n# Permission issues\nsudo chown -R vault:vault /opt/vault\nsudo chmod 640 /etc/vault.d/vault.hcl\nls -laZ /opt/vault  # SELinux context\n\n# Network connectivity tests\ncurl -k https://vault.example.com:8200/v1/sys/health\nopenssl s_client -connect vault.example.com:8200\n\n# Storage backend issues\n# For Raft storage\nvault operator raft list-peers\nvault operator raft autopilot status\n\n# For Consul storage\nconsul members\nconsul kv get -recurse vault/\n\n# Certificate issues\nopenssl x509 -in /opt/vault/tls/vault.crt -text -noout\nvault auth -method=cert \\\n    -ca-cert=/opt/vault/tls/ca.crt \\\n    -client-cert=/opt/vault/tls/client.crt \\\n    -client-key=/opt/vault/tls/client.key\n\n# Performance troubleshooting\nvault read sys/metrics\nvault read sys/host-info\nvault read sys/pprof/profile  # Enterprise\n\n# Audit log analysis\ntail -f /opt/vault/logs/audit.log | jq .\ngrep &quot;error&quot; /opt/vault/logs/audit.log | jq .\n\n# Token debugging\nvault token lookup\nvault token capabilities secret/data/test\n\n# Seal/unseal debugging\nvault operator unseal -migrate  # For seal migration\nvault operator rekey  # For changing unseal keys\n\n# Cluster debugging\nvault operator raft snapshot save debug-snapshot.snap\nvault operator raft snapshot inspect debug-snapshot.snap</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\nsudo systemctl edit vault.service\n# Add:\n[Service]\nExecStart=\nExecStart=/usr/local/bin/vault server -config=/etc/vault.d/vault.hcl -log-level=debug\n\nsudo systemctl daemon-reload\nsudo systemctl restart vault\n\n# Monitor real-time operations\ntail -f /opt/vault/logs/vault.log | grep -E &quot;(ERROR|WARN|DEBUG)&quot;\n\n# Database connection debugging\nvault read database/config/mysql-prod\n\n# PKI debugging\nvault read pki/cert/ca\nvault read pki/crl\n\n# Replication debugging (Enterprise)\nvault read sys/replication/performance/status\nvault read sys/replication/dr/status\n\n# HSM debugging (Enterprise)\nvault read sys/seal-status\nvault read sys/hsm/status\n\n# Memory and performance analysis\npmap -x $(pgrep vault)\nstrace -p $(pgrep vault) -e trace=file\n\n# Network debugging\nss -tulpn | grep vault\nnetstat -tulpn | grep vault</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.vaultproject.io/docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.vaultproject.io/api-docs\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">API Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://learn.hashicorp.com/tutorials/vault/production-hardening\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Production Hardening Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.hashicorp.com/products/vault/enterprise\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Enterprise Features</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://learn.hashicorp.com/tutorials/vault/security-intro\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Security Best Practices</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://discuss.hashicorp.com/c/vault\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Community Forum</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"27 min","wordCount":5390,"lastBuilt":"2025-09-16T02:43:55.186Z"},{"name":"wireguard","displayName":"Wireguard","slug":"wireguard","description":"Repo for wireguard","category":"security","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/wireguard","updatedAt":"2025-09-14T01:31:22Z","createdAt":"2025-09-08T03:18:17Z","readmeRaw":"# WireGuard Installation Guide\n\nModern, fast, and secure VPN solution using state-of-the-art cryptography. Essential tool for secure remote access, site-to-site connectivity, and privacy protection with minimal configuration complexity.\n\n## Prerequisites\n\n- Linux system with kernel 3.10+ (any modern distribution)\n- Root or sudo access\n- Static IP address or dynamic DNS\n- UDP port 51820 available (default, configurable)\n- Basic understanding of networking concepts\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install WireGuard\nsudo apt install -y wireguard wireguard-tools\n\n# For older Ubuntu versions (18.04)\nsudo add-apt-repository ppa:wireguard/wireguard\nsudo apt update\nsudo apt install -y wireguard\n\n# Install additional tools\nsudo apt install -y qrencode resolvconf\n\n# Verify installation\nwg --version\nmodprobe wireguard && echo \"WireGuard module loaded successfully\"\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Install EPEL repository\nsudo yum install -y epel-release\n\n# Install WireGuard\nsudo yum install -y wireguard-tools\n\n# For CentOS 7 (requires additional steps)\nsudo yum install -y yum-plugin-elrepo\nsudo yum install -y kmod-wireguard wireguard-tools\n\n# Install additional tools\nsudo yum install -y qrencode\n\n# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv6.conf.all.forwarding = 1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n### Fedora\n```bash\n# Install WireGuard (included in kernel 5.6+)\nsudo dnf install -y wireguard-tools qrencode\n\n# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n### Arch Linux\n```bash\n# Install WireGuard\nsudo pacman -Syu wireguard-tools qrencode\n\n# Load WireGuard module\nsudo modprobe wireguard\n\n# Enable IP forwarding\necho 'net.ipv4.ip_forward = 1' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Server Configuration\n\n### Generate Keys and Create Server Config\n```bash\n# Create WireGuard directory\nsudo mkdir -p /etc/wireguard\nsudo chmod 700 /etc/wireguard\n\n# Generate server keys\ncd /etc/wireguard\nwg genkey | sudo tee server_private.key | wg pubkey | sudo tee server_public.key\nsudo chmod 600 server_private.key\n\n# Create server configuration\nsudo tee /etc/wireguard/wg0.conf > /dev/null <<EOF\n[Interface]\n# Server configuration\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24, fd00::1/64\nListenPort = 51820\nSaveConfig = true\n\n# Network configuration\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# DNS servers (optional)\nDNS = 1.1.1.1, 8.8.8.8\n\n# Client configurations will be added here automatically\n# [Peer] sections for each client\nEOF\n\nsudo chmod 600 /etc/wireguard/wg0.conf\n```\n\n### Advanced Server Configuration\n```bash\n# Create production server configuration with security\nsudo tee /etc/wireguard/wg0.conf > /dev/null <<EOF\n[Interface]\n# Server identity\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24\nListenPort = 51820\nSaveConfig = false  # Disable for security in production\n\n# Network forwarding and NAT\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostUp = ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nPostDown = ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# Security: Block private networks (adjust as needed)\nPostUp = iptables -I FORWARD -s 10.0.0.0/8 -d 192.168.1.0/24 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/8 -d 172.16.0.0/12 -j DROP\n\n# DNS configuration\nDNS = 10.0.0.1  # Use Pi-hole or local DNS\n\n# Example client configurations\n[Peer]\n# Client 1 - Admin laptop\nPublicKey = client1_public_key_here\nAllowedIPs = 10.0.0.2/32\nPersistentKeepalive = 25\n\n[Peer]  \n# Client 2 - Mobile device\nPublicKey = client2_public_key_here\nAllowedIPs = 10.0.0.3/32\nPersistentKeepalive = 25\n\n[Peer]\n# Client 3 - Site-to-site (branch office)\nPublicKey = site_public_key_here\nAllowedIPs = 10.0.0.0/24, 192.168.100.0/24\nEndpoint = branch.example.com:51820\nPersistentKeepalive = 25\nEOF\n```\n\n## Client Configuration\n\n### Generate Client Configurations\n```bash\n# Create client configuration generator script\nsudo tee /usr/local/bin/wg-add-client.sh > /dev/null <<'EOF'\n#!/bin/bash\nCLIENT_NAME=\"${1}\"\nSERVER_PUBLIC_IP=\"${2:-your-server-public-ip}\"\nSERVER_PUBLIC_KEY=\"$(sudo cat /etc/wireguard/server_public.key)\"\n\nif [ -z \"$CLIENT_NAME\" ]; then\n    echo \"Usage: $0 <client_name> [server_public_ip]\"\n    echo \"Example: $0 laptop1 203.0.113.1\"\n    exit 1\nfi\n\n# Get next available IP\nLAST_IP=$(grep \"AllowedIPs\" /etc/wireguard/wg0.conf | grep -o \"10\\.0\\.0\\.[0-9]*\" | sort -t. -k4 -n | tail -1 | cut -d. -f4)\nNEXT_IP=$((LAST_IP + 1))\nCLIENT_IP=\"10.0.0.${NEXT_IP}/32\"\n\n# Generate client keys\nCLIENT_PRIVATE_KEY=$(wg genkey)\nCLIENT_PUBLIC_KEY=$(echo $CLIENT_PRIVATE_KEY | wg pubkey)\n\n# Add peer to server configuration\nsudo tee -a /etc/wireguard/wg0.conf > /dev/null <<PEER\n\n[Peer]\n# ${CLIENT_NAME}\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_IP}\nPersistentKeepalive = 25\nPEER\n\n# Generate client configuration\ncat > /tmp/${CLIENT_NAME}.conf <<CLIENT_CONFIG\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_IP}\nDNS = 10.0.0.1, 1.1.1.1\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nEndpoint = ${SERVER_PUBLIC_IP}:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nCLIENT_CONFIG\n\n# Generate QR code for mobile devices\nqrencode -t ansiutf8 < /tmp/${CLIENT_NAME}.conf\n\necho \"Client configuration created: /tmp/${CLIENT_NAME}.conf\"\necho \"Add to server with: sudo wg addconf wg0 <(echo '[Peer]'; echo 'PublicKey = ${CLIENT_PUBLIC_KEY}'; echo 'AllowedIPs = ${CLIENT_IP}')\"\nEOF\n\nsudo chmod +x /usr/local/bin/wg-add-client.sh\n\n# Example: Add a client\n# sudo /usr/local/bin/wg-add-client.sh laptop1 your-server-ip\n```\n\n### Client Examples\n```bash\n# Mobile device configuration\ncat > mobile-client.conf <<EOF\n[Interface]\nPrivateKey = mobile_device_private_key\nAddress = 10.0.0.10/32\nDNS = 10.0.0.1\n\n[Peer]\nPublicKey = server_public_key_here\nEndpoint = vpn.example.com:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nEOF\n\n# Site-to-site configuration (branch office)\ncat > branch-office.conf <<EOF\n[Interface]\nPrivateKey = branch_office_private_key\nAddress = 10.0.0.100/32\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n[Peer]\nPublicKey = server_public_key_here\nEndpoint = vpn.example.com:51820\nAllowedIPs = 10.0.0.0/24, 192.168.1.0/24\nPersistentKeepalive = 25\nEOF\n```\n\n## Service Management and Security\n\n### SystemD Service\n```bash\n# Enable WireGuard interface as systemd service\nsudo systemctl enable wg-quick@wg0\nsudo systemctl start wg-quick@wg0\n\n# Check status\nsudo systemctl status wg-quick@wg0\nsudo wg show\n\n# Alternative: Manual management\nsudo wg-quick up wg0\nsudo wg-quick down wg0\n```\n\n### Firewall Configuration\n```bash\n# Configure UFW for WireGuard\nsudo ufw allow 51820/udp comment 'WireGuard VPN'\nsudo ufw allow from 10.0.0.0/24 comment 'WireGuard clients'\n\n# For internal network access\nsudo ufw allow from 10.0.0.0/24 to 192.168.1.0/24\n\n# Firewalld configuration (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=51820/udp\nsudo firewall-cmd --permanent --add-rich-rule='rule family=ipv4 source address=10.0.0.0/24 accept'\nsudo firewall-cmd --reload\n\n# Direct iptables rules\nsudo iptables -A INPUT -p udp --dport 51820 -j ACCEPT\nsudo iptables -A FORWARD -i wg0 -j ACCEPT\nsudo iptables -A FORWARD -o wg0 -j ACCEPT\nsudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n```\n\n### Security Hardening\n```bash\n# Configure advanced security features\nsudo tee /etc/wireguard/wg0.conf > /dev/null <<EOF\n[Interface]\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24\nListenPort = 51820\n\n# Security: Change default port\n# ListenPort = 41194\n\n# DNS security\nDNS = 10.0.0.1  # Use Pi-hole for ad blocking\n\n# Advanced security rules\nPostUp = iptables -A FORWARD -i %i -j ACCEPT\nPostUp = iptables -A FORWARD -o %i -j ACCEPT\nPostUp = iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\n# Block access to local network (security measure)\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.0/24 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 172.16.0.0/12 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 10.0.0.0/8 -j DROP\n\n# Allow specific services only\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.100 -p tcp --dport 22 -j ACCEPT    # SSH to server\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.101 -p tcp --dport 443 -j ACCEPT  # HTTPS to web services\n\nPostDown = iptables -D FORWARD -i %i -j ACCEPT\nPostDown = iptables -D FORWARD -o %i -j ACCEPT\nPostDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nEOF\n```\n\n## Management and Automation\n\n### WireGuard Management Script\n```bash\nsudo tee /usr/local/bin/wg-manager.sh > /dev/null <<'EOF'\n#!/bin/bash\n\nINTERFACE=\"wg0\"\nCONFIG_FILE=\"/etc/wireguard/${INTERFACE}.conf\"\nCLIENTS_DIR=\"/etc/wireguard/clients\"\nSERVER_PUBLIC_IP=\"${SERVER_PUBLIC_IP:-$(curl -s ipinfo.io/ip)}\"\nSERVER_PUBLIC_KEY=\"$(sudo cat /etc/wireguard/server_public.key)\"\n\nsudo mkdir -p ${CLIENTS_DIR}\n\ncase \"${1}\" in\n    \"add-client\")\n        CLIENT_NAME=\"${2}\"\n        if [ -z \"$CLIENT_NAME\" ]; then\n            echo \"Usage: $0 add-client <client_name>\"\n            exit 1\n        fi\n        \n        # Generate client keys\n        CLIENT_PRIVATE_KEY=$(wg genkey)\n        CLIENT_PUBLIC_KEY=$(echo $CLIENT_PRIVATE_KEY | wg pubkey)\n        \n        # Get next available IP\n        LAST_IP=$(grep \"AllowedIPs\" ${CONFIG_FILE} | grep -o \"10\\.0\\.0\\.[0-9]*\" | sort -t. -k4 -n | tail -1 | cut -d. -f4)\n        NEXT_IP=$((LAST_IP + 1))\n        CLIENT_IP=\"10.0.0.${NEXT_IP}\"\n        \n        # Add peer to server\n        sudo wg set ${INTERFACE} peer ${CLIENT_PUBLIC_KEY} allowed-ips ${CLIENT_IP}/32\n        \n        # Save to config\n        sudo tee -a ${CONFIG_FILE} > /dev/null <<PEER\n\n[Peer]\n# ${CLIENT_NAME} - $(date)\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_IP}/32\nPersistentKeepalive = 25\nPEER\n        \n        # Generate client config\n        cat > ${CLIENTS_DIR}/${CLIENT_NAME}.conf <<CLIENT_CONFIG\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_IP}/32\nDNS = 10.0.0.1\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nEndpoint = ${SERVER_PUBLIC_IP}:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nCLIENT_CONFIG\n        \n        # Generate QR code\n        echo \"Client ${CLIENT_NAME} configuration:\"\n        qrencode -t ansiutf8 < ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n        echo \"Configuration file: ${CLIENTS_DIR}/${CLIENT_NAME}.conf\"\n        ;;\n        \n    \"remove-client\")\n        CLIENT_NAME=\"${2}\"\n        if [ -z \"$CLIENT_NAME\" ]; then\n            echo \"Usage: $0 remove-client <client_name>\"\n            exit 1\n        fi\n        \n        CLIENT_PUBLIC_KEY=$(grep -A 3 \"# ${CLIENT_NAME}\" ${CONFIG_FILE} | grep \"PublicKey\" | cut -d' ' -f3)\n        if [ -n \"$CLIENT_PUBLIC_KEY\" ]; then\n            sudo wg set ${INTERFACE} peer ${CLIENT_PUBLIC_KEY} remove\n            sudo sed -i \"/# ${CLIENT_NAME}/,+3d\" ${CONFIG_FILE}\n            rm -f ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n            echo \"Client ${CLIENT_NAME} removed\"\n        else\n            echo \"Client ${CLIENT_NAME} not found\"\n        fi\n        ;;\n        \n    \"list-clients\")\n        echo \"Connected clients:\"\n        sudo wg show ${INTERFACE}\n        echo \"\"\n        echo \"Configured clients:\"\n        grep \"^# \" ${CONFIG_FILE} | sed 's/# /- /'\n        ;;\n        \n    \"show-client\")\n        CLIENT_NAME=\"${2}\"\n        if [ -z \"$CLIENT_NAME\" ]; then\n            echo \"Usage: $0 show-client <client_name>\"\n            exit 1\n        fi\n        \n        if [ -f \"${CLIENTS_DIR}/${CLIENT_NAME}.conf\" ]; then\n            echo \"Configuration for ${CLIENT_NAME}:\"\n            cat ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n            echo \"\"\n            echo \"QR Code:\"\n            qrencode -t ansiutf8 < ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n        else\n            echo \"Client ${CLIENT_NAME} not found\"\n        fi\n        ;;\n        \n    \"status\")\n        echo \"WireGuard Status:\"\n        sudo systemctl status wg-quick@${INTERFACE}\n        echo \"\"\n        echo \"Interface Details:\"\n        sudo wg show ${INTERFACE}\n        echo \"\"\n        echo \"Interface Statistics:\"\n        sudo wg show ${INTERFACE} transfer\n        ;;\n        \n    \"restart\")\n        echo \"Restarting WireGuard...\"\n        sudo systemctl restart wg-quick@${INTERFACE}\n        echo \"WireGuard restarted\"\n        ;;\n        \n    *)\n        echo \"WireGuard Management Script\"\n        echo \"Usage: $0 {add-client|remove-client|list-clients|show-client|status|restart}\"\n        echo \"\"\n        echo \"Examples:\"\n        echo \"  $0 add-client laptop1\"\n        echo \"  $0 remove-client laptop1\"  \n        echo \"  $0 show-client laptop1\"\n        echo \"  $0 list-clients\"\n        echo \"  $0 status\"\n        echo \"  $0 restart\"\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/wg-manager.sh\n```\n\n### Web UI (WireGuard Easy)\n```bash\n# Install WireGuard Easy (web management interface)\nmkdir -p ~/wg-easy\ncd ~/wg-easy\n\ncat > docker-compose.yml <<EOF\nversion: '3.8'\n\nservices:\n  wg-easy:\n    image: weejewel/wg-easy:latest\n    container_name: wg-easy\n    restart: unless-stopped\n    ports:\n      - \"51821:51821/udp\"  # WireGuard port\n      - \"127.0.0.1:51822:51822/tcp\"  # Web UI port\n    environment:\n      - WG_HOST=vpn.example.com\n      - PASSWORD=WebUISecurePassword2024!\n      - WG_PORT=51821\n      - WG_DEFAULT_ADDRESS=10.8.0.x\n      - WG_DEFAULT_DNS=1.1.1.1,8.8.8.8\n      - WG_MTU=1420\n      - WG_ALLOWED_IPS=0.0.0.0/0,::/0\n      - WG_PERSISTENT_KEEPALIVE=25\n    volumes:\n      - ./data:/etc/wireguard\n    cap_add:\n      - NET_ADMIN\n      - SYS_MODULE\n    sysctls:\n      - net.ipv4.ip_forward=1\n      - net.ipv4.conf.all.src_valid_mark=1\n    networks:\n      - wg-easy\n\nnetworks:\n  wg-easy:\n    driver: bridge\nEOF\n\n# Start WG-Easy\ndocker-compose up -d\n\n# Access web interface at http://localhost:51822\n```\n\n## Monitoring and Maintenance\n\n### Health Monitoring\n```bash\nsudo tee /usr/local/bin/wireguard-health.sh > /dev/null <<'EOF'\n#!/bin/bash\nHEALTH_LOG=\"/var/log/wireguard-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${HEALTH_LOG}\n}\n\n# Check WireGuard service\nif systemctl is-active wg-quick@wg0 >/dev/null 2>&1; then\n    log_message \"âœ“ WireGuard service is running\"\nelse\n    log_message \"âœ— WireGuard service is not running\"\n    exit 1\nfi\n\n# Check interface status\nif ip link show wg0 >/dev/null 2>&1; then\n    log_message \"âœ“ WireGuard interface is up\"\nelse\n    log_message \"âœ— WireGuard interface is down\"\nfi\n\n# Check connected peers\nCONNECTED_PEERS=$(sudo wg show wg0 peers | wc -l)\nACTIVE_PEERS=$(sudo wg show wg0 latest-handshakes | awk '$2 > 0' | wc -l)\nlog_message \"â„¹ Connected peers: ${ACTIVE_PEERS}/${CONNECTED_PEERS}\"\n\n# Check traffic statistics\nTRAFFIC_STATS=$(sudo wg show wg0 transfer)\nlog_message \"â„¹ Traffic statistics available: $(echo \"$TRAFFIC_STATS\" | wc -l) peers\"\n\n# Check listening port\nif ss -ulpn | grep -q \":51820\"; then\n    log_message \"âœ“ WireGuard is listening on port 51820\"\nelse\n    log_message \"âš  WireGuard not listening on expected port\"\nfi\n\n# Check IP forwarding\nIP_FORWARD=$(cat /proc/sys/net/ipv4/ip_forward)\nif [ \"$IP_FORWARD\" = \"1\" ]; then\n    log_message \"âœ“ IP forwarding is enabled\"\nelse\n    log_message \"âœ— IP forwarding is disabled\"\nfi\n\nlog_message \"WireGuard health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/wireguard-health.sh\n\n# Schedule health checks every 10 minutes\necho \"*/10 * * * * root /usr/local/bin/wireguard-health.sh\" | sudo tee -a /etc/crontab\n```\n\n### Backup and Configuration Management\n```bash\nsudo tee /usr/local/bin/wireguard-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/wireguard\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{configs,clients}\n\necho \"Starting WireGuard backup...\"\n\n# Backup server configuration\ncp /etc/wireguard/wg0.conf ${BACKUP_DIR}/configs/wg0-${DATE}.conf\n\n# Backup client configurations\nif [ -d \"/etc/wireguard/clients\" ]; then\n    tar -czf ${BACKUP_DIR}/clients/clients-${DATE}.tar.gz -C /etc/wireguard clients/\nfi\n\n# Backup keys\ntar -czf ${BACKUP_DIR}/configs/keys-${DATE}.tar.gz -C /etc/wireguard *.key\n\n# Upload to cloud storage (encrypted)\ngpg --symmetric --cipher-algo AES256 --compress-algo 1 --s2k-mode 3 \\\n    --s2k-digest-algo SHA512 --s2k-count 65536 \\\n    --output ${BACKUP_DIR}/wireguard-backup-${DATE}.tar.gz.gpg \\\n    --compress-level 9 \\\n    <(tar -czf - -C ${BACKUP_DIR} .)\n\n# Upload encrypted backup\naws s3 cp ${BACKUP_DIR}/wireguard-backup-${DATE}.tar.gz.gpg s3://wireguard-backups/\n\n# Keep only last 30 backups\nfind ${BACKUP_DIR} -name \"wireguard-*\" -type f -mtime +30 -delete\n\necho \"WireGuard backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/wireguard-backup.sh\n\n# Schedule daily backups\necho \"0 3 * * * root /usr/local/bin/wireguard-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Advanced Features\n\n### Site-to-Site VPN\n```bash\n# Configure site-to-site VPN between offices\n# Office A (Main) - 192.168.1.0/24\n# Office B (Branch) - 192.168.2.0/24\n\n# Main office WireGuard config\nsudo tee /etc/wireguard/site-to-site.conf > /dev/null <<EOF\n[Interface]\nPrivateKey = main_office_private_key\nAddress = 172.16.0.1/30\nListenPort = 51820\n\n# Route traffic between sites\nPostUp = ip route add 192.168.2.0/24 dev %i\nPostUp = iptables -A FORWARD -i %i -o eth0 -s 192.168.2.0/24 -d 192.168.1.0/24 -j ACCEPT\nPostUp = iptables -A FORWARD -i eth0 -o %i -s 192.168.1.0/24 -d 192.168.2.0/24 -j ACCEPT\n\nPostDown = ip route del 192.168.2.0/24 dev %i\nPostDown = iptables -D FORWARD -i %i -o eth0 -s 192.168.2.0/24 -d 192.168.1.0/24 -j ACCEPT\nPostDown = iptables -D FORWARD -i eth0 -o %i -s 192.168.1.0/24 -d 192.168.2.0/24 -j ACCEPT\n\n[Peer]\n# Branch Office\nPublicKey = branch_office_public_key\nEndpoint = branch.example.com:51820\nAllowedIPs = 172.16.0.2/32, 192.168.2.0/24\nPersistentKeepalive = 25\nEOF\n```\n\n### Load Balancing and Failover\n```bash\n# Configure multiple WireGuard servers for redundancy\n# Client configuration with multiple peers\ncat > multi-server-client.conf <<EOF\n[Interface]\nPrivateKey = client_private_key\nAddress = 10.0.0.10/32\nDNS = 1.1.1.1, 8.8.8.8\n\n# Primary server\n[Peer]\nPublicKey = primary_server_public_key\nEndpoint = vpn1.example.com:51820\nAllowedIPs = 0.0.0.0/1, 128.0.0.0/1\nPersistentKeepalive = 25\n\n# Backup server (different IP range to avoid conflicts)\n[Peer]\nPublicKey = backup_server_public_key\nEndpoint = vpn2.example.com:51820\nAllowedIPs = 10.1.0.0/24\nPersistentKeepalive = 25\nEOF\n```\n\n## Troubleshooting\n\n### Common Issues and Solutions\n```bash\n# Check WireGuard status\nsudo systemctl status wg-quick@wg0\nsudo wg show\n\n# Check interface configuration\nip addr show wg0\nip route show table all | grep wg0\n\n# Test connectivity\nping -c 4 10.0.0.1  # Server IP from client\nping -c 4 10.0.0.2  # Client IP from server\n\n# Check firewall rules\nsudo iptables -L -n | grep -E \"(wg0|51820)\"\nsudo ufw status | grep -E \"(WireGuard|51820)\"\n\n# Check logs\nsudo journalctl -u wg-quick@wg0 -f\ndmesg | grep wireguard\n\n# Debug handshake issues\nsudo wg show wg0 latest-handshakes\nsudo wg show wg0 transfer\n\n# Check peer connectivity\nsudo wg show wg0 endpoints\nsudo wg show wg0 allowed-ips\n\n# Restart WireGuard interface\nsudo wg-quick down wg0\nsudo wg-quick up wg0\n\n# Check kernel module\nlsmod | grep wireguard\nmodinfo wireguard\n\n# Test DNS resolution through VPN\nnslookup google.com 10.0.0.1\n\n# Check MTU issues\nping -M do -s 1472 10.0.0.1  # Test MTU size\n\n# Performance testing\niperf3 -s -p 5201  # On server\niperf3 -c 10.0.0.1 -p 5201  # On client\n\n# Configuration validation\nsudo wg-quick up wg0 --dry-run\n\n# Check routing table\nip route show table all\nip rule show\n\n# Network troubleshooting\ntraceroute -I 8.8.8.8  # Test route through VPN\nss -tulpn | grep 51820\nnetstat -tulpn | grep 51820\n```\n\n### Advanced Debugging\n```bash\n# Enable debug logging\necho 'module wireguard +p' | sudo tee /sys/kernel/debug/dynamic_debug/control\n\n# Monitor kernel messages\nsudo dmesg -w | grep wireguard\n\n# Packet capture\nsudo tcpdump -i wg0 -n\nsudo tcpdump -i eth0 port 51820\n\n# Check system resources\nps aux | grep wg\ntop -p $(pgrep wg-quick)\n\n# Verify cryptographic setup\nsudo wg showconf wg0\n\n# Test with verbose output\nsudo wg-quick up wg0 2>&1 | tee /tmp/wg-debug.log\n\n# Check peer handshake details\nsudo wg show wg0 dump\n```\n\n## Additional Resources\n\n- [WireGuard Official Documentation](https://www.wireguard.com/)\n- [WireGuard Quick Start](https://www.wireguard.com/quickstart/)\n- [WireGuard Protocol Whitepaper](https://www.wireguard.com/papers/wireguard.pdf)\n- [WireGuard Community](https://lists.zx2c4.com/mailman/listinfo/wireguard)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"wireguard-installation-guide\" class=\"mobile-header\">WireGuard Installation Guide</h1>\n<p class=\"mobile-paragraph\">Modern, fast, and secure VPN solution using state-of-the-art cryptography. Essential tool for secure remote access, site-to-site connectivity, and privacy protection with minimal configuration complexity.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system with kernel 3.10+ (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">Static IP address or dynamic DNS</li>\n<li class=\"mobile-list-item\">UDP port 51820 available (default, configurable)</li>\n<li class=\"mobile-list-item\">Basic understanding of networking concepts</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install WireGuard\nsudo apt install -y wireguard wireguard-tools\n\n# For older Ubuntu versions (18.04)\nsudo add-apt-repository ppa:wireguard/wireguard\nsudo apt update\nsudo apt install -y wireguard\n\n# Install additional tools\nsudo apt install -y qrencode resolvconf\n\n# Verify installation\nwg --version\nmodprobe wireguard &amp;&amp; echo &quot;WireGuard module loaded successfully&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository\nsudo yum install -y epel-release\n\n# Install WireGuard\nsudo yum install -y wireguard-tools\n\n# For CentOS 7 (requires additional steps)\nsudo yum install -y yum-plugin-elrepo\nsudo yum install -y kmod-wireguard wireguard-tools\n\n# Install additional tools\nsudo yum install -y qrencode\n\n# Enable IP forwarding\necho &#039;net.ipv4.ip_forward = 1&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv6.conf.all.forwarding = 1&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"fedora\" class=\"mobile-header\">Fedora</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WireGuard (included in kernel 5.6+)\nsudo dnf install -y wireguard-tools qrencode\n\n# Enable IP forwarding\necho &#039;net.ipv4.ip_forward = 1&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WireGuard\nsudo pacman -Syu wireguard-tools qrencode\n\n# Load WireGuard module\nsudo modprobe wireguard\n\n# Enable IP forwarding\necho &#039;net.ipv4.ip_forward = 1&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"server-configuration\" class=\"mobile-header\">Server Configuration</h2>\n<h3 id=\"generate-keys-and-create-server-config\" class=\"mobile-header\">Generate Keys and Create Server Config</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create WireGuard directory\nsudo mkdir -p /etc/wireguard\nsudo chmod 700 /etc/wireguard\n\n# Generate server keys\ncd /etc/wireguard\nwg genkey | sudo tee server_private.key | wg pubkey | sudo tee server_public.key\nsudo chmod 600 server_private.key\n\n# Create server configuration\nsudo tee /etc/wireguard/wg0.conf &gt; /dev/null &lt;&lt;EOF\n[Interface]\n# Server configuration\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24, fd00::1/64\nListenPort = 51820\nSaveConfig = true\n\n# Network configuration\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE; ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE; ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# DNS servers (optional)\nDNS = 1.1.1.1, 8.8.8.8\n\n# Client configurations will be added here automatically\n# [Peer] sections for each client\nEOF\n\nsudo chmod 600 /etc/wireguard/wg0.conf</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-server-configuration\" class=\"mobile-header\">Advanced Server Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create production server configuration with security\nsudo tee /etc/wireguard/wg0.conf &gt; /dev/null &lt;&lt;EOF\n[Interface]\n# Server identity\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24\nListenPort = 51820\nSaveConfig = false  # Disable for security in production\n\n# Network forwarding and NAT\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostUp = ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT; ip6tables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nPostDown = ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT; ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n# Security: Block private networks (adjust as needed)\nPostUp = iptables -I FORWARD -s 10.0.0.0/8 -d 192.168.1.0/24 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/8 -d 172.16.0.0/12 -j DROP\n\n# DNS configuration\nDNS = 10.0.0.1  # Use Pi-hole or local DNS\n\n# Example client configurations\n[Peer]\n# Client 1 - Admin laptop\nPublicKey = client1_public_key_here\nAllowedIPs = 10.0.0.2/32\nPersistentKeepalive = 25\n\n[Peer]  \n# Client 2 - Mobile device\nPublicKey = client2_public_key_here\nAllowedIPs = 10.0.0.3/32\nPersistentKeepalive = 25\n\n[Peer]\n# Client 3 - Site-to-site (branch office)\nPublicKey = site_public_key_here\nAllowedIPs = 10.0.0.0/24, 192.168.100.0/24\nEndpoint = branch.example.com:51820\nPersistentKeepalive = 25\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"client-configuration\" class=\"mobile-header\">Client Configuration</h2>\n<h3 id=\"generate-client-configurations\" class=\"mobile-header\">Generate Client Configurations</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create client configuration generator script\nsudo tee /usr/local/bin/wg-add-client.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nCLIENT_NAME=&quot;${1}&quot;\nSERVER_PUBLIC_IP=&quot;${2:-your-server-public-ip}&quot;\nSERVER_PUBLIC_KEY=&quot;$(sudo cat /etc/wireguard/server_public.key)&quot;\n\nif [ -z &quot;$CLIENT_NAME&quot; ]; then\n    echo &quot;Usage: $0 &lt;client_name&gt; [server_public_ip]&quot;\n    echo &quot;Example: $0 laptop1 203.0.113.1&quot;\n    exit 1\nfi\n\n# Get next available IP\nLAST_IP=$(grep &quot;AllowedIPs&quot; /etc/wireguard/wg0.conf | grep -o &quot;10\\.0\\.0\\.[0-9]*&quot; | sort -t. -k4 -n | tail -1 | cut -d. -f4)\nNEXT_IP=$((LAST_IP + 1))\nCLIENT_IP=&quot;10.0.0.${NEXT_IP}/32&quot;\n\n# Generate client keys\nCLIENT_PRIVATE_KEY=$(wg genkey)\nCLIENT_PUBLIC_KEY=$(echo $CLIENT_PRIVATE_KEY | wg pubkey)\n\n# Add peer to server configuration\nsudo tee -a /etc/wireguard/wg0.conf &gt; /dev/null &lt;&lt;PEER\n\n[Peer]\n# ${CLIENT_NAME}\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_IP}\nPersistentKeepalive = 25\nPEER\n\n# Generate client configuration\ncat &gt; /tmp/${CLIENT_NAME}.conf &lt;&lt;CLIENT_CONFIG\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_IP}\nDNS = 10.0.0.1, 1.1.1.1\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nEndpoint = ${SERVER_PUBLIC_IP}:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nCLIENT_CONFIG\n\n# Generate QR code for mobile devices\nqrencode -t ansiutf8 &lt; /tmp/${CLIENT_NAME}.conf\n\necho &quot;Client configuration created: /tmp/${CLIENT_NAME}.conf&quot;\necho &quot;Add to server with: sudo wg addconf wg0 &lt;(echo &#039;[Peer]&#039;; echo &#039;PublicKey = ${CLIENT_PUBLIC_KEY}&#039;; echo &#039;AllowedIPs = ${CLIENT_IP}&#039;)&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wg-add-client.sh\n\n# Example: Add a client\n# sudo /usr/local/bin/wg-add-client.sh laptop1 your-server-ip</code></pre>\n      </div>\n    </div>\n<h3 id=\"client-examples\" class=\"mobile-header\">Client Examples</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Mobile device configuration\ncat &gt; mobile-client.conf &lt;&lt;EOF\n[Interface]\nPrivateKey = mobile_device_private_key\nAddress = 10.0.0.10/32\nDNS = 10.0.0.1\n\n[Peer]\nPublicKey = server_public_key_here\nEndpoint = vpn.example.com:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nEOF\n\n# Site-to-site configuration (branch office)\ncat &gt; branch-office.conf &lt;&lt;EOF\n[Interface]\nPrivateKey = branch_office_private_key\nAddress = 10.0.0.100/32\nPostUp = iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT; iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\nPostDown = iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT; iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\n\n[Peer]\nPublicKey = server_public_key_here\nEndpoint = vpn.example.com:51820\nAllowedIPs = 10.0.0.0/24, 192.168.1.0/24\nPersistentKeepalive = 25\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management-and-security\" class=\"mobile-header\">Service Management and Security</h2>\n<h3 id=\"systemd-service\" class=\"mobile-header\">SystemD Service</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable WireGuard interface as systemd service\nsudo systemctl enable wg-quick@wg0\nsudo systemctl start wg-quick@wg0\n\n# Check status\nsudo systemctl status wg-quick@wg0\nsudo wg show\n\n# Alternative: Manual management\nsudo wg-quick up wg0\nsudo wg-quick down wg0</code></pre>\n      </div>\n    </div>\n<h3 id=\"firewall-configuration\" class=\"mobile-header\">Firewall Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure UFW for WireGuard\nsudo ufw allow 51820/udp comment &#039;WireGuard VPN&#039;\nsudo ufw allow from 10.0.0.0/24 comment &#039;WireGuard clients&#039;\n\n# For internal network access\nsudo ufw allow from 10.0.0.0/24 to 192.168.1.0/24\n\n# Firewalld configuration (RHEL/CentOS)\nsudo firewall-cmd --permanent --add-port=51820/udp\nsudo firewall-cmd --permanent --add-rich-rule=&#039;rule family=ipv4 source address=10.0.0.0/24 accept&#039;\nsudo firewall-cmd --reload\n\n# Direct iptables rules\nsudo iptables -A INPUT -p udp --dport 51820 -j ACCEPT\nsudo iptables -A FORWARD -i wg0 -j ACCEPT\nsudo iptables -A FORWARD -o wg0 -j ACCEPT\nsudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-hardening\" class=\"mobile-header\">Security Hardening</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure advanced security features\nsudo tee /etc/wireguard/wg0.conf &gt; /dev/null &lt;&lt;EOF\n[Interface]\nPrivateKey = $(sudo cat server_private.key)\nAddress = 10.0.0.1/24\nListenPort = 51820\n\n# Security: Change default port\n# ListenPort = 41194\n\n# DNS security\nDNS = 10.0.0.1  # Use Pi-hole for ad blocking\n\n# Advanced security rules\nPostUp = iptables -A FORWARD -i %i -j ACCEPT\nPostUp = iptables -A FORWARD -o %i -j ACCEPT\nPostUp = iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE\n\n# Block access to local network (security measure)\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.0/24 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 172.16.0.0/12 -j DROP\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 10.0.0.0/8 -j DROP\n\n# Allow specific services only\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.100 -p tcp --dport 22 -j ACCEPT    # SSH to server\nPostUp = iptables -I FORWARD -s 10.0.0.0/24 -d 192.168.1.101 -p tcp --dport 443 -j ACCEPT  # HTTPS to web services\n\nPostDown = iptables -D FORWARD -i %i -j ACCEPT\nPostDown = iptables -D FORWARD -o %i -j ACCEPT\nPostDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"management-and-automation\" class=\"mobile-header\">Management and Automation</h2>\n<h3 id=\"wireguard-management-script\" class=\"mobile-header\">WireGuard Management Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/wg-manager.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\n\nINTERFACE=&quot;wg0&quot;\nCONFIG_FILE=&quot;/etc/wireguard/${INTERFACE}.conf&quot;\nCLIENTS_DIR=&quot;/etc/wireguard/clients&quot;\nSERVER_PUBLIC_IP=&quot;${SERVER_PUBLIC_IP:-$(curl -s ipinfo.io/ip)}&quot;\nSERVER_PUBLIC_KEY=&quot;$(sudo cat /etc/wireguard/server_public.key)&quot;\n\nsudo mkdir -p ${CLIENTS_DIR}\n\ncase &quot;${1}&quot; in\n    &quot;add-client&quot;)\n        CLIENT_NAME=&quot;${2}&quot;\n        if [ -z &quot;$CLIENT_NAME&quot; ]; then\n            echo &quot;Usage: $0 add-client &lt;client_name&gt;&quot;\n            exit 1\n        fi\n        \n        # Generate client keys\n        CLIENT_PRIVATE_KEY=$(wg genkey)\n        CLIENT_PUBLIC_KEY=$(echo $CLIENT_PRIVATE_KEY | wg pubkey)\n        \n        # Get next available IP\n        LAST_IP=$(grep &quot;AllowedIPs&quot; ${CONFIG_FILE} | grep -o &quot;10\\.0\\.0\\.[0-9]*&quot; | sort -t. -k4 -n | tail -1 | cut -d. -f4)\n        NEXT_IP=$((LAST_IP + 1))\n        CLIENT_IP=&quot;10.0.0.${NEXT_IP}&quot;\n        \n        # Add peer to server\n        sudo wg set ${INTERFACE} peer ${CLIENT_PUBLIC_KEY} allowed-ips ${CLIENT_IP}/32\n        \n        # Save to config\n        sudo tee -a ${CONFIG_FILE} &gt; /dev/null &lt;&lt;PEER\n\n[Peer]\n# ${CLIENT_NAME} - $(date)\nPublicKey = ${CLIENT_PUBLIC_KEY}\nAllowedIPs = ${CLIENT_IP}/32\nPersistentKeepalive = 25\nPEER\n        \n        # Generate client config\n        cat &gt; ${CLIENTS_DIR}/${CLIENT_NAME}.conf &lt;&lt;CLIENT_CONFIG\n[Interface]\nPrivateKey = ${CLIENT_PRIVATE_KEY}\nAddress = ${CLIENT_IP}/32\nDNS = 10.0.0.1\n\n[Peer]\nPublicKey = ${SERVER_PUBLIC_KEY}\nEndpoint = ${SERVER_PUBLIC_IP}:51820\nAllowedIPs = 0.0.0.0/0, ::/0\nPersistentKeepalive = 25\nCLIENT_CONFIG\n        \n        # Generate QR code\n        echo &quot;Client ${CLIENT_NAME} configuration:&quot;\n        qrencode -t ansiutf8 &lt; ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n        echo &quot;Configuration file: ${CLIENTS_DIR}/${CLIENT_NAME}.conf&quot;\n        ;;\n        \n    &quot;remove-client&quot;)\n        CLIENT_NAME=&quot;${2}&quot;\n        if [ -z &quot;$CLIENT_NAME&quot; ]; then\n            echo &quot;Usage: $0 remove-client &lt;client_name&gt;&quot;\n            exit 1\n        fi\n        \n        CLIENT_PUBLIC_KEY=$(grep -A 3 &quot;# ${CLIENT_NAME}&quot; ${CONFIG_FILE} | grep &quot;PublicKey&quot; | cut -d&#039; &#039; -f3)\n        if [ -n &quot;$CLIENT_PUBLIC_KEY&quot; ]; then\n            sudo wg set ${INTERFACE} peer ${CLIENT_PUBLIC_KEY} remove\n            sudo sed -i &quot;/# ${CLIENT_NAME}/,+3d&quot; ${CONFIG_FILE}\n            rm -f ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n            echo &quot;Client ${CLIENT_NAME} removed&quot;\n        else\n            echo &quot;Client ${CLIENT_NAME} not found&quot;\n        fi\n        ;;\n        \n    &quot;list-clients&quot;)\n        echo &quot;Connected clients:&quot;\n        sudo wg show ${INTERFACE}\n        echo &quot;&quot;\n        echo &quot;Configured clients:&quot;\n        grep &quot;^# &quot; ${CONFIG_FILE} | sed &#039;s/# /- /&#039;\n        ;;\n        \n    &quot;show-client&quot;)\n        CLIENT_NAME=&quot;${2}&quot;\n        if [ -z &quot;$CLIENT_NAME&quot; ]; then\n            echo &quot;Usage: $0 show-client &lt;client_name&gt;&quot;\n            exit 1\n        fi\n        \n        if [ -f &quot;${CLIENTS_DIR}/${CLIENT_NAME}.conf&quot; ]; then\n            echo &quot;Configuration for ${CLIENT_NAME}:&quot;\n            cat ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n            echo &quot;&quot;\n            echo &quot;QR Code:&quot;\n            qrencode -t ansiutf8 &lt; ${CLIENTS_DIR}/${CLIENT_NAME}.conf\n        else\n            echo &quot;Client ${CLIENT_NAME} not found&quot;\n        fi\n        ;;\n        \n    &quot;status&quot;)\n        echo &quot;WireGuard Status:&quot;\n        sudo systemctl status wg-quick@${INTERFACE}\n        echo &quot;&quot;\n        echo &quot;Interface Details:&quot;\n        sudo wg show ${INTERFACE}\n        echo &quot;&quot;\n        echo &quot;Interface Statistics:&quot;\n        sudo wg show ${INTERFACE} transfer\n        ;;\n        \n    &quot;restart&quot;)\n        echo &quot;Restarting WireGuard...&quot;\n        sudo systemctl restart wg-quick@${INTERFACE}\n        echo &quot;WireGuard restarted&quot;\n        ;;\n        \n    *)\n        echo &quot;WireGuard Management Script&quot;\n        echo &quot;Usage: $0 {add-client|remove-client|list-clients|show-client|status|restart}&quot;\n        echo &quot;&quot;\n        echo &quot;Examples:&quot;\n        echo &quot;  $0 add-client laptop1&quot;\n        echo &quot;  $0 remove-client laptop1&quot;  \n        echo &quot;  $0 show-client laptop1&quot;\n        echo &quot;  $0 list-clients&quot;\n        echo &quot;  $0 status&quot;\n        echo &quot;  $0 restart&quot;\n        exit 1\n        ;;\nesac\nEOF\n\nsudo chmod +x /usr/local/bin/wg-manager.sh</code></pre>\n      </div>\n    </div>\n<h3 id=\"web-ui-wireguard-easy\" class=\"mobile-header\">Web UI (WireGuard Easy)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install WireGuard Easy (web management interface)\nmkdir -p ~/wg-easy\ncd ~/wg-easy\n\ncat &gt; docker-compose.yml &lt;&lt;EOF\nversion: &#039;3.8&#039;\n\nservices:\n  wg-easy:\n    image: weejewel/wg-easy:latest\n    container_name: wg-easy\n    restart: unless-stopped\n    ports:\n      - &quot;51821:51821/udp&quot;  # WireGuard port\n      - &quot;127.0.0.1:51822:51822/tcp&quot;  # Web UI port\n    environment:\n      - WG_HOST=vpn.example.com\n      - PASSWORD=WebUISecurePassword2024!\n      - WG_PORT=51821\n      - WG_DEFAULT_ADDRESS=10.8.0.x\n      - WG_DEFAULT_DNS=1.1.1.1,8.8.8.8\n      - WG_MTU=1420\n      - WG_ALLOWED_IPS=0.0.0.0/0,::/0\n      - WG_PERSISTENT_KEEPALIVE=25\n    volumes:\n      - ./data:/etc/wireguard\n    cap_add:\n      - NET_ADMIN\n      - SYS_MODULE\n    sysctls:\n      - net.ipv4.ip_forward=1\n      - net.ipv4.conf.all.src_valid_mark=1\n    networks:\n      - wg-easy\n\nnetworks:\n  wg-easy:\n    driver: bridge\nEOF\n\n# Start WG-Easy\ndocker-compose up -d\n\n# Access web interface at http://localhost:51822</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring-and-maintenance\" class=\"mobile-header\">Monitoring and Maintenance</h2>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/wireguard-health.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nHEALTH_LOG=&quot;/var/log/wireguard-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${HEALTH_LOG}\n}\n\n# Check WireGuard service\nif systemctl is-active wg-quick@wg0 &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ WireGuard service is running&quot;\nelse\n    log_message &quot;âœ— WireGuard service is not running&quot;\n    exit 1\nfi\n\n# Check interface status\nif ip link show wg0 &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ WireGuard interface is up&quot;\nelse\n    log_message &quot;âœ— WireGuard interface is down&quot;\nfi\n\n# Check connected peers\nCONNECTED_PEERS=$(sudo wg show wg0 peers | wc -l)\nACTIVE_PEERS=$(sudo wg show wg0 latest-handshakes | awk &#039;$2 &gt; 0&#039; | wc -l)\nlog_message &quot;â„¹ Connected peers: ${ACTIVE_PEERS}/${CONNECTED_PEERS}&quot;\n\n# Check traffic statistics\nTRAFFIC_STATS=$(sudo wg show wg0 transfer)\nlog_message &quot;â„¹ Traffic statistics available: $(echo &quot;$TRAFFIC_STATS&quot; | wc -l) peers&quot;\n\n# Check listening port\nif ss -ulpn | grep -q &quot;:51820&quot;; then\n    log_message &quot;âœ“ WireGuard is listening on port 51820&quot;\nelse\n    log_message &quot;âš  WireGuard not listening on expected port&quot;\nfi\n\n# Check IP forwarding\nIP_FORWARD=$(cat /proc/sys/net/ipv4/ip_forward)\nif [ &quot;$IP_FORWARD&quot; = &quot;1&quot; ]; then\n    log_message &quot;âœ“ IP forwarding is enabled&quot;\nelse\n    log_message &quot;âœ— IP forwarding is disabled&quot;\nfi\n\nlog_message &quot;WireGuard health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wireguard-health.sh\n\n# Schedule health checks every 10 minutes\necho &quot;*/10 * * * * root /usr/local/bin/wireguard-health.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"backup-and-configuration-management\" class=\"mobile-header\">Backup and Configuration Management</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/wireguard-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/wireguard&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}/{configs,clients}\n\necho &quot;Starting WireGuard backup...&quot;\n\n# Backup server configuration\ncp /etc/wireguard/wg0.conf ${BACKUP_DIR}/configs/wg0-${DATE}.conf\n\n# Backup client configurations\nif [ -d &quot;/etc/wireguard/clients&quot; ]; then\n    tar -czf ${BACKUP_DIR}/clients/clients-${DATE}.tar.gz -C /etc/wireguard clients/\nfi\n\n# Backup keys\ntar -czf ${BACKUP_DIR}/configs/keys-${DATE}.tar.gz -C /etc/wireguard *.key\n\n# Upload to cloud storage (encrypted)\ngpg --symmetric --cipher-algo AES256 --compress-algo 1 --s2k-mode 3 \\\n    --s2k-digest-algo SHA512 --s2k-count 65536 \\\n    --output ${BACKUP_DIR}/wireguard-backup-${DATE}.tar.gz.gpg \\\n    --compress-level 9 \\\n    &lt;(tar -czf - -C ${BACKUP_DIR} .)\n\n# Upload encrypted backup\naws s3 cp ${BACKUP_DIR}/wireguard-backup-${DATE}.tar.gz.gpg s3://wireguard-backups/\n\n# Keep only last 30 backups\nfind ${BACKUP_DIR} -name &quot;wireguard-*&quot; -type f -mtime +30 -delete\n\necho &quot;WireGuard backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/wireguard-backup.sh\n\n# Schedule daily backups\necho &quot;0 3 * * * root /usr/local/bin/wireguard-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-features\" class=\"mobile-header\">Advanced Features</h2>\n<h3 id=\"site-to-site-vpn\" class=\"mobile-header\">Site-to-Site VPN</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure site-to-site VPN between offices\n# Office A (Main) - 192.168.1.0/24\n# Office B (Branch) - 192.168.2.0/24\n\n# Main office WireGuard config\nsudo tee /etc/wireguard/site-to-site.conf &gt; /dev/null &lt;&lt;EOF\n[Interface]\nPrivateKey = main_office_private_key\nAddress = 172.16.0.1/30\nListenPort = 51820\n\n# Route traffic between sites\nPostUp = ip route add 192.168.2.0/24 dev %i\nPostUp = iptables -A FORWARD -i %i -o eth0 -s 192.168.2.0/24 -d 192.168.1.0/24 -j ACCEPT\nPostUp = iptables -A FORWARD -i eth0 -o %i -s 192.168.1.0/24 -d 192.168.2.0/24 -j ACCEPT\n\nPostDown = ip route del 192.168.2.0/24 dev %i\nPostDown = iptables -D FORWARD -i %i -o eth0 -s 192.168.2.0/24 -d 192.168.1.0/24 -j ACCEPT\nPostDown = iptables -D FORWARD -i eth0 -o %i -s 192.168.1.0/24 -d 192.168.2.0/24 -j ACCEPT\n\n[Peer]\n# Branch Office\nPublicKey = branch_office_public_key\nEndpoint = branch.example.com:51820\nAllowedIPs = 172.16.0.2/32, 192.168.2.0/24\nPersistentKeepalive = 25\nEOF</code></pre>\n      </div>\n    </div>\n<h3 id=\"load-balancing-and-failover\" class=\"mobile-header\">Load Balancing and Failover</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Configure multiple WireGuard servers for redundancy\n# Client configuration with multiple peers\ncat &gt; multi-server-client.conf &lt;&lt;EOF\n[Interface]\nPrivateKey = client_private_key\nAddress = 10.0.0.10/32\nDNS = 1.1.1.1, 8.8.8.8\n\n# Primary server\n[Peer]\nPublicKey = primary_server_public_key\nEndpoint = vpn1.example.com:51820\nAllowedIPs = 0.0.0.0/1, 128.0.0.0/1\nPersistentKeepalive = 25\n\n# Backup server (different IP range to avoid conflicts)\n[Peer]\nPublicKey = backup_server_public_key\nEndpoint = vpn2.example.com:51820\nAllowedIPs = 10.1.0.0/24\nPersistentKeepalive = 25\nEOF</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues-and-solutions\" class=\"mobile-header\">Common Issues and Solutions</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check WireGuard status\nsudo systemctl status wg-quick@wg0\nsudo wg show\n\n# Check interface configuration\nip addr show wg0\nip route show table all | grep wg0\n\n# Test connectivity\nping -c 4 10.0.0.1  # Server IP from client\nping -c 4 10.0.0.2  # Client IP from server\n\n# Check firewall rules\nsudo iptables -L -n | grep -E &quot;(wg0|51820)&quot;\nsudo ufw status | grep -E &quot;(WireGuard|51820)&quot;\n\n# Check logs\nsudo journalctl -u wg-quick@wg0 -f\ndmesg | grep wireguard\n\n# Debug handshake issues\nsudo wg show wg0 latest-handshakes\nsudo wg show wg0 transfer\n\n# Check peer connectivity\nsudo wg show wg0 endpoints\nsudo wg show wg0 allowed-ips\n\n# Restart WireGuard interface\nsudo wg-quick down wg0\nsudo wg-quick up wg0\n\n# Check kernel module\nlsmod | grep wireguard\nmodinfo wireguard\n\n# Test DNS resolution through VPN\nnslookup google.com 10.0.0.1\n\n# Check MTU issues\nping -M do -s 1472 10.0.0.1  # Test MTU size\n\n# Performance testing\niperf3 -s -p 5201  # On server\niperf3 -c 10.0.0.1 -p 5201  # On client\n\n# Configuration validation\nsudo wg-quick up wg0 --dry-run\n\n# Check routing table\nip route show table all\nip rule show\n\n# Network troubleshooting\ntraceroute -I 8.8.8.8  # Test route through VPN\nss -tulpn | grep 51820\nnetstat -tulpn | grep 51820</code></pre>\n      </div>\n    </div>\n<h3 id=\"advanced-debugging\" class=\"mobile-header\">Advanced Debugging</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable debug logging\necho &#039;module wireguard +p&#039; | sudo tee /sys/kernel/debug/dynamic_debug/control\n\n# Monitor kernel messages\nsudo dmesg -w | grep wireguard\n\n# Packet capture\nsudo tcpdump -i wg0 -n\nsudo tcpdump -i eth0 port 51820\n\n# Check system resources\nps aux | grep wg\ntop -p $(pgrep wg-quick)\n\n# Verify cryptographic setup\nsudo wg showconf wg0\n\n# Test with verbose output\nsudo wg-quick up wg0 2&gt;&amp;1 | tee /tmp/wg-debug.log\n\n# Check peer handshake details\nsudo wg show wg0 dump</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://www.wireguard.com/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard Official Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.wireguard.com/quickstart/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard Quick Start</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://www.wireguard.com/papers/wireguard.pdf\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard Protocol Whitepaper</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://lists.zx2c4.com/mailman/listinfo/wireguard\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">WireGuard Community</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"14 min","wordCount":2789,"lastBuilt":"2025-09-16T02:44:56.105Z"}]},"__N_SSG":true}