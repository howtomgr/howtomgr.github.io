{"pageProps":{"category":{"key":"media","name":"Media Servers","description":"Media streaming and entertainment platforms","icon":"ðŸŽ¬","color":"#6272a4","keywords":["plex","jellyfin","sonarr","radarr","lidarr","prowlarr"]},"guides":[{"name":"bazarr","displayName":"Bazarr","slug":"bazarr","description":"bazarr is a free and open-source subtitle management. Bazarr automates subtitle downloading for Sonarr and Radarr, supporting multiple languages","category":"media","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/bazarr","updatedAt":"2025-09-16T02:31:21Z","createdAt":"2025-09-16T02:21:13Z","readmeRaw":"# bazarr Installation Guide\n\nbazarr is a free and open-source subtitle management. Bazarr automates subtitle downloading for Sonarr and Radarr, supporting multiple languages\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 1 core minimum\n  - RAM: 256MB minimum\n  - Storage: 500MB for app\n  - Network: HTTP/HTTPS access\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 6767 (default bazarr port)\n  - None\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bazarr\nsudo dnf install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbazarr --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install bazarr\nsudo apt install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo ufw allow 6767\n\n# Verify installation\nbazarr --version\n```\n\n### Arch Linux\n\n```bash\n# Install bazarr\nsudo pacman -S bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Verify installation\nbazarr --version\n```\n\n### Alpine Linux\n\n```bash\n# Install bazarr\napk add --no-cache bazarr\n\n# Enable and start service\nrc-update add bazarr default\nrc-service bazarr start\n\n# Verify installation\nbazarr --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install bazarr\nsudo zypper install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbazarr --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install bazarr\n\n# Start service\nbrew services start bazarr\n\n# Verify installation\nbazarr --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install bazarr\n\n# Enable in rc.conf\necho 'bazarr_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bazarr start\n\n# Verify installation\nbazarr --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install bazarr\n\n# Or using Scoop\nscoop install bazarr\n\n# Verify installation\nbazarr --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/bazarr\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbazarr --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable bazarr\n\n# Start service\nsudo systemctl start bazarr\n\n# Stop service\nsudo systemctl stop bazarr\n\n# Restart service\nsudo systemctl restart bazarr\n\n# Check status\nsudo systemctl status bazarr\n\n# View logs\nsudo journalctl -u bazarr -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add bazarr default\n\n# Start service\nrc-service bazarr start\n\n# Stop service\nrc-service bazarr stop\n\n# Restart service\nrc-service bazarr restart\n\n# Check status\nrc-service bazarr status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'bazarr_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice bazarr start\n\n# Stop service\nservice bazarr stop\n\n# Restart service\nservice bazarr restart\n\n# Check status\nservice bazarr status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start bazarr\nbrew services stop bazarr\nbrew services restart bazarr\n\n# Check status\nbrew services list | grep bazarr\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start bazarr\n\n# Stop service\nnet stop bazarr\n\n# Using PowerShell\nStart-Service bazarr\nStop-Service bazarr\nRestart-Service bazarr\n\n# Check status\nGet-Service bazarr\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream bazarr_backend {\n    server 127.0.0.1:6767;\n}\n\nserver {\n    listen 80;\n    server_name bazarr.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bazarr.example.com;\n\n    ssl_certificate /etc/ssl/certs/bazarr.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bazarr.example.com.key;\n\n    location / {\n        proxy_pass http://bazarr_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName bazarr.example.com\n    Redirect permanent / https://bazarr.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName bazarr.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bazarr.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bazarr.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6767/\n    ProxyPassReverse / http://127.0.0.1:6767/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend bazarr_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bazarr.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bazarr_backend\n\nbackend bazarr_backend\n    balance roundrobin\n    server bazarr1 127.0.0.1:6767 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R bazarr:bazarr /etc/bazarr\nsudo chmod 750 /etc/bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status bazarr\n\n# View logs\nsudo journalctl -u bazarr -f\n\n# Monitor resource usage\ntop -p $(pgrep bazarr)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/bazarr\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/bazarr-backup-$DATE.tar.gz\" /etc/bazarr /var/lib/bazarr\n\necho \"Backup completed: $BACKUP_DIR/bazarr-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop bazarr\n\n# Restore from backup\ntar -xzf /backup/bazarr/bazarr-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bazarr\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u bazarr -n 100\nsudo tail -f /var/log/bazarr/bazarr.log\n\n# Check configuration\nbazarr --version\n\n# Check permissions\nls -la /etc/bazarr\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 6767\n\n# Test connectivity\ntelnet localhost 6767\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep bazarr)\n\n# Check disk I/O\niotop -p $(pgrep bazarr)\n\n# Check connections\nss -an | grep 6767\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  bazarr:\n    image: bazarr:latest\n    ports:\n      - \"6767:6767\"\n    volumes:\n      - ./config:/etc/bazarr\n      - ./data:/var/lib/bazarr\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bazarr\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade bazarr\n\n# Arch Linux\nsudo pacman -Syu bazarr\n\n# Alpine Linux\napk update && apk upgrade bazarr\n\n# openSUSE\nsudo zypper update bazarr\n\n# FreeBSD\npkg update && pkg upgrade bazarr\n\n# Always backup before updates\ntar -czf /backup/bazarr-pre-update-$(date +%Y%m%d).tar.gz /etc/bazarr\n\n# Restart after updates\nsudo systemctl restart bazarr\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/bazarr\n\n# Clean old logs\nfind /var/log/bazarr -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bazarr\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.bazarr.org/\n- GitHub Repository: https://github.com/bazarr/bazarr\n- Community Forum: https://forum.bazarr.org/\n- Best Practices Guide: https://docs.bazarr.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"bazarr-installation-guide\" class=\"mobile-header\">bazarr Installation Guide</h1>\n<p class=\"mobile-paragraph\">bazarr is a free and open-source subtitle management. Bazarr automates subtitle downloading for Sonarr and Radarr, supporting multiple languages</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 1 core minimum</li>\n<li class=\"mobile-list-item\">RAM: 256MB minimum</li>\n<li class=\"mobile-list-item\">Storage: 500MB for app</li>\n<li class=\"mobile-list-item\">Network: HTTP/HTTPS access</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 6767 (default bazarr port)</li>\n<li class=\"mobile-list-item\">None</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install bazarr\nsudo dnf install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install bazarr\nsudo apt install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo ufw allow 6767\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bazarr\nsudo pacman -S bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bazarr\napk add --no-cache bazarr\n\n# Enable and start service\nrc-update add bazarr default\nrc-service bazarr start\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install bazarr\nsudo zypper install -y bazarr\n\n# Enable and start service\nsudo systemctl enable --now bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install bazarr\n\n# Start service\nbrew services start bazarr\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install bazarr\n\n# Enable in rc.conf\necho &#039;bazarr_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bazarr start\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install bazarr\n\n# Or using Scoop\nscoop install bazarr\n\n# Verify installation\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/bazarr\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nbazarr --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable bazarr\n\n# Start service\nsudo systemctl start bazarr\n\n# Stop service\nsudo systemctl stop bazarr\n\n# Restart service\nsudo systemctl restart bazarr\n\n# Check status\nsudo systemctl status bazarr\n\n# View logs\nsudo journalctl -u bazarr -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add bazarr default\n\n# Start service\nrc-service bazarr start\n\n# Stop service\nrc-service bazarr stop\n\n# Restart service\nrc-service bazarr restart\n\n# Check status\nrc-service bazarr status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;bazarr_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice bazarr start\n\n# Stop service\nservice bazarr stop\n\n# Restart service\nservice bazarr restart\n\n# Check status\nservice bazarr status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start bazarr\nbrew services stop bazarr\nbrew services restart bazarr\n\n# Check status\nbrew services list | grep bazarr</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start bazarr\n\n# Stop service\nnet stop bazarr\n\n# Using PowerShell\nStart-Service bazarr\nStop-Service bazarr\nRestart-Service bazarr\n\n# Check status\nGet-Service bazarr</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream bazarr_backend {\n    server 127.0.0.1:6767;\n}\n\nserver {\n    listen 80;\n    server_name bazarr.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name bazarr.example.com;\n\n    ssl_certificate /etc/ssl/certs/bazarr.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/bazarr.example.com.key;\n\n    location / {\n        proxy_pass http://bazarr_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName bazarr.example.com\n    Redirect permanent / https://bazarr.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName bazarr.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/bazarr.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/bazarr.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:6767/\n    ProxyPassReverse / http://127.0.0.1:6767/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend bazarr_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/bazarr.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend bazarr_backend\n\nbackend bazarr_backend\n    balance roundrobin\n    server bazarr1 127.0.0.1:6767 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R bazarr:bazarr /etc/bazarr\nsudo chmod 750 /etc/bazarr\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=6767/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status bazarr\n\n# View logs\nsudo journalctl -u bazarr -f\n\n# Monitor resource usage\ntop -p $(pgrep bazarr)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/bazarr&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/bazarr-backup-$DATE.tar.gz&quot; /etc/bazarr /var/lib/bazarr\n\necho &quot;Backup completed: $BACKUP_DIR/bazarr-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop bazarr\n\n# Restore from backup\ntar -xzf /backup/bazarr/bazarr-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start bazarr</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u bazarr -n 100\nsudo tail -f /var/log/bazarr/bazarr.log\n\n# Check configuration\nbazarr --version\n\n# Check permissions\nls -la /etc/bazarr</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 6767\n\n# Test connectivity\ntelnet localhost 6767\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep bazarr)\n\n# Check disk I/O\niotop -p $(pgrep bazarr)\n\n# Check connections\nss -an | grep 6767</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  bazarr:\n    image: bazarr:latest\n    ports:\n      - &quot;6767:6767&quot;\n    volumes:\n      - ./config:/etc/bazarr\n      - ./data:/var/lib/bazarr\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update bazarr\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade bazarr\n\n# Arch Linux\nsudo pacman -Syu bazarr\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade bazarr\n\n# openSUSE\nsudo zypper update bazarr\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade bazarr\n\n# Always backup before updates\ntar -czf /backup/bazarr-pre-update-$(date +%Y%m%d).tar.gz /etc/bazarr\n\n# Restart after updates\nsudo systemctl restart bazarr</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/bazarr\n\n# Clean old logs\nfind /var/log/bazarr -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/bazarr</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.bazarr.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/bazarr/bazarr</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.bazarr.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.bazarr.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1157,"lastBuilt":"2025-09-16T02:44:42.410Z"},{"name":"emby","displayName":"Emby","slug":"emby","description":"emby is a free and open-source media server system. Emby provides media streaming and management, serving as an alternative to Plex with more open components","category":"media","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/emby","updatedAt":"2025-09-16T02:37:49Z","createdAt":"2025-09-16T02:34:15Z","readmeRaw":"# emby Installation Guide\n\nemby is a free and open-source media server system. Emby provides media streaming and management, serving as an alternative to Plex with more open components\n\n## Prerequisites\n\n- **Hardware Requirements**:\n  - CPU: 2+ cores\n  - RAM: 2GB minimum\n  - Storage: 100GB+ for media\n  - Network: Streaming bandwidth\n- **Operating System**: \n  - Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)\n  - macOS: 10.14+ (Mojave or newer)\n  - Windows: Windows Server 2016+ or Windows 10\n  - FreeBSD: 11.0+\n- **Network Requirements**:\n  - Port 8096 (default emby port)\n  - Port 8920 for HTTPS\n- **Dependencies**:\n  - See official documentation for specific requirements\n- **System Access**: root or sudo privileges required\n\n## Installation\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n\n```bash\n# Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install emby\nsudo dnf install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nemby --version\n```\n\n### Debian/Ubuntu\n\n```bash\n# Update package index\nsudo apt update\n\n# Install emby\nsudo apt install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo ufw allow 8096\n\n# Verify installation\nemby --version\n```\n\n### Arch Linux\n\n```bash\n# Install emby\nsudo pacman -S emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Verify installation\nemby --version\n```\n\n### Alpine Linux\n\n```bash\n# Install emby\napk add --no-cache emby\n\n# Enable and start service\nrc-update add emby default\nrc-service emby start\n\n# Verify installation\nemby --version\n```\n\n### openSUSE/SLES\n\n```bash\n# Install emby\nsudo zypper install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nemby --version\n```\n\n### macOS\n\n```bash\n# Using Homebrew\nbrew install emby\n\n# Start service\nbrew services start emby\n\n# Verify installation\nemby --version\n```\n\n### FreeBSD\n\n```bash\n# Using pkg\npkg install emby\n\n# Enable in rc.conf\necho 'emby_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice emby start\n\n# Verify installation\nemby --version\n```\n\n### Windows\n\n```bash\n# Using Chocolatey\nchoco install emby\n\n# Or using Scoop\nscoop install emby\n\n# Verify installation\nemby --version\n```\n\n## Initial Configuration\n\n### Basic Configuration\n\n```bash\n# Create configuration directory\nsudo mkdir -p /etc/emby\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nemby --version\n```\n\n## Service Management\n\n### systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)\n\n```bash\n# Enable service\nsudo systemctl enable emby\n\n# Start service\nsudo systemctl start emby\n\n# Stop service\nsudo systemctl stop emby\n\n# Restart service\nsudo systemctl restart emby\n\n# Check status\nsudo systemctl status emby\n\n# View logs\nsudo journalctl -u emby -f\n```\n\n### OpenRC (Alpine Linux)\n\n```bash\n# Enable service\nrc-update add emby default\n\n# Start service\nrc-service emby start\n\n# Stop service\nrc-service emby stop\n\n# Restart service\nrc-service emby restart\n\n# Check status\nrc-service emby status\n```\n\n### rc.d (FreeBSD)\n\n```bash\n# Enable in /etc/rc.conf\necho 'emby_enable=\"YES\"' >> /etc/rc.conf\n\n# Start service\nservice emby start\n\n# Stop service\nservice emby stop\n\n# Restart service\nservice emby restart\n\n# Check status\nservice emby status\n```\n\n### launchd (macOS)\n\n```bash\n# Using Homebrew services\nbrew services start emby\nbrew services stop emby\nbrew services restart emby\n\n# Check status\nbrew services list | grep emby\n```\n\n### Windows Service Manager\n\n```powershell\n# Start service\nnet start emby\n\n# Stop service\nnet stop emby\n\n# Using PowerShell\nStart-Service emby\nStop-Service emby\nRestart-Service emby\n\n# Check status\nGet-Service emby\n```\n\n## Advanced Configuration\n\nSee the official documentation for advanced configuration options.\n\n## Reverse Proxy Setup\n\n### nginx Configuration\n\n```nginx\nupstream emby_backend {\n    server 127.0.0.1:8096;\n}\n\nserver {\n    listen 80;\n    server_name emby.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name emby.example.com;\n\n    ssl_certificate /etc/ssl/certs/emby.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/emby.example.com.key;\n\n    location / {\n        proxy_pass http://emby_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\n### Apache Configuration\n\n```apache\n<VirtualHost *:80>\n    ServerName emby.example.com\n    Redirect permanent / https://emby.example.com/\n</VirtualHost>\n\n<VirtualHost *:443>\n    ServerName emby.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/emby.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/emby.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8096/\n    ProxyPassReverse / http://127.0.0.1:8096/\n</VirtualHost>\n```\n\n### HAProxy Configuration\n\n```haproxy\nfrontend emby_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/emby.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend emby_backend\n\nbackend emby_backend\n    balance roundrobin\n    server emby1 127.0.0.1:8096 check\n```\n\n## Security Configuration\n\n### Basic Security Setup\n\n```bash\n# Set appropriate permissions\nsudo chown -R emby:emby /etc/emby\nsudo chmod 750 /etc/emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on\n```\n\n## Database Setup\n\nSee official documentation for database configuration requirements.\n\n## Performance Optimization\n\n### System Tuning\n\n```bash\n# Basic system tuning\necho 'net.core.somaxconn = 65535' | sudo tee -a /etc/sysctl.conf\necho 'net.ipv4.tcp_max_syn_backlog = 65535' | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p\n```\n\n## Monitoring\n\n### Basic Monitoring\n\n```bash\n# Check service status\nsudo systemctl status emby\n\n# View logs\nsudo journalctl -u emby -f\n\n# Monitor resource usage\ntop -p $(pgrep emby)\n```\n\n## Backup and Restore\n\n### Backup Script\n\n```bash\n#!/bin/bash\n# Basic backup script\nBACKUP_DIR=\"/backup/emby\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p \"$BACKUP_DIR\"\ntar -czf \"$BACKUP_DIR/emby-backup-$DATE.tar.gz\" /etc/emby /var/lib/emby\n\necho \"Backup completed: $BACKUP_DIR/emby-backup-$DATE.tar.gz\"\n```\n\n### Restore Procedure\n\n```bash\n# Stop service\nsudo systemctl stop emby\n\n# Restore from backup\ntar -xzf /backup/emby/emby-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start emby\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Service won't start**:\n```bash\n# Check logs\nsudo journalctl -u emby -n 100\nsudo tail -f /var/log/emby/emby.log\n\n# Check configuration\nemby --version\n\n# Check permissions\nls -la /etc/emby\n```\n\n2. **Connection issues**:\n```bash\n# Check if service is listening\nsudo ss -tlnp | grep 8096\n\n# Test connectivity\ntelnet localhost 8096\n\n# Check firewall\nsudo firewall-cmd --list-all\n```\n\n3. **Performance issues**:\n```bash\n# Check resource usage\ntop -p $(pgrep emby)\n\n# Check disk I/O\niotop -p $(pgrep emby)\n\n# Check connections\nss -an | grep 8096\n```\n\n## Integration Examples\n\n### Docker Compose Example\n\n```yaml\nversion: '3.8'\nservices:\n  emby:\n    image: emby:latest\n    ports:\n      - \"8096:8096\"\n    volumes:\n      - ./config:/etc/emby\n      - ./data:/var/lib/emby\n    restart: unless-stopped\n```\n\n## Maintenance\n\n### Update Procedures\n\n```bash\n# RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update emby\n\n# Debian/Ubuntu\nsudo apt update && sudo apt upgrade emby\n\n# Arch Linux\nsudo pacman -Syu emby\n\n# Alpine Linux\napk update && apk upgrade emby\n\n# openSUSE\nsudo zypper update emby\n\n# FreeBSD\npkg update && pkg upgrade emby\n\n# Always backup before updates\ntar -czf /backup/emby-pre-update-$(date +%Y%m%d).tar.gz /etc/emby\n\n# Restart after updates\nsudo systemctl restart emby\n```\n\n### Regular Maintenance\n\n```bash\n# Log rotation\nsudo logrotate -f /etc/logrotate.d/emby\n\n# Clean old logs\nfind /var/log/emby -name \"*.log\" -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/emby\n```\n\n## Additional Resources\n\n- Official Documentation: https://docs.emby.org/\n- GitHub Repository: https://github.com/emby/emby\n- Community Forum: https://forum.emby.org/\n- Best Practices Guide: https://docs.emby.org/best-practices\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection. Always refer to official documentation for the most up-to-date information.\n","readmeHtml":"<h1 id=\"emby-installation-guide\" class=\"mobile-header\">emby Installation Guide</h1>\n<p class=\"mobile-paragraph\">emby is a free and open-source media server system. Emby provides media streaming and management, serving as an alternative to Plex with more open components</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\"><strong>Hardware Requirements</strong>:</li>\n<li class=\"mobile-list-item\">CPU: 2+ cores</li>\n<li class=\"mobile-list-item\">RAM: 2GB minimum</li>\n<li class=\"mobile-list-item\">Storage: 100GB+ for media</li>\n<li class=\"mobile-list-item\">Network: Streaming bandwidth</li>\n<li class=\"mobile-list-item\"><strong>Operating System</strong>: </li>\n<li class=\"mobile-list-item\">Linux: Any modern distribution (RHEL, Debian, Ubuntu, CentOS, Fedora, Arch, Alpine, openSUSE)</li>\n<li class=\"mobile-list-item\">macOS: 10.14+ (Mojave or newer)</li>\n<li class=\"mobile-list-item\">Windows: Windows Server 2016+ or Windows 10</li>\n<li class=\"mobile-list-item\">FreeBSD: 11.0+</li>\n<li class=\"mobile-list-item\"><strong>Network Requirements</strong>:</li>\n<li class=\"mobile-list-item\">Port 8096 (default emby port)</li>\n<li class=\"mobile-list-item\">Port 8920 for HTTPS</li>\n<li class=\"mobile-list-item\"><strong>Dependencies</strong>:</li>\n<li class=\"mobile-list-item\">See official documentation for specific requirements</li>\n<li class=\"mobile-list-item\"><strong>System Access</strong>: root or sudo privileges required</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install EPEL repository if needed\nsudo dnf install -y epel-release\n\n# Install emby\nsudo dnf install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"debianubuntu\" class=\"mobile-header\">Debian/Ubuntu</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update package index\nsudo apt update\n\n# Install emby\nsudo apt install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo ufw allow 8096\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"arch-linux\" class=\"mobile-header\">Arch Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install emby\nsudo pacman -S emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"alpine-linux\" class=\"mobile-header\">Alpine Linux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install emby\napk add --no-cache emby\n\n# Enable and start service\nrc-update add emby default\nrc-service emby start\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"opensusesles\" class=\"mobile-header\">openSUSE/SLES</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install emby\nsudo zypper install -y emby\n\n# Enable and start service\nsudo systemctl enable --now emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"macos\" class=\"mobile-header\">macOS</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew\nbrew install emby\n\n# Start service\nbrew services start emby\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"freebsd\" class=\"mobile-header\">FreeBSD</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using pkg\npkg install emby\n\n# Enable in rc.conf\necho &#039;emby_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice emby start\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows\" class=\"mobile-header\">Windows</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Chocolatey\nchoco install emby\n\n# Or using Scoop\nscoop install emby\n\n# Verify installation\nemby --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"initial-configuration\" class=\"mobile-header\">Initial Configuration</h2>\n<h3 id=\"basic-configuration\" class=\"mobile-header\">Basic Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create configuration directory\nsudo mkdir -p /etc/emby\n\n# Set up basic configuration\n# See official documentation for detailed configuration options\n\n# Test configuration\nemby --version</code></pre>\n      </div>\n    </div>\n<h2 id=\"service-management\" class=\"mobile-header\">Service Management</h2>\n<h3 id=\"systemd-rhel-debian-ubuntu-arch-opensuse\" class=\"mobile-header\">systemd (RHEL, Debian, Ubuntu, Arch, openSUSE)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nsudo systemctl enable emby\n\n# Start service\nsudo systemctl start emby\n\n# Stop service\nsudo systemctl stop emby\n\n# Restart service\nsudo systemctl restart emby\n\n# Check status\nsudo systemctl status emby\n\n# View logs\nsudo journalctl -u emby -f</code></pre>\n      </div>\n    </div>\n<h3 id=\"openrc-alpine-linux\" class=\"mobile-header\">OpenRC (Alpine Linux)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable service\nrc-update add emby default\n\n# Start service\nrc-service emby start\n\n# Stop service\nrc-service emby stop\n\n# Restart service\nrc-service emby restart\n\n# Check status\nrc-service emby status</code></pre>\n      </div>\n    </div>\n<h3 id=\"rcd-freebsd\" class=\"mobile-header\">rc.d (FreeBSD)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Enable in /etc/rc.conf\necho &#039;emby_enable=&quot;YES&quot;&#039; &gt;&gt; /etc/rc.conf\n\n# Start service\nservice emby start\n\n# Stop service\nservice emby stop\n\n# Restart service\nservice emby restart\n\n# Check status\nservice emby status</code></pre>\n      </div>\n    </div>\n<h3 id=\"launchd-macos\" class=\"mobile-header\">launchd (macOS)</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Using Homebrew services\nbrew services start emby\nbrew services stop emby\nbrew services restart emby\n\n# Check status\nbrew services list | grep emby</code></pre>\n      </div>\n    </div>\n<h3 id=\"windows-service-manager\" class=\"mobile-header\">Windows Service Manager</h3>\n<div class=\"mobile-code-block\" data-language=\"powershell\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">powershell</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-powershell\"># Start service\nnet start emby\n\n# Stop service\nnet stop emby\n\n# Using PowerShell\nStart-Service emby\nStop-Service emby\nRestart-Service emby\n\n# Check status\nGet-Service emby</code></pre>\n      </div>\n    </div>\n<h2 id=\"advanced-configuration\" class=\"mobile-header\">Advanced Configuration</h2>\n<p class=\"mobile-paragraph\">See the official documentation for advanced configuration options.</p>\n<h2 id=\"reverse-proxy-setup\" class=\"mobile-header\">Reverse Proxy Setup</h2>\n<h3 id=\"nginx-configuration\" class=\"mobile-header\">nginx Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"nginx\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">nginx</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-nginx\">upstream emby_backend {\n    server 127.0.0.1:8096;\n}\n\nserver {\n    listen 80;\n    server_name emby.example.com;\n    return 301 https://$server_name$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name emby.example.com;\n\n    ssl_certificate /etc/ssl/certs/emby.example.com.crt;\n    ssl_certificate_key /etc/ssl/private/emby.example.com.key;\n\n    location / {\n        proxy_pass http://emby_backend;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}</code></pre>\n      </div>\n    </div>\n<h3 id=\"apache-configuration\" class=\"mobile-header\">Apache Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"apache\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">apache</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-apache\">&lt;VirtualHost *:80&gt;\n    ServerName emby.example.com\n    Redirect permanent / https://emby.example.com/\n&lt;/VirtualHost&gt;\n\n&lt;VirtualHost *:443&gt;\n    ServerName emby.example.com\n    \n    SSLEngine on\n    SSLCertificateFile /etc/ssl/certs/emby.example.com.crt\n    SSLCertificateKeyFile /etc/ssl/private/emby.example.com.key\n    \n    ProxyRequests Off\n    ProxyPreserveHost On\n    \n    ProxyPass / http://127.0.0.1:8096/\n    ProxyPassReverse / http://127.0.0.1:8096/\n&lt;/VirtualHost&gt;</code></pre>\n      </div>\n    </div>\n<h3 id=\"haproxy-configuration\" class=\"mobile-header\">HAProxy Configuration</h3>\n<div class=\"mobile-code-block\" data-language=\"haproxy\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">haproxy</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-haproxy\">frontend emby_frontend\n    bind *:80\n    bind *:443 ssl crt /etc/ssl/certs/emby.pem\n    redirect scheme https if !{ ssl_fc }\n    default_backend emby_backend\n\nbackend emby_backend\n    balance roundrobin\n    server emby1 127.0.0.1:8096 check</code></pre>\n      </div>\n    </div>\n<h2 id=\"security-configuration\" class=\"mobile-header\">Security Configuration</h2>\n<h3 id=\"basic-security-setup\" class=\"mobile-header\">Basic Security Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Set appropriate permissions\nsudo chown -R emby:emby /etc/emby\nsudo chmod 750 /etc/emby\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n\n# Enable SELinux policies (if applicable)\nsudo setsebool -P httpd_can_network_connect on</code></pre>\n      </div>\n    </div>\n<h2 id=\"database-setup\" class=\"mobile-header\">Database Setup</h2>\n<p class=\"mobile-paragraph\">See official documentation for database configuration requirements.</p>\n<h2 id=\"performance-optimization\" class=\"mobile-header\">Performance Optimization</h2>\n<h3 id=\"system-tuning\" class=\"mobile-header\">System Tuning</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Basic system tuning\necho &#039;net.core.somaxconn = 65535&#039; | sudo tee -a /etc/sysctl.conf\necho &#039;net.ipv4.tcp_max_syn_backlog = 65535&#039; | sudo tee -a /etc/sysctl.conf\nsudo sysctl -p</code></pre>\n      </div>\n    </div>\n<h2 id=\"monitoring\" class=\"mobile-header\">Monitoring</h2>\n<h3 id=\"basic-monitoring\" class=\"mobile-header\">Basic Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check service status\nsudo systemctl status emby\n\n# View logs\nsudo journalctl -u emby -f\n\n# Monitor resource usage\ntop -p $(pgrep emby)</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-restore\" class=\"mobile-header\">Backup and Restore</h2>\n<h3 id=\"backup-script\" class=\"mobile-header\">Backup Script</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">#!/bin/bash\n# Basic backup script\nBACKUP_DIR=&quot;/backup/emby&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p &quot;$BACKUP_DIR&quot;\ntar -czf &quot;$BACKUP_DIR/emby-backup-$DATE.tar.gz&quot; /etc/emby /var/lib/emby\n\necho &quot;Backup completed: $BACKUP_DIR/emby-backup-$DATE.tar.gz&quot;</code></pre>\n      </div>\n    </div>\n<h3 id=\"restore-procedure\" class=\"mobile-header\">Restore Procedure</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Stop service\nsudo systemctl stop emby\n\n# Restore from backup\ntar -xzf /backup/emby/emby-backup-*.tar.gz -C /\n\n# Start service\nsudo systemctl start emby</code></pre>\n      </div>\n    </div>\n<h2 id=\"troubleshooting\" class=\"mobile-header\">Troubleshooting</h2>\n<h3 id=\"common-issues\" class=\"mobile-header\">Common Issues</h3>\n<p class=\"mobile-paragraph\">1. <strong>Service won't start</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check logs\nsudo journalctl -u emby -n 100\nsudo tail -f /var/log/emby/emby.log\n\n# Check configuration\nemby --version\n\n# Check permissions\nls -la /etc/emby</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">2. <strong>Connection issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check if service is listening\nsudo ss -tlnp | grep 8096\n\n# Test connectivity\ntelnet localhost 8096\n\n# Check firewall\nsudo firewall-cmd --list-all</code></pre>\n      </div>\n    </div>\n<p class=\"mobile-paragraph\">3. <strong>Performance issues</strong>:</p>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Check resource usage\ntop -p $(pgrep emby)\n\n# Check disk I/O\niotop -p $(pgrep emby)\n\n# Check connections\nss -an | grep 8096</code></pre>\n      </div>\n    </div>\n<h2 id=\"integration-examples\" class=\"mobile-header\">Integration Examples</h2>\n<h3 id=\"docker-compose-example\" class=\"mobile-header\">Docker Compose Example</h3>\n<div class=\"mobile-code-block\" data-language=\"yaml\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">yaml</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-yaml\">version: &#039;3.8&#039;\nservices:\n  emby:\n    image: emby:latest\n    ports:\n      - &quot;8096:8096&quot;\n    volumes:\n      - ./config:/etc/emby\n      - ./data:/var/lib/emby\n    restart: unless-stopped</code></pre>\n      </div>\n    </div>\n<h2 id=\"maintenance\" class=\"mobile-header\">Maintenance</h2>\n<h3 id=\"update-procedures\" class=\"mobile-header\">Update Procedures</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># RHEL/CentOS/Rocky/AlmaLinux\nsudo dnf update emby\n\n# Debian/Ubuntu\nsudo apt update &amp;&amp; sudo apt upgrade emby\n\n# Arch Linux\nsudo pacman -Syu emby\n\n# Alpine Linux\napk update &amp;&amp; apk upgrade emby\n\n# openSUSE\nsudo zypper update emby\n\n# FreeBSD\npkg update &amp;&amp; pkg upgrade emby\n\n# Always backup before updates\ntar -czf /backup/emby-pre-update-$(date +%Y%m%d).tar.gz /etc/emby\n\n# Restart after updates\nsudo systemctl restart emby</code></pre>\n      </div>\n    </div>\n<h3 id=\"regular-maintenance\" class=\"mobile-header\">Regular Maintenance</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Log rotation\nsudo logrotate -f /etc/logrotate.d/emby\n\n# Clean old logs\nfind /var/log/emby -name &quot;*.log&quot; -mtime +30 -delete\n\n# Check disk usage\ndu -sh /var/lib/emby</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\">Official Documentation: https://docs.emby.org/</li>\n<li class=\"mobile-list-item\">GitHub Repository: https://github.com/emby/emby</li>\n<li class=\"mobile-list-item\">Community Forum: https://forum.emby.org/</li>\n<li class=\"mobile-list-item\">Best Practices Guide: https://docs.emby.org/best-practices</li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection. Always refer to official documentation for the most up-to-date information.</p>","readTime":"6 min","wordCount":1165,"lastBuilt":"2025-09-16T02:44:14.980Z"},{"name":"jellyfin","displayName":"Jellyfin","slug":"jellyfin","description":"jellyfin is a free and open-source free software media system. Jellyfin is a free and open-source media server for hosting and streaming your media library, serving as an alternative to Plex, Emby, or commercial streaming solutions","category":"media","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/jellyfin","updatedAt":"2025-09-16T02:38:05Z","createdAt":"2025-09-08T03:08:57Z","readmeRaw":"# Jellyfin Installation Guide\n\nOpen-source media server for managing and streaming your personal media collection. Modern alternative to Plex with no licensing restrictions and complete control over your media library.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for transcoding\n- GPU recommended for hardware transcoding (Intel Quick Sync, NVIDIA, AMD)\n- Storage space for media library\n- Network connectivity for remote access\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Install prerequisite packages\nsudo apt install -y curl gnupg\n\n# Add Jellyfin repository\ncurl -fsSL https://repo.jellyfin.org/install-debuntu.sh | sudo bash\n\n# Install Jellyfin\nsudo apt install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo ufw allow 8096/tcp comment 'Jellyfin HTTP'\nsudo ufw allow 8920/tcp comment 'Jellyfin HTTPS'\n\n# Verify installation\nsudo systemctl status jellyfin\ncurl -I http://localhost:8096\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Add Jellyfin repository\nsudo rpm --import https://repo.jellyfin.org/jellyfin_team.gpg.key\n\nsudo tee /etc/yum.repos.d/jellyfin.repo > /dev/null <<EOF\n[jellyfin]\nname=Jellyfin Repository\nbaseurl=https://repo.jellyfin.org/releases/server/centos/versions/stable/server/\\$basearch/\nenabled=1\ngpgcheck=1\ngpgkey=https://repo.jellyfin.org/jellyfin_team.gpg.key\nEOF\n\n# Install Jellyfin\nsudo yum install -y jellyfin-server jellyfin-web\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload\n```\n\n## Configuration\n\n### Hardware Transcoding Setup\n```bash\n# Install hardware transcoding drivers\n# Intel Quick Sync\nsudo apt install -y intel-media-va-driver-non-free\n\n# Add jellyfin user to video group\nsudo usermod -aG video,render jellyfin\n\n# Verify hardware access\nls -la /dev/dri/\n```\n\n### NGINX Reverse Proxy\n```bash\nsudo tee /etc/nginx/sites-available/jellyfin > /dev/null <<EOF\nserver {\n    listen 80;\n    server_name jellyfin.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jellyfin.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jellyfin.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jellyfin.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:8096;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/jellyfin /etc/nginx/sites-enabled/\nsudo nginx -t && sudo systemctl reload nginx\n```\n\n## Backup and Monitoring\n\n### Backup Strategy\n```bash\nsudo tee /usr/local/bin/jellyfin-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/jellyfin\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup Jellyfin configuration and database\nsystemctl stop jellyfin\ntar -czf ${BACKUP_DIR}/jellyfin-${DATE}.tar.gz -C /var/lib/jellyfin .\nsystemctl start jellyfin\n\necho \"Jellyfin backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-backup.sh\necho \"0 2 * * * root /usr/local/bin/jellyfin-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n### Health Monitoring\n```bash\nsudo tee /usr/local/bin/jellyfin-health.sh > /dev/null <<'EOF'\n#!/bin/bash\nLOG=\"/var/log/jellyfin-health.log\"\n\nlog_message() {\n    echo \"$(date '+%Y-%m-%d %H:%M:%S') - $1\" | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active jellyfin >/dev/null; then\n    log_message \"âœ“ Jellyfin service running\"\nelse\n    log_message \"âœ— Jellyfin service not running\"\nfi\n\n# Check web interface\nif curl -f http://localhost:8096/health >/dev/null 2>&1; then\n    log_message \"âœ“ Web interface responding\"\nelse\n    log_message \"âœ— Web interface not responding\"\nfi\n\nlog_message \"Health check completed\"\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-health.sh\necho \"*/15 * * * * root /usr/local/bin/jellyfin-health.sh\" | sudo tee -a /etc/crontab\n```\n\n## Additional Resources\n\n- [Jellyfin Documentation](https://jellyfin.org/docs/)\n- [Hardware Acceleration Guide](https://jellyfin.org/docs/general/administration/hardware-acceleration/)\n- [Jellyfin Community](https://forum.jellyfin.org/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"jellyfin-installation-guide\" class=\"mobile-header\">Jellyfin Installation Guide</h1>\n<p class=\"mobile-paragraph\">Open-source media server for managing and streaming your personal media collection. Modern alternative to Plex with no licensing restrictions and complete control over your media library.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for transcoding</li>\n<li class=\"mobile-list-item\">GPU recommended for hardware transcoding (Intel Quick Sync, NVIDIA, AMD)</li>\n<li class=\"mobile-list-item\">Storage space for media library</li>\n<li class=\"mobile-list-item\">Network connectivity for remote access</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Install prerequisite packages\nsudo apt install -y curl gnupg\n\n# Add Jellyfin repository\ncurl -fsSL https://repo.jellyfin.org/install-debuntu.sh | sudo bash\n\n# Install Jellyfin\nsudo apt install -y jellyfin\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo ufw allow 8096/tcp comment &#039;Jellyfin HTTP&#039;\nsudo ufw allow 8920/tcp comment &#039;Jellyfin HTTPS&#039;\n\n# Verify installation\nsudo systemctl status jellyfin\ncurl -I http://localhost:8096</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Add Jellyfin repository\nsudo rpm --import https://repo.jellyfin.org/jellyfin_team.gpg.key\n\nsudo tee /etc/yum.repos.d/jellyfin.repo &gt; /dev/null &lt;&lt;EOF\n[jellyfin]\nname=Jellyfin Repository\nbaseurl=https://repo.jellyfin.org/releases/server/centos/versions/stable/server/\\$basearch/\nenabled=1\ngpgcheck=1\ngpgkey=https://repo.jellyfin.org/jellyfin_team.gpg.key\nEOF\n\n# Install Jellyfin\nsudo yum install -y jellyfin-server jellyfin-web\n\n# Enable and start service\nsudo systemctl enable --now jellyfin\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=8096/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"hardware-transcoding-setup\" class=\"mobile-header\">Hardware Transcoding Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Install hardware transcoding drivers\n# Intel Quick Sync\nsudo apt install -y intel-media-va-driver-non-free\n\n# Add jellyfin user to video group\nsudo usermod -aG video,render jellyfin\n\n# Verify hardware access\nls -la /dev/dri/</code></pre>\n      </div>\n    </div>\n<h3 id=\"nginx-reverse-proxy\" class=\"mobile-header\">NGINX Reverse Proxy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /etc/nginx/sites-available/jellyfin &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 80;\n    server_name jellyfin.example.com;\n    return 301 https://\\$server_name\\$request_uri;\n}\n\nserver {\n    listen 443 ssl http2;\n    server_name jellyfin.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/jellyfin.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/jellyfin.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:8096;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection &quot;upgrade&quot;;\n    }\n}\nEOF\n\nsudo ln -s /etc/nginx/sites-available/jellyfin /etc/nginx/sites-enabled/\nsudo nginx -t &amp;&amp; sudo systemctl reload nginx</code></pre>\n      </div>\n    </div>\n<h2 id=\"backup-and-monitoring\" class=\"mobile-header\">Backup and Monitoring</h2>\n<h3 id=\"backup-strategy\" class=\"mobile-header\">Backup Strategy</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/jellyfin-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/jellyfin&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\n# Backup Jellyfin configuration and database\nsystemctl stop jellyfin\ntar -czf ${BACKUP_DIR}/jellyfin-${DATE}.tar.gz -C /var/lib/jellyfin .\nsystemctl start jellyfin\n\necho &quot;Jellyfin backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-backup.sh\necho &quot;0 2 * * * root /usr/local/bin/jellyfin-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h3 id=\"health-monitoring\" class=\"mobile-header\">Health Monitoring</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\">sudo tee /usr/local/bin/jellyfin-health.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nLOG=&quot;/var/log/jellyfin-health.log&quot;\n\nlog_message() {\n    echo &quot;$(date &#039;+%Y-%m-%d %H:%M:%S&#039;) - $1&quot; | tee -a ${LOG}\n}\n\n# Check service\nif systemctl is-active jellyfin &gt;/dev/null; then\n    log_message &quot;âœ“ Jellyfin service running&quot;\nelse\n    log_message &quot;âœ— Jellyfin service not running&quot;\nfi\n\n# Check web interface\nif curl -f http://localhost:8096/health &gt;/dev/null 2&gt;&amp;1; then\n    log_message &quot;âœ“ Web interface responding&quot;\nelse\n    log_message &quot;âœ— Web interface not responding&quot;\nfi\n\nlog_message &quot;Health check completed&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/jellyfin-health.sh\necho &quot;*/15 * * * * root /usr/local/bin/jellyfin-health.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://jellyfin.org/docs/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jellyfin Documentation</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://jellyfin.org/docs/general/administration/hardware-acceleration/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Hardware Acceleration Guide</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://forum.jellyfin.org/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Jellyfin Community</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"3 min","wordCount":507,"lastBuilt":"2025-09-16T02:44:08.038Z"},{"name":"plex","displayName":"Plex","slug":"plex","description":"plex is a free and open-source media server for streaming. Plex organizes media and streams to devices, though the server is proprietary with some FOSS clients available","category":"media","language":null,"stars":0,"forks":0,"topics":[],"githubUrl":"https://github.com/howtomgr/plex","updatedAt":"2025-09-16T02:38:20Z","createdAt":"2025-09-08T03:14:20Z","readmeRaw":"# Plex Media Server Installation Guide\n\nPremium media server for organizing and streaming personal media collections. Industry-leading platform with advanced features including hardware transcoding, remote access, and mobile apps.\n\n## Prerequisites\n\n- Linux system (any modern distribution)\n- Root or sudo access\n- 4GB RAM minimum, 8GB+ recommended for transcoding\n- GPU recommended for hardware transcoding\n- Storage space for media library\n- Plex account (free signup required)\n\n## Installation\n\n### Ubuntu/Debian\n```bash\n# Update system packages\nsudo apt update && sudo apt upgrade -y\n\n# Download Plex Media Server\nwget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/debian/plexmediaserver_1.32.8.7639-fb6452ebf_amd64.deb\n\n# Install Plex\nsudo dpkg -i plexmediaserver_*.deb\nsudo apt-get install -f  # Fix any dependency issues\n\n# Enable and start service\nsudo systemctl enable --now plexmediaserver\n\n# Configure firewall\nsudo ufw allow 32400/tcp comment 'Plex Media Server'\nsudo ufw allow 1900/udp comment 'Plex DLNA'\n\n# Verify installation\nsudo systemctl status plexmediaserver\n```\n\n### RHEL/CentOS/Rocky Linux/AlmaLinux\n```bash\n# Download Plex Media Server\nwget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/redhat/plexmediaserver-1.32.8.7639-fb6452ebf.x86_64.rpm\n\n# Install Plex\nsudo yum localinstall -y plexmediaserver-*.rpm\n\n# Enable and start service\nsudo systemctl enable --now plexmediaserver\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=32400/tcp\nsudo firewall-cmd --reload\n```\n\n### Docker Installation\n```bash\n# Create Plex directories\nmkdir -p ~/plex/{config,media}\n\n# Run Plex container\ndocker run -d \\\n  --name plex \\\n  --restart unless-stopped \\\n  --net=host \\\n  -e TZ=\"America/New_York\" \\\n  -e PLEX_CLAIM=\"claim-your-token-here\" \\\n  -v ~/plex/config:/config \\\n  -v ~/plex/media:/data \\\n  --device /dev/dri:/dev/dri \\\n  plexinc/pms-docker:latest\n```\n\n## Configuration\n\n### Media Library Setup\n```bash\n# Create media directory structure\nsudo mkdir -p /media/{movies,tv-shows,music}\nsudo chown -R plex:plex /media\nsudo chmod -R 755 /media\n\n# Hardware transcoding setup\nsudo usermod -aG video plex\nls -la /dev/dri/\n```\n\n### Security and Backup\n```bash\n# NGINX reverse proxy\nsudo tee /etc/nginx/sites-available/plex > /dev/null <<EOF\nserver {\n    listen 443 ssl http2;\n    server_name plex.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/plex.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/plex.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:32400;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n}\nEOF\n\n# Backup strategy\nsudo tee /usr/local/bin/plex-backup.sh > /dev/null <<'EOF'\n#!/bin/bash\nBACKUP_DIR=\"/backup/plex\"\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\nsudo systemctl stop plexmediaserver\nsudo tar -czf ${BACKUP_DIR}/plex-${DATE}.tar.gz -C /var/lib/plexmediaserver .\nsudo systemctl start plexmediaserver\n\necho \"Plex backup completed: ${DATE}\"\nEOF\n\nsudo chmod +x /usr/local/bin/plex-backup.sh\necho \"0 1 * * * root /usr/local/bin/plex-backup.sh\" | sudo tee -a /etc/crontab\n```\n\n## Additional Resources\n\n- [Plex Support](https://support.plex.tv/)\n- [Plex Installation Guide](https://support.plex.tv/articles/200288586-installation/)\n\n---\n\n**Note:** This guide is part of the [HowToMgr](https://howtomgr.github.io) collection.","readmeHtml":"<h1 id=\"plex-media-server-installation-guide\" class=\"mobile-header\">Plex Media Server Installation Guide</h1>\n<p class=\"mobile-paragraph\">Premium media server for organizing and streaming personal media collections. Industry-leading platform with advanced features including hardware transcoding, remote access, and mobile apps.</p>\n<h2 id=\"prerequisites\" class=\"mobile-header\">Prerequisites</h2>\n<li class=\"mobile-list-item\">Linux system (any modern distribution)</li>\n<li class=\"mobile-list-item\">Root or sudo access</li>\n<li class=\"mobile-list-item\">4GB RAM minimum, 8GB+ recommended for transcoding</li>\n<li class=\"mobile-list-item\">GPU recommended for hardware transcoding</li>\n<li class=\"mobile-list-item\">Storage space for media library</li>\n<li class=\"mobile-list-item\">Plex account (free signup required)</li>\n<h2 id=\"installation\" class=\"mobile-header\">Installation</h2>\n<h3 id=\"ubuntudebian\" class=\"mobile-header\">Ubuntu/Debian</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Update system packages\nsudo apt update &amp;&amp; sudo apt upgrade -y\n\n# Download Plex Media Server\nwget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/debian/plexmediaserver_1.32.8.7639-fb6452ebf_amd64.deb\n\n# Install Plex\nsudo dpkg -i plexmediaserver_*.deb\nsudo apt-get install -f  # Fix any dependency issues\n\n# Enable and start service\nsudo systemctl enable --now plexmediaserver\n\n# Configure firewall\nsudo ufw allow 32400/tcp comment &#039;Plex Media Server&#039;\nsudo ufw allow 1900/udp comment &#039;Plex DLNA&#039;\n\n# Verify installation\nsudo systemctl status plexmediaserver</code></pre>\n      </div>\n    </div>\n<h3 id=\"rhelcentosrocky-linuxalmalinux\" class=\"mobile-header\">RHEL/CentOS/Rocky Linux/AlmaLinux</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Download Plex Media Server\nwget https://downloads.plex.tv/plex-media-server-new/1.32.8.7639-fb6452ebf/redhat/plexmediaserver-1.32.8.7639-fb6452ebf.x86_64.rpm\n\n# Install Plex\nsudo yum localinstall -y plexmediaserver-*.rpm\n\n# Enable and start service\nsudo systemctl enable --now plexmediaserver\n\n# Configure firewall\nsudo firewall-cmd --permanent --add-port=32400/tcp\nsudo firewall-cmd --reload</code></pre>\n      </div>\n    </div>\n<h3 id=\"docker-installation\" class=\"mobile-header\">Docker Installation</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create Plex directories\nmkdir -p ~/plex/{config,media}\n\n# Run Plex container\ndocker run -d \\\n  --name plex \\\n  --restart unless-stopped \\\n  --net=host \\\n  -e TZ=&quot;America/New_York&quot; \\\n  -e PLEX_CLAIM=&quot;claim-your-token-here&quot; \\\n  -v ~/plex/config:/config \\\n  -v ~/plex/media:/data \\\n  --device /dev/dri:/dev/dri \\\n  plexinc/pms-docker:latest</code></pre>\n      </div>\n    </div>\n<h2 id=\"configuration\" class=\"mobile-header\">Configuration</h2>\n<h3 id=\"media-library-setup\" class=\"mobile-header\">Media Library Setup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># Create media directory structure\nsudo mkdir -p /media/{movies,tv-shows,music}\nsudo chown -R plex:plex /media\nsudo chmod -R 755 /media\n\n# Hardware transcoding setup\nsudo usermod -aG video plex\nls -la /dev/dri/</code></pre>\n      </div>\n    </div>\n<h3 id=\"security-and-backup\" class=\"mobile-header\">Security and Backup</h3>\n<div class=\"mobile-code-block\" data-language=\"bash\">\n      <div class=\"mobile-code-header\">\n        <span class=\"mobile-code-language\">bash</span>\n        <button class=\"mobile-copy-button\" onclick=\"copyCode(this)\" title=\"Copy code\">\n          <span class=\"copy-icon\">ðŸ“‹</span>\n          <span class=\"copy-text\">Copy</span>\n        </button>\n      </div>\n      <div class=\"mobile-code-content\">\n        <pre><code class=\"language-bash\"># NGINX reverse proxy\nsudo tee /etc/nginx/sites-available/plex &gt; /dev/null &lt;&lt;EOF\nserver {\n    listen 443 ssl http2;\n    server_name plex.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/plex.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/plex.example.com/privkey.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:32400;\n        proxy_set_header Host \\$host;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto \\$scheme;\n    }\n}\nEOF\n\n# Backup strategy\nsudo tee /usr/local/bin/plex-backup.sh &gt; /dev/null &lt;&lt;&#039;EOF&#039;\n#!/bin/bash\nBACKUP_DIR=&quot;/backup/plex&quot;\nDATE=$(date +%Y%m%d_%H%M%S)\n\nmkdir -p ${BACKUP_DIR}\n\nsudo systemctl stop plexmediaserver\nsudo tar -czf ${BACKUP_DIR}/plex-${DATE}.tar.gz -C /var/lib/plexmediaserver .\nsudo systemctl start plexmediaserver\n\necho &quot;Plex backup completed: ${DATE}&quot;\nEOF\n\nsudo chmod +x /usr/local/bin/plex-backup.sh\necho &quot;0 1 * * * root /usr/local/bin/plex-backup.sh&quot; | sudo tee -a /etc/crontab</code></pre>\n      </div>\n    </div>\n<h2 id=\"additional-resources\" class=\"mobile-header\">Additional Resources</h2>\n<li class=\"mobile-list-item\"><a href=\"https://support.plex.tv/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Plex Support</a></li>\n<li class=\"mobile-list-item\"><a href=\"https://support.plex.tv/articles/200288586-installation/\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">Plex Installation Guide</a></li>\n<p class=\"mobile-paragraph\">---</p>\n<p class=\"mobile-paragraph\"><strong>Note:</strong> This guide is part of the <a href=\"https://howtomgr.github.io\" target=\"_blank\" rel=\"noopener\" class=\"mobile-link\">HowToMgr</a> collection.</p>","readTime":"2 min","wordCount":389,"lastBuilt":"2025-09-16T02:44:00.221Z"}]},"__N_SSG":true}